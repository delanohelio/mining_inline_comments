{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MzA0ODc5", "number": 659, "title": "Create a Camel ReactiveStreams extension (initial implementation)", "bodyText": "Fixes #304", "createdAt": "2020-01-23T11:05:53Z", "url": "https://github.com/apache/camel-quarkus/pull/659", "merged": true, "mergeCommit": {"oid": "fc29217818caa3d6a477252e5850bf197d05f4ae"}, "closed": true, "closedAt": "2020-01-23T14:58:05Z", "author": {"login": "lburgazzoli"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9IVrtAFqTM0NzIxNjQzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9K7xlgFqTM0NzMyMTgwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjE2NDM2", "url": "https://github.com/apache/camel-quarkus/pull/659#pullrequestreview-347216436", "createdAt": "2020-01-23T11:07:14Z", "commit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MjU2MTQx", "url": "https://github.com/apache/camel-quarkus/pull/659#pullrequestreview-347256141", "createdAt": "2020-01-23T12:22:48Z", "commit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMjo0OFrOFg8URg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo0NDoxNFrOFg82oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Njk4Mg==", "bodyText": "Is this really necessary? If so we'll need to whitelist in https://github.com/apache/camel-quarkus/pull/647/files/36102f2f069a3e3ad9aa27255b2c6b6f80d78b70#diff-87b8f9583824da15e8833362367682ecR79", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370086982", "createdAt": "2020-01-23T12:22:48Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MDg2NQ==", "bodyText": "Why optional? Are there alternative implementations already now (or planned in near future)? Are we not unnecessarily overcomplicating it?", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370090865", "createdAt": "2020-01-23T12:32:28Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));\n+    }\n+\n+    @BuildStep(onlyIf = Flags.MainEnabled.class)\n+    void beans(BuildProducer<AdditionalBeanBuildItem> beanProducer) {\n+        beanProducer.produce(AdditionalBeanBuildItem.unremovableOf(ReactiveStreamsProducers.class));\n+    }\n+\n+    @Overridable\n+    @BuildStep\n+    @Record(value = ExecutionTime.STATIC_INIT, optional = true)\n+    public ReactiveStreamsServiceFactoryBuildItem defaultReactiveStreamsServiceFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MTM4Mg==", "bodyText": "Injectable beans should be documented.", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370091382", "createdAt": "2020-01-23T12:33:40Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/deployment/src/main/java/org/apache/camel/quarkus/component/reactive/streams/deployment/ReactiveStreamsProcessor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams.deployment;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Overridable;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsProducers;\n+import org.apache.camel.quarkus.component.reactive.streams.ReactiveStreamsRecorder;\n+import org.apache.camel.quarkus.core.Flags;\n+import org.apache.camel.quarkus.core.deployment.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelContextBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+\n+class ReactiveStreamsProcessor {\n+    private static final String SCHEME = \"reactive-streams\";\n+    private static final String FEATURE = \"camel-reactive-streams\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(SCHEME));\n+    }\n+\n+    @BuildStep\n+    void reflectiveCLasses(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(new ReflectiveClassBuildItem(\n+                true,\n+                false,\n+                \"org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration\"));\n+    }\n+\n+    @BuildStep(onlyIf = Flags.MainEnabled.class)\n+    void beans(BuildProducer<AdditionalBeanBuildItem> beanProducer) {\n+        beanProducer.produce(AdditionalBeanBuildItem.unremovableOf(ReactiveStreamsProducers.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5MjMxMA==", "bodyText": "Could the class be static maybe?", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370092310", "createdAt": "2020-01-23T12:35:50Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsServiceFactory;\n+import org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsServiceFactory;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+@Recorder\n+public class ReactiveStreamsRecorder {\n+    public RuntimeValue<CamelReactiveStreamsServiceFactory> createDefaultReactiveStreamsServiceFactory() {\n+        return new RuntimeValue<>(new DefaultCamelReactiveStreamsServiceFactory());\n+    }\n+\n+    public RuntimeValue<ReactiveStreamsComponent> createReactiveStreamsComponent(\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+        return new RuntimeValue<>(new QuarkusReactiveStreamsComponent(serviceFactory.getValue()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void publishCamelReactiveStreamsService(\n+            BeanContainer beanContainer,\n+            RuntimeValue<CamelContext> camelContext,\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+\n+        // register to the container\n+        beanContainer.instance(ReactiveStreamsProducers.class).init(\n+                camelContext.getValue(),\n+                serviceFactory.getValue());\n+    }\n+\n+    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NTI5NA==", "bodyText": "It could perhaps be made less deadlock-prone using synchronize(this.lock) (the lock being from ServiceSupport)?", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370095294", "createdAt": "2020-01-23T12:43:02Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/runtime/src/main/java/org/apache/camel/quarkus/component/reactive/streams/ReactiveStreamsRecorder.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.reactive.streams;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;\n+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsServiceFactory;\n+import org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsServiceFactory;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+@Recorder\n+public class ReactiveStreamsRecorder {\n+    public RuntimeValue<CamelReactiveStreamsServiceFactory> createDefaultReactiveStreamsServiceFactory() {\n+        return new RuntimeValue<>(new DefaultCamelReactiveStreamsServiceFactory());\n+    }\n+\n+    public RuntimeValue<ReactiveStreamsComponent> createReactiveStreamsComponent(\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+        return new RuntimeValue<>(new QuarkusReactiveStreamsComponent(serviceFactory.getValue()));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void publishCamelReactiveStreamsService(\n+            BeanContainer beanContainer,\n+            RuntimeValue<CamelContext> camelContext,\n+            RuntimeValue<CamelReactiveStreamsServiceFactory> serviceFactory) {\n+\n+        // register to the container\n+        beanContainer.instance(ReactiveStreamsProducers.class).init(\n+                camelContext.getValue(),\n+                serviceFactory.getValue());\n+    }\n+\n+    private class QuarkusReactiveStreamsComponent extends ReactiveStreamsComponent {\n+        private final CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory;\n+        private CamelReactiveStreamsService reactiveStreamService;\n+\n+        public QuarkusReactiveStreamsComponent(CamelReactiveStreamsServiceFactory reactiveStreamServiceFactory) {\n+            this.reactiveStreamServiceFactory = reactiveStreamServiceFactory;\n+        }\n+\n+        @Override\n+        public synchronized CamelReactiveStreamsService getReactiveStreamsService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA5NTc3Nw==", "bodyText": "I think 1.0.0 is going to be the next?", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370095777", "createdAt": "2020-01-23T12:44:14Z", "author": {"login": "ppalaga"}, "path": "extensions/reactive-streams/runtime/pom.xml", "diffHunk": "@@ -0,0 +1,82 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.camel.quarkus</groupId>\n+        <artifactId>camel-quarkus-reactive-streams-parent</artifactId>\n+        <version>1.1.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <artifactId>camel-quarkus-reactive-streams</artifactId>\n+    <name>Camel Quarkus :: Reactive Streams :: Runtime</name>\n+\n+    <properties>\n+        <firstVersion>1.2.0</firstVersion>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08760814a9f079adbf0149df07fec15c54ba1b7e", "author": {"user": {"login": "lburgazzoli", "name": "Luca Burgazzoli"}}, "url": "https://github.com/apache/camel-quarkus/commit/08760814a9f079adbf0149df07fec15c54ba1b7e", "committedDate": "2020-01-23T11:05:20Z", "message": "Create a Camel ReactiveStreams extension #304"}, "afterCommit": {"oid": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "author": {"user": {"login": "lburgazzoli", "name": "Luca Burgazzoli"}}, "url": "https://github.com/apache/camel-quarkus/commit/16f831dc410cecd135644a5f4b7dcf7468a9f651", "committedDate": "2020-01-23T13:44:16Z", "message": "Create a Camel ReactiveStreams extension #304"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzA1Njky", "url": "https://github.com/apache/camel-quarkus/pull/659#pullrequestreview-347305692", "createdAt": "2020-01-23T13:46:30Z", "commit": {"oid": "16f831dc410cecd135644a5f4b7dcf7468a9f651"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NjozMFrOFg-oLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzo0NjozMFrOFg-oLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyNDg0NQ==", "bodyText": "Still 1.2.0. Could you please regen?", "url": "https://github.com/apache/camel-quarkus/pull/659#discussion_r370124845", "createdAt": "2020-01-23T13:46:30Z", "author": {"login": "ppalaga"}, "path": "docs/modules/ROOT/pages/list-of-camel-quarkus-extensions.adoc", "diffHunk": "@@ -141,6 +141,9 @@ Number of Camel components: 60 in 51 JAR artifacts (0 deprecated)\n | xref:extensions/platform-http.adoc[Platform HTTP] (camel-quarkus-platform-http) +\n `platform-http:path` | 0.3.0 | HTTP service leveraging existing runtime platform HTTP server\n \n+| link:https://camel.apache.org/components/latest/reactive-streams-component.html[Reactive Streams] (camel-quarkus-reactive-streams) +\n+`reactive-streams:stream` | 1.2.0 | Reactive Camel using reactive streams", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16f831dc410cecd135644a5f4b7dcf7468a9f651"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "author": {"user": {"login": "lburgazzoli", "name": "Luca Burgazzoli"}}, "url": "https://github.com/apache/camel-quarkus/commit/9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "committedDate": "2020-01-23T13:49:50Z", "message": "Create a Camel ReactiveStreams extension #304"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16f831dc410cecd135644a5f4b7dcf7468a9f651", "author": {"user": {"login": "lburgazzoli", "name": "Luca Burgazzoli"}}, "url": "https://github.com/apache/camel-quarkus/commit/16f831dc410cecd135644a5f4b7dcf7468a9f651", "committedDate": "2020-01-23T13:44:16Z", "message": "Create a Camel ReactiveStreams extension #304"}, "afterCommit": {"oid": "9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "author": {"user": {"login": "lburgazzoli", "name": "Luca Burgazzoli"}}, "url": "https://github.com/apache/camel-quarkus/commit/9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe", "committedDate": "2020-01-23T13:49:50Z", "message": "Create a Camel ReactiveStreams extension #304"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzIxODAx", "url": "https://github.com/apache/camel-quarkus/pull/659#pullrequestreview-347321801", "createdAt": "2020-01-23T14:08:40Z", "commit": {"oid": "9a6ccb979a3eb6b64b84551de8024dbf8cc62ffe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2607, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}