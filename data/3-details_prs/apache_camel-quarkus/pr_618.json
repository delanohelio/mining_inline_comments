{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTY2MjM2", "number": 618, "title": "Fix #617 Registerable and discoverable Camel services", "bodyText": "", "createdAt": "2020-01-14T10:44:57Z", "url": "https://github.com/apache/camel-quarkus/pull/618", "merged": true, "mergeCommit": {"oid": "a2e1dc2984c484b817299e8cef0ac27ddd2511d2"}, "closed": true, "closedAt": "2020-01-20T21:06:02Z", "author": {"login": "ppalaga"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb69SkvABqjI5NTUzNTgxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8S4xOgFqTM0NTUyNzM1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9079f97dc4a08e43fdb4c01e40cd474e38a4ed57", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/9079f97dc4a08e43fdb4c01e40cd474e38a4ed57", "committedDate": "2020-01-14T10:43:38Z", "message": "Fix #Build time FactoryFinders"}, "afterCommit": {"oid": "38439849e9cc41ae230af7aafda455556c010098", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/38439849e9cc41ae230af7aafda455556c010098", "committedDate": "2020-01-16T17:05:38Z", "message": "Registerable and discoverable Camel services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDgxNjE0", "url": "https://github.com/apache/camel-quarkus/pull/618#pullrequestreview-344081614", "createdAt": "2020-01-16T17:17:22Z", "commit": {"oid": "38439849e9cc41ae230af7aafda455556c010098"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxNzoyM1rOFehS1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzoxNzoyM1rOFehS1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU0NzA5NQ==", "bodyText": "we need to fine tune language and data-format as we can store into the registry only singleton services (this requires also some changes to the FastCamelContext as it assumes languages and dataformats are stored in the registry)", "url": "https://github.com/apache/camel-quarkus/pull/618#discussion_r367547095", "createdAt": "2020-01-16T17:17:23Z", "author": {"login": "lburgazzoli"}, "path": "extensions/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/BuildProcessor.java", "diffHunk": "@@ -128,9 +130,40 @@ void coreServiceFilter(BuildProducer<CamelServiceFilterBuildItem> filterBuildIte\n         }\n \n         @BuildStep\n-        void serviceInfoTransformers(BuildProducer<CamelServiceInfoTransformerBuildItem> mapperBuildItems) {\n-            mapperBuildItems.produce(\n-                    new CamelServiceInfoTransformerBuildItem(CamelServiceInfoTransformers::configurer));\n+        void coreServices(\n+                ApplicationArchivesBuildItem archives,\n+                BuildProducer<CamelServiceBuildItem> services) {\n+\n+            /* Registered only */\n+            CamelSupport.propertyFiles(\n+                    archives,\n+                    \"META-INF/services/org/apache/camel/component\",\n+                    \"META-INF/services/org/apache/camel/language\",\n+                    \"META-INF/services/org/apache/camel/dataformat\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38439849e9cc41ae230af7aafda455556c010098"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MDkxNDg4", "url": "https://github.com/apache/camel-quarkus/pull/618#pullrequestreview-344091488", "createdAt": "2020-01-16T17:33:22Z", "commit": {"oid": "38439849e9cc41ae230af7aafda455556c010098"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozMzoyM1rOFehwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzozMzoyM1rOFehwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1NDY4NA==", "bodyText": "As future evolution, may be better not to expose such instances to the user through the registry, maybe better to try to bind them to the components at build time", "url": "https://github.com/apache/camel-quarkus/pull/618#discussion_r367554684", "createdAt": "2020-01-16T17:33:23Z", "author": {"login": "lburgazzoli"}, "path": "extensions/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/BuildProcessor.java", "diffHunk": "@@ -128,9 +130,40 @@ void coreServiceFilter(BuildProducer<CamelServiceFilterBuildItem> filterBuildIte\n         }\n \n         @BuildStep\n-        void serviceInfoTransformers(BuildProducer<CamelServiceInfoTransformerBuildItem> mapperBuildItems) {\n-            mapperBuildItems.produce(\n-                    new CamelServiceInfoTransformerBuildItem(CamelServiceInfoTransformers::configurer));\n+        void coreServices(\n+                ApplicationArchivesBuildItem archives,\n+                BuildProducer<CamelServiceBuildItem> services) {\n+\n+            /* Registered only */\n+            CamelSupport.propertyFiles(\n+                    archives,\n+                    \"META-INF/services/org/apache/camel/component\",\n+                    \"META-INF/services/org/apache/camel/language\",\n+                    \"META-INF/services/org/apache/camel/dataformat\")\n+                    .filter(entry -> entry.getValue().getProperty(\"class\") != null)\n+                    .map(entry -> CamelServiceBuildItem.registeredOnly(entry.getKey(), entry.getValue().getProperty(\"class\")))\n+                    .forEach(services::produce);\n+\n+            /* Configurers need some name transformation */\n+            CamelSupport.propertyFiles(\n+                    archives,\n+                    \"META-INF/services/org/apache/camel/configurer\")\n+                    .filter(entry -> entry.getValue().getProperty(\"class\") != null)\n+                    .map(entry -> CamelServiceBuildItem.registeredOnly(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38439849e9cc41ae230af7aafda455556c010098"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38439849e9cc41ae230af7aafda455556c010098", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/38439849e9cc41ae230af7aafda455556c010098", "committedDate": "2020-01-16T17:05:38Z", "message": "Registerable and discoverable Camel services"}, "afterCommit": {"oid": "d82e823d5bcafc7424c32bca9a954b2042010cdf", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/d82e823d5bcafc7424c32bca9a954b2042010cdf", "committedDate": "2020-01-17T15:15:15Z", "message": "Fix #617 Registerable and discoverable Camel services"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d82e823d5bcafc7424c32bca9a954b2042010cdf", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/d82e823d5bcafc7424c32bca9a954b2042010cdf", "committedDate": "2020-01-17T15:15:15Z", "message": "Fix #617 Registerable and discoverable Camel services"}, "afterCommit": {"oid": "4720897b436fe540f7ac6b55e5209d35f5a6ff49", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/4720897b436fe540f7ac6b55e5209d35f5a6ff49", "committedDate": "2020-01-17T15:26:00Z", "message": "Fix #617 Registerable and discoverable Camel services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Njc4Njgw", "url": "https://github.com/apache/camel-quarkus/pull/618#pullrequestreview-344678680", "createdAt": "2020-01-17T16:03:22Z", "commit": {"oid": "4720897b436fe540f7ac6b55e5209d35f5a6ff49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowMzoyMlrOFe9p3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNjowMzoyMlrOFe9p3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMTc0Mg==", "bodyText": "not a huge issue in our case but my understanding is that invoking build() multiple time on the same builder should produce the same result", "url": "https://github.com/apache/camel-quarkus/pull/618#discussion_r368011742", "createdAt": "2020-01-17T16:03:22Z", "author": {"login": "lburgazzoli"}, "path": "extensions/core/deployment/src/main/java/org/apache/camel/quarkus/core/deployment/util/PathFilter.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.core.deployment.util;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.apache.camel.util.AntPathMatcher;\n+import org.apache.camel.util.ObjectHelper;\n+import org.jboss.jandex.DotName;\n+\n+/**\n+ * A utility able to filter resource paths using Ant-like includes and excludes.\n+ */\n+public class PathFilter {\n+    private final AntPathMatcher matcher = new AntPathMatcher();\n+    private final List<String> includePatterns;\n+    private final List<String> excludePatterns;\n+    private final Predicate<String> stringPredicate;\n+\n+    PathFilter(List<String> includePatterns, List<String> excludePatterns) {\n+        this.includePatterns = includePatterns;\n+        this.excludePatterns = excludePatterns;\n+\n+        if (ObjectHelper.isEmpty(excludePatterns) && ObjectHelper.isEmpty(includePatterns)) {\n+            this.stringPredicate = path -> true;\n+        } else {\n+            this.stringPredicate = path -> {\n+                path = sanitize(path);\n+                // same logic as  org.apache.camel.main.DefaultRoutesCollector so exclude\n+                // take precedence over include\n+                for (String part : excludePatterns) {\n+                    if (matcher.match(part, path)) {\n+                        return false;\n+                    }\n+                }\n+                for (String part : includePatterns) {\n+                    if (matcher.match(part, path)) {\n+                        return true;\n+                    }\n+                }\n+                return ObjectHelper.isEmpty(includePatterns);\n+            };\n+        }\n+        ;\n+    }\n+\n+    public Predicate<String> asStringPredicate() {\n+        return stringPredicate;\n+    }\n+\n+    public Predicate<DotName> asDotNamePredicate() {\n+        if (ObjectHelper.isEmpty(excludePatterns) && ObjectHelper.isEmpty(includePatterns)) {\n+            return dotName -> true;\n+        } else {\n+            return dotName -> stringPredicate.test(dotName.toString().replace('.', '/'));\n+        }\n+    }\n+\n+    public Predicate<Path> asPathPredicate() {\n+        if (ObjectHelper.isEmpty(excludePatterns) && ObjectHelper.isEmpty(includePatterns)) {\n+            return path -> true;\n+        } else {\n+            return path -> stringPredicate.test(sanitize(path.toString()));\n+        }\n+    }\n+\n+    static String sanitize(String path) {\n+        path = path.trim();\n+        return (!path.isEmpty() && path.charAt(0) == '/')\n+                ? path.substring(1)\n+                : path;\n+    }\n+\n+    public static class Builder {\n+        private List<String> includePatterns = new ArrayList<String>();\n+        private List<String> excludePatterns = new ArrayList<String>();\n+\n+        public Builder patterns(boolean isInclude, Collection<String> patterns) {\n+            if (isInclude) {\n+                include(patterns);\n+            } else {\n+                exclude(patterns);\n+            }\n+            return this;\n+        }\n+\n+        public Builder include(String pattern) {\n+            includePatterns.add(sanitize(pattern));\n+            return this;\n+        }\n+\n+        public Builder include(Collection<String> patterns) {\n+            patterns.stream().map(PathFilter::sanitize).forEach(includePatterns::add);\n+            return this;\n+        }\n+\n+        public Builder include(Optional<? extends Collection<String>> patterns) {\n+            patterns.ifPresent(ps -> include(ps));\n+            return this;\n+        }\n+\n+        public Builder exclude(String pattern) {\n+            excludePatterns.add(sanitize(pattern));\n+            return this;\n+        }\n+\n+        public Builder exclude(Collection<String> patterns) {\n+            patterns.stream().map(PathFilter::sanitize).forEach(excludePatterns::add);\n+            return this;\n+        }\n+\n+        public Builder exclude(Optional<? extends Collection<String>> patterns) {\n+            patterns.ifPresent(ps -> exclude(ps));\n+            return this;\n+        }\n+\n+        public Builder combine(Builder other) {\n+            includePatterns.addAll(other.includePatterns);\n+            excludePatterns.addAll(other.excludePatterns);\n+            return this;\n+        }\n+\n+        public PathFilter build() {\n+            final List<String> incl = includePatterns;\n+            includePatterns = null; // avoid leaking the collection trough reuse of the builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4720897b436fe540f7ac6b55e5209d35f5a6ff49"}, "originalPosition": 144}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73f59ef70a6eec75b99823021d74dc216ade2be0", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/73f59ef70a6eec75b99823021d74dc216ade2be0", "committedDate": "2020-01-17T16:53:29Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}, "afterCommit": {"oid": "671803a6dd20fe79f1ead3bf4f3f0d145b0e0f0b", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/671803a6dd20fe79f1ead3bf4f3f0d145b0e0f0b", "committedDate": "2020-01-17T17:10:46Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "671803a6dd20fe79f1ead3bf4f3f0d145b0e0f0b", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/671803a6dd20fe79f1ead3bf4f3f0d145b0e0f0b", "committedDate": "2020-01-17T17:10:46Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}, "afterCommit": {"oid": "7e11340ec7196c16aafcaed313f6090568fabe4e", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/7e11340ec7196c16aafcaed313f6090568fabe4e", "committedDate": "2020-01-18T11:03:27Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2597d800d6ce69fc1ec671ded53511c7ad3989c2", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/2597d800d6ce69fc1ec671ded53511c7ad3989c2", "committedDate": "2020-01-20T14:56:57Z", "message": "Revert \"Fix #620 Introduce CamelServiceInfo transformers\"\n\nThis reverts commit e6920d014fec0ea4ec52ab527fdd0d1ac05ad7ee.\n\nWe decided to adopt another approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6315286e379845e8c33f733b52b68847a26c6e9", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/c6315286e379845e8c33f733b52b68847a26c6e9", "committedDate": "2020-01-20T14:56:57Z", "message": "Avoid using field injection in the core NativeImageProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1645a33ec868e4aa8f3e657e060e1c1d05fb6818", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/1645a33ec868e4aa8f3e657e060e1c1d05fb6818", "committedDate": "2020-01-20T16:24:48Z", "message": "Fix #617 Registerable and discoverable Camel services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869af4136b086cde0ac914c54d162d1dbff1ce1c", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/869af4136b086cde0ac914c54d162d1dbff1ce1c", "committedDate": "2020-01-20T16:24:48Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e11340ec7196c16aafcaed313f6090568fabe4e", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/7e11340ec7196c16aafcaed313f6090568fabe4e", "committedDate": "2020-01-18T11:03:27Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}, "afterCommit": {"oid": "869af4136b086cde0ac914c54d162d1dbff1ce1c", "author": {"user": {"login": "ppalaga", "name": "Peter Palaga"}}, "url": "https://github.com/apache/camel-quarkus/commit/869af4136b086cde0ac914c54d162d1dbff1ce1c", "committedDate": "2020-01-20T16:24:48Z", "message": "Do not register languages and dataformats so that they can be used in parallel with conflicting configs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTI3MzU2", "url": "https://github.com/apache/camel-quarkus/pull/618#pullrequestreview-345527356", "createdAt": "2020-01-20T20:50:41Z", "commit": {"oid": "869af4136b086cde0ac914c54d162d1dbff1ce1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2594, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}