{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjM5NDYy", "number": 1050, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNzoxMVrODvo0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozMTowMVrODxuhQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjc4NDU2OnYy", "diffSide": "RIGHT", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjoxNzoxMVrOGCLdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo0ODo0MlrOGCMyeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzk4NQ==", "bodyText": "I think extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE)); deserves a separate @BuildStep method. The code would be easier to follow that way.\n@lburgazzoli would even say that all *Native*BuildItem s should be produced in a separate InfluxdbNativeProcessor class. I do not find it necessary as long as there is a just a few methods here.", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404937985", "createdAt": "2020-04-07T16:17:11Z", "author": {"login": "ppalaga"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -16,32 +16,27 @@\n  */\n package org.apache.camel.quarkus.component.influxdb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n \n class InfluxdbProcessor {\n-    private static final Logger LOG = Logger.getLogger(InfluxdbProcessor.class);\n \n     private static final String FEATURE = \"camel-influxdb\";\n \n     @BuildStep\n-    FeatureBuildItem feature() {\n+    FeatureBuildItem feature(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f27181cc0e811e93a4c6a313b99443b9cba571a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTg2NQ==", "bodyText": "I'm not so strict, you have some freedom :)", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404959865", "createdAt": "2020-04-07T16:48:42Z", "author": {"login": "lburgazzoli"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -16,32 +16,27 @@\n  */\n package org.apache.camel.quarkus.component.influxdb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n \n class InfluxdbProcessor {\n-    private static final Logger LOG = Logger.getLogger(InfluxdbProcessor.class);\n \n     private static final String FEATURE = \"camel-influxdb\";\n \n     @BuildStep\n-    FeatureBuildItem feature() {\n+    FeatureBuildItem feature(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzk4NQ=="}, "originalCommit": {"oid": "1f27181cc0e811e93a4c6a313b99443b9cba571a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjg2MTI2OnYy", "diffSide": "RIGHT", "path": "integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNDowOVrOGCMM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNDowOVrOGCMM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MDI0NQ==", "bodyText": "I think we do not need a new connection for each request. It could be done in an CDI event listener, something like\nvoid onStart(@Observes org.apache.camel.quarkus.core.CamelMainEvents.BeforeConfigure ev) {\n        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);\n    }\n\nWe might perhaps disconnect on BeforeStop", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404950245", "createdAt": "2020-04-07T16:34:09Z", "author": {"login": "ppalaga"}, "path": "integration-tests/influxdb/src/main/java/org/apache/camel/quarkus/component/influxdb/it/InfluxdbResource.java", "diffHunk": "@@ -33,19 +36,28 @@\n \n     private static final Logger LOG = Logger.getLogger(InfluxdbResource.class);\n \n-    private static final String COMPONENT_INFLUXDB = \"influxdb\";\n+    public static final String INFLUXDB_CONNECTION_PROPERTY = \"quarkus.influxdb.connection.url\";\n+    public static final String INFLUXDB_VERSION = \"1.7.10\";\n+\n+    private static final String INFLUXDB_CONNECTION = \"http://{{\" + INFLUXDB_CONNECTION_PROPERTY + \"}}/\";\n+    private static final String INFLUXDB_CONNECTION_NAME = \"influxDb_connection\";\n+    private static final String INFLUXDB_ENDPOINT_URL = \"influxdb:\" + INFLUXDB_CONNECTION_NAME;\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n     @Inject\n     CamelContext context;\n \n-    @Path(\"/load/component/influxdb\")\n+    @Path(\"/ping\")\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    public Response loadComponentInfluxdb() throws Exception {\n-        /* This is an autogenerated test */\n-        if (context.getComponent(COMPONENT_INFLUXDB) != null) {\n-            return Response.ok().build();\n-        }\n-        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_INFLUXDB);\n-        return Response.status(500, COMPONENT_INFLUXDB + \" could not be loaded from the Camel context\").build();\n+    public String pingVersion() throws Exception {\n+        InfluxDB influxDB = InfluxDBFactory.connect(context.getPropertiesComponent().parseUri(INFLUXDB_CONNECTION));\n+        context.getRegistry().bind(INFLUXDB_CONNECTION_NAME, influxDB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f27181cc0e811e93a4c6a313b99443b9cba571a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjg2OTQ0OnYy", "diffSide": "RIGHT", "path": "integration-tests/influxdb/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNjoxOVrOGCMSPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozNjoxOVrOGCMSPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTYxMw==", "bodyText": "An empty props file can be removed.", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r404951613", "createdAt": "2020-04-07T16:36:19Z", "author": {"login": "ppalaga"}, "path": "integration-tests/influxdb/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f27181cc0e811e93a4c6a313b99443b9cba571a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUzMzE0OnYy", "diffSide": "RIGHT", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxNDo0OVrOGDfuCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyODowM1rOGDiWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ==", "bodyText": "@ppalaga , @lburgazzoli\nIf I understand your previous comments, this should be the desired solution - do not name classes by one, but use the whole package name.\nUnfortunately this is not working in native mode.\nIn JVM mode I can see that search on the index is correct and returns:\n\n[org.influxdb.dto.BatchPoints, org.influxdb.dto.BoundParameterQuery, org.influxdb.dto.Point, org.influxdb.dto.Pong, org.influxdb.dto.Query, org.influxdb.dto.QueryResult]\n\nIs it possible that index is not updated by the new build item from previous step (in native), because the desired classes are added in previous step into index?", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406318601", "createdAt": "2020-04-09T16:14:49Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMzc3Nw==", "bodyText": "Strange. You may want to add .peek(System.out::println) before .filter() to see whether the inner classes are in the index. If they appear in the log, that probably means that ci.name().prefix() returns something else than you expect.", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406323777", "createdAt": "2020-04-09T16:23:18Z", "author": {"login": "ppalaga"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTk5NQ==", "bodyText": "btw the search should not appear neither in jvm nor in native mode as it happens during augmentation", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406325995", "createdAt": "2020-04-09T16:26:47Z", "author": {"login": "lburgazzoli"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyODY4Mg==", "bodyText": "I've tried peek, as suggested - but in console there are noin influxdb classes present.\nI was able to debug this method in JVM mode -> to be sure, that filter works correctly and it is.\nIf I disable step with influxdb adition in jvm mode, it behaves in the same way as native (no ivfluxdb classes found) -> IMO index is not updated by added dependency of influxdb. (which could be caused, that I haven't defined any kind of dependency between these 2 steps )", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406328682", "createdAt": "2020-04-09T16:31:00Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNjIwNg==", "bodyText": "you have a dependency as you require CombinedIndexBuildItem which of course need to collect all the IndexDependencyBuildItem.", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406336206", "createdAt": "2020-04-09T16:43:38Z", "author": {"login": "lburgazzoli"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTc3MQ==", "bodyText": "Problem was caused by the fact, that same required classes are definned as inner classes therefore they have different prefix (e.g. org.influxdb.dto.QueryResult$Series). It works with modification of filter to use 'startsWith' instead of 'equals'.", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406361771", "createdAt": "2020-04-09T17:28:03Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.influxdb.dto.QueryResult;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static DotName INFLUXDB_DTO_PACKAGE = DotName.createSimple(\"org.influxdb.dto\");\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+\n+    @BuildStep\n+    IndexDependencyBuildItem registerDependencyForIndex() {\n+        return new IndexDependencyBuildItem(\"org.influxdb\", \"influxdb-java\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+//        IndexView index = combinedIndex.getIndex();\n+//\n+//        String[] dtos = index.getKnownClasses().stream()\n+//                .filter(ci -> ci.name().prefix().equals(INFLUXDB_DTO_PACKAGE))\n+//                .map(ci -> ci.name().toString())\n+//                .sorted()\n+//                .toArray(String[]::new);\n+//\n+//        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODYwMQ=="}, "originalCommit": {"oid": "e3ba53764029b80d0ee854dacf3d7763871bd6d8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjEzMzE3OnYy", "diffSide": "RIGHT", "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTowMjo0NVrOGDlmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMjo1MVrOGFFEIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTAxMQ==", "bodyText": "false, true is typically enough. Could you please check, unless you did already?", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r406415011", "createdAt": "2020-04-09T19:02:45Z", "author": {"login": "ppalaga"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static String INFLUXDB_DTO_PACKAGE = \"org.influxdb.dto\";\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        String[] dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(INFLUXDB_DTO_PACKAGE))\n+                .sorted()\n+                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe2f4314289b0ed9c21e9c64d58f510e1c58c55"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3OTA0Mw==", "bodyText": "@ppalaga  you are right, 'false, true' is enough. I've fixed PR", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r407979043", "createdAt": "2020-04-14T09:02:51Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/influxdb/deployment/src/main/java/org/apache/camel/quarkus/component/influxdb/deployment/InfluxdbProcessor.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.influxdb.deployment;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+class InfluxdbProcessor {\n+\n+    private static String INFLUXDB_DTO_PACKAGE = \"org.influxdb.dto\";\n+\n+    private static final String FEATURE = \"camel-influxdb\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void sslSupport(BuildProducer<ExtensionSslNativeSupportBuildItem> extensionSslNativeSupport) {\n+\n+        // Indicates that this extension would like the SSL support to be enabled\n+        extensionSslNativeSupport.produce(new ExtensionSslNativeSupportBuildItem(FEATURE));\n+    }\n+\n+    @BuildStep\n+    void clientProxies(BuildProducer<NativeImageProxyDefinitionBuildItem> proxies) {\n+        proxies.produce(new NativeImageProxyDefinitionBuildItem(\"org.influxdb.impl.InfluxDBService\"));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        String[] dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(INFLUXDB_DTO_PACKAGE))\n+                .sorted()\n+                .toArray(String[]::new);\n+\n+        return new ReflectiveClassBuildItem(true, true, dtos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxNTAxMQ=="}, "originalCommit": {"oid": "6fe2f4314289b0ed9c21e9c64d58f510e1c58c55"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDY4OTkzOnYy", "diffSide": "RIGHT", "path": "integration-tests/influxdb/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozMTowMVrOGFXEJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozMTowMVrOGFXEJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3Mzk1OA==", "bodyText": "Could you please remove the empty application.properties?", "url": "https://github.com/apache/camel-quarkus/pull/1050#discussion_r408273958", "createdAt": "2020-04-14T16:31:01Z", "author": {"login": "ppalaga"}, "path": "integration-tests/influxdb/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,19 @@\n+## ---------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96e372b271f1d11d761c5d17b37efe953b081c"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4340, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}