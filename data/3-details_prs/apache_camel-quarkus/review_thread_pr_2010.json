{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODUxMjk0", "number": 2010, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozNTozOVrOE5n3zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozNTozOVrOE5n3zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODU3NTQ5OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/reference/extensions/jslt.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozNTozOVrOH0MMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozNTozOVrOH0MMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4Nzc2NQ==", "bodyText": "Second thought welcome here, I have found no way to detect the native classes at build time here.", "url": "https://github.com/apache/camel-quarkus/pull/2010#discussion_r524487765", "createdAt": "2020-11-16T18:35:39Z", "author": {"login": "aldettinger"}, "path": "docs/modules/ROOT/pages/reference/extensions/jslt.adoc", "diffHunk": "@@ -31,3 +31,49 @@ Please refer to the above link for usage and configuration details.\n ----\n \n Check the xref:user-guide/index.adoc[User guide] for more information about writing Camel Quarkus applications.\n+\n+== allowContextMapAll option in native mode\n+\n+The `allowContextMapAll` option is not supported in native mode as it requires reflective access to security sensitive camel core classes such as\n+`CamelContext` & `Exchange`. This is considered a security risk and thus access to the feature is not provided by default.\n+\n+== Additional Camel Quarkus configuration\n+\n+=== Using JSLT templates from classpath resource in native mode\n+A trick is needed when using JSLT templates from classpath resources in native mode. In such a situation, one needs to explicitly embed the resources in the native executable by specifying the `include-patterns` option.\n+\n+For instance, the route below would load the JSLT schema from a classpath resource named _transformation.json_:\n+[source,java]\n+----\n+from(\"direct:start\").to(\"jslt:transformation.json\");\n+----\n+\n+In order to work in native mode the `include-patterns` configuration should be set. For instance, in the `application.properties` file as below :\n+[source,properties]\n+----\n+quarkus.camel.native.resources.include-patterns = *.json\n+----\n+\n+More information about selecting resources for inclusion in the native executable could be found at xref:user-guide/native-mode.adoc#embedding-resource-in-native-executable[Embedding resource in native executable].\n+\n+=== Using JSLT functions in native mode\n+When using JSLT functions from camel-quarkus in native mode, the classes hosting the functions would need to be link:https://quarkus.io/guides/writing-native-applications-tips#registering-for-reflection[registered for reflection]. When registering the target function is not possible, one may end up writing a stub as below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a520176dff59147dcc00ef7b33076deddd3ac81"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4499, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}