{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDQ5ODY3", "number": 1902, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo0MjoxMFrOEs4xPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0MDowNlrOEs9Glw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTAyOTA5OnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/OriginalByteBufferSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo0MjoxMFrOHgXf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozMzoyOFrOHgd-Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMTQ4Nw==", "bodyText": "This is good to merge, but please file a followup issue with the info above and paste the issue link here.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503701487", "createdAt": "2020-10-13T06:42:10Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/OriginalByteBufferSupport.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.lang.reflect.Method;\n+import java.nio.MappedByteBuffer;\n+\n+import com.google.common.base.Throwables;\n+\n+/**\n+ * Unmap support was changed because of jdk9+ (see\n+ * https://github.com/dain/leveldb/commit/39b6e0c38045281fba5f6532c52dc06905890cad)\n+ * Current version of levelDB is using MethodHandle, which is not supported by GraalVM (see\n+ * https://github.com/oracle/graal/issues/2761)\n+ * Original way of using Method (instead of MethodHandle) is working in native mode,\n+ * therefore this class contains code from levelDB class `ByteBufferSupport` from the time before mentioned change and\n+ * is used via substitutions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNzUzMQ==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503807531", "createdAt": "2020-10-13T09:33:28Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/OriginalByteBufferSupport.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.lang.reflect.Method;\n+import java.nio.MappedByteBuffer;\n+\n+import com.google.common.base.Throwables;\n+\n+/**\n+ * Unmap support was changed because of jdk9+ (see\n+ * https://github.com/dain/leveldb/commit/39b6e0c38045281fba5f6532c52dc06905890cad)\n+ * Current version of levelDB is using MethodHandle, which is not supported by GraalVM (see\n+ * https://github.com/oracle/graal/issues/2761)\n+ * Original way of using Method (instead of MethodHandle) is working in native mode,\n+ * therefore this class contains code from levelDB class `ByteBufferSupport` from the time before mentioned change and\n+ * is used via substitutions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwMTQ4Nw=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA3ODk4OnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/ObjectCodecSubstitute.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo1ODowNVrOHgX9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoxODoxNFrOHga3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTA3MQ==", "bodyText": "What a neat trick! I must say I never heart of com.oracle.svm.core.annotate.Inject and I have issues to grasp how it works based on the little docs I was able to find. But if this works, it is a great strategy to workaround many of the Java serialization issues we encounter. @jamesnetherton you mentioned you were solving some serialization issue recently?\nThis is good to merge for now, but to make it more robust, couldn't we replace org.fusesource.hawtbuf:hawtbuf with Jaskson in camel-leveldb? hawtbuf serialization seems to be just an implementation detail there so it could be relatively easy to do. Plz. file a followup if you like the idea.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503709071", "createdAt": "2020-10-13T06:58:05Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/ObjectCodecSubstitute.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.oracle.svm.core.annotate.Inject;\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.camel.support.DefaultExchangeHolder;\n+import org.fusesource.hawtbuf.codec.ObjectCodec;\n+\n+/**\n+ * This os workaround for serialization of DefaultExchangeHolder.\n+ * Once serialization is implemented in graalVM (see https://github.com/oracle/graal/issues/460), this substitution\n+ * could\n+ * be removed.\n+ */\n+@TargetClass(value = ObjectCodec.class)\n+final class ObjectCodecSubstitute {\n+\n+    @Inject\n+    private ObjectMapper objectMapper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0NzEyOQ==", "bodyText": "To be honest, there should not be @Inject annotation. As you can see below, I'm initializing property if is null. I'll fix it to better annotation (I really don't know why Inject is there - I remeber trying some annotations, but I don't remember inject amongs them)", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503747129", "createdAt": "2020-10-13T08:03:53Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/ObjectCodecSubstitute.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.oracle.svm.core.annotate.Inject;\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.camel.support.DefaultExchangeHolder;\n+import org.fusesource.hawtbuf.codec.ObjectCodec;\n+\n+/**\n+ * This os workaround for serialization of DefaultExchangeHolder.\n+ * Once serialization is implemented in graalVM (see https://github.com/oracle/graal/issues/460), this substitution\n+ * could\n+ * be removed.\n+ */\n+@TargetClass(value = ObjectCodec.class)\n+final class ObjectCodecSubstitute {\n+\n+    @Inject\n+    private ObjectMapper objectMapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTA3MQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NDEzMQ==", "bodyText": "Now I get it. My common sense said me that @Inject is opposite of @alias (which brings methods from original class), so it creates methods/variables into original class if it is not there (there could not be any method/variable without annotation in substitution). In this case it adds objectMapper as local variable and allows to use it in other methods.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503754131", "createdAt": "2020-10-13T08:14:19Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/ObjectCodecSubstitute.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.oracle.svm.core.annotate.Inject;\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.camel.support.DefaultExchangeHolder;\n+import org.fusesource.hawtbuf.codec.ObjectCodec;\n+\n+/**\n+ * This os workaround for serialization of DefaultExchangeHolder.\n+ * Once serialization is implemented in graalVM (see https://github.com/oracle/graal/issues/460), this substitution\n+ * could\n+ * be removed.\n+ */\n+@TargetClass(value = ObjectCodec.class)\n+final class ObjectCodecSubstitute {\n+\n+    @Inject\n+    private ObjectMapper objectMapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTA3MQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NjYwOQ==", "bodyText": "Thanks for the explanation, now it is perfectly clear!", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503756609", "createdAt": "2020-10-13T08:18:14Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/src/main/java/org/apache/camel/quarkus/component/leveldb/ObjectCodecSubstitute.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.oracle.svm.core.annotate.Inject;\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.camel.support.DefaultExchangeHolder;\n+import org.fusesource.hawtbuf.codec.ObjectCodec;\n+\n+/**\n+ * This os workaround for serialization of DefaultExchangeHolder.\n+ * Once serialization is implemented in graalVM (see https://github.com/oracle/graal/issues/460), this substitution\n+ * could\n+ * be removed.\n+ */\n+@TargetClass(value = ObjectCodec.class)\n+final class ObjectCodecSubstitute {\n+\n+    @Inject\n+    private ObjectMapper objectMapper;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTA3MQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA5NjE3OnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowMzoyNVrOHgYH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozMzo1OFrOHgd_UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.\n          \n          \n            \n            which is within 10% of the performance of the C++ original. Please upvote link-to-new-issue[this issue] if you do not like the present state.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503711728", "createdAt": "2020-10-13T07:03:25Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+In native mode extension uses port of the LevelDB written in Java (https://github.com/dain/leveldb#leveldb-in-java[documentation]),\n+which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNzgyNQ==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503807825", "createdAt": "2020-10-13T09:33:58Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+In native mode extension uses port of the LevelDB written in Java (https://github.com/dain/leveldb#leveldb-in-java[documentation]),\n+which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTcyOA=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE0NTc3OnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxODowOFrOHgYlDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozNDozMVrOHgeArQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTE4Mg==", "bodyText": "Style tip: the last arg of ReflectiveClassBuildItem constructor is multiarg, so you could make it shorter by omitting the the array declaration (it would compile to exactly the same bytecode):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new ReflectiveClassBuildItem(false, false, new String[] {\n          \n          \n            \n                            org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n          \n          \n            \n                            org.apache.camel.support.DefaultExchangeHolder.class.getName()\n          \n          \n            \n                    });\n          \n          \n            \n                    return new ReflectiveClassBuildItem(false, false, \n          \n          \n            \n                            org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n          \n          \n            \n                            org.apache.camel.support.DefaultExchangeHolder.class.getName());\n          \n      \n    \n    \n  \n\nIs org.apache.camel.support.DefaultExchangeHolder really necessary? IIRC, there was some discussion around this recently.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503719182", "createdAt": "2020-10-13T07:18:08Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODE3Mw==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503808173", "createdAt": "2020-10-13T09:34:31Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxOTE4Mg=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE1NDMyOnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMDozOFrOHgYqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyMjozM1rOHgdgag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDUyNw==", "bodyText": "Hm... you even register the DefaultExchangeHolder twice. I guess this one is right and the above is wrong? But once again is  registering org.apache.camel.support.DefaultExchangeHolder really necessary?", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503720527", "createdAt": "2020-10-13T07:20:38Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithFields() {\n+        return new ReflectiveClassBuildItem(false, true, new String[] {\n+                DefaultExchangeHolder.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0ODE4Mw==", "bodyText": "I'll revisit the code, but DefaultExchangeHolder should be registered with reflective access to properties to be able to work with Jackson serialization.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503748183", "createdAt": "2020-10-13T08:05:34Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithFields() {\n+        return new ReflectiveClassBuildItem(false, true, new String[] {\n+                DefaultExchangeHolder.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDUyNw=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1NzgwNg==", "bodyText": "Yes, and that's exactly what I do not understand: Why/where does DefaultExchangeHolder need to be serialized?", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503757806", "createdAt": "2020-10-13T08:20:06Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithFields() {\n+        return new ReflectiveClassBuildItem(false, true, new String[] {\n+                DefaultExchangeHolder.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDUyNw=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3MzIyMA==", "bodyText": "Serialized DefaultExchangeHolder is wrote into and read from levelDB. See https://github.com/apache/camel/blob/master/components/camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBAggregationRepository.java#L114 (exchangeBuffer is serialized DefaultExchangeHolder)", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503773220", "createdAt": "2020-10-13T08:42:58Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithFields() {\n+        return new ReflectiveClassBuildItem(false, true, new String[] {\n+                DefaultExchangeHolder.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDUyNw=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5OTkxNA==", "bodyText": "Thanks for explaining, all looks correct.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503799914", "createdAt": "2020-10-13T09:22:33Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/deployment/src/main/java/org/apache/camel/quarkus/component/leveldb/deployment/LeveldbProcessor.java", "diffHunk": "@@ -16,31 +16,41 @@\n  */\n package org.apache.camel.quarkus.component.leveldb.deployment;\n \n+import io.quarkus.deployment.annotations.BuildProducer;\n import io.quarkus.deployment.annotations.BuildStep;\n-import io.quarkus.deployment.annotations.ExecutionTime;\n-import io.quarkus.deployment.annotations.Record;\n import io.quarkus.deployment.builditem.FeatureBuildItem;\n-import io.quarkus.deployment.pkg.steps.NativeBuild;\n-import org.apache.camel.quarkus.core.JvmOnlyRecorder;\n-import org.jboss.logging.Logger;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.camel.support.DefaultExchangeHolder;\n \n class LeveldbProcessor {\n \n-    private static final Logger LOG = Logger.getLogger(LeveldbProcessor.class);\n     private static final String FEATURE = \"camel-leveldb\";\n \n     @BuildStep\n     FeatureBuildItem feature() {\n         return new FeatureBuildItem(FEATURE);\n     }\n \n-    /**\n-     * Remove this once this extension starts supporting the native mode.\n-     */\n-    @BuildStep(onlyIf = NativeBuild.class)\n-    @Record(value = ExecutionTime.RUNTIME_INIT)\n-    void warnJvmInNative(JvmOnlyRecorder recorder) {\n-        JvmOnlyRecorder.warnJvmInNative(LOG, FEATURE); // warn at build time\n-        recorder.warnJvmInNative(FEATURE); // warn at runtime\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection() {\n+        return new ReflectiveClassBuildItem(false, false, new String[] {\n+                org.iq80.leveldb.impl.Iq80DBFactory.class.getName(),\n+                org.apache.camel.support.DefaultExchangeHolder.class.getName()\n+        });\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithFields() {\n+        return new ReflectiveClassBuildItem(false, true, new String[] {\n+                DefaultExchangeHolder.class.getName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMDUyNw=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE2MDgyOnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMjoyMFrOHgYuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNzo0M1rOHggAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxOQ==", "bodyText": "Looking at this comparison from 2014 the impact will most likely be be positive in most cases. I'd remove the whole paragraph.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503721519", "createdAt": "2020-10-13T07:22:20Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+In native mode extension uses port of the LevelDB written in Java (https://github.com/dain/leveldb#leveldb-in-java[documentation]),\n+which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.\n+\n+GraalVM does not support `ObjectOutputStream.writeObject()` (https://github.com/oracle/graal/issues/460[issue]).\n+In native mode extension uses Jackson serialization instead. This approach could have some performance impact.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1MDE5Ng==", "bodyText": "I didn't know that, but it is nice. I'll remove the comment", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503750196", "createdAt": "2020-10-13T08:08:41Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+In native mode extension uses port of the LevelDB written in Java (https://github.com/dain/leveldb#leveldb-in-java[documentation]),\n+which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.\n+\n+GraalVM does not support `ObjectOutputStream.writeObject()` (https://github.com/oracle/graal/issues/460[issue]).\n+In native mode extension uses Jackson serialization instead. This approach could have some performance impact.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxOQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg1Nw==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503840857", "createdAt": "2020-10-13T10:27:43Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+In native mode extension uses port of the LevelDB written in Java (https://github.com/dain/leveldb#leveldb-in-java[documentation]),\n+which is within 10% of the performance of the C++ original. Usage of native implementation will be investigated as a new issue.\n+\n+GraalVM does not support `ObjectOutputStream.writeObject()` (https://github.com/oracle/graal/issues/460[issue]).\n+In native mode extension uses Jackson serialization instead. This approach could have some performance impact.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMTUxOQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE4MTYzOnYy", "diffSide": "RIGHT", "path": "integration-tests/leveldb/src/main/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbRouteBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNzo0MFrOHgY6pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozNDo1MlrOHgeBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNDcwOQ==", "bodyText": "Why do we need the delay here?", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503724709", "createdAt": "2020-10-13T07:27:40Z", "author": {"login": "ppalaga"}, "path": "integration-tests/leveldb/src/main/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbRouteBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.camel.AggregationStrategy;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.leveldb.LevelDBAggregationRepository;\n+\n+public class LeveldbRouteBuilder extends RouteBuilder {\n+    public static final String DIRECT_START = \"direct:start\";\n+    public static final String DIRECT_START_WITH_FAILURE = \"direct:startWithFailure\";\n+    public static final String DIRECT_START_DEAD_LETTER = \"direct:startDeadLetter\";\n+    public static final String MOCK_AGGREGATED = \"mock:aggregated\";\n+    public static final String MOCK_RESULT = \"mock:result\";\n+    public static final String MOCK_DEAD = \"mock:dead\";\n+    public static final String DATA_FOLDER = \"target/data\";\n+\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+\n+    @Override\n+    public void configure() throws Exception {\n+        LevelDBAggregationRepository repo = new LevelDBAggregationRepository(\"repo\", DATA_FOLDER + \"leveldb.dat\");\n+\n+        from(DIRECT_START)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repo)\n+                .to(MOCK_RESULT);\n+\n+        LevelDBAggregationRepository repoWithFailure = new LevelDBAggregationRepository(\"repoWithFailure\",\n+                DATA_FOLDER + \"leveldbWithFailure.dat\");\n+\n+        repoWithFailure.setUseRecovery(true);\n+        repoWithFailure.setRecoveryInterval(500, TimeUnit.MILLISECONDS);\n+\n+        from(DIRECT_START_WITH_FAILURE)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repoWithFailure)\n+                .to(MOCK_AGGREGATED)\n+                .delay(1000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0OTA5OQ==", "bodyText": "This configuration was copy/pasted from junit from camel-leveldb. I remeber that not having it there could change to order of messages, I'll test it once again.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503749099", "createdAt": "2020-10-13T08:06:57Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/main/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbRouteBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.camel.AggregationStrategy;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.leveldb.LevelDBAggregationRepository;\n+\n+public class LeveldbRouteBuilder extends RouteBuilder {\n+    public static final String DIRECT_START = \"direct:start\";\n+    public static final String DIRECT_START_WITH_FAILURE = \"direct:startWithFailure\";\n+    public static final String DIRECT_START_DEAD_LETTER = \"direct:startDeadLetter\";\n+    public static final String MOCK_AGGREGATED = \"mock:aggregated\";\n+    public static final String MOCK_RESULT = \"mock:result\";\n+    public static final String MOCK_DEAD = \"mock:dead\";\n+    public static final String DATA_FOLDER = \"target/data\";\n+\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+\n+    @Override\n+    public void configure() throws Exception {\n+        LevelDBAggregationRepository repo = new LevelDBAggregationRepository(\"repo\", DATA_FOLDER + \"leveldb.dat\");\n+\n+        from(DIRECT_START)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repo)\n+                .to(MOCK_RESULT);\n+\n+        LevelDBAggregationRepository repoWithFailure = new LevelDBAggregationRepository(\"repoWithFailure\",\n+                DATA_FOLDER + \"leveldbWithFailure.dat\");\n+\n+        repoWithFailure.setUseRecovery(true);\n+        repoWithFailure.setRecoveryInterval(500, TimeUnit.MILLISECONDS);\n+\n+        from(DIRECT_START_WITH_FAILURE)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repoWithFailure)\n+                .to(MOCK_AGGREGATED)\n+                .delay(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNDcwOQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2MzUzNw==", "bodyText": "If it is a matter of ordering and if different orderings are correct outcomes of the program, then we could perhaps adapt the assertion code on the test side to accept all correct orderings?", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503763537", "createdAt": "2020-10-13T08:28:15Z", "author": {"login": "ppalaga"}, "path": "integration-tests/leveldb/src/main/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbRouteBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.camel.AggregationStrategy;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.leveldb.LevelDBAggregationRepository;\n+\n+public class LeveldbRouteBuilder extends RouteBuilder {\n+    public static final String DIRECT_START = \"direct:start\";\n+    public static final String DIRECT_START_WITH_FAILURE = \"direct:startWithFailure\";\n+    public static final String DIRECT_START_DEAD_LETTER = \"direct:startDeadLetter\";\n+    public static final String MOCK_AGGREGATED = \"mock:aggregated\";\n+    public static final String MOCK_RESULT = \"mock:result\";\n+    public static final String MOCK_DEAD = \"mock:dead\";\n+    public static final String DATA_FOLDER = \"target/data\";\n+\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+\n+    @Override\n+    public void configure() throws Exception {\n+        LevelDBAggregationRepository repo = new LevelDBAggregationRepository(\"repo\", DATA_FOLDER + \"leveldb.dat\");\n+\n+        from(DIRECT_START)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repo)\n+                .to(MOCK_RESULT);\n+\n+        LevelDBAggregationRepository repoWithFailure = new LevelDBAggregationRepository(\"repoWithFailure\",\n+                DATA_FOLDER + \"leveldbWithFailure.dat\");\n+\n+        repoWithFailure.setUseRecovery(true);\n+        repoWithFailure.setRecoveryInterval(500, TimeUnit.MILLISECONDS);\n+\n+        from(DIRECT_START_WITH_FAILURE)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repoWithFailure)\n+                .to(MOCK_AGGREGATED)\n+                .delay(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNDcwOQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODM3Ng==", "bodyText": "done, could be removed", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503808376", "createdAt": "2020-10-13T09:34:52Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/main/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbRouteBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.camel.AggregationStrategy;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.leveldb.LevelDBAggregationRepository;\n+\n+public class LeveldbRouteBuilder extends RouteBuilder {\n+    public static final String DIRECT_START = \"direct:start\";\n+    public static final String DIRECT_START_WITH_FAILURE = \"direct:startWithFailure\";\n+    public static final String DIRECT_START_DEAD_LETTER = \"direct:startDeadLetter\";\n+    public static final String MOCK_AGGREGATED = \"mock:aggregated\";\n+    public static final String MOCK_RESULT = \"mock:result\";\n+    public static final String MOCK_DEAD = \"mock:dead\";\n+    public static final String DATA_FOLDER = \"target/data\";\n+\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+\n+    @Override\n+    public void configure() throws Exception {\n+        LevelDBAggregationRepository repo = new LevelDBAggregationRepository(\"repo\", DATA_FOLDER + \"leveldb.dat\");\n+\n+        from(DIRECT_START)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repo)\n+                .to(MOCK_RESULT);\n+\n+        LevelDBAggregationRepository repoWithFailure = new LevelDBAggregationRepository(\"repoWithFailure\",\n+                DATA_FOLDER + \"leveldbWithFailure.dat\");\n+\n+        repoWithFailure.setUseRecovery(true);\n+        repoWithFailure.setRecoveryInterval(500, TimeUnit.MILLISECONDS);\n+\n+        from(DIRECT_START_WITH_FAILURE)\n+                .aggregate(header(\"id\"), new MyAggregationStrategy())\n+                .completionSize(7).aggregationRepository(repoWithFailure)\n+                .to(MOCK_AGGREGATED)\n+                .delay(1000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNDcwOQ=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE5Mjk2OnYy", "diffSide": "RIGHT", "path": "integration-tests/leveldb/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyOTo1MFrOHgZB2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozNTowM1rOHgeCAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNjU1Mg==", "bodyText": "I do not think we want to merge it with debug on. Couldn't we comment it at least?", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503726552", "createdAt": "2020-10-13T07:29:50Z", "author": {"login": "ppalaga"}, "path": "integration-tests/leveldb/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+quarkus.log.category.\"org.apache.camel.component.leveldb\".level = DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0OTU3NQ==", "bodyText": "oh, this shouldn't be there. This is my local configuration. thank for noticing.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503749575", "createdAt": "2020-10-13T08:07:37Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+quarkus.log.category.\"org.apache.camel.component.leveldb\".level = DEBUG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNjU1Mg=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODUxMw==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503808513", "createdAt": "2020-10-13T09:35:03Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+quarkus.log.category.\"org.apache.camel.component.leveldb\".level = DEBUG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNjU1Mg=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE5ODAwOnYy", "diffSide": "RIGHT", "path": "integration-tests/leveldb/src/test/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozMTowNlrOHgZE0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTozNToxNFrOHgeCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNzMxMg==", "bodyText": "Style tip: Arrays.asList() accepts multiarg too.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503727312", "createdAt": "2020-10-13T07:31:06Z", "author": {"login": "ppalaga"}, "path": "integration-tests/leveldb/src/test/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class LeveldbTest {\n+\n+    @Test\n+    public void testAggregate() {\n+        Map<String, List<Map<String, Object>>> data = testAggregate(LeveldbRouteBuilder.DIRECT_START,\n+                Arrays.asList(new String[] { \"S\", \"H\", \"E\", \"L\", \"D\", \"O\", \"N\" }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0OTc3NA==", "bodyText": "nice:)", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503749774", "createdAt": "2020-10-13T08:07:57Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/test/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class LeveldbTest {\n+\n+    @Test\n+    public void testAggregate() {\n+        Map<String, List<Map<String, Object>>> data = testAggregate(LeveldbRouteBuilder.DIRECT_START,\n+                Arrays.asList(new String[] { \"S\", \"H\", \"E\", \"L\", \"D\", \"O\", \"N\" }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNzMxMg=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODYyOA==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503808628", "createdAt": "2020-10-13T09:35:14Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/leveldb/src/test/java/org/apache/camel/quarkus/component/leveldb/it/LeveldbTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.leveldb.it;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.specification.RequestSpecification;\n+import org.apache.camel.Exchange;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class LeveldbTest {\n+\n+    @Test\n+    public void testAggregate() {\n+        Map<String, List<Map<String, Object>>> data = testAggregate(LeveldbRouteBuilder.DIRECT_START,\n+                Arrays.asList(new String[] { \"S\", \"H\", \"E\", \"L\", \"D\", \"O\", \"N\" }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNzMxMg=="}, "originalCommit": {"oid": "1a91fbbad95f5845498d56b2ed0598dd0ac983c8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTczOTExOnYy", "diffSide": "RIGHT", "path": "extensions/leveldb/runtime/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTo0MDowN1rOHgePOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo1NjoyM1rOHgg_aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMTg5OA==", "bodyText": "@ppalaga There is only one question. Current PR removes dependency with C++ implementation of leveldDB.\nWhich makes JVM also using java implementation.\nI can return dependency back, but it makes it use by native too, which makes native artifact a little bit bigger.\nDo you know about some correct way how to define dependency only for JVM? (which would be the best solution here)", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503811898", "createdAt": "2020-10-13T09:40:07Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/pom.xml", "diffHunk": "@@ -56,6 +57,35 @@\n         <dependency>\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <artifactId>leveldbjni-all</artifactId>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4d025800af4e1b765e049f51ae25253857205e2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxNzAxOQ==", "bodyText": "How much is little bit bigger? I'd be fine with making the native executable up to 20MB bigger and add the C++ impl for both.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503817019", "createdAt": "2020-10-13T09:47:50Z", "author": {"login": "ppalaga"}, "path": "extensions/leveldb/runtime/pom.xml", "diffHunk": "@@ -56,6 +57,35 @@\n         <dependency>\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <artifactId>leveldbjni-all</artifactId>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMTg5OA=="}, "originalCommit": {"oid": "d4d025800af4e1b765e049f51ae25253857205e2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxOTc2OQ==", "bodyText": "Thanks,  I'll check.", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503819769", "createdAt": "2020-10-13T09:52:16Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/pom.xml", "diffHunk": "@@ -56,6 +57,35 @@\n         <dependency>\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <artifactId>leveldbjni-all</artifactId>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMTg5OA=="}, "originalCommit": {"oid": "d4d025800af4e1b765e049f51ae25253857205e2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1NzAwMA==", "bodyText": "I've verify the sizes of both artifacts, and there is almost none difference. I expected, that there is some difference, but because jni library is not used in native, quarkus doesn't use it - which makes sense, I've returned leveldbjni into dependencyies for jvm to use,", "url": "https://github.com/apache/camel-quarkus/pull/1902#discussion_r503857000", "createdAt": "2020-10-13T10:56:23Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/leveldb/runtime/pom.xml", "diffHunk": "@@ -56,6 +57,35 @@\n         <dependency>\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <artifactId>leveldbjni-all</artifactId>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-leveldb</artifactId>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.fusesource.leveldbjni</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMTg5OA=="}, "originalCommit": {"oid": "d4d025800af4e1b765e049f51ae25253857205e2"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4566, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}