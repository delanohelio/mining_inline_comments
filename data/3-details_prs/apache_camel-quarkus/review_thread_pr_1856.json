{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjE2Njk1", "number": 1856, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NDoxMFrOEpYCHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTowODoyNlrOEpYlfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIwODMwOnYy", "diffSide": "RIGHT", "path": "integration-tests/geocoder/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NDoxMFrOHbAcwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NDoxMFrOHbAcwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4MDk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #The locale English must be available in the machine for native usage with Lat/Lng\n          \n          \n            \n            quarkus.locales=en-US\n          \n      \n    \n    \n  \n\nI have tested locally and it looks like quarkus.locales has no effect. The locale set on the machine, e.g. via export LANG=en_US.UTF-8 seems to be the only thing that matters. I think we can remove the above snippet.", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498080961", "createdAt": "2020-10-01T08:44:10Z", "author": {"login": "ppalaga"}, "path": "integration-tests/geocoder/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,27 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+\n+################################\n+#### properties for Google maps services\n+# add your API KEY to run the examples\n+#google.api.key=YOUR_API_KEY\n+\n+#The locale English must be available in the machine for native usage with Lat/Lng\n+quarkus.locales=en-US", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODIxOTYyOnYy", "diffSide": "RIGHT", "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo0NzoxM1rOHbAj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1NDozNlrOHbA1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4Mjc4Nw==", "bodyText": "I think it'd be better to follow the pattern we use in other tests, where annotations determine whether the test should run. For example, see the Braintree test:\nhttps://github.com/apache/camel-quarkus/blob/master/integration-tests/braintree/src/test/java/org/apache/camel/quarkus/component/braintree/it/BraintreeTest.java#L29-L31\nhttps://github.com/apache/camel-quarkus/blob/master/integration-tests/braintree/src/test/java/org/apache/camel/quarkus/component/braintree/it/BraintreeIT.java#L23-L25\nCan you also add a README to the itest module directory that explains which environment variable(s) need to be set and how to obtain API keys etc. E.g like this:\nhttps://github.com/apache/camel-quarkus/blob/master/integration-tests/braintree/README.adoc", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498082787", "createdAt": "2020-10-01T08:47:13Z", "author": {"login": "jamesnetherton"}, "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.quarkus.component.geocoder.it.GeocoderGoogleResource.GOOGLE_GEOCODER_API_KEY;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+@QuarkusTest\n+@TestHTTPEndpoint(GeocoderGoogleResource.class)\n+class GeocoderGoogleTest {\n+\n+    private static boolean enabled;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        // enables the integration tests if an API key exists\n+        enabled = ConfigProvider.getConfig()\n+                .getOptionalValue(GOOGLE_GEOCODER_API_KEY, String.class).isPresent();\n+    }\n+\n+    @Test\n+    public void loadCurrentLocation() {\n+        // disable test if no API KEY\n+        if (enabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4NzMyNw==", "bodyText": "thanks!! I'll add that annotation then !!", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498087327", "createdAt": "2020-10-01T08:54:36Z", "author": {"login": "zbendhiba"}, "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.quarkus.component.geocoder.it.GeocoderGoogleResource.GOOGLE_GEOCODER_API_KEY;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+@QuarkusTest\n+@TestHTTPEndpoint(GeocoderGoogleResource.class)\n+class GeocoderGoogleTest {\n+\n+    private static boolean enabled;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        // enables the integration tests if an API key exists\n+        enabled = ConfigProvider.getConfig()\n+                .getOptionalValue(GOOGLE_GEOCODER_API_KEY, String.class).isPresent();\n+    }\n+\n+    @Test\n+    public void loadCurrentLocation() {\n+        // disable test if no API KEY\n+        if (enabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4Mjc4Nw=="}, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODI2NDUzOnYy", "diffSide": "RIGHT", "path": "extensions/geocoder/runtime/src/main/doc/configuration.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwODo1ODo1MlrOHbA_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyOTowNVrOHbCFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4OTkxNQ==", "bodyText": "Let's explain this in more detail. How about this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The extension uses Locale.English to do the conversion of Double latitude and longitude values, in order to match the format required by the Google Maps API.\n          \n          \n            \n            \n          \n          \n            \n            An example of setting the Locale en_US for GraalVm: https://www.graalvm.org/reference-manual/ruby/UTF8Locale/\n          \n          \n            \n            Locales different from the build machine's default locale do not work well in native mode due to https://github.com/oracle/graal/issues/1645[this GraalVM bug]. The `google-maps-services` library this extension depends on uses `Locale.English` to format double latitude and longitude values. As a consequence of these two facts, the locale on the building machine must be set to some English locale, such as `en_US.UTF-8`, `en_GB.UTF-8` or `en_IE.UTF-8` so that the calls to the Google Maps API work properly. On Linux, you need to check the value of the `LANG` environment variable, e.g. via `echo $LANG` and change the value via `export LANG=en_US.UTF-8` if necessary.", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498089915", "createdAt": "2020-10-01T08:58:52Z", "author": {"login": "ppalaga"}, "path": "extensions/geocoder/runtime/src/main/doc/configuration.adoc", "diffHunk": "@@ -0,0 +1,3 @@\n+The extension uses Locale.English to do the conversion of Double latitude and longitude values, in order to match the format required by the Google Maps API.\n+\n+An example of setting the Locale en_US for GraalVm: https://www.graalvm.org/reference-manual/ruby/UTF8Locale/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwNzc4Mw==", "bodyText": "LGTM!", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498107783", "createdAt": "2020-10-01T09:29:05Z", "author": {"login": "zbendhiba"}, "path": "extensions/geocoder/runtime/src/main/doc/configuration.adoc", "diffHunk": "@@ -0,0 +1,3 @@\n+The extension uses Locale.English to do the conversion of Double latitude and longitude values, in order to match the format required by the Google Maps API.\n+\n+An example of setting the Locale en_US for GraalVm: https://www.graalvm.org/reference-manual/ruby/UTF8Locale/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA4OTkxNQ=="}, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODI5ODg1OnYy", "diffSide": "RIGHT", "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTowODoyNlrOHbBVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyNToyNlrOHbB8pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA5NTQxNA==", "bodyText": "You can use @EnabledIfEnvironmentVariable for disabling the test like we do in \n  \n    \n      camel-quarkus/integration-tests/braintree/src/test/java/org/apache/camel/quarkus/component/braintree/it/BraintreeIT.java\n    \n    \n         Line 25\n      in\n      1175fdc\n    \n    \n    \n    \n\n        \n          \n           @EnabledIfEnvironmentVariable(named = \"BRAINTREE_PRIVATE_KEY\", matches = \".+\") \n        \n    \n  \n\n\nIf you do that that way, the test app is not started at all and you actually do not need to check in the app whether property is set.\nI think in case the GOOGLE_GEOCODER_API_KEY is not provided, the test should run against a mock API, something like we do with Telegram and elsewhere. If a mock testcontainer is available we should use it. No need to do this now, I'll file a followup.", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498095414", "createdAt": "2020-10-01T09:08:26Z", "author": {"login": "ppalaga"}, "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.quarkus.component.geocoder.it.GeocoderGoogleResource.GOOGLE_GEOCODER_API_KEY;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+@QuarkusTest\n+@TestHTTPEndpoint(GeocoderGoogleResource.class)\n+class GeocoderGoogleTest {\n+\n+    private static boolean enabled;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        // enables the integration tests if an API key exists\n+        enabled = ConfigProvider.getConfig()\n+                .getOptionalValue(GOOGLE_GEOCODER_API_KEY, String.class).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwNTUwOA==", "bodyText": "OK", "url": "https://github.com/apache/camel-quarkus/pull/1856#discussion_r498105508", "createdAt": "2020-10-01T09:25:26Z", "author": {"login": "zbendhiba"}, "path": "integration-tests/geocoder/src/test/java/org/apache/camel/quarkus/component/geocoder/it/GeocoderGoogleTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import io.quarkus.test.common.http.TestHTTPEndpoint;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import org.eclipse.microprofile.config.ConfigProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.quarkus.component.geocoder.it.GeocoderGoogleResource.GOOGLE_GEOCODER_API_KEY;\n+import static org.hamcrest.Matchers.hasKey;\n+\n+@QuarkusTest\n+@TestHTTPEndpoint(GeocoderGoogleResource.class)\n+class GeocoderGoogleTest {\n+\n+    private static boolean enabled;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        // enables the integration tests if an API key exists\n+        enabled = ConfigProvider.getConfig()\n+                .getOptionalValue(GOOGLE_GEOCODER_API_KEY, String.class).isPresent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA5NTQxNA=="}, "originalCommit": {"oid": "62411c996dda3ba4aaf20d0ebfe2abb17c1d1156"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4547, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}