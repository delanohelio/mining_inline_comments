{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjM4NDQw", "number": 1793, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0OToxOVrOEjjc3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyNDowNFrOEjpWZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzE2NDQ2OnYy", "diffSide": "RIGHT", "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo0OToxOVrOHR995w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjoxNzozMVrOHR-9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMzExMQ==", "bodyText": "Just curious - why do we need to index commons-logging-jboss-logging?", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488603111", "createdAt": "2020-09-15T11:49:19Z", "author": {"login": "jamesnetherton"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());\n+        dtos.add(PDFDocumentHandlerMaker.class.getCanonicalName());\n+        dtos.add(RendererEventProducer.class.getCanonicalName());\n+        dtos.add(IOException.class.getCanonicalName());\n+        dtos.add(Integer.class.getCanonicalName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.jboss.logging\", \"commons-logging-jboss-logging\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxMTY5Mg==", "bodyText": "Good catch. It seems to be unwanted relic from some of my test runs. I'll check it.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488611692", "createdAt": "2020-09-15T12:04:11Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());\n+        dtos.add(PDFDocumentHandlerMaker.class.getCanonicalName());\n+        dtos.add(RendererEventProducer.class.getCanonicalName());\n+        dtos.add(IOException.class.getCanonicalName());\n+        dtos.add(Integer.class.getCanonicalName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.jboss.logging\", \"commons-logging-jboss-logging\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMzExMQ=="}, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxOTI4Mw==", "bodyText": "Done", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488619283", "createdAt": "2020-09-15T12:17:31Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());\n+        dtos.add(PDFDocumentHandlerMaker.class.getCanonicalName());\n+        dtos.add(RendererEventProducer.class.getCanonicalName());\n+        dtos.add(IOException.class.getCanonicalName());\n+        dtos.add(Integer.class.getCanonicalName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.jboss.logging\", \"commons-logging-jboss-logging\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwMzExMQ=="}, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzE3ODI3OnYy", "diffSide": "RIGHT", "path": "extensions/fop/runtime/src/main/resources/META-INF/native-image/proxy-config.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTo1Mjo1OVrOHR-GRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTowNjo1M1rOHSGiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwNTI1NQ==", "bodyText": "Could NativeImageProxyDefinitionBuildItem be used here instead of proxy-config.json.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488605255", "createdAt": "2020-09-15T11:52:59Z", "author": {"login": "jamesnetherton"}, "path": "extensions/fop/runtime/src/main/resources/META-INF/native-image/proxy-config.json", "diffHunk": "@@ -0,0 +1,3 @@\n+[\n+  [\"org.apache.fop.render.RendererEventProducer\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwNzU3NA==", "bodyText": "@jamesnetherton I was looking for a build Item, with this functionality, I'll refactor it.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488607574", "createdAt": "2020-09-15T11:57:00Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/runtime/src/main/resources/META-INF/native-image/proxy-config.json", "diffHunk": "@@ -0,0 +1,3 @@\n+[\n+  [\"org.apache.fop.render.RendererEventProducer\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwNTI1NQ=="}, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYxOTIzMg==", "bodyText": "Done", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488619232", "createdAt": "2020-09-15T12:17:25Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/runtime/src/main/resources/META-INF/native-image/proxy-config.json", "diffHunk": "@@ -0,0 +1,3 @@\n+[\n+  [\"org.apache.fop.render.RendererEventProducer\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwNTI1NQ=="}, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0MzYxNw==", "bodyText": "@JiriOndrusek you may want to upvote quarkusio/quarkus#9945 :)", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488743617", "createdAt": "2020-09-15T15:06:53Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/runtime/src/main/resources/META-INF/native-image/proxy-config.json", "diffHunk": "@@ -0,0 +1,3 @@\n+[\n+  [\"org.apache.fop.render.RendererEventProducer\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwNTI1NQ=="}, "originalCommit": {"oid": "63256a22f8d6c1d2f1b0eb3e7a250cf8b98c4c27"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODA4OTM5OnYy", "diffSide": "RIGHT", "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxNToxMVrOHSG7Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1MDowOFrOHSkfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0OTkxOQ==", "bodyText": "I have filed a follow up: #1796 Could you please pick it @JiriOndrusek ?", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488749919", "createdAt": "2020-09-15T15:15:11Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());\n+        dtos.add(PDFDocumentHandlerMaker.class.getCanonicalName());\n+        dtos.add(RendererEventProducer.class.getCanonicalName());\n+        dtos.add(IOException.class.getCanonicalName());\n+        dtos.add(Integer.class.getCanonicalName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.apache.xmlgraphics\", \"fop\"));\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem initResources() {\n+        return new NativeImageResourceBuildItem(\n+                \"META-INF/services/org.apache.fop.fo.ElementMapping\",\n+                \"META-INF/services/org.apache.fop.render.intermediate.IFDocumentHandler\",\n+                \"org/apache/fop/render/event-model.xml\");\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBundleBuildItem initBundles() {\n+        return new NativeImageResourceBundleBuildItem(\n+                \"com.sun.org.apache.xerces.internal.impl.msg.SAXMessages\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDM2Mw==", "bodyText": "@ppalaga I've noticed, that this bundle was used only during an exception, which was happening during my investigation. It is not necessary. I've removed it.\nBut I'd like to add this resource via #1796 into cq jaxp component, because it could help a much during implementation. (without this bundle there is another error message in log)", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r489234363", "createdAt": "2020-09-16T07:50:08Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());\n+        dtos.add(PDFDocumentHandlerMaker.class.getCanonicalName());\n+        dtos.add(RendererEventProducer.class.getCanonicalName());\n+        dtos.add(IOException.class.getCanonicalName());\n+        dtos.add(Integer.class.getCanonicalName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    void addDependencies(BuildProducer<IndexDependencyBuildItem> indexDependency) {\n+        indexDependency.produce(new IndexDependencyBuildItem(\"org.apache.xmlgraphics\", \"fop\"));\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem initResources() {\n+        return new NativeImageResourceBuildItem(\n+                \"META-INF/services/org.apache.fop.fo.ElementMapping\",\n+                \"META-INF/services/org.apache.fop.render.intermediate.IFDocumentHandler\",\n+                \"org/apache/fop/render/event-model.xml\");\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBundleBuildItem initBundles() {\n+        return new NativeImageResourceBundleBuildItem(\n+                \"com.sun.org.apache.xerces.internal.impl.msg.SAXMessages\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0OTkxOQ=="}, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEwMjc4OnYy", "diffSide": "RIGHT", "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxNzo1N1rOHSHDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo0ODowMlrOHSkauQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1MjA3OA==", "bodyText": "class.getCanonicalName() is not wrong here where it is called on a non-inner class. We should stick to class.getName() that is correct also for inner classes. I mean when ppl will copy-paste from here, it may not work for them in all situations.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488752078", "createdAt": "2020-09-15T15:17:57Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMzA4MQ==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r489233081", "createdAt": "2020-09-16T07:48:02Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/deployment/src/main/java/org/apache/camel/quarkus/component/fop/deployment/FopProcessor.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop.deployment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import org.apache.fop.render.RendererEventProducer;\n+import org.apache.fop.render.pdf.PDFDocumentHandlerMaker;\n+import org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory;\n+import org.apache.xmlgraphics.image.loader.spi.ImageImplRegistry;\n+import org.jboss.jandex.IndexView;\n+\n+class FopProcessor {\n+\n+    private static final String FEATURE = \"camel-fop\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        List<String> dtos = index.getKnownClasses().stream()\n+                .map(ci -> ci.name().toString())\n+                .filter(n -> n.endsWith(\"ElementMapping\"))\n+                .sorted()\n+                .collect(Collectors.toList());\n+\n+        dtos.add(PDFExtensionHandlerFactory.class.getCanonicalName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1MjA3OA=="}, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODExNzg1OnYy", "diffSide": "RIGHT", "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMToxMFrOHSHNRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo0Njo0NlrOHSkX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDUwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Default sRGB color space is disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850]. This limitation makes configuration property\n          \n          \n            \n            `disable-srgb-colorspace` ignored. You can see more about sRGB color space in\n          \n          \n            \n            https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].\n          \n          \n            \n            * Default sRGB color space is always disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850] and `disable-srgb-colorspace` https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration property] is ignored.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488754502", "createdAt": "2020-09-15T15:21:10Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,12 @@\n+While you can use any of the available output types in JVM mode, only PDF output type is supported\n+in native mode. PDF output type in native mode has several limitations:\n+\n+* Default sRGB color space is disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850]. This limitation makes configuration property\n+`disable-srgb-colorspace` ignored. You can see more about sRGB color space in\n+https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMjM1Mw==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r489232353", "createdAt": "2020-09-16T07:46:46Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,12 @@\n+While you can use any of the available output types in JVM mode, only PDF output type is supported\n+in native mode. PDF output type in native mode has several limitations:\n+\n+* Default sRGB color space is disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850]. This limitation makes configuration property\n+`disable-srgb-colorspace` ignored. You can see more about sRGB color space in\n+https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDUwMg=="}, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEyNzg0OnYy", "diffSide": "RIGHT", "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMzoyNVrOHSHTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo0NjoxNVrOHSkWrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjA4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please use property `<use-cache>false</use-cache>` (more information in https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].)\n          \n          \n            \n            Please set the https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration property] `use-cache` to `false`.", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488756081", "createdAt": "2020-09-15T15:23:25Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,12 @@\n+While you can use any of the available output types in JVM mode, only PDF output type is supported\n+in native mode. PDF output type in native mode has several limitations:\n+\n+* Default sRGB color space is disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850]. This limitation makes configuration property\n+`disable-srgb-colorspace` ignored. You can see more about sRGB color space in\n+https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].\n+\n+* If custom fonts are used, font cache has to be disabled because of https://github.com/oracle/graal/issues/460[Graal VM issue #460].\n+Please use property `<use-cache>false</use-cache>` (more information in https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMjA0Ng==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r489232046", "createdAt": "2020-09-16T07:46:15Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,12 @@\n+While you can use any of the available output types in JVM mode, only PDF output type is supported\n+in native mode. PDF output type in native mode has several limitations:\n+\n+* Default sRGB color space is disabled because of https://github.com/oracle/graal/issues/2850[Graal VM issue #2850]. This limitation makes configuration property\n+`disable-srgb-colorspace` ignored. You can see more about sRGB color space in\n+https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].\n+\n+* If custom fonts are used, font cache has to be disabled because of https://github.com/oracle/graal/issues/460[Graal VM issue #460].\n+Please use property `<use-cache>false</use-cache>` (more information in https://xmlgraphics.apache.org/fop/2.1/configuration.html[FOP configuration].)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjA4MQ=="}, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEzMDk1OnYy", "diffSide": "RIGHT", "path": "extensions/fop/runtime/src/main/java/org/apache/camel/quarkus/component/fop/PDFRendererOptionsConfigSubstitution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyNDowNFrOHSHVXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1MDoyNVrOHSkgZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjU3Mg==", "bodyText": "I appreciate the comment!", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r488756572", "createdAt": "2020-09-15T15:24:04Z", "author": {"login": "ppalaga"}, "path": "extensions/fop/runtime/src/main/java/org/apache/camel/quarkus/component/fop/PDFRendererOptionsConfigSubstitution.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.fop.render.pdf.PDFRendererOptionsConfig;\n+\n+@TargetClass(value = PDFRendererOptionsConfig.class)\n+final class PDFRendererOptionsConfigSubstitution {\n+\n+    @Substitute\n+    public Boolean getDisableSRGBColorSpace() {\n+        //sRGB color space has to be disabled because of https://github.com/oracle/graal/issues/2850", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNDUzMg==", "bodyText": "thanks", "url": "https://github.com/apache/camel-quarkus/pull/1793#discussion_r489234532", "createdAt": "2020-09-16T07:50:25Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/fop/runtime/src/main/java/org/apache/camel/quarkus/component/fop/PDFRendererOptionsConfigSubstitution.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.fop;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.fop.render.pdf.PDFRendererOptionsConfig;\n+\n+@TargetClass(value = PDFRendererOptionsConfig.class)\n+final class PDFRendererOptionsConfigSubstitution {\n+\n+    @Substitute\n+    public Boolean getDisableSRGBColorSpace() {\n+        //sRGB color space has to be disabled because of https://github.com/oracle/graal/issues/2850", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjU3Mg=="}, "originalCommit": {"oid": "9b402a1d8781d691ec00294f88fc5dc9c4d6f970"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}