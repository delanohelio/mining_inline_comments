{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTkzNTMz", "number": 1836, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozNzoyMVrOEncBrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozNzoyMVrOEncBrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzg5MTAyOnYy", "diffSide": "RIGHT", "path": "extensions/rss/deployment/src/main/java/org/apache/camel/quarkus/component/rss/deployment/RssProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozNzoyMVrOHYB1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozNzoyMVrOHYB1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1Nzg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        InputStream stream = Thread.currentThread().getContextClassLoader()\n          \n          \n            \n                                .getResourceAsStream(\"com/rometools/rome/rome.properties\");\n          \n          \n            \n                    try (InputStream stream = Thread.currentThread().getContextClassLoader()\n          \n          \n            \n                                .getResourceAsStream(\"com/rometools/rome/rome.properties\")) {\n          \n      \n    \n    \n  \n\nStreams should be closed. A followup would be enough", "url": "https://github.com/apache/camel-quarkus/pull/1836#discussion_r494957885", "createdAt": "2020-09-25T12:37:21Z", "author": {"login": "ppalaga"}, "path": "extensions/rss/deployment/src/main/java/org/apache/camel/quarkus/component/rss/deployment/RssProcessor.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.rss.deployment;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+\n+class RssProcessor {\n+\n+    private static final String FEATURE = \"camel-rss\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem nativeImageResources() {\n+        return new NativeImageResourceBuildItem(\"com/rometools/rome/rome.properties\");\n+    }\n+\n+    @BuildStep\n+    IndexDependencyBuildItem indexDependencies() {\n+        return new IndexDependencyBuildItem(\"com.rometools\", \"rome\");\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClass) {\n+        // Register for reflection feed parser / generator classes from rome.properties\n+        try {\n+            InputStream stream = Thread.currentThread().getContextClassLoader()\n+                    .getResourceAsStream(\"com/rometools/rome/rome.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c54879e1dfaed82d5f6345b9f50bb74c817e549c"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}