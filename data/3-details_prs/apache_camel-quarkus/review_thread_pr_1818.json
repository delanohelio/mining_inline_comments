{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwODcxMDMy", "number": 1818, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNDoyN1rOEm9TyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNDoyN1rOEm9TyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjg1ODMzOnYy", "diffSide": "RIGHT", "path": "integration-tests/telegram/src/main/java/org/apache/camel/quarkus/component/telegram/it/TelegramRoutes.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTozNDoyN1rOHXSBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0NjowNlrOHXSeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDY2MQ==", "bodyText": "@ppalaga This is a typo ? CAMEL_QUARKUS_FALLBACK_MOCK ?", "url": "https://github.com/apache/camel-quarkus/pull/1818#discussion_r494174661", "createdAt": "2020-09-24T09:34:27Z", "author": {"login": "llowinge"}, "path": "integration-tests/telegram/src/main/java/org/apache/camel/quarkus/component/telegram/it/TelegramRoutes.java", "diffHunk": "@@ -21,37 +21,80 @@\n import java.io.InputStream;\n import java.util.stream.Stream;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.telegram.TelegramComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n import org.apache.camel.support.ResourceHelper;\n import org.apache.camel.util.IOHelper;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n \n+@ApplicationScoped\n public class TelegramRoutes extends RouteBuilder {\n \n+    @ConfigProperty(name = \"telegram.authorization-token\", defaultValue = \"default-dummy-token\")\n+    String authToken;\n+\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"default-dummy-token\".equals(authToken)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://api.telegram.org\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link TelegramComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link TelegramComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named\n+    TelegramComponent telegram() {\n+        final TelegramComponent result = new TelegramComponent();\n+        result.setCamelContext(getContext());\n+        result.setBaseUri(getBaseUri());\n+        result.setAuthorizationToken(authToken);\n+        return result;\n+    }\n+\n     @Override\n     public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {\n+            /* Start the mock Telegram API unless the user did export CAMEL_QUARKUS_FALLBACK_MOCK=false */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56295c5380b597081d849aed74b597ebd1ba462"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MDcxNQ==", "bodyText": "I do not see an issue. What would you expect there?", "url": "https://github.com/apache/camel-quarkus/pull/1818#discussion_r494180715", "createdAt": "2020-09-24T09:44:15Z", "author": {"login": "ppalaga"}, "path": "integration-tests/telegram/src/main/java/org/apache/camel/quarkus/component/telegram/it/TelegramRoutes.java", "diffHunk": "@@ -21,37 +21,80 @@\n import java.io.InputStream;\n import java.util.stream.Stream;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.telegram.TelegramComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n import org.apache.camel.support.ResourceHelper;\n import org.apache.camel.util.IOHelper;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n \n+@ApplicationScoped\n public class TelegramRoutes extends RouteBuilder {\n \n+    @ConfigProperty(name = \"telegram.authorization-token\", defaultValue = \"default-dummy-token\")\n+    String authToken;\n+\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"default-dummy-token\".equals(authToken)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://api.telegram.org\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link TelegramComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link TelegramComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named\n+    TelegramComponent telegram() {\n+        final TelegramComponent result = new TelegramComponent();\n+        result.setCamelContext(getContext());\n+        result.setBaseUri(getBaseUri());\n+        result.setAuthorizationToken(authToken);\n+        return result;\n+    }\n+\n     @Override\n     public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {\n+            /* Start the mock Telegram API unless the user did export CAMEL_QUARKUS_FALLBACK_MOCK=false */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDY2MQ=="}, "originalCommit": {"oid": "d56295c5380b597081d849aed74b597ebd1ba462"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MTc1OA==", "bodyText": "Oh, I see, it should be CAMEL_QUARKUS_START_MOCK_BACKEND=false", "url": "https://github.com/apache/camel-quarkus/pull/1818#discussion_r494181758", "createdAt": "2020-09-24T09:45:53Z", "author": {"login": "ppalaga"}, "path": "integration-tests/telegram/src/main/java/org/apache/camel/quarkus/component/telegram/it/TelegramRoutes.java", "diffHunk": "@@ -21,37 +21,80 @@\n import java.io.InputStream;\n import java.util.stream.Stream;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.telegram.TelegramComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n import org.apache.camel.support.ResourceHelper;\n import org.apache.camel.util.IOHelper;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n \n+@ApplicationScoped\n public class TelegramRoutes extends RouteBuilder {\n \n+    @ConfigProperty(name = \"telegram.authorization-token\", defaultValue = \"default-dummy-token\")\n+    String authToken;\n+\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"default-dummy-token\".equals(authToken)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://api.telegram.org\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link TelegramComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link TelegramComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named\n+    TelegramComponent telegram() {\n+        final TelegramComponent result = new TelegramComponent();\n+        result.setCamelContext(getContext());\n+        result.setBaseUri(getBaseUri());\n+        result.setAuthorizationToken(authToken);\n+        return result;\n+    }\n+\n     @Override\n     public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {\n+            /* Start the mock Telegram API unless the user did export CAMEL_QUARKUS_FALLBACK_MOCK=false */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDY2MQ=="}, "originalCommit": {"oid": "d56295c5380b597081d849aed74b597ebd1ba462"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MTkyOQ==", "bodyText": "Thanks, good catch!", "url": "https://github.com/apache/camel-quarkus/pull/1818#discussion_r494181929", "createdAt": "2020-09-24T09:46:06Z", "author": {"login": "ppalaga"}, "path": "integration-tests/telegram/src/main/java/org/apache/camel/quarkus/component/telegram/it/TelegramRoutes.java", "diffHunk": "@@ -21,37 +21,80 @@\n import java.io.InputStream;\n import java.util.stream.Stream;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n import org.apache.camel.Exchange;\n import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.telegram.TelegramComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n import org.apache.camel.support.ResourceHelper;\n import org.apache.camel.util.IOHelper;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n \n+@ApplicationScoped\n public class TelegramRoutes extends RouteBuilder {\n \n+    @ConfigProperty(name = \"telegram.authorization-token\", defaultValue = \"default-dummy-token\")\n+    String authToken;\n+\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"default-dummy-token\".equals(authToken)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://api.telegram.org\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link TelegramComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link TelegramComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named\n+    TelegramComponent telegram() {\n+        final TelegramComponent result = new TelegramComponent();\n+        result.setCamelContext(getContext());\n+        result.setBaseUri(getBaseUri());\n+        result.setAuthorizationToken(authToken);\n+        return result;\n+    }\n+\n     @Override\n     public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {\n+            /* Start the mock Telegram API unless the user did export CAMEL_QUARKUS_FALLBACK_MOCK=false */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3NDY2MQ=="}, "originalCommit": {"oid": "d56295c5380b597081d849aed74b597ebd1ba462"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4524, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}