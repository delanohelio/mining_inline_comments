{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzEzOTIy", "number": 1215, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo0MDo1NFrOD7p9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDowOToyM1rOD90MFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODgwMDg0OnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresRouteBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo0MDo1NFrOGUHJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo0MDo1NFrOGUHJFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MTcxNw==", "bodyText": "License missing", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r423741717", "createdAt": "2020-05-12T13:40:54Z", "author": {"login": "oscerd"}, "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresRouteBuilder.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.apache.camel.quarkus.component.debezium.postgres.it;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41d2e45e435dd0812646705f061f920a4df2fdf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQzMDUyOnYy", "diffSide": "RIGHT", "path": ".github/test-categories.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozNTowOVrOGWxUZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozNTowOVrOGWxUZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyOTg5NQ==", "bodyText": "Could you please make the ordering alphabetic again when you touch this file next time?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426529895", "createdAt": "2020-05-18T10:35:09Z", "author": {"login": "ppalaga"}, "path": ".github/test-categories.yaml", "diffHunk": "@@ -31,6 +31,7 @@ main:\n   - main-xml-io\n   - main-xml-jaxb\n database:\n+  - debezium-postgres", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQzNDAyOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozNjoxNVrOGWxWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozNjoxNVrOGWxWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzMDQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The extension provides support for the Camel https://camel.apache.org/components/latest/debezium-postgres-component.html[Debezium Posgtgres Connector].\n          \n          \n            \n            The extension provides support for the Camel https://camel.apache.org/components/latest/debezium-postgres-component.html[Debezium Postgres Connector].", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426530462", "createdAt": "2020-05-18T10:36:15Z", "author": {"login": "ppalaga"}, "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+[[debezium-postgres]]\n+= Debezium Postgres Extension\n+\n+*Since Camel Quarkus 1.0.0-M8*\n+\n+*Only consumer is supported*\n+\n+The Debezium PostgresSQL component is wrapper around https://debezium.io/[Debezium] using\n+https://debezium.io/documentation/reference/0.9/operations/embedded.html[Debezium Embedded], which enables Change Data\n+Capture from PostgresSQL database using Debezium without the need for Kafka or Kafka Connect.\n+\n+[source,xml]\n+------------------------------------------------------------\n+<dependency>\n+    <groupId>org.apache.camel.quarkus</groupId>\n+    <artifactId>camel-debezium-postgres</artifactId>\n+</dependency>\n+------------------------------------------------------------\n+\n+== Usage\n+\n+The extension provides support for the Camel https://camel.apache.org/components/latest/debezium-postgres-component.html[Debezium Posgtgres Connector].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQ0MDE0OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozODowN1rOGWxacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozODowN1rOGWxacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzMTQ0MQ==", "bodyText": "Not sure what \"standard\" means here? Is it perhaps \"the ones available in JVM mode\"?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426531441", "createdAt": "2020-05-18T10:38:07Z", "author": {"login": "ppalaga"}, "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "diffHunk": "@@ -0,0 +1,38 @@\n+[[debezium-postgres]]\n+= Debezium Postgres Extension\n+\n+*Since Camel Quarkus 1.0.0-M8*\n+\n+*Only consumer is supported*\n+\n+The Debezium PostgresSQL component is wrapper around https://debezium.io/[Debezium] using\n+https://debezium.io/documentation/reference/0.9/operations/embedded.html[Debezium Embedded], which enables Change Data\n+Capture from PostgresSQL database using Debezium without the need for Kafka or Kafka Connect.\n+\n+[source,xml]\n+------------------------------------------------------------\n+<dependency>\n+    <groupId>org.apache.camel.quarkus</groupId>\n+    <artifactId>camel-debezium-postgres</artifactId>\n+</dependency>\n+------------------------------------------------------------\n+\n+== Usage\n+\n+The extension provides support for the Camel https://camel.apache.org/components/latest/debezium-postgres-component.html[Debezium Posgtgres Connector].\n+\n+=== Limitations\n+\n+Native offset stores implementation classes differ from standard ones and not all of them are supported in native mode.\n+Supported offset stores are:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjQ0NDQxOnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/runtime/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozOTozNFrOGWxdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMDozOTozNFrOGWxdOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzMjE1NA==", "bodyText": "Do not change this. First version is M6, not M8.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426532154", "createdAt": "2020-05-18T10:39:34Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/pom.xml", "diffHunk": "@@ -30,7 +32,7 @@\n     <name>Camel Quarkus :: Debezium PostgresSQL Connector :: Runtime</name>\n \n     <properties>\n-        <firstVersion>1.0.0-M6</firstVersion>\n+        <firstVersion>1.0.0-M8</firstVersion>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjU4NjQ5OnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeFileOffsetBackingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNDozMlrOGWy25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNDozMlrOGWy25g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTExMA==", "bodyText": "Could we perhaps use ReflectiveClassBuildItem instead?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426555110", "createdAt": "2020-05-18T11:24:32Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeFileOffsetBackingStore.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.graal.storage;\n+\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+import org.apache.kafka.connect.storage.FileOffsetBackingStore;\n+\n+@RegisterForReflection\n+public class NativeFileOffsetBackingStore extends FileOffsetBackingStore {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjU4Njk1OnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeMemoryOffsetBackingStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNDo0MFrOGWy3Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNDo0MFrOGWy3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTE3NA==", "bodyText": "Could we perhaps use ReflectiveClassBuildItem instead?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426555174", "createdAt": "2020-05-18T11:24:40Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/graal/storage/NativeMemoryOffsetBackingStore.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.graal.storage;\n+\n+import io.quarkus.runtime.annotations.RegisterForReflection;\n+\n+@RegisterForReflection\n+public class NativeMemoryOffsetBackingStore extends org.apache.kafka.connect.storage.MemoryOffsetBackingStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjU4ODExOnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/runtime/src/main/resources/META-INF/beans.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNTowNVrOGWy37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoxMTowOVrOGW2dig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTM3Mw==", "bodyText": "What is the purpose of this file?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426555373", "createdAt": "2020-05-18T11:25:05Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxNDE1NA==", "bodyText": "beans.xml should not be necessary.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426614154", "createdAt": "2020-05-18T13:11:09Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NTM3Mw=="}, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjU5NTAwOnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNzoxOFrOGWy8Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMToyNzoxOFrOGWy8Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NjQ1NQ==", "bodyText": "Could you please re-generate this file by running mvn -N cq:update-quarkus-metadata from the repo root folder?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426556455", "createdAt": "2020-05-18T11:27:18Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -24,8 +24,12 @@\n name: \"Camel Debezium PostgresSQL Connector\"\n description: \"Capture changes from a PostgresSQL database\"\n metadata:\n-  unlisted: true\n-  guide: \"https://camel.apache.org/components/latest/debezium-postgres-component.html\"\n+  keywords:\n+  - \"camel\"\n+  - \"database\"\n+  - \"postgres\"\n+  - \"sql\"\n+  guide: \"https://quarkus.io/guides/camel\"\n   categories:\n   - \"integration\"\n-  status: \"preview\"\n+  status: \"stable\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjYwNTUxOnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMDoxOVrOGWzCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMDoxOVrOGWzCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1ODA4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <dependencyManagement>\n          \n          \n            \n                    <dependencies>\n          \n          \n            \n                        <dependency>\n          \n          \n            \n                            <groupId>org.apache.camel.quarkus</groupId>\n          \n          \n            \n                            <artifactId>camel-quarkus-bom-test</artifactId>\n          \n          \n            \n                            <version>${project.version}</version>\n          \n          \n            \n                            <type>pom</type>\n          \n          \n            \n                            <scope>import</scope>\n          \n          \n            \n                        </dependency>\n          \n          \n            \n                    </dependencies>\n          \n          \n            \n                </dependencyManagement>\n          \n      \n    \n    \n  \n\nSince recently, this happens automatically for all tests in camel-quarkus-build-parent-it higher in hierarchy.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426558089", "createdAt": "2020-05-18T11:30:19Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/pom.xml", "diffHunk": "@@ -40,6 +42,18 @@\n         <mvnd.builder.rule>camel-quarkus-debezium-postgres-deployment,camel-quarkus-support-policy-deployment</mvnd.builder.rule>\n     </properties>\n \n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.camel.quarkus</groupId>\n+                <artifactId>camel-quarkus-bom-test</artifactId>\n+                <version>${project.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjYwNzQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMDo1MlrOGWzDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMDo1MlrOGWzDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1ODM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <!--        <dependency>-->\n          \n          \n            \n            <!--            <groupId>org.apache.camel.quarkus</groupId>-->\n          \n          \n            \n            <!--            <artifactId>camel-quarkus-kafka</artifactId>-->\n          \n          \n            \n            <!--        </dependency>-->", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426558384", "createdAt": "2020-05-18T11:30:52Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/pom.xml", "diffHunk": "@@ -56,11 +70,48 @@\n             <artifactId>quarkus-junit5</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>io.rest-assured</groupId>\n             <artifactId>rest-assured</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n+<!--        <dependency>-->\n+<!--            <groupId>org.apache.camel.quarkus</groupId>-->\n+<!--            <artifactId>camel-quarkus-kafka</artifactId>-->\n+<!--        </dependency>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjYxNTI1OnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMzoxOVrOGWzIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozMzoxOVrOGWzIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1OTYxMA==", "bodyText": "I think this should not be necessary. Is it perhaps some leftover?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426559610", "createdAt": "2020-05-18T11:33:19Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/pom.xml", "diffHunk": "@@ -56,11 +70,48 @@\n             <artifactId>quarkus-junit5</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n         <dependency>\n             <groupId>io.rest-assured</groupId>\n             <artifactId>rest-assured</artifactId>\n             <scope>test</scope>\n         </dependency>\n+\n+<!--        <dependency>-->\n+<!--            <groupId>org.apache.camel.quarkus</groupId>-->\n+<!--            <artifactId>camel-quarkus-kafka</artifactId>-->\n+<!--        </dependency>-->\n+\n+        <dependency>\n+            <groupId>org.apache.camel.quarkus</groupId>\n+            <artifactId>camel-quarkus-direct</artifactId>\n+        </dependency>\n+\n+        <!-- test dependencies - camel-quarkus -->\n+        <dependency>\n+            <groupId>org.apache.camel.quarkus</groupId>\n+            <artifactId>camel-quarkus-integration-testcontainers-support</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-jdbc-postgresql</artifactId>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjYyNDk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozNjoxNFrOGWzOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTozNjoxNFrOGWzOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2MTA5Ng==", "bodyText": "It would perhaps be worth JavaDoc-ing that connection is set by DebeziumPostgresTestResource", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426561096", "createdAt": "2020-05-18T11:36:14Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.response.Response;\n+import org.jboss.logging.Logger;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.emptyOrNullString;\n+import static org.hamcrest.Matchers.is;\n+\n+@QuarkusTest\n+@QuarkusTestResource(DebeziumPostgresTestResource.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class DebeziumPostgresTest {\n+    private static final Logger LOG = Logger.getLogger(DebeziumPostgresTest.class);\n+\n+    private static String COMPANY_1 = \"Best Company\";\n+    private static String COMPANY_2 = \"Even Better Company\";\n+    private static String CITY_1 = \"Prague\";\n+    private static String CITY_2 = \"Paris\";\n+\n+    private static int REPEAT_COUNT = 5;\n+\n+    Connection connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "859ffe68382a0b76c999baf8b7168f9d2916ce46"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjkzMTE2OnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowMzo1MVrOGW2MOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowMzo1MVrOGW2MOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwOTcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            *Since Camel Quarkus 1.0.0-M8*\n          \n          \n            \n            *Since Camel Quarkus 1.0.0-M6*", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426609721", "createdAt": "2020-05-18T13:03:51Z", "author": {"login": "ppalaga"}, "path": "docs/modules/ROOT/pages/extensions/debezium-postgres.adoc", "diffHunk": "@@ -0,0 +1,30 @@\n+[[debezium-postgres]]\n+= Debezium Postgres Extension\n+\n+*Since Camel Quarkus 1.0.0-M8*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64edb689836b75434f11c33b0e5d6e2b1f19593b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njk0MDY0OnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNjoyNVrOGW2SLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowNjoyNVrOGW2SLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMTI0NQ==", "bodyText": "Wouldn't these two actually be fine with new ReflectiveClassBuildItem(false, false, ... (constructor-only reflection)?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426611245", "createdAt": "2020-05-18T13:06:25Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.deployment;\n+\n+import java.util.ArrayList;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class DebeziumPostgresProcessor {\n+\n+    private static final String FEATURE = \"camel-debezium-postgres\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.kafka.connect.json\")\n+                        || n.startsWith(\"io.debezium.connector.postgresql.PostgresConnector\")\n+                        || n.startsWith(\"io.debezium.embedded.spi\"))\n+                .sorted()\n+                .collect(toCollection(ArrayList::new));\n+\n+        dtos.add(\"org.apache.kafka.connect.storage.FileOffsetBackingStore\");\n+        dtos.add(\"org.apache.kafka.connect.storage.MemoryOffsetBackingStore\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64edb689836b75434f11c33b0e5d6e2b1f19593b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njk0OTUyOnYy", "diffSide": "RIGHT", "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowODo1MVrOGW2XrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzowODo1MVrOGW2XrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYxMjY1Mw==", "bodyText": "If we are adding new IndexDependencyBuildItem(\"io.debezium\", \"debezium-connector-postgres\") only because of io.debezium.connector.postgresql.PostgresConnector, then hardcoding a literal like with the BackingStores below would be more effective.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426612653", "createdAt": "2020-05-18T13:08:51Z", "author": {"login": "ppalaga"}, "path": "extensions/debezium-postgres/deployment/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/deployment/DebeziumPostgresProcessor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.debezium.postgres.deployment;\n+\n+import java.util.ArrayList;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class DebeziumPostgresProcessor {\n+\n+    private static final String FEATURE = \"camel-debezium-postgres\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.kafka.connect.json\")\n+                        || n.startsWith(\"io.debezium.connector.postgresql.PostgresConnector\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64edb689836b75434f11c33b0e5d6e2b1f19593b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzAyOTkzOnYy", "diffSide": "RIGHT", "path": "docs/modules/ROOT/pages/list-of-camel-quarkus-extensions.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyODoxOVrOGW3J4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMzoyODoxOVrOGW3J4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTUwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             Stable | 1.0.0-M8 | Capture changes from a PostgresSQL database.\n          \n          \n            \n             Stable | 1.0.0-M6 | Capture changes from a PostgresSQL database.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426625505", "createdAt": "2020-05-18T13:28:19Z", "author": {"login": "ppalaga"}, "path": "docs/modules/ROOT/pages/list-of-camel-quarkus-extensions.adoc", "diffHunk": "@@ -226,8 +226,8 @@ Level | Since | Description\n  Preview | 1.0.0-M6 | Capture changes from a MySQL database.\n \n | link:https://camel.apache.org/components/latest/debezium-postgres-component.html[Debezium PostgresSQL Connector] (camel-quarkus-debezium-postgres) +\n-`debezium-postgres:name` | JVM +\n- Preview | 1.0.0-M6 | Capture changes from a PostgresSQL database.\n+`debezium-postgres:name` | Native +\n+ Stable | 1.0.0-M8 | Capture changes from a PostgresSQL database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64edb689836b75434f11c33b0e5d6e2b1f19593b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ3MzQ3OnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MDo1NlrOGXFWAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MDo1NlrOGXFWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1Nzk4NA==", "bodyText": "If something like the following works, we could remove the whole DebeziumPostgresRouteBuilder class and the direct Maven dependency:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Exchange message = consumerTemplate.receive(\"direct:event\", 2000);\n          \n          \n            \n                    return message == null ? null : message.getIn().getBody(String.class);\n          \n          \n            \n                    return consumerTemplate.receiveBody(\"debezium-postgres:localhost?\"\n          \n          \n            \n                            + \"databaseHostname={{\" + DebeziumPostgresResource.PROPERTY_HOSTNAME + \"}}\"\n          \n          \n            \n                            + \"&databasePort={{\" + DebeziumPostgresResource.PROPERTY_PORT + \"}}\"\n          \n          \n            \n                            + \"&databaseUser=\" + DebeziumPostgresResource.DB_USERNAME\n          \n          \n            \n                            + \"&databasePassword=\" + DebeziumPostgresResource.DB_PASSWORD\n          \n          \n            \n                            + \"&databaseDbname=\" + DebeziumPostgresResource.DB_NAME\n          \n          \n            \n                            + \"&databaseServerName=qa\"\n          \n          \n            \n                            + \"&offsetStorageFileName={{\" + DebeziumPostgresResource.PROPERTY_STORE_FILE + \"}}\", 5000, String.class);", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r426857984", "createdAt": "2020-05-18T19:50:56Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/src/main/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresResource.java", "diffHunk": "@@ -22,30 +22,33 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n \n-import org.apache.camel.CamelContext;\n+import org.apache.camel.ConsumerTemplate;\n+import org.apache.camel.Exchange;\n import org.jboss.logging.Logger;\n \n @Path(\"/debezium-postgres\")\n @ApplicationScoped\n public class DebeziumPostgresResource {\n \n+    public static final String DB_NAME = \"postgresDB\";\n+    public static final String DB_USERNAME = \"user\";\n+    public static final String DB_PASSWORD = \"changeit\";\n+    public static final String PROPERTY_HOSTNAME = \"quarkus.postgres.hostname\";\n+    public static final String PROPERTY_STORE_FILE = \"quarkus.debezium.store.folder\";\n+    public static final String PROPERTY_PORT = \"quarkus.postgres.port\";\n+\n     private static final Logger LOG = Logger.getLogger(DebeziumPostgresResource.class);\n \n-    private static final String COMPONENT_DEBEZIUM_POSTGRES = \"debezium-postgres\";\n     @Inject\n-    CamelContext context;\n+    ConsumerTemplate consumerTemplate;\n \n-    @Path(\"/load/component/debezium-postgres\")\n+    @Path(\"/getEvent\")\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    public Response loadComponentDebeziumPostgres() throws Exception {\n-        /* This is an autogenerated test */\n-        if (context.getComponent(COMPONENT_DEBEZIUM_POSTGRES) != null) {\n-            return Response.ok().build();\n-        }\n-        LOG.warnf(\"Could not load [%s] from the Camel context\", COMPONENT_DEBEZIUM_POSTGRES);\n-        return Response.status(500, COMPONENT_DEBEZIUM_POSTGRES + \" could not be loaded from the Camel context\").build();\n+    public String getEvent() throws Exception {\n+        final Exchange message = consumerTemplate.receive(\"direct:event\", 2000);\n+        return message == null ? null : message.getIn().getBody(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "418ec7c3b759085ff59f4bbd3518e9ebb15f6536"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTQ0Nzg4OnYy", "diffSide": "RIGHT", "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDowOToyM1rOGXiODg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxMToyOVrOGYNxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng==", "bodyText": "Do we need to do inject these things into the test instance?\nThe usual way to set up properties needed by the component endpoint URIs would be to return a map of properties from start(). For example, like we do in ActiveMQTestResource.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427331086", "createdAt": "2020-05-19T14:09:23Z", "author": {"login": "jamesnetherton"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzNjM5OQ==", "bodyText": "@jamesnetherton  I know about Map approach. It is working well if property placeholder is \"not\" in test, where I could inject propertiesComponent to translate it for me. But I haven't found any way how to do it in test/* classes. Did I miss something?", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427336399", "createdAt": "2020-05-19T14:16:20Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzNzA0NQ==", "bodyText": "and for example connection is not a simple object", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427337045", "createdAt": "2020-05-19T14:17:11Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzODE5OQ==", "bodyText": "I knew that it makes the map available to the application under test, but can the test code access it as well (how?).", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427338199", "createdAt": "2020-05-19T14:18:44Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM0MTQxMw==", "bodyText": "Aren't they just system properties? So you should be able to look them up.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427341413", "createdAt": "2020-05-19T14:22:35Z", "author": {"login": "jamesnetherton"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDk2MA==", "bodyText": "Indeed. I thought it was a bit more sophisticated. So assigning a random port to the app under test does not help at all to be able to run the tests in parallel, because the system props used to pass the port number are shared by all tests.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r427354960", "createdAt": "2020-05-19T14:38:35Z", "author": {"login": "ppalaga"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NDU5MQ==", "bodyText": "@jamesnetherton I've started to work on debebezium-mysql. Because this extension will be very similar to debezium-postgres (and probably other debezium-* extensions). I'd like to refactor each of them to use some debezium-common extension. As a part of that refactor I'll cover also this issue with properties. -> From my POV I'd fixed it after merging this one PR.", "url": "https://github.com/apache/camel-quarkus/pull/1215#discussion_r428044591", "createdAt": "2020-05-20T14:11:29Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/debezium-postgres/src/test/java/org/apache/camel/quarkus/component/debezium/postgres/it/DebeziumPostgresTestResource.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.camel.quarkus.component.debezium.postgres.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.apache.camel.quarkus.testcontainers.ContainerResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.utility.TestcontainersConfiguration;\n+\n+public class DebeziumPostgresTestResource implements ContainerResourceLifecycleManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DebeziumPostgresTestResource.class);\n+\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final String POSTGRES_IMAGE = \"debezium/postgres:11\";\n+\n+    private PostgreSQLContainer<?> postgresContainer;\n+    private Connection connection;\n+    private Path storeFile;\n+    private String hostname;\n+    private int port;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        LOGGER.info(TestcontainersConfiguration.getInstance().toString());\n+\n+        try {\n+            storeFile = Files.createTempFile(\"debezium-postgress-store-\", \"\");\n+\n+            postgresContainer = new PostgreSQLContainer<>(POSTGRES_IMAGE)\n+                    .withUsername(DebeziumPostgresResource.DB_USERNAME)\n+                    .withPassword(DebeziumPostgresResource.DB_PASSWORD)\n+                    .withDatabaseName(DebeziumPostgresResource.DB_NAME)\n+                    .withInitScript(\"init.sql\");\n+\n+            postgresContainer.start();\n+\n+            final String jdbcUrl = \"jdbc:postgresql://\" + postgresContainer.getContainerIpAddress() + \":\"\n+                    + postgresContainer.getMappedPort(POSTGRES_PORT) + \"/\" + DebeziumPostgresResource.DB_NAME + \"?user=\"\n+                    + DebeziumPostgresResource.DB_USERNAME + \"&password=\" + DebeziumPostgresResource.DB_PASSWORD;\n+            connection = DriverManager.getConnection(jdbcUrl);\n+            hostname = postgresContainer.getContainerIpAddress();\n+            port = postgresContainer.getMappedPort(POSTGRES_PORT);\n+\n+            return Collections.emptyMap();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        try {\n+            if (connection != null) {\n+                connection.close();\n+            }\n+            if (postgresContainer != null) {\n+                postgresContainer.stop();\n+            }\n+            if (storeFile != null) {\n+                Files.deleteIfExists(storeFile);\n+            }\n+        } catch (Exception e) {\n+            // ignored\n+        }\n+    }\n+\n+    @Override\n+    public void inject(Object testInstance) {\n+        ((DebeziumPostgresTest) testInstance).connection = this.connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMzMTA4Ng=="}, "originalCommit": {"oid": "653e589fc4e2efefcf75fd71e4659165dfac2fbc"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4296, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}