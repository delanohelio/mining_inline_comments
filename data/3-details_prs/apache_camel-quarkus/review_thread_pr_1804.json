{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NzAwOTUy", "number": 1804, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNTowOFrOEkkE-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxMTo1N1rOEncxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc1Mjg5OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNTowOFrOHTk5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo0OTozOVrOHTmRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4OTUwMg==", "bodyText": "Unless I missed something, I don't see any testing for what is likely to be the most common use case - reading a template from the classpath.\nAlso, for the other templating components, we have some extra documentation which we should replicate for this extension.\nhttps://camel.apache.org/camel-quarkus/latest/reference/extensions/mustache.html#_additional_camel_quarkus_configuration", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r490289502", "createdAt": "2020-09-17T14:25:08Z", "author": {"login": "jamesnetherton"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"Dear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaHeader() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833e4013dcd83eb1d2833e8e03bbb8218a9b7a32"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMxMjEzNA==", "bodyText": "Actually I thought that use case with template via header, could contain more problems.\nBut you are right, I'll add also basic use case with template from classpath.", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r490312134", "createdAt": "2020-09-17T14:49:39Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"Dear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaHeader() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4OTUwMg=="}, "originalCommit": {"oid": "833e4013dcd83eb1d2833e8e03bbb8218a9b7a32"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc4NDAxOnYy", "diffSide": "RIGHT", "path": "extensions/velocity/deployment/src/main/java/org/apache/camel/quarkus/component/velocity/deployment/VelocityProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMTo0MVrOHTlNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDo1MToyM1rOHTmZLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NDYwOA==", "bodyText": "Just a question, why do we register MessageSupport for reflection? Is it needed for the template engine to get access to exchange headers etc?", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r490294608", "createdAt": "2020-09-17T14:31:41Z", "author": {"login": "jamesnetherton"}, "path": "extensions/velocity/deployment/src/main/java/org/apache/camel/quarkus/component/velocity/deployment/VelocityProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.deployment;\n+\n+import java.util.ArrayList;\n+import java.util.TreeMap;\n+\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.component.velocity.CamelVelocityClasspathResourceLoader;\n+import org.apache.camel.support.MessageSupport;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class VelocityProcessor {\n+\n+    private static final String FEATURE = \"camel-velocity\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem initResources() {\n+        return new NativeImageResourceBuildItem(\n+                \"org/apache/velocity/runtime/defaults/velocity.properties\",\n+                \"org/apache/velocity/runtime/defaults/directive.properties\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.velocity.runtime\") ||\n+                        n.startsWith(\"org.apache.velocity.util.introspection\"))\n+                .sorted()\n+                .collect(toCollection(ArrayList::new));\n+\n+        dtos.add(CamelVelocityClasspathResourceLoader.class.getName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithMethods() {\n+        return new ReflectiveClassBuildItem(true, false,\n+                TreeMap.class.getName(),\n+                MessageSupport.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "833e4013dcd83eb1d2833e8e03bbb8218a9b7a32"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMxNDAzMA==", "bodyText": "This is needed in scenario with \"SupplementalContext\". Velocity engine uses reflection to access output message to put some values among headers", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r490314030", "createdAt": "2020-09-17T14:51:23Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/velocity/deployment/src/main/java/org/apache/camel/quarkus/component/velocity/deployment/VelocityProcessor.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.deployment;\n+\n+import java.util.ArrayList;\n+import java.util.TreeMap;\n+\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.IndexDependencyBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.component.velocity.CamelVelocityClasspathResourceLoader;\n+import org.apache.camel.support.MessageSupport;\n+import org.jboss.jandex.IndexView;\n+\n+import static java.util.stream.Collectors.toCollection;\n+\n+class VelocityProcessor {\n+\n+    private static final String FEATURE = \"camel-velocity\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    NativeImageResourceBuildItem initResources() {\n+        return new NativeImageResourceBuildItem(\n+                \"org/apache/velocity/runtime/defaults/velocity.properties\",\n+                \"org/apache/velocity/runtime/defaults/directive.properties\");\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflection(CombinedIndexBuildItem combinedIndex) {\n+        IndexView index = combinedIndex.getIndex();\n+\n+        ArrayList<String> dtos = index.getKnownClasses().stream().map(ci -> ci.name().toString())\n+                .filter(n -> n.startsWith(\"org.apache.velocity.runtime\") ||\n+                        n.startsWith(\"org.apache.velocity.util.introspection\"))\n+                .sorted()\n+                .collect(toCollection(ArrayList::new));\n+\n+        dtos.add(CamelVelocityClasspathResourceLoader.class.getName());\n+\n+        return new ReflectiveClassBuildItem(false, false, dtos.toArray(new String[dtos.size()]));\n+    }\n+\n+    @BuildStep\n+    ReflectiveClassBuildItem registerForReflectionWithMethods() {\n+        return new ReflectiveClassBuildItem(true, false,\n+                TreeMap.class.getName(),\n+                MessageSupport.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NDYwOA=="}, "originalCommit": {"oid": "833e4013dcd83eb1d2833e8e03bbb8218a9b7a32"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODAyOTA2OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxNzoxNlrOHWjjKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDozOTo1NFrOHWk0Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMzE2MQ==", "bodyText": "If you use a writer, it needs to be enclosed in a try-with. You also implicitly use the current machines default encoding, which can be just anything - the test might fail on machines with exotic default encodings. Shorter & solving all named problems:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FileWriter writer = new FileWriter(tmpFile);\n          \n          \n            \n                    writer.write(body);\n          \n          \n            \n                    writer.close();\n          \n          \n            \n                    Files.write(tmpFile.toPath(), body.getBytes(StandardCharsets.UTF_8);", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493413161", "createdAt": "2020-09-23T10:17:16Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+\n+                .statusCode(201)\n+                .body(equalTo(useContentCache ? \"Hi Sheldon\" : \"Bye Sheldon\"));\n+    }\n+\n+    private File createFile(String fileName, String body) throws IOException {\n+        File tmpFile = File.createTempFile(fileName, \".vm\");\n+        FileWriter writer = new FileWriter(tmpFile);\n+        writer.write(body);\n+        writer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxOTc3Ng==", "bodyText": "I missed that one (copy paste), I'll fix it", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493419776", "createdAt": "2020-09-23T10:24:34Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+\n+                .statusCode(201)\n+                .body(equalTo(useContentCache ? \"Hi Sheldon\" : \"Bye Sheldon\"));\n+    }\n+\n+    private File createFile(String fileName, String body) throws IOException {\n+        File tmpFile = File.createTempFile(fileName, \".vm\");\n+        FileWriter writer = new FileWriter(tmpFile);\n+        writer.write(body);\n+        writer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMzE2MQ=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzMzkzOA==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493433938", "createdAt": "2020-09-23T10:39:54Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+\n+                .statusCode(201)\n+                .body(equalTo(useContentCache ? \"Hi Sheldon\" : \"Bye Sheldon\"));\n+    }\n+\n+    private File createFile(String fileName, String body) throws IOException {\n+        File tmpFile = File.createTempFile(fileName, \".vm\");\n+        FileWriter writer = new FileWriter(tmpFile);\n+        writer.write(body);\n+        writer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMzE2MQ=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODAzOTM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxOToxN1rOHWjpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDozOTozNVrOHWkzGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDg0NQ==", "bodyText": "Couldn't we remove the trailing empty commets?", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493414845", "createdAt": "2020-09-23T10:19:17Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQyMDEzNQ==", "bodyText": "I'll remove unnecessary comments", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493420135", "createdAt": "2020-09-23T10:24:59Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDg0NQ=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzMzYyNQ==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493433625", "createdAt": "2020-09-23T10:39:35Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDg0NQ=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODA0MTY1OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxOTo0NFrOHWjrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDozOTo0OFrOHWkz4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTIzNA==", "bodyText": "Can we remove this line?", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493415234", "createdAt": "2020-09-23T10:19:44Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQyMDE5Nw==", "bodyText": "I'll remove unnecessary comments", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493420197", "createdAt": "2020-09-23T10:25:03Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTIzNA=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzMzgyNg==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493433826", "createdAt": "2020-09-23T10:39:48Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTIzNA=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODA0MjM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxOTo0OVrOHWjrtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDozOTo0MVrOHWkzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTM1MA==", "bodyText": "Can we remove this line?", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493415350", "createdAt": "2020-09-23T10:19:49Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQyMDMyOQ==", "bodyText": "I'll remove unnecessary comments", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493420329", "createdAt": "2020-09-23T10:25:09Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTM1MA=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQzMzcyMg==", "bodyText": "done", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r493433722", "createdAt": "2020-09-23T10:39:41Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/test/java/org/apache/camel/quarkus/component/velocity/it/VelocityTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+class VelocityTest {\n+\n+    public static final String OLD_BODY = \"old_body\";\n+    public static final String BODY = \"bar\";\n+    public static final String NEW_BODY = \"new_body\";\n+    public static final String MSG = \"\\nDear Sheldon\\n\" +\n+            \"\\n\" +\n+            \"Thanks for the order of Camel in Action.\\n\" +\n+            \"\\n\" +\n+            \"Regards Apache Camel Riders Bookstore\\n\" +\n+            \"PS: Next beer is on me\";\n+\n+    @Test\n+    public void testTemplateViaFile() throws IOException {\n+        File template = createFile(\"velocity_test\", \"Hi ${headers.name}. You have got ${headers.item}. ${body}\");\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. You have got Camel in Action. PS: Next beer is on me\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspath() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/letter.vm\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(MSG));\n+    }\n+\n+    @Test\n+    public void testTemplateViaClasspathWithProperties() {\n+        //class loader is forbidden by properties, response should fail\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .queryParam(\"template\", \"//template/template.vm\")\n+                .queryParam(\"propertiesFile\", \"/template/velocity.properties\")\n+                .queryParam(\"expectFailure\", \"true\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"PS: Next beer is on me\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(500)\n+                .body(containsString(\"Exception\"));\n+    }\n+\n+    @Test\n+    public void testTemplateViaHeader() {\n+        RestAssured.given() //\n+                .queryParam(\"body\", \"PS: Next beer is on me.\")\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"Camel in Action\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Hi ${headers.name}. Thanks for ${headers.item}. ${body}\")\n+                .post(\"/velocity/templateViaHeader\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon. Thanks for Camel in Action. PS: Next beer is on me.\"));\n+    }\n+\n+    @Test\n+    public void testSupplementalContext() {\n+        final String template = \"#set( $headers.body = ${body} )\\n#set( $headers['in.body'] = $in.body )\\n\" + BODY;\n+        Map result = RestAssured.given() //\n+                .queryParam(\"body\", OLD_BODY)\n+                .queryParam(\"supplementalBody\", NEW_BODY)\n+                .contentType(ContentType.TEXT)\n+                .body(template)\n+                .post(\"/velocity/supplementalContext\") //\n+                .then()\n+                .statusCode(200)\n+                .extract().as(Map.class);\n+\n+        assertTrue(result.containsKey(\"in.body\"));\n+        assertEquals(OLD_BODY, result.get(\"in.body\"));\n+        assertTrue(result.containsKey(\"result_value\"));\n+        assertEquals(BODY, result.get(\"result_value\"));\n+        assertTrue(result.containsKey(\"body\"));\n+        assertEquals(NEW_BODY, result.get(\"body\"));\n+    }\n+\n+    @Test\n+    public void testBodyAsDomainObject() {\n+        RestAssured.given()\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"country\", \"Earth 1\")\n+                .contentType(ContentType.JSON)\n+                .body(new Person(\"Sheldon\", \"Earth 2\"))\n+                .post(\"/velocity/bodyAsDomainObject\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"\\nHi Sheldon from Earth 2\"));\n+    }\n+\n+    @Test\n+    public void testValuesInProperties() {\n+        RestAssured.given() //\n+                .queryParam(\"name\", \"Sheldon\")\n+                .queryParam(\"item\", \"1\")\n+                .contentType(ContentType.TEXT)\n+                .body(\"Dear ${exchange.properties.name}. You ordered item ${exchange.properties.item}.\")\n+                .post(\"/velocity/withProperties\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Dear Sheldon. You ordered item 1.\"));\n+    }\n+\n+    @Test\n+    public void testContentCacheFalse() throws Exception {\n+        testContentCache(false);\n+    }\n+\n+    @Test\n+    public void testContentCacheTrue() throws Exception {\n+        testContentCache(true);\n+    }\n+\n+    private void testContentCache(boolean useContentCache) throws Exception {\n+        File template = createFile(\"velocity_test\", \"Hi ${body}\");\n+\n+        RestAssured.given()\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")\n+                .queryParam(\"contentCache\", useContentCache)\n+                .contentType(ContentType.TEXT)\n+                .body(\"Sheldon\")\n+                .post(\"/velocity/template\") //\n+                .then()\n+                .statusCode(201)\n+                .body(equalTo(\"Hi Sheldon\"));\n+\n+        //override file\n+        Files.write(Paths.get(template.getPath()), \"Bye ${body}\".getBytes());\n+\n+        RestAssured.given() //\n+                .queryParam(\"template\", \"file:/\" + template.getPath())\n+                //                .queryParam(\"loaderCache\", \"false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTM1MA=="}, "originalCommit": {"oid": "efbaf45b3d24c7dda9d043f02a7fcc224a6d7c5b"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODAwNTk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/main/java/org/apache/camel/quarkus/component/velocity/it/VelocityResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzowOTo1MlrOHYC7EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo1Mjo0NlrOHYElRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3NTc2MQ==", "bodyText": "Extensive logging slows down the test execution on machines with slow IO (which CI machines typically are). I think we should prefer debug level in situations like this. I should perhaps change the template that generates these messages. This is just a tip for the future.", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r494975761", "createdAt": "2020-09-25T13:09:52Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/main/java/org/apache/camel/quarkus/component/velocity/it/VelocityResource.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.velocity.VelocityConstants;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/velocity\")\n+@ApplicationScoped\n+public class VelocityResource {\n+\n+    private static final Logger LOG = Logger.getLogger(VelocityResource.class);\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+    private String endpointUri;\n+\n+    @Path(\"/template\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response template(String message, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name, @QueryParam(\"template\") String template,\n+            @QueryParam(\"propertiesFile\") String propertiesFile,\n+            @QueryParam(\"contentCache\") String contentCache,\n+            @QueryParam(\"expectFailure\") String exectFaiure) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", message);\n+        Map<String, Object> headers = new HashMap() {\n+            {\n+                if (item != null) {\n+                    put(\"item\", item);\n+                }\n+                if (name != null) {\n+                    put(\"name\", name);\n+                }\n+                put(VelocityConstants.VELOCITY_TEMPLATE, message);\n+            }\n+        };\n+        String endpointUrl = \"velocity:\" + template;\n+        if (propertiesFile != null) {\n+            endpointUrl = endpointUrl + \"?propertiesFile=\" + propertiesFile;\n+        }\n+        if (contentCache != null) {\n+            endpointUrl = endpointUrl + \"?contentCache=\" + contentCache;\n+        }\n+        try {\n+            final String response = producerTemplate.requestBodyAndHeaders(endpointUrl, message,\n+                    headers,\n+                    String.class);\n+            LOG.infof(\"Got response from velocity: %s\", response);\n+            return Response\n+                    .created(new URI(\"https://camel.apache.org/\"))\n+                    .entity(response)\n+                    .build();\n+        } catch (Exception e) {\n+            if (exectFaiure != null && Boolean.parseBoolean(exectFaiure)) {\n+                return Response\n+                        .created(new URI(\"https://camel.apache.org/\"))\n+                        .entity(e.toString())\n+                        .status(500)\n+                        .build();\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @Path(\"/bodyAsDomainObject\")\n+    @POST\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response bodyAsDomainObject(Person person, @QueryParam(\"givenName\") String givenName,\n+            @QueryParam(\"familyName\") String familyName) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", person);\n+        final String response = producerTemplate.requestBody(\"velocity://template/BodyAsDomainObject.vm\", person,\n+                String.class);\n+        LOG.infof(\"Got response from velocity: %s\", response);\n+        return Response\n+                .created(new URI(\"https://camel.apache.org/\"))\n+                .entity(response)\n+                .build();\n+    }\n+\n+    @Path(\"/templateViaHeader\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response templateViaHeader(String message, @QueryParam(\"body\") String body, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", body);\n+        Map<String, Object> headers = new HashMap() {\n+            {\n+                put(\"item\", item);\n+                put(\"name\", name);\n+                put(VelocityConstants.VELOCITY_TEMPLATE, message);\n+            }\n+        };\n+        final String response = producerTemplate.requestBodyAndHeaders(\"velocity::dummy?allowTemplateFromHeader=true\", body,\n+                headers,\n+                String.class);\n+        LOG.infof(\"Got response from velocity: %s\", response);\n+        return Response\n+                .created(new URI(\"https://camel.apache.org/\"))\n+                .entity(response)\n+                .build();\n+    }\n+\n+    @Path(\"/withProperties\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response withProperties(String message, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ea96c98854d6b77901e23e36fbe68c84ccb576"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMjk0OA==", "bodyText": "I've left logging here because it was generated by the command mvn cq:create -N -Dcq.artifactIdBase=foo-abc. But in the future I won't keep it", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r495002948", "createdAt": "2020-09-25T13:52:46Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/velocity/src/main/java/org/apache/camel/quarkus/component/velocity/it/VelocityResource.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.velocity.it;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.component.velocity.VelocityConstants;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/velocity\")\n+@ApplicationScoped\n+public class VelocityResource {\n+\n+    private static final Logger LOG = Logger.getLogger(VelocityResource.class);\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+    private String endpointUri;\n+\n+    @Path(\"/template\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response template(String message, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name, @QueryParam(\"template\") String template,\n+            @QueryParam(\"propertiesFile\") String propertiesFile,\n+            @QueryParam(\"contentCache\") String contentCache,\n+            @QueryParam(\"expectFailure\") String exectFaiure) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", message);\n+        Map<String, Object> headers = new HashMap() {\n+            {\n+                if (item != null) {\n+                    put(\"item\", item);\n+                }\n+                if (name != null) {\n+                    put(\"name\", name);\n+                }\n+                put(VelocityConstants.VELOCITY_TEMPLATE, message);\n+            }\n+        };\n+        String endpointUrl = \"velocity:\" + template;\n+        if (propertiesFile != null) {\n+            endpointUrl = endpointUrl + \"?propertiesFile=\" + propertiesFile;\n+        }\n+        if (contentCache != null) {\n+            endpointUrl = endpointUrl + \"?contentCache=\" + contentCache;\n+        }\n+        try {\n+            final String response = producerTemplate.requestBodyAndHeaders(endpointUrl, message,\n+                    headers,\n+                    String.class);\n+            LOG.infof(\"Got response from velocity: %s\", response);\n+            return Response\n+                    .created(new URI(\"https://camel.apache.org/\"))\n+                    .entity(response)\n+                    .build();\n+        } catch (Exception e) {\n+            if (exectFaiure != null && Boolean.parseBoolean(exectFaiure)) {\n+                return Response\n+                        .created(new URI(\"https://camel.apache.org/\"))\n+                        .entity(e.toString())\n+                        .status(500)\n+                        .build();\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @Path(\"/bodyAsDomainObject\")\n+    @POST\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response bodyAsDomainObject(Person person, @QueryParam(\"givenName\") String givenName,\n+            @QueryParam(\"familyName\") String familyName) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", person);\n+        final String response = producerTemplate.requestBody(\"velocity://template/BodyAsDomainObject.vm\", person,\n+                String.class);\n+        LOG.infof(\"Got response from velocity: %s\", response);\n+        return Response\n+                .created(new URI(\"https://camel.apache.org/\"))\n+                .entity(response)\n+                .build();\n+    }\n+\n+    @Path(\"/templateViaHeader\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response templateViaHeader(String message, @QueryParam(\"body\") String body, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", body);\n+        Map<String, Object> headers = new HashMap() {\n+            {\n+                put(\"item\", item);\n+                put(\"name\", name);\n+                put(VelocityConstants.VELOCITY_TEMPLATE, message);\n+            }\n+        };\n+        final String response = producerTemplate.requestBodyAndHeaders(\"velocity::dummy?allowTemplateFromHeader=true\", body,\n+                headers,\n+                String.class);\n+        LOG.infof(\"Got response from velocity: %s\", response);\n+        return Response\n+                .created(new URI(\"https://camel.apache.org/\"))\n+                .entity(response)\n+                .build();\n+    }\n+\n+    @Path(\"/withProperties\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response withProperties(String message, @QueryParam(\"item\") String item,\n+            @QueryParam(\"name\") String name) throws Exception {\n+        LOG.infof(\"Sending to velocity: %s\", message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3NTc2MQ=="}, "originalCommit": {"oid": "67ea96c98854d6b77901e23e36fbe68c84ccb576"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODAxNDA4OnYy", "diffSide": "RIGHT", "path": "integration-tests/velocity/src/main/resources/template/BodyAsDomainObject.vm", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzoxMTo1N1rOHYC__A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzozNDo1M1rOHYD3uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3NzAyMA==", "bodyText": "We have two license headers for some reason here and elsewhere.", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r494977020", "createdAt": "2020-09-25T13:11:57Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/main/resources/template/BodyAsDomainObject.vm", "diffHunk": "@@ -0,0 +1,33 @@\n+#*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *#\n+## ------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ea96c98854d6b77901e23e36fbe68c84ccb576"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk5MTI5MQ==", "bodyText": "Merged and filed a followup: #1843", "url": "https://github.com/apache/camel-quarkus/pull/1804#discussion_r494991291", "createdAt": "2020-09-25T13:34:53Z", "author": {"login": "ppalaga"}, "path": "integration-tests/velocity/src/main/resources/template/BodyAsDomainObject.vm", "diffHunk": "@@ -0,0 +1,33 @@\n+#*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *#\n+## ------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+## http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3NzAyMA=="}, "originalCommit": {"oid": "67ea96c98854d6b77901e23e36fbe68c84ccb576"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4653, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}