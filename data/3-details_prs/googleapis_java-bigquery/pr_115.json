{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjI5NjU3", "number": 115, "title": "feat: add new sample - Tables: Relax column query append", "bodyText": "Fixes b/147808961", "createdAt": "2020-01-17T16:48:28Z", "url": "https://github.com/googleapis/java-bigquery/pull/115", "merged": true, "mergeCommit": {"oid": "1a1480f5079c964dd492126557742340e0b6ef6e"}, "closed": true, "closedAt": "2020-01-27T19:34:24Z", "author": {"login": "stephaniewang526"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7RnidAH2gAyMzY0MjI5NjU3OmMwYWYxNTllZjVkODg4Yjk1NGM5NjI2YjM3MTM4N2U1OWFjMTlhY2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-hwVtAFqTM0ODkxMDUxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0af159ef5d888b954c9626b371387e59ac19acb", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/c0af159ef5d888b954c9626b371387e59ac19acb", "committedDate": "2020-01-17T16:48:02Z", "message": "feat: add new sample - Tables: Relax column query append"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff1f36e7a152edf949cd4b729b03349558558b2", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/4ff1f36e7a152edf949cd4b729b03349558558b2", "committedDate": "2020-01-17T17:01:00Z", "message": "nit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTAxMTM4", "url": "https://github.com/googleapis/java-bigquery/pull/115#pullrequestreview-344901138", "createdAt": "2020-01-18T00:03:16Z", "commit": {"oid": "4ff1f36e7a152edf949cd4b729b03349558558b2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowMzoxN1rOFfIJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowMzoxN1rOFfIJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MzY2MQ==", "bodyText": "This should be an arg that you pass in (or more preferably formatted from existing arguments)- all the //TODO's should be in the top function so they are easy to find.\nCan you do something like: String tableRef = String.format(\"%s.%s.%s\", projectId, datasetId, tableName)?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r368183661", "createdAt": "2020-01-18T00:03:17Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String datasetName, String tableName) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      String query =\n+          \"SELECT \"\n+              + \"word \"\n+              // TODO(developer): Replace projectId.dataset.tableName with yours", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff1f36e7a152edf949cd4b729b03349558558b2"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1797825105c9e7db0fd9d479e6956bfae04d83a7", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/1797825105c9e7db0fd9d479e6956bfae04d83a7", "committedDate": "2020-01-21T18:17:53Z", "message": "update based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49b78b50527918dcdb64fbf11feb5d0af91a7e7", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/c49b78b50527918dcdb64fbf11feb5d0af91a7e7", "committedDate": "2020-01-22T16:50:45Z", "message": "update exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/a1393e4b3244a3c5db9e6a361909ae6368e6be48", "committedDate": "2020-01-23T17:18:30Z", "message": "refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTE5NjQ3", "url": "https://github.com/googleapis/java-bigquery/pull/115#pullrequestreview-347519647", "createdAt": "2020-01-23T18:37:01Z", "commit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNzowMVrOFhIh0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNzowMVrOFhIh0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzA1Ng==", "bodyText": "@kurtisvg, do we have a convention for input fields like:\n\"MY_PROJECT_ID\" is all caps because it is some field they have to already have\nWhere\n\"my_dataset_name\" is lower case to show this is a user provided field?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370287056", "createdAt": "2020-01-23T18:37:01Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTIwNjM4", "url": "https://github.com/googleapis/java-bigquery/pull/115#pullrequestreview-347520638", "createdAt": "2020-01-23T18:38:36Z", "commit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozODozNlrOFhIkyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1MTozMVrOFhI8yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzgxNw==", "bodyText": "nit: might be worth adding the rest:\n// Initialize client that will be used to send requests. This client only needs to be created\n// once, and can be reused for multiple requests. After completing all of your requests, call\n// the \"close\" method on the client to safely clean up any remaining background resources.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370287817", "createdAt": "2020-01-23T18:38:36Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODc5OQ==", "bodyText": "Do BigQuery samples usually not use the java `try-with-resources?\nLike:\ntry (BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService()) {\n...\n\nhttps://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370288799", "createdAt": "2020-01-23T18:40:46Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTg4Nw==", "bodyText": "Would you want to use a StringBuilder here?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370289887", "createdAt": "2020-01-23T18:43:04Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDkyNg==", "bodyText": "Do the error for BigQuery follow the same as this page?\nhttps://cloud.google.com/apis/design/errors\nIf so, might be worth linking to that page unless the errors themselves are descriptive.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370290926", "createdAt": "2020-01-23T18:45:16Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MjY1NQ==", "bodyText": "@kurtisvg, is this fine or is there a preference for traditional for loops?\nLike:\nfor (Row row in results.iterateAll()) { ...", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370292655", "createdAt": "2020-01-23T18:48:44Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors\n+      if (queryJob == null) {\n+        throw new Exception(\"Job no longer exists\");\n+      } else if (queryJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new Exception(queryJob.getStatus().getError().toString());\n+      }\n+\n+      // Get the results.\n+      TableResult results = queryJob.getQueryResults();\n+\n+      // Print all pages of the results.\n+      results\n+          .iterateAll()\n+          .forEach(\n+              rows -> {\n+                rows.forEach(row -> System.out.println(\"row: \" + row.toString()));\n+              });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzA3NA==", "bodyText": "nit: might be worth putting a comment on what it means to relax a table query.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370293074", "createdAt": "2020-01-23T18:49:42Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg==", "bodyText": "nit: should this be in tearDown?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370293962", "createdAt": "2020-01-23T18:51:31Z", "author": {"login": "nnegrey"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d35c13d828c1c4b7d396b78df8bc5f37742ef1c", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/3d35c13d828c1c4b7d396b78df8bc5f37742ef1c", "committedDate": "2020-01-23T19:26:16Z", "message": "update base on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5c035ecb4a9bce4c64b7cbc8ce405edd7d45fce", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d5c035ecb4a9bce4c64b7cbc8ce405edd7d45fce", "committedDate": "2020-01-23T19:52:02Z", "message": "code refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTg3MjU0", "url": "https://github.com/googleapis/java-bigquery/pull/115#pullrequestreview-347587254", "createdAt": "2020-01-23T20:31:01Z", "commit": {"oid": "d5c035ecb4a9bce4c64b7cbc8ce405edd7d45fce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozMTowMVrOFhLtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozMTowMVrOFhLtVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzOTE1OA==", "bodyText": "I'm guessing table name has a limit, to get more randomization would it be better to do:\ntableName = \"TEST_\" + UUID.randomUUID().toString().replace('-', '').substring(0, 23);", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370339158", "createdAt": "2020-01-23T20:31:01Z", "author": {"login": "nnegrey"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+  private String tableName;\n+  private Schema originalSchema;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    tableName =\n+        \"RELAX_TABLE_QUERY_TEST\" + UUID.randomUUID().toString().substring(0, 5).replace('-', '_');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c035ecb4a9bce4c64b7cbc8ce405edd7d45fce"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c13ae926fc8793621d15fa52da5037c01d1aa4a", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/0c13ae926fc8793621d15fa52da5037c01d1aa4a", "committedDate": "2020-01-23T20:41:09Z", "message": "fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b022684f2ad77ecb5db81a0371f72fe7926911d2", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/b022684f2ad77ecb5db81a0371f72fe7926911d2", "committedDate": "2020-01-23T21:36:18Z", "message": "add debugging statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9118990f10af553733c209fd0855c898c91065", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/7d9118990f10af553733c209fd0855c898c91065", "committedDate": "2020-01-23T21:43:54Z", "message": "remove unused exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e647be17458c35428129115b4718f7c42966b2", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/a2e647be17458c35428129115b4718f7c42966b2", "committedDate": "2020-01-24T21:31:24Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2b8015470215516f3a7945fadecdc1596b982c", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/7f2b8015470215516f3a7945fadecdc1596b982c", "committedDate": "2020-01-24T21:46:42Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddd8c2a842c63abc1441964134fe67b5b0fcc4b", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/3ddd8c2a842c63abc1441964134fe67b5b0fcc4b", "committedDate": "2020-01-24T22:03:55Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc2cb8e44a497a669a55c7bbde07709ebd6aad53", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/bc2cb8e44a497a669a55c7bbde07709ebd6aad53", "committedDate": "2020-01-24T22:14:37Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b3b93a4cb2d0fc103462a696dc08781085136f0", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/8b3b93a4cb2d0fc103462a696dc08781085136f0", "committedDate": "2020-01-24T22:24:31Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a871f84d626f6bbefe9f6a2d741a7742a681527", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/0a871f84d626f6bbefe9f6a2d741a7742a681527", "committedDate": "2020-01-24T22:34:45Z", "message": "debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e753f4055eccdc2e59e3d1f2ee256421454d2619", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/e753f4055eccdc2e59e3d1f2ee256421454d2619", "committedDate": "2020-01-26T19:56:55Z", "message": "revert back to cleaning up in method due to unkown nullpointer exception if using setup() or teardown()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a042d3ada632603a9135ac77de9a8f77d4e6528e", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/a042d3ada632603a9135ac77de9a8f77d4e6528e", "committedDate": "2020-01-26T19:58:35Z", "message": "Merge remote-tracking branch 'origin/relax-table-query' into relax-table-query\n\n# Conflicts:\n#\tsamples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126cd0ea3fcb4127f32b662a42834d0e55f3ee9d", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/126cd0ea3fcb4127f32b662a42834d0e55f3ee9d", "committedDate": "2020-01-27T18:47:22Z", "message": "update base on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTEwNTE2", "url": "https://github.com/googleapis/java-bigquery/pull/115#pullrequestreview-348910516", "createdAt": "2020-01-27T19:17:54Z", "commit": {"oid": "126cd0ea3fcb4127f32b662a42834d0e55f3ee9d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1278, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}