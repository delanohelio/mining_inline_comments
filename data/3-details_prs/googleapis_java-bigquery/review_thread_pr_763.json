{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDU0OTYy", "number": 763, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowNDozMFrOEpKk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0MjoxN1rOEqzj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjAwMzcwOnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowNDozMVrOHaracQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NDo0NlrOHb0eaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNjMwNQ==", "bodyText": "we have a sample schema for bigtable we've been using that would be good to include here so it feels a little more realistic. I'll send you a doc with the schema\ntable name: mobile-time-series\ncolumn families: stats_summary\ncolumns: os_build (STRING), os_name (STRING)", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r497736305", "createdAt": "2020-09-30T19:04:31Z", "author": {"login": "billyjacobson"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzMzM1NQ==", "bodyText": "https://github.com/googleapis/java-bigtable/blob/master/samples/snippets/src/test/java/com/example/bigtable/ReadsTest.java\nLet's stick to the existing table schema as shown above instead of using our own schema and stream in data in the beforeClass() method. We can keep the table name as bigquery-samples-test", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498933355", "createdAt": "2020-10-02T16:44:46Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNjMwNQ=="}, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjAwNzI3OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowNTozM1rOHarcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0MjowMVrOHb0ZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNjg3OA==", "bodyText": "Could you define the column family first and then add the columns and build after? It will make more sense for someone from Bigtable following since column families are the higher level grouping", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r497736878", "createdAt": "2020-09-30T19:05:33Z", "author": {"login": "billyjacobson"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNTIzNA==", "bodyText": "@billyjacobson It's not possible to main order, because first we need to create an object of BigtableColumn then we can set those columns in BigtableColumnFamily.", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498215234", "createdAt": "2020-10-01T12:45:25Z", "author": {"login": "pmakani"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNjg3OA=="}, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzMjA1Mg==", "bodyText": "we could first instantiate an empty BigtableColumnFamily object and then add columns to it.", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498932052", "createdAt": "2020-10-02T16:42:01Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNjg3OA=="}, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjAwOTE5OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowNjowNVrOHardtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxMToxMVrOHb2-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNzE0Mw==", "bodyText": "s/Configure/Configuring", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r497737143", "createdAt": "2020-09-30T19:06:05Z", "author": {"login": "billyjacobson"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =\n+          BigtableColumnFamily.newBuilder()\n+              .setColumns(ImmutableList.of(name, postAbbr))\n+              .setFamilyID(\"us-states\")\n+              .setOnlyReadLatest(true)\n+              .setEncoding(\"TEXT\")\n+              .setType(\"STRING\")\n+              .build();\n+\n+      // Configure BigtableOptions is optional.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3NDMzOA==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498974338", "createdAt": "2020-10-02T18:11:11Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String instanceId = \"MY_INSTANCE_ID\";\n+    String bigtableName = \"MY_BIGTABLE_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        \"https://googleapis.com/bigtable/projects/\"\n+            + projectId\n+            + \"/instances/\"\n+            + instanceId\n+            + \"/tables/\"\n+            + bigtableName;\n+    String query = String.format(\"SELECT * FROM %s \", tableName);\n+    queryExternalBigtableTemp(tableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =\n+          BigtableColumnFamily.newBuilder()\n+              .setColumns(ImmutableList.of(name, postAbbr))\n+              .setFamilyID(\"us-states\")\n+              .setOnlyReadLatest(true)\n+              .setEncoding(\"TEXT\")\n+              .setType(\"STRING\")\n+              .build();\n+\n+      // Configure BigtableOptions is optional.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNzE0Mw=="}, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjAxOTc5OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/test/java/com/example/bigquery/QueryExternalBigtableTempIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowOTowOVrOHarkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzowMzoxM1rOHb1BLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczODc4NA==", "bodyText": "how will this test work? Is this just going to be an existing bigtable instance that gets used for all the tests?\nIt might be better to create/tear down an instance during the test, but we can discuss and I have code that you can copy/paste that will take care of it all for you. Let me know what you want to do", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r497738784", "createdAt": "2020-09-30T19:09:09Z", "author": {"login": "billyjacobson"}, "path": "samples/snippets/src/test/java/com/example/bigquery/QueryExternalBigtableTempIT.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class QueryExternalBigtableTempIT {\n+\n+  private final Logger log = Logger.getLogger(this.getClass().getName());\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+  private PrintStream originalPrintStream;\n+\n+  private static final String BIGTABLE_URI = requireEnvVar(\"BIGTABLE_URI\");\n+\n+  private static String requireEnvVar(String varName) {\n+    String value = System.getenv(varName);\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+    return value;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGTABLE_URI\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MjI1NQ==", "bodyText": "As discussed offline, we will keep out existing instance created for samples testing and the IT format.", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498942255", "createdAt": "2020-10-02T17:03:13Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/test/java/com/example/bigquery/QueryExternalBigtableTempIT.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class QueryExternalBigtableTempIT {\n+\n+  private final Logger log = Logger.getLogger(this.getClass().getName());\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+  private PrintStream originalPrintStream;\n+\n+  private static final String BIGTABLE_URI = requireEnvVar(\"BIGTABLE_URI\");\n+\n+  private static String requireEnvVar(String varName) {\n+    String value = System.getenv(varName);\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+    return value;\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGTABLE_URI\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczODc4NA=="}, "originalCommit": {"oid": "0e269f42a4f957ef55039aaeec60ce64f28d27b4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzUwNDkxOnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NzozN1rOHb0jmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjo0NzozN1rOHb0jmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkzNDY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Configure BigtableOptions is optional.\n          \n          \n            \n                  // Configuring BigtableOptions is optional.", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r498934683", "createdAt": "2020-10-02T16:47:37Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String bigtableInstanceId = \"MY_INSTANCE_ID\";\n+    String bigtableTableName = \"MY_BIGTABLE_NAME\";\n+    String bigqueryTableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        String.format(\n+            \"https://googleapis.com/bigtable/projects/%s/instances/%s/tables/%s\",\n+            projectId, bigtableInstanceId, bigtableTableName);\n+    String query = String.format(\"SELECT * FROM %s \", bigqueryTableName);\n+    queryExternalBigtableTemp(bigqueryTableName, sourceUri, query);\n+  }\n+\n+  public static void queryExternalBigtableTemp(String tableName, String sourceUri, String query) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      BigtableColumn name =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"name\".getBytes()))\n+              .setFieldName(\"name\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumn postAbbr =\n+          BigtableColumn.newBuilder()\n+              .setQualifierEncoded(Base64.encodeBase64String(\"post_abbr\".getBytes()))\n+              .setFieldName(\"post_abbr\")\n+              .setType(\"STRING\")\n+              .setEncoding(\"TEXT\")\n+              .build();\n+      BigtableColumnFamily usStates =\n+          BigtableColumnFamily.newBuilder()\n+              .setColumns(ImmutableList.of(name, postAbbr))\n+              .setFamilyID(\"us-states\")\n+              .setOnlyReadLatest(true)\n+              .setEncoding(\"TEXT\")\n+              .setType(\"STRING\")\n+              .build();\n+\n+      // Configure BigtableOptions is optional.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5e1511474c5223527bea65d1bf8ef6ff8d5ed2"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzE4ODE0OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozOToxM1rOHdOBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozOToxM1rOHdOBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMDUzNQ==", "bodyText": "This seems to be causing issue:\ncom.google.api.gax.rpc.NotFoundException: io.grpc.StatusRuntimeException: NOT_FOUND: Failed to read: projects/{779844219229}/instances/bigquery-samples-instance\nCaused by: io.grpc.StatusRuntimeException: NOT_FOUND: Failed to read: projects/{779844219229}/instances/bigquery-samples-instance ```", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r500400535", "createdAt": "2020-10-06T15:39:13Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryExternalBigtableTemp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_external_bigtable_temp]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.BigtableColumn;\n+import com.google.cloud.bigquery.BigtableColumnFamily;\n+import com.google.cloud.bigquery.BigtableOptions;\n+import com.google.cloud.bigquery.ExternalTableDefinition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.codec.binary.Base64;\n+\n+// Sample to queries an external bigtable data source using a temporary table\n+public class QueryExternalBigtableTemp {\n+\n+  public static void main(String[] args) {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String bigtableInstanceId = \"MY_INSTANCE_ID\";\n+    String bigtableTableName = \"MY_BIGTABLE_NAME\";\n+    String bigqueryTableName = \"MY_TABLE_NAME\";\n+    String sourceUri =\n+        String.format(\n+            \"https://googleapis.com/bigtable/projects/%s/instances/%s/tables/%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68887e7aa653d96b1c55c7c74a7093e56560f8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzIwNDM0OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/test/java/com/example/bigquery/QueryExternalBigtableTempIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0MjoxN1rOHdOLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTo0MjoxN1rOHdOLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQwMzA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String PROJECT = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");\n          \n          \n            \n              private static final String PROJECT = requireEnvVar(\"SAMPLES_TESTING_PROJECT\");", "url": "https://github.com/googleapis/java-bigquery/pull/763#discussion_r500403096", "createdAt": "2020-10-06T15:42:17Z", "author": {"login": "stephaniewang526"}, "path": "samples/snippets/src/test/java/com/example/bigquery/QueryExternalBigtableTempIT.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigtable.admin.v2.BigtableTableAdminClient;\n+import com.google.cloud.bigtable.admin.v2.models.CreateTableRequest;\n+import com.google.cloud.bigtable.data.v2.BigtableDataClient;\n+import com.google.cloud.bigtable.data.v2.models.BulkMutation;\n+import com.google.cloud.bigtable.data.v2.models.Mutation;\n+import com.google.protobuf.ByteString;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class QueryExternalBigtableTempIT {\n+\n+  private final Logger log = Logger.getLogger(this.getClass().getName());\n+  private static final String ID = UUID.randomUUID().toString().substring(0, 8);\n+  private static final String TABLE_ID = \"bigquery-samples-test\" + ID;\n+  private static final String COLUMN_FAMILY_NAME = \"stats_summary\";\n+  private static final long TIMESTAMP = System.currentTimeMillis() * 1000;\n+  private static final String CONNECTED_CELL = \"connected_cell\";\n+  private static final String CONNECTED_WIFI = \"connected_wifi\";\n+  private static final String OS_BUILD = \"os_build\";\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+  private PrintStream originalPrintStream;\n+\n+  private static final String INSTANCE = requireEnvVar(\"BIGTABLE_TESTING_INSTANCE\");\n+  private static final String PROJECT = requireEnvVar(\"GOOGLE_CLOUD_PROJECT\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed68887e7aa653d96b1c55c7c74a7093e56560f8"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3600, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}