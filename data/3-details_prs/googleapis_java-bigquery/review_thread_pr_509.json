{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjIwNDE3", "number": 509, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODowNDowOVrOELZd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyOToyMFrOEgFtxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3MDUzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODowNDowOVrOGs9M0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTozMToyM1rOGtcXqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzIzMg==", "bodyText": "Add a test with max results set to small value to force getqueryresults for the subsequent pages.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793232", "createdAt": "2020-07-04T18:04:09Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java", "diffHunk": "@@ -1380,6 +1380,35 @@ public void testQuery() throws InterruptedException {\n     assertNotNull(statistics.getQueryPlan());\n   }\n \n+  @Test\n+  public void testFastQuery() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMzkxNA==", "bodyText": "maxResults is not in QueryJobConfiguration -- please see detailed comment in my doc.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450303914", "createdAt": "2020-07-06T15:31:23Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java", "diffHunk": "@@ -1380,6 +1380,35 @@ public void testQuery() throws InterruptedException {\n     assertNotNull(statistics.getQueryPlan());\n   }\n \n+  @Test\n+  public void testFastQuery() throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzIzMg=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3MjAyOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODowNjo0MlrOGs9NgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxNDo1OFrOHE4egQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA==", "bodyText": "There is another optimization possible here. To only fetch the remaining results and not the whole thing from the beginning. Doing this in a separate change after this one is submitted is fine.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793408", "createdAt": "2020-07-04T18:06:42Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    try {\n+      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+\n+      // Return result if there is only 1 page, otherwise use jobId returned from backend to return\n+      // full results\n+      if (queryResponse.getPageToken() == null) {\n+        return new TableResult(\n+            Schema.fromPb(queryResponse.getSchema()),\n+            queryResponse.getTotalRows().longValue(),\n+            new PageImpl<>(\n+                new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+                null,\n+                transformTableData(queryResponse.getRows())));\n+      } else {\n+        String jobId = queryResponse.getJobReference().getJobId();\n+        Job job = getJob(JobId.of(jobId));\n+        job.waitFor();\n+        return job.getQueryResults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODczMg==", "bodyText": "Okay -- I will make optimization in the next PR.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928732", "createdAt": "2020-07-05T23:08:17Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    try {\n+      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+\n+      // Return result if there is only 1 page, otherwise use jobId returned from backend to return\n+      // full results\n+      if (queryResponse.getPageToken() == null) {\n+        return new TableResult(\n+            Schema.fromPb(queryResponse.getSchema()),\n+            queryResponse.getTotalRows().longValue(),\n+            new PageImpl<>(\n+                new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+                null,\n+                transformTableData(queryResponse.getRows())));\n+      } else {\n+        String jobId = queryResponse.getJobReference().getJobId();\n+        Job job = getJob(JobId.of(jobId));\n+        job.waitFor();\n+        return job.getQueryResults();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4MTY2NQ==", "bodyText": "Done in 7c2ae39", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r474881665", "createdAt": "2020-08-21T19:14:58Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    try {\n+      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+\n+      // Return result if there is only 1 page, otherwise use jobId returned from backend to return\n+      // full results\n+      if (queryResponse.getPageToken() == null) {\n+        return new TableResult(\n+            Schema.fromPb(queryResponse.getSchema()),\n+            queryResponse.getTotalRows().longValue(),\n+            new PageImpl<>(\n+                new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+                null,\n+                transformTableData(queryResponse.getRows())));\n+      } else {\n+        String jobId = queryResponse.getJobReference().getJobId();\n+        Job job = getJob(JobId.of(jobId));\n+        job.waitFor();\n+        return job.getQueryResults();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3MzE0OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODowODo1MlrOGs9OBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyNjo0NlrOGtcLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzU0Mw==", "bodyText": "Nit: Can be written without the branches...\nreturn ... && ... && ... :", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793543", "createdAt": "2020-07-04T18:08:52Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMwMDgwNw==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450300807", "createdAt": "2020-07-06T15:26:46Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzU0Mw=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3NDUyOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxMDozNFrOGs9Opg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzowNDo0OFrOGtFc3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzcwMg==", "bodyText": "If you have a test project, I can enable this on it for you to test. Submitting the change in this form has a bit of issue.\nPlease see my comment above about adding a flag", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793702", "createdAt": "2020-07-04T18:10:34Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODQxNA==", "bodyText": "please enable testing on projectID grass-clump-479", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928414", "createdAt": "2020-07-05T23:04:48Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzcwMg=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3NTE4OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxMTo1NFrOGs9O_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNToyMzo1NFrOGtcD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5Mzc5MQ==", "bodyText": "Is it possible to add a command line flag that guards this code. Leave it disabled until the backend request_id flag is rolled out. I will roll it out next week, but if we have a flag you don't have to be blocked on that rollout. It can be disabled at first and then enabled with a simple change later.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793791", "createdAt": "2020-07-04T18:11:54Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI5ODg1NQ==", "bodyText": "I am unaware of a way to do this -- it might make more sense for us to roll out client library changes after backend changes are made.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r450298855", "createdAt": "2020-07-06T15:23:54Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5Mzc5MQ=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3NzQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxNTozNlrOGs9QBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzowNjo0N1rOGtFdng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDA1NQ==", "bodyText": "There are connection parameters. Are those not available inside config yet?", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794055", "createdAt": "2020-07-04T18:15:36Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());\n+    }\n+    if (config.useLegacySql() != null) {\n+      query.setUseLegacySql(config.useLegacySql());\n+    }\n+    if (config.useQueryCache() != null) {\n+      query.setUseQueryCache(config.useQueryCache());\n+    }\n+    return query;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODYwNg==", "bodyText": "It is here  in the first statement https://github.com/googleapis/java-bigquery/pull/509/files#diff-aa6846149b0117069c7bd29c09fb535cR54", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928606", "createdAt": "2020-07-05T23:06:47Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());\n+    }\n+    if (config.useLegacySql() != null) {\n+      query.setUseLegacySql(config.useLegacySql());\n+    }\n+    if (config.useQueryCache() != null) {\n+      query.setUseQueryCache(config.useQueryCache());\n+    }\n+    return query;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDA1NQ=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3Nzg1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxNjoxMVrOGs9QPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoyNzo1MlrOG2SS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ==", "bodyText": "How about script options? Are they not available in config yet?", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794109", "createdAt": "2020-07-04T18:16:11Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODI3OA==", "bodyText": "we need to add support for scriptOptions in QueryJobConfiguration", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928278", "createdAt": "2020-07-05T23:02:53Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NjA0OA==", "bodyText": "raised internal issue - b/161984328", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r459576048", "createdAt": "2020-07-23T16:27:52Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzg3OTUyOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxOToyM1rOGs9RDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQyMzowNToxOFrOGtFdFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDMxOA==", "bodyText": "The job timeout in job configuration and timeout on query serve different purposes. jobs.query doesn't have support for the former (and the backend doesn't honor it either). There is a change in progress to support it.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794318", "createdAt": "2020-07-04T18:19:23Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyODQ2OQ==", "bodyText": "OK - this will be removed.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449928469", "createdAt": "2020-07-05T23:05:18Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDMxOA=="}, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE1NTQ1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxNzo1M1rOG3r_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0NToyM1rOG9gvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTcyNA==", "bodyText": "Having both these fields seem undesirable. Is it possible to only have errors? null or empty list can mean no errors.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461045724", "createdAt": "2020-07-27T17:17:53Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java", "diffHunk": "@@ -40,6 +41,7 @@\n   private static final long serialVersionUID = -5006625989225438209L;\n \n   private final BigQueryError error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1Mjc3MA==", "bodyText": "done -- removed error but I'm keeping the public method getError()", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467152770", "createdAt": "2020-08-07T16:45:23Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java", "diffHunk": "@@ -40,6 +41,7 @@\n   private static final long serialVersionUID = -5006625989225438209L;\n \n   private final BigQueryError error;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTcyNA=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE1NzgwOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxODozNFrOG3sBYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxMDowMFrOG9fo6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjExMw==", "bodyText": "Why this change? The old slow implementation can still return this it looks like.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461046113", "createdAt": "2020-07-27T17:18:34Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNDY5Ng==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467134696", "createdAt": "2020-08-07T16:10:00Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjExMw=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDEwNjkwOnYy", "diffSide": "LEFT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryJobConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1Mjo1MVrOG879Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxMTozMlrOG9fsQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDAyMg==", "bodyText": "What is this string helper used for ? Is this available to the user? If so, this trivial change could be breaking.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466550022", "createdAt": "2020-08-06T16:52:51Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryJobConfiguration.java", "diffHunk": "@@ -851,7 +851,7 @@ ToStringHelper toStringHelper() {\n         .add(\"flattenResults\", flattenResults)\n         .add(\"priority\", priority)\n         .add(\"tableDefinitions\", tableDefinitions)\n-        .add(\"userQueryCache\", useQueryCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNTU1Mw==", "bodyText": "This was a typo before - I corrected it and it will not break anything.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467135553", "createdAt": "2020-08-07T16:11:32Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryJobConfiguration.java", "diffHunk": "@@ -851,7 +851,7 @@ ToStringHelper toStringHelper() {\n         .add(\"flattenResults\", flattenResults)\n         .add(\"priority\", priority)\n         .add(\"tableDefinitions\", tableDefinitions)\n-        .add(\"userQueryCache\", useQueryCache)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDAyMg=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDExNDAwOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1NDo0NlrOG88Bfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxMzo0OVrOG9fwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTE2Ng==", "bodyText": "consider calling it queryRpc or something like that instead of fastQuery, (since this supports slow queries as well).", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466551166", "createdAt": "2020-08-06T16:54:46Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "diffHunk": "@@ -587,6 +589,15 @@ public GetQueryResultsResponse getQueryResults(\n     }\n   }\n \n+  @Override\n+  public QueryResponse fastQuery(String projectId, QueryRequest content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzNjY3Mg==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467136672", "createdAt": "2020-08-07T16:13:49Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "diffHunk": "@@ -587,6 +589,15 @@ public GetQueryResultsResponse getQueryResults(\n     }\n   }\n \n+  @Override\n+  public QueryResponse fastQuery(String projectId, QueryRequest content) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTE2Ng=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDE0NzEzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzowNDoyM1rOG88WwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoyNDo1NlrOG9gHpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjYwOA==", "bodyText": "Flip the if condition to move this branch up and since you have a return in this branch you can remove the nesting.\nif (...) {\nline 1243 - line 1247;\nreturn result;\n}\nline 1213 - line 1235", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466556608", "createdAt": "2020-08-06T17:04:23Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0MjU2NA==", "bodyText": "flipped but not sure about eliminating nesting.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467142564", "createdAt": "2020-08-07T16:24:56Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjYwOA=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDE1NzQ2OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzowNzoyMlrOG88dMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjoxOTozMlrOG9f8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODI1OQ==", "bodyText": "The original query implementation does not have a waitFor().. Not sure I see a reason for having it here..", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466558259", "createdAt": "2020-08-06T17:07:22Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {\n+      // Use jobId returned from backend to return full TableResult", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzEzOTY1MA==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467139650", "createdAt": "2020-08-07T16:19:32Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {\n+      // Use jobId returned from backend to return full TableResult", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODI1OQ=="}, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI4NTcwOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMjo1MVrOG9jWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozOTowN1rOG9ltBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTU3NQ==", "bodyText": "Consider changing this to queryRpc as well..", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467195575", "createdAt": "2020-08-07T18:12:51Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNDA1Mg==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467234052", "createdAt": "2020-08-07T19:39:07Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTU3NQ=="}, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODI4OTU0OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxNDowN1rOG9jZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo0MzowOFrOG9lzZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjE4NA==", "bodyText": "you don't need the else here since the last statement in the if branch is a \"return result;\"\nYou can thus eliminate that code nesting and make the fast path", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467196184", "createdAt": "2020-08-07T18:14:07Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // classic path\n+    if (!results.getJobComplete() || results.getPageToken() != null) {\n+      // Use jobId returned from backend to return full TableResult\n+      String jobId = results.getJobReference().getJobId();\n+      Job job = getJob(JobId.of(jobId));\n+      TableResult result = job.getQueryResults();\n+      return result;\n+    } else { // fast path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNTY4Nw==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467235687", "createdAt": "2020-08-07T19:43:08Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // classic path\n+    if (!results.getJobComplete() || results.getPageToken() != null) {\n+      // Use jobId returned from backend to return full TableResult\n+      String jobId = results.getJobReference().getJobId();\n+      Job job = getJob(JobId.of(jobId));\n+      TableResult result = job.getQueryResults();\n+      return result;\n+    } else { // fast path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjE4NA=="}, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDczNzgzOnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMDo1NVrOHMvtzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxMzoxM1rOHMwIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjczMg==", "bodyText": "Is results.getRows()\nThere is special casing in the getQueryResults path here:\n\n  \n    \n      java-bigquery/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/Job.java\n    \n    \n         Line 304\n      in\n      b3f59b1\n    \n    \n    \n    \n\n        \n          \n           // If there are no rows in the result, this may have been a DDL query. \n        \n    \n  \n\n\nLooking at the change, it looks like it should work. Is there a test? I know I might have mentioned about DDL test before. Just double checking.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483126732", "createdAt": "2020-09-03T17:00:55Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+      numRows = 0L;\n+    } else if (results.getNumDmlAffectedRows() != null) {\n+      numRows = results.getNumDmlAffectedRows();\n+    } else {\n+      numRows = results.getTotalRows().longValue();\n+    }\n+\n+    if (results.getPageToken() != null) {\n+      JobId jobId = JobId.fromPb(results.getJobReference());\n+      boolean jobStatus = results.getJobComplete();\n+      String cursor = results.getPageToken();\n+      return new TableResult(\n+          schema,\n+          numRows,\n+          new PageImpl<>(\n+              // fetch next pages of results\n+              new QueryPageFetcher(\n+                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              cursor,\n+              // cache first page of result\n+              transformTableData(results.getRows(), schema)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzMzU0Mg==", "bodyText": "Yes we are handling DDL differently here as well: https://github.com/googleapis/java-bigquery/pull/509/files#diff-71270aede5da05bfa317bb9a38f082e0R1270\nConfirming DDL tests were added before: integration test, retry mock test", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483133542", "createdAt": "2020-09-03T17:13:13Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+      numRows = 0L;\n+    } else if (results.getNumDmlAffectedRows() != null) {\n+      numRows = results.getNumDmlAffectedRows();\n+    } else {\n+      numRows = results.getTotalRows().longValue();\n+    }\n+\n+    if (results.getPageToken() != null) {\n+      JobId jobId = JobId.fromPb(results.getJobReference());\n+      boolean jobStatus = results.getJobComplete();\n+      String cursor = results.getPageToken();\n+      return new TableResult(\n+          schema,\n+          numRows,\n+          new PageImpl<>(\n+              // fetch next pages of results\n+              new QueryPageFetcher(\n+                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              cursor,\n+              // cache first page of result\n+              transformTableData(results.getRows(), schema)));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjczMg=="}, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDgzNTI1OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyOToyMFrOHMwruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTo0NToyMFrOHM1Evg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MjU4NA==", "bodyText": "Please make sure all of these branches have code coverage.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483142584", "createdAt": "2020-09-03T17:29:20Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIxNDUyNg==", "bodyText": "okay", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483214526", "createdAt": "2020-09-03T19:45:20Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MjU4NA=="}, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3446, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}