{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTI3MTA5", "number": 97, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1NzoxM1rODXRPzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDozNjo0OFrODXuxbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI2NDE0OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1NzoxM1rOFcf52g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1NzoxM1rOFcf52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNzE2Mg==", "bodyText": "I think since RunLegacyQuery doesn't have any arguments, you can just leave this out.", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r365427162", "createdAt": "2020-01-10T20:57:13Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runRunLegacyQuery() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "969c0c5c7b7a6de06e585b8b8c6f69075840e0cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzI2NjAxOnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1ODowOFrOFcf6-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDo1ODowOFrOFcf6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNzQ0OQ==", "bodyText": "Is this actually running the query? Or is it just configuring it? Shouldn't you need to do something to send it?\nHow do you process data received from the query?", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r365427449", "createdAt": "2020-01-10T20:58:08Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runRunLegacyQuery() {\n+    runLegacyQuery();\n+  }\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.\n+          QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "969c0c5c7b7a6de06e585b8b8c6f69075840e0cb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjA5MjA5OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDoyOToxMVrOFdL5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDoyOToxMVrOFdL5og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0ODAwMg==", "bodyText": "nit: I would probably put this comment above the query =  line, since that's the point at which you want to use legacy SQL syntax", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366148002", "createdAt": "2020-01-14T04:29:11Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69709fd05bdad6b3791b683223d0f75ce05ff25"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjEwMTU4OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDozNjo0OFrOFdL_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNzoyOFrOFdc98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTM5NA==", "bodyText": "Better, but this will just print out a bunch of random values on separate lines. Can we preserve the rows together?\nSystem.out.println(\"Results\")\nfor (FieldValueList row : result.iterateAll()) {\n  row.forEach(val -> System.print(val.getStringValue() + \" \")\n  System.out.println();\n}", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366149394", "createdAt": "2020-01-14T04:36:48Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.\n+          QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();\n+\n+      // Execute the query.\n+      TableResult result = bigquery.query(queryConfig);\n+\n+      // Print the results.\n+      result\n+          .iterateAll()\n+          .forEach(row -> row.forEach(val -> System.out.println(val.getStringValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a69709fd05bdad6b3791b683223d0f75ce05ff25"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNzYzNA==", "bodyText": "The naming was confusing - I will change that.\nThis now prints out each corpus name and looks like this:\nsonnets\nvarious\n1kinghenryvi\nTo preserve the rows, the printout would look like this:\nFieldValue{attribute=PRIMITIVE, value=sonnets}\nFieldValue{attribute=PRIMITIVE, value=various}\nFieldValue{attribute=PRIMITIVE, value=1kinghenryvi}\nI think it's better if I just print out the value.", "url": "https://github.com/googleapis/java-bigquery/pull/97#discussion_r366427634", "createdAt": "2020-01-14T16:07:28Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RunLegacyQuery.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_legacy]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class RunLegacyQuery {\n+\n+  public static void runLegacyQuery() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query =\n+          \"SELECT corpus FROM [bigquery-public-data:samples.shakespeare] GROUP BY corpus;\";\n+\n+      QueryJobConfiguration queryConfig =\n+          // To use legacy SQL syntax, set useLegacySql to true.\n+          QueryJobConfiguration.newBuilder(query).setUseLegacySql(true).build();\n+\n+      // Execute the query.\n+      TableResult result = bigquery.query(queryConfig);\n+\n+      // Print the results.\n+      result\n+          .iterateAll()\n+          .forEach(row -> row.forEach(val -> System.out.println(val.getStringValue())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0OTM5NA=="}, "originalCommit": {"oid": "a69709fd05bdad6b3791b683223d0f75ce05ff25"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3538, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}