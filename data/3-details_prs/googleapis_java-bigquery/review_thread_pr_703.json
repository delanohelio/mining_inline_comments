{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODk4NDM5", "number": 703, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1NDo0OFrOEd0l9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1Nzo1N1rOEd0qOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzA1ODQ2OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/StandardSQLTypeName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1NDo0OFrOHJNwRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODoxNjoxN1rOHJQJgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDU4Mg==", "bodyText": "76+ digits of precision (the 77th digit is partial) and 38 digits of scale. Please make the same change to LegacySQLTypeName.java.", "url": "https://github.com/googleapis/java-bigquery/pull/703#discussion_r479424582", "createdAt": "2020-08-28T16:54:48Z", "author": {"login": "MingyuZhong"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/StandardSQLTypeName.java", "diffHunk": "@@ -32,6 +32,8 @@\n   FLOAT64,\n   /** A decimal value with 38 digits of precision and 9 digits of scale. */\n   NUMERIC,\n+  /** A decimal value with 38 digits of precision and 38 digits of scale. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f021dde36aff3b15870d14b0b0d27a1a6345ce39"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2MzgxMA==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/703#discussion_r479463810", "createdAt": "2020-08-28T18:16:17Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/StandardSQLTypeName.java", "diffHunk": "@@ -32,6 +32,8 @@\n   FLOAT64,\n   /** A decimal value with 38 digits of precision and 9 digits of scale. */\n   NUMERIC,\n+  /** A decimal value with 38 digits of precision and 38 digits of scale. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNDU4Mg=="}, "originalCommit": {"oid": "f021dde36aff3b15870d14b0b0d27a1a6345ce39"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzA2OTM3OnYy", "diffSide": "RIGHT", "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/QueryParameterValueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1Nzo1N1rOHJN3DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxODoxNjoyMlrOHJQJqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNjMxNg==", "bodyText": "Please also test the min and max values: 1e-38, -1e38, 578960446186580977117854925043439539266.34992332820282019728792003956564819967, and -578960446186580977117854925043439539266.34992332820282019728792003956564819968 (note that the min value is not the same as -max).\nSame for the conversion in other direction.", "url": "https://github.com/googleapis/java-bigquery/pull/703#discussion_r479426316", "createdAt": "2020-08-28T16:57:57Z", "author": {"login": "MingyuZhong"}, "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/QueryParameterValueTest.java", "diffHunk": "@@ -141,6 +141,31 @@ public void testNumeric() {\n     assertThat(value.getArrayValues()).isNull();\n   }\n \n+  @Test\n+  public void testBigNumeric() {\n+    QueryParameterValue value =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.33333333333333333333333333333333333333\"));\n+    QueryParameterValue value1 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.50000000000000000000000000000000000000\"));\n+    QueryParameterValue value2 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.00000000500000000000000000000000000000\"));\n+    QueryParameterValue value3 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"-0.00000000500000000000000000000000000000\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f021dde36aff3b15870d14b0b0d27a1a6345ce39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2Mzg0OQ==", "bodyText": "done", "url": "https://github.com/googleapis/java-bigquery/pull/703#discussion_r479463849", "createdAt": "2020-08-28T18:16:22Z", "author": {"login": "stephaniewang526"}, "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/QueryParameterValueTest.java", "diffHunk": "@@ -141,6 +141,31 @@ public void testNumeric() {\n     assertThat(value.getArrayValues()).isNull();\n   }\n \n+  @Test\n+  public void testBigNumeric() {\n+    QueryParameterValue value =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.33333333333333333333333333333333333333\"));\n+    QueryParameterValue value1 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.50000000000000000000000000000000000000\"));\n+    QueryParameterValue value2 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"0.00000000500000000000000000000000000000\"));\n+    QueryParameterValue value3 =\n+        QueryParameterValue.bigNumeric(new BigDecimal(\"-0.00000000500000000000000000000000000000\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNjMxNg=="}, "originalCommit": {"oid": "f021dde36aff3b15870d14b0b0d27a1a6345ce39"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3439, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}