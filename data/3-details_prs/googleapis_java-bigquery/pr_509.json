{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjIwNDE3", "number": 509, "title": "feat: sql fast path impl", "bodyText": "Expose backend query() method in the client when QueryJobConfiguration is supported by QueryRequest\ncc: @gcasto", "createdAt": "2020-07-04T00:42:25Z", "url": "https://github.com/googleapis/java-bigquery/pull/509", "merged": true, "mergeCommit": {"oid": "64a7d65ff97152c49194f507562266c1ba6f0f3b"}, "closed": true, "closedAt": "2020-09-22T16:20:37Z", "author": {"login": "stephaniewang526"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyDT7vgFqTQ0MjYyMzY4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLaciJAFqTQ5MzYzNTM2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjIzNjgw", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-442623680", "createdAt": "2020-07-04T18:04:09Z", "commit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODowNDowOVrOGs9M0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxODoxOToyM1rOGs9RDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzIzMg==", "bodyText": "Add a test with max results set to small value to force getqueryresults for the subsequent pages.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793232", "createdAt": "2020-07-04T18:04:09Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/test/java/com/google/cloud/bigquery/it/ITBigQueryTest.java", "diffHunk": "@@ -1380,6 +1380,35 @@ public void testQuery() throws InterruptedException {\n     assertNotNull(statistics.getQueryPlan());\n   }\n \n+  @Test\n+  public void testFastQuery() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzQwOA==", "bodyText": "There is another optimization possible here. To only fetch the remaining results and not the whole thing from the beginning. Doing this in a separate change after this one is submitted is fine.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793408", "createdAt": "2020-07-04T18:06:42Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    try {\n+      com.google.api.services.bigquery.model.QueryResponse queryResponse =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+\n+      // Return result if there is only 1 page, otherwise use jobId returned from backend to return\n+      // full results\n+      if (queryResponse.getPageToken() == null) {\n+        return new TableResult(\n+            Schema.fromPb(queryResponse.getSchema()),\n+            queryResponse.getTotalRows().longValue(),\n+            new PageImpl<>(\n+                new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+                null,\n+                transformTableData(queryResponse.getRows())));\n+      } else {\n+        String jobId = queryResponse.getJobReference().getJobId();\n+        Job job = getJob(JobId.of(jobId));\n+        job.waitFor();\n+        return job.getQueryResults();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzU0Mw==", "bodyText": "Nit: Can be written without the branches...\nreturn ... && ... && ... :", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793543", "createdAt": "2020-07-04T18:08:52Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5MzcwMg==", "bodyText": "If you have a test project, I can enable this on it for you to test. Submitting the change in this form has a bit of issue.\nPlease see my comment above about adding a flag", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793702", "createdAt": "2020-07-04T18:10:34Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5Mzc5MQ==", "bodyText": "Is it possible to add a command line flag that guards this code. Leave it disabled until the backend request_id flag is rolled out. I will roll it out next week, but if we have a flag you don't have to be blocked on that rollout. It can be disabled at first and then enabled with a simple change later.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449793791", "createdAt": "2020-07-04T18:11:54Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1171,56 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDA1NQ==", "bodyText": "There are connection parameters. Are those not available inside config yet?", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794055", "createdAt": "2020-07-04T18:15:36Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());\n+    }\n+    if (config.useLegacySql() != null) {\n+      query.setUseLegacySql(config.useLegacySql());\n+    }\n+    if (config.useQueryCache() != null) {\n+      query.setUseQueryCache(config.useQueryCache());\n+    }\n+    return query;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDEwOQ==", "bodyText": "How about script options? Are they not available in config yet?", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794109", "createdAt": "2020-07-04T18:16:11Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc5NDMxOA==", "bodyText": "The job timeout in job configuration and timeout on query serve different purposes. jobs.query doesn't have support for the former (and the backend doesn't honor it either). There is a change in progress to support it.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r449794318", "createdAt": "2020-07-04T18:19:23Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryRequestInfo.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.bigquery;\n+\n+import com.google.api.services.bigquery.model.JobConfiguration;\n+import com.google.api.services.bigquery.model.JobConfigurationQuery;\n+import com.google.api.services.bigquery.model.QueryRequest;\n+import com.google.common.collect.Lists;\n+\n+final class QueryRequestInfo {\n+\n+  private QueryJobConfiguration config;\n+\n+  QueryRequestInfo(QueryJobConfiguration config) {\n+    this.config = config;\n+  }\n+\n+  boolean isFastQuerySupported() {\n+    if (config.getClustering() == null\n+        && config.getCreateDisposition() == null\n+        && config.getDestinationEncryptionConfiguration() == null\n+        && config.getDestinationTable() == null\n+        && config.getMaximumBillingTier() == null\n+        && config.getPriority() == null\n+        && config.getRangePartitioning() == null\n+        && config.getSchemaUpdateOptions() == null\n+        && config.getTableDefinitions() == null\n+        && config.getTimePartitioning() == null\n+        && config.getUserDefinedFunctions() == null\n+        && config.getWriteDisposition() == null) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  QueryRequest toPb() {\n+    QueryRequest query = new QueryRequest();\n+    if (config.getConnectionProperties() != null) {\n+      query.setConnectionProperties(\n+          Lists.transform(config.getConnectionProperties(), ConnectionProperty.TO_PB_FUNCTION));\n+    }\n+    if (config.getDefaultDataset() != null) {\n+      query.setDefaultDataset(config.getDefaultDataset().toPb());\n+    }\n+    if (config.dryRun() != null) {\n+      query.setDryRun(config.dryRun());\n+    }\n+    if (config.getLabels() != null) {\n+      query.setLabels(config.getLabels());\n+    }\n+    if (config.getMaximumBytesBilled() != null) {\n+      query.setMaximumBytesBilled(config.getMaximumBytesBilled());\n+    }\n+    query.setQuery(config.getQuery());\n+    // TODO: add back when supported\n+    // query.setRequestId(UUID.randomUUID().toString());\n+    JobConfiguration jobConfiguration = config.toPb();\n+    JobConfigurationQuery configurationQuery = jobConfiguration.getQuery();\n+    if (configurationQuery.getQueryParameters() != null) {\n+      query.setQueryParameters(configurationQuery.getQueryParameters());\n+    }\n+    if (config.getJobTimeoutMs() != null) {\n+      query.setTimeoutMs(config.getJobTimeoutMs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4804d50c9914f7519166b37892064d7abc95a6df"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/f6e93cc3a1dd6b132615a2b2fa09c8bf32e4b98a", "committedDate": "2020-07-09T15:46:30Z", "message": "feat: sql fast path impl\n\nadd QueryJobConfig to QueryRequest logic\n\nhigh level mode\n\nreset private methods\n\nrefactor: modified code\n\nupdate logic\nadd test\n\nrefactor: update code and test case\n\nadd integration tests\n\ncode format\n\nadd clir ignore and remove pom file\n\nfeat: add more assert\n\nnit update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30fe00c0055243890746dde0485d3d7f9edaef65", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/30fe00c0055243890746dde0485d3d7f9edaef65", "committedDate": "2020-07-09T15:33:09Z", "message": "fix IT"}, "afterCommit": {"oid": "e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/e73936b95fbbe42a85b65caee7de3f64ea0fcf08", "committedDate": "2020-07-09T15:46:55Z", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ab960cb196313c86d065883fed7f430a904755", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d8ab960cb196313c86d065883fed7f430a904755", "committedDate": "2020-07-09T15:54:47Z", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT\n\nadd schema test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aaa6b80c7caffa67dec26af68511e2c6253549fb", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/aaa6b80c7caffa67dec26af68511e2c6253549fb", "committedDate": "2020-07-09T15:54:17Z", "message": "add schema test"}, "afterCommit": {"oid": "d8ab960cb196313c86d065883fed7f430a904755", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d8ab960cb196313c86d065883fed7f430a904755", "committedDate": "2020-07-09T15:54:47Z", "message": "add logic for DML and DDL queries\nenable requestId\nadd integration tests for fast path multipages query, DML, and DDL queries\n\nfix requestId logic\n\nupdate QueryRequestInfo and add mock test\n\nadd mock test cases for SQL, DML, and DDL\nclean up code\n\nfix IT\n\nadd schema test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bc6b96be562d2789ffd8c4d6fd12b5d729a5ee1", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/9bc6b96be562d2789ffd8c4d6fd12b5d729a5ee1", "committedDate": "2020-07-10T23:09:06Z", "message": "nit"}, "afterCommit": {"oid": "67e30a9b333d685115f45913d97896bd09a38ed4", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/67e30a9b333d685115f45913d97896bd09a38ed4", "committedDate": "2020-07-10T23:09:57Z", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "780b836bc132ae62ed7dc30a18b940790c74e778", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/780b836bc132ae62ed7dc30a18b940790c74e778", "committedDate": "2020-07-10T23:11:22Z", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit\n\nnit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4148f5b95112610fc07644bb16817b014c2a6613", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/4148f5b95112610fc07644bb16817b014c2a6613", "committedDate": "2020-07-10T23:10:44Z", "message": "nit"}, "afterCommit": {"oid": "780b836bc132ae62ed7dc30a18b940790c74e778", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/780b836bc132ae62ed7dc30a18b940790c74e778", "committedDate": "2020-07-10T23:11:22Z", "message": "update ITs to check table content correctness, update fastquery logic\n\nnit\n\nnit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71264377da994adc15ee3c15b03a8cf974885b28", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/71264377da994adc15ee3c15b03a8cf974885b28", "committedDate": "2020-07-13T15:01:40Z", "message": "add test for bogus query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d6c7e7b440c550b480992a50aa5114aaa20564", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/08d6c7e7b440c550b480992a50aa5114aaa20564", "committedDate": "2020-07-13T16:40:01Z", "message": "add check for idempotent requestId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31a55ce92f84aeb8575a2fc65879ef512959c758", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/31a55ce92f84aeb8575a2fc65879ef512959c758", "committedDate": "2020-07-15T21:58:48Z", "message": "update QueryRequestInfo and error handling logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcecbb0e552de85c89b1c9cb88ff8d1c9d3c9175", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/bcecbb0e552de85c89b1c9cb88ff8d1c9d3c9175", "committedDate": "2020-07-16T02:13:50Z", "message": "add mock test for query JobException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81937fc1046593bff47f37b2c09e92825ef2f0d4", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/81937fc1046593bff47f37b2c09e92825ef2f0d4", "committedDate": "2020-07-16T17:03:50Z", "message": "update mock test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b62b56900435528a5fd415aec09d09e74e062752", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/b62b56900435528a5fd415aec09d09e74e062752", "committedDate": "2020-07-16T17:23:10Z", "message": "fix unit tests, nit update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/722510196f945c1acb2ca36377caa9f181dc36ed", "committedDate": "2020-07-17T16:44:24Z", "message": "update exception handling from JobException to BigQueryException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTgxMTkz", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-455981193", "createdAt": "2020-07-27T17:17:53Z", "commit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxNzo1M1rOG3r_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzowNzoyMlrOG88dMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTcyNA==", "bodyText": "Having both these fields seem undesirable. Is it possible to only have errors? null or empty list can mean no errors.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461045724", "createdAt": "2020-07-27T17:17:53Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java", "diffHunk": "@@ -40,6 +41,7 @@\n   private static final long serialVersionUID = -5006625989225438209L;\n \n   private final BigQueryError error;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjExMw==", "bodyText": "Why this change? The old slow implementation can still return this it looks like.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r461046113", "createdAt": "2020-07-27T17:18:34Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDAyMg==", "bodyText": "What is this string helper used for ? Is this available to the user? If so, this trivial change could be breaking.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466550022", "createdAt": "2020-08-06T16:52:51Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/QueryJobConfiguration.java", "diffHunk": "@@ -851,7 +851,7 @@ ToStringHelper toStringHelper() {\n         .add(\"flattenResults\", flattenResults)\n         .add(\"priority\", priority)\n         .add(\"tableDefinitions\", tableDefinitions)\n-        .add(\"userQueryCache\", useQueryCache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTE2Ng==", "bodyText": "consider calling it queryRpc or something like that instead of fastQuery, (since this supports slow queries as well).", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466551166", "createdAt": "2020-08-06T16:54:46Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java", "diffHunk": "@@ -587,6 +589,15 @@ public GetQueryResultsResponse getQueryResults(\n     }\n   }\n \n+  @Override\n+  public QueryResponse fastQuery(String projectId, QueryRequest content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1NjYwOA==", "bodyText": "Flip the if condition to move this branch up and since you have a return in this branch you can remove the nesting.\nif (...) {\nline 1243 - line 1247;\nreturn result;\n}\nline 1213 - line 1235", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466556608", "createdAt": "2020-08-06T17:04:23Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1ODI1OQ==", "bodyText": "The original query implementation does not have a waitFor().. Not sure I see a reason for having it here..", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r466558259", "createdAt": "2020-08-06T17:07:22Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1168,11 +1173,82 @@ public Boolean call() {\n \n   @Override\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n-      throws InterruptedException, JobException {\n+      throws InterruptedException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.fastQuery(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // If fast query completed and has only one page in results\n+    if (results.getJobComplete() && results.getPageToken() == null) {\n+      // If there are errors, BigQueryException is thrown\n+      ImmutableList.Builder<BigQueryError> errors = ImmutableList.builder();\n+      if (results.getErrors() != null) {\n+        List<BigQueryError> bigQueryErrors =\n+            Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+        // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+        // with the case where there there is a HTTP error\n+        throw new BigQueryException(bigQueryErrors);\n+      }\n+\n+      // If there is no error, we construct TableResult\n+      TableSchema schemaPb = results.getSchema();\n+\n+      Long numRows;\n+      if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+        numRows = 0L;\n+      } else if (results.getNumDmlAffectedRows() != null) {\n+        numRows = results.getNumDmlAffectedRows();\n+      } else {\n+        numRows = results.getTotalRows().longValue();\n+      }\n+\n+      return new TableResult(\n+          schemaPb == null ? null : Schema.fromPb(schemaPb),\n+          numRows,\n+          new PageImpl<>(\n+              new TableDataPageFetcher(null, getOptions(), null, optionMap(options)),\n+              null,\n+              transformTableData(results.getRows())));\n+    } else {\n+      // Use jobId returned from backend to return full TableResult", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722510196f945c1acb2ca36377caa9f181dc36ed"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/79bc75fc5fe99ca2c4c9049eb89bde252303fcf8", "committedDate": "2020-08-07T16:46:53Z", "message": "update based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/0fcb5b6728df4ac96e0cdda6be4f41e569863211", "committedDate": "2020-08-07T17:16:32Z", "message": "nit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTA5NzUx", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-463509751", "createdAt": "2020-08-07T18:12:51Z", "commit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMjo1MVrOG9jWtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxMjo1MVrOG9jWtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTU3NQ==", "bodyText": "Consider changing this to queryRpc as well..", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467195575", "createdAt": "2020-08-07T18:12:51Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTEwNTIx", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-463510521", "createdAt": "2020-08-07T18:14:06Z", "commit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxNDowN1rOG9jZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxNDowN1rOG9jZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NjE4NA==", "bodyText": "you don't need the else here since the last statement in the if branch is a \"return result;\"\nYou can thus eliminate that code nesting and make the fast path", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r467196184", "createdAt": "2020-08-07T18:14:07Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1170,9 +1172,78 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return fastQuery(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult fastQuery(\n+      final String projectId, final QueryRequest content, JobOption... options)\n+      throws InterruptedException {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    // classic path\n+    if (!results.getJobComplete() || results.getPageToken() != null) {\n+      // Use jobId returned from backend to return full TableResult\n+      String jobId = results.getJobReference().getJobId();\n+      Job job = getJob(JobId.of(jobId));\n+      TableResult result = job.getQueryResults();\n+      return result;\n+    } else { // fast path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fcb5b6728df4ac96e0cdda6be4f41e569863211"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/2495fbbee0ebd382ba9c0016b5b4c44fb58a8268", "committedDate": "2020-08-07T19:43:01Z", "message": "update based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2ae39296ea027dc0d7c253bdf8118088b3d5a0", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/7c2ae39296ea027dc0d7c253bdf8118088b3d5a0", "committedDate": "2020-08-21T19:13:54Z", "message": "add maxResult support\noptimization changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "293f3e628e60bfc520e9265f494b6e7d58411e7f", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/293f3e628e60bfc520e9265f494b6e7d58411e7f", "committedDate": "2020-08-27T19:32:49Z", "message": "Merge branch 'master' into sql-client\n\n# Conflicts:\n#\tgoogle-cloud-bigquery/clirr-ignored-differences.xml\n#\tgoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/BigQueryRpc.java\n#\tgoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/spi/v2/HttpBigQueryRpc.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187c86efb7383e05978b0c5cf8c28bb851baa519", "author": {"user": {"login": "pmakani", "name": "Praful Makani"}}, "url": "https://github.com/googleapis/java-bigquery/commit/187c86efb7383e05978b0c5cf8c28bb851baa519", "committedDate": "2020-09-03T11:59:03Z", "message": "Merge remote-tracking branch 'upstream/master' into sql-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c", "author": {"user": {"login": "pmakani", "name": "Praful Makani"}}, "url": "https://github.com/googleapis/java-bigquery/commit/2862ad8b5f690606009b364f67f6c1ced4b2e70c", "committedDate": "2020-09-03T12:09:01Z", "message": "update code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDM1MzM5", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-482035339", "createdAt": "2020-09-03T17:00:54Z", "commit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMDo1NVrOHMvtzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzowMDo1NVrOHMvtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEyNjczMg==", "bodyText": "Is results.getRows()\nThere is special casing in the getQueryResults path here:\n\n  \n    \n      java-bigquery/google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/Job.java\n    \n    \n         Line 304\n      in\n      b3f59b1\n    \n    \n    \n    \n\n        \n          \n           // If there are no rows in the result, this may have been a DDL query. \n        \n    \n  \n\n\nLooking at the change, it looks like it should work. Is there a test? I know I might have mentioned about DDL test before. Just double checking.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483126732", "createdAt": "2020-09-03T17:00:55Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {\n+      numRows = 0L;\n+    } else if (results.getNumDmlAffectedRows() != null) {\n+      numRows = results.getNumDmlAffectedRows();\n+    } else {\n+      numRows = results.getTotalRows().longValue();\n+    }\n+\n+    if (results.getPageToken() != null) {\n+      JobId jobId = JobId.fromPb(results.getJobReference());\n+      boolean jobStatus = results.getJobComplete();\n+      String cursor = results.getPageToken();\n+      return new TableResult(\n+          schema,\n+          numRows,\n+          new PageImpl<>(\n+              // fetch next pages of results\n+              new QueryPageFetcher(\n+                  jobId, jobStatus, schema, getOptions(), cursor, optionMap(options)),\n+              cursor,\n+              // cache first page of result\n+              transformTableData(results.getRows(), schema)));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDU1OTMz", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-482055933", "createdAt": "2020-09-03T17:29:20Z", "commit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyOToyMFrOHMwruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyOToyMFrOHMwruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MjU4NA==", "bodyText": "Please make sure all of these branches have code coverage.", "url": "https://github.com/googleapis/java-bigquery/pull/509#discussion_r483142584", "createdAt": "2020-09-03T17:29:20Z", "author": {"login": "epavan123"}, "path": "google-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryImpl.java", "diffHunk": "@@ -1184,9 +1225,81 @@ public Boolean call() {\n   public TableResult query(QueryJobConfiguration configuration, JobOption... options)\n       throws InterruptedException, JobException {\n     Job.checkNotDryRun(configuration, \"query\");\n+\n+    // If all parameters passed in configuration are supported by the query() method on the backend,\n+    // put on fast path\n+    QueryRequestInfo requestInfo = new QueryRequestInfo(configuration);\n+    if (requestInfo.isFastQuerySupported()) {\n+      String projectId = getOptions().getProjectId();\n+      QueryRequest content = requestInfo.toPb();\n+      return queryRpc(projectId, content, options);\n+    }\n+    // Otherwise, fall back to the existing create query job logic\n     return create(JobInfo.of(configuration), options).getQueryResults();\n   }\n \n+  private TableResult queryRpc(\n+      final String projectId, final QueryRequest content, JobOption... options) {\n+    com.google.api.services.bigquery.model.QueryResponse results;\n+    try {\n+      results =\n+          runWithRetries(\n+              new Callable<com.google.api.services.bigquery.model.QueryResponse>() {\n+                @Override\n+                public com.google.api.services.bigquery.model.QueryResponse call() {\n+                  return bigQueryRpc.queryRpc(projectId, content);\n+                }\n+              },\n+              getOptions().getRetrySettings(),\n+              EXCEPTION_HANDLER,\n+              getOptions().getClock());\n+    } catch (RetryHelperException e) {\n+      throw BigQueryException.translateAndThrow(e);\n+    }\n+\n+    if (results.getErrors() != null) {\n+      List<BigQueryError> bigQueryErrors =\n+          Lists.transform(results.getErrors(), BigQueryError.FROM_PB_FUNCTION);\n+      // Throwing BigQueryException since there may be no JobId and we want to stay consistent\n+      // with the case where there there is a HTTP error\n+      throw new BigQueryException(bigQueryErrors);\n+    }\n+\n+    Schema schema = results.getSchema() == null ? null : Schema.fromPb(results.getSchema());\n+    Long numRows;\n+    if (results.getNumDmlAffectedRows() == null && results.getTotalRows() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2862ad8b5f690606009b364f67f6c1ced4b2e70c"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f1229dda0aa4369f31946d2b9b38f45d82724e", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d8f1229dda0aa4369f31946d2b9b38f45d82724e", "committedDate": "2020-09-03T19:43:41Z", "message": "add test coverage\n\nto address:\ngoogle-cloud-bigquery/src/main/java/com/google/cloud/bigquery/BigQueryException.java#L69-L71\nAdded lines #L69 - L71 were not covered by tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d73c4fa67f20caf7b992508a7e0f4209a76ae1", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/f7d73c4fa67f20caf7b992508a7e0f4209a76ae1", "committedDate": "2020-09-03T19:43:52Z", "message": "Merge remote-tracking branch 'origin/sql-client' into sql-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd9dcaebc52a405646b2db36f3db2915a94936a5", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/fd9dcaebc52a405646b2db36f3db2915a94936a5", "committedDate": "2020-09-03T20:00:26Z", "message": "lint fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cdf672244f4246d33d90831b328f888fdd7c951", "author": {"user": {"login": "pmakani", "name": "Praful Makani"}}, "url": "https://github.com/googleapis/java-bigquery/commit/0cdf672244f4246d33d90831b328f888fdd7c951", "committedDate": "2020-09-11T11:01:10Z", "message": "feat: add more code cov"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d1a635bed35b81e0cddeeb0dd06c7e3993dfdb", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/27d1a635bed35b81e0cddeeb0dd06c7e3993dfdb", "committedDate": "2020-09-11T15:05:15Z", "message": "set method back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23c90081593eaa4af913804f190acf626fbdf974", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/23c90081593eaa4af913804f190acf626fbdf974", "committedDate": "2020-09-11T15:09:53Z", "message": "Merge branch 'master' into sql-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48397ad8b79993a499dbd472a8a80834b862c997", "author": {"user": {"login": "pmakani", "name": "Praful Makani"}}, "url": "https://github.com/googleapis/java-bigquery/commit/48397ad8b79993a499dbd472a8a80834b862c997", "committedDate": "2020-09-15T13:24:54Z", "message": "feat: code cove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e161cf91c22567fc28b35be30d1c8acea1ebd7b3", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/e161cf91c22567fc28b35be30d1c8acea1ebd7b3", "committedDate": "2020-09-16T16:29:57Z", "message": "add codecov"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjM1MzY4", "url": "https://github.com/googleapis/java-bigquery/pull/509#pullrequestreview-493635368", "createdAt": "2020-09-22T16:19:06Z", "commit": {"oid": "e161cf91c22567fc28b35be30d1c8acea1ebd7b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1162, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}