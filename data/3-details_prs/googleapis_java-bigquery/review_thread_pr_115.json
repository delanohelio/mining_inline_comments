{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjI5NjU3", "number": 115, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowMzoxN1rODY95NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozMTowMVrODaTYCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTA2NDg0OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowMzoxN1rOFfIJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMDowMzoxN1rOFfIJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MzY2MQ==", "bodyText": "This should be an arg that you pass in (or more preferably formatted from existing arguments)- all the //TODO's should be in the top function so they are easy to find.\nCan you do something like: String tableRef = String.format(\"%s.%s.%s\", projectId, datasetId, tableName)?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r368183661", "createdAt": "2020-01-18T00:03:17Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String datasetName, String tableName) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      String query =\n+          \"SELECT \"\n+              + \"word \"\n+              // TODO(developer): Replace projectId.dataset.tableName with yours", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff1f36e7a152edf949cd4b729b03349558558b2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc0NDYyOnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNzowMVrOFhIh0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowNzoyOFrOFhJZmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzA1Ng==", "bodyText": "@kurtisvg, do we have a convention for input fields like:\n\"MY_PROJECT_ID\" is all caps because it is some field they have to already have\nWhere\n\"my_dataset_name\" is lower case to show this is a user provided field?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370287056", "createdAt": "2020-01-23T18:37:01Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5ODQzNA==", "bodyText": "I think they're both fields to be provided by user - MY_PROJECT_ID is already set only for testing. If they just run the sample, they will still need to provide the projectId.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370298434", "createdAt": "2020-01-23T19:01:04Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzA1Ng=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMTMzOA==", "bodyText": "We don't have a convention AFIAK - I prefer \"ALL-CAPS-WITH-HYPENS\" but it's not really a significant difference", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370301338", "createdAt": "2020-01-23T19:07:28Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzA1Ng=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc0OTcwOnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozODozNlrOFhIkyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowMTo0M1rOFhJPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzgxNw==", "bodyText": "nit: might be worth adding the rest:\n// Initialize client that will be used to send requests. This client only needs to be created\n// once, and can be reused for multiple requests. After completing all of your requests, call\n// the \"close\" method on the client to safely clean up any remaining background resources.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370287817", "createdAt": "2020-01-23T18:38:36Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5ODc1MA==", "bodyText": "Unfortunately, BigQuery is Apiary generated and does not have a close method I/the user could call.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370298750", "createdAt": "2020-01-23T19:01:43Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzgxNw=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc1NjA0OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0MDo0NlrOFhIonw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToxMzo1MFrOFhJljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODc5OQ==", "bodyText": "Do BigQuery samples usually not use the java `try-with-resources?\nLike:\ntry (BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService()) {\n...\n\nhttps://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370288799", "createdAt": "2020-01-23T18:40:46Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMjI0Ng==", "bodyText": "That's right -- BQ client is not Autocloseable and cannot be changed into one since there's no close() method we can call to clean up resource. The Apiary client generator would have to change... something I discussed with Les and will put on hold for now.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370302246", "createdAt": "2020-01-23T19:09:27Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODc5OQ=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNDM5Nw==", "bodyText": "The BQ client is hand written and has a few quirks - one is the client isn't autoclosable.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370304397", "createdAt": "2020-01-23T19:13:50Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODc5OQ=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc2Mjc5OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0MzowNFrOFhIs3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowNjowM1rOFhJXMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTg4Nw==", "bodyText": "Would you want to use a StringBuilder here?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370289887", "createdAt": "2020-01-23T18:43:04Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDcyMA==", "bodyText": "Java will actually optimize concats like this - you only need to use StringBuilder if you are appending iteratively", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370300720", "createdAt": "2020-01-23T19:06:03Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTg4Nw=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc2OTE0OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0NToxNlrOFhIw7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToxNTozNlrOFhJolA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDkyNg==", "bodyText": "Do the error for BigQuery follow the same as this page?\nhttps://cloud.google.com/apis/design/errors\nIf so, might be worth linking to that page unless the errors themselves are descriptive.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370290926", "createdAt": "2020-01-23T18:45:16Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMDYwOA==", "bodyText": "The errors for Jobs don't have error codes. I think they're decently descriptive.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370300608", "createdAt": "2020-01-23T19:05:49Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDkyNg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTE3Mg==", "bodyText": "Another BQ client quirk - it doesn't return errors in the best way. This was a compromised we reached.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370305172", "createdAt": "2020-01-23T19:15:36Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDkyNg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc4MDE1OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0ODo0NFrOFhI3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTowMzoxMVrOFhJSAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MjY1NQ==", "bodyText": "@kurtisvg, is this fine or is there a preference for traditional for loops?\nLike:\nfor (Row row in results.iterateAll()) { ...", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370292655", "createdAt": "2020-01-23T18:48:44Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors\n+      if (queryJob == null) {\n+        throw new Exception(\"Job no longer exists\");\n+      } else if (queryJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new Exception(queryJob.getStatus().getError().toString());\n+      }\n+\n+      // Get the results.\n+      TableResult results = queryJob.getQueryResults();\n+\n+      // Print all pages of the results.\n+      results\n+          .iterateAll()\n+          .forEach(\n+              rows -> {\n+                rows.forEach(row -> System.out.println(\"row: \" + row.toString()));\n+              });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5OTM5NQ==", "bodyText": "forEach is preffered over traditional for-loops because it allows for lambdas (it's backwards in the sample guide atm)", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370299395", "createdAt": "2020-01-23T19:03:11Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      String sourceTable = \"`\" + projectId + \".\" + datasetName + \".\" + tableName + \"`\";\n+      String query =\n+          \"SELECT \" + \"word\\n\" + \"FROM \" + sourceTable + \"\\n\" + \"WHERE word like '%is%' \";\n+\n+      QueryJobConfiguration queryConfig =\n+          QueryJobConfiguration.newBuilder(query)\n+              // Use standard SQL syntax for queries.\n+              // See: https://cloud.google.com/bigquery/sql-reference/\n+              .setUseLegacySql(false)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_RELAXATION))\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setDestinationTable(tableId)\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());\n+\n+      queryJob = queryJob.waitFor();\n+\n+      // Check for errors\n+      if (queryJob == null) {\n+        throw new Exception(\"Job no longer exists\");\n+      } else if (queryJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new Exception(queryJob.getStatus().getError().toString());\n+      }\n+\n+      // Get the results.\n+      TableResult results = queryJob.getQueryResults();\n+\n+      // Print all pages of the results.\n+      results\n+          .iterateAll()\n+          .forEach(\n+              rows -> {\n+                rows.forEach(row -> System.out.println(\"row: \" + row.toString()));\n+              });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MjY1NQ=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc4MjYxOnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0OTo0MlrOFhI5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToxODowNFrOFhJtgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzA3NA==", "bodyText": "nit: might be worth putting a comment on what it means to relax a table query.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370293074", "createdAt": "2020-01-23T18:49:42Z", "author": {"login": "nnegrey"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNjQzMg==", "bodyText": "will do", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370306432", "createdAt": "2020-01-23T19:18:04Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/main/java/com/example/bigquery/RelaxTableQuery.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_query_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class RelaxTableQuery {\n+\n+  public static void runRelaxTableQuery() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"MY_PROJECT_ID\";\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    relaxTableQuery(projectId, datasetName, tableName);\n+  }\n+\n+  public static void relaxTableQuery(String projectId, String datasetName, String tableName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MzA3NA=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc4ODI4OnYy", "diffSide": "RIGHT", "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo1MTozMVrOFhI8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOToyMjo0NFrOFhJ2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg==", "bodyText": "nit: should this be in tearDown?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370293962", "createdAt": "2020-01-23T18:51:31Z", "author": {"login": "nnegrey"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMTQ5OA==", "bodyText": "I don't seem to be able to pass in tableName in tearDown() @kurtisvg thoughts?", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370301498", "createdAt": "2020-01-23T19:07:49Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMzgwOQ==", "bodyText": "It's probably a good practice because it will ensure the tearDown occurs if the test fails. You should also use a UUID, so that multiple test runs don't step on each other.\nYou can accomplish this be having tableName be a class field, and using setUp to create it and tearDown to destroy it.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370303809", "createdAt": "2020-01-23T19:12:41Z", "author": {"login": "kurtisvg"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwMzkyMw==", "bodyText": "It's probably a good practice because it will ensure the tearDown occurs if the test fails. You should also use a UUID, so that multiple test runs don't step on each other.\nYou can accomplish this be having tableName be a class field, and using setUp to create it and tearDown to destroy it.", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370303923", "createdAt": "2020-01-23T19:12:57Z", "author": {"login": "kurtisvg"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwODYzMw==", "bodyText": "Will do", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370308633", "createdAt": "2020-01-23T19:22:44Z", "author": {"login": "stephaniewang526"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testRelaxTableQuery() throws Exception {\n+    String tableName = \"RELAX_TABLE_QUERY_TEST\";\n+    Schema originalSchema =\n+        Schema.of(\n+            Field.newBuilder(\"word\", LegacySQLTypeName.STRING).setMode(Field.Mode.REQUIRED).build(),\n+            Field.newBuilder(\"word_count\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build(),\n+            Field.newBuilder(\"corpus_date\", LegacySQLTypeName.STRING)\n+                .setMode(Field.Mode.REQUIRED)\n+                .build());\n+\n+    CreateTable.createTable(BIGQUERY_DATASET_NAME, tableName, originalSchema);\n+\n+    RelaxTableQuery.relaxTableQuery(BIGQUERY_PROJECT_ID, BIGQUERY_DATASET_NAME, tableName);\n+    assertThat(bout.toString())\n+        .contains(\"Successfully relaxed all columns in destination table during query job\");\n+\n+    // Clean up\n+    DeleteTable.deleteTable(BIGQUERY_DATASET_NAME, tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5Mzk2Mg=="}, "originalCommit": {"oid": "a1393e4b3244a3c5db9e6a361909ae6368e6be48"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTA3MDE5OnYy", "diffSide": "RIGHT", "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozMTowMVrOFhLtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDozMTowMVrOFhLtVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzOTE1OA==", "bodyText": "I'm guessing table name has a limit, to get more randomization would it be better to do:\ntableName = \"TEST_\" + UUID.randomUUID().toString().replace('-', '').substring(0, 23);", "url": "https://github.com/googleapis/java-bigquery/pull/115#discussion_r370339158", "createdAt": "2020-01-23T20:31:01Z", "author": {"login": "nnegrey"}, "path": "samples/src/test/java/com/example/bigquery/RelaxTableQueryIT.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static junit.framework.TestCase.assertNotNull;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.UUID;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RelaxTableQueryIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+  private String tableName;\n+  private Schema originalSchema;\n+\n+  private static final String BIGQUERY_PROJECT_ID = System.getenv(\"BIGQUERY_PROJECT_ID\");\n+  private static final String BIGQUERY_DATASET_NAME = System.getenv(\"BIGQUERY_DATASET_NAME\");\n+\n+  private static void requireEnvVar(String varName) {\n+    assertNotNull(\n+        \"Environment variable \" + varName + \" is required to perform these tests.\",\n+        System.getenv(varName));\n+  }\n+\n+  @BeforeClass\n+  public static void checkRequirements() {\n+    requireEnvVar(\"BIGQUERY_PROJECT_ID\");\n+    requireEnvVar(\"BIGQUERY_DATASET_NAME\");\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    tableName =\n+        \"RELAX_TABLE_QUERY_TEST\" + UUID.randomUUID().toString().substring(0, 5).replace('-', '_');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c035ecb4a9bce4c64b7cbc8ce405edd7d45fce"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3547, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}