{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjYxNzAx", "number": 209, "title": "samples: add new sample bigquery_load_from_file", "bodyText": "Fixes b/130055221", "createdAt": "2020-03-04T00:13:27Z", "url": "https://github.com/googleapis/java-bigquery/pull/209", "merged": true, "mergeCommit": {"oid": "dc903365aecf38473885036cf1ab17f9b3dd02b1"}, "closed": true, "closedAt": "2020-03-06T19:01:46Z", "author": {"login": "stephaniewang526"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKLi9eAH2gAyMzgzMjYxNzAxOmNmOTZkZjFhMTU3NzAzZTBlYzQ4ZWY1MTEyYzE4ZTRiNDliN2QxNWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKzJ32AFqTM2OTk1NzI2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cf96df1a157703e0ec48ef5112c18e4b49b7d15f", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/cf96df1a157703e0ec48ef5112c18e4b49b7d15f", "committedDate": "2020-03-04T00:12:28Z", "message": "samples: add new sample bigquery_load_from_file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/a996d4b3610fdc708e5ea5c8125107e8cd1132e1", "committedDate": "2020-03-04T00:15:14Z", "message": "updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDQ2MzQ5", "url": "https://github.com/googleapis/java-bigquery/pull/209#pullrequestreview-368446349", "createdAt": "2020-03-04T01:24:44Z", "commit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToyNDo0NFrOFxc-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToyNzo0MVrOFxdBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTMwNA==", "bodyText": "You can try-with multiple resources:\ntry (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n         OutputStream stream = Channels.newOutputStream(writer)) {\n     Files.copy(csvPath, stream);\n}\nAlternatively, you could nest try-with-resource statements as well.", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387399304", "createdAt": "2020-03-04T01:24:44Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location must be specified; other fields can be auto-detected.\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n+\n+      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+\n+      // Imports a local file into a table.\n+      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      } finally {\n+        writer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMDExMg==", "bodyText": "IOExceptions and InterruptedException should probably bubble up", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387400112", "createdAt": "2020-03-04T01:27:41Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location must be specified; other fields can be auto-detected.\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").build();\n+\n+      TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+\n+      // Imports a local file into a table.\n+      try (OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      } finally {\n+        writer.close();\n+      }\n+\n+      Job job = writer.getJob();\n+      Job completedJob = job.waitFor();\n+      if (completedJob == null) {\n+        System.out.println(\"Job not executed since it no longer exists.\");\n+        return;\n+      } else if (completedJob.getStatus().getError() != null) {\n+        System.out.println(\n+            \"BigQuery was unable to load local file to the table due to an error: \\n\"\n+                + job.getStatus().getError());\n+        return;\n+      }\n+\n+      // Get output status\n+      LoadStatistics stats = job.getStatistics();\n+      System.out.printf(\"Successfully loaded %d rows. \\n\", stats.getOutputRows());\n+    } catch (BigQueryException | IOException | InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTk5OTY4", "url": "https://github.com/googleapis/java-bigquery/pull/209#pullrequestreview-368999968", "createdAt": "2020-03-04T18:01:53Z", "commit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMTo1M1rOFx3wvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMTo1M1rOFx3wvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg==", "bodyText": "This looks like a typo", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r387838142", "createdAt": "2020-03-04T18:01:53Z", "author": {"login": "kurtisvg"}, "path": "samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java", "diffHunk": "@@ -59,7 +60,9 @@ public void tearDown() {\n   public void loadPartitionedTable() throws Exception {\n     String sourceUri = \"gs://cloud-samples-data/bigquery/us-states/us-states-by-date-no-header.csv\";\n \n-    String tableName = \"LOAD_PARTITIONED_TABLE_TEST\";\n+    String tableName =\n+        \"LOAD_PARTITIONED_TABLE_TEST_\" + UUID.randomUUID().toString().replace('-', '_');\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4705f4bf46466a412931edec27d313e62311b2c4", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/4705f4bf46466a412931edec27d313e62311b2c4", "committedDate": "2020-03-05T21:40:20Z", "message": "update to try w multiple resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9538681eefb07615a159e3f223020083d62770b", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d9538681eefb07615a159e3f223020083d62770b", "committedDate": "2020-03-05T22:04:39Z", "message": "update to try w multiple resources\nmove unhelpful exceptions to method signature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTQ5ODU2", "url": "https://github.com/googleapis/java-bigquery/pull/209#pullrequestreview-369949856", "createdAt": "2020-03-05T22:06:44Z", "commit": {"oid": "d9538681eefb07615a159e3f223020083d62770b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNjo0NFrOFyl-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowODowMlrOFymAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTI2MA==", "bodyText": "nit: Add a comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Job job = bigquery.getJob(jobId);\n          \n          \n            \n                  // Get the Job created by the TableDataWriteChannel and wait for it to complete.\n          \n          \n            \n                  Job job = bigquery.getJob(jobId);", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388595260", "createdAt": "2020-03-05T22:06:44Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/LoadLocalFile.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_load_from_file]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobStatistics.LoadStatistics;\n+import com.google.cloud.bigquery.TableDataWriteChannel;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.cloud.bigquery.WriteChannelConfiguration;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.UUID;\n+\n+public class LoadLocalFile {\n+\n+  public static void runLoadLocalFile() throws IOException, InterruptedException {\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    Path csvPath = FileSystems.getDefault().getPath(\".\", \"my-data.csv\");\n+    loadLocalFile(datasetName, tableName, csvPath);\n+  }\n+\n+  public static void loadLocalFile(String datasetName, String tableName, Path csvPath)\n+      throws IOException, InterruptedException {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+      TableId tableId = TableId.of(datasetName, tableName);\n+\n+      WriteChannelConfiguration writeChannelConfiguration =\n+          WriteChannelConfiguration.newBuilder(tableId)\n+              .setFormatOptions(FormatOptions.csv())\n+              .build();\n+\n+      // The location and JobName must be specified; other fields can be auto-detected.\n+      String jobName = \"jobId_\" + UUID.randomUUID().toString();\n+      JobId jobId = JobId.newBuilder().setLocation(\"us\").setJob(jobName).build();\n+\n+      // Imports a local file into a table.\n+      try (TableDataWriteChannel writer = bigquery.writer(jobId, writeChannelConfiguration);\n+          OutputStream stream = Channels.newOutputStream(writer)) {\n+        Files.copy(csvPath, stream);\n+      }\n+\n+      Job job = bigquery.getJob(jobId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9538681eefb07615a159e3f223020083d62770b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NTc3Nw==", "bodyText": "I think the semicolon on L65 is still extra (and looks like it was added in this PR).", "url": "https://github.com/googleapis/java-bigquery/pull/209#discussion_r388595777", "createdAt": "2020-03-05T22:08:02Z", "author": {"login": "kurtisvg"}, "path": "samples/src/test/java/com/example/bigquery/LoadPartitionedTableIT.java", "diffHunk": "@@ -59,7 +60,9 @@ public void tearDown() {\n   public void loadPartitionedTable() throws Exception {\n     String sourceUri = \"gs://cloud-samples-data/bigquery/us-states/us-states-by-date-no-header.csv\";\n \n-    String tableName = \"LOAD_PARTITIONED_TABLE_TEST\";\n+    String tableName =\n+        \"LOAD_PARTITIONED_TABLE_TEST_\" + UUID.randomUUID().toString().replace('-', '_');\n+    ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODE0Mg=="}, "originalCommit": {"oid": "a996d4b3610fdc708e5ea5c8125107e8cd1132e1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17bf937dd54896c994aee6028c02ba4bc5f96258", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/17bf937dd54896c994aee6028c02ba4bc5f96258", "committedDate": "2020-03-05T22:19:05Z", "message": "add comment\n\nCo-Authored-By: Kurtis Van Gent <31518063+kurtisvg@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fe504a811337c0ef42c4c4287ad1923c66c2e0", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/c0fe504a811337c0ef42c4c4287ad1923c66c2e0", "committedDate": "2020-03-05T22:20:22Z", "message": "nit - remove extra semicolon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTU3MjYx", "url": "https://github.com/googleapis/java-bigquery/pull/209#pullrequestreview-369957261", "createdAt": "2020-03-05T22:21:16Z", "commit": {"oid": "c0fe504a811337c0ef42c4c4287ad1923c66c2e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1228, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}