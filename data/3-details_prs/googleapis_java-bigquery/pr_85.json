{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjA5ODUw", "number": 85, "title": "feat: new sample - Tables: Add empty column", "bodyText": "Fixes b/147297640", "createdAt": "2020-01-07T22:58:48Z", "url": "https://github.com/googleapis/java-bigquery/pull/85", "merged": true, "mergeCommit": {"oid": "b8e4c1845c43b96b40cbebb0016c987919f781fe"}, "closed": true, "closedAt": "2020-01-08T16:28:13Z", "author": {"login": "stephaniewang526"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4I5k2gH2gAyMzYwMjA5ODUwOjIyNzcxMGI5N2YyNGM1NTBmZTI1Mzk4NzQ5ZjdhN2NmY2YyYjhiZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4X4g7AFqTMzOTk4MjY1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "227710b97f24c550fe25398749f7a7cfcf2b8bef", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/227710b97f24c550fe25398749f7a7cfcf2b8bef", "committedDate": "2020-01-07T22:56:49Z", "message": "feat: new sample - Tables: Add empty column"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1", "committedDate": "2020-01-07T22:57:38Z", "message": "format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTkwNzE1", "url": "https://github.com/googleapis/java-bigquery/pull/85#pullrequestreview-339590715", "createdAt": "2020-01-08T00:33:05Z", "commit": {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDozMzowNVrOFbJ2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMDozNzozN1rOFbJ6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzIyOA==", "bodyText": "nit: Consider splitting this into two actions to make more clear to users what's happening:\n// Update the table definition to include the new schema \nupdatedTable = table.toBuilder().setDefinition(StandardTableDefinition.of(newSchema)).build();\n// Push updates to the BigQuery service\nupdatedTable.update();", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364017228", "createdAt": "2020-01-08T00:33:05Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');\n+      Field newField = Field.of(randomColumnName, LegacySQLTypeName.STRING);\n+\n+      // Create a new schema adding the current fields, plus the new one\n+      List<Field> fieldList = new ArrayList<Field>();\n+      for (Field f : fields) {\n+        fieldList.add(f);\n+      }\n+      fieldList.add(newField);\n+      Schema newSchema = Schema.of(fieldList);\n+\n+      // Update the table with the new schema\n+      table.toBuilder().setDefinition(StandardTableDefinition.of(newSchema)).build().update();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxNzgzMQ==", "bodyText": "nit: Consider using forEach:\nList<Field> fieldList = new ArrayList<Field>()\nfields.forEach(fieldList::add)", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364017831", "createdAt": "2020-01-08T00:35:43Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');\n+      Field newField = Field.of(randomColumnName, LegacySQLTypeName.STRING);\n+\n+      // Create a new schema adding the current fields, plus the new one\n+      List<Field> fieldList = new ArrayList<Field>();\n+      for (Field f : fields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAxODI4NA==", "bodyText": "Do we expect users to want to generate a column name with a UUID? Perhaps this would be better as a provided argument, and we can uses a UUID from the tests side instead.", "url": "https://github.com/googleapis/java-bigquery/pull/85#discussion_r364018284", "createdAt": "2020-01-08T00:37:37Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddEmptyColumn.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_add_empty_column]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.StandardTableDefinition;\n+import com.google.cloud.bigquery.Table;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+public class AddEmptyColumn {\n+\n+  public static void runAddEmptyColumn() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableId = \"MY_TABLE_NAME\";\n+    addEmptyColumn(datasetName, tableId);\n+  }\n+\n+  public static void addEmptyColumn(String datasetName, String tableId) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      Table table = bigquery.getTable(datasetName, tableId);\n+      Schema schema = table.getDefinition().getSchema();\n+      FieldList fields = schema.getFields();\n+\n+      // Create the new field/column\n+      String randomColumnName = \"new_\" + UUID.randomUUID().toString().replace('-', '_');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8a6b49c2e0bfa3ff5d46475726daef33c2ffe1"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6", "committedDate": "2020-01-08T15:58:21Z", "message": "update base on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a05cc9deb2a7487ab2b9857c95f095143039ca7", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/1a05cc9deb2a7487ab2b9857c95f095143039ca7", "committedDate": "2020-01-08T16:20:30Z", "message": "update base on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5OTgyNjUz", "url": "https://github.com/googleapis/java-bigquery/pull/85#pullrequestreview-339982653", "createdAt": "2020-01-08T16:24:14Z", "commit": {"oid": "6a166fe56bb6b74d094bc997e0da3a4d28a0f1b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1257, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}