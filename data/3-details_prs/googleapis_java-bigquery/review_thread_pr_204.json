{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTc2NjM4", "number": 204, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNDowN1rODkhHfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMToxOTowOFrODs243A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE3OTE2OnYy", "diffSide": "RIGHT", "path": "samples/src/main/java/com/example/bigquery/QueryWithStructsParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNDowOFrOFw4lWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNDowOFrOFw4lWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzAzMg==", "bodyText": "add newline at end of the file.", "url": "https://github.com/googleapis/java-bigquery/pull/204#discussion_r386803032", "createdAt": "2020-03-03T05:14:08Z", "author": {"login": "pmakani"}, "path": "samples/src/main/java/com/example/bigquery/QueryWithStructsParameters.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_params_structs]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+\n+public class QueryWithStructsParameters {\n+\n+  public static void queryWithStructsParameters() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      String query = \"SELECT [STRUCT(word AS w, word_count AS wc)]\";\n+\n+      QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query)\n+          //TODO: ADD IN STRUCT PARAM\n+          .build();\n+\n+      TableResult results = bigquery.query(queryConfig);\n+\n+      results.iterateAll().forEach(row -> row.forEach(val-> System.out.printf(\"%s\", val.toString())));\n+\n+      System.out.println(\"Query with struct parameter performed successfully.\");\n+    } catch (BigQueryException | InterruptedException e) {\n+      System.out.println(\"Query not performed \\n\" + e.toString());\n+    }\n+  }\n+}\n+// [END bigquery_query_params_structs]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d7e2dd77687b97df7aa7a444b34e1013f22bc5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE3OTUyOnYy", "diffSide": "RIGHT", "path": "samples/src/test/java/com/example/bigquery/QueryWithStructsParametersIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNDoyMVrOFw4ljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNDoyMVrOFw4ljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzA4NA==", "bodyText": "add newline at end of the file.", "url": "https://github.com/googleapis/java-bigquery/pull/204#discussion_r386803084", "createdAt": "2020-03-03T05:14:21Z", "author": {"login": "pmakani"}, "path": "samples/src/test/java/com/example/bigquery/QueryWithStructsParametersIT.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class QueryWithStructsParametersIT {\n+  private ByteArrayOutputStream bout;\n+  private PrintStream out;\n+\n+  @Before\n+  public void setUp() {\n+    bout = new ByteArrayOutputStream();\n+    out = new PrintStream(bout);\n+    System.setOut(out);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    System.setOut(null);\n+  }\n+\n+  @Test\n+  public void testQueryWithNamedParameters() {\n+    QueryWithStructsParameters.queryWithStructsParameters();\n+    assertThat(bout.toString()).contains(\"Query with struct parameter performed successfully.\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10d7e2dd77687b97df7aa7a444b34e1013f22bc5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzYzMjI4OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/bigquery/QueryWithStructsParameters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMToxOTowOFrOF98new==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMToxOTowOFrOF98new==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwMDYwMw==", "bodyText": "nit: Can you inline these?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  struct.put(\"booleanField\", booleanValue);\n          \n          \n            \n                  struct.put(\"booleanField\", QueryParameterValue.bool(true));", "url": "https://github.com/googleapis/java-bigquery/pull/204#discussion_r400500603", "createdAt": "2020-03-30T21:19:08Z", "author": {"login": "kurtisvg"}, "path": "samples/snippets/src/main/java/com/example/bigquery/QueryWithStructsParameters.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_query_params_structs]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class QueryWithStructsParameters {\n+\n+  public static void queryWithStructsParameters() {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      QueryParameterValue booleanValue = QueryParameterValue.bool(true);\n+      QueryParameterValue stringValue = QueryParameterValue.string(\"test-stringField\");\n+      QueryParameterValue integerValue = QueryParameterValue.int64(10);\n+      // Create struct\n+      Map<String, QueryParameterValue> struct = new HashMap<>();\n+      struct.put(\"booleanField\", booleanValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9172d0ed6dd765009d6199c65f9bb518317c889"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3500, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}