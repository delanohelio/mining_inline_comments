{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzQxODg3", "number": 112, "title": "feat: sample - add col load append", "bodyText": "Fixes b/147690070", "createdAt": "2020-01-16T16:42:41Z", "url": "https://github.com/googleapis/java-bigquery/pull/112", "merged": true, "mergeCommit": {"oid": "833b953aad618e88089c7e3487416c5650cc2ccc"}, "closed": true, "closedAt": "2020-01-22T17:18:41Z", "author": {"login": "stephaniewang526"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6oGAbAH2gAyMzYzNzQxODg3OjJhYWQwYzBiM2M1OGE4OTIwNDYwZjRmNGNlYzUxZWM0NmY0ZjUyZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb84lRngFqTM0NjczODk2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2aad0c0b3c58a8920460f4f4cec51ec46f4f52ec", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/2aad0c0b3c58a8920460f4f4cec51ec46f4f52ec", "committedDate": "2020-01-15T16:25:18Z", "message": "feat: new sample - Add Column Load Append"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65fe0ffce612c4624ca6be42fd9cbebde0640255", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/65fe0ffce612c4624ca6be42fd9cbebde0640255", "committedDate": "2020-01-16T16:40:22Z", "message": "feat: add column load append work in progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d14cd875526d11327546979590c4f0b88c62daab", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/d14cd875526d11327546979590c4f0b88c62daab", "committedDate": "2020-01-16T17:04:36Z", "message": "update comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae7b17300cfd8685766bf89516837695524a144", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/2ae7b17300cfd8685766bf89516837695524a144", "committedDate": "2020-01-17T17:00:28Z", "message": "updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef1443581108c803599f5fa595335b6d22f9869", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/8ef1443581108c803599f5fa595335b6d22f9869", "committedDate": "2020-01-17T20:20:52Z", "message": "updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/fa6459ec25d93f874ef739b01ecd23fcb2bf0324", "committedDate": "2020-01-17T21:08:14Z", "message": "fix build issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODk5OTQ1", "url": "https://github.com/googleapis/java-bigquery/pull/112#pullrequestreview-344899945", "createdAt": "2020-01-17T23:57:53Z", "commit": {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo1Nzo1M1rOFfIFmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMzo1ODo0NFrOFfIGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjY4MQ==", "bodyText": "nit: Probably InvalidStateException would make more sense?\nRuntimeException is unchecked, making it a bad choice to suggest to users.", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368182681", "createdAt": "2020-01-17T23:57:53Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        throw new RuntimeException(\"Job no longer exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA==", "bodyText": "nit: It there error throwable? e.g. throw loadJob.getStatus().getError().toString()? Else use a checked error.", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r368182838", "createdAt": "2020-01-17T23:58:44Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        throw new RuntimeException(\"Job no longer exists\");\n+      } else if (completedJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new RuntimeException(loadJob.getStatus().getError().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e721562377559e2b699cb068bd56f9afb3527aed", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/e721562377559e2b699cb068bd56f9afb3527aed", "committedDate": "2020-01-18T20:00:16Z", "message": "update based on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDM5MDQ5", "url": "https://github.com/googleapis/java-bigquery/pull/112#pullrequestreview-346039049", "createdAt": "2020-01-21T16:59:47Z", "commit": {"oid": "e721562377559e2b699cb068bd56f9afb3527aed"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1OTo0N1rOFgBnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1OTo0N1rOFgBnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyNTE1MQ==", "bodyText": "What I meant was can you throw the Error directly - using throw loadJob.getStatus().getError()?\nOtherwise you really shouldn't throw a unchecked exceptions like this - checked exceptions are preferred. (A regular Exception is considered checked, while RuntimeExceptions are unchecked.)", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369125151", "createdAt": "2020-01-21T16:59:47Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri) {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        throw new RuntimeException(\"Job no longer exists\");\n+      } else if (completedJob.getStatus().getError() != null) {\n+        // You can also look at queryJob.getStatus().getExecutionErrors() for all\n+        // errors, not just the latest one.\n+        throw new RuntimeException(loadJob.getStatus().getError().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE4MjgzOA=="}, "originalCommit": {"oid": "fa6459ec25d93f874ef739b01ecd23fcb2bf0324"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67c04a2822a6758ad8f85ee54cdde4258f74a56", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/b67c04a2822a6758ad8f85ee54cdde4258f74a56", "committedDate": "2020-01-21T18:21:56Z", "message": "update based on comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzM2NjY5", "url": "https://github.com/googleapis/java-bigquery/pull/112#pullrequestreview-346336669", "createdAt": "2020-01-22T04:11:40Z", "commit": {"oid": "b67c04a2822a6758ad8f85ee54cdde4258f74a56"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3dc47cb2c7c331401c39cdbe59e00d0978746eb", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/c3dc47cb2c7c331401c39cdbe59e00d0978746eb", "committedDate": "2020-01-22T16:31:24Z", "message": "update exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzM1NzA3", "url": "https://github.com/googleapis/java-bigquery/pull/112#pullrequestreview-346735707", "createdAt": "2020-01-22T16:41:36Z", "commit": {"oid": "c3dc47cb2c7c331401c39cdbe59e00d0978746eb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MTozNlrOFgjDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjo0MTozNlrOFgjDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY3MzE0Nw==", "bodyText": "nit: This should probably throw an Exception as well.", "url": "https://github.com/googleapis/java-bigquery/pull/112#discussion_r369673147", "createdAt": "2020-01-22T16:41:36Z", "author": {"login": "kurtisvg"}, "path": "samples/src/main/java/com/example/bigquery/AddColumnLoadAppend.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.bigquery;\n+\n+// [START bigquery_relax_column_load_append]\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FormatOptions;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobId;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.JobInfo.SchemaUpdateOption;\n+import com.google.cloud.bigquery.JobInfo.WriteDisposition;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.LoadJobConfiguration;\n+import com.google.cloud.bigquery.Schema;\n+import com.google.cloud.bigquery.Table;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import java.util.UUID;\n+\n+public class AddColumnLoadAppend {\n+\n+  public static void runAddColumnLoadAppend() throws Exception {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String datasetName = \"MY_DATASET_NAME\";\n+    String tableName = \"MY_TABLE_NAME\";\n+    String sourceUri = \"/path/to/file.csv\";\n+    addColumnLoadAppend(datasetName, tableName, sourceUri);\n+  }\n+\n+  public static void addColumnLoadAppend(String datasetName, String tableName, String sourceUri)\n+      throws Exception {\n+    try {\n+      // Initialize client that will be used to send requests. This client only needs to be created\n+      // once, and can be reused for multiple requests.\n+      BigQuery bigquery = BigQueryOptions.getDefaultInstance().getService();\n+\n+      TableId tableId = TableId.of(datasetName, tableName);\n+      Table table = bigquery.getTable(tableId);\n+\n+      // Add a new column to a BigQuery table while appending rows via a load job.\n+      // 'REQUIRED' fields cannot  be added to an existing schema, so the additional column must be\n+      // 'NULLABLE'.\n+      Schema newSchema =\n+          Schema.of(\n+              Field.newBuilder(\"name\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.REQUIRED)\n+                  .build(),\n+              // Adding below additional column during the load job\n+              Field.newBuilder(\"post_abbr\", LegacySQLTypeName.STRING)\n+                  .setMode(Field.Mode.NULLABLE)\n+                  .build());\n+\n+      LoadJobConfiguration loadJobConfig =\n+          LoadJobConfiguration.builder(tableId, sourceUri)\n+              .setFormatOptions(FormatOptions.csv())\n+              .setWriteDisposition(WriteDisposition.WRITE_APPEND)\n+              .setSchema(newSchema)\n+              .setSchemaUpdateOptions(ImmutableList.of(SchemaUpdateOption.ALLOW_FIELD_ADDITION))\n+              .build();\n+\n+      // Create a job ID so that we can safely retry.\n+      JobId jobId = JobId.of(UUID.randomUUID().toString());\n+      Job loadJob = bigquery.create(JobInfo.newBuilder(loadJobConfig).setJobId(jobId).build());\n+      System.out.println(loadJob.getJobId());\n+\n+      // Load data from a GCS parquet file into the table\n+      // Blocks until this load table job completes its execution, either failing or succeeding.\n+      Job completedJob = loadJob.waitFor();\n+\n+      // Check for errors\n+      if (completedJob == null) {\n+        System.out.println(\"Job not executed since it no longer exists.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3dc47cb2c7c331401c39cdbe59e00d0978746eb"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02e53702f478a7b92b80690fe415e7760a6fc28a", "author": {"user": {"login": "stephaniewang526", "name": "Stephanie Wang"}}, "url": "https://github.com/googleapis/java-bigquery/commit/02e53702f478a7b92b80690fe415e7760a6fc28a", "committedDate": "2020-01-22T16:45:05Z", "message": "update exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzM4OTY4", "url": "https://github.com/googleapis/java-bigquery/pull/112#pullrequestreview-346738968", "createdAt": "2020-01-22T16:45:47Z", "commit": {"oid": "02e53702f478a7b92b80690fe415e7760a6fc28a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1275, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}