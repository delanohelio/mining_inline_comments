{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDkzMTk5", "number": 3084, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0OTowNlrOD_miOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowNzowMVrOD_oFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDE4MjMyOnYy", "diffSide": "RIGHT", "path": "src/client/js/otp/config.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0OTowNlrOGaW3oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0OTowNlrOGaW3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MDg0OQ==", "bodyText": "Move this comment back to, and change the comment to:\nTRANSLATORS: Used in selection in Travel Options widgets", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430290849", "createdAt": "2020-05-26T09:49:06Z", "author": {"login": "t2gran"}, "path": "src/client/js/otp/config.js", "diffHunk": "@@ -291,49 +291,25 @@ i18n.init(options, function(t) {\n \n });\n \n+//TRANSLATORS: Travel by: mode of transport (Used in selection in Travel\n+//Options widgets)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18fd69f61faafd50271172d04c559e677193e518"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDI2MTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoxMjowNlrOGaXqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoxMjowNlrOGaXqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwMzgyNw==", "bodyText": "Doc:\nhttps://upload.wikimedia.org/wikipedia/commons/3/3e/WGS84_mean_Earth_radius.svg\nHannes Junnila12:07\nhttps://www.cambridge.org/core/journals/journal-of-navigation/article/sphere-to-spheroid-comparisons/E757B940C8C622A064276AC33CDC15C0\nhttps://www.cambridge.org/core/journals/journal-of-navigation/article/sphere-to-spheroid-comparisons/E757B940C8C622A064276AC33CDC15C0/core-reader", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430303827", "createdAt": "2020-05-26T10:12:06Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/common/geometry/GeometryUtils.java", "diffHunk": "@@ -153,6 +156,23 @@ else if (r > 1.0)\n         return r;\n     }\n \n+\n+    /**\n+    */\n+    public static double calculateDistance(Coordinate from, Coordinate to) {\n+        try {\n+            // the following code is based on JTS.orthodromicDistance( start, end, crs )\n+            GeodeticCalculator gc = new GeodeticCalculator(WGS84_XY);\n+            gc.setStartingPosition(JTS.toDirectPosition(from, WGS84_XY));\n+            gc.setDestinationPosition(JTS.toDirectPosition(to, WGS84_XY));\n+\n+            return gc.getOrthodromicDistance();\n+        }\n+        catch (TransformException e) {\n+            throw new IllegalStateException(e.getMessage(), e);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "836477f1d34418ff7c606d27fc40210f9d151c0c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQwMTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDo1NTo1OVrOGaZDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo0MjoxNFrOGbg4yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNjYwNA==", "bodyText": "Check the mode LegSwitch, is it street or transit, none or both?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430326604", "createdAt": "2020-05-26T10:55:59Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java", "diffHunk": "@@ -39,6 +41,9 @@ else if(leg.isOnStreetNonTransit()) {\n             if(!leg.isWalkingLeg()) {\n                 walkOnly = false;\n             }\n+            if(leg.isTransitLeg()) {\n+              this.streetOnly = false;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzU2MA==", "bodyText": "LEG_SWITCH is new explicit ignored, witch is correct if the LEG_SWITCH is ever reintroduced.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r431503560", "createdAt": "2020-05-27T23:42:14Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/model/plan/ItinerariesCalculateLegTotals.java", "diffHunk": "@@ -39,6 +41,9 @@ else if(leg.isOnStreetNonTransit()) {\n             if(!leg.isWalkingLeg()) {\n                 walkOnly = false;\n             }\n+            if(leg.isTransitLeg()) {\n+              this.streetOnly = false;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyNjYwNA=="}, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQxNzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowMToxNlrOGaZNxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo0Mjo0OVrOGbg5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTI4Ng==", "bodyText": "Maybe use \"true\" as default value.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430329286", "createdAt": "2020-05-26T11:01:16Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -28,6 +28,7 @@\n     private int maxLimit = 20;\n     private int groupByTransferCost = 10 * 60;\n     private Instant latestDepartureTimeLimit = null;\n+    private boolean removeTransitWithHigherCostThenWalkOnly = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMzc2OA==", "bodyText": "Changed so it is enabled by default.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r431503768", "createdAt": "2020-05-27T23:42:49Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -28,6 +28,7 @@\n     private int maxLimit = 20;\n     private int groupByTransferCost = 10 * 60;\n     private Instant latestDepartureTimeLimit = null;\n+    private boolean removeTransitWithHigherCostThenWalkOnly = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTI4Ng=="}, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQyMTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowMjozM1rOGaZQYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowMjozM1rOGaZQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyOTk1Mg==", "bodyText": "Reanme to \"StreetOnly\" and update the JavaDoc", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430329952", "createdAt": "2020-05-26T11:02:33Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -94,6 +95,21 @@ public void setGroupByTransferCost(int cost) {\n     public void setMaxLimitReachedSubscriber(Consumer<Itinerary> maxLimitReachedSubscriber) {\n         this.maxLimitReachedSubscriber = maxLimitReachedSubscriber;\n     }\n+    /**\n+     * The direct street search(walking) is not pruning the transit search, so in some cases we get\n+     * \"silly\" transit itineraries that is marginally better on travel-duration compared with a\n+     * walking-all-the-way itinerary. Calling this method will enable the filter witch remove all\n+     * itineraries with a generalized-cost that is higher than the best on-street-all-the-way\n+     * itinerary.\n+     * <p>\n+     * The default is NOT to include this filter.\n+     * <p>\n+     * This filter only have an effect, if an on-street-all-the-way(WALK, BICYCLE, CAR) itinerary\n+     * exist.\n+     */\n+    public void removeTransitWithHigherCostThenWalkOnly() {\n+        this.removeTransitWithHigherCostThenWalkOnly = true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQzNDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowNjozOVrOGaZYmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowNjozOVrOGaZYmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjA1OA==", "bodyText": "Still walk in the javadoc.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430332058", "createdAt": "2020-05-26T11:06:39Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.opentripplanner.routing.algorithm.filterchain.filters;\n+\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.filterchain.ItineraryFilter;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n+ * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n+ * itinerary is removed.\n+ *\n+ */\n+public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDQzNTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowNzowMVrOGaZZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTowNzowMVrOGaZZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjI0Nw==", "bodyText": "indentation", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3084#discussion_r430332247", "createdAt": "2020-05-26T11:07:01Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/filters/RemoveTransitIfStreetOnlyIsBetterFilter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.opentripplanner.routing.algorithm.filterchain.filters;\n+\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.filterchain.ItineraryFilter;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Filter itineraries based on duration, compared with a walk-all-the-way itinerary(if it exist).\n+ * If an itinerary is not faster than the walk-all-the-way minus a given slack, then the transit\n+ * itinerary is removed.\n+ *\n+ */\n+public class RemoveTransitIfStreetOnlyIsBetterFilter implements ItineraryFilter {\n+\n+    @Override\n+    public String name() {\n+        return \"transit-vs-street-filter\";\n+    }\n+\n+    @Override\n+    public List<Itinerary> filter(List<Itinerary> itineraries) {\n+        // Find the best walk-all-the-way option\n+        Optional<Itinerary> bestStreetOp = itineraries\n+                .stream()\n+            .filter(Itinerary::isOnStreetAllTheWay)\n+            .min(Comparator.comparingInt(l -> l.generalizedCost));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cc83a8a28a2d864b481ad3b0ad16dae45bdb338"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1834, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}