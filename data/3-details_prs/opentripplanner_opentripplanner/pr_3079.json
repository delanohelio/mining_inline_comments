{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTI5ODEx", "number": 3079, "title": "Otp2 separate out config loading in updaters", "bodyText": "To be completed by pull request submitter:\n\n issue: Link to or create an issue that describes the relevant feature or bug. Add GitHub keywords to this PR's description (e.g., closes #45).\n roadmap: Check the roadmap for this feature or bug. If it is not already on the roadmap, PLC will discuss as part of the review process.\n tests: Have you added relevant test coverage? Are all the tests passing on the continuous integration service (Travis CI)?\n formatting: Have you followed the suggested code style?\n documentation: If you are adding a new configuration option, have you added an explanation to the configuration documentation tables and sections?\n changelog: add a bullet point to the changelog file with description and link to the linked issue\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap\n\nAt Entur we are developing a new component for bike sharing endpoints, where OTP will ask this component for a list of updaters at startup. This is to separate out the responsibility of maintaining the list of updaters and possibly converting them to a compatible format for OTP.\nIn order to add this kind of endpoint, we need to separate out the loading of json config from the router-config from the initialization of the updaters. This has already been done for the build-config and the rest of the router-config (everything except updaters).\nWhat I am doing here is extending the NodeAdapter to also include loading of updater config. Each updater then defines an interface with the config it requires. The interfaces follow the same inheritance structure as the updaters themselves.\nThe updaters currently have a configure-method which takes in both JsonNode and the graph as parameters. This method is changed to only take in that updater's config interface. All logic that needs the graph is then moved to the setup method.\nSome updaters also have a data source (with its own inheritance structure). I have refactored the sources in the same way as the updaters themselves, by having the UpdaterConfig point to an UpdaterSourceConfig which implements the interfaces for the different sources.", "createdAt": "2020-05-18T14:13:04Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079", "merged": true, "mergeCommit": {"oid": "95c279ed1410690f2c26b396611ab02d7a68311c"}, "closed": true, "closedAt": "2020-06-02T08:54:10Z", "author": {"login": "gmellemstrand"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcie-8wgH2gAyNDE5NTI5ODExOjUzMGQ3ZTE5YTgwZjRmOTdmYzAyZmVlM2E1MWRjYjk3ZTJkZTk5OWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnQ8M9AFqTQyMjQ3Mzg5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/530d7e19a80f4f97fc02fee3a51dcb97e2de999e", "committedDate": "2020-05-18T12:25:25Z", "message": "Load updater config into a type safe structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/444c03374d487ee9812f36b8143d55b4cc7f56af", "committedDate": "2020-05-18T12:26:14Z", "message": "Refactor GraphUpdaterConfigurator to load updater config as a separate step"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5430667ad3b23b242371b34a1508d90128e2a27", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a5430667ad3b23b242371b34a1508d90128e2a27", "committedDate": "2020-05-18T12:27:51Z", "message": "- Create inner config interfaces in updaters\n- Change configure methods to take these interfaces as arguments instead of jsonNode\n- Rename configurePolling to configure\n- Change PollingGraphUpdaters to call configure method in base class instead of the other way around"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a16decb6f0e9455e2ea8a131214170f9ae088698", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a16decb6f0e9455e2ea8a131214170f9ae088698", "committedDate": "2020-05-18T13:08:15Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da44c431576b052660786bdb1229965229ec75c5", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/da44c431576b052660786bdb1229965229ec75c5", "committedDate": "2020-05-18T13:33:36Z", "message": "Remove graph as JsonConfigurable parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87104b1cff4f8d1872cce18c0eec79d0a3c9b82", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e87104b1cff4f8d1872cce18c0eec79d0a3c9b82", "committedDate": "2020-05-18T14:09:06Z", "message": "Remove graph as configure parameter, move graph logic to setup method where necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzU2NzM4", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413756738", "createdAt": "2020-05-18T16:30:29Z", "commit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMDoyOVrOGW-5wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMDoyOVrOGW-5wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MjQ0OA==", "bodyText": "Use the  #asRawNode() method instead of breaking encapsulation - this could lead to false-positive warnings when starting the server...", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426752448", "createdAt": "2020-05-18T16:30:29Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "diffHunk": "@@ -84,6 +84,10 @@ JsonNode asRawNode(String paramName) {\n         return param(paramName);\n     }\n \n+    public JsonNode asRawNode() {\n+        return json;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzU4MzIz", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413758323", "createdAt": "2020-05-18T16:32:36Z", "commit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjozN1rOGW--iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjozN1rOGW--iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY3Mg==", "bodyText": "Use the path method, and asRawNode()and pass in 2 arguments (if you need access to the JsonNode). I will explain below.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426753672", "createdAt": "2020-05-18T16:32:37Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -43,10 +45,7 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-\n-        // Touch parameters read at a later point in time to avoid reporting them when\n-        // logging unused parameters.\n-        adapter.path(\"updaters\");\n+        this.updaterConfig = new UpdaterConfig(adapter.asRawNode(\"updaters\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzYwMTk2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413760196", "createdAt": "2020-05-18T16:35:10Z", "commit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozNToxMFrOGW_EKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozNToxMFrOGW_EKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NTExMw==", "bodyText": "Here you create the NodeAdapter, but you should never do that - only do that for root config objects. I will try to remember this an prevent someone form doing it later, but this brake the \"parent\" reference and error reporting mechanish in the NodeAdapter. Also, you have lost track of the source, when you do this.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426755113", "createdAt": "2020-05-18T16:35:10Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/updater_config/UpdaterConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opentripplanner.standalone.config.updater_config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n+import org.opentripplanner.standalone.config.NodeAdapter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class UpdaterConfig {\n+\n+  public static final UpdaterConfig DEFAULT = new UpdaterConfig(\n+      MissingNode.getInstance()\n+  );\n+\n+  private final List<UpdaterConfigItem> configItems = new ArrayList<>();\n+\n+  public UpdaterConfig(JsonNode c) {\n+    for (JsonNode updater : c) {\n+      configItems.add(new UpdaterConfigItem(new NodeAdapter(updater, null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzY5Njc4", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413769678", "createdAt": "2020-05-18T16:48:03Z", "commit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0ODowM1rOGW_hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0ODowM1rOGW_hxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2MjY5NA==", "bodyText": "Comment: I guess you are gone change this later to just:\nupdater = new BikeRentalUpdater(configItem);\n\nAnd then inject the graph later.\nWhen the config is injected using the constructor the cast will be unnecessary and the fields in the updater can become final.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426762694", "createdAt": "2020-05-18T16:48:03Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +64,75 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(Graph graph, UpdaterConfig config) {\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n+\n+        for (UpdaterConfigItem configItem : config.getItems()) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater();\n+                            ((BikeRentalUpdater) updater).configure(graph, configItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzgzMzcw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413783370", "createdAt": "2020-05-18T17:07:09Z", "commit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNzowOVrOGXALqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNzowOVrOGXALqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MzQxOA==", "bodyText": "I cannot see that the updater are started in the new code?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426773418", "createdAt": "2020-05-18T17:07:09Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +64,75 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(Graph graph, UpdaterConfig config) {\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n+\n+        for (UpdaterConfigItem configItem : config.getItems()) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater();\n+                            ((BikeRentalUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"bike-park\":\n+                            updater = new BikeParkUpdater();\n+                            ((BikeParkUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"stop-time-updater\":\n+                            updater = new PollingStoptimeUpdater();\n+                            ((PollingStoptimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"websocket-gtfs-rt-updater\":\n+                            updater = new WebsocketGtfsRealtimeUpdater();\n+                            ((WebsocketGtfsRealtimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"real-time-alerts\":\n+                            updater = new GtfsRealtimeAlertsUpdater();\n+                            ((GtfsRealtimeAlertsUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-updater\":\n+                            updater = new ExampleGraphUpdater();\n+                            ((ExampleGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-polling-updater\":\n+                            updater = new ExamplePollingGraphUpdater();\n+                            ((ExamplePollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"winkki-polling-updater\":\n+                            updater = new WinkkiPollingGraphUpdater();\n+                            ((WinkkiPollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-et-updater\":\n+                            updater = new SiriETUpdater();\n+                            ((SiriETUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-vm-updater\":\n+                            updater = new SiriVMUpdater();\n+                            ((SiriVMUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-sx-updater\":\n+                            updater = new SiriSXUpdater();\n+                            ((SiriSXUpdater) updater).configure(graph, configItem);\n+                            break;\n+                    }\n                 }\n-                else if (type.equals(\"siri-sx-updater\")) {\n-                    updater = new SiriSXUpdater();\n+                if (updater != null) {\n+                    updaters.add(updater);\n                 }\n             }\n-\n-            if (updater == null) {\n-                LOG.error(\"Unknown updater type: \" + type);\n-            } else {\n-                try {\n-                    // Inform the GraphUpdater of its parent Manager so the updater can enqueue write operations.\n-                    // Perhaps this should be done in \"addUpdater\" below, to ensure the link is reciprocal.\n-                    updater.setGraphUpdaterManager(updaterManager);\n-                    // All GraphUpdaters are JsonConfigurable - send them their config information.\n-                    updater.configure(graph, configItem);\n-                    // Perform any initial setup in a single-threaded manner to avoid concurrent reads/writes.\n-                    updater.setup(graph);\n-                    // Add graph updater to manager.\n-                    updaterManager.addUpdater(updater);\n-                    LOG.info(\"Configured GraphUpdater: {}\", updater);\n-                } catch (Exception e) {\n-                    LOG.error(\"Failed to configure graph updater:\" + configItem.asText(), e);\n-                }\n+            catch (Exception e) {\n+                LOG.error(\"Failed to configure graph updater:\" + configItem.getType(), e);\n             }\n         }\n-        // Now that all the updaters are configured, kick them all off in their own threads.\n-        updaterManager.startUpdaters();\n-        return updaterManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzg3MzUx", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-413787351", "createdAt": "2020-05-18T17:13:01Z", "commit": {"oid": "a5430667ad3b23b242371b34a1508d90128e2a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxMzowMlrOGXAYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxMzowMlrOGXAYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NjYwMg==", "bodyText": "Tip! There is no need to extend - unless you add/override parameters. The good thing of not extending is that is is clear that the super-config is enough.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426776602", "createdAt": "2020-05-18T17:13:02Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/examples/updater/ExampleGraphUpdater.java", "diffHunk": "@@ -41,43 +42,41 @@\n     private String url;\n \n     // Here the updater can be configured using the properties in the file 'Graph.properties'.\n-    @Override\n-    public void configure(Graph graph, JsonNode config) throws Exception {\n-        frequencySec = config.path(\"frequencySec\").asInt(5);\n-        url = config.path(\"url\").asText();\n+    public void configure(Graph graph, ExampleGraphUpdaterConfig config) {\n+        frequencySec = config.getFrequencySec();\n+        url = config.getUrl();\n         LOG.info(\"Configured example updater: frequencySec={} and url={}\", frequencySec, url);\n     }\n \n     // Here the updater gets to know its parent manager to execute GraphWriterRunnables.\n-    @Override\n     public void setGraphUpdaterManager(GraphUpdaterManager updaterManager) {\n         LOG.info(\"Example updater: updater manager is set\");\n         this.updaterManager = updaterManager;\n     }\n \n     // Here the updater can be initialized.\n-    @Override\n     public void setup(Graph graph) {\n         LOG.info(\"Setup example updater\");\n     }\n \n     // This is where the updater thread receives updates and applies them to the graph.\n     // This method only runs once.\n-    @Override\n     public void run() {\n         LOG.info(\"Run example updater with hashcode: {}\", this.hashCode());\n         // Here the updater can connect to a server and register a callback function\n         // to handle updates to the graph\n     }\n \n     // Here the updater can cleanup after itself.\n-    @Override\n     public void teardown() {\n         LOG.info(\"Teardown example updater\");\n     }\n \n-    @Override\n     public String getName() {\n         return \"ExampleGraphUpdater\";\n     }\n+\n+    public interface ExampleGraphUpdaterConfig\n+        extends PollingGraphUpdater.PollingGraphUpdaterConfig {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5430667ad3b23b242371b34a1508d90128e2a27"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6adcf23c9c5b162b7a4d490cea97b9c50cd5f5e8", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6adcf23c9c5b162b7a4d490cea97b9c50cd5f5e8", "committedDate": "2020-05-19T12:31:01Z", "message": "Add list support to NodeAdapter and use it for loading updater config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c49bf829f1c6f66a91f1003f7a2e240085f2e9f", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3c49bf829f1c6f66a91f1003f7a2e240085f2e9f", "committedDate": "2020-05-19T12:58:55Z", "message": "Set updater config in constructors instead of configure method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2304b41ac0ad54fa5424a37ee976a0afdebd44", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4a2304b41ac0ad54fa5424a37ee976a0afdebd44", "committedDate": "2020-05-20T11:42:16Z", "message": "Add type-safe config to updater sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae249d155325e8697a5f5bc6fc90de234e82c79", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/fae249d155325e8697a5f5bc6fc90de234e82c79", "committedDate": "2020-05-20T11:45:20Z", "message": "Merge branch 'dev-2.x' into otp2_refactor_updaters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19606077b52c5aca882db3a23a82ecaf8dec1944", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/19606077b52c5aca882db3a23a82ecaf8dec1944", "committedDate": "2020-05-20T11:52:11Z", "message": "Rename inner config interfaces to just Config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9943c108d1ec6bc23f1fcddcb77ce96d0b23bb", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ec9943c108d1ec6bc23f1fcddcb77ce96d0b23bb", "committedDate": "2020-05-20T12:13:48Z", "message": "Cleanup unused exception declarations, make fields final etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3b3d2f5b1fc6520c490e193a26e7d49de1a1460c", "committedDate": "2020-05-20T12:14:54Z", "message": "Remove NodeAdapter.asRawNode() - not needed anymore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzgwOTI4", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-416780928", "createdAt": "2020-05-22T09:39:53Z", "commit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozOTo1M1rOGZREMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozOTo1M1rOGZREMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NzE4NQ==", "bodyText": "Remove graph", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429147185", "createdAt": "2020-05-22T09:39:53Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -36,16 +39,15 @@\n \n     private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(Graph graph, JsonNode mainConfig) {\n+    public static void setupGraph(Graph graph, List<UpdaterConfig> updaterConfigList) {\n+\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        // Look for embedded config if it exists\n-        // TODO figure out how & when we will use embedded config in absence of main config.\n-        JsonNode embeddedConfig = null; // graph.routerConfig;\n-        LOG.info(\"Using configurations: \" + (mainConfig == null ? \"\" : \"[main]\") + \" \"\n-                + (embeddedConfig == null ? \"\" : \"[embedded]\"));\n+        updaters.addAll(createUpdatersFromConfig(graph, updaterConfigList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzgxMjgy", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-416781282", "createdAt": "2020-05-22T09:40:26Z", "commit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0MDoyNlrOGZRFNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0MDoyNlrOGZRFNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NzQ0NQ==", "bodyText": "bindUpdatersToGraph", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429147445", "createdAt": "2020-05-22T09:40:26Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -36,16 +39,15 @@\n \n     private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(Graph graph, JsonNode mainConfig) {\n+    public static void setupGraph(Graph graph, List<UpdaterConfig> updaterConfigList) {\n+\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        // Look for embedded config if it exists\n-        // TODO figure out how & when we will use embedded config in absence of main config.\n-        JsonNode embeddedConfig = null; // graph.routerConfig;\n-        LOG.info(\"Using configurations: \" + (mainConfig == null ? \"\" : \"[main]\") + \" \"\n-                + (embeddedConfig == null ? \"\" : \"[embedded]\"));\n+        updaters.addAll(createUpdatersFromConfig(graph, updaterConfigList));\n \n-        // Create a updater manager for this graph, and create updaters according to the JSON configuration.\n-        GraphUpdaterManager updaterManager = createManagerFromConfig(graph, mainConfig);\n+        setupUpdaters(graph, updaters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NzgyNjY5", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-416782669", "createdAt": "2020-05-22T09:42:44Z", "commit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0Mjo0NVrOGZRJWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0Mjo0NVrOGZRJWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0ODUwNQ==", "bodyText": "rename configItem", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429148505", "createdAt": "2020-05-22T09:42:45Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +63,66 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(\n+        Graph graph,\n+        List<UpdaterConfig> configList\n+    ) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        for (UpdaterConfig configItem : configList) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater(configItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b03e6e7db71869e15f9cdedc28b104404a7721e", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1b03e6e7db71869e15f9cdedc28b104404a7721e", "committedDate": "2020-05-25T10:55:34Z", "message": "Remove graph from createUpdatersFromConfig arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38debfcda9730d3c49dd841b29c843a1b65f1e6", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b38debfcda9730d3c49dd841b29c843a1b65f1e6", "committedDate": "2020-05-27T09:38:08Z", "message": "- Add mapping from updater \"type\"(JSON) to the updater class, keeping a type-safe list a config for each updater -  @t2gran\n- Create separate parameter classes for each updater type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a05ca2082d49580732a1f3eb3552667d3dedff", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/29a05ca2082d49580732a1f3eb3552667d3dedff", "committedDate": "2020-05-27T09:51:44Z", "message": "Rename updater config to parameters"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ebf9c588cfbf1df841f15549c92a53e2b0619d4", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4ebf9c588cfbf1df841f15549c92a53e2b0619d4", "committedDate": "2020-05-26T14:49:30Z", "message": "Add mapping from updater \"type\"(JSON) to the updater class, keeping a type-safe list a config for each updater."}, "afterCommit": {"oid": "29a05ca2082d49580732a1f3eb3552667d3dedff", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/29a05ca2082d49580732a1f3eb3552667d3dedff", "committedDate": "2020-05-27T09:51:44Z", "message": "Rename updater config to parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f86f6723bbddf7441edbc485ea051df9e17a99", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/26f86f6723bbddf7441edbc485ea051df9e17a99", "committedDate": "2020-05-27T13:52:48Z", "message": "Also make updater data sources type safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508700f8f4fea132789652444d17954f3640cc79", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/508700f8f4fea132789652444d17954f3640cc79", "committedDate": "2020-05-27T13:53:17Z", "message": "Merge branch 'dev-2.x' into otp2_refactor_updaters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5e1c9d3c4eb200104f4df339e3b3ad891e67bd", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/da5e1c9d3c4eb200104f4df339e3b3ad891e67bd", "committedDate": "2020-05-28T08:55:02Z", "message": "Fix incorrect mapping of KmlBikeParkSourceParameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b686eb5f07ea8b3cbe14a62aa688e08501c85c", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b2b686eb5f07ea8b3cbe14a62aa688e08501c85c", "committedDate": "2020-05-28T10:34:19Z", "message": "Added sourceType requirement to migration guide and updated javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e7ba2d4b80cbedbdd4facae7be70d220226302", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b0e7ba2d4b80cbedbdd4facae7be70d220226302", "committedDate": "2020-05-29T12:06:27Z", "message": "Extract UpdaterDataSourceConfig interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNDczODk3", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#pullrequestreview-422473897", "createdAt": "2020-06-02T08:53:22Z", "commit": {"oid": "b0e7ba2d4b80cbedbdd4facae7be70d220226302"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2122, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}