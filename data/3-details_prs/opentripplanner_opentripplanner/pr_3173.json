{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDU1OTAy", "number": 3173, "title": "Add support for graph building with flex locations and trips", "bodyText": "This pull request is based on #3170. It adds graph building parts responsible of the flexible transit entities, such as mapping of flex trips and flex areas. No code for GTFS mapping is added, as it would require OneBusAway/onebusaway-gtfs-modules#143 to be published.\nTo be completed by pull request submitter:\n\n issue: Link to or create an issue that describes the relevant feature or bug. Add GitHub keywords to this PR's description (e.g., closes #45).\n roadmap: Check the roadmap for this feature or bug. If it is not already on the roadmap, PLC will discuss as part of the review process.\n tests: Have you added relevant test coverage? Are all the tests passing on the continuous integration service (Travis CI)?\n formatting: Have you followed the suggested code style?\n documentation: If you are adding a new configuration option, have you added an explanation to the configuration documentation tables and sections?\n changelog: add a bullet point to the changelog file with description and link to the linked issue\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap", "createdAt": "2020-09-03T08:28:02Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173", "merged": true, "mergeCommit": {"oid": "940a24d0b79256ce63086f5f1464278e468bc239"}, "closed": true, "closedAt": "2020-09-08T10:17:31Z", "author": {"login": "hannesj"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFQqrMgFqTQ4MTg0MTU0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG0x7pgH2gAyNDc4NDU1OTAyOmJlMDc0NWI5NjMyNmYyYWI0MWU1ZDk4MDliMTlmYjI1NjAyOGU5OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODQxNTQ4", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481841548", "createdAt": "2020-09-03T13:31:56Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzozMTo1N1rOHMmwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzozMTo1N1rOHMmwVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3OTkyNA==", "bodyText": "Revert change", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r482979924", "createdAt": "2020-09-03T13:31:57Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -84,25 +90,34 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n      * This is intentional: we don't want to return the next stop down the line for trip patterns that pass through the\n      * origin vertex.\n      */\n-    public Set<StopAtDistance> findNearbyStopsConsideringPatterns (Vertex vertex) {\n+    public Set<StopAtDistance> findNearbyStopsConsideringPatterns(Vertex vertex, boolean reverseDirection) {\n \n         /* Track the closest stop on each pattern passing nearby. */\n         MinMap<TripPattern, StopAtDistance> closestStopForPattern = new MinMap<TripPattern, StopAtDistance>();\n \n+        /* Track the closest stop on each flex trip nearby. */\n+        MinMap<FlexTrip, StopAtDistance> closestStopForFlexTrip = new MinMap<>();\n+\n+        /* Make a transfer from the origin stop to each destination stop that was the closest stop on any pattern. */\n+        Set<StopAtDistance> uniqueStops = Sets.newHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODUxNjYx", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481851661", "createdAt": "2020-09-03T13:42:44Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo0Mjo0NFrOHMnM7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo0Mjo0NFrOHMnM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4NzI0Ng==", "bodyText": "Add comment about \"Simplification so that we only return one vertex from each stop location. Add all vertices tp the map, which is filtered below\"", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r482987246", "createdAt": "2020-09-03T13:42:44Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -165,8 +183,24 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n                 if (targetVertex instanceof TransitStopVertex && state.isFinal()) {\n                     stopsFound.add(StopAtDistance.stopAtDistanceForState(state, ((TransitStopVertex) targetVertex).getStop()));\n                 }\n+                if (OTPFeature.FlexRouting.isOn()\n+                    && targetVertex instanceof StreetVertex\n+                    && ((StreetVertex) targetVertex).flexStopLocations != null) {\n+                   for (FlexStopLocation flexStopLocation : ((StreetVertex) targetVertex).flexStopLocations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODUyNTcw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481852570", "createdAt": "2020-09-03T13:43:40Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo0Mzo0MFrOHMnPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo0Mzo0MFrOHMnPkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk4NzkyMQ==", "bodyText": "Select the vertex from all vertices that are reachable by taking the minimum walking distance", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r482987921", "createdAt": "2020-09-03T13:43:40Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -165,8 +183,24 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n                 if (targetVertex instanceof TransitStopVertex && state.isFinal()) {\n                     stopsFound.add(StopAtDistance.stopAtDistanceForState(state, ((TransitStopVertex) targetVertex).getStop()));\n                 }\n+                if (OTPFeature.FlexRouting.isOn()\n+                    && targetVertex instanceof StreetVertex\n+                    && ((StreetVertex) targetVertex).flexStopLocations != null) {\n+                   for (FlexStopLocation flexStopLocation : ((StreetVertex) targetVertex).flexStopLocations) {\n+                        locationsMap.put(flexStopLocation, state);\n+                    }\n+                }\n             }\n         }\n+\n+        for (var locationStates : locationsMap.asMap().entrySet()) {\n+            FlexStopLocation flexStopLocation = locationStates.getKey();\n+            Collection<State> states = locationStates.getValue();\n+            State min = Collections.min(states, (s1, s2) -> (int) (s1.walkDistance - s2.walkDistance));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODY3Nzkw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481867790", "createdAt": "2020-09-03T13:59:14Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1OToxNFrOHMn9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1OToxNFrOHMn9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5OTYyMw==", "bodyText": "Stop to stop transfers are already populated by the findNearbyStopsConsideringPatterns(ts0, false)", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r482999623", "createdAt": "2020-09-03T13:59:14Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java", "diffHunk": "@@ -88,6 +89,19 @@ public void buildGraph(\n                 );\n                 n += 1;\n             }\n+            if (OTPFeature.FlexRouting.isOn()) {\n+                for (StopAtDistance sd : nearbyStopFinder.findNearbyStopsConsideringPatterns(ts0,  true)) {\n+                    /* Skip the origin stop, loop transfers are not needed. */\n+                    if (sd.stop == ts0.getStop())\n+                        continue;\n+                    if (sd.stop instanceof Stop)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODY5OTA0", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481869904", "createdAt": "2020-09-03T14:01:26Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMToyNlrOHMoEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMToyNlrOHMoEDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTM1Nw==", "bodyText": "add to separate class", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483001357", "createdAt": "2020-09-03T14:01:26Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/trip/UnscheduledTrip.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.opentripplanner.ext.flex.trip;\n+\n+import org.opentripplanner.model.StopLocation;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.Trip;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class UnscheduledTrip extends FlexTrip {\n+\n+  private final StopLocation[] stops;\n+  private final int[] minDepartureTimes;\n+  private final int[] maxDepartureTimes;\n+  private final int[] minArrivalTimes;\n+  private final int[] maxArrivalTimes;\n+\n+  private final int[] pickupTypes;\n+  private final int[] dropOffTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODcwNzE0", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481870714", "createdAt": "2020-09-03T14:02:17Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMjoxN1rOHMoGWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMjoxN1rOHMoGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTk0Ng==", "bodyText": "add to separate class", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483001946", "createdAt": "2020-09-03T14:02:17Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/trip/ScheduledDeviatedTrip.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.opentripplanner.ext.flex.trip;\n+\n+import org.opentripplanner.model.StopLocation;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.Trip;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+public class ScheduledDeviatedTrip extends FlexTrip {\n+  static final int MISSING_VALUE = -999;\n+\n+  private final StopLocation[] stops;\n+  private final int[] departureTimes;\n+  private final int[] arrivalTimes;\n+\n+  private final int[] pickupTypes;\n+  private final int[] dropOffTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODg0MDUw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481884050", "createdAt": "2020-09-03T14:15:48Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoxNTo0OFrOHMos1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoxNTo0OFrOHMos1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMTc5OA==", "bodyText": "Add Javadoc", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483011798", "createdAt": "2020-09-03T14:15:48Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/trip/UnscheduledTrip.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.opentripplanner.ext.flex.trip;\n+\n+import org.opentripplanner.model.StopLocation;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.Trip;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class UnscheduledTrip extends FlexTrip {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODg0MjE0", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481884214", "createdAt": "2020-09-03T14:15:58Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoxNTo1OFrOHMotTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoxNTo1OFrOHMotTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMTkxOQ==", "bodyText": "Add Javadoc", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483011919", "createdAt": "2020-09-03T14:15:58Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/trip/ScheduledDeviatedTrip.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.opentripplanner.ext.flex.trip;\n+\n+import org.opentripplanner.model.StopLocation;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.Trip;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+public class ScheduledDeviatedTrip extends FlexTrip {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk0MzM2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481894336", "createdAt": "2020-09-03T14:26:00Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNjowMFrOHMpKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNjowMFrOHMpKYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxOTM2MA==", "bodyText": "Add isConnectedToWalkingEdge, isConnectedToDriveableEdge and isEligibleForPickupDropoff in StreetEdge", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483019360", "createdAt": "2020-09-03T14:26:00Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/FlexLocationsToStreetEdgesMapper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opentripplanner.ext.flex;\n+\n+import org.locationtech.jts.geom.Point;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.graph_builder.DataImportIssueStore;\n+import org.opentripplanner.graph_builder.services.GraphBuilderModule;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.opentripplanner.routing.core.TraverseMode;\n+import org.opentripplanner.routing.core.TraverseModeSet;\n+import org.opentripplanner.routing.edgetype.StreetEdge;\n+import org.opentripplanner.routing.graph.Graph;\n+import org.opentripplanner.routing.graph.Vertex;\n+import org.opentripplanner.routing.impl.StreetVertexIndex;\n+import org.opentripplanner.routing.vertextype.StreetVertex;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+\n+public class FlexLocationsToStreetEdgesMapper implements GraphBuilderModule {\n+\n+  @Override\n+  public void buildGraph(\n+      Graph graph, HashMap<Class<?>, Object> extra, DataImportIssueStore issueStore\n+  ) {\n+    if (graph.locationsById.isEmpty()) {\n+      return;\n+    }\n+\n+    StreetVertexIndex streetIndex = new StreetVertexIndex(graph);\n+    TraverseModeSet carTraverseModeSet = new TraverseModeSet(TraverseMode.CAR);\n+    TraverseModeSet walkTraverseModeSet = new TraverseModeSet(TraverseMode.WALK);\n+\n+    for (FlexStopLocation flexStopLocation : graph.locationsById.values()) {\n+      for (Vertex vertx : streetIndex.getVerticesForEnvelope(flexStopLocation\n+          .getGeometry()\n+          .getEnvelopeInternal())\n+      ) {\n+        if (!(vertx instanceof StreetVertex)) { continue; }\n+        if (vertx.getOutgoing().stream().noneMatch(edge ->\n+            edge instanceof StreetEdge && ((StreetEdge) edge).canTraverse(carTraverseModeSet))  ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk1NjUy", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481895652", "createdAt": "2020-09-03T14:27:17Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNzoxN1rOHMpOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyNzoxN1rOHMpOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMDM3OQ==", "bodyText": "getVerticesForEnvelope can return Vertices which are not inside the search area", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483020379", "createdAt": "2020-09-03T14:27:17Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/FlexLocationsToStreetEdgesMapper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opentripplanner.ext.flex;\n+\n+import org.locationtech.jts.geom.Point;\n+import org.opentripplanner.common.geometry.GeometryUtils;\n+import org.opentripplanner.graph_builder.DataImportIssueStore;\n+import org.opentripplanner.graph_builder.services.GraphBuilderModule;\n+import org.opentripplanner.model.FlexStopLocation;\n+import org.opentripplanner.routing.core.TraverseMode;\n+import org.opentripplanner.routing.core.TraverseModeSet;\n+import org.opentripplanner.routing.edgetype.StreetEdge;\n+import org.opentripplanner.routing.graph.Graph;\n+import org.opentripplanner.routing.graph.Vertex;\n+import org.opentripplanner.routing.impl.StreetVertexIndex;\n+import org.opentripplanner.routing.vertextype.StreetVertex;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+\n+public class FlexLocationsToStreetEdgesMapper implements GraphBuilderModule {\n+\n+  @Override\n+  public void buildGraph(\n+      Graph graph, HashMap<Class<?>, Object> extra, DataImportIssueStore issueStore\n+  ) {\n+    if (graph.locationsById.isEmpty()) {\n+      return;\n+    }\n+\n+    StreetVertexIndex streetIndex = new StreetVertexIndex(graph);\n+    TraverseModeSet carTraverseModeSet = new TraverseModeSet(TraverseMode.CAR);\n+    TraverseModeSet walkTraverseModeSet = new TraverseModeSet(TraverseMode.WALK);\n+\n+    for (FlexStopLocation flexStopLocation : graph.locationsById.values()) {\n+      for (Vertex vertx : streetIndex.getVerticesForEnvelope(flexStopLocation\n+          .getGeometry()\n+          .getEnvelopeInternal())\n+      ) {\n+        if (!(vertx instanceof StreetVertex)) { continue; }\n+        if (vertx.getOutgoing().stream().noneMatch(edge ->\n+            edge instanceof StreetEdge && ((StreetEdge) edge).canTraverse(carTraverseModeSet))  ||\n+            vertx.getOutgoing().stream().noneMatch(edge ->\n+            edge instanceof StreetEdge && ((StreetEdge) edge).canTraverse(walkTraverseModeSet))\n+        ) {\n+          continue;\n+        }\n+\n+        Point p = GeometryUtils.getGeometryFactory().createPoint(vertx.getCoordinate());\n+        if (flexStopLocation.getGeometry().disjoint(p)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk2NTA1", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481896505", "createdAt": "2020-09-03T14:28:06Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyODowNlrOHMpQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyODowNlrOHMpQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMTAwOA==", "bodyText": "Document filters and link to trip types", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483021008", "createdAt": "2020-09-03T14:28:06Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/FlexTripsMapper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opentripplanner.ext.flex;\n+\n+import org.opentripplanner.ext.flex.trip.ScheduledDeviatedTrip;\n+import org.opentripplanner.ext.flex.trip.UnscheduledTrip;\n+import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.TripStopTimes;\n+import org.opentripplanner.model.impl.OtpTransitServiceBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static org.onebusaway.gtfs.model.StopTime.MISSING_VALUE;\n+\n+public class FlexTripsMapper {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(FlexTripsMapper.class);\n+\n+  static public void createFlexTrips(OtpTransitServiceBuilder builder) {\n+    TripStopTimes stopTimesByTrip = builder.getStopTimesSortedByTrip();\n+\n+    final int tripSize = stopTimesByTrip.size();\n+    int tripCount = 0;\n+\n+    for (org.opentripplanner.model.Trip trip : stopTimesByTrip.keys()) {\n+      if (++tripCount % 100000 == 0) {\n+        LOG.debug(\"Mapped StopTimes for flex trips {}/{}\", tripCount, tripSize);\n+      }\n+\n+      /* Fetch the stop times for this trip. Copy the list since it's immutable. */\n+      List<StopTime> stopTimes = new ArrayList<>(stopTimesByTrip.get(trip));\n+\n+      if (isUnscheduledTrip(stopTimes)) {\n+        if (stopTimes.size() == 2) {\n+          // TODO: Drop this restriction after time handling and ride times are defined\n+          builder.getFlexTripsById().add(new UnscheduledTrip(trip, stopTimes));\n+        }\n+      } else if (isScheduledFlexTrip(stopTimes)) {\n+        builder.getFlexTripsById().add(new ScheduledDeviatedTrip(trip, stopTimes));\n+      } else if (hasContinuousStops(stopTimes)) {\n+        // builder.getFlexTripsById().add(new ContinuousPickupDropOffTrip(trip, stopTimes));\n+      }\n+    }\n+  }\n+\n+  private static boolean isUnscheduledTrip(List<StopTime> stopTimes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk3NTI1", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-481897525", "createdAt": "2020-09-03T14:29:06Z", "commit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyOTowNlrOHMpTog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyOTowNlrOHMpTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMTczMA==", "bodyText": "use new type of progress tracker", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r483021730", "createdAt": "2020-09-03T14:29:06Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/flex/FlexTripsMapper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opentripplanner.ext.flex;\n+\n+import org.opentripplanner.ext.flex.trip.ScheduledDeviatedTrip;\n+import org.opentripplanner.ext.flex.trip.UnscheduledTrip;\n+import org.opentripplanner.model.Stop;\n+import org.opentripplanner.model.StopTime;\n+import org.opentripplanner.model.TripStopTimes;\n+import org.opentripplanner.model.impl.OtpTransitServiceBuilder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static org.onebusaway.gtfs.model.StopTime.MISSING_VALUE;\n+\n+public class FlexTripsMapper {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(FlexTripsMapper.class);\n+\n+  static public void createFlexTrips(OtpTransitServiceBuilder builder) {\n+    TripStopTimes stopTimesByTrip = builder.getStopTimesSortedByTrip();\n+\n+    final int tripSize = stopTimesByTrip.size();\n+    int tripCount = 0;\n+\n+    for (org.opentripplanner.model.Trip trip : stopTimesByTrip.keys()) {\n+      if (++tripCount % 100000 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3230f4e1fa8604da5c89cf09c0db5bfa79b51a3a", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3230f4e1fa8604da5c89cf09c0db5bfa79b51a3a", "committedDate": "2020-09-08T06:57:02Z", "message": "Add support for graph building with flex locations and trips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40bf6002f791257df6069f62e415439f64f52a4d", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/40bf6002f791257df6069f62e415439f64f52a4d", "committedDate": "2020-09-08T07:41:27Z", "message": "Review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9d48803374e464d81148e75c9cecd7214a9e46", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ee9d48803374e464d81148e75c9cecd7214a9e46", "committedDate": "2020-09-08T07:46:06Z", "message": "Extract stoptimes to separate classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5e5cbc24f7f863df384498f9e10788699ea559", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dc5e5cbc24f7f863df384498f9e10788699ea559", "committedDate": "2020-09-08T08:14:15Z", "message": "Add Javadoc"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7058cae7e98588242bb641040b8290f04287b8f8", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7058cae7e98588242bb641040b8290f04287b8f8", "committedDate": "2020-09-03T09:46:03Z", "message": "Merge branch 'dev-2.x' into flex-upstream-graph-build"}, "afterCommit": {"oid": "dc5e5cbc24f7f863df384498f9e10788699ea559", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dc5e5cbc24f7f863df384498f9e10788699ea559", "committedDate": "2020-09-08T08:14:15Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ffd0b90aee7b39471f38728539429c7c936d0ea", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3ffd0b90aee7b39471f38728539429c7c936d0ea", "committedDate": "2020-09-08T09:40:11Z", "message": "Fix brackets and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13bc6b1efacc60225d2db72316d05bb405358057", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/13bc6b1efacc60225d2db72316d05bb405358057", "committedDate": "2020-09-08T09:42:49Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTcwNzM1", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-483970735", "createdAt": "2020-09-08T09:45:45Z", "commit": {"oid": "3ffd0b90aee7b39471f38728539429c7c936d0ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NTo0NVrOHOVStA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NTo0NVrOHOVStA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5MDk2NA==", "bodyText": "We could add a method, boolean canTranverse(TraverseMode traverseMode) in StreetEdge", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#discussion_r484790964", "createdAt": "2020-09-08T09:45:45Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/vertextype/StreetVertex.java", "diffHunk": "@@ -65,4 +71,18 @@ public I18NString getIntersectionName(Locale locale) {\n         }\n         return calculatedName;\n     }\n+\n+    public boolean isConnectedToWalkingEdge() {\n+        return this.getOutgoing().stream().anyMatch(edge ->\n+            edge instanceof StreetEdge && ((StreetEdge) edge).canTraverse(WALK_TRAVERSE_MODE_SET));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffd0b90aee7b39471f38728539429c7c936d0ea"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5f09d0baa08b0df442bc76d733e97ee5316bf1", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4e5f09d0baa08b0df442bc76d733e97ee5316bf1", "committedDate": "2020-09-08T09:53:11Z", "message": "Use getPermission on StreetEdge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTg2Njkz", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3173#pullrequestreview-483986693", "createdAt": "2020-09-08T10:05:55Z", "commit": {"oid": "4e5f09d0baa08b0df442bc76d733e97ee5316bf1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0745b96326f2ab41e5d9809b19fb256028e993", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/be0745b96326f2ab41e5d9809b19fb256028e993", "committedDate": "2020-09-08T10:10:23Z", "message": "Merge branch 'dev-2.x' into flex-upstream-graph-build"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1964, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}