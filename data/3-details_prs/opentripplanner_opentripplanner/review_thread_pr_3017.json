{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTkzNDMw", "number": 3017, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNDoxNlrODr9ycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNTo0OFrODr90WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDI3Njk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/graph/GraphRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNDoxNlrOF8nKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjozODo1NFrOF8vVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDUxMg==", "bodyText": "We should find a more descriptive name and add Javadoc", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399100512", "createdAt": "2020-03-27T08:24:16Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/GraphRepository.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.opentripplanner.routing.graph;\n+\n+import org.opentripplanner.datastore.DataSource;\n+import org.opentripplanner.standalone.config.BuildConfig;\n+import org.opentripplanner.standalone.config.RouterConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GraphRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0MTIyMg==", "bodyText": "We discussed this - repository does seem to be the right abstraction but some readers might not make the connection. So Javadoc will give a very short statement of what it does, and maybe a link to an explanation. As a repository it should also contain the logic for loading (not just saving) Graphs from DataSources.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399141222", "createdAt": "2020-03-27T09:39:54Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/GraphRepository.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.opentripplanner.routing.graph;\n+\n+import org.opentripplanner.datastore.DataSource;\n+import org.opentripplanner.standalone.config.BuildConfig;\n+import org.opentripplanner.standalone.config.RouterConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GraphRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDUxMg=="}, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzNDMxMQ==", "bodyText": "About the GraphRepository and the SerializedGraphObject: I think the best solution is to merge the Repository into the SerializedGraph. I think that is better, since we do not have the concept of a Repository elsewhere in OTP. We have DataSources as a \u201cthing\u201d, and introducing Repositories will slightly overlap.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399234311", "createdAt": "2020-03-27T12:38:54Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/graph/GraphRepository.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.opentripplanner.routing.graph;\n+\n+import org.opentripplanner.datastore.DataSource;\n+import org.opentripplanner.standalone.config.BuildConfig;\n+import org.opentripplanner.standalone.config.RouterConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class GraphRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDUxMg=="}, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDI3OTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNTowM1rOF8nL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNzozNVrOF8xDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDg5MQ==", "bodyText": "We should discuss whether we want to allow embedding configuration at all.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399100891", "createdAt": "2020-03-27T08:25:03Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -50,9 +56,60 @@\n \n     private final Collection<Edge> edges;\n \n-    public SerializedGraphObject(Graph graph) {\n+    /** The config JSON used to build this graph. Allows checking whether the configuration has changed. */\n+    public final BuildConfig buildConfig;\n+\n+    /** Embed a router configuration inside the graph, for starting up with a single file. */\n+    public final RouterConfig routerConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyODYyOQ==", "bodyText": "We discussed and decided embedding configuration is useful, but realized some router-config entries are probably used during graph build. This is probably unavoidable, so the distinction between the two configuration files is lost. We should probably merge them.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399128629", "createdAt": "2020-03-27T09:18:00Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -50,9 +56,60 @@\n \n     private final Collection<Edge> edges;\n \n-    public SerializedGraphObject(Graph graph) {\n+    /** The config JSON used to build this graph. Allows checking whether the configuration has changed. */\n+    public final BuildConfig buildConfig;\n+\n+    /** Embed a router configuration inside the graph, for starting up with a single file. */\n+    public final RouterConfig routerConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDg5MQ=="}, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MjUzOQ==", "bodyText": "I added a new issue for this: #3020", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399262539", "createdAt": "2020-03-27T13:27:35Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -50,9 +56,60 @@\n \n     private final Collection<Edge> edges;\n \n-    public SerializedGraphObject(Graph graph) {\n+    /** The config JSON used to build this graph. Allows checking whether the configuration has changed. */\n+    public final BuildConfig buildConfig;\n+\n+    /** Embed a router configuration inside the graph, for starting up with a single file. */\n+    public final RouterConfig routerConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDg5MQ=="}, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDI4MTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNTo0OFrOF8nNTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNTo0OFrOF8nNTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTI2Mw==", "bodyText": "Class name is not needed when calling method on same class.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3017#discussion_r399101263", "createdAt": "2020-03-27T08:25:48Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -50,9 +56,60 @@\n \n     private final Collection<Edge> edges;\n \n-    public SerializedGraphObject(Graph graph) {\n+    /** The config JSON used to build this graph. Allows checking whether the configuration has changed. */\n+    public final BuildConfig buildConfig;\n+\n+    /** Embed a router configuration inside the graph, for starting up with a single file. */\n+    public final RouterConfig routerConfig;\n+\n+    public SerializedGraphObject(Graph graph, BuildConfig buildConfig, RouterConfig routerConfig) {\n         this.graph = graph;\n         this.edges = graph.getEdges();\n+        this.buildConfig = buildConfig;\n+        this.routerConfig = routerConfig;\n+    }\n+\n+    public static void save(Graph graph, BuildConfig buildConfig, RouterConfig routerConfig, DataSource graphSource) {\n+        new SerializedGraphObject(graph,buildConfig, routerConfig).save(graphSource);\n+    }\n+\n+    public static SerializedGraphObject load(DataSource source) {\n+        return load(source.asInputStream(), source.path());\n+    }\n+\n+    public static Graph load(File file) {\n+        try {\n+            SerializedGraphObject serObj = SerializedGraphObject.load(\n+                    new FileInputStream(file),\n+                    file.getAbsolutePath()\n+            );\n+            return serObj == null ? null : serObj.graph;\n+        } catch (FileNotFoundException e) {\n+            LOG.error(\"Graph file not found: \" + file, e);\n+            throw new OtpAppException(e.getMessage());\n+        }\n+    }\n+\n+    public static SerializedGraphObject load(InputStream inputStream, String sourceDescription) {\n+        // TODO store version information, halt load if versions mismatch\n+        try(inputStream) {\n+            LOG.info(\"Reading graph from '{}'\", sourceDescription);\n+            Input input = new Input(inputStream);\n+            Kryo kryo = SerializedGraphObject.makeKryo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdbe64e9a8358024dcc07c4c4c0669fcc0f887ff"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1795, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}