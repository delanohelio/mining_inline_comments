{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzOTUxNzg2", "number": 2996, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTowODo0MlrODlV0Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozNzo0OVrODlWdKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDgxMzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/util/ProgressTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTowODo0MlrOFyLY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTowODo0MlrOFyLY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1OTc0Mw==", "bodyText": "I would rename this to something like quietPeriodMilliseconds, because it doesn't ensure an update every M milliseconds, it silences updates for that long.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388159743", "createdAt": "2020-03-05T09:08:42Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/util/ProgressTracker.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.opentripplanner.util;\n+\n+import java.util.function.BiConsumer;\n+\n+\n+/**\n+ * The progress tracker notify the caller based on 'time' and a 'counter'.\n+ * <p>\n+ * The 'counter' is used to notify the caller for each percent(1%) it the total number of\n+ * steps is more than 100. If the number steps is less than 100 the caller is notified every time.\n+ * <p>\n+ * To avoid the caller from being notified to often, the tracker also uses a 'timer'. The\n+ * 'timer' prevent notification unless a minimum amount of time is passed since last time the\n+ * caller was notified.\n+ * <p>\n+ * Both the 'counter' and the 'timer' constraint must pass for the caller to be notified.\n+ */\n+public class ProgressTracker {\n+    private final int dStep;\n+    private final int size;\n+    private final long notifyEveryMillisecond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccbb682eaa8f3d5b9dc93bf6be0db24c719b6ec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg1MTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/common/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToxOToyMVrOFyLv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToxOToyMVrOFyLv_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NTYyOQ==", "bodyText": "These are not in use", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388165629", "createdAt": "2020-03-05T09:19:21Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/common/Message.java", "diffHunk": "@@ -19,8 +19,16 @@\n     NO_TRANSIT_TIMES(406),\n     REQUEST_TIMEOUT(408),\n     BOGUS_PARAMETER(413),\n-    GEOCODE_FROM_NOT_FOUND(440),\n-    GEOCODE_TO_NOT_FOUND(450),\n+    /**\n+     * The request 'from' location is not found. This can also mean that there is no street close\n+     * to the given coordinates, no stops nearby. Change the from field and try again.\n+     */\n+    FROM_NOT_FOUND(440),\n+    /**\n+     * The request 'to' location is not found. This can also mean that there is no street close to\n+     * the given coordinates, no stops nearby. Change the from field and try again.\n+     */\n+    TO_NOT_FOUND(450),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382beb48e7ee0d06a7404e1a4736c0601c71499"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDg4MjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/model/base/ToStringBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyODowMlrOFyMDCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyODowMlrOFyMDCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MDUwNw==", "bodyText": "Go back to the T.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388170507", "createdAt": "2020-03-05T09:28:02Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/model/base/ToStringBuilder.java", "diffHunk": "@@ -92,27 +122,32 @@ public ToStringBuilder addDuration(String name, Integer durationSeconds) {\n \n     @Override\n     public String toString() {\n-        if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n-        sb.append(\"}\");\n+        if(includeMetadata) {\n+            if(!unsetFields.isEmpty()) { addIt(\"NOT_SET\", unsetFields.toString()); }\n+            sb.append(\"}\");\n+        }\n         return sb.toString();\n     }\n \n-    private <T> ToStringBuilder addIfNotNull(String name, T value) {\n+    private <S> ToStringBuilder addIfNotNull(String name, S value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382beb48e7ee0d06a7404e1a4736c0601c71499"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDkwMDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzowMVrOFyMOJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozMzowMVrOFyMOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MzM0OQ==", "bodyText": "Rename exception", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388173349", "createdAt": "2020-03-05T09:33:01Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -299,4 +301,21 @@ private double calculateDistanceMaxLimit() {\n \n         return limit;\n     }\n+\n+    private void verifyEgressAccess(\n+            RoutingRequest request,\n+            Map<?,?> access,\n+            Map<?,?> egress\n+    ) {\n+        boolean accessExist = !access.isEmpty();\n+        boolean egressExist = !egress.isEmpty();\n+\n+        if(accessExist && egressExist) { return; }\n+\n+        List<String> missingPlaces = new ArrayList<>();\n+        if(!accessExist) { missingPlaces.add(request.from.toString()); }\n+        if(!egressExist) { missingPlaces.add(request.to.toString()); }\n+\n+        throw new VertexNotFoundException(missingPlaces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382beb48e7ee0d06a7404e1a4736c0601c71499"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDkxODE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozNzo0OVrOFyMYrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozNzo0OVrOFyMYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NjA0Ng==", "bodyText": "Remove methods with default values", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2996#discussion_r388176046", "createdAt": "2020-03-05T09:37:49Z", "author": {"login": "t2gran"}, "path": "src/test/java/org/opentripplanner/model/base/ValueObjectToStringBuilderTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.opentripplanner.model.base;\n+\n+import org.junit.Test;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ValueObjectToStringBuilderTest {\n+    private enum  AEnum { A }\n+    private static class Foo {\n+        int a;\n+        String b;\n+\n+        public Foo(int a, String b) {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ValueObjectToStringBuilder.of()\n+                    .addNum(a, 0)\n+                    .addStr(b)\n+                    .toString();\n+        }\n+    }\n+\n+    private ValueObjectToStringBuilder subject() { return ValueObjectToStringBuilder.of(); }\n+\n+    @Test\n+    public void addNum() {\n+        assertEquals(\"3.0\", subject().addNum(3.0000000d).toString());\n+        assertEquals(\"3.0\", subject().addNum(3.0000000f).toString());\n+        assertEquals(\"3\", subject().addNum(3).toString());\n+        assertEquals(\"3\", subject().addNum(3L).toString());\n+    }\n+\n+    @Test\n+    public void testAddNumWithDefaults() {\n+        assertEquals(\n+                \"3.0\",\n+                subject()\n+                        .addNum(4d, 4d)\n+                        .addNum(3d, 2d)\n+                        .addNum(-1d, -1d)\n+                        .toString()\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2382beb48e7ee0d06a7404e1a4736c0601c71499"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1777, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}