{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzU4NDIx", "number": 3002, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDoyNjowM1rODtCyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDoyNjowM1rODtCyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTU4MTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/ReverseSlackProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDoyNjowM1rOF-PL1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDoyNjowM1rOF-PL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwNDgyMQ==", "bodyText": "reverseBoardSlack rather than revere", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3002#discussion_r400804821", "createdAt": "2020-03-31T10:26:03Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/ReverseSlackProvider.java", "diffHunk": "@@ -12,31 +13,39 @@\n  *\n  * @param <T> The TripSchedule type defined by the user of the raptor API.\n  */\n-public final class ReverseSlackProvider<T extends RaptorTripSchedule> implements SlackProvider<T> {\n+public final class ReverseSlackProvider<T extends RaptorTripSchedule> implements SlackProvider {\n \n-    private final int boardSlack;\n-    //private boolean ignoreTransferSlack;\n+    private final RaptorSlackProvider source;\n+    private boolean ignoreTransferSlack = true;\n+    private int reverseAlightSlack;\n+    private int revereBoardSlack;\n \n-    public ReverseSlackProvider(int boardSlack, WorkerLifeCycle lifeCycle) {\n-        this.boardSlack = boardSlack;\n-        //lifeCycle.onPrepareForNextRound(this::notifyNewRound);\n+    public ReverseSlackProvider(RaptorSlackProvider source, WorkerLifeCycle lifeCycle) {\n+        this.source = source;\n+        lifeCycle.onPrepareForNextRound(this::notifyNewRound);\n     }\n \n-    public final void notifyNewRound(int round) {\n-        //ignoreTransferSlack = round < 2;\n+    public void notifyNewRound(int round) {\n+        ignoreTransferSlack = round < 2;\n     }\n \n     @Override\n-    public final void setCurrentPattern(RaptorTripPattern pattern) { }\n+    public void setCurrentPattern(RaptorTripPattern pattern) {\n+        this.revereBoardSlack = source.alightSlack(pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b0b4c6e688dcf1c09febeb52d96169d4c902bb"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1779, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}