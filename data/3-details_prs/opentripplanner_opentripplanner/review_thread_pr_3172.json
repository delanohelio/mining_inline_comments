{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODQ5ODU3", "number": 3172, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo1N1rOEhWB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NTowOFrOElATaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5Mzg1OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo1N1rOHOm7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo1N1rOHOm7MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTg1Nw==", "bodyText": "Is it time to remove this TODO?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485079857", "createdAt": "2020-09-08T17:21:57Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "diffHunk": "@@ -38,17 +41,21 @@ public static GraphQLInterfaceType create(\n             .build())\n         .typeResolver(typeResolutionEnvironment -> {\n           Object o = typeResolutionEnvironment.getObject();\n+          GraphQLSchema schema = typeResolutionEnvironment.getSchema();\n \n           // TODO OTP2 - Add support for Station, osv", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAwNzE2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyNTozNVrOHOnDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoyODo1NVrOHPo01Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTk2Ng==", "bodyText": "Why are these made none type safe?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485081966", "createdAt": "2020-09-08T17:25:35Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "diffHunk": "@@ -38,17 +41,21 @@ public static GraphQLInterfaceType create(\n             .build())\n         .typeResolver(typeResolutionEnvironment -> {\n           Object o = typeResolutionEnvironment.getObject();\n+          GraphQLSchema schema = typeResolutionEnvironment.getSchema();\n \n           // TODO OTP2 - Add support for Station, osv\n \n           if (o instanceof Stop) {\n-            return (GraphQLObjectType) quayType;\n+            return schema.getObjectType(\"Quay\");\n+          }\n+          if (o instanceof MonoOrMultiModalStation) {\n+            return schema.getObjectType(\"StopPlace\");\n           }\n           if (o instanceof BikeRentalStation) {\n-            return (GraphQLObjectType) bikeRentalStationType;\n+            return schema.getObjectType(\"BikeRentalStation\");\n           }\n           if (o instanceof BikePark) {\n-            return (GraphQLObjectType) bikeParkType;\n+            return schema.getObjectType(\"BikePark\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNTg5OA==", "bodyText": "Passing in the type itself in the constructor does not work, as the type has not been created yet and you need the actual type and not just a reference to it. That is why I get the type from the schema. This also follows how it is done in the LegacyGraphQLNodeTypeResolver.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485505898", "createdAt": "2020-09-09T10:26:11Z", "author": {"login": "gmellemstrand"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "diffHunk": "@@ -38,17 +41,21 @@ public static GraphQLInterfaceType create(\n             .build())\n         .typeResolver(typeResolutionEnvironment -> {\n           Object o = typeResolutionEnvironment.getObject();\n+          GraphQLSchema schema = typeResolutionEnvironment.getSchema();\n \n           // TODO OTP2 - Add support for Station, osv\n \n           if (o instanceof Stop) {\n-            return (GraphQLObjectType) quayType;\n+            return schema.getObjectType(\"Quay\");\n+          }\n+          if (o instanceof MonoOrMultiModalStation) {\n+            return schema.getObjectType(\"StopPlace\");\n           }\n           if (o instanceof BikeRentalStation) {\n-            return (GraphQLObjectType) bikeRentalStationType;\n+            return schema.getObjectType(\"BikeRentalStation\");\n           }\n           if (o instanceof BikePark) {\n-            return (GraphQLObjectType) bikeParkType;\n+            return schema.getObjectType(\"BikePark\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTk2Ng=="}, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1OTU3Mw==", "bodyText": "Ok, would like to add that as a comment?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r486159573", "createdAt": "2020-09-10T08:28:55Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceInterfaceType.java", "diffHunk": "@@ -38,17 +41,21 @@ public static GraphQLInterfaceType create(\n             .build())\n         .typeResolver(typeResolutionEnvironment -> {\n           Object o = typeResolutionEnvironment.getObject();\n+          GraphQLSchema schema = typeResolutionEnvironment.getSchema();\n \n           // TODO OTP2 - Add support for Station, osv\n \n           if (o instanceof Stop) {\n-            return (GraphQLObjectType) quayType;\n+            return schema.getObjectType(\"Quay\");\n+          }\n+          if (o instanceof MonoOrMultiModalStation) {\n+            return schema.getObjectType(\"StopPlace\");\n           }\n           if (o instanceof BikeRentalStation) {\n-            return (GraphQLObjectType) bikeRentalStationType;\n+            return schema.getObjectType(\"BikeRentalStation\");\n           }\n           if (o instanceof BikePark) {\n-            return (GraphQLObjectType) bikeParkType;\n+            return schema.getObjectType(\"BikePark\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MTk2Ng=="}, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAyNDE1OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozMDoyM1rOHOnOIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoyNzozMFrOHPA-AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDcwNw==", "bodyText": "I would have pushed the creation of the Envelope into the getBikeRentalStationForEnvelope method, passing in the 4 coordinates instead. Of cause this is an error in the API design not wrapping the coordinates in its own object of having a Envelop API type. Something to remember for the a new API.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485084707", "createdAt": "2020-09-08T17:30:23Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -1595,7 +1489,16 @@ private GraphQLSchema create() {\n                 .name(\"maximumLongitude\")\n                 .type(Scalars.GraphQLFloat)\n                 .build())\n-            .dataFetcher(environment -> Collections.emptyList())\n+            .dataFetcher(environment -> GqlUtil\n+                .getRoutingService(environment)\n+                .getBikerentalStationService()\n+                .getBikeRentalStationForEnvelope(new Envelope(new Coordinate(\n+                    environment.getArgument(\"minimumLongitude\"),\n+                    environment.getArgument(\"minimumLatitude\")\n+                ), new Coordinate(\n+                    environment.getArgument(\"maximumLongitude\"),\n+                    environment.getArgument(\"maximumLatitude\")\n+                ))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUwNjU2MQ==", "bodyText": "That's a fair point. I can change the method parameters for now, and we can think about how to do it in the new API.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485506561", "createdAt": "2020-09-09T10:27:30Z", "author": {"login": "gmellemstrand"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -1595,7 +1489,16 @@ private GraphQLSchema create() {\n                 .name(\"maximumLongitude\")\n                 .type(Scalars.GraphQLFloat)\n                 .build())\n-            .dataFetcher(environment -> Collections.emptyList())\n+            .dataFetcher(environment -> GqlUtil\n+                .getRoutingService(environment)\n+                .getBikerentalStationService()\n+                .getBikeRentalStationForEnvelope(new Envelope(new Coordinate(\n+                    environment.getArgument(\"minimumLongitude\"),\n+                    environment.getArgument(\"minimumLatitude\")\n+                ), new Coordinate(\n+                    environment.getArgument(\"maximumLongitude\"),\n+                    environment.getArgument(\"maximumLatitude\")\n+                ))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NDcwNw=="}, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 539}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAzNDA2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/mapping/TransmodelMappingUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozMzoyNlrOHOnUWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozMzoyNlrOHOnUWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4NjI5Ng==", "bodyText": "I am not sure if the type qualification is needed if this is moved into a mapper class...", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485086296", "createdAt": "2020-09-08T17:33:26Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/mapping/TransmodelMappingUtil.java", "diffHunk": "@@ -38,26 +38,26 @@ public ServiceDate secondsSinceEpochToServiceDate(Long secondsSinceEpoch) {\n     }\n \n \n-    // public List<PlaceType> mapPlaceTypes(List<TransmodelPlaceType> inputTypes) {\n-    //     if (inputTypes == null) {\n-    //         return null;\n-    //     }\n-    //\n-    //     return inputTypes.stream().map(pt -> mapPlaceType(pt)).distinct().collect(Collectors.toList());\n-    // }\n+     public static List<org.opentripplanner.routing.graphfinder.PlaceType> mapPlaceTypes(List<TransmodelPlaceType> inputTypes) {\n+         if (inputTypes == null) {\n+             return null;\n+         }\n \n-    private PlaceType mapPlaceType(TransmodelPlaceType transmodelType){\n+         return inputTypes.stream().map(TransmodelMappingUtil::mapPlaceType).distinct().collect(Collectors.toList());\n+     }\n+\n+    private static org.opentripplanner.routing.graphfinder.PlaceType mapPlaceType(TransmodelPlaceType transmodelType){\n         if (transmodelType!=null) {\n             switch (transmodelType) {\n                 case QUAY:\n                 case STOP_PLACE:\n-                    return PlaceType.STOP;\n+                    return org.opentripplanner.routing.graphfinder.PlaceType.STOP;\n                 case BICYCLE_RENT:\n-                    return PlaceType.BICYCLE_RENT;\n+                    return org.opentripplanner.routing.graphfinder.PlaceType.BICYCLE_RENT;\n                 case BIKE_PARK:\n-                    return PlaceType.BIKE_PARK;\n+                    return org.opentripplanner.routing.graphfinder.PlaceType.BIKE_PARK;\n                 case CAR_PARK:\n-                    return PlaceType.CAR_PARK;\n+                    return org.opentripplanner.routing.graphfinder.PlaceType.CAR_PARK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA3OTU0OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceAtDistanceType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NjozNFrOHOnwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0NjozNFrOHOnwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MzM5NA==", "bodyText": "FYI: I plan to create a type-safe static resolver method for the ((PlaceAtDistance) environment.getSource()) like the:\nprivate static Trip trip(DataFetchingEnvironment environment) {\n    return environment.getSource();\n  }\n\nin ServiceJourneyType. It makes the code a bit easier to read, but I have not got around to refactor everything to use it. I hope extracting the data fetchers will help when we switch to a schema based approach later.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485093394", "createdAt": "2020-09-08T17:46:34Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/stop/PlaceAtDistanceType.java", "diffHunk": "@@ -20,16 +22,16 @@ public static GraphQLObjectType create(Relay relay) {\n                   .dataFetcher(environment -> relay.toGlobalId(NAME, \"N/A\"))\n                   .build()\n           )\n-//                .field(GraphQLFieldDefinition.newFieldDefinition()\n-//                        .name(\"place\")\n-//                        .type(placeInterface)\n-//                        .dataFetcher(environment -> ((GraphIndex.PlaceAndDistance) environment.getSource()).place)\n-//                        .build())\n-//                .field(GraphQLFieldDefinition.newFieldDefinition()\n-//                        .name(\"distance\")\n-//                        .type(Scalars.GraphQLInt)\n-//                        .dataFetcher(environment -> ((GraphIndex.PlaceAndDistance) environment.getSource()).distance)\n-//                        .build())\n+                .field(GraphQLFieldDefinition.newFieldDefinition()\n+                        .name(\"place\")\n+                        .type(placeInterface)\n+                        .dataFetcher(environment -> ((PlaceAtDistance) environment.getSource()).place)\n+                        .build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA5Nzc2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MTozOFrOHOn67w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo1MTozOFrOHOn67w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5NjE3NQ==", "bodyText": "Can this be moved somewhere else? I would like this class to the \"index\" to the Schema types - wiring the Schema together. Mapping, resolving and fetching data should be some where else.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485096175", "createdAt": "2020-09-08T17:51:38Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -1745,43 +1648,51 @@ private GraphQLSchema create() {\n \n \n \n+    /**\n+     * Create PlaceAndDistance objects for all unique stopPlaces according to specified multiModalMode if client has requested stopPlace type.\n+     *\n+     * Necessary because nearest does not support StopPlace (stations), so we need to fetch quays instead and map the response.\n+     *\n+     * Remove PlaceAndDistance objects for quays if client has not requested these.\n+     */\n+    private List<PlaceAtDistance> convertQuaysToStopPlaces(List<TransmodelPlaceType> placeTypes, List<PlaceAtDistance> places, String multiModalMode, RoutingService routingService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 554}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDEzODk2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowNDowN1rOHOoUgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowNDowN1rOHOoUgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwMjcyMw==", "bodyText": "I think we should rename this type to InputPlaceIds, the name here is bad it does not reflect what it is, but the roll it plays in the one situation it is used. The name is defined in a global space and the name is fare too generic.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r485102723", "createdAt": "2020-09-08T18:04:07Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -680,34 +697,34 @@ private GraphQLSchema create() {\n //                        .build())\n //                .build();\n \n-//        GraphQLInputObjectType filterInputType = GraphQLInputObjectType.newInputObject()\n-//                .name(\"InputFilters\")\n-//                .field(GraphQLInputObjectField.newInputObjectField()\n-//                        .name(\"quays\")\n-//                        .description(\"Quays to include by id.\")\n-//                        .type(new GraphQLList(Scalars.GraphQLString))\n-//                        .build())\n-//                .field(GraphQLInputObjectField.newInputObjectField()\n-//                        .name(\"lines\")\n-//                        .description(\"Lines to include by id.\")\n-//                        .type(new GraphQLList(Scalars.GraphQLString))\n-//                        .build())\n-//                .field(GraphQLInputObjectField.newInputObjectField()\n-//                        .name(\"bikeRentalStations\")\n-//                        .description(\"Bike rentals to include by id.\")\n-//                        .type(new GraphQLList(Scalars.GraphQLString))\n-//                        .build())\n-//                .field(GraphQLInputObjectField.newInputObjectField()\n-//                        .name(\"bikeParks\")\n-//                        .description(\"Bike parks to include by id.\")\n-//                        .type(new GraphQLList(Scalars.GraphQLString))\n-//                        .build())\n-//                .field(GraphQLInputObjectField.newInputObjectField()\n-//                        .name(\"carParks\")\n-//                        .description(\"Car parks to include by id.\")\n-//                        .type(new GraphQLList(Scalars.GraphQLString))\n-//                        .build())\n-//                .build();\n+        GraphQLInputObjectType filterInputType = GraphQLInputObjectType.newInputObject()\n+                .name(\"InputFilters\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62d2cb9148bb9237e3d6e01ede1e4e0c422f229"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzEzMTQ5OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozNDoxOVrOHRX-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozNDoxOVrOHRX-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4MDc4OQ==", "bodyText": "Include that this should never be set higher than walkReluctance since that would lead to walking down the line to avoid waiting.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r487980789", "createdAt": "2020-09-14T14:34:19Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -623,6 +623,12 @@ private GraphQLSchema create() {\n                         .type(Scalars.GraphQLFloat)\n                         .defaultValue(routing.request.walkReluctance)\n                         .build())\n+                .argument(GraphQLArgument.newArgument()\n+                        .name(\"waitReluctance\")\n+                        .description(\"Wait cost is multiplied by this value. Setting this to a value lower than 1 indicates that waiting is better than staying on a vehicle.\")\n+                        .type(Scalars.GraphQLFloat)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d085184e6ff8b49f2cff11970bcfb5bb63a76c2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjM3NzM5OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/DefaultRoutingRequestType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NTowOFrOHUQo-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NTowOFrOHUQo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjIwMg==", "bodyText": ".type(gqlUtil.doubleFunctionScalar)", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3172#discussion_r491006202", "createdAt": "2020-09-18T14:55:08Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/model/DefaultRoutingRequestType.java", "diffHunk": "@@ -401,6 +401,12 @@ private GraphQLObjectType createGraphQLType() {\n                         .type(Scalars.GraphQLBoolean)\n                         .dataFetcher(env -> request.geoidElevation)\n                         .build())\n+                .field(GraphQLFieldDefinition.newFieldDefinition()\n+                        .name(\"transitGeneralizedCostLimit\")\n+                        .description(\"A relative maximum limit for the generalized cost for transit itineraries. The limit is a linear function of the minimum generalized-cost.\")\n+                        .type(Scalars.GraphQLString)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a1336073ed85081884de0c460e0c1d81bba017"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1670, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}