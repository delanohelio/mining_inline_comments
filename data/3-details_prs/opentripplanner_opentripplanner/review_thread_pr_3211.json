{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjQ4NTY3", "number": 3211, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOEvz37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOEvz37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTY4NDMwOnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/siri/SiriTripPatternIdGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOHlAAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOHlAAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1OTQ3Nw==", "bodyText": "It would be good to have a comment explaining why unsynchronized increment-and-read is not problematic here. I see that this is called from one synchronized method, but also from one other unsynchronized method and it's not immediately obvious whether they can both run concurrently on different threads.\nOr to avoid placing lots of special conditions on use of this method it could just be synchronized (which has very low cost when there's no contention).", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211#discussion_r508559477", "createdAt": "2020-10-20T14:30:51Z", "author": {"login": "abyrd"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriTripPatternIdGenerator.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.opentripplanner.ext.siri;\n+\n+import org.opentripplanner.gtfs.GenerateTripPatternsOperation;\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.Route;\n+import org.opentripplanner.model.Trip;\n+\n+class SiriTripPatternIdGenerator {\n+  private int counter = 0;\n+\n+  /**\n+   * Generate unique trip pattern code for real-time added trip pattern. This function roughly\n+   * follows the format of {@link GenerateTripPatternsOperation#generateUniqueIdForTripPattern(Route, int)}.\n+   * <p>\n+   * The generator add a postfix 'RT' to indicate that this trip pattern is generated at REAL-TIME.\n+   */\n+  FeedScopedId generateUniqueTripPatternId(Trip trip) {\n+    Route route = trip.getRoute();\n+    FeedScopedId routeId = route.getId();\n+    String directionId = trip.getDirectionId();\n+    if( directionId == null) { directionId = \"\"; }\n+\n+    // OBA library uses underscore as separator, we're moving toward colon.\n+    String id = String.format(\"%s:%s:%03d:RT\", routeId.getId(), directionId, ++counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945184168355309126bbeb74919f6d3df1d37fa6"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1700, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}