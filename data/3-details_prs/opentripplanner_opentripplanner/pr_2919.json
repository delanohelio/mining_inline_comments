{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTk0MDQ3", "number": 2919, "title": "Faster TransitLayer realtime updater", "bodyText": "To be completed by pull request submitter:\n\n issue: #2918 \n roadmap: #2626 \n tests: No new tests added\n formatting: Have you followed the suggested code style?\n documentation: If you are adding a new configuration option, have you added an explanation to the configuration documentation tables and sections?\n changelog: add a bullet point to the changelog file with description and link to the linked issue\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap\n\nChanges in this pull request:\n\nRaptorTransitLayerGraphUpdater is replaced by the TransitLayerUpdater. Instead of using a regular GraphUpdater and mapping the entire TransitLayer periodically, the TransitLayerUpdater is run every time new realtime changes are committed to the Graph. It makes a copy of the TripPatternsForDate for each ServiceDate to be updated and then atomically replaces the HashMap entry for that date. The classes TripPatternMapper and TripPatternForDateMapper have been added and contains common mapping code between TransitLayerUpdater and TransitLayerMapper.\nServiceCodesRunningForDate is initialized in the GraphIndex and used for both the TransitLayerUpdater and TransitLayerMapper\nThe GraphUpdaterManager can return a list of waiting (not yet primed) updaters. This is used in the ActuatorAPI in order to show what is keeping it from returning the ready-status.\nRaptor TripPatterns now use the FeedScopedId of the original TripPattern as its id, instead of assigning an integer id to each TripPattern.\nKeep the original ids for TripPatterns in the case that they are already unique. This allows TripPatterns to be referenced later.\nVarious methods used for the realtime functionality now has FeedScopedId as a parameter instead of FeedId and Id as plain strings.\nAdd alert patches to legs in ItineraryMapper.\nVarious changes to the SIRI and TransmodelAPI sandbox extensions in order to enable more realtime functionality.", "createdAt": "2020-01-03T13:47:42Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919", "merged": true, "mergeCommit": {"oid": "775c28fff3cedce5cb3a042bf2114aab2602d130"}, "closed": true, "closedAt": "2020-01-28T12:43:03Z", "author": {"login": "gmellemstrand"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbyJunIAH2gAyMzU4OTk0MDQ3OmYxMDBkYmNmODZiNWMzZmFmN2M4MGE5NzNjNjU2MmE0MmViNDlkOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-wqXUgFqTM0OTM0MjI4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f100dbcf86b5c3faf7c80a973c6562a42eb49d96", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f100dbcf86b5c3faf7c80a973c6562a42eb49d96", "committedDate": "2019-12-20T08:31:12Z", "message": "Give each instance a unique ET-Client-Name to account for rate-limiting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d201ddac3c15c84001185497d3038b5908fa88", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/79d201ddac3c15c84001185497d3038b5908fa88", "committedDate": "2019-12-20T08:32:58Z", "message": "Added directDuration field to transmodel api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c3bfbdcc99c248e69574e83c473616c7a8fe750", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2c3bfbdcc99c248e69574e83c473616c7a8fe750", "committedDate": "2019-12-20T08:33:14Z", "message": "Initalize maps for request headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6925f9a3c9299ff14851200ed008240c754c3935", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6925f9a3c9299ff14851200ed008240c754c3935", "committedDate": "2019-12-20T08:50:02Z", "message": "Changed some string parameters to FeedScopeId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "438e2c67545331ecac580891b486aa31e508a0a3", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/438e2c67545331ecac580891b486aa31e508a0a3", "committedDate": "2019-12-20T08:51:13Z", "message": "Check for graphupdater readiness"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985be077736627fe3c6a090081d9a3f7c2805fe5", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/985be077736627fe3c6a090081d9a3f7c2805fe5", "committedDate": "2019-12-20T08:57:32Z", "message": "Add alert patches to legs in ItineraryMapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2077beb56ca8d81c509a2a6fa54846d4f7cb9f43", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2077beb56ca8d81c509a2a6fa54846d4f7cb9f43", "committedDate": "2019-12-20T08:58:08Z", "message": "Add situations to leg in transmodel api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26365a0b186c712b6355c76095e594de054ca48", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c26365a0b186c712b6355c76095e594de054ca48", "committedDate": "2019-12-20T09:02:01Z", "message": "Add back situations to all other elements in transmodel api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8a530109012a75c9277b1086aae57414a8af5e", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7a8a530109012a75c9277b1086aae57414a8af5e", "committedDate": "2019-12-20T09:57:40Z", "message": "Check for unique tripPattern ids also checks for null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1054077663726a4d04386d31b33c61ea0f9d86b0", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1054077663726a4d04386d31b33c61ea0f9d86b0", "committedDate": "2019-12-20T09:58:03Z", "message": "Better naming of methods in previous commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0563f40455054775f43a1a65bb46cddd38f2ca5b", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0563f40455054775f43a1a65bb46cddd38f2ca5b", "committedDate": "2019-12-20T09:58:18Z", "message": "Added reportType field to situations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db3175b15cd3be1e38b8b1d5f0ecf5003ce769e", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6db3175b15cd3be1e38b8b1d5f0ecf5003ce769e", "committedDate": "2019-12-20T09:58:32Z", "message": "Added null check to readiness endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1a1f5263d5ca597e7f963bb4a9d250ee4f5182c", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d1a1f5263d5ca597e7f963bb4a9d250ee4f5182c", "committedDate": "2019-12-20T10:19:20Z", "message": "Update RealtimeTransitLayer for each time TimetableSnapshot:commit is run instead\n    of periodically remapping the entire TranistLayer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c26e72d1cc6830ec9a9617968d77d37e9cb71f5c", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c26e72d1cc6830ec9a9617968d77d37e9cb71f5c", "committedDate": "2020-01-03T10:59:43Z", "message": "Extract common code for TransitLayerUpdater and TransitLayerMapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a27c042d37429da583f18e40a540bc6086ec274d", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a27c042d37429da583f18e40a540bc6086ec274d", "committedDate": "2020-01-03T12:03:23Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ebaf9656155325b6459f467d737cc57a6f66d73", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3ebaf9656155325b6459f467d737cc57a6f66d73", "committedDate": "2020-01-03T12:17:52Z", "message": "Updated changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead9429b6eb59095dc308e22f73745a03bdcda4a", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ead9429b6eb59095dc308e22f73745a03bdcda4a", "committedDate": "2020-01-06T12:15:38Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f65f4ca9cb131bc18940fb7ebe4bbdcc7b4326", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58f65f4ca9cb131bc18940fb7ebe4bbdcc7b4326", "committedDate": "2020-01-06T14:08:42Z", "message": "Make shallow copy of TransitLayer/tripPatternsForDate to make the realtimeTransitLayer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3980fde8e1f902258db6843c5499e8333988fbdb", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/3980fde8e1f902258db6843c5499e8333988fbdb", "committedDate": "2020-01-08T12:12:08Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81a5cf495862146200874fa87f2c5acaf46e7e53", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/81a5cf495862146200874fa87f2c5acaf46e7e53", "committedDate": "2020-01-10T07:36:17Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDAwNzI2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#pullrequestreview-341000726", "createdAt": "2020-01-10T08:00:24Z", "commit": {"oid": "81a5cf495862146200874fa87f2c5acaf46e7e53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowMDoyNFrOFcMidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODowMDoyNFrOFcMidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwOTg3Ng==", "bodyText": "This is dropping the feed scope, but I guess realtime sources are always matched to one specific feed so this is not needed, and in any case if we did want it we would use FeedScopedId instead of prepending another string.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#discussion_r365109876", "createdAt": "2020-01-10T08:00:24Z", "author": {"login": "abyrd"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriTripPatternCache.java", "diffHunk": "@@ -157,7 +157,7 @@ private String generateUniqueTripPatternCode(TripPattern tripPattern) {\n             counter++;\n         }\n         // OBA library uses underscore as separator, we're moving toward colon.\n-        String code = String.format(\"%s:%s:%s:rt#%d\", routeId.getFeedId(), routeId.getId(), direction, counter);\n+        String code = String.format(\"%s:%s:rt#%d\", routeId.getId(), direction, counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81a5cf495862146200874fa87f2c5acaf46e7e53"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8", "committedDate": "2020-01-10T12:29:22Z", "message": "Make a shallow copy of the realtimeTransitLayer before updating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e723c5c909c8e786098a326dbdeda92c1ad656ce", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e723c5c909c8e786098a326dbdeda92c1ad656ce", "committedDate": "2020-01-16T14:27:03Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1f16f58761bd0959e5c87e20c52421fb66b51b", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ca1f16f58761bd0959e5c87e20c52421fb66b51b", "committedDate": "2020-01-27T13:43:23Z", "message": "Merge branch 'dev-2.x' into otp2_fast_transitlayer_updater"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5Mjk1NDMz", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#pullrequestreview-349295433", "createdAt": "2020-01-28T11:13:23Z", "commit": {"oid": "7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxMzoyM1rOFihSZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToxODowM1rOFihaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTI4NA==", "bodyText": "The operation is atomic only in the sense that reference assignment is atomic in Java. Readers may already take for granted the low-level fact that pointer read-tearing cannot happen. What is important here is not so much that the reference write is atomic, but that the object is only \"published\" and visible to other threads after all writes are complete, and that the combined act of writing and publishing happens-before any reads.  Many people will associate the term \"atomic\" with this kind of update operations composed of two or more distinct actions.\nUnfortunately, although the reference assignment is atomic, I believe this whole update operation is not atomic, in the sense that if thread A writes to fields of object X before it shares a reference to X, thread Y may see the reference update before it sees the fields within the referenced object (and so on recursively into collections). In practice, in my experience I've never encountered outright failures with the approach of simply setting fields before revealing a reference to their containing object, but if I'm not mistaken the Java Memory Model does not guarantee this will work. Strictly speaking, the reading thread could see a partially initialized Map or even a null field. I will do some more research to design a truly correct mechanism for a single writer thread \"publishing\" completed objects to a pool of reader threads. That mechanism will be reused many times in different places, so it's good to perfect it. I think the main idea is only accessing the published reference through synchronized blocks, and setting final fields in a constructor may also be an important ingredient.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#discussion_r371741284", "createdAt": "2020-01-28T11:13:23Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/TransitLayerUpdater.java", "diffHunk": "@@ -23,15 +24,17 @@\n import static org.opentripplanner.routing.algorithm.raptor.transit.mappers.TripPatternMapper.mapOldTripPatternToRaptorTripPattern;\n \n /**\n- * Update the TransitLayer from a set of TimeTables. TripPatterns are matched on id and replaced\n- * by their updated versions. A list of TripPatternsForDate is copied from the TransitLayer for\n- * each relevant date, updated and then atomically replaced in the TransitLayer.\n+ * Update the TransitLayer from a set of TimeTables. A shallow copy is made of the TransitLayer\n+ * (this also includes a shallow copy of the TripPatternsForDate map). TripPatterns are matched on\n+ * id and replaced by their updated versions. The realtime TransitLayer is then switched out\n+ * with the updated copy in an atomic operation. This ensures that any TransitLayer that is\n+ * referenced from the Graph is never changed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTgxMw==", "bodyText": "Personally I would not make the shallow-copy method a constructor because it is tailored for a specific use case. I'd make a basic private all-fields constructor that does not transform any of its input parameters, then call that constructor from a factory method that makes a shallow copy of the one Map tripPatternsForDate. Then that factory method is specific to the use case, and can have a name like TransitLayer#copyForTripPatternUpdates. This is of course not critical now, since all constructor calls are for this purpose. It's more of a long-term style and maintenance issue.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#discussion_r371741813", "createdAt": "2020-01-28T11:14:39Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/TransitLayerUpdater.java", "diffHunk": "@@ -43,22 +46,25 @@\n                 tripPatternForDateMapCache = new HashMap<>();\n \n   public TransitLayerUpdater(\n-      TransitLayer transitLayer,\n+      Graph graph,\n       Map<ServiceDate, TIntSet> serviceCodesRunningForDate\n   ) {\n-    this.transitLayer = transitLayer;\n+    this.graph = graph;\n     this.serviceCodesRunningForDate = serviceCodesRunningForDate;\n   }\n \n   public void update(Set<Timetable> updatedTimetables) {\n-    if (transitLayer == null) { return; }\n+    // Make a shallow copy of the realtime transit layer\n+    TransitLayer realtimeTransitLayer = new TransitLayer(graph.realtimeTransitLayer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MzIzMw==", "bodyText": "Considering what I wrote above, I would change these comments to say \"The JMM guarantees reference assignment is atomic, but does not guarantee that the combined process of assigning field contents and publishing the reference is atomic. We should soon replace this assignment with a more strictly correct implementation.\"", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#discussion_r371743233", "createdAt": "2020-01-28T11:18:03Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/TransitLayerUpdater.java", "diffHunk": "@@ -99,11 +106,14 @@ public void update(Set<Timetable> updatedTimetables) {\n         }\n       }\n \n-      transitLayer.replaceTripPatternsForDate(\n+      realtimeTransitLayer.replaceTripPatternsForDate(\n           date,\n           new ArrayList<>(patternsForDateMap.values())\n       );\n \n+      // Switch out the reference with the updated transit layer. This is an atomic operation.\n+      graph.realtimeTransitLayer = realtimeTransitLayer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d570b9f1d0f4c1e32d8b3f646e8e2769c8f07e8"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5065a30f22e6525cd5830fdcdf88c9d35c3757ec", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5065a30f22e6525cd5830fdcdf88c9d35c3757ec", "committedDate": "2020-01-28T12:30:46Z", "message": "Synchronize getter and setter for realTimeTransitLayer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fa710a655a9f14fff4f9023c3e1a1cfc738d57f", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1fa710a655a9f14fff4f9023c3e1a1cfc738d57f", "committedDate": "2020-01-28T12:24:25Z", "message": "Synchronize getter and setter for realTimeTransitLayer"}, "afterCommit": {"oid": "5065a30f22e6525cd5830fdcdf88c9d35c3757ec", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5065a30f22e6525cd5830fdcdf88c9d35c3757ec", "committedDate": "2020-01-28T12:30:46Z", "message": "Synchronize getter and setter for realTimeTransitLayer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfff40c9b4613698e27ef04c38a2d13289f3f6a", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/dcfff40c9b4613698e27ef04c38a2d13289f3f6a", "committedDate": "2020-01-28T12:39:22Z", "message": "add a little javadoc about private fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzQyMjg3", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2919#pullrequestreview-349342287", "createdAt": "2020-01-28T12:39:57Z", "commit": {"oid": "dcfff40c9b4613698e27ef04c38a2d13289f3f6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2182, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}