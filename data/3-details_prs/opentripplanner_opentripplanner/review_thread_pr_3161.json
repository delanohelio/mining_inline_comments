{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjEzNDgz", "number": 3161, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0Nzo1MVrOEe40ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyNzowN1rOEf551Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODIzNjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjo0Nzo1MVrOHK0rcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzoyOToxOFrOHLvJjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDg5OA==", "bodyText": "My idea was that we should filter out all itineraries which are sorted to be after the first one which does not depart within the search window. That way we are guaranteed to return no worse itineraries than that one, and requiring the new search to include the first one removed.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3161#discussion_r481110898", "createdAt": "2020-09-01T12:47:51Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -71,15 +91,6 @@ public ItineraryFilter build() {\n             }\n         }\n \n-        // Sort list on {@code groupByP} in ascending order to keep as many of the elements in the\n-        // groups where the grouping parameter is relaxed as possible.\n-        List<GroupBySimilarity> groupBy = parameters.groupBySimilarity().stream()\n-            .sorted(Comparator.comparingDouble(o -> o.groupByP))\n-            .collect(Collectors.toList());\n-\n-        for (GroupBySimilarity it : groupBy) {\n-            filters.add(new GroupBySimilarLegsFilter(it.groupByP, it.approximateMinLimit));\n-        }\n \n         // Sort itineraries\n         filters.add(new OtpDefaultSortOrder(parameters.arriveBy()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee54a40002944b36727cf8d077f6840d2e814bad"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2ODg3Nw==", "bodyText": "Discussed ver Slack, no need to do this now.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3161#discussion_r482068877", "createdAt": "2020-09-02T13:29:18Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilterChainBuilder.java", "diffHunk": "@@ -71,15 +91,6 @@ public ItineraryFilter build() {\n             }\n         }\n \n-        // Sort list on {@code groupByP} in ascending order to keep as many of the elements in the\n-        // groups where the grouping parameter is relaxed as possible.\n-        List<GroupBySimilarity> groupBy = parameters.groupBySimilarity().stream()\n-            .sorted(Comparator.comparingDouble(o -> o.groupByP))\n-            .collect(Collectors.toList());\n-\n-        for (GroupBySimilarity it : groupBy) {\n-            filters.add(new GroupBySimilarLegsFilter(it.groupByP, it.approximateMinLimit));\n-        }\n \n         // Sort itineraries\n         filters.add(new OtpDefaultSortOrder(parameters.arriveBy()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTExMDg5OA=="}, "originalCommit": {"oid": "ee54a40002944b36727cf8d077f6840d2e814bad"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODg3NTMyOnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyMToxMVrOHMd5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyMjoyMlrOHMd8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDcyMw==", "bodyText": "getTrip might cause NPE", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3161#discussion_r482834723", "createdAt": "2020-09-03T09:21:11Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -2018,23 +2018,13 @@ public GraphQLObjectType createPlanType(\n                         .name(\"authority\")\n                         .description(\"For ride legs, the service authority used for this legs. For non-ride legs, null.\")\n                         .type(authorityType)\n-                        .dataFetcher(environment -> {\n-                          return GqlUtil.getRoutingService(environment)\n-                              .getAgencyForId(((Leg) environment.getSource()).agencyId);\n-                        })\n+                        .dataFetcher(environment -> ((Leg) environment.getSource()).getAgency())\n                         .build())\n                 .field(GraphQLFieldDefinition.newFieldDefinition()\n                         .name(\"operator\")\n                         .description(\"For ride legs, the operator used for this legs. For non-ride legs, null.\")\n                         .type(operatorType)\n-                        .dataFetcher(\n-                                environment -> {\n-                                    FeedScopedId tripId = ((Leg) environment.getSource()).tripId;\n-                                  return tripId == null ? null : GqlUtil\n-                                      .getRoutingService(environment)\n-                                        .getTripForId().get(tripId).getOperator();\n-                                }\n-                        )\n+                        .dataFetcher(environment -> ((Leg) environment.getSource()).getTrip().getOperator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f11c3a9085f34d539078bef18594e5f2d3b9f05"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNTU0MQ==", "bodyText": "Check if this is a transit leg?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3161#discussion_r482835541", "createdAt": "2020-09-03T09:22:22Z", "author": {"login": "hannesj"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLSchema.java", "diffHunk": "@@ -2018,23 +2018,13 @@ public GraphQLObjectType createPlanType(\n                         .name(\"authority\")\n                         .description(\"For ride legs, the service authority used for this legs. For non-ride legs, null.\")\n                         .type(authorityType)\n-                        .dataFetcher(environment -> {\n-                          return GqlUtil.getRoutingService(environment)\n-                              .getAgencyForId(((Leg) environment.getSource()).agencyId);\n-                        })\n+                        .dataFetcher(environment -> ((Leg) environment.getSource()).getAgency())\n                         .build())\n                 .field(GraphQLFieldDefinition.newFieldDefinition()\n                         .name(\"operator\")\n                         .description(\"For ride legs, the operator used for this legs. For non-ride legs, null.\")\n                         .type(operatorType)\n-                        .dataFetcher(\n-                                environment -> {\n-                                    FeedScopedId tripId = ((Leg) environment.getSource()).tripId;\n-                                  return tripId == null ? null : GqlUtil\n-                                      .getRoutingService(environment)\n-                                        .getTripForId().get(tripId).getOperator();\n-                                }\n-                        )\n+                        .dataFetcher(environment -> ((Leg) environment.getSource()).getTrip().getOperator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNDcyMw=="}, "originalCommit": {"oid": "8f11c3a9085f34d539078bef18594e5f2d3b9f05"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODkwMDA1OnYy", "diffSide": "LEFT", "path": "src/main/java/org/opentripplanner/api/mapping/LegMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyNzowN1rOHMeIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToyNzowN1rOHMeIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzODU2NQ==", "bodyText": "These are missing", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3161#discussion_r482838565", "createdAt": "2020-09-03T09:27:07Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/mapping/LegMapper.java", "diffHunk": "@@ -55,22 +55,35 @@ public ApiLeg mapLeg(Leg domain, Calendar arrivalTimeFromPlace, Calendar departu\n         api.distance = domain.distanceMeters;\n         api.pathway = domain.pathway;\n         api.mode = TraverseModeMapper.mapToApi(domain.mode);\n-        api.transitLeg = domain.mode == null ? null : domain.mode.isTransit();\n-        api.route = domain.route;\n-        api.agencyName = domain.agencyName;\n-        api.agencyUrl = domain.agencyUrl;\n-        api.agencyBrandingUrl = domain.agencyBrandingUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f11c3a9085f34d539078bef18594e5f2d3b9f05"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1659, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}