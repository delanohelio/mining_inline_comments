{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNjMyODg5", "number": 2971, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTozODowOVrODfG12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTozOTowNVrODfG3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTQ0NTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTozODowOVrOFoniGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDoyNTo0NVrOFo9aNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNTA2Ng==", "bodyText": "We could add units to the constant names.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2971#discussion_r378135066", "createdAt": "2020-02-12T09:38:09Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -54,17 +56,22 @@\n      * To avoid long searches witch might degrade the performance we use an upper limit\n      * to the distance for none transit what we would allow.\n      */\n-    public static final double MAX_WALK_DISTANCE = 50_000;\n-    public static final double MAX_BIKE_DISTANCE = 150_000;\n-    public static final double MAX_CAR_DISTANCE = 500_000;\n+    private static final double MAX_WALK_DISTANCE = 50_000;\n+    private static final double MAX_BIKE_DISTANCE = 150_000;\n+    private static final double MAX_CAR_DISTANCE = 500_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bc986e3abd03c71ae748b593fdbe98cecbd0a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5MzQ5NA==", "bodyText": "The unit is meters, added to constants.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2971#discussion_r378493494", "createdAt": "2020-02-12T20:25:45Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/RoutingWorker.java", "diffHunk": "@@ -54,17 +56,22 @@\n      * To avoid long searches witch might degrade the performance we use an upper limit\n      * to the distance for none transit what we would allow.\n      */\n-    public static final double MAX_WALK_DISTANCE = 50_000;\n-    public static final double MAX_BIKE_DISTANCE = 150_000;\n-    public static final double MAX_CAR_DISTANCE = 500_000;\n+    private static final double MAX_WALK_DISTANCE = 50_000;\n+    private static final double MAX_BIKE_DISTANCE = 150_000;\n+    private static final double MAX_CAR_DISTANCE = 500_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNTA2Ng=="}, "originalCommit": {"oid": "04bc986e3abd03c71ae748b593fdbe98cecbd0a9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTQ0OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTozOTowNVrOFonkUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTozOTowNVrOFonkUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNTYzNA==", "bodyText": "Add to documentation: this function should not change the List instance passed in, but may change the elements in that List, and may return a List with a subset of the elements (or even different, new elements?)", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2971#discussion_r378135634", "createdAt": "2020-02-12T09:39:05Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/filterchain/ItineraryFilter.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.opentripplanner.routing.algorithm.filterchain;\n+\n+import org.opentripplanner.model.plan.Itinerary;\n+\n+import java.util.List;\n+\n+/**\n+ * Filter or decorate itineraries.\n+ */\n+public interface ItineraryFilter {\n+\n+    /**\n+     * A name used for debugging filters to attach to elements deleted by the filter.\n+     */\n+    String name();\n+\n+    /**\n+     * Process the given itineraries returning the result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bc986e3abd03c71ae748b593fdbe98cecbd0a9"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1901, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}