{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDMxMzE5", "number": 3011, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo0NjoyN1rODqtuig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjozOFrODy_NBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTE1OTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/request/RoutingRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo0NjoyN1rOF6oTFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo0NjoyN1rOF6oTFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyMTk3NQ==", "bodyText": "Expand javadoc to clarify the distinction between main request and subrequest modes.\nConsider renaming traversemodes to submodes and then rename AllowedModes to something like modes.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r397021975", "createdAt": "2020-03-24T09:46:27Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/request/RoutingRequest.java", "diffHunk": "@@ -179,9 +179,23 @@\n     public boolean useRequestedDateTimeInMaxHours = false;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f209ddc23530595f68a5c4403df67f00672fb1db"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTE5MTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/router/street/DirectStreetRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1NDozMlrOF6onIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1MToxNFrOF6uugg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzEwNQ==", "bodyText": "Check that the correct heuristic is used for the direct street search", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r397027105", "createdAt": "2020-03-24T09:54:32Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/router/street/DirectStreetRouter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.opentripplanner.routing.algorithm.raptor.router.street;\n+\n+import org.opentripplanner.common.geometry.SphericalDistanceLibrary;\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.mapping.GraphPathToItineraryMapper;\n+import org.opentripplanner.routing.algorithm.mapping.ItinerariesHelper;\n+import org.opentripplanner.routing.error.PathNotFoundException;\n+import org.opentripplanner.routing.impl.GraphPathFinder;\n+import org.opentripplanner.routing.request.RoutingRequest;\n+import org.opentripplanner.routing.spt.GraphPath;\n+import org.opentripplanner.standalone.server.Router;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce156316b26c8d03440747e2f741a7fe23238b82"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNzI5OA==", "bodyText": "EuclidianRemainingWeightHeuristic is used, so this should be ok.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r397127298", "createdAt": "2020-03-24T12:51:14Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/router/street/DirectStreetRouter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.opentripplanner.routing.algorithm.raptor.router.street;\n+\n+import org.opentripplanner.common.geometry.SphericalDistanceLibrary;\n+import org.opentripplanner.model.plan.Itinerary;\n+import org.opentripplanner.routing.algorithm.mapping.GraphPathToItineraryMapper;\n+import org.opentripplanner.routing.algorithm.mapping.ItinerariesHelper;\n+import org.opentripplanner.routing.error.PathNotFoundException;\n+import org.opentripplanner.routing.impl.GraphPathFinder;\n+import org.opentripplanner.routing.request.RoutingRequest;\n+import org.opentripplanner.routing.spt.GraphPath;\n+import org.opentripplanner.standalone.server.Router;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.List;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzEwNQ=="}, "originalCommit": {"oid": "ce156316b26c8d03440747e2f741a7fe23238b82"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTIyNTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/request/AllowedModes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowMjo1MVrOF6o8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowMjo1MVrOF6o8aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjU1Mw==", "bodyText": "The AllowedModes is not a good name. The Allowed does not not tell what this is, maybe RoutingRequestModes is better?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r397032553", "createdAt": "2020-03-24T10:02:51Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/request/AllowedModes.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.opentripplanner.routing.request;\n+\n+import org.opentripplanner.model.TransitMode;\n+\n+import java.util.Set;\n+\n+public class AllowedModes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e8d03bbe56b5a0f7038366430d9f5a70c2d534"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDI2NzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyMToxN1rOF8nErg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0OTo0MVrOGFv_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTA1NA==", "bodyText": "We should do ApiMode mapping in one place.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r399099054", "createdAt": "2020-03-27T08:21:17Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -74,7 +72,7 @@\n      */\n     @XmlAttribute\n     @JsonSerialize\n-    public String mode = TraverseMode.WALK.toString();\n+    public String mode = \"WALK\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjMxMw==", "bodyText": "This is a default value that are set on other fields in this class too. I have now changed it back to how it was, except using the api specific ApiRequestMode enum instead of TraverseMode.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r408682313", "createdAt": "2020-04-15T08:49:41Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -74,7 +72,7 @@\n      */\n     @XmlAttribute\n     @JsonSerialize\n-    public String mode = TraverseMode.WALK.toString();\n+    public String mode = \"WALK\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTA1NA=="}, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDI3NzIzOnYy", "diffSide": "LEFT", "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODoyNDoyM1rOF8nKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMzoxM1rOF8uh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDU2Mw==", "bodyText": "Why is these methods removed? They are part of the API.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r399100563", "createdAt": "2020-03-27T08:24:23Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -240,35 +238,4 @@\n     @XmlAttribute\n     @JsonSerialize\n     public Boolean rentedBike;\n-\n-    /**\n-     * Whether this leg is a transit leg or not.\n-     * @return Boolean true if the leg is a transit leg\n-     */\n-    public Boolean isTransitLeg() {\n-        if (mode == null) return null;\n-        else if (mode.equals(TraverseMode.WALK.toString())) return false;\n-        else if (mode.equals(TraverseMode.CAR.toString())) return false;\n-        else if (mode.equals(TraverseMode.BICYCLE.toString())) return false;\n-        else return true;\n-    }\n-\n-    /**\n-     * The leg's duration in seconds\n-     */\n-    @XmlElement\n-    @JsonSerialize\n-    public double getDuration() {\n-        return endTime.getTimeInMillis()/1000.0 - startTime.getTimeInMillis()/1000.0;\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTIyOA==", "bodyText": "Added them back", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r399221228", "createdAt": "2020-03-27T12:13:13Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -240,35 +238,4 @@\n     @XmlAttribute\n     @JsonSerialize\n     public Boolean rentedBike;\n-\n-    /**\n-     * Whether this leg is a transit leg or not.\n-     * @return Boolean true if the leg is a transit leg\n-     */\n-    public Boolean isTransitLeg() {\n-        if (mode == null) return null;\n-        else if (mode.equals(TraverseMode.WALK.toString())) return false;\n-        else if (mode.equals(TraverseMode.CAR.toString())) return false;\n-        else if (mode.equals(TraverseMode.BICYCLE.toString())) return false;\n-        else return true;\n-    }\n-\n-    /**\n-     * The leg's duration in seconds\n-     */\n-    @XmlElement\n-    @JsonSerialize\n-    public double getDuration() {\n-        return endTime.getTimeInMillis()/1000.0 - startTime.getTimeInMillis()/1000.0;\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDU2Mw=="}, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDMwMzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozMjo1OVrOF8na1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1MDoxNFrOGFwAjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDcyNg==", "bodyText": "Why is the Enum removed? It is part of the api and serve as documentation. We want to go in the directon of a more \"type-Safe\" direction, not the oposite way.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r399104726", "createdAt": "2020-03-27T08:32:59Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedMode.java", "diffHunk": "@@ -1,66 +1,35 @@\n package org.opentripplanner.api.parameter;\n \n import com.google.common.collect.Sets;\n-import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.TraverseMode;\n \n import java.io.Serializable;\n-import java.security.InvalidParameterException;\n import java.util.Set;\n \n public class QualifiedMode implements Serializable {\n     private static final long serialVersionUID = 1L;\n     \n-    public final TraverseMode mode;\n-    public final Set<Qualifier> qualifiers = Sets.newHashSet();\n+    public final String mode;\n+    public final Set<String> qualifiers = Sets.newHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjYzNw==", "bodyText": "I have now created new enums that are API specific and added back the type safety.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r408682637", "createdAt": "2020-04-15T08:50:14Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedMode.java", "diffHunk": "@@ -1,66 +1,35 @@\n package org.opentripplanner.api.parameter;\n \n import com.google.common.collect.Sets;\n-import org.opentripplanner.routing.core.RoutingRequest;\n-import org.opentripplanner.routing.core.TraverseMode;\n \n import java.io.Serializable;\n-import java.security.InvalidParameterException;\n import java.util.Set;\n \n public class QualifiedMode implements Serializable {\n     private static final long serialVersionUID = 1L;\n     \n-    public final TraverseMode mode;\n-    public final Set<Qualifier> qualifiers = Sets.newHashSet();\n+    public final String mode;\n+    public final Set<String> qualifiers = Sets.newHashSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDcyNg=="}, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDgxMzU2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLPlanner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTowMDo0MlrOF8sWQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyNToyN1rOGFzccg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NTQ3Mw==", "bodyText": "AtomicReferences imply multithreading access, use something else to achive the callback thing.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r399185473", "createdAt": "2020-03-27T11:00:42Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLPlanner.java", "diffHunk": "@@ -240,22 +240,24 @@ private RoutingRequest createRequest(DataFetchingEnvironment environment) {\n         }\n \n         if (hasArgument(environment, \"modes\")) {\n-            // Map modes to comma separated list in string first to be able to reuse logic in QualifiedModeSet\n-            // Remove CABLE_CAR from collection because QualifiedModeSet does not support mapping (splits on '_')\n-            Set<TraverseMode> modes = new HashSet<>(environment.getArgument(\"modes\"));\n-            boolean cableCar = modes.remove(TraverseMode.CABLE_CAR);\n-\n-            String modesAsString = modes.isEmpty() ? \"\" : Joiner.on(\",\").join(modes);\n-            if (!StringUtils.isEmpty(modesAsString)) {\n-                new QualifiedModeSet(modesAsString).applyToRoutingRequest(request);\n-                request.setModes(request.modes);\n-            } else if (cableCar) {\n-                // Clear default modes in case only cable car is selected\n-                request.clearModes();\n-            }\n+            AtomicReference<StreetMode> accessMode = new AtomicReference<>();\n+            AtomicReference<StreetMode> egressMode = new AtomicReference<>();\n+            AtomicReference<StreetMode> directMode = new AtomicReference<>();\n+            AtomicReference<ArrayList<TransitMode>> transitModes = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczODkzMA==", "bodyText": "Changed to a simple wrapper instead, to make it clearer.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r408738930", "createdAt": "2020-04-15T10:25:27Z", "author": {"login": "gmellemstrand"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelGraphQLPlanner.java", "diffHunk": "@@ -240,22 +240,24 @@ private RoutingRequest createRequest(DataFetchingEnvironment environment) {\n         }\n \n         if (hasArgument(environment, \"modes\")) {\n-            // Map modes to comma separated list in string first to be able to reuse logic in QualifiedModeSet\n-            // Remove CABLE_CAR from collection because QualifiedModeSet does not support mapping (splits on '_')\n-            Set<TraverseMode> modes = new HashSet<>(environment.getArgument(\"modes\"));\n-            boolean cableCar = modes.remove(TraverseMode.CABLE_CAR);\n-\n-            String modesAsString = modes.isEmpty() ? \"\" : Joiner.on(\",\").join(modes);\n-            if (!StringUtils.isEmpty(modesAsString)) {\n-                new QualifiedModeSet(modesAsString).applyToRoutingRequest(request);\n-                request.setModes(request.modes);\n-            } else if (cableCar) {\n-                // Clear default modes in case only cable car is selected\n-                request.clearModes();\n-            }\n+            AtomicReference<StreetMode> accessMode = new AtomicReference<>();\n+            AtomicReference<StreetMode> egressMode = new AtomicReference<>();\n+            AtomicReference<StreetMode> directMode = new AtomicReference<>();\n+            AtomicReference<ArrayList<TransitMode>> transitModes = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NTQ3Mw=="}, "originalCommit": {"oid": "b9b8748405da45938dd8c025d2c960c650d82283"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzg2OTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0Mjo0N1rOGEXXKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0Mjo0N1rOGEXXKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDI1MQ==", "bodyText": "Collections.emptySet returns an immutable set, which makes Set#add used below throw a NPE.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r407230251", "createdAt": "2020-04-12T17:42:47Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzg3MTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0NDo1M1rOGEXYFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0NDo1M1rOGEXYFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDQ4Ng==", "bodyText": "break is missing here", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r407230486", "createdAt": "2020-04-12T17:44:53Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()\n+        );\n \n-        if (qModes.isEmpty()) return;\n+        if (qModes.isEmpty()) return requestModes;\n \n-        /* Start with an empty mode set. */\n-        TraverseModeSet modes = new TraverseModeSet();\n-        req.setModes(modes);\n-        \n-        /* First, copy over all the unqualified modes and see if we are using transit. FIXME HACK */\n+        // Set transit modes\n         for (QualifiedMode qMode : qModes) {\n-            modes.setMode(qMode.mode, true);\n+             switch (qMode.mode) {\n+                 case \"RAIL\":\n+                     requestModes.transitModes.add(TransitMode.RAIL);\n+                     break;\n+                 case \"SUBWAY\":\n+                     requestModes.transitModes.add(TransitMode.SUBWAY);\n+                     break;\n+                 case \"BUS\":\n+                     requestModes.transitModes.add(TransitMode.BUS);\n+                     break;\n+                 case \"TRAM\":\n+                     requestModes.transitModes.add(TransitMode.TRAM);\n+                     break;\n+                 case \"FERRY\":\n+                     requestModes.transitModes.add(TransitMode.FERRY);\n+                     break;\n+                 case \"AIRPLANE\":\n+                     requestModes.transitModes.add(TransitMode.AIRPLANE);\n+                     break;\n+                 case \"CABLE_CAR\":\n+                     requestModes.transitModes.add(TransitMode.CABLE_CAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzg3NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0ODoxMVrOGEXZsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxNjo1MFrOGFux-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDg5OA==", "bodyText": "Shouldn't this have the default values for transit modes added, now there is no transit modes by default.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r407230898", "createdAt": "2020-04-12T17:48:11Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()\n+        );\n \n-        if (qModes.isEmpty()) return;\n+        if (qModes.isEmpty()) return requestModes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MjUyMg==", "bodyText": "I haven't looked into how the REST api works in detail, it seems sensible to have it work that way. I am changing it to have a check in the RoutingResource to only set the modes if qModes is not empty. Otherwise it will use the modes from the default RoutingRequest.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r408662522", "createdAt": "2020-04-15T08:16:50Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()\n+        );\n \n-        if (qModes.isEmpty()) return;\n+        if (qModes.isEmpty()) return requestModes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDg5OA=="}, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzg3NTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNzo0ODozNFrOGEXZ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMTowOFrOGFu8Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDk2MA==", "bodyText": "This adds all transit modes, when a street-only search is made", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r407230960", "createdAt": "2020-04-12T17:48:34Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()\n+        );\n \n-        if (qModes.isEmpty()) return;\n+        if (qModes.isEmpty()) return requestModes;\n \n-        /* Start with an empty mode set. */\n-        TraverseModeSet modes = new TraverseModeSet();\n-        req.setModes(modes);\n-        \n-        /* First, copy over all the unqualified modes and see if we are using transit. FIXME HACK */\n+        // Set transit modes\n         for (QualifiedMode qMode : qModes) {\n-            modes.setMode(qMode.mode, true);\n+             switch (qMode.mode) {\n+                 case \"RAIL\":\n+                     requestModes.transitModes.add(TransitMode.RAIL);\n+                     break;\n+                 case \"SUBWAY\":\n+                     requestModes.transitModes.add(TransitMode.SUBWAY);\n+                     break;\n+                 case \"BUS\":\n+                     requestModes.transitModes.add(TransitMode.BUS);\n+                     break;\n+                 case \"TRAM\":\n+                     requestModes.transitModes.add(TransitMode.TRAM);\n+                     break;\n+                 case \"FERRY\":\n+                     requestModes.transitModes.add(TransitMode.FERRY);\n+                     break;\n+                 case \"AIRPLANE\":\n+                     requestModes.transitModes.add(TransitMode.AIRPLANE);\n+                     break;\n+                 case \"CABLE_CAR\":\n+                     requestModes.transitModes.add(TransitMode.CABLE_CAR);\n+                 case \"GONDOLA\":\n+                     requestModes.transitModes.add(TransitMode.GONDOLA);\n+                     break;\n+                 case \"FUNICULAR\":\n+                     requestModes.transitModes.add(TransitMode.FUNICULAR);\n+                     break;\n+             }\n         }\n-        boolean usingTransit = modes.isTransit();\n-        \n-        // We used to always set WALK to true, but this forced walking when someone wanted to use a bike.\n-        // We also want it to be possible to force biking-only (e.g. this is done in some consistency tests).\n-        // TODO clearly define mode semantics: does presence of mode mean it is allowable, preferred... ?\n \n+        if (requestModes.transitModes.isEmpty()) {\n+            requestModes.transitModes = new HashSet<>(Arrays.asList(TransitMode.values()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTEzOA==", "bodyText": "I will change this. Feel free to change this mapping further, as we are not testing the REST API at Entur and in some cases we do not know the intended functionality.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r408665138", "createdAt": "2020-04-15T08:21:08Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/parameter/QualifiedModeSet.java", "diffHunk": "@@ -29,32 +33,103 @@ public QualifiedModeSet(String s) {\n         }\n     }\n \n-    /**\n-     * Modify an existing routing request, setting fields to reflect these qualified modes.\n-     * This is intended as a temporary solution, and uses the current system of a single mode set,\n-     * accompanied by some flags to help with routing.\n-     */\n-    public void applyToRoutingRequest(RoutingRequest req) {\n+    public RequestModes getRequestModes() {\n+        RequestModes requestModes = new RequestModes(\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            StreetMode.WALK,\n+            Collections.emptySet()\n+        );\n \n-        if (qModes.isEmpty()) return;\n+        if (qModes.isEmpty()) return requestModes;\n \n-        /* Start with an empty mode set. */\n-        TraverseModeSet modes = new TraverseModeSet();\n-        req.setModes(modes);\n-        \n-        /* First, copy over all the unqualified modes and see if we are using transit. FIXME HACK */\n+        // Set transit modes\n         for (QualifiedMode qMode : qModes) {\n-            modes.setMode(qMode.mode, true);\n+             switch (qMode.mode) {\n+                 case \"RAIL\":\n+                     requestModes.transitModes.add(TransitMode.RAIL);\n+                     break;\n+                 case \"SUBWAY\":\n+                     requestModes.transitModes.add(TransitMode.SUBWAY);\n+                     break;\n+                 case \"BUS\":\n+                     requestModes.transitModes.add(TransitMode.BUS);\n+                     break;\n+                 case \"TRAM\":\n+                     requestModes.transitModes.add(TransitMode.TRAM);\n+                     break;\n+                 case \"FERRY\":\n+                     requestModes.transitModes.add(TransitMode.FERRY);\n+                     break;\n+                 case \"AIRPLANE\":\n+                     requestModes.transitModes.add(TransitMode.AIRPLANE);\n+                     break;\n+                 case \"CABLE_CAR\":\n+                     requestModes.transitModes.add(TransitMode.CABLE_CAR);\n+                 case \"GONDOLA\":\n+                     requestModes.transitModes.add(TransitMode.GONDOLA);\n+                     break;\n+                 case \"FUNICULAR\":\n+                     requestModes.transitModes.add(TransitMode.FUNICULAR);\n+                     break;\n+             }\n         }\n-        boolean usingTransit = modes.isTransit();\n-        \n-        // We used to always set WALK to true, but this forced walking when someone wanted to use a bike.\n-        // We also want it to be possible to force biking-only (e.g. this is done in some consistency tests).\n-        // TODO clearly define mode semantics: does presence of mode mean it is allowable, preferred... ?\n \n+        if (requestModes.transitModes.isEmpty()) {\n+            requestModes.transitModes = new HashSet<>(Arrays.asList(TransitMode.values()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzMDk2MA=="}, "originalCommit": {"oid": "de93cb9cc98836e57dd1e3e19d1e345a54a3b10a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY0MzM4OnYy", "diffSide": "RIGHT", "path": "docs/OTP2-MigrationGuide.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0Nzo0MlrOGGG-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTowOTowN1rOGHJz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA==", "bodyText": "This document is about \"what you have to do if you are using the REST API\", but the above description say no changes. Maybe there is something that was allowed before that does not work now or is there a limited set of combinations? Maybe some combinations map into a given set of mode transitions?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409058828", "createdAt": "2020-04-15T18:47:42Z", "author": {"login": "t2gran"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxOTAzMQ==", "bodyText": "I didn't catch that the migration guide was only for the REST API. I will update the description. There are no changes to the REST api itself, but there are changes to the underlying functionality.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409619031", "createdAt": "2020-04-16T14:50:20Z", "author": {"login": "gmellemstrand"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNDE0Mg==", "bodyText": "I see now that it has a heading that says RoutingRequest changes, which is not directly part of the REST API, as it is mapped from the RoutingResource. If the document is intended only for the REST API, maybe the heading should be RoutingResource changes, and that is not changed.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409624142", "createdAt": "2020-04-16T14:56:33Z", "author": {"login": "gmellemstrand"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MTg0NA==", "bodyText": "I will clarify the doc later, but yes the doc talk only about the REST API and the  RoutingRequest refer to the query parameters on the RoutingService. The target user of the document is a Client developer.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410151844", "createdAt": "2020-04-17T11:03:59Z", "author": {"login": "t2gran"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MjIxMQ==", "bodyText": "The Transmodel API do not exist in OTP1 so there is no migration guide for that.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410152211", "createdAt": "2020-04-17T11:04:55Z", "author": {"login": "t2gran"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1Mzk3OA==", "bodyText": "That's true. I have changed the documentation to only refer to changes in the REST API.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410153978", "createdAt": "2020-04-17T11:09:07Z", "author": {"login": "gmellemstrand"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -30,6 +30,9 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` You now have to specify access/egress/direct/transit modes separately. This gives more\n+ fine-grained control of the results. The REST api is unchanged, but is mapped into this structure.\n+ The sandbox Transmodel API allows you to specify the structure directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODgyOA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY1MzAwOnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/siri/SiriFuzzyTripMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MDoyMFrOGGHEJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo1MjoxOVrOGGpQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDM5MA==", "bodyText": "The GtfsLibrary should operate on the GTFS import, not on the internal model. I have refactored already this in PR #3031.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409060390", "createdAt": "2020-04-15T18:50:20Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriFuzzyTripMatcher.java", "diffHunk": "@@ -344,7 +344,7 @@ public FeedScopedId getTripId(String vehicleJourney) {\n \n         List<FeedScopedId> matches = new ArrayList<>();\n         for (Trip trip : cachedTripsBySiriId) {\n-            if (GtfsLibrary.getTraverseMode(trip.getRoute()).equals(traverseMode)\n+            if (GtfsLibrary.getTransitMode(trip.getRoute()).equals(traverseMode)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyMDY3OQ==", "bodyText": "This was fixed in the merge", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409620679", "createdAt": "2020-04-16T14:52:19Z", "author": {"login": "gmellemstrand"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriFuzzyTripMatcher.java", "diffHunk": "@@ -344,7 +344,7 @@ public FeedScopedId getTripId(String vehicleJourney) {\n \n         List<FeedScopedId> matches = new ArrayList<>();\n         for (Trip trip : cachedTripsBySiriId) {\n-            if (GtfsLibrary.getTraverseMode(trip.getRoute()).equals(traverseMode)\n+            if (GtfsLibrary.getTransitMode(trip.getRoute()).equals(traverseMode)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDM5MA=="}, "originalCommit": {"oid": "781d046cb4487f0d716ce68a441c109c10e1966c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY5MDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyNzo0M1rOGGaP-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0MjoyMVrOGGow3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NDcxNA==", "bodyText": "These should be uppercase, or checked against the enum values themselves", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409374714", "createdAt": "2020-04-16T08:27:43Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -247,9 +247,9 @@\n      */\n     public Boolean isTransitLeg() {\n         if (mode == null) return null;\n-        else if (mode.equals(TraverseMode.WALK.toString())) return false;\n-        else if (mode.equals(TraverseMode.CAR.toString())) return false;\n-        else if (mode.equals(TraverseMode.BICYCLE.toString())) return false;\n+        else if (mode.equals(\"Walk\")) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a699b54028a575d119f86c7dffa28716257daf92"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NDU0NQ==", "bodyText": "This should be fixed when merging with #3031, as it separates out the TraverseMode enum to a new REST API version.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409394545", "createdAt": "2020-04-16T08:58:07Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -247,9 +247,9 @@\n      */\n     public Boolean isTransitLeg() {\n         if (mode == null) return null;\n-        else if (mode.equals(TraverseMode.WALK.toString())) return false;\n-        else if (mode.equals(TraverseMode.CAR.toString())) return false;\n-        else if (mode.equals(TraverseMode.BICYCLE.toString())) return false;\n+        else if (mode.equals(\"Walk\")) return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NDcxNA=="}, "originalCommit": {"oid": "a699b54028a575d119f86c7dffa28716257daf92"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxMjUxMQ==", "bodyText": "This has been fixed now.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r409612511", "createdAt": "2020-04-16T14:42:21Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/api/model/ApiLeg.java", "diffHunk": "@@ -247,9 +247,9 @@\n      */\n     public Boolean isTransitLeg() {\n         if (mode == null) return null;\n-        else if (mode.equals(TraverseMode.WALK.toString())) return false;\n-        else if (mode.equals(TraverseMode.CAR.toString())) return false;\n-        else if (mode.equals(TraverseMode.BICYCLE.toString())) return false;\n+        else if (mode.equals(\"Walk\")) return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NDcxNA=="}, "originalCommit": {"oid": "a699b54028a575d119f86c7dffa28716257daf92"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjgwODE2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelIndexGraphQLSchema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozMTozM1rOGHMC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDowMjo1OVrOGIM3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MDU2NQ==", "bodyText": "I do not like the fact that there is a chose of either access/transit/egress or direct, but as long as everyone (Mads) understand that this is a first try and that we will redesign this later i am ok with it. But, we will do this differently when migrating to a schema based API. This is OK for now.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410190565", "createdAt": "2020-04-17T12:31:33Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelIndexGraphQLSchema.java", "diffHunk": "@@ -469,6 +477,41 @@ public TransmodelIndexGraphQLSchema(Graph graph, RoutingRequest defaultRequest)\n                         .build())\n                 .build();\n \n+        modesInputType = GraphQLInputObjectType.newInputObject()\n+            .name(\"Modes\")\n+            .description(\"Input format for specifying which modes will be allowed for this search. \"\n+                + \"If this element is not present, it will default to accessMode/egressMode/directMode \"\n+                + \"of foot and all transport modes will be allowed.\")\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"accessMode\")\n+                .description(\"The mode used to get from the origin to the access stops in the transit \"\n+                    + \"network the transit network (first-mile). If the element is not present or null,\"\n+                    + \"only transit that can be immediately boarded from the origin will be used.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"egressMode\")\n+                .description(\"The mode used to get from the egress stops in the transit network to\"\n+                    + \"the destination (last-mile). If the element is not present or null,\"\n+                    + \"only transit that can immediately arrive at the origin will be used.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"directMode\")\n+                .description(\"The mode used to get from the origin to the destination directly, \"\n+                    + \"without using the transit network. If the element is not present or null,\"\n+                    + \"direct travel without using transit will be disallowed.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"transportMode\")\n+                .description(\"The allowed modes for the transit part of the trip. Use an empty list \"\n+                    + \"to disallow transit for this search. If the element is not present or null, \"\n+                    + \"it will default to all transport modes.\")\n+                .type(new GraphQLList(TRANSPORT_MODE))\n+                .build())\n+            .build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI1MjY3Nw==", "bodyText": "We are not really choosing either or, but both can be specified. What is kind of odd about this structure is that access/egress/transit are tied together, but direct is its own search.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r411252677", "createdAt": "2020-04-20T10:02:59Z", "author": {"login": "gmellemstrand"}, "path": "src/ext/java/org/opentripplanner/ext/transmodelapi/TransmodelIndexGraphQLSchema.java", "diffHunk": "@@ -469,6 +477,41 @@ public TransmodelIndexGraphQLSchema(Graph graph, RoutingRequest defaultRequest)\n                         .build())\n                 .build();\n \n+        modesInputType = GraphQLInputObjectType.newInputObject()\n+            .name(\"Modes\")\n+            .description(\"Input format for specifying which modes will be allowed for this search. \"\n+                + \"If this element is not present, it will default to accessMode/egressMode/directMode \"\n+                + \"of foot and all transport modes will be allowed.\")\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"accessMode\")\n+                .description(\"The mode used to get from the origin to the access stops in the transit \"\n+                    + \"network the transit network (first-mile). If the element is not present or null,\"\n+                    + \"only transit that can be immediately boarded from the origin will be used.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"egressMode\")\n+                .description(\"The mode used to get from the egress stops in the transit network to\"\n+                    + \"the destination (last-mile). If the element is not present or null,\"\n+                    + \"only transit that can immediately arrive at the origin will be used.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"directMode\")\n+                .description(\"The mode used to get from the origin to the destination directly, \"\n+                    + \"without using the transit network. If the element is not present or null,\"\n+                    + \"direct travel without using transit will be disallowed.\")\n+                .type(STREET_MODE)\n+                .build())\n+            .field(GraphQLInputObjectField.newInputObjectField()\n+                .name(\"transportMode\")\n+                .description(\"The allowed modes for the transit part of the trip. Use an empty list \"\n+                    + \"to disallow transit for this search. If the element is not present or null, \"\n+                    + \"it will default to all transport modes.\")\n+                .type(new GraphQLList(TRANSPORT_MODE))\n+                .build())\n+            .build();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MDU2NQ=="}, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjgzNDE1OnYy", "diffSide": "RIGHT", "path": "docs/OTP2-MigrationGuide.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozOTo0M1rOGHMS0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjozOTo0M1rOGHMS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5NDY0MQ==", "bodyText": "We try to keep all lines 100 characters wide, but I am not sure if we should apply it on markdown files. From what I see in the IDE and here on GitHub, it probably better to not do it (both wraps nicely, and Intelij do NOT wrap lines when I try to do auto reformatting). You can do as you like on this one, but we should state something in the developer guideline - I will do that.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410194641", "createdAt": "2020-04-17T12:39:43Z", "author": {"login": "t2gran"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -32,6 +32,7 @@ These properties changed names from:\n  - `searchWindow` Limit the departure window or arrival window for the routing search.\n  - `boardSlackByMode` How much time boarding a vehicle takes for each given mode.\n  - `alightSlackByMode` How much time alighting a vehicle takes for each given mode.\n+ - `modes` The REST API is unchanged, but is mapped into a new structure in the RoutingRequest. This means not all combinations of non-transit modes that was available in OTP1 is available in OTP2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkwOTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjozOFrOGHXE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjo1ODoxNlrOGITKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTI5OA==", "bodyText": "This breaks arriveBy-searches, as orginVertices get set to from on row 145. Either the direction of the routingRequest should be always forward, or the originVertives should be set in to and not from parameter in setRoutingContext .", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r410371298", "createdAt": "2020-04-17T17:36:38Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -138,16 +139,16 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n     public List<StopAtDistance> findNearbyStopsViaStreets (\n             Set<Vertex> originVertices,\n             boolean reverseDirection,\n-            boolean removeTempEdges\n+            boolean removeTempEdges,\n+            RoutingRequest routingRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NTY3Mw==", "bodyText": "I have investigated this. What we want is for the access search to always be a forward search, while the egress search should always be an arriveBy search, regardless of the main search being arriveBy or not. The direct street search, however, should be based on whether the main RoutingRequest is arriveBy or not.\nI have pushed a fix with a TODO in the AccessEgressRouter. This gets a bit messy because we have not separated the main search from the street sub search, and it also ties into how the RoutingContext is created. It works now, cleaning up the request structure is something we should do soon.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r411245673", "createdAt": "2020-04-20T09:51:58Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -138,16 +139,16 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n     public List<StopAtDistance> findNearbyStopsViaStreets (\n             Set<Vertex> originVertices,\n             boolean reverseDirection,\n-            boolean removeTempEdges\n+            boolean removeTempEdges,\n+            RoutingRequest routingRequest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTI5OA=="}, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM1NTcwNQ==", "bodyText": "This seems to be fixed now", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3011#discussion_r411355705", "createdAt": "2020-04-20T12:58:16Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/NearbyStopFinder.java", "diffHunk": "@@ -138,16 +139,16 @@ public NearbyStopFinder(Graph graph, double radiusMeters, boolean useStreets) {\n     public List<StopAtDistance> findNearbyStopsViaStreets (\n             Set<Vertex> originVertices,\n             boolean reverseDirection,\n-            boolean removeTempEdges\n+            boolean removeTempEdges,\n+            RoutingRequest routingRequest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTI5OA=="}, "originalCommit": {"oid": "c1c867b0c5d44f2a3cb5839beec2e2aec041ecb5"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1792, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}