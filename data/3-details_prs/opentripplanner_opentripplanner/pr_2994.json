{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODA0NjM0", "number": 2994, "title": "Update pathways support to official GTFS specification", "bodyText": "Add support for pathways according to the spec at google/transit#143. This can be tested eg. with the MBTA feed.\nTo be completed by pull request submitter:\n\n issue: Closes #2923.\n roadmap: Check the roadmap for this feature or bug. If it is not already on the roadmap, PLC will discuss as part of the review process.\n tests: Have you added relevant test coverage? Are all the tests passing on the continuous integration service (Travis CI)?\n formatting: How sould we do when touching files, which are not formatted according to the new rules? I have left them as is and used the new rules for new files\n documentation: If you are adding a new configuration option, have you added an explanation to the configuration documentation tables and sections?\n changelog: add a bullet point to the changelog file with description and link to the linked issue\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap", "createdAt": "2020-03-03T08:13:39Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994", "merged": true, "mergeCommit": {"oid": "f35fecd3c3ae287e865ffb03e5d7ca97d5036189"}, "closed": true, "closedAt": "2020-04-15T13:42:06Z", "author": {"login": "hannesj"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO2SKYABqjMxNDExOTUwOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX4PBfAFqTM5Mzc4MDI1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d392f8dfa7fc9a477bad1c551e151b509b5bc03", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/9d392f8dfa7fc9a477bad1c551e151b509b5bc03", "committedDate": "2020-02-28T14:49:40Z", "message": "Add separate TransitEntranceLink"}, "afterCommit": {"oid": "d0f9642ba0bd334b104fb5edbc43117dae084202", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d0f9642ba0bd334b104fb5edbc43117dae084202", "committedDate": "2020-03-18T12:15:24Z", "message": "Add separate TransitEntranceLink"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0f9642ba0bd334b104fb5edbc43117dae084202", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d0f9642ba0bd334b104fb5edbc43117dae084202", "committedDate": "2020-03-18T12:15:24Z", "message": "Add separate TransitEntranceLink"}, "afterCommit": {"oid": "b81b97d9d834d56dab656f8e39f61ffd0c102332", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b81b97d9d834d56dab656f8e39f61ffd0c102332", "committedDate": "2020-03-18T14:35:33Z", "message": "Add separate TransitEntranceLink"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b81b97d9d834d56dab656f8e39f61ffd0c102332", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b81b97d9d834d56dab656f8e39f61ffd0c102332", "committedDate": "2020-03-18T14:35:33Z", "message": "Add separate TransitEntranceLink"}, "afterCommit": {"oid": "39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "committedDate": "2020-03-27T12:06:32Z", "message": "Add tests and assertions for location types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d36d05751a8c2bb011b6cfe4cd061aed503aae", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/35d36d05751a8c2bb011b6cfe4cd061aed503aae", "committedDate": "2020-04-02T11:55:45Z", "message": "Move check for street linkable stops to correct place"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18748d886c338fd658e5f82e75e820bd04e1346a", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/18748d886c338fd658e5f82e75e820bd04e1346a", "committedDate": "2020-04-02T11:55:45Z", "message": "Remove isEntrance from TransitStopVertex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef621adac47ece0d8bc045aec35198da418ae78", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bef621adac47ece0d8bc045aec35198da418ae78", "committedDate": "2020-04-02T11:55:45Z", "message": "Update OBA and fix compilation errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca6442856c7ba36e6cbe30b29e4b11497a93161", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0ca6442856c7ba36e6cbe30b29e4b11497a93161", "committedDate": "2020-04-02T11:55:45Z", "message": "Add PathwayNode and Entrance to graph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d44b75e3b1301850be4cb06d74268ed90936699", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/2d44b75e3b1301850be4cb06d74268ed90936699", "committedDate": "2020-04-02T11:55:45Z", "message": "Create elevators from pathways"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c76879d600f6a46cf5f5afc423f999d4ba1fa6", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/67c76879d600f6a46cf5f5afc423f999d4ba1fa6", "committedDate": "2020-04-02T11:55:45Z", "message": "Add separate TransitEntranceLink"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0777c7303f1bc91d0518454cf1113505441fb4a8", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0777c7303f1bc91d0518454cf1113505441fb4a8", "committedDate": "2020-04-02T11:55:45Z", "message": "Add boarding areas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/948d62e6460959ac8f6f015c288e5a11f7df79ec", "committedDate": "2020-04-02T11:55:45Z", "message": "Add tests and assertions for location types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/39789ba2ff4d4ef56815c43b1a18cbb238b35e32", "committedDate": "2020-03-27T12:06:32Z", "message": "Add tests and assertions for location types"}, "afterCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/948d62e6460959ac8f6f015c288e5a11f7df79ec", "committedDate": "2020-04-02T11:55:45Z", "message": "Add tests and assertions for location types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTE0MDE3", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-388914017", "createdAt": "2020-04-07T08:52:09Z", "commit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1MjowOVrOGB5j7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToyMDoxM1rOGB6psQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NDg0NA==", "bodyText": "Add method to internal Pathway class to avoid use of numeric constants.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404644844", "createdAt": "2020-04-07T08:52:09Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,209 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njk0MA==", "bodyText": "We have decided to leave the repetitive code instead of creating an interface. Change comment to explain we didn't make an interface because this is the only place it causes repetition.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404646940", "createdAt": "2020-04-07T08:55:13Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,209 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                    );\n+                    if (pathway.isBidirectional()) {\n+                        new PathwayEdge(\n+                            toVertex,\n+                            fromVertex,\n+                            pathway.getReversedName(),\n+                            pathway.getTraversalTime(),\n+                            pathway.getLength(),\n+                            -1 * pathway.getStairCount(),\n+                            -1 * pathway.getSlope(),\n+                            pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                        );\n+                    }\n                 }\n             }\n             else {\n-                if(fromVertex == null) {\n-                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway.getFromStop().getId());\n+                if (fromVertex == null) {\n+                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway\n+                        .getFromStop()\n+                        .getId());\n                 }\n-                if(toVertex == null) {\n-                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway.getToStop().getId());\n+                if (toVertex == null) {\n+                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway\n+                        .getToStop()\n+                        .getId());\n                 }\n             }\n         }\n     }\n \n+    private void createElevatorEdgesAndAddThemToGraph(\n+        Graph graph,\n+        Pathway pathway,\n+        Vertex fromVertex,\n+        Vertex toVertex\n+    ) {\n+        String fromVertexLevelName = fromVertex.getName();\n+        Double fromVertexLevelIndex = null;\n+\n+        // TODO: Shuld these be refactored behind an interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODk1OQ==", "bodyText": "Alternatively: add methods to fetch level information to the existing superclass, returning null. Override this method only on classes with level information.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404648959", "createdAt": "2020-04-07T08:58:20Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,209 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                    );\n+                    if (pathway.isBidirectional()) {\n+                        new PathwayEdge(\n+                            toVertex,\n+                            fromVertex,\n+                            pathway.getReversedName(),\n+                            pathway.getTraversalTime(),\n+                            pathway.getLength(),\n+                            -1 * pathway.getStairCount(),\n+                            -1 * pathway.getSlope(),\n+                            pathway.getPathwayMode() != 2 && pathway.getPathwayMode() != 4\n+                        );\n+                    }\n                 }\n             }\n             else {\n-                if(fromVertex == null) {\n-                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway.getFromStop().getId());\n+                if (fromVertex == null) {\n+                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway\n+                        .getFromStop()\n+                        .getId());\n                 }\n-                if(toVertex == null) {\n-                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway.getToStop().getId());\n+                if (toVertex == null) {\n+                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway\n+                        .getToStop()\n+                        .getId());\n                 }\n             }\n         }\n     }\n \n+    private void createElevatorEdgesAndAddThemToGraph(\n+        Graph graph,\n+        Pathway pathway,\n+        Vertex fromVertex,\n+        Vertex toVertex\n+    ) {\n+        String fromVertexLevelName = fromVertex.getName();\n+        Double fromVertexLevelIndex = null;\n+\n+        // TODO: Shuld these be refactored behind an interface", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0Njk0MA=="}, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzE0OQ==", "bodyText": "Rename method to \"hasPathways\", which is probably clearer and avoids negation.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404653149", "createdAt": "2020-04-07T09:04:54Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/TransitToTaggedStopsModule.java", "diffHunk": "@@ -74,9 +74,8 @@ public void buildGraph(\n                 }\n             }\n             if(alreadyLinked) continue;\n-            // only connect transit stops that (a) are entrances, or (b) have no associated\n-            // entrances\n-            if (ts.isEntrance() || !ts.hasEntrances()) {\n+            // only connect transit stops that are not part of a pathway network\n+            if (!ts.isStreetLinkable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NzgwOQ==", "bodyText": "Try to eliminate numeric constants.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404657809", "createdAt": "2020-04-07T09:12:37Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java", "diffHunk": "@@ -51,8 +59,36 @@ void link(Collection<org.onebusaway.gtfs.model.Stop> gtfsStops) {\n                     continue;\n                 }\n \n-                otpStop.setParentStation(otpStation);\n-                otpStation.addChildStop(otpStop);\n+                if (otpStop instanceof Stop) {\n+                    Stop stop = ((Stop) otpStop);\n+                    stop.setParentStation(otpStation);\n+                    otpStation.addChildStop(stop);\n+                    if (stop.getCoordinate() == null) {\n+                        stop.setCoordinate(new WgsCoordinate(otpStation.getLat(), otpStation.getLon()));\n+                    }\n+                } else if (otpStop instanceof PathwayNode) {\n+                    PathwayNode node = (PathwayNode) otpStop;\n+                    if (node.getCoordinate() == null) {\n+                        node.setCoordinate(new WgsCoordinate(otpStation.getLat(), otpStation.getLon()));\n+                    }\n+                }\n+            } else if (gtfsStop.getLocationType() == 4 && gtfsStop.getParentStation() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MjcwNQ==", "bodyText": "Add Javadoc explaining that this sets the parent station field, adds child stops to stations, and inherits coordinates as needed from parent stations. Change the name to be a noun instead of a verb (since it's a class). Seeing that this also implies a common interface, it may be a good idea to create this interface with a name like StationElement (rather than emphasizing that it is \"StopLike\"). This interface would have level information and parent station information.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404662705", "createdAt": "2020-04-07T09:20:13Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/gtfs/mapping/LinkStopsAndParentStationsTogether.java", "diffHunk": "@@ -27,18 +28,25 @@\n     LinkStopsAndParentStationsTogether(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTA4NTk2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-388908596", "createdAt": "2020-04-07T08:45:18Z", "commit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NToxOFrOGB5SxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NjozM1rOGB5V4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQ1Mg==", "bodyText": "Use // instead of /* */ for comment inside code.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404640452", "createdAt": "2020-04-07T08:45:18Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java", "diffHunk": "@@ -182,10 +186,13 @@ public void link () {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            // TODO OTP2 - Can a vertex already be linked?\n+            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTI0OA==", "bodyText": "Always use { } around the body of a if statement. It is ok to keep it on one line.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r404641248", "createdAt": "2020-04-07T08:46:33Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java", "diffHunk": "@@ -182,10 +186,13 @@ public void link () {\n         LOG.info(progress.startMessage());\n \n         for (T v : vertices) {\n-            // TODO OTP2 - Can a vertex already be linked?\n+            /* Do not link vertices, which are already linked by TransitToTaggedStopsModule */\n             boolean alreadyLinked = v.getOutgoing().stream().anyMatch(e -> e instanceof StreetTransitLink);\n             if (alreadyLinked) { continue; }\n \n+            /* Do not link stops connected by pathways */\n+            if (v instanceof TransitStopVertex && !((TransitStopVertex) v).isStreetLinkable()) continue;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948d62e6460959ac8f6f015c288e5a11f7df79ec"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2b9b6725c30d047cb16e9270e381da67391415", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/4e2b9b6725c30d047cb16e9270e381da67391415", "committedDate": "2020-04-09T06:29:13Z", "message": "fix pathway method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3658166b4868601d9681e94e80ac5b0c6916ab", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/da3658166b4868601d9681e94e80ac5b0c6916ab", "committedDate": "2020-04-09T06:34:18Z", "message": "Rename isStreetLinkable to hasPathways"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b04810ec8d46074e7568d5ff1383e1f485c8ea", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/37b04810ec8d46074e7568d5ff1383e1f485c8ea", "committedDate": "2020-04-09T06:36:35Z", "message": "Use Location type constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d894d6331a27ed7e78e8ec1232ec359d27ea1517", "committedDate": "2020-04-09T07:43:10Z", "message": "Add StationElement and refactor Elevator creation to use it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTc4NTg0", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-390578584", "createdAt": "2020-04-09T08:11:37Z", "commit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxMTozOFrOGDOKFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoxMTozOFrOGDOKFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMDg2OQ==", "bodyText": "Add comment about the interface", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406030869", "createdAt": "2020-04-09T08:11:38Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/model/StationElement.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opentripplanner.model;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTkxMDc2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-390591076", "createdAt": "2020-04-09T08:29:15Z", "commit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyOToxNlrOGDOzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODoyOToxNlrOGDOzAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MTM0NA==", "bodyText": "Use coordinate from parent stop", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406041344", "createdAt": "2020-04-09T08:29:16Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/model/Stop.java", "diffHunk": "@@ -66,11 +76,15 @@ public void setName(String name) {\n     }\n \n     public double getLat() {\n-        return coordinate.latitude();\n+        return coordinate == null ? 0 : coordinate.latitude();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTk2MzY4", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-390596368", "createdAt": "2020-04-09T08:36:32Z", "commit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNjozMlrOGDPDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODozNjozMlrOGDPDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NTYxOA==", "bodyText": "Change to StationElement", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406045618", "createdAt": "2020-04-09T08:36:32Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/model/Pathway.java", "diffHunk": "@@ -5,19 +5,27 @@\n \n     private static final long serialVersionUID = -2404871423254094109L;\n \n-    private static final int MISSING_VALUE = -999;\n-\n     private FeedScopedId id;\n \n-    private int pathwayType;\n+    private int pathwayMode;\n+\n+    private TransitEntity<FeedScopedId> fromStop;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjAxMzYz", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-390601363", "createdAt": "2020-04-09T08:43:28Z", "commit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzoyOFrOGDPTdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0MzoyOFrOGDPTdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTY1NA==", "bodyText": "Do not inline this", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r406049654", "createdAt": "2020-04-09T08:43:28Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/edgetype/StreetTransitLink.java", "diffHunk": "@@ -110,8 +110,10 @@ public State traverse(State s0) {\n                 return null;\n             }\n         }\n-        s1.incrementTimeInSeconds(stopVertex.getStreetToStopTime() + STL_TRAVERSE_COST);\n-        s1.incrementWeight(STL_TRAVERSE_COST + stopVertex.getStreetToStopTime());\n+\n+        var streetToStopTime = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d894d6331a27ed7e78e8ec1232ec359d27ea1517"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4df95bc6356e823094e657f6f072c4daeddc69", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/bb4df95bc6356e823094e657f6f072c4daeddc69", "committedDate": "2020-04-09T13:05:47Z", "message": "Extract common fields to StationElement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a057914f4a9b89aab29228edeb059fc23b559c8e", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a057914f4a9b89aab29228edeb059fc23b559c8e", "committedDate": "2020-04-09T13:13:04Z", "message": "Refactor StopToParentStationLinker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/99e3a52763028ace753c3306131d6fed64b98433", "committedDate": "2020-04-09T13:13:21Z", "message": "Use getStreetToStopTime if stop is not linked via pathways"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b751db6bc7e7a5b2b0bc2ed3bb181af252dcb239", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b751db6bc7e7a5b2b0bc2ed3bb181af252dcb239", "committedDate": "2020-04-09T13:08:58Z", "message": "Use getStreetToStopTime if stop is not linked via pathways"}, "afterCommit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/99e3a52763028ace753c3306131d6fed64b98433", "committedDate": "2020-04-09T13:13:21Z", "message": "Use getStreetToStopTime if stop is not linked via pathways"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjk3NjQ3", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-392697647", "createdAt": "2020-04-14T08:11:33Z", "commit": {"oid": "bb4df95bc6356e823094e657f6f072c4daeddc69"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxMTozM1rOGFDG2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxMTozM1rOGFDG2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Njk3MA==", "bodyText": "Move JavaDoc to getter.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r407946970", "createdAt": "2020-04-14T08:11:33Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/model/StationElement.java", "diffHunk": "@@ -1,10 +1,120 @@\n package org.opentripplanner.model;\n \n-public interface StationElement {\n+/**\n+ * Acts as the supertype for all entities, except stations, created from the GTFS stops table.\n+ * Most of the fileds are shared between the types, and eg. in pathways the namespace any of them\n+ * can be used as from and to.\n+ * */\n+public abstract class StationElement extends TransitEntity<FeedScopedId>  {\n \n-  /** Get the level name for the station element */\n-  abstract String getLevelName();\n+  protected FeedScopedId id;\n \n-  /** Get the relative level inside the station. Used eg. for calculating elevator hops */\n-  abstract double getLevelIndex();\n+  /**\n+   * Name of the station element if provided.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4df95bc6356e823094e657f6f072c4daeddc69"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzIwNjEw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-392720610", "createdAt": "2020-04-14T08:42:04Z", "commit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODA3MDQw", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-392807040", "createdAt": "2020-04-14T10:39:20Z", "commit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDozOToyMFrOGFIsAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NDoxM1rOGFI2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzODQwMQ==", "bodyText": "This is not just for GTFS, it also apply to the Netex import, so the original comment is probably better.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r408038401", "createdAt": "2020-04-14T10:39:20Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -33,8 +48,8 @@\n \n     private final OtpTransitService transitService;\n \n-    // Map of stops and their vertices in the graph\n-    private Map<Stop, TransitStopVertex> stopNodes = new HashMap<>();\n+    // Map of all gtfs stops and their vertices in the graph\n+    private Map<TransitEntity<FeedScopedId>, Vertex> stopNodes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0MTEwMQ==", "bodyText": "Not specific to GTFS, it is not implemented in the NeTEx import yet, but hopefully if we add that this code will be reused without any modifications.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#discussion_r408041101", "createdAt": "2020-04-14T10:44:13Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/AddTransitModelEntitiesToGraph.java", "diffHunk": "@@ -124,29 +142,183 @@ private void addGroupsOfStationsToGraph(Graph graph) {\n         }\n     }\n \n+    private void addEntrancesToGraph(Graph graph) {\n+        for (Entrance entrance : transitService.getAllEntrances()) {\n+            TransitEntranceVertex entranceVertex = new TransitEntranceVertex(graph, entrance);\n+            stopNodes.put(entrance, entranceVertex);\n+        }\n+    }\n+\n+    private void addPathwayNodesToGraph(Graph graph) {\n+        for (PathwayNode node : transitService.getAllPathwayNodes()) {\n+            TransitPathwayNodeVertex nodeVertex = new TransitPathwayNodeVertex(graph, node);\n+            stopNodes.put(node, nodeVertex);\n+        }\n+    }\n+\n+    private void addBoardingAreasToGraph(Graph graph) {\n+        for (BoardingArea boardingArea : transitService.getAllBoardingAreas()) {\n+            TransitBoardingAreaVertex boardingAreaVertex = new TransitBoardingAreaVertex(graph, boardingArea);\n+            stopNodes.put(boardingArea, boardingAreaVertex);\n+            if (boardingArea.getParentStop() != null) {\n+                new PathwayEdge(\n+                    boardingAreaVertex,\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingArea.getName()\n+                );\n+\n+                new PathwayEdge(\n+                    stopNodes.get(boardingArea.getParentStop()),\n+                    boardingAreaVertex,\n+                    boardingArea.getName()\n+                );\n+            }\n+        }\n+    }\n+\n     private void createPathwayEdgesAndAddThemToGraph(Graph graph) {\n         for (Pathway pathway : transitService.getAllPathways()) {\n             Vertex fromVertex = stopNodes.get(pathway.getFromStop());\n             Vertex toVertex = stopNodes.get(pathway.getToStop());\n \n-            if(fromVertex != null && toVertex != null) {\n-                if (pathway.isWheelchairTraversalTimeSet()) {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime(), pathway.getWheelchairTraversalTime());\n-                } else {\n-                    new PathwayEdge(fromVertex, toVertex, pathway.getTraversalTime());\n+            if (fromVertex != null && toVertex != null) {\n+                // Elevator\n+                if (pathway.getPathwayMode() == 5) {\n+                    createElevatorEdgesAndAddThemToGraph(graph, pathway, fromVertex, toVertex);\n+                }\n+                else {\n+                    new PathwayEdge(\n+                        fromVertex,\n+                        toVertex,\n+                        pathway.getName(),\n+                        pathway.getTraversalTime(),\n+                        pathway.getLength(),\n+                        pathway.getStairCount(),\n+                        pathway.getSlope(),\n+                        pathway.isPathwayModeWheelchairAccessible()\n+                    );\n+                    if (pathway.isBidirectional()) {\n+                        new PathwayEdge(\n+                            toVertex,\n+                            fromVertex,\n+                            pathway.getReversedName(),\n+                            pathway.getTraversalTime(),\n+                            pathway.getLength(),\n+                            -1 * pathway.getStairCount(),\n+                            -1 * pathway.getSlope(),\n+                            pathway.isPathwayModeWheelchairAccessible()\n+                        );\n+                    }\n                 }\n             }\n             else {\n-                if(fromVertex == null) {\n-                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway.getFromStop().getId());\n+                if (fromVertex == null) {\n+                    LOG.warn(\"The 'fromVertex' is missing for pathway from stop: \" + pathway\n+                        .getFromStop()\n+                        .getId());\n                 }\n-                if(toVertex == null) {\n-                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway.getToStop().getId());\n+                if (toVertex == null) {\n+                    LOG.warn(\"The 'toVertex' is missing for pathway to stop: \" + pathway\n+                        .getToStop()\n+                        .getId());\n                 }\n             }\n         }\n     }\n \n+    /**\n+     * Create elevator edges from GTFS pathways. As GTFS elevators are not vertices, but edges in\n+     * the GTFS pathway model, we have to model each possible movement as an onboard-offboard pair,\n+     * instead of having only one set of vertices per level and edges between them.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e3a52763028ace753c3306131d6fed64b98433"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7588d044251a68df8a44dfa8885908241078d73f", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/7588d044251a68df8a44dfa8885908241078d73f", "committedDate": "2020-04-15T09:25:28Z", "message": "Update javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4ff39fd59adf7e82efc1fc3fe51a6cbe1d90e07", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d4ff39fd59adf7e82efc1fc3fe51a6cbe1d90e07", "committedDate": "2020-04-15T09:26:03Z", "message": "Rename stop to stationElement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8d738f24bfcc49ad93f1e8825f54eeb69152fe", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/5c8d738f24bfcc49ad93f1e8825f54eeb69152fe", "committedDate": "2020-04-15T09:35:52Z", "message": "Make tests expect NPE when coordinate is unset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e43485ad53d7598087ed3db41d76a80a59da0aa8", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/e43485ad53d7598087ed3db41d76a80a59da0aa8", "committedDate": "2020-04-15T11:09:00Z", "message": "Fix usage of pathway check in TransitToTaggedStopsModule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71117f391249de999076f8ad9a8f36bc6a064ab", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c71117f391249de999076f8ad9a8f36bc6a064ab", "committedDate": "2020-04-15T11:10:52Z", "message": "Merge remote-tracking branch 'origin/dev-2.x' into pathways"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ef254e876446da0fac6bc4c30c8d3207433090", "author": {"user": {"login": "hannesj", "name": "Hannes Junnila"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/97ef254e876446da0fac6bc4c30c8d3207433090", "committedDate": "2020-04-15T11:41:06Z", "message": "Guard againist null\n\nFound a case in paris data when neither pathway nor pathway node has a name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzgwMjU3", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2994#pullrequestreview-393780257", "createdAt": "2020-04-15T13:37:26Z", "commit": {"oid": "97ef254e876446da0fac6bc4c30c8d3207433090"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2072, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}