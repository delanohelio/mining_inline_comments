{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDc0NDMw", "number": 3029, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMTozOFrODxjL1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMzozN1rODxjOzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjgzMjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/TransitRoutingConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMTozOFrOGFFBKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMTozOFrOGFFBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3ODI4Mw==", "bodyText": "This adds a logger to the class, but apparently no uses of that logger.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3029#discussion_r407978283", "createdAt": "2020-04-14T09:01:38Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/standalone/config/TransitRoutingConfig.java", "diffHunk": "@@ -2,12 +2,16 @@\n \n import org.opentripplanner.transit.raptor.api.request.DynamicSearchWindowCoefficients;\n import org.opentripplanner.transit.raptor.api.request.RaptorTuningParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * @see RaptorTuningParameters for documentaion of tuning parameters.\n  */\n public final class TransitRoutingConfig implements RaptorTuningParameters {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(TransitRoutingConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b804eef18e903b182d836163d36fc4e3d4a1ebd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjgzNTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/StorageConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMjoxM1rOGFFClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMjoxM1rOGFFClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3ODY0NQ==", "bodyText": "This adds a logger to the class, but apparently no uses of that logger.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3029#discussion_r407978645", "createdAt": "2020-04-14T09:02:13Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/standalone/config/StorageConfig.java", "diffHunk": "@@ -39,6 +42,8 @@\n  */\n public class StorageConfig {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(StorageConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b804eef18e903b182d836163d36fc4e3d4a1ebd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjg0MDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMzozN1rOGFFF0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowMzozN1rOGFFF0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3OTQ3Mg==", "bodyText": "This does correct the behavior of equals and hashcode, but since we're putting them in a list we probably don't even need semantic equality. Less stuff to maintain if we can determine they are not even needed...", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3029#discussion_r407979472", "createdAt": "2020-04-14T09:03:37Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "diffHunk": "@@ -335,13 +342,14 @@ public void logUnusedParameters(Logger log) {\n     public boolean equals(Object o) {\n         if (this == o) { return true; }\n         if (o == null || getClass() != o.getClass()) { return false; }\n-        NodeAdapter adapter = (NodeAdapter) o;\n-        return source.equals(adapter.source);\n+        NodeAdapter other = (NodeAdapter) o;\n+        return Objects.equals(source, other.source)\n+                && Objects.equals(contextPath, other.contextPath);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(source);\n+        return Objects.hash(source, contextPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b804eef18e903b182d836163d36fc4e3d4a1ebd"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1798, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}