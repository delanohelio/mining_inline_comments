{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjkwNjM2", "number": 3031, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo0MToxMVrODwVQQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxMzoyN1rODyaXNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDA2NDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/mapping/FeedScopedIdMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo0MToxMVrOGDRWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozMTo1OVrOGGEQJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MzE4Ng==", "bodyText": "Use the SEPARATOR constant here.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r406083186", "createdAt": "2020-04-09T09:41:11Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/api/mapping/FeedScopedIdMapper.java", "diffHunk": "@@ -1,22 +1,22 @@\n package org.opentripplanner.api.mapping;\n \n-import org.opentripplanner.api.model.ApiFeedScopedId;\n import org.opentripplanner.model.FeedScopedId;\n \n public class FeedScopedIdMapper {\n \n-    public static FeedScopedId mapToDomain(ApiFeedScopedId arg) {\n-        if (arg == null) {\n-            return null;\n-        }\n-        return new FeedScopedId(arg.agency, arg.id);\n+\n+    private static final String SEPARATOR = \":\";\n+\n+    public static FeedScopedId mapToDomain(String api) {\n+        if (api == null) { return null; }\n+        String[] parts = api.split(SEPARATOR, 2);\n+        return new FeedScopedId(parts[0], parts[1]);\n     }\n \n-    public static ApiFeedScopedId mapToApi(FeedScopedId arg) {\n+    public static String mapToApi(FeedScopedId arg) {\n         if (arg == null) {\n             return null;\n         }\n-        return new ApiFeedScopedId(arg.getFeedId(), arg.getId());\n+        return arg.getFeedId() + \":\" + arg.getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358859c83a5bd11a1422445807bd66804982e618"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNDMwOQ==", "bodyText": "This is fixed.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r409014309", "createdAt": "2020-04-15T17:31:59Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/mapping/FeedScopedIdMapper.java", "diffHunk": "@@ -1,22 +1,22 @@\n package org.opentripplanner.api.mapping;\n \n-import org.opentripplanner.api.model.ApiFeedScopedId;\n import org.opentripplanner.model.FeedScopedId;\n \n public class FeedScopedIdMapper {\n \n-    public static FeedScopedId mapToDomain(ApiFeedScopedId arg) {\n-        if (arg == null) {\n-            return null;\n-        }\n-        return new FeedScopedId(arg.agency, arg.id);\n+\n+    private static final String SEPARATOR = \":\";\n+\n+    public static FeedScopedId mapToDomain(String api) {\n+        if (api == null) { return null; }\n+        String[] parts = api.split(SEPARATOR, 2);\n+        return new FeedScopedId(parts[0], parts[1]);\n     }\n \n-    public static ApiFeedScopedId mapToApi(FeedScopedId arg) {\n+    public static String mapToApi(FeedScopedId arg) {\n         if (arg == null) {\n             return null;\n         }\n-        return new ApiFeedScopedId(arg.getFeedId(), arg.getId());\n+        return arg.getFeedId() + \":\" + arg.getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4MzE4Ng=="}, "originalCommit": {"oid": "358859c83a5bd11a1422445807bd66804982e618"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDA4MDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/api/model/ApiRouterInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwOTo0NTo0M1rOGDRgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozMzo1OVrOGGEVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NTc0OQ==", "bodyText": "Eliminate use of adapter here", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r406085749", "createdAt": "2020-04-09T09:45:43Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/api/model/ApiRouterInfo.java", "diffHunk": "@@ -31,7 +32,7 @@\n     \n     @JsonSerialize(using= GeometrySerializer.class)\n     @JsonDeserialize(using= GeometryDeserializer.class)\n-    @XmlJavaTypeAdapter(value=GeometryAdapter.class,type=Geometry.class)\n+    @XmlJavaTypeAdapter(value= GeometryAdapter.class,type=Geometry.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e00532a06835777fd5d9c6730b23ddacffa5434"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNTU4OQ==", "bodyText": "After looking closer at this it is a bit of work to remove the Adapters for the external types, so I left them as is. The XML adapters are removed, with the removal of XML support.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r409015589", "createdAt": "2020-04-15T17:33:59Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/api/model/ApiRouterInfo.java", "diffHunk": "@@ -31,7 +32,7 @@\n     \n     @JsonSerialize(using= GeometrySerializer.class)\n     @JsonDeserialize(using= GeometryDeserializer.class)\n-    @XmlJavaTypeAdapter(value=GeometryAdapter.class,type=Geometry.class)\n+    @XmlJavaTypeAdapter(value= GeometryAdapter.class,type=Geometry.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4NTc0OQ=="}, "originalCommit": {"oid": "5e00532a06835777fd5d9c6730b23ddacffa5434"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDE2OTkwOnYy", "diffSide": "RIGHT", "path": "docs/OTP2-MigrationGuide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxMDowMFrOGDSX0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDoxMDowMFrOGDSX0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5OTkyMQ==", "bodyText": "Remove the header description from the migration guide, it may be nice to have in the response but we don't want anyone to depend on this as an API \"feature\".", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r406099921", "createdAt": "2020-04-09T10:10:00Z", "author": {"login": "abyrd"}, "path": "docs/OTP2-MigrationGuide.md", "diffHunk": "@@ -37,6 +37,9 @@ These properties changed names from:\n   - `searchWindowUsed`\n   - `nextDateTime`\n   - `prevDateTime`\n-   \n+\n+### Changes to the Index API\n+- Error handling is improved, this is now consistently applied and uses build in framework support. \n+  - The HTTP 400 and 404 response now contains an error message in plain text in addition to the header \"FOUR HUNDRED\" and \"FOUR ZERO FOUR\".   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7864b8b7e7f278bc4af04332c32fb175c084064"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDI0NDgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/opentripplanner/updater/stoptime/TimetableSnapshotSourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMjowNVrOGDTFYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMDozMjowNVrOGDTFYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjExMTU4NQ==", "bodyText": "delete rather then comment", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r406111585", "createdAt": "2020-04-09T10:32:05Z", "author": {"login": "abyrd"}, "path": "src/test/java/org/opentripplanner/updater/stoptime/TimetableSnapshotSourceTest.java", "diffHunk": "@@ -53,9 +53,14 @@\n \n     @BeforeClass\n     public static void setUpClass() throws Exception {\n+        // The \".turnOnSetAgencyToFeedIdForAllElements()\" is commented out so it can be\n+        // removed from the code, it in no longer in use. It is not deleted here to better\n+        // allow the reader of the test understand how the test once worked. There should\n+        // be new test to replace this one.\n+\n         context = contextBuilder(ConstantsForTests.FAKE_GTFS)\n                 .withIssueStoreAndDeduplicator(graph)\n-                .turnOnSetAgencyToFeedIdForAllElements()\n+                //.turnOnSetAgencyToFeedIdForAllElements()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0267effdb62251a58b4988f17202949f3d916f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTg3MzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/graph/GraphIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxMzoyN1rOGGcDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxMzoyN1rOGGcDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNDM0Mg==", "bodyText": "Doc on this method, this is not threadsafe and is used by updaters.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3031#discussion_r409404342", "createdAt": "2020-04-16T09:13:27Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/graph/GraphIndex.java", "diffHunk": "@@ -111,30 +105,68 @@ public GraphIndex (Graph graph) {\n         LOG.info(\"GraphIndex init complete.\");\n     }\n \n-  public Map<String, Map<String, Agency>> getAgenciesForFeedId() {\n-    return agenciesForFeedId;\n+  public Collection<Agency> getAgenciesForFeedId(String feedId) {\n+    return agenciesForFeedId.get(feedId);\n+  }\n+\n+  public Agency getAgency(String feedId, String agencyId) {\n+    for (Agency agency : agenciesForFeedId.get(feedId)) {\n+      if(agency.getId().equals(agencyId)) {\n+        return agency;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Construct a set of all Agencies in this graph, spanning across all feed IDs. I am creating this\n+   * method only to allow merging pull request #2032 which adds GraphQL. This should probably be\n+   * done some other way, see javadoc on getAgencyWithoutFeedId.\n+   */\n+  public Collection<Agency> getAllAgencies() {\n+    return agenciesForFeedId.values();\n   }\n \n   public Map<FeedScopedId, Operator> getOperatorForId() {\n     return operatorForId;\n   }\n \n+  /**\n+   * Get a list of all operators spanning across all feeds.\n+   */\n+  public Collection<Operator> getAllOperators() {\n+    return getOperatorForId().values();\n+  }\n+\n   public Map<String, FeedInfo> getFeedInfoForId() {\n     return feedInfoForId;\n   }\n \n-  public Map<FeedScopedId, Stop> getStopForId() {\n-    return stopForId;\n+  public Stop getStopForId(FeedScopedId id) {\n+    return stopForId.get(id);\n+  }\n+\n+  public Collection<Stop> getAllStops() {\n+    return stopForId.values();\n   }\n \n   public Map<FeedScopedId, Trip> getTripForId() {\n     return tripForId;\n   }\n \n-  public Map<FeedScopedId, Route> getRouteForId() {\n-    return routeForId;\n+  public Route getRouteForId(FeedScopedId id) {\n+    return routeForId.get(id);\n+  }\n+\n+  public Collection<Route> getAllRoutes() {\n+    return routeForId.values();\n   }\n \n+  public void addRoutes(Route route) {\n+    routeForId.put(route.getId(), route);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a711fe0eccd7c063f02637e2c2da61ef068dae71"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1801, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}