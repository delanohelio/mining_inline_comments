{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwODI3NzAw", "number": 2988, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMDoxOVrODklyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMTozN1rODklz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njk0MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/updater/stoptime/TripPatternCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMDoxOVrOFw_3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMDoxOVrOFw_3pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMjQwNA==", "bodyText": "Annotate the trip parameter here and on Siri trip pattern cache with @NotNull", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2988#discussion_r386922404", "createdAt": "2020-03-03T10:20:19Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/updater/stoptime/TripPatternCache.java", "diffHunk": "@@ -28,12 +29,13 @@\n      * and edges for this trip pattern are also created in the graph.\n      * \n      * @param stopPattern stop pattern to retrieve/create trip pattern\n-     * @param route route of new trip pattern in case a new trip pattern will be created\n+     * @param trip the trip the new trip pattern will be created for\n      * @param graph graph to add vertices and edges in case a new trip pattern will be created\n      * @return cached or newly created trip pattern\n      */\n     public synchronized TripPattern getOrCreateTripPattern(final StopPattern stopPattern,\n-            final Route route, final Graph graph) {\n+            final Trip trip, final Graph graph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db4dff840021bb25db021e5a89e31e1999190db"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njk0ODQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/model/TripPattern.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMTozN1rOFw_6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoyMTozN1rOFw_6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMzE2MA==", "bodyText": "rename this method, \"previous\" has a time or sequence connotation. The method is general enough that it could be setHopGeometriesFromTripPattern.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/2988#discussion_r386923160", "createdAt": "2020-03-03T10:21:37Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/model/TripPattern.java", "diffHunk": "@@ -155,6 +155,35 @@ public void setHopGeometry(int i, LineString hopGeometry) {\n         this.hopGeometries[i] = CompactLineString.compactLineString(hopGeometry,false);\n     }\n \n+    /**\n+     * This will copy the geometry from another TripPattern to this one. It checks if each hop is\n+     * between the same stops before copying that hop geometry. If the stops are different, a\n+     * straight-line hop-geometry will be used instead.\n+     *\n+     * @param other TripPattern to copy geometry from\n+     */\n+    public void setHopGeometriesFromPreviousTripPattern(TripPattern other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9db4dff840021bb25db021e5a89e31e1999190db"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1766, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}