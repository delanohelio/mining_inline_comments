{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDEyNTU5", "number": 3219, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyMTo0MlrOEwpvBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMzoxNlrOEwyHBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDUwODg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/ForwardPathMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyMTo0MlrOHmWIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo0Njo1M1rOHminGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDUxMg==", "bodyText": "What happens, when there are multiple legs generated from on AccessPath?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3219#discussion_r509970512", "createdAt": "2020-10-22T08:21:42Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/ForwardPathMapper.java", "diffHunk": "@@ -99,7 +102,12 @@ private void setRangeRaptorIterationDepartureTime(int iterationDepartureTime) {\n             from.stop(),\n             departureTime,\n             from.arrivalTime(),\n+            RaptorCostConverter.toOtpDomainCost(from.cost()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89698fe327d70c237a5613f845bc19e902452986"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3NTAwMg==", "bodyText": "We do not calculate the cost \"properly\" for the street leg/legs - we threat them as \"one walking leg\" in Raptor for each access/transfer/egress(Raptor leg). The cost returned on the API is the cost calculated by Raptor, not AStar, hence the simplification above. This is something we want to fix, but until then this PR just assign the entire cost (calculated by Raptor) on the first API leg in the access/transfer/egress leg(which may consist of more than one API Leg). If there is more than one API Leg, the reminding leg-generalized-cost is set to 0(zero).", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3219#discussion_r510175002", "createdAt": "2020-10-22T13:46:53Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/ForwardPathMapper.java", "diffHunk": "@@ -99,7 +102,12 @@ private void setRangeRaptorIterationDepartureTime(int iterationDepartureTime) {\n             from.stop(),\n             departureTime,\n             from.arrivalTime(),\n+            RaptorCostConverter.toOtpDomainCost(from.cost()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDUxMg=="}, "originalCommit": {"oid": "89698fe327d70c237a5613f845bc19e902452986"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTg4MTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/mapping/RaptorPathToItineraryMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMzoxNlrOHmjZ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowMzoxNlrOHmjZ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4ODAzMA==", "bodyText": "Code cleanup: A basic principle of programming is to have methods with no side-effects. So, I changed this method to return the mapped legs, not map and insert into the result.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3219#discussion_r510188030", "createdAt": "2020-10-22T14:03:16Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/mapping/RaptorPathToItineraryMapper.java", "diffHunk": "@@ -114,24 +113,23 @@ public Itinerary createItinerary(Path<TripSchedule> path) {\n         return itinerary;\n     }\n \n-    private void mapAccessLeg(\n-            List<Leg> legs,\n-            AccessPathLeg<TripSchedule> accessPathLeg\n-    ) {\n+    private List<Leg> mapAccessLeg(AccessPathLeg<TripSchedule> accessPathLeg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac61e0424b3a7c82fc432ffe6cd09003061fe293"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1706, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}