{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODI4NDU5", "number": 3108, "title": "Optimize SimpleStreetSplitter: two-stage search, remove sorting", "bodyText": "@hannesj observed slow response times in OTP2, did some profiling, and found that 74% of the time was spent in linking origins and destinations to the streets. Part of the problem is that linking is repeated for access-to-transit and direct street searches within a single request. But the linking itself is very slow. He noticed that it was always searching a 1km radius and tried lowering this, which reduced the time spent in linking by 80-90%.\nThis makes sense as the search area increases as the square of the radius, and each road checked may have a large number of segments. In the past we would try a smaller radius then increase it, and in R5 we also adopted this approach. The current street linker in OTP2 even has a comment suggesting that might be a better approach.\nThis PR adopts the same approach, searching within 100 meters before jumping up to 1km. It also changes the rather complex criteria for finding multiple edges, which seemed to be tailored for urban planning analysis purposes based on some (probably mistaken) assumption that certain calculations were non-deterministic.\nThis is an optimization of an implementation detail and does not appear on the roadmap.\nThere is no testing specifically for the optimized linker. There are several existing linking tests and a SimpleStreetSplitterTest which should be reviewed and must continue to pass.\nAn explanation of this optimization is not needed in the user documentation because it does not affect outcomes. However it must be explained in the Javadoc, and it would be good to have a short explanation in user docs of the fact that OTP links to multiple edges as long as they are within a certain threshold of the closest edge.\n\n changelog: add a bullet point to the changelog file with description and link to the linked issue\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap", "createdAt": "2020-06-19T00:42:03Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3108", "merged": true, "mergeCommit": {"oid": "17415d882767e7cd24b7682691e4685c751bc04e"}, "closed": true, "closedAt": "2020-08-25T10:10:07Z", "author": {"login": "abyrd"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsf35uAH2gAyNDM2ODI4NDU5Ojk4Njk3ZWE0ZWFmNzlmMzZmMzhiNTI1YWIzYmE2ZDMyNTA5NjZkYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCTyBXgFqTQ3NDMwMjEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "98697ea4eaf79f36f38b525ab3ba6d3250966da1", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/98697ea4eaf79f36f38b525ab3ba6d3250966da1", "committedDate": "2020-06-18T15:06:52Z", "message": "Optimize SimpleStreetSplitter: two-stage search, remove sorting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a0c79c9bc9261218d560bfeaec6def0868fe1a", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/18a0c79c9bc9261218d560bfeaec6def0868fe1a", "committedDate": "2020-08-04T08:24:57Z", "message": "Code cleanup of the SimpleStreetSplitter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec904d2f8c49213cccec99a250f22b06f7c1a786", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/ec904d2f8c49213cccec99a250f22b06f7c1a786", "committedDate": "2020-08-04T08:28:03Z", "message": "Merge branch 'dev-2.x' into optimize-linker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjA5Mjcz", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3108#pullrequestreview-460609273", "createdAt": "2020-08-04T08:35:53Z", "commit": {"oid": "18a0c79c9bc9261218d560bfeaec6def0868fe1a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f55739ca4048f72e526b3e2f2164753a66c1932a", "author": {"user": {"login": "gmellemstrand", "name": null}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f55739ca4048f72e526b3e2f2164753a66c1932a", "committedDate": "2020-08-05T09:03:51Z", "message": "Merge branch 'dev-2.x' into optimize-linker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzQzMDA0", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3108#pullrequestreview-462343004", "createdAt": "2020-08-06T09:10:58Z", "commit": {"oid": "f55739ca4048f72e526b3e2f2164753a66c1932a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToxMDo1OFrOG8qLNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToxMDo1OFrOG8qLNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1ODc0MA==", "bodyText": "What is the purpose of e.getToVertex().getIncoming().contains(e) ? I think we should add a \"business method\" to edge witch make this easier to understand, and call that in the filter(...) method above:\nboolean Edge.isConnectedToGraph() {\n    return getToVertex().getIncoming().contains(this);\n}\n\nIt might not be needed, if so we can delete it.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3108#discussion_r466258740", "createdAt": "2020-08-06T09:10:58Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/graph_builder/linking/SimpleStreetSplitter.java", "diffHunk": "@@ -227,124 +245,86 @@ public boolean link(Vertex vertex, TraverseMode traverseMode, RoutingRequest opt\n \n         final double DUPLICATE_WAY_EPSILON_DEGREES = SphericalDistanceLibrary.metersToDegrees(DUPLICATE_WAY_EPSILON_METERS);\n \n-        final TraverseModeSet traverseModeSet;\n+        final TraverseModeSet traverseModeSet = new TraverseModeSet(traverseMode);\n         if (traverseMode == TraverseMode.BICYCLE) {\n-            traverseModeSet = new TraverseModeSet(traverseMode, TraverseMode.WALK);\n-        } else {\n-            traverseModeSet = new TraverseModeSet(traverseMode);\n-        }\n-        // We sort the list of candidate edges by distance to the stop\n-        // This should remove any issues with things coming out of the spatial index in different orders\n-        // Then we link to everything that is within DUPLICATE_WAY_EPSILON_METERS of of the best distance\n-        // so that we capture back edges and duplicate ways.\n-        List<StreetEdge> candidateEdges = idx.query(env).stream()\n-            .filter(streetEdge -> streetEdge instanceof  StreetEdge)\n-            .map(edge -> (StreetEdge) edge)\n-            // note: not filtering by radius here as distance calculation is expensive\n-            // we do that below.\n-            .filter(edge -> edge.canTraverse(traverseModeSet) &&\n-                // only link to edges still in the graph.\n-                edge.getToVertex().getIncoming().contains(edge))\n-            .collect(Collectors.toList());\n-\n-        // Make a map of distances to all edges.\n-        final TObjectDoubleMap<Edge> distances = new TObjectDoubleHashMap<>();\n-        for (StreetEdge e : candidateEdges) {\n-            distances.put(e, distance(vertex, e, xscale));\n-        }\n-\n-        // Sort the list.\n-        Collections.sort(candidateEdges, (o1, o2) -> {\n-            double diff = distances.get(o1) - distances.get(o2);\n-            // A Comparator must return an integer but our distances are doubles.\n-            if (diff < 0)\n-                return -1;\n-            if (diff > 0)\n-                return 1;\n-            return 0;\n-        });\n-\n-        // find the closest candidate edges\n-        if (candidateEdges.isEmpty() || distances.get(candidateEdges.get(0)) > radiusDeg) {\n-            // We only link to stops if we are searching for origin/destination and for that we need transitStopIndex.\n-            if (destructiveSplitting || transitStopIndex == null) {\n-                return false;\n-            }\n-            LOG.debug(\"No street edge was found for {}\", vertex);\n-            // We search for closest stops (since this is only used in origin/destination linking if no edges were found)\n-            // in the same way the closest edges are found.\n-            List<TransitStopVertex> candidateStops = new ArrayList<>();\n-            transitStopIndex.query(env).forEach(candidateStop -> candidateStops.add((TransitStopVertex) candidateStop));\n-\n-            final TObjectDoubleMap<Vertex> stopDistances = new TObjectDoubleHashMap<>();\n-\n-            for (TransitStopVertex t : candidateStops) {\n-                stopDistances.put(t, distance(vertex, t, xscale));\n-            }\n-\n-            Collections.sort(candidateStops, (o1, o2) -> {\n-                    double diff = stopDistances.get(o1) - stopDistances.get(o2);\n-                    if (diff < 0) {\n-                        return -1;\n-                    }\n-                    if (diff > 0) {\n-                        return 1;\n+            traverseModeSet.setWalk(true);\n+        }\n+        // Scope block to avoid confusing edge-related local variables with stop-related variables below.\n+        {\n+            // Perform several transformations at once on the edges returned by the index.\n+            // Only consider street edges traversable by the given mode and still present in the graph.\n+            // Calculate a distance to each of those edges, and keep only the ones within the search radius.\n+            List<DistanceTo<StreetEdge>> candidateEdges = idx.query(env).stream()\n+                    .filter(StreetEdge.class::isInstance)\n+                    .map(StreetEdge.class::cast)\n+                    .filter(e -> e.canTraverse(traverseModeSet) && e.getToVertex().getIncoming().contains(e))\n+                    .map(e -> new DistanceTo<>(e, distance(vertex, e, xscale)))\n+                    .filter(ead -> ead.distanceDegreesLat < radiusDeg)\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55739ca4048f72e526b3e2f2164753a66c1932a"}, "originalPosition": 219}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8cf79e11f369efe358aa3bb95d3f8b622b32557", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/f8cf79e11f369efe358aa3bb95d3f8b622b32557", "committedDate": "2020-08-20T14:13:48Z", "message": "lambda syntax in HashGridSpatialIndex, comment on efficiency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6403315c727ea08ad63c4dba5a7b33e7b12db92", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/c6403315c727ea08ad63c4dba5a7b33e7b12db92", "committedDate": "2020-08-20T14:18:37Z", "message": "factor out edgeReachableFromGraph check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db9188ddd824531efa380d08ec48316bde4acd6", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/0db9188ddd824531efa380d08ec48316bde4acd6", "committedDate": "2020-08-20T14:44:26Z", "message": "fix double-increment, ensure unique stop IDs and labels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d36d8194bf32dcb5fc372dda16c8abccca783994", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d36d8194bf32dcb5fc372dda16c8abccca783994", "committedDate": "2020-08-20T15:19:40Z", "message": "compare link edges in order of increasing length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60bdd900d06a2e12677d29cdec116cf33d259f6", "author": {"user": {"login": "abyrd", "name": "Andrew Byrd"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a60bdd900d06a2e12677d29cdec116cf33d259f6", "committedDate": "2020-08-20T15:25:49Z", "message": "Merge branch 'dev-2.x' into optimize-linker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e499424f43c0bf73b3cc39dcd9399d0245a1b0", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/b1e499424f43c0bf73b3cc39dcd9399d0245a1b0", "committedDate": "2020-08-25T08:21:26Z", "message": "Merge branch 'dev-2.x' into optimize-linker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzAyMTI2", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3108#pullrequestreview-474302126", "createdAt": "2020-08-25T09:27:55Z", "commit": {"oid": "a60bdd900d06a2e12677d29cdec116cf33d259f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2141, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}