{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzM0Mjcz", "number": 3055, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyOTozNVrOD5UtHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0NDoxMVrOD5VByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM0NjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/api/path/Path.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyOTozNVrOGQhbTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyOTozNVrOGQhbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3ODA2MA==", "bodyText": "Clarify Javadoc: \"all results found in previous iterations are kept\" at the egress stations, but not in the main search itself, where the range raptor optimization depends on kicking out states from previous (later departure) iterations.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r419978060", "createdAt": "2020-05-05T09:29:35Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/transit/raptor/api/path/Path.java", "diffHunk": "@@ -43,13 +45,23 @@ private Path(int startTime, int endTime, int numberOfTransfers, int generalizedC\n         this.egressPathLeg = null;\n     }\n \n-    public Path(AccessPathLeg<T> accessLeg, int generalizedCost) {\n-        this.accessLeg = accessLeg;\n-        this.egressPathLeg = findEgressLeg(accessLeg);\n+    public Path(int iteration, AccessPathLeg<T> accessLeg, int generalizedCost) {\n+        this.iteration = iteration;\n         this.startTime = accessLeg.fromTime();\n-        this.endTime = egressPathLeg.toTime();\n         this.numberOfTransfers = countNumberOfTransfers(accessLeg);\n         this.generalizedCost = generalizedCost;\n+        this.accessLeg = accessLeg;\n+        this.egressPathLeg = findEgressLeg(accessLeg);\n+        this.endTime = egressPathLeg.toTime();\n+    }\n+\n+    /**\n+     * The Range Raptor iteration. This can be used in the path-pareto-function to make sure\n+     * all results found in previous iterations are kept, and not dominated by new results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM5OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0NDoxMVrOGQh7zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTowMzo0OVrOGQ7e9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NjM4MA==", "bodyText": "We discussed the fact that this optimization cuts about 50% of the run time. It is the most effective optimization, and a paper came out in January explaining why it is so effective. Javadoc should be updated to include that reference.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r419986380", "createdAt": "2020-05-05T09:44:11Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java", "diffHunk": "@@ -72,12 +74,16 @@ public boolean isReachedCurrentRound() {\n         return reachedCurrentRound;\n     }\n \n+    public void setRangeRaptorIteration(int iteration) {\n+        this.iteration = iteration;\n+    }\n+\n     public boolean isEmpty() {\n         return paths.isEmpty();\n     }\n \n     public boolean qualify(int departureTime, int arrivalTime, int numberOfTransfers, int cost) {\n-        return paths.qualify(Path.dummyPath(departureTime, arrivalTime, numberOfTransfers, cost));\n+        return paths.qualify(Path.dummyPath(iteration, departureTime, arrivalTime, numberOfTransfers, cost));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQwNDk4MA==", "bodyText": "I have added some documentation and a reference to the paper.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3055#discussion_r420404980", "createdAt": "2020-05-05T21:03:49Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/path/DestinationArrivalPaths.java", "diffHunk": "@@ -72,12 +74,16 @@ public boolean isReachedCurrentRound() {\n         return reachedCurrentRound;\n     }\n \n+    public void setRangeRaptorIteration(int iteration) {\n+        this.iteration = iteration;\n+    }\n+\n     public boolean isEmpty() {\n         return paths.isEmpty();\n     }\n \n     public boolean qualify(int departureTime, int arrivalTime, int numberOfTransfers, int cost) {\n-        return paths.qualify(Path.dummyPath(departureTime, arrivalTime, numberOfTransfers, cost));\n+        return paths.qualify(Path.dummyPath(iteration, departureTime, arrivalTime, numberOfTransfers, cost));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NjM4MA=="}, "originalCommit": {"oid": "8141c27b87c0acfbe4f137aa323eafc1ddcd58d9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1819, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}