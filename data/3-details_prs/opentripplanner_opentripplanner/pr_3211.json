{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjQ4NTY3", "number": 3211, "title": "Cleanup transit entity", "bodyText": "During review of resent RealTime related PRs, we noticed that the TransitEntity could finally be cleaned up - only a fey entities had String ids, and not FeddeScopedIds. Also, we have had some bugs related to the equals and hashCode functions of some of the transit entities witch did not use equality (the id), but instead based the equals on other fields. This is especially dangerous for mutable fields since HashSet and HashMap cashes the hash - so the entire set/map must be rehashed if some of these fields changed. We can use the id for equals and hashCode because most of the entities are persistent - OTP only read these, and never assign any ids. There are some exceptions for RealTime events and these should be handled case-by-case. But, for new entities the RT code is responsible for generating some kind of unique ids to new entities.\n\n\nThis is a pure code cleanup PR - now functionality is changed. There is one exception, in SiriTimetableSnapshotSource TripPatterns where created without an id - no id set. This is not possible any more, so a unique id is generated and set also in this case.\n\n\n issue: There is no issue for this, this is a pure clean code thing.\n\n\n roadmap: No\n\n\n tests: Unit tests are updated and a few manual tests are run to verify that everything works.\n\n\n formatting: Yes\n\n\n documentation: A few places in the code is updated with new JavaDoc.\n\n\n changelog: No functional changes; Hence no changelog item.\n\n\nTo be completed by @opentripplanner/plc:\n\n reviews and approvals by 2 members, ideally from different organizations\n after merging: update the relevant card on the roadmap", "createdAt": "2020-10-08T23:27:43Z", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211", "merged": true, "mergeCommit": {"oid": "1f5dbb5a354c79535cf8463db3279ccd06e7e637"}, "closed": true, "closedAt": "2020-10-20T15:19:43Z", "author": {"login": "t2gran"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQqLytgH2gAyNTAwMjQ4NTY3OjkxNmU3NWJlMTZmMzU2ZGE1Y2ZhYzJmNmY1YjgzNWIwZjY0YzY5NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUaLp9gBqjM4OTkyNzAwNDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "916e75be16f356da5cfac2f6f5b835b0f64c6951", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/916e75be16f356da5cfac2f6f5b835b0f64c6951", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Make FeedInfo immutable and a NONE TransitEntity. This commit also remove the GenerateMissingIds, used to generate FeedInfo ids, but GTFS library we use do this already and NeTEx do not have FeedInfo, it just have a static shared configurable feedId."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879c69549eadd14f67e94882ac4cb8b2f5b7674a", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/879c69549eadd14f67e94882ac4cb8b2f5b7674a", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Make StopTimeKey a TransitEntity with a FeedScopeId, this prepare for inlining the generic type on TransitEntity, all entities are now FeedScopedIds."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d57c16470beca49f137f0c7b8f7097482e4a9137", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/d57c16470beca49f137f0c7b8f7097482e4a9137", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Remove generic type argument from TransitEntity, the 'id' is now a FeedScopedId."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "236c05560fabc07658d98c2b68345c83ade4446f", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/236c05560fabc07658d98c2b68345c83ade4446f", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Encapsulate id as \"read-only\" in TransitEntity. This require some refactorings, like generating the TripPattern id at the time it is created, not as a post processing step. It also require all sub-classes of transit entity to have a constructor with the id as a parameter. THIS COMMIT COMPILES, BUT TESTS FAILS BECAUSE GENERATING TRIP PATTERN IDS IS LEFT TO THE NEXT COMMIT."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "945184168355309126bbeb74919f6d3df1d37fa6", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/945184168355309126bbeb74919f6d3df1d37fa6", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Generate TripPattern id BEFORE creating new pattern to be able to make the `TripPattern.id` read-only."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a79b525f4fe9f231390d9cbb2d097eafbb994b5f", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/a79b525f4fe9f231390d9cbb2d097eafbb994b5f", "committedDate": "2020-10-08T22:15:30Z", "message": "Clean code: Generate TripPattern id BEFORE creating new pattern to be able to make the `TripPattern.id` read-only."}, "afterCommit": {"oid": "945184168355309126bbeb74919f6d3df1d37fa6", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/945184168355309126bbeb74919f6d3df1d37fa6", "committedDate": "2020-10-08T23:28:55Z", "message": "Clean code: Generate TripPattern id BEFORE creating new pattern to be able to make the `TripPattern.id` read-only."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ae629e67912dd4f984dd6300e3e1397806e09c", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/58ae629e67912dd4f984dd6300e3e1397806e09c", "committedDate": "2020-10-12T09:10:18Z", "message": "Merge branch 'dev-2.x' into otp2_cleanup_TransitEntity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d423d4ca017576d59bc10bc58da6b7c53405961", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/1d423d4ca017576d59bc10bc58da6b7c53405961", "committedDate": "2020-10-15T09:18:49Z", "message": "Merge remote-tracking branch 'otp/dev-2.x' into otp2_cleanup_TransitEntity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzgzNjc5", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211#pullrequestreview-512783679", "createdAt": "2020-10-20T14:30:51Z", "commit": {"oid": "945184168355309126bbeb74919f6d3df1d37fa6"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOHlAAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozMDo1MVrOHlAAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1OTQ3Nw==", "bodyText": "It would be good to have a comment explaining why unsynchronized increment-and-read is not problematic here. I see that this is called from one synchronized method, but also from one other unsynchronized method and it's not immediately obvious whether they can both run concurrently on different threads.\nOr to avoid placing lots of special conditions on use of this method it could just be synchronized (which has very low cost when there's no contention).", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3211#discussion_r508559477", "createdAt": "2020-10-20T14:30:51Z", "author": {"login": "abyrd"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriTripPatternIdGenerator.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.opentripplanner.ext.siri;\n+\n+import org.opentripplanner.gtfs.GenerateTripPatternsOperation;\n+import org.opentripplanner.model.FeedScopedId;\n+import org.opentripplanner.model.Route;\n+import org.opentripplanner.model.Trip;\n+\n+class SiriTripPatternIdGenerator {\n+  private int counter = 0;\n+\n+  /**\n+   * Generate unique trip pattern code for real-time added trip pattern. This function roughly\n+   * follows the format of {@link GenerateTripPatternsOperation#generateUniqueIdForTripPattern(Route, int)}.\n+   * <p>\n+   * The generator add a postfix 'RT' to indicate that this trip pattern is generated at REAL-TIME.\n+   */\n+  FeedScopedId generateUniqueTripPatternId(Trip trip) {\n+    Route route = trip.getRoute();\n+    FeedScopedId routeId = route.getId();\n+    String directionId = trip.getDirectionId();\n+    if( directionId == null) { directionId = \"\"; }\n+\n+    // OBA library uses underscore as separator, we're moving toward colon.\n+    String id = String.format(\"%s:%s:%03d:RT\", routeId.getId(), directionId, ++counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "945184168355309126bbeb74919f6d3df1d37fa6"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0094a8295b634213b5b64f8143629ce0cf527d", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/be0094a8295b634213b5b64f8143629ce0cf527d", "committedDate": "2020-10-20T15:05:40Z", "message": "Made the SiriTripPatternIdGenerator thread safe, by using a AtomicInteger for the index."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d29b9b3b0e1d6d355c31fc2c188cfdc25aa8e23", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/6d29b9b3b0e1d6d355c31fc2c188cfdc25aa8e23", "committedDate": "2020-10-20T15:00:20Z", "message": "Made the SiriTripPatternIdGenerator thread safe, by using a AtomicInteger for the index."}, "afterCommit": {"oid": "be0094a8295b634213b5b64f8143629ce0cf527d", "author": {"user": {"login": "t2gran", "name": "Thomas Gran"}}, "url": "https://github.com/opentripplanner/OpenTripPlanner/commit/be0094a8295b634213b5b64f8143629ce0cf527d", "committedDate": "2020-10-20T15:05:40Z", "message": "Made the SiriTripPatternIdGenerator thread safe, by using a AtomicInteger for the index."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1993, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}