{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzMzMTAy", "number": 3238, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0NjozNFrOE3O7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNjoyMFrOE4HlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzUxNjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0NjozNFrOHwdQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0NjozNFrOHwdQZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3MzAyOA==", "bodyText": "Could you add a comment on the above method on why we skip the noon - 12 hours calculation here. Comment:\n// In OTP LocalDate is sometimes used to represent ServiceDate. This calculation is \"safe\" because \n// calculations on LocalDate ignore TimeZone adjustments, just like the ServiceDate. So, in this case it is not \n// necessary to: 'NOON - 12 hours + secondsSinceStartOfDay'\n\nThis method would also be clearer if the variable names was serviceDate and serviceTimeInSeconds. To me the secondsSinceStartOfDay means midnight, which is not true given a time-zone and DST switch.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3238#discussion_r520573028", "createdAt": "2020-11-10T13:46:34Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "diffHunk": "@@ -33,4 +33,15 @@ public static int secondsSinceStartOfTime(ZonedDateTime startOfTime, Instant ins\n     public static LocalDateTime asDateTime(LocalDate localDate, int secondsSinceStartOfDay) {\n         return localDate.atStartOfDay().plusSeconds(secondsSinceStartOfDay);\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1472d40a5fe21464ae4857f7b7710d15718fb48"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTg5MTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzo1NToyMFrOHw0OBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjo1ODowMVrOHxAtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0OTI1Mw==", "bodyText": "I do not think this is correct. I had to write a little test to verify it:\nZoneId fi = ZoneId.of(\"Europe/Helsinki\");\nZoneId no = ZoneId.of(\"Europe/Oslo\");\nZonedDateTime t0 = ZonedDateTime.of(2020, 11, 1, 0, 20, 0,0, fi);\nZonedDateTime t1 = ZonedDateTime.of(2020, 11, 1, 1, 20, 0,0, fi);\nSystem.out.println(TimeUtils.timeToStrShort(secondsSinceStartOfService(t0, t0, no)));\nSystem.out.println(TimeUtils.timeToStrShort(secondsSinceStartOfService(t1, t1, no)));\n$ 23:20\n$ 00:20\n\nThe Netex import uses the \"raw\" local date of the xsd:Date passed in as the service date. The SiriTimetableSnapshotSource seems to use the first estimated call and the \"raw\" date from that.\nOne problem here is that for input times with time-zone ahead of the graph timezone we may get negative time offset, assuming we use the \"raw\" date. The other option is to move the service date to the day before, but that is very confusing. So, I am in favor of using the \"raw\" date and then risk negative times.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3238#discussion_r520949253", "createdAt": "2020-11-10T23:55:20Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "diffHunk": "@@ -33,4 +33,15 @@ public static int secondsSinceStartOfTime(ZonedDateTime startOfTime, Instant ins\n     public static LocalDateTime asDateTime(LocalDate localDate, int secondsSinceStartOfDay) {\n         return localDate.atStartOfDay().plusSeconds(secondsSinceStartOfDay);\n     }\n+\n+    public static int secondsSinceStartOfService(\n+        ZonedDateTime departureDate, ZonedDateTime dateTime, ZoneId zoneId\n+    ) {\n+        ZonedDateTime startOfService = asStartOfService(departureDate, zoneId);\n+        return (int) Duration.between(startOfService, dateTime).toSeconds();\n+    }\n+\n+    private static ZonedDateTime asStartOfService(ZonedDateTime dateTime, ZoneId zoneId) {\n+        return asStartOfService(dateTime.withZoneSameInstant(zoneId));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1472d40a5fe21464ae4857f7b7710d15718fb48"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MDY0Mw==", "bodyText": "Changing line 40 to will use the \"raw\" date:\nZonedDateTime startOfService = asStartOfService(departureDate.toLocalDate(), zoneId);\nThen the last method, line 44, can be deleted.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3238#discussion_r520950643", "createdAt": "2020-11-10T23:59:17Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "diffHunk": "@@ -33,4 +33,15 @@ public static int secondsSinceStartOfTime(ZonedDateTime startOfTime, Instant ins\n     public static LocalDateTime asDateTime(LocalDate localDate, int secondsSinceStartOfDay) {\n         return localDate.atStartOfDay().plusSeconds(secondsSinceStartOfDay);\n     }\n+\n+    public static int secondsSinceStartOfService(\n+        ZonedDateTime departureDate, ZonedDateTime dateTime, ZoneId zoneId\n+    ) {\n+        ZonedDateTime startOfService = asStartOfService(departureDate, zoneId);\n+        return (int) Duration.between(startOfService, dateTime).toSeconds();\n+    }\n+\n+    private static ZonedDateTime asStartOfService(ZonedDateTime dateTime, ZoneId zoneId) {\n+        return asStartOfService(dateTime.withZoneSameInstant(zoneId));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0OTI1Mw=="}, "originalCommit": {"oid": "f1472d40a5fe21464ae4857f7b7710d15718fb48"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1Mzk2Ng==", "bodyText": "As I commented on #3234 currently one unit test fails depending on system timezone.\nFor offsets of GMT-1, UTC, GMT+xx the test passes (TZ=Etc/GMT\u00b1XX), e.g.\nTZ=Europe/Oslo LANG=C mvn -Dtest=SiriAlertsUpdateHandlerTest\\#testSiriSxUpdateForTrip test\n\nbut for offsets of GMT-12 to GMT-2 the test fails, e.g.\nTZ=Europe/Helsinki LANG=C mvn -Dtest=SiriAlertsUpdateHandlerTest\\#testSiriSxUpdateForTrip test\n\nAt least this suggested change is not enough to fix the unit test, but is it actually that unit test somehow misusing system locale instead of RT update code?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3238#discussion_r521153966", "createdAt": "2020-11-11T06:58:01Z", "author": {"login": "tvainika"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/mappers/DateMapper.java", "diffHunk": "@@ -33,4 +33,15 @@ public static int secondsSinceStartOfTime(ZonedDateTime startOfTime, Instant ins\n     public static LocalDateTime asDateTime(LocalDate localDate, int secondsSinceStartOfDay) {\n         return localDate.atStartOfDay().plusSeconds(secondsSinceStartOfDay);\n     }\n+\n+    public static int secondsSinceStartOfService(\n+        ZonedDateTime departureDate, ZonedDateTime dateTime, ZoneId zoneId\n+    ) {\n+        ZonedDateTime startOfService = asStartOfService(departureDate, zoneId);\n+        return (int) Duration.between(startOfService, dateTime).toSeconds();\n+    }\n+\n+    private static ZonedDateTime asStartOfService(ZonedDateTime dateTime, ZoneId zoneId) {\n+        return asStartOfService(dateTime.withZoneSameInstant(zoneId));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0OTI1Mw=="}, "originalCommit": {"oid": "f1472d40a5fe21464ae4857f7b7710d15718fb48"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjc5ODk2OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/siri/SiriAlertsUpdateHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNjoyMFrOHx2ebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNjoyMFrOHx2ebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDc5Nw==", "bodyText": "I think you should pass in the graphTimezone here, not the graph.\nIf all you need is the \"salt\", why do you pass the \"dinner table\"?\n(Sorry for my bad humor ;-)", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3238#discussion_r522034797", "createdAt": "2020-11-12T11:26:20Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/siri/SiriAlertsUpdateHandler.java", "diffHunk": "@@ -69,10 +65,13 @@\n \n     private final String feedId;\n \n+    private final Graph graph;\n+\n     private final Set<TransitAlert> alerts = new HashSet<>();\n \n-    public SiriAlertsUpdateHandler(String feedId) {\n+    public SiriAlertsUpdateHandler(String feedId, Graph graph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a534ac2546944ec6921f2131ced5d9325e5dd2dd"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1722, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}