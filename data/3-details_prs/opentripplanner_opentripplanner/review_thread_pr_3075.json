{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NTI1MjE0", "number": 3075, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMDo0OVrOD9tV_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxMDowMlrOD9uu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDMyNjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxMDo0OVrOGXXK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozMDowMVrOGbKLmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDA2NQ==", "bodyText": "stop-arrival (labels)", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427150065", "createdAt": "2020-05-19T09:10:49Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "diffHunk": "@@ -10,6 +10,34 @@\n  * while possessing the stops in the pattern. This class keep the needed state for these\n  * boardings to avoid recalculating each value more than once and to be able put then in a\n  * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ * <p>\n+ * A boarding represent one path from the {@code origin} to a trip is boarded(onboard of a vehicle).\n+ * It represent the STATE of riding a trip, having boarded at a given stop, but not yet alighted.\n+ * <p>\n+ * We do not do this the same way as described in the original Raptor paper. The original McRaptor\n+ * algorithm keep a bag of stop-arrivals while traversing the pattern. We keep a \"bag\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03772fcd600fa467ff56a1b04aa89010182e1292"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMTU0Nw==", "bodyText": "I have updated the documentation as best I could. I do not think \"Labels\" is the correct word here, so I did not use it. Alternative for StopArrival could be StopReached, and for Boarding could be PatternBoarded or TripBoarded.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r431131547", "createdAt": "2020-05-27T13:30:01Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "diffHunk": "@@ -10,6 +10,34 @@\n  * while possessing the stops in the pattern. This class keep the needed state for these\n  * boardings to avoid recalculating each value more than once and to be able put then in a\n  * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ * <p>\n+ * A boarding represent one path from the {@code origin} to a trip is boarded(onboard of a vehicle).\n+ * It represent the STATE of riding a trip, having boarded at a given stop, but not yet alighted.\n+ * <p>\n+ * We do not do this the same way as described in the original Raptor paper. The original McRaptor\n+ * algorithm keep a bag of stop-arrivals while traversing the pattern. We keep a \"bag\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MDA2NQ=="}, "originalCommit": {"oid": "03772fcd600fa467ff56a1b04aa89010182e1292"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDUxMDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo1ODo1OVrOGXY_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo1ODo1OVrOGXY_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE3OTc5MQ==", "bodyText": "Just a pure refactoring - inlined method.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427179791", "createdAt": "2020-05-19T09:58:59Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/RangeRaptorWorker.java", "diffHunk": "@@ -202,24 +202,15 @@ private void findAllTransitForRound() {\n             // Prepare for transit\n             transitWorker.prepareForTransitWith(pattern, tripSearch);\n \n-            // perform transit\n-            performTransitForRoundAndEachStopInPattern(pattern);\n+            // perform transit - iterate over given pattern and calculate transit for each stop.\n+            IntIterator it = calculator.patternStopIterator(pattern.numberOfStopsInPattern());\n+            while (it.hasNext()) {\n+                transitWorker.routeTransitAtStop(it.next());\n+            }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86ef4ab369201b61b6c657067430c3638393e9b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDUzNDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDowNToyNlrOGXZODg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDowNToyNlrOGXZODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4MzYzMA==", "bodyText": "OnBoard Riding Vehicle State RouteBag Label", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427183630", "createdAt": "2020-05-19T10:05:26Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/multicriteria/Boarding.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.opentripplanner.transit.raptor.rangeraptor.multicriteria;\n+\n+import org.opentripplanner.transit.raptor.api.transit.RaptorTripSchedule;\n+import org.opentripplanner.transit.raptor.rangeraptor.multicriteria.arrivals.AbstractStopArrival;\n+import org.opentripplanner.transit.raptor.util.paretoset.ParetoComparator;\n+\n+\n+/**\n+ * The multi-criteria Range Raptor need to keep all pareto-optimal boardings for each pattern\n+ * while possessing the stops in the pattern. This class keep the needed state for these\n+ * boardings to avoid recalculating each value more than once and to be able put then in a\n+ * {@link org.opentripplanner.transit.raptor.util.paretoset.ParetoSet}.\n+ *\n+ * @param <T> The TripSchedule type defined by the user of the raptor API.\n+ */\n+final class Boarding<T extends RaptorTripSchedule> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86ef4ab369201b61b6c657067430c3638393e9b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDU1Mzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoxMDowMlrOGXZZog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzozMToyOVrOGbKPlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NjU5NA==", "bodyText": "riding cost", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r427186594", "createdAt": "2020-05-19T10:10:02Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java", "diffHunk": "@@ -40,6 +40,24 @@ public DefaultCostCalculator(\n         lifeCycle.onPrepareForNextRound(this::initWaitFactor);\n     }\n \n+    @Override\n+    public int relativePatternBoardCost(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f86ef4ab369201b61b6c657067430c3638393e9b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMjU2NQ==", "bodyText": "I renamed this to onTripRidingCost and updated the documentation.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3075#discussion_r431132565", "createdAt": "2020-05-27T13:31:29Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/transit/raptor/rangeraptor/transit/DefaultCostCalculator.java", "diffHunk": "@@ -40,6 +40,24 @@ public DefaultCostCalculator(\n         lifeCycle.onPrepareForNextRound(this::initWaitFactor);\n     }\n \n+    @Override\n+    public int relativePatternBoardCost(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4NjU5NA=="}, "originalCommit": {"oid": "f86ef4ab369201b61b6c657067430c3638393e9b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}