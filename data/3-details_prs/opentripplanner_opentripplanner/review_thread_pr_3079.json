{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTI5ODEx", "number": 3079, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMDoyOVrOD9eCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0Mjo0NVrOD-5EfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzgxODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMDoyOVrOGW-5wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNTo0MFrOGYIogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MjQ0OA==", "bodyText": "Use the  #asRawNode() method instead of breaking encapsulation - this could lead to false-positive warnings when starting the server...", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426752448", "createdAt": "2020-05-18T16:30:29Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "diffHunk": "@@ -84,6 +84,10 @@ JsonNode asRawNode(String paramName) {\n         return param(paramName);\n     }\n \n+    public JsonNode asRawNode() {\n+        return json;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDQ1MA==", "bodyText": "I removed this method, as it is not needed anymore.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r427960450", "createdAt": "2020-05-20T12:15:40Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/standalone/config/NodeAdapter.java", "diffHunk": "@@ -84,6 +84,10 @@ JsonNode asRawNode(String paramName) {\n         return param(paramName);\n     }\n \n+    public JsonNode asRawNode() {\n+        return json;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MjQ0OA=="}, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzgyNTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozMjozN1rOGW--iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMjoxNToxOFrOGYInsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY3Mg==", "bodyText": "Use the path method, and asRawNode()and pass in 2 arguments (if you need access to the JsonNode). I will explain below.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426753672", "createdAt": "2020-05-18T16:32:37Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -43,10 +45,7 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-\n-        // Touch parameters read at a later point in time to avoid reporting them when\n-        // logging unused parameters.\n-        adapter.path(\"updaters\");\n+        this.updaterConfig = new UpdaterConfig(adapter.asRawNode(\"updaters\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI2MDkxOQ==", "bodyText": "I don't think you explained how to do this", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r427260919", "createdAt": "2020-05-19T12:26:00Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -43,10 +45,7 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-\n-        // Touch parameters read at a later point in time to avoid reporting them when\n-        // logging unused parameters.\n-        adapter.path(\"updaters\");\n+        this.updaterConfig = new UpdaterConfig(adapter.asRawNode(\"updaters\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY3Mg=="}, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk2MDI0MQ==", "bodyText": "I removed this method, as it is not needed anymore.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r427960241", "createdAt": "2020-05-20T12:15:18Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/standalone/config/RouterConfig.java", "diffHunk": "@@ -43,10 +45,7 @@ public RouterConfig(JsonNode node, String source, boolean logUnusedParams) {\n         );\n         this.transitConfig = new TransitRoutingConfig(adapter.path(\"transit\"));\n         this.routingRequestDefaults = mapRoutingRequest(adapter.path(\"routingDefaults\"));\n-\n-        // Touch parameters read at a later point in time to avoid reporting them when\n-        // logging unused parameters.\n-        adapter.path(\"updaters\");\n+        this.updaterConfig = new UpdaterConfig(adapter.asRawNode(\"updaters\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1MzY3Mg=="}, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzgzNDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/standalone/config/updater_config/UpdaterConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjozNToxMFrOGW_EKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo1NzoxMFrOGXB1jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NTExMw==", "bodyText": "Here you create the NodeAdapter, but you should never do that - only do that for root config objects. I will try to remember this an prevent someone form doing it later, but this brake the \"parent\" reference and error reporting mechanish in the NodeAdapter. Also, you have lost track of the source, when you do this.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426755113", "createdAt": "2020-05-18T16:35:10Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/updater_config/UpdaterConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opentripplanner.standalone.config.updater_config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n+import org.opentripplanner.standalone.config.NodeAdapter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class UpdaterConfig {\n+\n+  public static final UpdaterConfig DEFAULT = new UpdaterConfig(\n+      MissingNode.getInstance()\n+  );\n+\n+  private final List<UpdaterConfigItem> configItems = new ArrayList<>();\n+\n+  public UpdaterConfig(JsonNode c) {\n+    for (JsonNode updater : c) {\n+      configItems.add(new UpdaterConfigItem(new NodeAdapter(updater, null)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMDAzMg==", "bodyText": "Also, the entire class is unnecessary. This can be put in the NodeAdapter as a general-purpose factory method:\n    public <T> List<T> asList(String paramName, Function<NodeAdapter, T> factory) {\n        List<T> result = new ArrayList<>();\n        int i = 0;\n        for (JsonNode node : param(paramName)) {\n            String pName = paramName + \"[\" + i + \"]\";\n            NodeAdapter child = new NodeAdapter(node, source, fullPath(pName));\n            children.add(child);\n            result.add(factory.apply(child));\n            ++i;\n        }\n        return result;\n    }\n\nRemember to add unit test as well:\n@Test\n    public void objectAsList() {\n        NodeAdapter subject  = newNodeAdapterForTest(\"{ key : [{ a: 'I' }, { a: '2' } ] }\");\n\n        List<String> result = subject.asList(\"key\", a -> a.asText(\"a\"));\n\n        assertEquals(\"[I, 2]\", result.toString());\n    }", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426800032", "createdAt": "2020-05-18T17:56:11Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/updater_config/UpdaterConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opentripplanner.standalone.config.updater_config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n+import org.opentripplanner.standalone.config.NodeAdapter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class UpdaterConfig {\n+\n+  public static final UpdaterConfig DEFAULT = new UpdaterConfig(\n+      MissingNode.getInstance()\n+  );\n+\n+  private final List<UpdaterConfigItem> configItems = new ArrayList<>();\n+\n+  public UpdaterConfig(JsonNode c) {\n+    for (JsonNode updater : c) {\n+      configItems.add(new UpdaterConfigItem(new NodeAdapter(updater, null)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NTExMw=="}, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMDUyNw==", "bodyText": "Then the UpdaterConfigItem can be renamed UpdaterConfig.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426800527", "createdAt": "2020-05-18T17:57:10Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/standalone/config/updater_config/UpdaterConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opentripplanner.standalone.config.updater_config;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n+import org.opentripplanner.standalone.config.NodeAdapter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class UpdaterConfig {\n+\n+  public static final UpdaterConfig DEFAULT = new UpdaterConfig(\n+      MissingNode.getInstance()\n+  );\n+\n+  private final List<UpdaterConfigItem> configItems = new ArrayList<>();\n+\n+  public UpdaterConfig(JsonNode c) {\n+    for (JsonNode updater : c) {\n+      configItems.add(new UpdaterConfigItem(new NodeAdapter(updater, null)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc1NTExMw=="}, "originalCommit": {"oid": "530d7e19a80f4f97fc02fee3a51dcb97e2de999e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzg4MDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0ODowM1rOGW_hxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0ODowM1rOGW_hxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2MjY5NA==", "bodyText": "Comment: I guess you are gone change this later to just:\nupdater = new BikeRentalUpdater(configItem);\n\nAnd then inject the graph later.\nWhen the config is injected using the constructor the cast will be unnecessary and the fields in the updater can become final.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426762694", "createdAt": "2020-05-18T16:48:03Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +64,75 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(Graph graph, UpdaterConfig config) {\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n+\n+        for (UpdaterConfigItem configItem : config.getItems()) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater();\n+                            ((BikeRentalUpdater) updater).configure(graph, configItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk0NzUzOnYy", "diffSide": "LEFT", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNzowOVrOGXALqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTo0MzozMlrOGXceTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MzQxOA==", "bodyText": "I cannot see that the updater are started in the new code?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426773418", "createdAt": "2020-05-18T17:07:09Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +64,75 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(Graph graph, UpdaterConfig config) {\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n+\n+        for (UpdaterConfigItem configItem : config.getItems()) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater();\n+                            ((BikeRentalUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"bike-park\":\n+                            updater = new BikeParkUpdater();\n+                            ((BikeParkUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"stop-time-updater\":\n+                            updater = new PollingStoptimeUpdater();\n+                            ((PollingStoptimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"websocket-gtfs-rt-updater\":\n+                            updater = new WebsocketGtfsRealtimeUpdater();\n+                            ((WebsocketGtfsRealtimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"real-time-alerts\":\n+                            updater = new GtfsRealtimeAlertsUpdater();\n+                            ((GtfsRealtimeAlertsUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-updater\":\n+                            updater = new ExampleGraphUpdater();\n+                            ((ExampleGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-polling-updater\":\n+                            updater = new ExamplePollingGraphUpdater();\n+                            ((ExamplePollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"winkki-polling-updater\":\n+                            updater = new WinkkiPollingGraphUpdater();\n+                            ((WinkkiPollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-et-updater\":\n+                            updater = new SiriETUpdater();\n+                            ((SiriETUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-vm-updater\":\n+                            updater = new SiriVMUpdater();\n+                            ((SiriVMUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-sx-updater\":\n+                            updater = new SiriSXUpdater();\n+                            ((SiriSXUpdater) updater).configure(graph, configItem);\n+                            break;\n+                    }\n                 }\n-                else if (type.equals(\"siri-sx-updater\")) {\n-                    updater = new SiriSXUpdater();\n+                if (updater != null) {\n+                    updaters.add(updater);\n                 }\n             }\n-\n-            if (updater == null) {\n-                LOG.error(\"Unknown updater type: \" + type);\n-            } else {\n-                try {\n-                    // Inform the GraphUpdater of its parent Manager so the updater can enqueue write operations.\n-                    // Perhaps this should be done in \"addUpdater\" below, to ensure the link is reciprocal.\n-                    updater.setGraphUpdaterManager(updaterManager);\n-                    // All GraphUpdaters are JsonConfigurable - send them their config information.\n-                    updater.configure(graph, configItem);\n-                    // Perform any initial setup in a single-threaded manner to avoid concurrent reads/writes.\n-                    updater.setup(graph);\n-                    // Add graph updater to manager.\n-                    updaterManager.addUpdater(updater);\n-                    LOG.info(\"Configured GraphUpdater: {}\", updater);\n-                } catch (Exception e) {\n-                    LOG.error(\"Failed to configure graph updater:\" + configItem.asText(), e);\n-                }\n+            catch (Exception e) {\n+                LOG.error(\"Failed to configure graph updater:\" + configItem.getType(), e);\n             }\n         }\n-        // Now that all the updaters are configured, kick them all off in their own threads.\n-        updaterManager.startUpdaters();\n-        return updaterManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzNjk0Mg==", "bodyText": "The updaters are started in GraphUpdaterConfigurator.java line 51.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r427236942", "createdAt": "2020-05-19T11:43:32Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +64,75 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(Graph graph, UpdaterConfig config) {\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n+\n+        for (UpdaterConfigItem configItem : config.getItems()) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater();\n+                            ((BikeRentalUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"bike-park\":\n+                            updater = new BikeParkUpdater();\n+                            ((BikeParkUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"stop-time-updater\":\n+                            updater = new PollingStoptimeUpdater();\n+                            ((PollingStoptimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"websocket-gtfs-rt-updater\":\n+                            updater = new WebsocketGtfsRealtimeUpdater();\n+                            ((WebsocketGtfsRealtimeUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"real-time-alerts\":\n+                            updater = new GtfsRealtimeAlertsUpdater();\n+                            ((GtfsRealtimeAlertsUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-updater\":\n+                            updater = new ExampleGraphUpdater();\n+                            ((ExampleGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"example-polling-updater\":\n+                            updater = new ExamplePollingGraphUpdater();\n+                            ((ExamplePollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"winkki-polling-updater\":\n+                            updater = new WinkkiPollingGraphUpdater();\n+                            ((WinkkiPollingGraphUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-et-updater\":\n+                            updater = new SiriETUpdater();\n+                            ((SiriETUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-vm-updater\":\n+                            updater = new SiriVMUpdater();\n+                            ((SiriVMUpdater) updater).configure(graph, configItem);\n+                            break;\n+                        case \"siri-sx-updater\":\n+                            updater = new SiriSXUpdater();\n+                            ((SiriSXUpdater) updater).configure(graph, configItem);\n+                            break;\n+                    }\n                 }\n-                else if (type.equals(\"siri-sx-updater\")) {\n-                    updater = new SiriSXUpdater();\n+                if (updater != null) {\n+                    updaters.add(updater);\n                 }\n             }\n-\n-            if (updater == null) {\n-                LOG.error(\"Unknown updater type: \" + type);\n-            } else {\n-                try {\n-                    // Inform the GraphUpdater of its parent Manager so the updater can enqueue write operations.\n-                    // Perhaps this should be done in \"addUpdater\" below, to ensure the link is reciprocal.\n-                    updater.setGraphUpdaterManager(updaterManager);\n-                    // All GraphUpdaters are JsonConfigurable - send them their config information.\n-                    updater.configure(graph, configItem);\n-                    // Perform any initial setup in a single-threaded manner to avoid concurrent reads/writes.\n-                    updater.setup(graph);\n-                    // Add graph updater to manager.\n-                    updaterManager.addUpdater(updater);\n-                    LOG.info(\"Configured GraphUpdater: {}\", updater);\n-                } catch (Exception e) {\n-                    LOG.error(\"Failed to configure graph updater:\" + configItem.asText(), e);\n-                }\n+            catch (Exception e) {\n+                LOG.error(\"Failed to configure graph updater:\" + configItem.getType(), e);\n             }\n         }\n-        // Now that all the updaters are configured, kick them all off in their own threads.\n-        updaterManager.startUpdaters();\n-        return updaterManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MzQxOA=="}, "originalCommit": {"oid": "444c03374d487ee9812f36b8143d55b4cc7f56af"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk2NzA5OnYy", "diffSide": "RIGHT", "path": "src/ext/java/org/opentripplanner/ext/examples/updater/ExampleGraphUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxMzowMlrOGXAYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNjowNlrOGXAeeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NjYwMg==", "bodyText": "Tip! There is no need to extend - unless you add/override parameters. The good thing of not extending is that is is clear that the super-config is enough.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426776602", "createdAt": "2020-05-18T17:13:02Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/examples/updater/ExampleGraphUpdater.java", "diffHunk": "@@ -41,43 +42,41 @@\n     private String url;\n \n     // Here the updater can be configured using the properties in the file 'Graph.properties'.\n-    @Override\n-    public void configure(Graph graph, JsonNode config) throws Exception {\n-        frequencySec = config.path(\"frequencySec\").asInt(5);\n-        url = config.path(\"url\").asText();\n+    public void configure(Graph graph, ExampleGraphUpdaterConfig config) {\n+        frequencySec = config.getFrequencySec();\n+        url = config.getUrl();\n         LOG.info(\"Configured example updater: frequencySec={} and url={}\", frequencySec, url);\n     }\n \n     // Here the updater gets to know its parent manager to execute GraphWriterRunnables.\n-    @Override\n     public void setGraphUpdaterManager(GraphUpdaterManager updaterManager) {\n         LOG.info(\"Example updater: updater manager is set\");\n         this.updaterManager = updaterManager;\n     }\n \n     // Here the updater can be initialized.\n-    @Override\n     public void setup(Graph graph) {\n         LOG.info(\"Setup example updater\");\n     }\n \n     // This is where the updater thread receives updates and applies them to the graph.\n     // This method only runs once.\n-    @Override\n     public void run() {\n         LOG.info(\"Run example updater with hashcode: {}\", this.hashCode());\n         // Here the updater can connect to a server and register a callback function\n         // to handle updates to the graph\n     }\n \n     // Here the updater can cleanup after itself.\n-    @Override\n     public void teardown() {\n         LOG.info(\"Teardown example updater\");\n     }\n \n-    @Override\n     public String getName() {\n         return \"ExampleGraphUpdater\";\n     }\n+\n+    public interface ExampleGraphUpdaterConfig\n+        extends PollingGraphUpdater.PollingGraphUpdaterConfig {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5430667ad3b23b242371b34a1508d90128e2a27"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODIzMw==", "bodyText": "Also, this break the established naming convention - using Parameters for the role defined by the config consumer, and using Config for the role implementing the Parameters delivering the config to the consumer/domain.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r426778233", "createdAt": "2020-05-18T17:16:06Z", "author": {"login": "t2gran"}, "path": "src/ext/java/org/opentripplanner/ext/examples/updater/ExampleGraphUpdater.java", "diffHunk": "@@ -41,43 +42,41 @@\n     private String url;\n \n     // Here the updater can be configured using the properties in the file 'Graph.properties'.\n-    @Override\n-    public void configure(Graph graph, JsonNode config) throws Exception {\n-        frequencySec = config.path(\"frequencySec\").asInt(5);\n-        url = config.path(\"url\").asText();\n+    public void configure(Graph graph, ExampleGraphUpdaterConfig config) {\n+        frequencySec = config.getFrequencySec();\n+        url = config.getUrl();\n         LOG.info(\"Configured example updater: frequencySec={} and url={}\", frequencySec, url);\n     }\n \n     // Here the updater gets to know its parent manager to execute GraphWriterRunnables.\n-    @Override\n     public void setGraphUpdaterManager(GraphUpdaterManager updaterManager) {\n         LOG.info(\"Example updater: updater manager is set\");\n         this.updaterManager = updaterManager;\n     }\n \n     // Here the updater can be initialized.\n-    @Override\n     public void setup(Graph graph) {\n         LOG.info(\"Setup example updater\");\n     }\n \n     // This is where the updater thread receives updates and applies them to the graph.\n     // This method only runs once.\n-    @Override\n     public void run() {\n         LOG.info(\"Run example updater with hashcode: {}\", this.hashCode());\n         // Here the updater can connect to a server and register a callback function\n         // to handle updates to the graph\n     }\n \n     // Here the updater can cleanup after itself.\n-    @Override\n     public void teardown() {\n         LOG.info(\"Teardown example updater\");\n     }\n \n-    @Override\n     public String getName() {\n         return \"ExampleGraphUpdater\";\n     }\n+\n+    public interface ExampleGraphUpdaterConfig\n+        extends PollingGraphUpdater.PollingGraphUpdaterConfig {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NjYwMg=="}, "originalCommit": {"oid": "a5430667ad3b23b242371b34a1508d90128e2a27"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcyNTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozOTo1M1rOGZREMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTozOTo1M1rOGZREMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NzE4NQ==", "bodyText": "Remove graph", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429147185", "createdAt": "2020-05-22T09:39:53Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -36,16 +39,15 @@\n \n     private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(Graph graph, JsonNode mainConfig) {\n+    public static void setupGraph(Graph graph, List<UpdaterConfig> updaterConfigList) {\n+\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        // Look for embedded config if it exists\n-        // TODO figure out how & when we will use embedded config in absence of main config.\n-        JsonNode embeddedConfig = null; // graph.routerConfig;\n-        LOG.info(\"Using configurations: \" + (mainConfig == null ? \"\" : \"[main]\") + \" \"\n-                + (embeddedConfig == null ? \"\" : \"[embedded]\"));\n+        updaters.addAll(createUpdatersFromConfig(graph, updaterConfigList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjcyNjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0MDoyNlrOGZRFNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0MDoyNlrOGZRFNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0NzQ0NQ==", "bodyText": "bindUpdatersToGraph", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429147445", "createdAt": "2020-05-22T09:40:26Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -36,16 +39,15 @@\n \n     private static Logger LOG = LoggerFactory.getLogger(GraphUpdaterConfigurator.class);\n \n-    public static void setupGraph(Graph graph, JsonNode mainConfig) {\n+    public static void setupGraph(Graph graph, List<UpdaterConfig> updaterConfigList) {\n+\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        // Look for embedded config if it exists\n-        // TODO figure out how & when we will use embedded config in absence of main config.\n-        JsonNode embeddedConfig = null; // graph.routerConfig;\n-        LOG.info(\"Using configurations: \" + (mainConfig == null ? \"\" : \"[main]\") + \" \"\n-                + (embeddedConfig == null ? \"\" : \"[embedded]\"));\n+        updaters.addAll(createUpdatersFromConfig(graph, updaterConfigList));\n \n-        // Create a updater manager for this graph, and create updaters according to the JSON configuration.\n-        GraphUpdaterManager updaterManager = createManagerFromConfig(graph, mainConfig);\n+        setupUpdaters(graph, updaters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjczMzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0Mjo0NVrOGZRJWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTo0Mjo0NVrOGZRJWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0ODUwNQ==", "bodyText": "rename configItem", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3079#discussion_r429148505", "createdAt": "2020-05-22T09:42:45Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/updater/GraphUpdaterConfigurator.java", "diffHunk": "@@ -61,72 +63,66 @@ public static void setupGraph(Graph graph, JsonNode mainConfig) {\n      * @param graph the graph that will be modified by these updaters\n      * @return a GraphUpdaterManager containing all the created updaters\n      */\n-    private static GraphUpdaterManager createManagerFromConfig(Graph graph, JsonNode config) {\n+    private static List<GraphUpdater> createUpdatersFromConfig(\n+        Graph graph,\n+        List<UpdaterConfig> configList\n+    ) {\n+        List<GraphUpdater> updaters = new ArrayList<>();\n \n-        GraphUpdaterManager updaterManager = new GraphUpdaterManager(graph);\n-        for (JsonNode configItem : config.path(\"updaters\")) {\n+        for (UpdaterConfig configItem : configList) {\n \n             // For each sub-node, determine which kind of updater is being created.\n-            String type = configItem.path(\"type\").asText();\n+            String type = configItem.getType();\n             GraphUpdater updater = null;\n-            if (type != null) {\n-                if (type.equals(\"bike-rental\")) {\n-                    updater = new BikeRentalUpdater();\n-                }\n-                else if (type.equals(\"bike-park\")) {\n-                    updater = new BikeParkUpdater();\n-                }\n-                else if (type.equals(\"stop-time-updater\")) {\n-                    updater = new PollingStoptimeUpdater();\n-                }\n-                else if (type.equals(\"websocket-gtfs-rt-updater\")) {\n-                    updater = new WebsocketGtfsRealtimeUpdater();\n-                }\n-                else if (type.equals(\"real-time-alerts\")) {\n-                    updater = new GtfsRealtimeAlertsUpdater();\n-                }\n-                else if (type.equals(\"example-updater\")) {\n-                    updater = new ExampleGraphUpdater();\n-                }\n-                else if (type.equals(\"example-polling-updater\")) {\n-                    updater = new ExamplePollingGraphUpdater();\n-                }\n-                else if (type.equals(\"winkki-polling-updater\")) {\n-                    updater = new WinkkiPollingGraphUpdater();\n-                }\n-                else if (type.equals(\"siri-et-updater\")) {\n-                    updater = new SiriETUpdater();\n-                }\n-                else if (type.equals(\"siri-vm-updater\")) {\n-                    updater = new SiriVMUpdater();\n+\n+            try {\n+                if (type != null) {\n+                    switch (type) {\n+                        case \"bike-rental\":\n+                            updater = new BikeRentalUpdater(configItem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3d2f5b1fc6520c490e193a26e7d49de1a1460c"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1830, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}