{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODE0OTc2", "number": 3237, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDowNjozMVrOE6lRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDowNjozMVrOE6lRzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODYzNjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TransitLayer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDowNjozMVrOH1vXrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowMjo0OFrOH3JEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjExMjY4Ng==", "bodyText": "Introduction of the expression \"RunningPeriodDate\" may be confusing to readers. A simpler name like TripPatternsRunningOnDate or TripPatternsRunningByDate might be better, and still contrast with TripPatternsByDate which would index them by their \"time zero reference\" date.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3237#discussion_r526112686", "createdAt": "2020-11-18T14:06:31Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TransitLayer.java", "diffHunk": "@@ -2,21 +2,23 @@\n \n import org.opentripplanner.model.Stop;\n \n+import javax.annotation.Nullable;\n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class TransitLayer {\n \n   /**\n-   * Transit data required for routing\n+   * Transit data required for routing, indexed by each local date(Graph TimeZone) it runs through.\n+   * A Trip \"runs through\" a date if any of its arrivals or depatures is happening on that date.\n    */\n-  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsForDate;\n+  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsByRunningPeriodDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65ca2728cd321f089c4aa8e095e16e42a0055e05"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjExMzI0MA==", "bodyText": "Also, is there any reason to use a HashMap instead of a Guava Multimap?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3237#discussion_r526113240", "createdAt": "2020-11-18T14:07:20Z", "author": {"login": "abyrd"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TransitLayer.java", "diffHunk": "@@ -2,21 +2,23 @@\n \n import org.opentripplanner.model.Stop;\n \n+import javax.annotation.Nullable;\n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class TransitLayer {\n \n   /**\n-   * Transit data required for routing\n+   * Transit data required for routing, indexed by each local date(Graph TimeZone) it runs through.\n+   * A Trip \"runs through\" a date if any of its arrivals or depatures is happening on that date.\n    */\n-  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsForDate;\n+  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsByRunningPeriodDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjExMjY4Ng=="}, "originalCommit": {"oid": "65ca2728cd321f089c4aa8e095e16e42a0055e05"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MjI3NA==", "bodyText": "I changed the name to tripPatternsRunningOnDate. When it comes to Multimaps I prefer using the Java Map<,List|Set> if I don't need the extra functionality provided by the Guava version. I have often seen the wrong guava version used (set/list), and with the common super type Multimap it is not always easy to see. Being consistent is also good, so it is pros and cons. This is not important to me, so I will follow whatever we decide.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3237#discussion_r527582274", "createdAt": "2020-11-20T10:02:48Z", "author": {"login": "t2gran"}, "path": "src/main/java/org/opentripplanner/routing/algorithm/raptor/transit/TransitLayer.java", "diffHunk": "@@ -2,21 +2,23 @@\n \n import org.opentripplanner.model.Stop;\n \n+import javax.annotation.Nullable;\n import java.time.LocalDate;\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class TransitLayer {\n \n   /**\n-   * Transit data required for routing\n+   * Transit data required for routing, indexed by each local date(Graph TimeZone) it runs through.\n+   * A Trip \"runs through\" a date if any of its arrivals or depatures is happening on that date.\n    */\n-  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsForDate;\n+  private final HashMap<LocalDate, List<TripPatternForDate>> tripPatternsByRunningPeriodDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjExMjY4Ng=="}, "originalCommit": {"oid": "65ca2728cd321f089c4aa8e095e16e42a0055e05"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}