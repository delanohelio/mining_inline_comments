{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDI1ODUw", "number": 3191, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NzozMFrOEm8L_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NzozMFrOEm8L_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjY3NDUyOnYy", "diffSide": "RIGHT", "path": "docs/Configuration.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NzozMFrOHXQPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODo0NzozMFrOHXQPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0NTQ0Ng==", "bodyText": "Refer to the standard", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3191#discussion_r494145446", "createdAt": "2020-09-24T08:47:30Z", "author": {"login": "t2gran"}, "path": "docs/Configuration.md", "diffHunk": "@@ -26,9 +26,44 @@ OTP is configured via three configuration JSON files which are read from the dir\n \n Options and parameters that are taken into account during the graph building process will be \"baked into\" the graph, and cannot be changed later in a running server. These are specified in `build-config.json`. Other details of OTP operation can be modified without rebuilding the graph. These run-time configuration options are found in `router-config.json`. Finally, `otp-config.json` contains simple switches that enable or disable system-wide features. \n \n+## Configuration types\n+\n+The OTP configuration files use the JSON file format. OTP allows comments and unquoted field names \n+in the JSON configuration files - to be more human friendly. OTP support all the basic JSON types: \n+nested objects `{...}`, arrays `[]`, numbers `789.0` and boolean `true` | `false`. In addition to \n+these basic types some configuration parameters are parsed with some restrictions. In the \n+documentation below we will refer to the following types:\n+\n+Type | Description | Examples\n+-----|-------------|---------\n+boolean | This is the Boolean JSON type. | `true` or `false`\n+number | This is the Number JSON type. | `1`, `5`, `3.14` \n+string | A quoted string. This is the String JSON type. | `\"This is a string!\"`\n+_Type_[] | Array of of given Type. This is the Array JSON type. | `[ 1, 2, 3 ]` \n+double | A decimal floating point _number_. 64 bit.| `3.14`\n+integer | A decimal integer _number_. 32 bit. | `1`, `-7`, `2100200300`\n+long | A decimal integer _number_. 64 bit. | `-1234567890123456789`\n+enum | A fixed set of string literals. | BicycleOptimize: `\"QUICK\"`, `\"SAFE\"` ...\n+enum-map | List of key/value pairs, where the key is a enum and the value can be any given type. | `{ RAIL: 1.2, BUS: 2.3 }` \n+enum-set | List of enum string values | `[ \"RAIL\", \"TRAM\" ]`\n+locale | _\"Language\\_[country[\\_variant]]_\". | `en_US`, `nn_NO`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d67a752e11d8630be1fe614e5deccb32f85eee2"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}