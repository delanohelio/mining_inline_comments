{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzM4NzMz", "number": 3007, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToxOTozMlrODpzDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyMjo1MlrODpzHLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTU0NjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToxOTozMlrOF5MVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyMzo1MFrOF5Rl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTMyNw==", "bodyText": "What does this fix? It seems to be a separate change not related to this pull request.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395515327", "createdAt": "2020-03-20T09:19:32Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -112,6 +113,8 @@ public static Kryo makeKryo() {\n         // We might actually want to manually register a serializer for every class, to be safe.\n         kryo.setRegistrationRequired(false);\n         kryo.setReferences(true);\n+        // We serialize in two steps, graph and edges. Reference tracking must not be reset in between.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMTM3MQ==", "bodyText": "Yes, this is not needed. The Serailizer for HashMultimap however is needed for the childStops in Station to be correctly serailized. Otherwise it fails with the following error when starting up.\n13:09:15.015 ERROR (OTPMain.java:43) An uncaught error occurred inside OTP: Error during Java deserialization.\nSerialization trace:\ntransfersByStop (org.opentripplanner.routing.graph.Graph)\ngraph (org.opentripplanner.routing.graph.SerializedGraphObject)\ncom.esotericsoftware.kryo.KryoException: Error during Java deserialization.\nSerialization trace:\ntransfersByStop (org.opentripplanner.routing.graph.Graph)\ngraph (org.opentripplanner.routing.graph.SerializedGraphObject)\n\tat com.esotericsoftware.kryo.serializers.JavaSerializer.read(JavaSerializer.java:68) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:813) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.routing.graph.Graph.load(Graph.java:711) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.routing.graph.Graph.load(Graph.java:702) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.standalone.OTPMain.startOTPServer(OTPMain.java:100) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat org.opentripplanner.standalone.OTPMain.main(OTPMain.java:36) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\nCaused by: java.lang.NullPointerException: null\n\tat org.opentripplanner.model.TransitEntity.hashCode(TransitEntity.java:43) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat java.base/java.util.HashMap.hash(HashMap.java:339) ~[na:na]\n\tat java.base/java.util.HashMap.put(HashMap.java:612) ~[na:na]\n\tat java.base/java.util.HashSet.readObject(HashSet.java:342) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567) ~[na:na]\n\tat java.base/java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1160) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2271) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2410) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2304) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2410) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2304) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:464) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[na:na]\n\tat com.google.common.collect.Serialization.populateMultimap(Serialization.java:173) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat com.google.common.collect.HashMultimap.readObject(HashMultimap.java:136) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567) ~[na:na]\n\tat java.base/java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1160) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2271) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2142) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1646) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:464) ~[na:na]\n\tat java.base/java.io.ObjectInputStream.readObject(ObjectInputStream.java:422) ~[na:na]\n\tat com.esotericsoftware.kryo.serializers.JavaSerializer.read(JavaSerializer.java:66) ~[otp-2.0.0-SNAPSHOT-shaded.jar:1.1]\n\t... 11 common frames omitted", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395601371", "createdAt": "2020-03-20T12:23:50Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/graph/SerializedGraphObject.java", "diffHunk": "@@ -112,6 +113,8 @@ public static Kryo makeKryo() {\n         // We might actually want to manually register a serializer for every class, to be safe.\n         kryo.setRegistrationRequired(false);\n         kryo.setReferences(true);\n+        // We serialize in two steps, graph and edges. Reference tracking must not be reset in between.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTMyNw=="}, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTU0NzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyMDowOVrOF5MW2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1MzoxMFrOF5Sd2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ==", "bodyText": "Now that this is not an edge anymore, it is probably more correct to place it in the model package.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395515609", "createdAt": "2020-03-20T09:20:09Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "diffHunk": "@@ -1,96 +1,44 @@\n package org.opentripplanner.routing.edgetype;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUyMDg5OA==", "bodyText": "Maybe we could rename it too, but I'm not sure what would it should be called.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395520898", "createdAt": "2020-03-20T09:30:41Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "diffHunk": "@@ -1,96 +1,44 @@\n package org.opentripplanner.routing.edgetype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxMDIyMQ==", "bodyText": "Moved, the question is if we should try to merge or move functionality to or from org.opentripplanner.routing.algorithm.raptor.transit.Transfer and/or org.opentripplanner.routing.algorithm.raptor.transit.request.TransferWithDuration. The only additional thing in the first is the RAPTOR stop index, which is not stable(?), and the latter one has the duration, which is not accurate, and can be wildly off, eg. if the transfer uses an elevator edge (relates to #2955).", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395610221", "createdAt": "2020-03-20T12:42:08Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "diffHunk": "@@ -1,96 +1,44 @@\n package org.opentripplanner.routing.edgetype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNTcwNw==", "bodyText": "The Raptor stop index should be stable, and we could just have the Raptor stop index as a field on the Stop. This should probably be done as part of another pull request, when we clean up the TransitLayer classes and merge them with the OTP model classes where possible.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395615707", "createdAt": "2020-03-20T12:53:10Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/routing/edgetype/SimpleTransfer.java", "diffHunk": "@@ -1,96 +1,44 @@\n package org.opentripplanner.routing.edgetype;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTYwOQ=="}, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTU1NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyMjo1MlrOF5McQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjoyODowN1rOF5RtqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNjk5NQ==", "bodyText": "Not really related to this pull request, as the functionality was the same before. I'm just wondering about the rationale behind this logic. A stop that already has at least one outgoing simpleTransfer (created by pathways) should not have a simpleTransfer generated?", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395516995", "createdAt": "2020-03-20T09:22:52Z", "author": {"login": "gmellemstrand"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java", "diffHunk": "@@ -82,23 +81,22 @@ public void buildGraph(\n \n             LOG.debug(\"Linking stop '{}' {}\", ts0.getStop(), ts0);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYwMzM2OQ==", "bodyText": "Looks like this comes from a time prior to the refactoring to use RATOR, as only the SimpleTransfers are used for transferring. The NearbyStopFinder will traverse pathways when looking for potential transfers, so they should be ok. Removed the check.", "url": "https://github.com/opentripplanner/OpenTripPlanner/pull/3007#discussion_r395603369", "createdAt": "2020-03-20T12:28:07Z", "author": {"login": "hannesj"}, "path": "src/main/java/org/opentripplanner/graph_builder/module/DirectTransferGenerator.java", "diffHunk": "@@ -82,23 +81,22 @@ public void buildGraph(\n \n             LOG.debug(\"Linking stop '{}' {}\", ts0.getStop(), ts0);\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNjk5NQ=="}, "originalCommit": {"oid": "93825cd27f9372019bd348f477a5740f3212533b"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1786, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}