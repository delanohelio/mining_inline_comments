{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDIzOTQ3", "number": 3532, "title": "[#3511] Add UnifyDataPointAssignment", "bodyText": "Before the PR (what is the issue or what needed to be done)\nThe solution\nScreenshots (if appropriate)\nReviewer Checklist\n\n Added an explanation about the work done\n Connected the PR and the issue on Zenhub\n Added a test plan to the issue\n Updated the copyright header (when relevant)\n Formatted the code\n Added a documentation (if relevant)\n Added some unit tests (if relevant)", "createdAt": "2020-04-20T12:09:16Z", "url": "https://github.com/akvo/akvo-flow/pull/3532", "merged": true, "mergeCommit": {"oid": "011fa6f87cd837096449efd1881d86fdd9fdb9b2"}, "closed": true, "closedAt": "2020-04-22T06:10:15Z", "author": {"login": "tangrammer"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZgmjuABqjMyNTIyMzE0NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaCCCegFqTM5Nzg2OTQwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cf8990d4045ba004a7f4aadd92fda6bdbb88a78", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/7cf8990d4045ba004a7f4aadd92fda6bdbb88a78", "committedDate": "2020-04-20T12:09:07Z", "message": "[#3511] Add UnifyDataPointAssignment"}, "afterCommit": {"oid": "09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "committedDate": "2020-04-20T15:12:58Z", "message": "[#3511] WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/09ae0e60f2344a8e5faa7f1e0e2b36b28b15de70", "committedDate": "2020-04-20T15:12:58Z", "message": "[#3511] WIP"}, "afterCommit": {"oid": "21b7432b250b1e011e9a18ee5d985c83c0cddab6", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/21b7432b250b1e011e9a18ee5d985c83c0cddab6", "committedDate": "2020-04-21T09:16:57Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21b7432b250b1e011e9a18ee5d985c83c0cddab6", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/21b7432b250b1e011e9a18ee5d985c83c0cddab6", "committedDate": "2020-04-21T09:16:57Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}, "afterCommit": {"oid": "57ab3033d1f5adbbaa890054aec234870d91b080", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/57ab3033d1f5adbbaa890054aec234870d91b080", "committedDate": "2020-04-21T09:38:33Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/e947d98e972733039c87aba258a101d8ef6a3bff", "committedDate": "2020-04-21T10:02:14Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57ab3033d1f5adbbaa890054aec234870d91b080", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/57ab3033d1f5adbbaa890054aec234870d91b080", "committedDate": "2020-04-21T09:38:33Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}, "afterCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/e947d98e972733039c87aba258a101d8ef6a3bff", "committedDate": "2020-04-21T10:02:14Z", "message": "[#3511] Add UnifyDatapointassignment logic\n\ncall example:\n./unify.sh akvoflowsandbox /path/to/repos/akvo-flow-server-config\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\nDataPointAssignment to be created: <Entity [DataPointAssignment(no-id-yet)]:\n\tlastUpdateDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tsurveyId = xxxx\n\tcreateUserId = 0\n\tsurveyAssignmentId = xxx\n\tdataPointIds = [0]\n\tlastUpdateUserId = 0\n\tancestorIds = null\n\tcreatedDateTime = Tue Apr 21 11:13:36 CEST 2020\n\tdeviceId = xxx\n>\n\n....\n\nResult:\n\nDataPointAssignment that should be create: N\nDone"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Mjk5NzAx", "url": "https://github.com/akvo/akvo-flow/pull/3532#pullrequestreview-397299701", "createdAt": "2020-04-21T12:54:35Z", "commit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NDozNVrOGJEKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NTo1MFrOGJEOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1ODU2OA==", "bodyText": "We can change this to Collections.singletonList(0L);", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412158568", "createdAt": "2020-04-21T12:54:35Z", "author": {"login": "iperdomo"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);\n+        }\n+    }\n+\n+    private void assignEntityProp(Entity origin, Entity target, String prop) {\n+        target.setProperty(prop, origin.getProperty(prop));\n+    }\n+\n+    @Override\n+    public void execute(DatastoreService ds, String[] args) throws Exception {\n+\n+        final Query q = new Query(\"SurveyAssignment\");\n+        final PreparedQuery pq = ds.prepare(q);\n+        final List<Entity> toBeCreated = new ArrayList<>();\n+\n+        System.out.println(\"Processing SurveyAssignments\");\n+\n+        for (Entity sl : pq.asIterable(FetchOptions.Builder.withChunkSize(500))) {\n+            final Long surveyAssignmentId = sl.getKey().getId();\n+            final List<Long> deviceIds = (List<Long>) sl.getProperty(\"deviceIds\");\n+            final Long surveyId = (Long) sl.getProperty(\"surveyId\");\n+            if (deviceIds == null) {\n+                continue;\n+            }\n+            for (Long deviceId : deviceIds) {\n+                final Entity dataPointAssignement = getDataPointAssignment(ds, deviceId, surveyAssignmentId, surveyId);\n+                if (dataPointAssignement == null) {\n+\n+                    Entity newDataPointAssignment = new Entity(\"DataPointAssignment\");\n+\n+                    List<Long> dataPointIds = new ArrayList<Long>();\n+                    dataPointIds.add(new Long(0));\n+                    newDataPointAssignment.setProperty(\"dataPointIds\", dataPointIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTU1MQ==", "bodyText": "We know that we have broken data in the Datastore, instead of aborting, we should log the problem and continue with the rest.", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412159551", "createdAt": "2020-04-21T12:55:50Z", "author": {"login": "iperdomo"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "author": {"user": {"login": "tangrammer", "name": "Juan A. Ruz"}}, "url": "https://github.com/akvo/akvo-flow/commit/4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5", "committedDate": "2020-04-21T20:37:28Z", "message": "[#3511] Adapt to PR review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODY5NDAy", "url": "https://github.com/akvo/akvo-flow/pull/3532#pullrequestreview-397869402", "createdAt": "2020-04-22T06:10:09Z", "commit": {"oid": "4f5c9d43c5118ff4d9e6dbd71b3eea58ee0d0ed5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4610, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}