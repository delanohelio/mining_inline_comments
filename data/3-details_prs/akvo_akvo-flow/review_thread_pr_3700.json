{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDA5MDQx", "number": 3700, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoxODozMVrOE_nWGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMDoyOVrOE_nZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQwMzc4OnYy", "diffSide": "RIGHT", "path": "GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoxODozMVrOH9agfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoxODozMVrOH9agfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1OTQ4NA==", "bodyText": "you can pass the list of parent types also so only one query instead of 2", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534159484", "createdAt": "2020-12-02T13:18:31Z", "author": {"login": "valllllll2000"}, "path": "GAE/src/com/gallatinsystems/survey/dao/QuestionDao.java", "diffHunk": "@@ -505,8 +505,10 @@ public Question getByKey(Long id, boolean needDetails) {\n             if (Question.Type.OPTION == q.getType()) {\n                 q.setQuestionOptionMap(optionDao.listOptionByQuestion(q.getKey().getId()));\n             }\n-            q.setTranslations(translationDao.findTranslations(\n-                    q.getKey().getId(), Translation.ParentType.QUESTION_TEXT));\n+            List<Translation> allTranslations = new ArrayList<>();\n+            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), Translation.ParentType.QUESTION_TEXT));\n+            allTranslations.addAll(translationDao.findTranslations(q.getKey().getId(), ParentType.QUESTION_TIP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9310cba6a2011a587825ab21b9cb8120abf887e1"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MTQxMjQxOnYy", "diffSide": "RIGHT", "path": "GAE/test/org/akvo/flow/xml/XmlQuestionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzoyMDoyOVrOH9aliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNDozMjowM1rOH9drzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ==", "bodyText": "Minor detail, maybe add a newline", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534160779", "createdAt": "2020-12-02T13:20:29Z", "author": {"login": "valllllll2000"}, "path": "GAE/test/org/akvo/flow/xml/XmlQuestionTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.xml;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.gallatinsystems.survey.dao.QuestionDao;\n+import com.gallatinsystems.survey.domain.Question;\n+import com.gallatinsystems.survey.domain.QuestionGroup;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.survey.domain.SurveyGroup;\n+import com.gallatinsystems.survey.domain.Translation;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.api.app.DataStoreTestUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class XmlQuestionTest {\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+    private DataStoreTestUtil dsu =  new DataStoreTestUtil();\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    @Test\n+    public void aQuestionWithDuplicatedTipsOnlySerializesOne() throws JsonProcessingException {\n+\n+        SurveyGroup surveyGroup = dsu.createSurveyGroup();\n+        Survey survey = dsu.createSurvey(surveyGroup);\n+        QuestionGroup questionGroup = dsu.createQuestionGroup(survey, 1, false);\n+        Question question = dsu.createQuestion(survey, questionGroup.getKey().getId(), Question.Type.FREE_TEXT, false);\n+        QuestionDao dao = new QuestionDao();\n+\n+        question.setOrder(1);\n+        question.setText(\"First question\");\n+        question.setTip(\"One\");\n+        dao.save(question);\n+\n+        Long surveyId = survey.getKey().getId();\n+        Long questionId = question.getKey().getId();\n+\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+\n+        Question question1 = dao.getByKey(question.getKey().getId(), true);\n+        XmlQuestion toXml = new XmlQuestion(question1);\n+        XmlMapper objectMapper = new XmlMapper();\n+\n+        String xmlTemplate = \"<XmlQuestion id=\\\"%s\\\" order=\\\"1\\\" type=\\\"free\\\" mandatory=\\\"false\\\" localeNameFlag=\\\"false\\\"><help><altText type=\\\"translation\\\" language=\\\"es\\\">uno</altText><text>One</text></help><text>First question</text></XmlQuestion>\";\n+        String expectedXml = String.format(xmlTemplate, questionId);\n+\n+        assertEquals(expectedXml, objectMapper.writeValueAsString(toXml));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9310cba6a2011a587825ab21b9cb8120abf887e1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE5OTUxMw==", "bodyText": "not sure if I follow the newline comment, I didn't add one", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534199513", "createdAt": "2020-12-02T14:17:03Z", "author": {"login": "iperdomo"}, "path": "GAE/test/org/akvo/flow/xml/XmlQuestionTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.xml;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.gallatinsystems.survey.dao.QuestionDao;\n+import com.gallatinsystems.survey.domain.Question;\n+import com.gallatinsystems.survey.domain.QuestionGroup;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.survey.domain.SurveyGroup;\n+import com.gallatinsystems.survey.domain.Translation;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.api.app.DataStoreTestUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class XmlQuestionTest {\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+    private DataStoreTestUtil dsu =  new DataStoreTestUtil();\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    @Test\n+    public void aQuestionWithDuplicatedTipsOnlySerializesOne() throws JsonProcessingException {\n+\n+        SurveyGroup surveyGroup = dsu.createSurveyGroup();\n+        Survey survey = dsu.createSurvey(surveyGroup);\n+        QuestionGroup questionGroup = dsu.createQuestionGroup(survey, 1, false);\n+        Question question = dsu.createQuestion(survey, questionGroup.getKey().getId(), Question.Type.FREE_TEXT, false);\n+        QuestionDao dao = new QuestionDao();\n+\n+        question.setOrder(1);\n+        question.setText(\"First question\");\n+        question.setTip(\"One\");\n+        dao.save(question);\n+\n+        Long surveyId = survey.getKey().getId();\n+        Long questionId = question.getKey().getId();\n+\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+\n+        Question question1 = dao.getByKey(question.getKey().getId(), true);\n+        XmlQuestion toXml = new XmlQuestion(question1);\n+        XmlMapper objectMapper = new XmlMapper();\n+\n+        String xmlTemplate = \"<XmlQuestion id=\\\"%s\\\" order=\\\"1\\\" type=\\\"free\\\" mandatory=\\\"false\\\" localeNameFlag=\\\"false\\\"><help><altText type=\\\"translation\\\" language=\\\"es\\\">uno</altText><text>One</text></help><text>First question</text></XmlQuestion>\";\n+        String expectedXml = String.format(xmlTemplate, questionId);\n+\n+        assertEquals(expectedXml, objectMapper.writeValueAsString(toXml));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ=="}, "originalCommit": {"oid": "9310cba6a2011a587825ab21b9cb8120abf887e1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIxMTUzMw==", "bodyText": "I meant a newline at the end of the file", "url": "https://github.com/akvo/akvo-flow/pull/3700#discussion_r534211533", "createdAt": "2020-12-02T14:32:03Z", "author": {"login": "valllllll2000"}, "path": "GAE/test/org/akvo/flow/xml/XmlQuestionTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.xml;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.gallatinsystems.survey.dao.QuestionDao;\n+import com.gallatinsystems.survey.domain.Question;\n+import com.gallatinsystems.survey.domain.QuestionGroup;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.survey.domain.SurveyGroup;\n+import com.gallatinsystems.survey.domain.Translation;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.api.app.DataStoreTestUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class XmlQuestionTest {\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+    private DataStoreTestUtil dsu =  new DataStoreTestUtil();\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    @Test\n+    public void aQuestionWithDuplicatedTipsOnlySerializesOne() throws JsonProcessingException {\n+\n+        SurveyGroup surveyGroup = dsu.createSurveyGroup();\n+        Survey survey = dsu.createSurvey(surveyGroup);\n+        QuestionGroup questionGroup = dsu.createQuestionGroup(survey, 1, false);\n+        Question question = dsu.createQuestion(survey, questionGroup.getKey().getId(), Question.Type.FREE_TEXT, false);\n+        QuestionDao dao = new QuestionDao();\n+\n+        question.setOrder(1);\n+        question.setText(\"First question\");\n+        question.setTip(\"One\");\n+        dao.save(question);\n+\n+        Long surveyId = survey.getKey().getId();\n+        Long questionId = question.getKey().getId();\n+\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+        dsu.createTranslation(surveyId, questionId, Translation.ParentType.QUESTION_TIP, \"uno\", \"es\");\n+\n+        Question question1 = dao.getByKey(question.getKey().getId(), true);\n+        XmlQuestion toXml = new XmlQuestion(question1);\n+        XmlMapper objectMapper = new XmlMapper();\n+\n+        String xmlTemplate = \"<XmlQuestion id=\\\"%s\\\" order=\\\"1\\\" type=\\\"free\\\" mandatory=\\\"false\\\" localeNameFlag=\\\"false\\\"><help><altText type=\\\"translation\\\" language=\\\"es\\\">uno</altText><text>One</text></help><text>First question</text></XmlQuestion>\";\n+        String expectedXml = String.format(xmlTemplate, questionId);\n+\n+        assertEquals(expectedXml, objectMapper.writeValueAsString(toXml));\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2MDc3OQ=="}, "originalCommit": {"oid": "9310cba6a2011a587825ab21b9cb8120abf887e1"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4619, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}