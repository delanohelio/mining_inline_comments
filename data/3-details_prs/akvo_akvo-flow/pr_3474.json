{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Njc1NzM1", "number": 3474, "title": "Issue/3469 all datapoints", "bodyText": "Restore behavior of serving all data points for those assignments that doesn't have a DataPointAssignment entities", "createdAt": "2020-03-17T07:43:42Z", "url": "https://github.com/akvo/akvo-flow/pull/3474", "merged": true, "mergeCommit": {"oid": "fca5c89bd4fecde8c8b29d2751f87d36cf15ba5b"}, "closed": true, "closedAt": "2020-03-17T19:51:41Z", "author": {"login": "iperdomo"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOdk4OgH2gAyMzg5Njc1NzM1Ojk4NmM5OGJlYTY5ZjAwZDU0OTUxMDg5OGMwZGUwY2Q0YzFkOGE5Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOzzjAgFqTM3NjY2MzA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "986c98bea69f00d549510898c0de0cd4c1d8a927", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/986c98bea69f00d549510898c0de0cd4c1d8a927", "committedDate": "2020-03-17T07:28:33Z", "message": "[#3469] Save a collection does not behave as save a single object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52195015b277e180e6d5ae8bf5c3e23b35b76203", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/52195015b277e180e6d5ae8bf5c3e23b35b76203", "committedDate": "2020-03-17T07:39:53Z", "message": "[#3469] Mimic old behavior for data point assignments\n\n* Existing assignments only contain the entity `SurveyAssignment` but\nnot `DataPointAssignment`\n* When serving the available data points for a device we search for\nboth scenarios."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODkwNDAz", "url": "https://github.com/akvo/akvo-flow/pull/3474#pullrequestreview-375890403", "createdAt": "2020-03-17T10:03:38Z", "commit": {"oid": "52195015b277e180e6d5ae8bf5c3e23b35b76203"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowMzozOFrOF3VU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyMzo1NFrOF3WAkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NTQzMg==", "bodyText": "small typo.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393565432", "createdAt": "2020-03-17T10:03:38Z", "author": {"login": "muloem"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssingment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52195015b277e180e6d5ae8bf5c3e23b35b76203"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjY1Ng==", "bodyText": "The assertEquals params should be reversed I believe. assertEquals(expected, actual)", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393566656", "createdAt": "2020-03-17T10:05:49Z", "author": {"login": "muloem"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssingment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(assignment.getDataPointIds(), dataPointIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52195015b277e180e6d5ae8bf5c3e23b35b76203"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3NjU5Mw==", "bodyText": "This branch should be an exceptional one.. maybe we should log some kind of error here.  There is a survey on a device but when attempting to retrieve its assignment we find nothing", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393576593", "createdAt": "2020-03-17T10:23:54Z", "author": {"login": "muloem"}, "path": "GAE/src/org/akvo/flow/api/app/DataPointServlet.java", "diffHunk": "@@ -111,6 +97,39 @@ protected RestResponse handleRequest(RestRequest req) throws Exception {\n         return res;\n     }\n \n+    public List<SurveyedLocale> getDataPointList(Long surveyId, Long deviceId) {\n+        List<DataPointAssignment> assList =\n+                dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+\n+\n+        if (assList.isEmpty()) {\n+            // Mimic old behavior\n+            SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+\n+            List<SurveyAssignment> allAssigmentsToDevice = saDao.listAllContainingDevice(deviceId);\n+            List<SurveyAssignment> filteredAssignments = allAssigmentsToDevice.stream().filter(assignment ->\n+                    assignment.getSurveyId().equals(surveyId)).collect(Collectors.toList());\n+\n+            if (filteredAssignments.isEmpty()) {\n+                return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52195015b277e180e6d5ae8bf5c3e23b35b76203"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e9f9004f94edb12f3dc36f4e9f2f4c3740c70b", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/f3e9f9004f94edb12f3dc36f4e9f2f4c3740c70b", "committedDate": "2020-03-17T12:50:56Z", "message": "[#3469] Change operands in assertEquals, fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/d46b6de24b8f67075e5342867ab68c95dbc2e25d", "committedDate": "2020-03-17T14:23:51Z", "message": "[#3469] Report HTTP 400 on missing assignment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjI4NjQ1", "url": "https://github.com/akvo/akvo-flow/pull/3474#pullrequestreview-376228645", "createdAt": "2020-03-17T16:59:37Z", "commit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1OTozN1rOF3lgVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoxNjoxNVrOF3mJ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMDQ4NA==", "bodyText": "As the numbers are not important, use (rand-int) instead of hardcoded numbers, so that it is obvious that is \"any int\" and not \"this particular int\", because the fact that 3 out of 4 are 1L but not the other makes me wonder if those that are 1L are somehow related.\nAlso, using 1L for all means that maybe there is some bug in the order of parameters and it is not catch by the tests.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393830484", "createdAt": "2020-03-17T16:59:37Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTMwMw==", "bodyText": "Does this part of the test has anything to do with the previous part about dataPointAssignmentDao? If not, move to another tests", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393831303", "createdAt": "2020-03-17T17:00:49Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjg2NA==", "bodyText": "Why is this important for this test?", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393832864", "createdAt": "2020-03-17T17:03:09Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNjUxNg==", "bodyText": "This use of servlet was really unexpected. I was expecting all the tests to be testing at the same layer, so either the DAO layer or the servlet layer.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393836516", "createdAt": "2020-03-17T17:08:49Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzU4MQ==", "bodyText": "This special value is not obvious where it is used in the tests.\nAlso, try to remove comment by making the test say the same.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393837581", "createdAt": "2020-03-17T17:10:29Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+\n+        final List<SurveyedLocale> someDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> selectedIds = new HashSet<>(selectedDataPointIds);\n+        final Set<Long> foundIds = getEntityIds(someDataPoints);\n+\n+        assertEquals(selectedIds, foundIds);\n+    }\n+\n+\n+    /**\n+     * New schema: `[0]` as data point list represent all data points", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDAwMw==", "bodyText": "I really dislike special values like [0]. They always cause problems.\nDid you discard the option of adding a flag in the survey assignment objects?", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393840003", "createdAt": "2020-03-17T17:14:26Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+\n+        final List<SurveyedLocale> someDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> selectedIds = new HashSet<>(selectedDataPointIds);\n+        final Set<Long> foundIds = getEntityIds(someDataPoints);\n+\n+        assertEquals(selectedIds, foundIds);\n+    }\n+\n+\n+    /**\n+     * New schema: `[0]` as data point list represent all data points", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzU4MQ=="}, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MTEwNg==", "bodyText": "This is duplicated several times.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393841106", "createdAt": "2020-03-17T17:16:15Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+\n+        final List<SurveyedLocale> someDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> selectedIds = new HashSet<>(selectedDataPointIds);\n+        final Set<Long> foundIds = getEntityIds(someDataPoints);\n+\n+        assertEquals(selectedIds, foundIds);\n+    }\n+\n+\n+    /**\n+     * New schema: `[0]` as data point list represent all data points\n+     **/\n+    @Test\n+    public void allDataPointsNewSchemaTest() {\n+\n+        final Long surveyId = 200L;\n+        final List<SurveyedLocale> allDataPoints = createDataPoints(surveyId, 15);\n+        final Long assignmentId = 30L;\n+        final Long deviceId = 2L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, Collections.singletonList(0L), surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+        final List<SurveyedLocale> foundDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> allDataPointIds = getEntityIds(allDataPoints);\n+        final Set<Long> foundDataPointIds = getEntityIds(foundDataPoints);\n+\n+        assertEquals(allDataPointIds, foundDataPointIds);\n+    }\n+\n+\n+    /**\n+     * Old schema: We have a `SurveyAssingment` but no `DataPointAssignment`\n+     */\n+    @Test\n+    public void allDataPointsOldSchemaTest() {\n+        final Long surveyId = 300L;\n+        final List<SurveyedLocale> allDataPoints = createDataPoints(surveyId, 20);\n+        final List<Long> deviceIds = Arrays.asList(5L, 6L);\n+        final List<Long> formIds = Arrays.asList(10L, 11L);\n+\n+        final SurveyAssignment sa = createAssignment(surveyId, deviceIds, formIds);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+        final List<SurveyedLocale> foundDataPoints = servlet.getDataPointList(surveyId, 6L);\n+\n+        final Set<Long> allDataPointIds = getEntityIds(allDataPoints);\n+        final Set<Long> foundDataPointIds = getEntityIds(foundDataPoints);\n+\n+        assertEquals(allDataPointIds, foundDataPointIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzI0MTkx", "url": "https://github.com/akvo/akvo-flow/pull/3474#pullrequestreview-376324191", "createdAt": "2020-03-17T19:03:32Z", "commit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowMzozMlrOF3qG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowMzozMlrOF3qG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNTkwMQ==", "bodyText": "Perhaps we should return a 404 instead? @valllllll2000 how would the device behave when we return one of these error codes?", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r393905901", "createdAt": "2020-03-17T19:03:32Z", "author": {"login": "muloem"}, "path": "GAE/src/org/akvo/flow/api/app/DataPointServlet.java", "diffHunk": "@@ -83,21 +84,11 @@ protected RestResponse handleRequest(RestRequest req) throws Exception {\n             if (device != null) {\n                 log.info(\"Found device id: \" + device.getKey().getId());\n                 log.fine(\"Found device: \" + device);\n-                //Find which assignments we are part of\n-                List<DataPointAssignment> assList =\n-                        dataPointAssignmentDao.listByDeviceAndSurvey(device.getKey().getId(), dpReq.getSurveyId());\n-                //Combine their point lists\n-                Set<Long> pointSet = new HashSet<>();\n-                for (DataPointAssignment ass : assList) {\n-                    pointSet.addAll(ass.getDataPointIds());\n-                }\n-                //Fetch the data points\n-                if (ALL_DATAPOINTS.equals(pointSet)) {\n-                    dpList = surveyedLocaleDao.listLocalesBySurveyGroupId(dpReq.getSurveyId());\n-                } else {\n-                    List<Long> pointList = new ArrayList<>();\n-                    pointList.addAll(pointSet);\n-                    dpList = surveyedLocaleDao.listByKeys(pointList);\n+                List<SurveyedLocale> dpList = getDataPointList(device.getKey().getId(), dpReq.getSurveyId());\n+                if (dpList == null) {\n+                    res.setCode(String.valueOf(HttpServletResponse.SC_BAD_REQUEST));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbac1f244e7029e9df81d43b53358f12a8f54dd6", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/cbac1f244e7029e9df81d43b53358f12a8f54dd6", "committedDate": "2020-03-17T19:14:22Z", "message": "[#3469] Use random longs for Ids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b8a4468f3dda0170ac87a4420b944bc3408700", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/05b8a4468f3dda0170ac87a4420b944bc3408700", "committedDate": "2020-03-17T19:18:05Z", "message": "[#3469] Use HTTP 404 when an assignment was not found for a device"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f81187a0a9552fd8a3553480ccdc9e1819f91eac", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/f81187a0a9552fd8a3553480ccdc9e1819f91eac", "committedDate": "2020-03-17T19:19:54Z", "message": "[#3469] Remove unrelated assertion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzQyNjEx", "url": "https://github.com/akvo/akvo-flow/pull/3474#pullrequestreview-376342611", "createdAt": "2020-03-17T19:31:25Z", "commit": {"oid": "f81187a0a9552fd8a3553480ccdc9e1819f91eac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjYzMDk4", "url": "https://github.com/akvo/akvo-flow/pull/3474#pullrequestreview-376663098", "createdAt": "2020-03-18T08:50:18Z", "commit": {"oid": "cbac1f244e7029e9df81d43b53358f12a8f54dd6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo1MDoxOFrOF37O5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNDo1M1rOF38E8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4NjQ3MQ==", "bodyText": "Inline rnd", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r394186471", "createdAt": "2020-03-18T08:50:18Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -100,52 +104,61 @@ private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, L\n         return entityIds;\n     }\n \n+    private Long randomId() {\n+        Random rnd = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbac1f244e7029e9df81d43b53358f12a8f54dd6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5MjMzNQ==", "bodyText": "\"\"Duplication is the root of all evil\". Even with 1, it is going to make the tests more readable.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r394192335", "createdAt": "2020-03-18T09:00:52Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+\n+        final List<SurveyedLocale> someDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> selectedIds = new HashSet<>(selectedDataPointIds);\n+        final Set<Long> foundIds = getEntityIds(someDataPoints);\n+\n+        assertEquals(selectedIds, foundIds);\n+    }\n+\n+\n+    /**\n+     * New schema: `[0]` as data point list represent all data points\n+     **/\n+    @Test\n+    public void allDataPointsNewSchemaTest() {\n+\n+        final Long surveyId = 200L;\n+        final List<SurveyedLocale> allDataPoints = createDataPoints(surveyId, 15);\n+        final Long assignmentId = 30L;\n+        final Long deviceId = 2L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, Collections.singletonList(0L), surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+        final List<SurveyedLocale> foundDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> allDataPointIds = getEntityIds(allDataPoints);\n+        final Set<Long> foundDataPointIds = getEntityIds(foundDataPoints);\n+\n+        assertEquals(allDataPointIds, foundDataPointIds);\n+    }\n+\n+\n+    /**\n+     * Old schema: We have a `SurveyAssingment` but no `DataPointAssignment`\n+     */\n+    @Test\n+    public void allDataPointsOldSchemaTest() {\n+        final Long surveyId = 300L;\n+        final List<SurveyedLocale> allDataPoints = createDataPoints(surveyId, 20);\n+        final List<Long> deviceIds = Arrays.asList(5L, 6L);\n+        final List<Long> formIds = Arrays.asList(10L, 11L);\n+\n+        final SurveyAssignment sa = createAssignment(surveyId, deviceIds, formIds);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+        final List<SurveyedLocale> foundDataPoints = servlet.getDataPointList(surveyId, 6L);\n+\n+        final Set<Long> allDataPointIds = getEntityIds(allDataPoints);\n+        final Set<Long> foundDataPointIds = getEntityIds(foundDataPoints);\n+\n+        assertEquals(allDataPointIds, foundDataPointIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MTEwNg=="}, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE5NDQ1MA==", "bodyText": "I feel that my question was not understood. Rephrasing it:\nDid you discard the option of adding an explicit flag/field in SurveyAssignment object to mean \"ALL DATAPOINTS\" or \"PARTIAL DATAPOINTS\"?", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r394194450", "createdAt": "2020-03-18T09:04:40Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());\n+    }\n+\n+    @Test\n+    public void someDataPointsTest() {\n+\n+        final Long surveyId = 100L;\n+        final List<SurveyedLocale> dataPoints = createDataPoints(surveyId, 10);\n+\n+        final SurveyedLocale dataPoint = dataPoints.get(7);\n+        assertEquals(\"7\", dataPoint.getIdentifier());\n+\n+        final List<Long> selectedDataPointIds = Arrays.asList(dataPoints.get(5).getKey().getId(), dataPoints.get(6).getKey().getId());\n+        final Long assignmentId = 20L;\n+        final Long deviceId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, selectedDataPointIds, surveyId);\n+\n+        final DataPointServlet servlet = new DataPointServlet();\n+\n+        final List<SurveyedLocale> someDataPoints = servlet.getDataPointList(surveyId, deviceId);\n+\n+        final Set<Long> selectedIds = new HashSet<>(selectedDataPointIds);\n+        final Set<Long> foundIds = getEntityIds(someDataPoints);\n+\n+        assertEquals(selectedIds, foundIds);\n+    }\n+\n+\n+    /**\n+     * New schema: `[0]` as data point list represent all data points", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNzU4MQ=="}, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMDMwNg==", "bodyText": "These are two different tests. Please split in two.", "url": "https://github.com/akvo/akvo-flow/pull/3474#discussion_r394200306", "createdAt": "2020-03-18T09:14:53Z", "author": {"login": "dlebrero"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointServletTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.DataPointAssignmentDao;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.DataPointAssignment;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DataPointServletTest {\n+\n+    private final LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeEach\n+    public void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+\n+    private DataPointAssignment createDataPointAssignment(Long assignmentId, Long deviceId, List<Long> dataPointIds, Long surveyId) {\n+        final DataPointAssignment dpa = new DataPointAssignment();\n+        final DataPointAssignmentDao dao = new DataPointAssignmentDao();\n+\n+        dpa.setDeviceId(deviceId);\n+        dpa.setDataPointIds(dataPointIds);\n+        dpa.setSurveyAssignmentId(assignmentId);\n+        dpa.setSurveyId(surveyId);\n+\n+        return dao.save(dpa);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        final SurveyAssignment sa = new SurveyAssignment();\n+        final SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+\n+        sa.setSurveyId(surveyId);\n+        sa.setDeviceIds(deviceIds);\n+        sa.setFormIds(formIds);\n+\n+        return dao.save(sa);\n+    }\n+\n+    private List<SurveyedLocale> createDataPoints(Long surveyId, int howMany) {\n+        final SurveyedLocaleDao dpDao = new SurveyedLocaleDao();\n+        final List<SurveyedLocale> datapoints = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyedLocale dataPoint = new SurveyedLocale();\n+            dataPoint.setIdentifier(String.valueOf(i));\n+            dataPoint.setSurveyGroupId(surveyId);\n+            dataPoint.setDisplayName(\"dataPoint: \" + i);\n+            datapoints.add(dataPoint);\n+        }\n+        return new ArrayList<>(dpDao.save(datapoints));\n+    }\n+\n+    private Set<Long> getEntityIds(List<? extends BaseDomain> entities) {\n+        Set<Long> entityIds = new HashSet<>();\n+        for (BaseDomain o : entities) {\n+            entityIds.add(o.getKey().getId());\n+        }\n+        return entityIds;\n+    }\n+\n+    @Test\n+    public void datastoreReadWriteTest() {\n+        final Long assignmentId = 1L;\n+        final Long deviceId = 1L;\n+        final List<Long> dataPointIds = Collections.singletonList(0L);\n+        final Long surveyId = 1L;\n+\n+        createDataPointAssignment(assignmentId, deviceId, dataPointIds, surveyId);\n+\n+        final DataPointAssignmentDao dataPointAssignmentDao = new DataPointAssignmentDao();\n+        final List<DataPointAssignment> dataPointAssignments = dataPointAssignmentDao.listByDeviceAndSurvey(deviceId, surveyId);\n+        assertFalse(dataPointAssignments.isEmpty());\n+\n+        final DataPointAssignment assignment = dataPointAssignments.get(0);\n+        assertEquals(dataPointIds, assignment.getDataPointIds());\n+        assertEquals(deviceId, assignment.getDeviceId());\n+        assertEquals(surveyId, assignment.getSurveyId());\n+\n+\n+        final List<Long> deviceIds = Arrays.asList(1L, 2L);\n+        final List<Long> formIds = Arrays.asList(100L, 200L);\n+\n+        createAssignment(surveyId, deviceIds, formIds);\n+\n+        final SurveyAssignmentDao saDao = new SurveyAssignmentDao();\n+        final List<SurveyAssignment> surveyAssignments = saDao.listAllContainingDevice(2L);\n+        assertFalse(surveyAssignments.isEmpty());\n+\n+        final SurveyAssignment sa = surveyAssignments.get(0);\n+        assertEquals(surveyId, sa.getSurveyId());\n+        assertTrue(sa.getDeviceIds().contains(2L));\n+        assertEquals(formIds, sa.getFormIds());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMTMwMw=="}, "originalCommit": {"oid": "d46b6de24b8f67075e5342867ab68c95dbc2e25d"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4602, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}