{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDg2Njk3", "number": 3535, "title": "[#3528] Filter form instances by assigned forms", "bodyText": "The /datapoints endpoint will filter form instances by the\nassigned forms instead of returning all. The exception is the\nold /surveyedlocale used by old apps that will keep returning\nall the data.", "createdAt": "2020-04-21T07:18:28Z", "url": "https://github.com/akvo/akvo-flow/pull/3535", "merged": true, "mergeCommit": {"oid": "aff263007ea34e978835a0fa6c69c968f24c372a"}, "closed": true, "closedAt": "2020-04-21T13:14:41Z", "author": {"login": "iperdomo"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZuRc4gH2gAyNDA2NDg2Njk3OjQ5Yjc1NTkxYmVlYjBhMTIxNjMwODNkNWJkNWVmYmI4NTZiOTkwMWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZzgJyAFqTM5NzMxNjY1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/49b75591beeb0a12163083d5bd5efbb856b9901e", "committedDate": "2020-04-21T07:08:53Z", "message": "[#3528] Filter form instances by assigned forms\n\nThe `/datapoints` endpoint will filter form instances by the\nassigned forms instead of returning all. The exception is the\nold `/surveyedlocale` used by old apps that will keep returning\nall the data."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDU1MTQ1", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397055145", "createdAt": "2020-04-21T07:24:40Z", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoyNDo0MFrOGI2qVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzoyNDo0MFrOGI2qVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkzNzM2NA==", "bodyText": "Please rename: Survey is called form and SurveyedLocale is called survey, it's a bit confusing", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411937364", "createdAt": "2020-04-21T07:24:40Z", "author": {"login": "valllllll2000"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDc2OTgy", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397076982", "createdAt": "2020-04-21T07:54:28Z", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1NDoyOFrOGI357w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1NDoyOFrOGI357w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1Nzc0Mw==", "bodyText": "assignment seems unused here", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411957743", "createdAt": "2020-04-21T07:54:28Z", "author": {"login": "valllllll2000"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {\n+        List<SurveyInstance> newInstances = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyInstance si = new SurveyInstance();\n+            si.setSurveyId(form.getKey().getId());\n+            si.setSurveyedLocaleId(survey.getKey().getId());\n+            si.setCollectionDate(new Date());\n+            si.setUuid(UUID.randomUUID().toString());\n+            si.setFormVersion(form.getVersion());\n+            newInstances.add(si);\n+        }\n+        SurveyInstanceDAO dao = new SurveyInstanceDAO();\n+        return (List<SurveyInstance>) dao.save(newInstances);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(SurveyedLocale dataPoint, int howMany, Survey... forms) {\n+        List<SurveyInstance> allFormInstances = new ArrayList<>();\n+        for (Survey form : forms) {\n+            allFormInstances.addAll(createFormInstances(form, dataPoint, randomInt()));\n+        }\n+        return allFormInstances;\n+    }\n+\n+    private SurveyedLocale createDataPoint() {\n+        long id = randomId();\n+        SurveyedLocale dp = new SurveyedLocale();\n+        dp.setKey(KeyFactory.createKey(\"SurveyedLocale\", id));\n+        dp.setSurveyGroupId(randomId());\n+\n+        SurveyedLocaleDao dao = new SurveyedLocaleDao();\n+        return dao.save(dp);\n+    }\n+\n+    private Device createDevice() {\n+        long id = randomId();\n+        Device device = new Device();\n+        device.setKey(KeyFactory.createKey(\"Device\", id));\n+        device.setEsn(String.valueOf(id));\n+        device.setDeviceType(Device.DeviceType.CELL_PHONE_ANDROID);\n+        device.setDeviceIdentifier(String.valueOf(id));\n+\n+        DeviceDAO dao = new DeviceDAO();\n+        return dao.save(device);\n+    }\n+\n+    private SurveyAssignment createAssignment(Long surveyId, List<Long> deviceIds, List<Long> formIds) {\n+        SurveyAssignment assignment = new SurveyAssignment();\n+        assignment.setKey(KeyFactory.createKey(\"SurveyAssignment\", randomId()));\n+        assignment.setDeviceIds(deviceIds);\n+        assignment.setFormIds(formIds);\n+        assignment.setSurveyId(surveyId);\n+\n+        SurveyAssignmentDao dao = new SurveyAssignmentDao();\n+        return dao.save(assignment);\n+    }\n+\n+    private Set<Long> getIds(List<? extends BaseDomain> entities) {\n+        return entities.stream()\n+                .map(surveyInstance -> surveyInstance.getKey().getId())\n+                .collect(Collectors.toSet());\n+    }\n+\n+    @Test\n+    public void getSurveyInstancesReturnsFilteredData() {\n+\n+        Survey form1 = createForm();\n+        Survey form2 = createForm();\n+\n+        Device device = createDevice();\n+\n+        SurveyedLocale dataPoint = createDataPoint();\n+        List<Long> dataPointIds = Arrays.asList(dataPoint.getKey().getId());\n+        List<SurveyInstance> allFormInstances = createFormInstances(dataPoint, randomInt(), form1, form2);\n+\n+        List<SurveyInstance> form1Instances = allFormInstances.stream()\n+                .filter(surveyInstance -> surveyInstance.getSurveyId().equals(form1.getKey().getId()))\n+                .collect(Collectors.toList());\n+\n+        // Assignment only contains Id for form1\n+        SurveyAssignment assignment = createAssignment(dataPoint.getSurveyGroupId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDc5NTg1", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397079585", "createdAt": "2020-04-21T07:58:01Z", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1ODowMVrOGI4Dbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1ODowMVrOGI4Dbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2MDE3NA==", "bodyText": "What is homMany used for?", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411960174", "createdAt": "2020-04-21T07:58:01Z", "author": {"login": "valllllll2000"}, "path": "GAE/test/org/akvo/flow/api/app/DataPointUtilTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.flow.api.app;\n+\n+import com.gallatinsystems.device.dao.DeviceDAO;\n+import com.gallatinsystems.device.domain.Device;\n+import com.gallatinsystems.framework.domain.BaseDomain;\n+import com.gallatinsystems.survey.dao.SurveyDAO;\n+import com.gallatinsystems.survey.domain.Survey;\n+import com.gallatinsystems.surveyal.dao.SurveyedLocaleDao;\n+import com.gallatinsystems.surveyal.domain.SurveyedLocale;\n+import com.google.appengine.api.datastore.KeyFactory;\n+import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;\n+import com.google.appengine.tools.development.testing.LocalServiceTestHelper;\n+import org.akvo.flow.dao.SurveyAssignmentDao;\n+import org.akvo.flow.domain.persistent.SurveyAssignment;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.waterforpeople.mapping.dao.SurveyInstanceDAO;\n+import org.waterforpeople.mapping.domain.SurveyInstance;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DataPointUtilTest {\n+    private final static LocalServiceTestHelper helper = new LocalServiceTestHelper(new LocalDatastoreServiceTestConfig());\n+\n+    @BeforeAll\n+    public static void setUp() {\n+        helper.setUp();\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        helper.tearDown();\n+    }\n+\n+    private long randomId() {\n+        return ThreadLocalRandom.current().nextLong(0, 1000000);\n+    }\n+\n+    private int randomInt() {\n+        return ThreadLocalRandom.current().nextInt(1, 200);\n+    }\n+\n+    private Survey createForm() {\n+        long id = randomId();\n+        Survey form = new Survey();\n+        form.setKey(KeyFactory.createKey(\"Survey\", id));\n+        form.setName(\"Form\" + id);\n+        form.setVersion(1.0d);\n+        SurveyDAO dao = new SurveyDAO();\n+        return dao.save(form);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(Survey form, SurveyedLocale survey, int howMany) {\n+        List<SurveyInstance> newInstances = new ArrayList<>();\n+        for (int i = 0; i < howMany; i++) {\n+            SurveyInstance si = new SurveyInstance();\n+            si.setSurveyId(form.getKey().getId());\n+            si.setSurveyedLocaleId(survey.getKey().getId());\n+            si.setCollectionDate(new Date());\n+            si.setUuid(UUID.randomUUID().toString());\n+            si.setFormVersion(form.getVersion());\n+            newInstances.add(si);\n+        }\n+        SurveyInstanceDAO dao = new SurveyInstanceDAO();\n+        return (List<SurveyInstance>) dao.save(newInstances);\n+    }\n+\n+    private List<SurveyInstance> createFormInstances(SurveyedLocale dataPoint, int howMany, Survey... forms) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDg1NTcy", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397085572", "createdAt": "2020-04-21T08:05:59Z", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNTo1OVrOGI4YQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNTo1OVrOGI4YQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NTUwNQ==", "bodyText": "I see this method has been made public for tests, please consider this https://www.artima.com/suiterunner/private.html", "url": "https://github.com/akvo/akvo-flow/pull/3535#discussion_r411965505", "createdAt": "2020-04-21T08:05:59Z", "author": {"login": "valllllll2000"}, "path": "GAE/src/org/akvo/flow/api/app/DataPointUtil.java", "diffHunk": "@@ -126,20 +125,37 @@ private SurveyedLocaleDto createSurveyedLocaleDto(Long surveyGroupId, QuestionDa\n      * Fetches SurveyInstances using the surveyedLocalesIds and puts them in a map:\n      * key: SurveyedLocalesId, value: list of SurveyInstances\n      */\n-    private Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds) {\n+    public Map<Long, List<SurveyInstance>> getSurveyInstances(List<Long> surveyedLocalesIds, Long surveyId, Device device) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDkwMTky", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397090192", "createdAt": "2020-04-21T08:11:51Z", "commit": {"oid": "49b75591beeb0a12163083d5bd5efbb856b9901e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3791e0c30303dc4fc7a05406ee524f6a5698de95", "author": {"user": {"login": "iperdomo", "name": "Iv\u00e1n Perdomo"}}, "url": "https://github.com/akvo/akvo-flow/commit/3791e0c30303dc4fc7a05406ee524f6a5698de95", "committedDate": "2020-04-21T12:31:58Z", "message": "[#3528] Test case enhancement based on @valllllll2000 review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MzE2NjUw", "url": "https://github.com/akvo/akvo-flow/pull/3535#pullrequestreview-397316650", "createdAt": "2020-04-21T13:14:28Z", "commit": {"oid": "3791e0c30303dc4fc7a05406ee524f6a5698de95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4613, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}