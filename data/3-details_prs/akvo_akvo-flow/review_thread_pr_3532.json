{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDIzOTQ3", "number": 3532, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NDozNVrOD0OnlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NTo1MFrOD0OqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDkyMDUzOnYy", "diffSide": "RIGHT", "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NDozNVrOGJEKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozODo1NlrOGJXfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1ODU2OA==", "bodyText": "We can change this to Collections.singletonList(0L);", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412158568", "createdAt": "2020-04-21T12:54:35Z", "author": {"login": "iperdomo"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);\n+        }\n+    }\n+\n+    private void assignEntityProp(Entity origin, Entity target, String prop) {\n+        target.setProperty(prop, origin.getProperty(prop));\n+    }\n+\n+    @Override\n+    public void execute(DatastoreService ds, String[] args) throws Exception {\n+\n+        final Query q = new Query(\"SurveyAssignment\");\n+        final PreparedQuery pq = ds.prepare(q);\n+        final List<Entity> toBeCreated = new ArrayList<>();\n+\n+        System.out.println(\"Processing SurveyAssignments\");\n+\n+        for (Entity sl : pq.asIterable(FetchOptions.Builder.withChunkSize(500))) {\n+            final Long surveyAssignmentId = sl.getKey().getId();\n+            final List<Long> deviceIds = (List<Long>) sl.getProperty(\"deviceIds\");\n+            final Long surveyId = (Long) sl.getProperty(\"surveyId\");\n+            if (deviceIds == null) {\n+                continue;\n+            }\n+            for (Long deviceId : deviceIds) {\n+                final Entity dataPointAssignement = getDataPointAssignment(ds, deviceId, surveyAssignmentId, surveyId);\n+                if (dataPointAssignement == null) {\n+\n+                    Entity newDataPointAssignment = new Entity(\"DataPointAssignment\");\n+\n+                    List<Long> dataPointIds = new ArrayList<Long>();\n+                    dataPointIds.add(new Long(0));\n+                    newDataPointAssignment.setProperty(\"dataPointIds\", dataPointIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3NTI3NA==", "bodyText": "done!", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412475274", "createdAt": "2020-04-21T20:38:56Z", "author": {"login": "tangrammer"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);\n+        }\n+    }\n+\n+    private void assignEntityProp(Entity origin, Entity target, String prop) {\n+        target.setProperty(prop, origin.getProperty(prop));\n+    }\n+\n+    @Override\n+    public void execute(DatastoreService ds, String[] args) throws Exception {\n+\n+        final Query q = new Query(\"SurveyAssignment\");\n+        final PreparedQuery pq = ds.prepare(q);\n+        final List<Entity> toBeCreated = new ArrayList<>();\n+\n+        System.out.println(\"Processing SurveyAssignments\");\n+\n+        for (Entity sl : pq.asIterable(FetchOptions.Builder.withChunkSize(500))) {\n+            final Long surveyAssignmentId = sl.getKey().getId();\n+            final List<Long> deviceIds = (List<Long>) sl.getProperty(\"deviceIds\");\n+            final Long surveyId = (Long) sl.getProperty(\"surveyId\");\n+            if (deviceIds == null) {\n+                continue;\n+            }\n+            for (Long deviceId : deviceIds) {\n+                final Entity dataPointAssignement = getDataPointAssignment(ds, deviceId, surveyAssignmentId, surveyId);\n+                if (dataPointAssignement == null) {\n+\n+                    Entity newDataPointAssignment = new Entity(\"DataPointAssignment\");\n+\n+                    List<Long> dataPointIds = new ArrayList<Long>();\n+                    dataPointIds.add(new Long(0));\n+                    newDataPointAssignment.setProperty(\"dataPointIds\", dataPointIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1ODU2OA=="}, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDkyNjg3OnYy", "diffSide": "RIGHT", "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjo1NTo1MFrOGJEOPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDozOTowMVrOGJXfzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTU1MQ==", "bodyText": "We know that we have broken data in the Datastore, instead of aborting, we should log the problem and continue with the rest.", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412159551", "createdAt": "2020-04-21T12:55:50Z", "author": {"login": "iperdomo"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3NTM0MA==", "bodyText": "done!", "url": "https://github.com/akvo/akvo-flow/pull/3532#discussion_r412475340", "createdAt": "2020-04-21T20:39:01Z", "author": {"login": "tangrammer"}, "path": "scripts/data/src/org/akvo/gae/remoteapi/UnifyDataPointAssignment.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright (C) 2020 Stichting Akvo (Akvo Foundation)\n+ *\n+ *  This file is part of Akvo FLOW.\n+ *\n+ *  Akvo FLOW is free software: you can redistribute it and modify it under the terms of\n+ *  the GNU Affero General Public License (AGPL) as published by the Free Software Foundation,\n+ *  either version 3 of the License or any later version.\n+ *\n+ *  Akvo FLOW is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ *  See the GNU Affero General Public License included below for more details.\n+ *\n+ *  The full license text can also be seen at <http://www.gnu.org/licenses/agpl.html>.\n+ */\n+\n+package org.akvo.gae.remoteapi;\n+\n+import com.google.appengine.api.datastore.*;\n+import com.google.appengine.api.datastore.Query.FilterOperator;\n+import com.google.appengine.api.datastore.Query.FilterPredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+\n+/*\n+ * - For ech SurveyAssignment.deviceIds should have a DataPointAssigment entity related, when missing create a new one with dataPointsIds=[\"0\"]\n+ */\n+public class UnifyDataPointAssignment implements Process {\n+\n+    private Entity getDataPointAssignment(DatastoreService ds, long deviceId, long surveyAssignmentId, long surveyId) {\n+        try {\n+            Query.Filter f1 = new FilterPredicate(\"deviceId\", FilterOperator.EQUAL, deviceId);\n+            Query.Filter f2 = new FilterPredicate(\"surveyAssignmentId\", FilterOperator.EQUAL, surveyAssignmentId);\n+            Query.Filter f3 = new FilterPredicate(\"surveyId\", FilterOperator.EQUAL, surveyId);\n+            Query q = new Query(\"DataPointAssignment\");\n+            q.setFilter(Query.CompositeFilterOperator.and(f1, f2, f3));\n+            PreparedQuery pq = ds.prepare(q);\n+            return pq.asSingleEntity();\n+        } catch (Exception e) {\n+            throw new Error(\"Error DataPointAssignment duplicated! deviceId: \" + deviceId + \" surveyAssignmentId: \" + surveyAssignmentId + \" surveyId: \" + surveyId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE1OTU1MQ=="}, "originalCommit": {"oid": "e947d98e972733039c87aba258a101d8ef6a3bff"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4660, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}