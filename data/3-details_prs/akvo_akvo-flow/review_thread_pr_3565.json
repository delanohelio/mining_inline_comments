{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzQ1NjMw", "number": 3565, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoxOTozM1rOD-k7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo0MToyMFrOD-lTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTQzMzcxOnYy", "diffSide": "RIGHT", "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoxOTozM1rOGYwuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoxOTozM1rOGYwuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNzI2OQ==", "bodyText": "remove comment and improve format", "url": "https://github.com/akvo/akvo-flow/pull/3565#discussion_r428617269", "createdAt": "2020-05-21T12:19:33Z", "author": {"login": "tangrammer"}, "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+/* eslint-disable import/no-unresolved */\n+import React from 'react';\n+import observe from 'akvo-flow/mixins/observe';\n+import WebFormShare from 'akvo-flow/components/forms/form-share';\n+\n+require('akvo-flow/views/react-component');\n+\n+FLOW.WebFormShareView = FLOW.ReactComponentView.extend(\n+  observe({\n+    'FLOW.selectedControl.selectedSurvey.status': 'formValidation',\n+    'FLOW.selectedControl.selectedSurveyGroup.monitoringGroup': 'formValidation',\n+    'FLOW.questionControl.content.isLoaded': 'formValidation',\n+    'FLOW.questionGroupControl.content.isLoaded': 'formValidation',\n+    'FLOW.surveyControl.webformId': 'renderReactSide',\n+  }),\n+  {\n+    init() {\n+      this._super();\n+      this.formValidation = this.formValidation.bind(this);\n+      this.renderReactSide = this.renderReactSide.bind(this);\n+      this.getProps = this.getProps.bind(this);\n+      this.getShareURL = this.getShareURL.bind(this);\n+\n+      this.valid = false;\n+    },\n+\n+    didInsertElement(...args) {\n+      this._super(...args);\n+\n+      // call validate on init", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "366ea6072d676141171aaa19db4c2bb93c0557d1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTQ5MzgwOnYy", "diffSide": "RIGHT", "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo0MToyMFrOGYxUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MzozM1rOGYxqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzA0Mw==", "bodyText": "backend side also checks for CASCADE type https://github.com/akvo/akvo-flow/pull/3564/files#diff-0b87b53604405485c8652761c8c3f11eR28 ... is that correct? @muloem", "url": "https://github.com/akvo/akvo-flow/pull/3565#discussion_r428627043", "createdAt": "2020-05-21T12:41:20Z", "author": {"login": "tangrammer"}, "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+/* eslint-disable import/no-unresolved */\n+import React from 'react';\n+import observe from 'akvo-flow/mixins/observe';\n+import WebFormShare from 'akvo-flow/components/forms/form-share';\n+\n+require('akvo-flow/views/react-component');\n+\n+FLOW.WebFormShareView = FLOW.ReactComponentView.extend(\n+  observe({\n+    'FLOW.selectedControl.selectedSurvey.status': 'formValidation',\n+    'FLOW.selectedControl.selectedSurveyGroup.monitoringGroup': 'formValidation',\n+    'FLOW.questionControl.content.isLoaded': 'formValidation',\n+    'FLOW.questionGroupControl.content.isLoaded': 'formValidation',\n+    'FLOW.surveyControl.webformId': 'renderReactSide',\n+  }),\n+  {\n+    init() {\n+      this._super();\n+      this.formValidation = this.formValidation.bind(this);\n+      this.renderReactSide = this.renderReactSide.bind(this);\n+      this.getProps = this.getProps.bind(this);\n+      this.getShareURL = this.getShareURL.bind(this);\n+\n+      this.valid = false;\n+    },\n+\n+    didInsertElement(...args) {\n+      this._super(...args);\n+\n+      // call validate on init\n+      this.formValidation();\n+\n+      this.renderReactSide();\n+    },\n+\n+    // react side\n+    renderReactSide() {\n+      const props = this.getProps();\n+      this.reactRender(<WebFormShare {...props} />);\n+    },\n+\n+    getProps() {\n+      return {\n+        strings: {},\n+        data: {\n+          valid: this.valid,\n+          shareUrl:\n+            FLOW.surveyControl.webformId &&\n+            `${window.location.origin}/webforms/${FLOW.surveyControl.webformId}`,\n+        },\n+        actions: {\n+          getShareURL: this.getShareURL,\n+        },\n+      };\n+    },\n+\n+    formValidation() {\n+      const selectedForm = FLOW.selectedControl.get('selectedSurvey');\n+      const selectedSurveyGroup = FLOW.selectedControl.get('selectedSurveyGroup');\n+      const questions = FLOW.questionControl.get('content');\n+      const questionGroups = FLOW.questionGroupControl.get('content');\n+\n+      // case 1 is form published?\n+      const isPublished = selectedForm.get('status') === 'PUBLISHED';\n+\n+      // case 2 is not monitoring\n+      const isNotMonitoring = selectedSurveyGroup.get('monitoringGroup') === false;\n+\n+      // case 3 does not have illegal question type\n+      const noIllegalQuestion =\n+        questions.some(question => {\n+          switch (question.get('type')) {\n+            case 'CADDISFLY':\n+              return true;\n+            case 'SIGNATURE':\n+              return true;\n+            case 'GEOSHAPE':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "366ea6072d676141171aaa19db4c2bb93c0557d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyOTcxNQ==", "bodyText": "True. That one slipped by me! \ud83e\udd26  Cascade is supported!\n#3145 (comment)", "url": "https://github.com/akvo/akvo-flow/pull/3565#discussion_r428629715", "createdAt": "2020-05-21T12:47:17Z", "author": {"login": "muloem"}, "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+/* eslint-disable import/no-unresolved */\n+import React from 'react';\n+import observe from 'akvo-flow/mixins/observe';\n+import WebFormShare from 'akvo-flow/components/forms/form-share';\n+\n+require('akvo-flow/views/react-component');\n+\n+FLOW.WebFormShareView = FLOW.ReactComponentView.extend(\n+  observe({\n+    'FLOW.selectedControl.selectedSurvey.status': 'formValidation',\n+    'FLOW.selectedControl.selectedSurveyGroup.monitoringGroup': 'formValidation',\n+    'FLOW.questionControl.content.isLoaded': 'formValidation',\n+    'FLOW.questionGroupControl.content.isLoaded': 'formValidation',\n+    'FLOW.surveyControl.webformId': 'renderReactSide',\n+  }),\n+  {\n+    init() {\n+      this._super();\n+      this.formValidation = this.formValidation.bind(this);\n+      this.renderReactSide = this.renderReactSide.bind(this);\n+      this.getProps = this.getProps.bind(this);\n+      this.getShareURL = this.getShareURL.bind(this);\n+\n+      this.valid = false;\n+    },\n+\n+    didInsertElement(...args) {\n+      this._super(...args);\n+\n+      // call validate on init\n+      this.formValidation();\n+\n+      this.renderReactSide();\n+    },\n+\n+    // react side\n+    renderReactSide() {\n+      const props = this.getProps();\n+      this.reactRender(<WebFormShare {...props} />);\n+    },\n+\n+    getProps() {\n+      return {\n+        strings: {},\n+        data: {\n+          valid: this.valid,\n+          shareUrl:\n+            FLOW.surveyControl.webformId &&\n+            `${window.location.origin}/webforms/${FLOW.surveyControl.webformId}`,\n+        },\n+        actions: {\n+          getShareURL: this.getShareURL,\n+        },\n+      };\n+    },\n+\n+    formValidation() {\n+      const selectedForm = FLOW.selectedControl.get('selectedSurvey');\n+      const selectedSurveyGroup = FLOW.selectedControl.get('selectedSurveyGroup');\n+      const questions = FLOW.questionControl.get('content');\n+      const questionGroups = FLOW.questionGroupControl.get('content');\n+\n+      // case 1 is form published?\n+      const isPublished = selectedForm.get('status') === 'PUBLISHED';\n+\n+      // case 2 is not monitoring\n+      const isNotMonitoring = selectedSurveyGroup.get('monitoringGroup') === false;\n+\n+      // case 3 does not have illegal question type\n+      const noIllegalQuestion =\n+        questions.some(question => {\n+          switch (question.get('type')) {\n+            case 'CADDISFLY':\n+              return true;\n+            case 'SIGNATURE':\n+              return true;\n+            case 'GEOSHAPE':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzA0Mw=="}, "originalCommit": {"oid": "366ea6072d676141171aaa19db4c2bb93c0557d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTcwNw==", "bodyText": "Huh, supported or not supported?", "url": "https://github.com/akvo/akvo-flow/pull/3565#discussion_r428631707", "createdAt": "2020-05-21T12:51:31Z", "author": {"login": "marvinkome"}, "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+/* eslint-disable import/no-unresolved */\n+import React from 'react';\n+import observe from 'akvo-flow/mixins/observe';\n+import WebFormShare from 'akvo-flow/components/forms/form-share';\n+\n+require('akvo-flow/views/react-component');\n+\n+FLOW.WebFormShareView = FLOW.ReactComponentView.extend(\n+  observe({\n+    'FLOW.selectedControl.selectedSurvey.status': 'formValidation',\n+    'FLOW.selectedControl.selectedSurveyGroup.monitoringGroup': 'formValidation',\n+    'FLOW.questionControl.content.isLoaded': 'formValidation',\n+    'FLOW.questionGroupControl.content.isLoaded': 'formValidation',\n+    'FLOW.surveyControl.webformId': 'renderReactSide',\n+  }),\n+  {\n+    init() {\n+      this._super();\n+      this.formValidation = this.formValidation.bind(this);\n+      this.renderReactSide = this.renderReactSide.bind(this);\n+      this.getProps = this.getProps.bind(this);\n+      this.getShareURL = this.getShareURL.bind(this);\n+\n+      this.valid = false;\n+    },\n+\n+    didInsertElement(...args) {\n+      this._super(...args);\n+\n+      // call validate on init\n+      this.formValidation();\n+\n+      this.renderReactSide();\n+    },\n+\n+    // react side\n+    renderReactSide() {\n+      const props = this.getProps();\n+      this.reactRender(<WebFormShare {...props} />);\n+    },\n+\n+    getProps() {\n+      return {\n+        strings: {},\n+        data: {\n+          valid: this.valid,\n+          shareUrl:\n+            FLOW.surveyControl.webformId &&\n+            `${window.location.origin}/webforms/${FLOW.surveyControl.webformId}`,\n+        },\n+        actions: {\n+          getShareURL: this.getShareURL,\n+        },\n+      };\n+    },\n+\n+    formValidation() {\n+      const selectedForm = FLOW.selectedControl.get('selectedSurvey');\n+      const selectedSurveyGroup = FLOW.selectedControl.get('selectedSurveyGroup');\n+      const questions = FLOW.questionControl.get('content');\n+      const questionGroups = FLOW.questionGroupControl.get('content');\n+\n+      // case 1 is form published?\n+      const isPublished = selectedForm.get('status') === 'PUBLISHED';\n+\n+      // case 2 is not monitoring\n+      const isNotMonitoring = selectedSurveyGroup.get('monitoringGroup') === false;\n+\n+      // case 3 does not have illegal question type\n+      const noIllegalQuestion =\n+        questions.some(question => {\n+          switch (question.get('type')) {\n+            case 'CADDISFLY':\n+              return true;\n+            case 'SIGNATURE':\n+              return true;\n+            case 'GEOSHAPE':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzA0Mw=="}, "originalCommit": {"oid": "366ea6072d676141171aaa19db4c2bb93c0557d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMjY0Mw==", "bodyText": "Webforms can render cascade questions correctly so no need to disable sharing if there is a cascade question.", "url": "https://github.com/akvo/akvo-flow/pull/3565#discussion_r428632643", "createdAt": "2020-05-21T12:53:33Z", "author": {"login": "muloem"}, "path": "Dashboard/app/js/lib/views/surveys/form-share.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+/* eslint-disable import/no-unresolved */\n+import React from 'react';\n+import observe from 'akvo-flow/mixins/observe';\n+import WebFormShare from 'akvo-flow/components/forms/form-share';\n+\n+require('akvo-flow/views/react-component');\n+\n+FLOW.WebFormShareView = FLOW.ReactComponentView.extend(\n+  observe({\n+    'FLOW.selectedControl.selectedSurvey.status': 'formValidation',\n+    'FLOW.selectedControl.selectedSurveyGroup.monitoringGroup': 'formValidation',\n+    'FLOW.questionControl.content.isLoaded': 'formValidation',\n+    'FLOW.questionGroupControl.content.isLoaded': 'formValidation',\n+    'FLOW.surveyControl.webformId': 'renderReactSide',\n+  }),\n+  {\n+    init() {\n+      this._super();\n+      this.formValidation = this.formValidation.bind(this);\n+      this.renderReactSide = this.renderReactSide.bind(this);\n+      this.getProps = this.getProps.bind(this);\n+      this.getShareURL = this.getShareURL.bind(this);\n+\n+      this.valid = false;\n+    },\n+\n+    didInsertElement(...args) {\n+      this._super(...args);\n+\n+      // call validate on init\n+      this.formValidation();\n+\n+      this.renderReactSide();\n+    },\n+\n+    // react side\n+    renderReactSide() {\n+      const props = this.getProps();\n+      this.reactRender(<WebFormShare {...props} />);\n+    },\n+\n+    getProps() {\n+      return {\n+        strings: {},\n+        data: {\n+          valid: this.valid,\n+          shareUrl:\n+            FLOW.surveyControl.webformId &&\n+            `${window.location.origin}/webforms/${FLOW.surveyControl.webformId}`,\n+        },\n+        actions: {\n+          getShareURL: this.getShareURL,\n+        },\n+      };\n+    },\n+\n+    formValidation() {\n+      const selectedForm = FLOW.selectedControl.get('selectedSurvey');\n+      const selectedSurveyGroup = FLOW.selectedControl.get('selectedSurveyGroup');\n+      const questions = FLOW.questionControl.get('content');\n+      const questionGroups = FLOW.questionGroupControl.get('content');\n+\n+      // case 1 is form published?\n+      const isPublished = selectedForm.get('status') === 'PUBLISHED';\n+\n+      // case 2 is not monitoring\n+      const isNotMonitoring = selectedSurveyGroup.get('monitoringGroup') === false;\n+\n+      // case 3 does not have illegal question type\n+      const noIllegalQuestion =\n+        questions.some(question => {\n+          switch (question.get('type')) {\n+            case 'CADDISFLY':\n+              return true;\n+            case 'SIGNATURE':\n+              return true;\n+            case 'GEOSHAPE':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyNzA0Mw=="}, "originalCommit": {"oid": "366ea6072d676141171aaa19db4c2bb93c0557d1"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4543, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}