{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MDMyMTcw", "number": 1893, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo1MDowMVrOFExrZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1Nzo0OVrOFEzWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTUyNTUxOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo1MDowMVrOIE9t1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNTozNjo0MlrOIFAmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA==", "bodyText": "I'd put this method in a PR with at least one usage of it - inClientSpan / withClientSpan are quite clear here, but not this method which isn't used. One way to keep PRs small is to change just one usage in one PR, and remaining usages in a mechanical way in another.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542076374", "createdAt": "2020-12-14T02:50:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3Nzc0NQ==", "bodyText": "added example", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542077745", "createdAt": "2020-12-14T02:54:50Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, "originalCommit": {"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMTY5OQ==", "bodyText": "I think a while ago we had a thought that this pattern is technically the most precise\nThrowable err = null;\ntry (context.makeCurrent()) {\n  doWork();\n} catch (Throwable t) {\n  err = t;\n} finally {\n  span.end\n}\nIf so I guess this class isn't only useful for bytecode manipulation - do you think we can remove the two variants and merge into a single end method eventually?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542111699", "createdAt": "2020-12-14T04:56:40Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, "originalCommit": {"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEyMzcxNA==", "bodyText": "Added TODO comment on this method to revisit", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542123714", "createdAt": "2020-12-14T05:36:42Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NjM3NA=="}, "originalCommit": {"oid": "2c6e639de19221c66c0346b3e0c36b5758fa4412"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTc5ODcwOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1Nzo0OVrOIE_5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNDo1Nzo0OVrOIE_5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjExMjA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {\n          \n          \n            \n              public void endMaybeExceptionally(Context context, RESPONSE response, @Nullable Throwable throwable) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1893#discussion_r542112045", "createdAt": "2020-12-14T04:57:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -112,6 +116,15 @@ public void endExceptionally(Context context, Throwable throwable) {\n     super.endExceptionally(span, throwable, -1);\n   }\n \n+  /** Convenience method primarily for bytecode instrumentation. */\n+  public void endMaybeExceptionally(Context context, RESPONSE response, Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03ecc075e3b0c18ef3375a0447972342c402fdb"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4353, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}