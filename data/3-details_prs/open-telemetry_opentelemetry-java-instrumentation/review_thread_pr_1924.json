{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjI3NzIw", "number": 1924, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo0Njo1OFrOFGjTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxODoyNFrOFGlKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDE0MTk1OnYy", "diffSide": "LEFT", "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo0Njo1OFrOIHnBEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNjo0Njo1OFrOIHnBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg1MDE5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544850195", "createdAt": "2020-12-17T06:46:58Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "diffHunk": "@@ -344,29 +339,4 @@ protected static String getClassName(Class clazz) {\n     }\n     return className;\n   }\n-\n-  // Workaround https://github.com/open-telemetry/opentelemetry-java/pull/2096\n-  public static void setGlobalPropagators(ContextPropagators propagators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8e7c2d458abe71db8047a2737dd76b91908f946"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDQzNTY2OnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxNTo0N1rOIHpjBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTowODoxNFrOIHri6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTY1NA==", "bodyText": "Shouldn't you use variables from above here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544891654", "createdAt": "2020-12-17T08:15:47Z", "author": {"login": "iNikem"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -42,17 +42,17 @@ ext {\n     opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n     opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),\n     opentelemetryContext       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetryContext),\n-    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: versions.opentelemetry),\n-    opentelemetryTraceProps    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),\n-    opentelemetrySdk           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetryAnother),\n-    opentelemetryJaeger        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetryOther),\n-    opentelemetryJaegerThrift  : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger-thrift', version: versions.opentelemetryOther),\n-    opentelemetryOtlp          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetryOther),\n-    opentelemetryZipkin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetryOther),\n-    opentelemetryPrometheus    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetryOther),\n-    opentelemetryLogging       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetryOther),\n-    opentelemetryProto         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetryAnother),\n-    opentelemetryResources     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk-extension-resources', version: versions.opentelemetry),\n+    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: '0.13.0-20201217.041750-92'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxOTg1MA==", "bodyText": "Don't know why (maybe too many artifacts now) but the snapshot versions are all over the place now. I don't think I can come up with a more maintaible set of variables, and I guess in the future if this continues (will check once how sonatype deals with it compared to jfrog) we probably won't attempt snapshot dependencies anymore since pretty crazy to manage these.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544919850", "createdAt": "2020-12-17T09:01:13Z", "author": {"login": "anuraaga"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -42,17 +42,17 @@ ext {\n     opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n     opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),\n     opentelemetryContext       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetryContext),\n-    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: versions.opentelemetry),\n-    opentelemetryTraceProps    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),\n-    opentelemetrySdk           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetryAnother),\n-    opentelemetryJaeger        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetryOther),\n-    opentelemetryJaegerThrift  : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger-thrift', version: versions.opentelemetryOther),\n-    opentelemetryOtlp          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetryOther),\n-    opentelemetryZipkin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetryOther),\n-    opentelemetryPrometheus    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetryOther),\n-    opentelemetryLogging       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetryOther),\n-    opentelemetryProto         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetryAnother),\n-    opentelemetryResources     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk-extension-resources', version: versions.opentelemetry),\n+    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: '0.13.0-20201217.041750-92'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTY1NA=="}, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyMzI2OQ==", "bodyText": "Then we don't need those variables?\nCan we use BOM with time-based snapshots?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544923269", "createdAt": "2020-12-17T09:06:33Z", "author": {"login": "iNikem"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -42,17 +42,17 @@ ext {\n     opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n     opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),\n     opentelemetryContext       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetryContext),\n-    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: versions.opentelemetry),\n-    opentelemetryTraceProps    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),\n-    opentelemetrySdk           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetryAnother),\n-    opentelemetryJaeger        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetryOther),\n-    opentelemetryJaegerThrift  : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger-thrift', version: versions.opentelemetryOther),\n-    opentelemetryOtlp          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetryOther),\n-    opentelemetryZipkin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetryOther),\n-    opentelemetryPrometheus    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetryOther),\n-    opentelemetryLogging       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetryOther),\n-    opentelemetryProto         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetryAnother),\n-    opentelemetryResources     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk-extension-resources', version: versions.opentelemetry),\n+    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: '0.13.0-20201217.041750-92'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTY1NA=="}, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkyNDM5Mg==", "bodyText": "I don't think there's a way to have a BOM with the time-based snapshots (time is computed by server, not publisher).\nI'm thinking of removing the variables when updating to 0.13.0 final since this got to a state that works with some yak shaving and updating to final version will be much more direct / simple.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544924392", "createdAt": "2020-12-17T09:08:14Z", "author": {"login": "anuraaga"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -42,17 +42,17 @@ ext {\n     opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n     opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),\n     opentelemetryContext       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetryContext),\n-    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: versions.opentelemetry),\n-    opentelemetryTraceProps    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),\n-    opentelemetrySdk           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetryAnother),\n-    opentelemetryJaeger        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetryOther),\n-    opentelemetryJaegerThrift  : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger-thrift', version: versions.opentelemetryOther),\n-    opentelemetryOtlp          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetryOther),\n-    opentelemetryZipkin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetryOther),\n-    opentelemetryPrometheus    : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetryOther),\n-    opentelemetryLogging       : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetryOther),\n-    opentelemetryProto         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetryAnother),\n-    opentelemetryResources     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk-extension-resources', version: versions.opentelemetry),\n+    opentelemetryKotlin        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-kotlin', version: '0.13.0-20201217.041750-92'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTY1NA=="}, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDQzODcwOnYy", "diffSide": "RIGHT", "path": "gradle/java.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxNjozMlrOIHpkyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODo1OTo1NlrOIHrN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MjEwNw==", "bodyText": "Do we want both opentelemetry-api-trace and opentelemetry-api?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544892107", "createdAt": "2020-12-17T08:16:32Z", "author": {"login": "iNikem"}, "path": "gradle/java.gradle", "diffHunk": "@@ -126,14 +126,16 @@ dependencies {\n     // latest snapshots are used, because the opentelemetry-sdk snapshot pom references these\n     // transitive dependencies using the generic SNAPSHOT instead of a specific snapshot\n     implementation group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry\n+    implementation group: 'io.opentelemetry', name: 'opentelemetry-api-trace', version: '0.13.0-20201217.041746-88'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxODk5Mg==", "bodyText": "Yeah - SDK's transitive dependency on the API needs to be constrained, and API's transitive dependency on api-trace needs to be constrained.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544918992", "createdAt": "2020-12-17T08:59:56Z", "author": {"login": "anuraaga"}, "path": "gradle/java.gradle", "diffHunk": "@@ -126,14 +126,16 @@ dependencies {\n     // latest snapshots are used, because the opentelemetry-sdk snapshot pom references these\n     // transitive dependencies using the generic SNAPSHOT instead of a specific snapshot\n     implementation group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry\n+    implementation group: 'io.opentelemetry', name: 'opentelemetry-api-trace', version: '0.13.0-20201217.041746-88'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MjEwNw=="}, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDQ0NjYzOnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-streams-0.11/javaagent/src/test/groovy/KafkaStreamsTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxODoyNFrOIHppKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxODoyNFrOIHppKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MzIyNg==", "bodyText": "Something wrong with your import settings?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1924#discussion_r544893226", "createdAt": "2020-12-17T08:18:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/kafka-streams-0.11/javaagent/src/test/groovy/KafkaStreamsTest.groovy", "diffHunk": "@@ -32,6 +30,9 @@ import org.springframework.kafka.test.utils.ContainerTestUtils\n import org.springframework.kafka.test.utils.KafkaTestUtils\n import spock.lang.Shared\n \n+import java.util.concurrent.LinkedBlockingQueue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be5ccfadb493df11ccfdfed1d47d1b4eb196bd4c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4387, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}