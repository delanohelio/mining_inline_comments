{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTY1MzY0", "number": 1601, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NjoyN1rOE3MIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyNDo0OVrOE4Bw9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzA1OTE3OnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NjoyN1rOHwY45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NjoyN1rOHwY45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMTQ3Ng==", "bodyText": "You basically just need to move typeMatcher() and transformers() into the new TypeInstrumentation implementation:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @AutoService(Instrumenter.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentation() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                return singletonMap(\n          \n          \n            \n                    isStatic().and(named(\"create\")),\n          \n          \n            \n                    ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n            @AutoService(InstrumentationModule.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentationModule() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              @Override\n          \n          \n            \n              public List<TypeInstrumentation> typeInstrumentations() {\n          \n          \n            \n                return singletonList(new HttpClientInstrumentation());\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              private static final class HttpClientInstrumentation implements TypeInstrumentation {\n          \n          \n            \n                @Override\n          \n          \n            \n                public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                  return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                  return singletonMap(\n          \n          \n            \n                      isStatic().and(named(\"create\")),\n          \n          \n            \n                      ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n                }\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520501476", "createdAt": "2020-11-10T11:46:27Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"reactor-httpclient\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isStatic().and(named(\"create\")),\n+        ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n+      ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00daa7c6baf6e06d6676d6027e74442debcba5b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzQ0MDAxOnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoyOTowOVrOHwciMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDowNTozN1rOHxOiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ==", "bodyText": "How about naming it ReactorNettyInstrumentationModule? And using the following instrumentation names: \"reactor-netty\", \"reactor-netty-0.9\" (naming in accordance with our discussion in #1579)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520561201", "createdAt": "2020-11-10T13:29:09Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5NzA5OQ==", "bodyText": "Yeah, it does seem logical, but... :) This is Reactor's HttpClient instrumentation, not reactor-netty-core. I think I would prefer to change module name to reactor_httpclient :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520597099", "createdAt": "2020-11-10T14:19:45Z", "author": {"login": "iNikem"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM3Mzc3Ng==", "bodyText": "@mateuszrzeszutek @trask please help me with names :)\nReactor Netty provides separate clients and servers for TCP, UDP and HTTP. Right now we instrument only HttpClient. I think we should leave module name as reactor-netty, because it may in the future collect instrumentation for all parts of it. But I don't know if this should be one module (and its name then should be reactor-netty) or it is better to have separate modules per client/server.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521373776", "createdAt": "2020-11-11T13:55:09Z", "author": {"login": "iNikem"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM4MDM4Nw==", "bodyText": "I think we should leave module name as reactor-netty\n\nDefinitely, I agree \ud83d\udc4d\n\nI don't know if this should be one module (and its name then should be reactor-netty) or it is better to have separate modules per client/server.\n\nI think I would take the incremental approach: name the class ReactorNettyInstrumentationModule even if we only instrument HTTP right now; when we instrument TCP/UDP put them all in a single module; and if somebody wants to have them enabled/disabled separately then I'd split them into several InstrumentationModules.\nRight now we're instrumenting a single jar/library so I think it makes sense to keep it in once module.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521380387", "createdAt": "2020-11-11T14:05:37Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ=="}, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzQ1MzM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/test/groovy/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozMjozMVrOHwcqcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozMjozMVrOHwcqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MzMxMw==", "bodyText": "Really minor suggestion:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                4.times {\n          \n          \n            \n                  pool.submit(job)\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520563313", "createdAt": "2020-11-10T13:32:31Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/test/groovy/HttpClientTest.groovy", "diffHunk": "@@ -38,26 +40,34 @@ class ReactorNettyTest extends AgentTestRunner {\n     return resp.status().code()\n   }\n \n-  def \"two basic GET requests #url\"() {\n-    when:\n-    runUnderTrace(\"parent\") {\n-      doRequest()\n-    }\n-    runUnderTrace(\"parent\") {\n-      doRequest()\n+  def \"concurrent requests\"() {\n+    def latch = new CountDownLatch(1)\n+    def job = {\n+      latch.await()\n+      runUnderTrace(\"parent\") {\n+        doRequest()\n+      }\n     }\n \n+    def pool = Executors.newFixedThreadPool(4)\n+\n+    when:\n+    pool.submit(job)\n+    pool.submit(job)\n+    pool.submit(job)\n+    pool.submit(job)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTc1Mzg5OnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0Njo1OVrOHxslRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0Njo1OVrOHxslRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MjcwOQ==", "bodyText": "other multi-word modules squish them together for package name, e.g.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n          \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactornetty;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521872709", "createdAt": "2020-11-12T06:46:59Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTc1ODc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0OTowN1rOHxsoEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0OTowN1rOHxsoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MzQyNA==", "bodyText": "decrement even if throwable != null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521873424", "createdAt": "2020-11-12T06:49:07Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTc4ODMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzowMTozMVrOHxs5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMDowNzo1M1rOHyMIPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw==", "bodyText": "is this attribute name shared with any other instrumentation? if not, maybe name it reactor_netty_otel_context?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521877777", "createdAt": "2020-11-12T07:01:31Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1MzM1MA==", "bodyText": "Why, what difference does it make apart having longer key? :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522253350", "createdAt": "2020-11-12T16:45:42Z", "author": {"login": "iNikem"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1NjUyOA==", "bodyText": "when I saw this, the general name gave me the impression that this (reactor) context key was being used to propagate the (otel) context more generally for all reactor instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522356528", "createdAt": "2020-11-12T19:20:33Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4OTU2Nw==", "bodyText": "Weeeeellll. That may be totally not a bad idea...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r522389567", "createdAt": "2020-11-12T20:07:53Z", "author": {"login": "iNikem"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw=="}, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTg0NjMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyNDo0OVrOHxtbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyNDo0OVrOHxtbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NjUzOQ==", "bodyText": "Can we add at least a small comment on what this instrumentation does? Especially since it doesn't seem to be about creating spans, but only context propagation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521886539", "createdAt": "2020-11-12T07:24:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4546, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}