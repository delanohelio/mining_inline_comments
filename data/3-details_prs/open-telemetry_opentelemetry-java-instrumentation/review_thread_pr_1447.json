{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODU2ODcy", "number": 1447, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzoxNlrOEwiUEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzo0OFrOEwiUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzI5Mjk3OnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzoxNlrOHmK9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzoxNlrOHmK9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NzU2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              stringBuilder.append(key).append('=');\n          \n          \n            \n                              stringBuilder.append(key.getKey()).append('=');\n          \n      \n    \n    \n  \n\nThanks for bringing up the issue about toString, I think getKey should solve that", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#discussion_r509787566", "createdAt": "2020-10-21T23:13:16Z", "author": {"login": "anuraaga"}, "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "diffHunk": "@@ -21,28 +25,37 @@ public LoggingExporter(String prefix) {\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> list) {\n+    StringBuilder stringBuilder = new StringBuilder();\n     for (SpanData span : list) {\n-      System.out.print(\n-          prefix + \" \" + span.getName() + \" \" + span.getTraceId() + \" \" + span.getSpanId() + \" \");\n+\n+      stringBuilder\n+          .append(prefix)\n+          .append(\" \")\n+          .append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())\n+          .append(\" \")\n+          .append(span.getSpanId())\n+          .append(\" \");\n+\n       span.getAttributes()\n           .forEach(\n               new AttributeConsumer() {\n                 @Override\n                 public <T> void consume(AttributeKey<T> key, T value) {\n-                  System.out.print(key + \"=\");\n-                  switch (key.getType()) {\n-                    case STRING:\n-                      System.out.print('\"' + String.valueOf(value) + '\"');\n-                      break;\n-                    default:\n-                      System.out.print(value);\n-                      break;\n+\n+                  stringBuilder.append(key).append('=');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzI5NDIwOnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzo0OFrOHmK-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzo0OFrOHmK-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4Nzc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                log.debug(stringBuilder.toString());\n          \n          \n            \n                log.info(stringBuilder.toString());\n          \n      \n    \n    \n  \n\nThis exporter needs to be explicitly enabled so I think by default it should log something :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#discussion_r509787746", "createdAt": "2020-10-21T23:13:48Z", "author": {"login": "anuraaga"}, "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "diffHunk": "@@ -21,28 +25,37 @@ public LoggingExporter(String prefix) {\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> list) {\n+    StringBuilder stringBuilder = new StringBuilder();\n     for (SpanData span : list) {\n-      System.out.print(\n-          prefix + \" \" + span.getName() + \" \" + span.getTraceId() + \" \" + span.getSpanId() + \" \");\n+\n+      stringBuilder\n+          .append(prefix)\n+          .append(\" \")\n+          .append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())\n+          .append(\" \")\n+          .append(span.getSpanId())\n+          .append(\" \");\n+\n       span.getAttributes()\n           .forEach(\n               new AttributeConsumer() {\n                 @Override\n                 public <T> void consume(AttributeKey<T> key, T value) {\n-                  System.out.print(key + \"=\");\n-                  switch (key.getType()) {\n-                    case STRING:\n-                      System.out.print('\"' + String.valueOf(value) + '\"');\n-                      break;\n-                    default:\n-                      System.out.print(value);\n-                      break;\n+\n+                  stringBuilder.append(key).append('=');\n+\n+                  if (key.getType() == AttributeType.STRING) {\n+                    stringBuilder.append('\"').append(value).append('\"');\n+                  } else {\n+                    stringBuilder.append(value);\n                   }\n-                  System.out.print(\" \");\n+                  stringBuilder.append(' ');\n                 }\n               });\n     }\n-    System.out.println();\n+    log.debug(stringBuilder.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}