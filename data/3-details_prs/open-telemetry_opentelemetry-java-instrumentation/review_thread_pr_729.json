{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMjkxMTY3", "number": 729, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1NzoyOVrOEQFfIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNDoxNzowM1rOESBEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzAyNTYxOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1NzoyOVrOG0DsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0ODozM1rOG0WwGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzOTU5OA==", "bodyText": "Let's go ahead and remove this, and instead add javadoc to at least the getters.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457239598", "createdAt": "2020-07-20T09:57:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,24 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Sets default tracer name and sampler probability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MTg5Ng==", "bodyText": "Sorry. I forgot to clean up the java docs before creating this review. I'll fix this up now", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457551896", "createdAt": "2020-07-20T16:48:33Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,24 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Sets default tracer name and sampler probability", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzOTU5OA=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzAzMTYwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1ODo0NVrOG0Dvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMTowOTozNlrOG3PMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ==", "bodyText": "Aren't these included transitively from the above deps? Even if not, these should be compileOnly as well, not implementation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457240495", "createdAt": "2020-07-20T09:58:45Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDIxNA==", "bodyText": "When I set the grpc-api dependency to compileOnly I get this exception: org.springframework.beans.factory.UnsatisfiedDependencyException. I'm not sure why this dependency isn't provided transitively by the opentelemetry-java jaeger-exporter. A similar pattern could be seen in the auto-exporter-jaeger and auto-exporter-zipkin modules. I'm not sure if this was intended or if it's a bug", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457550214", "createdAt": "2020-07-20T16:45:42Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzA4NA==", "bodyText": "@trask @anuraaga Should I open an issue to add the io.grpc.grpc-api and io.grpc.grpc-netty-shaded dependencies to the opentelemetry Otlp and Jaeger exporters.\nWould it make sense to keep these exporters self contained?\nIf so, we could also add the io.zipkin.reporter2.zipkin-sender-okhttp3 dependency to the the zipkin exporter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459677084", "createdAt": "2020-07-23T19:25:31Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTU1Nw==", "bodyText": "Sorry for the late reply.\nI think it could make sense to have those transitive dependencies on the exporters in the SDK so could be nice to file an issue.\nIn the meantime, we can include dependencies here if needed. Can you post the stacktrace for the UnsatisfiedDependencyException? We have e.g., ConditionalOnMissingBean etc because we want to make sure we only instrument what a user brought into their app, so we need to avoid implementation here in favor of compileOnly, etc - api or implementation will bring the dependency into the user's app regardless of their config. If you're seeing it in a test, you may need to use testRuntimeOnly or similar.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459839557", "createdAt": "2020-07-24T03:49:10Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2MTMzMg==", "bodyText": "Hmmm after I rebased from master this error went away. It looks like the opentelemetry-exporters-jaeger-0.7.0-SNAPSHOT has the grpc dependencies. I'll change these dependencies to compileOnly", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460361332", "createdAt": "2020-07-25T04:05:07Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDY3Nw==", "bodyText": "For reference this is the runtime error I get when I use opentelemetry-exporters-jaeger:0.6.0 and I set io.grpc.grpc-netty-shaded:1.24.0 to compileOnly I get the following error:\nCaused by: io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional channel service provider found. Try adding a dependency on the grpc-okhttp, grpc-netty, or grpc-netty-shaded artifact\n\tat io.grpc.ManagedChannelProvider.provider(ManagedChannelProvider.java:60) ~[grpc-api-1.28.0.jar:1.28.0]\n\tat io.grpc.ManagedChannelBuilder.forTarget(ManagedChannelBuilder.java:76) ~[grpc-api-1.28.0.jar:1.28.0]\n\tat io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration.otelJaegerSpanExporter(JaegerSpanExporterAutoConfiguration.java:52) ~[opentelemetry-spring-boot-autoconfigure-0.6.0-SNAPSHOT.jar:0.6.0-SNAPSHOT]\n\tat io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration$$EnhancerBySpringCGLIB$$652d2c30.CGLIB$otelJaegerSpanExporter$0(<generated>) ~[opentelemetry-spring-boot-autoconfigure-0.6.0-SNAPSHOT.jar:0.6.0-SNAPSHOT]\n\tat io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration$$EnhancerBySpringCGLIB$$652d2c30$$FastClassBySpringCGLIB$$3ee7321d.invoke(<generated>) ~[opentelemetry-spring-boot-autoconfigure-0.6.0-SNAPSHOT.jar:0.6.0-SNAPSHOT]\n\tat org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331) ~[spring-context-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\tat io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration$$EnhancerBySpringCGLIB$$652d2c30.otelJaegerSpanExporter(<generated>) ~[opentelemetry-spring-boot-autoconfigure-0.6.0-SNAPSHOT.jar:0.6.0-SNAPSHOT]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\n\tat org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.7.RELEASE.jar:5.2.7.RELEASE]\n\t... 62 common frames omitted", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460434677", "createdAt": "2020-07-25T19:09:29Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4NTc4MA==", "bodyText": "hey @mabdinur, can you try adding:\ncompileOnly group: 'io.grpc', name: 'grpc-api', version: '1.24.0'\n\nto your spring-boot-autoconfigure.gradle?\nI think that will fix the current build issue.\n\nFor reference this is the runtime error I get when I use opentelemetry-exporters-jaeger:0.6.0 and I set io.grpc.grpc-netty-shaded:1.24.0 to compileOnly\n\nWhere are you using io.grpc.grpc-netty-shaded:1.24.0? Is part of an app you are testing? In that case I don't think you want compileOnly. We just want compileOnly for our own transitive dependencies here, so that we don't affect an application's choice of gRPC version.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460485780", "createdAt": "2020-07-26T06:29:12Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3Mzc3MA==", "bodyText": "I need io.grpc.grpc-netty-shaded:1.24.0 to run the otlp exporter (version 0.6.0) and the jaeger exporter (0.6.0). This dependency wasn't supplied by the exporter package. I don't need to include it in the autoconfigure project. Instead I'll include it in a opentelemetry-spring-starter https://github.com/mabdinur/opentelemetry-java-instrumentation/pull/6/files", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460573770", "createdAt": "2020-07-26T21:09:36Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ=="}, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMyMjcyOnYy", "diffSide": "LEFT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MDoyNVrOG0Yk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MDoyNVrOG0Yk3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MTc5MQ==", "bodyText": "Moving these apis to an opentelemetry-spring-starter. A draft of this can be see here: mabdinur#6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457581791", "createdAt": "2020-07-20T17:40:25Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -31,8 +32,15 @@ dependencies {\n   implementation 'org.springframework.boot:spring-boot-starter-webflux'\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n-  api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk4NjY4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMjo1NVrOG1OguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMjo1NVrOG1OguQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTQ2NQ==", "bodyText": "[Suggestion] Drop the extra newline here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465465", "createdAt": "2020-07-22T00:32:55Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk4ODQwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMzo1NVrOG1OhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjowNjowNVrOG1pcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTcyOA==", "bodyText": "[Question] Is that always guaranteed to be a valid value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465728", "createdAt": "2020-07-22T00:33:55Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwNjY1NQ==", "bodyText": "Yes, I added validators to the TracerProperties class that bounds the decimal value between 0 and 1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458906655", "createdAt": "2020-07-22T16:06:05Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTcyOA=="}, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk4OTk3OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNDo1MVrOG1OisQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNDo1MVrOG1OisQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTk2OQ==", "bodyText": "Here and elsewhere: You don't need usually need to provide a list of the methods of the class in its documentation. IS there a special convention for beans?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465969", "createdAt": "2020-07-22T00:34:51Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,26 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Get Tracer Name {@link getName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk5MTQzOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNToyMVrOG1Ojcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNToyMVrOG1Ojcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjE2Mw==", "bodyText": "Is it worth documenting that 0.0 / 1.0 have special values?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466163", "createdAt": "2020-07-22T00:35:21Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -37,11 +45,11 @@ public void setName(String name) {\n     this.name = name;\n   }\n \n-  public boolean isLoggingExporterEnabled() {\n-    return loggingExporterEnabled;\n+  public double getSamplerProbability() {\n+    return samplerProbability;\n   }\n \n-  public void setLoggingExporterEnabled(boolean loggingExporterEnabled) {\n-    this.loggingExporterEnabled = loggingExporterEnabled;\n+  public void setSamplerProbability(double samplerProbability) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk5MzI3OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNjoyMFrOG1Okiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNjoyMFrOG1Okiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ0Mw==", "bodyText": "[Note] I'm not sure about the convention, but I'd consider making the defaults part of the class documentation.\nI'd also add a link to where that 14250 is coming from.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466443", "createdAt": "2020-07-22T00:36:20Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDk5MzYwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNjozMVrOG1Okvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNjozMVrOG1Okvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ5NQ==", "bodyText": "I think you can just use ofSeconds(1)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466495", "createdAt": "2020-07-22T00:36:31Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  private int port = 14250;\n+  private Duration deadline = Duration.ofMillis(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg2MzA4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1Mjo0NVrOG1zyRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1Mjo0NVrOG1zyRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjE2Ng==", "bodyText": "i think good to align default serviceName with SDK\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076166", "createdAt": "2020-07-22T20:52:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg2NTIwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1MzoyNVrOG1zzfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1MzoyNVrOG1zzfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjQ3OA==", "bodyText": "same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076478", "createdAt": "2020-07-22T20:53:25Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDg3MDQ3OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1NTowNFrOG1z2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1NTowNFrOG1z2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NzMxMw==", "bodyText": "same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459077313", "createdAt": "2020-07-22T20:55:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkwMzY2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNToxMFrOG10LTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNToxMFrOG10LTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MjU3NQ==", "bodyText": "same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"http://localhost\";\n          \n          \n            \n              /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"http://localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459082575", "createdAt": "2020-07-22T21:05:10Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n+  private String host = \"http://localhost\";\n+  /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkxMDQ0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNzoxN1rOG10PXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNzoxN1rOG10PXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MzYxMw==", "bodyText": "combine these into single endpoint to match recommended configuration properties coming in open-telemetry/opentelemetry-specification#666\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083613", "createdAt": "2020-07-22T21:07:17Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDkxMjI0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNzo0NVrOG10Qbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNzo0NVrOG10Qbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Mzg4Nw==", "bodyText": "same here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083887", "createdAt": "2020-07-22T21:07:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n+  private String host = \"localhost\";\n+  /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODIwMzU4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MToyMFrOG2TJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MToyMFrOG2TJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MDAwMw==", "bodyText": "need to call OpenTelemetrySdk.getTracerProvider().updateActiveTraceConfig(...)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459590003", "createdAt": "2020-07-23T16:51:20Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,66 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa074ab692b84819f66559c9256060c5845a4eb5"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzI3MzM5OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNDoxNzowM1rOG3CSdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNDoxNzowM1rOG3CSdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2MjM1OA==", "bodyText": "It sounds like the transitive dependency problem got fixed. Doesn't it work to remove these extra compileOnly completely?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460362358", "createdAt": "2020-07-25T04:17:03Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -18,21 +18,27 @@ bootJar {\n }\n \n dependencies {\n-  annotationProcessor \"org.springframework.boot:spring-boot-configuration-processor\"\n+  annotationProcessor \"org.springframework.boot:spring-boot-autoconfigure-processor\"\n+  implementation \"org.springframework.boot:spring-boot-starter-validation\"\n   \n   testImplementation('org.springframework.boot:spring-boot-starter-test') {\n     exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n   }\n   \n-  implementation 'org.springframework.boot:spring-boot-starter-web'\n   implementation project(':instrumentation-core:spring:spring-webmvc-3.1')\n   implementation project(':instrumentation-core:spring:spring-web-3.1')\n-  \n-  implementation 'org.springframework.boot:spring-boot-starter-webflux'\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  compileOnly group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d53a80abbddef5ba6b85d7660aa587aa793e7fb"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 109, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}