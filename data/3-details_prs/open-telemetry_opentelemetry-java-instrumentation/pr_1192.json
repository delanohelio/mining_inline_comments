{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODcwNDY3", "number": 1192, "title": "Add initial baseline instrumentation for AWS lambda runtime.", "bodyText": "This is very barebones, notable missing pieces are\n\nNeed to handle RequestStreamHandler as well\nNeed to take into account the function could be HTTP or messaging, which even means a different SpanKind\n\nBut having this baseline would help us implement more of these pieces (while also trying out the instrumentation for real and seeing how badly lambda's cold start / freezing behavior effect trace export).", "createdAt": "2020-09-11T09:38:24Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192", "merged": true, "mergeCommit": {"oid": "01ec2ad6a793436115189ecc294580a421dbfd92"}, "closed": true, "closedAt": "2020-09-14T03:57:52Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHyEZvAH2gAyNDg0ODcwNDY3OjA3MGM0MjYyMjE4NjY3MDdiZWQyOTZkNjBhZjk4MzBlYjRiN2UxOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdIphlMgH2gAyNDg0ODcwNDY3Ojg1YTNjZjNmMTViNDc1OGNiMTRjMTdjMjUyNWI1M2FlMzgzNWE4ZmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "070c426221866707bed296d60af9830eb4b7e18e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/070c426221866707bed296d60af9830eb4b7e18e", "committedDate": "2020-09-11T09:34:46Z", "message": "Add initial baseline instrumentation for AWS lambda runtime."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/68ed4e79799e452340bb11469f14f59544247b20", "committedDate": "2020-09-11T10:55:50Z", "message": "narc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTYxNzQy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#pullrequestreview-487161742", "createdAt": "2020-09-11T22:43:40Z", "commit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo0Mzo0MVrOHQvv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMzowMzoxMlrOHQwCdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMTU2Mw==", "bodyText": "this is different from existing convention of public static final TRACER (and no accessor), if u prefer this, let's create an issue to update in other places too?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487321563", "createdAt": "2020-09-11T22:43:41Z", "author": {"login": "trask"}, "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaInstrumentationHelper.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import io.opentelemetry.instrumentation.awslambda.v1_0.AwsLambdaTracer;\n+\n+public final class AwsLambdaInstrumentationHelper {\n+\n+  private static final AwsLambdaTracer TRACER = new AwsLambdaTracer();\n+\n+  public static AwsLambdaTracer tracer() {\n+    return TRACER;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMjY1Nw==", "bodyText": "and in AwsLambdaTracer.startScope(), set CONTEXT_SERVER_SPAN_KEY (similar to HttpServerTracer)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  scope = TracingContextUtils.currentContextWith(span);\n          \n          \n            \n                  scope = tracer().startScope(span);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487322657", "createdAt": "2020-09-11T22:48:01Z", "author": {"login": "trask"}, "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaRequestHandlerInstrumentation.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import static io.opentelemetry.instrumentation.auto.awslambda.v1_0.AwsLambdaInstrumentationHelper.tracer;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class AwsLambdaRequestHandlerInstrumentation extends AbstractAwsLambdaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"com.amazonaws.services.lambda.runtime.RequestHandler\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"com.amazonaws.services.lambda.runtime.RequestHandler\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"handleRequest\"))\n+            .and(takesArgument(1, named(\"com.amazonaws.services.lambda.runtime.Context\"))),\n+        AwsLambdaRequestHandlerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+  }\n+\n+  public static class HandleRequestAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Argument(1) Context context,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      span = tracer().startSpan(context);\n+      scope = TracingContextUtils.currentContextWith(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMzQ3MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487323471", "createdAt": "2020-09-11T22:51:31Z", "author": {"login": "trask"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyMzY4Ng==", "bodyText": "from above comment\nalso, fwiw, we've been using the var name ignored in other places (not consistently though), since that seems to keep Intellij from flagging it as unused\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (Scope unused = TracingContextUtils.currentContextWith(span)) {\n          \n          \n            \n                try (Scope unused = tracer.startScope(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487323686", "createdAt": "2020-09-11T22:52:18Z", "author": {"login": "trask"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final O handleRequest(I input, Context context) {\n+    Span span = tracer.startSpan(context);\n+    Throwable error = null;\n+    try (Scope unused = TracingContextUtils.currentContextWith(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw==", "bodyText": "\ud83d\udc4d\ni wish there were better way to do this\nin other places we are doing the simpler, but less correct \ud83d\ude41\n      try (Scope ignored = TRACER.startScope(span)) {\n        ...\n        TRACER.end(span, response);\n        return response;\n      } catch (Throwable t) {\n        TRACER.endExceptionally(span, t);\n        throw t;\n      }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487326327", "createdAt": "2020-09-11T23:03:12Z", "author": {"login": "trask"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final O handleRequest(I input, Context context) {\n+    Span span = tracer.startSpan(context);\n+    Throwable error = null;\n+    try (Scope unused = TracingContextUtils.currentContextWith(span)) {\n+      return doHandleRequest(input, context);\n+    } catch (Throwable t) {\n+      error = t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/822c9e46de265b41689f04fef8a7252cf3b82b32", "committedDate": "2020-09-12T04:09:23Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjU2MzEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#pullrequestreview-487256312", "createdAt": "2020-09-12T21:00:45Z", "commit": {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzA2MDE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#pullrequestreview-487306015", "createdAt": "2020-09-13T13:13:28Z", "commit": {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMzoxMzoyOFrOHQ8XCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxMzoxNjo0N1rOHQ8YUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODIwMA==", "bodyText": "Why is it less correct?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528200", "createdAt": "2020-09-13T13:13:28Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /** Creates a new {@link TracingRequestHandler} which traces using the default {@link Tracer}. */\n+  protected TracingRequestHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link Tracer}.\n+   */\n+  protected TracingRequestHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final O handleRequest(I input, Context context) {\n+    Span span = tracer.startSpan(context);\n+    Throwable error = null;\n+    try (Scope unused = TracingContextUtils.currentContextWith(span)) {\n+      return doHandleRequest(input, context);\n+    } catch (Throwable t) {\n+      error = t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNjMyNw=="}, "originalCommit": {"oid": "68ed4e79799e452340bb11469f14f59544247b20"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODQ4NA==", "bodyText": "Auto instrumentation does not reuse TracingRequestHandler from library instrumentation, is it expected?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528484", "createdAt": "2020-09-13T13:16:28Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-lambda-1.0/auto/src/main/java/io/opentelemetry/instrumentation/auto/awslambda/v1_0/AwsLambdaRequestHandlerInstrumentation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.awslambda.v1_0;\n+\n+import static io.opentelemetry.instrumentation.auto.awslambda.v1_0.AwsLambdaInstrumentationHelper.TRACER;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class AwsLambdaRequestHandlerInstrumentation extends AbstractAwsLambdaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"com.amazonaws.services.lambda.runtime.RequestHandler\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"com.amazonaws.services.lambda.runtime.RequestHandler\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"handleRequest\"))\n+            .and(takesArgument(1, named(\"com.amazonaws.services.lambda.runtime.Context\"))),\n+        AwsLambdaRequestHandlerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+  }\n+\n+  public static class HandleRequestAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Argument(1) Context context,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      span = TRACER.startSpan(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUyODUzMQ==", "bodyText": "Should there be a documentation or an example how to use it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1192#discussion_r487528531", "createdAt": "2020-09-13T13:16:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestHandler.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * A base class similar to {@link RequestHandler} but will automatically trace invocations of {@link\n+ * #doHandleRequest(Object, Context)}.\n+ */\n+public abstract class TracingRequestHandler<I, O> implements RequestHandler<I, O> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822c9e46de265b41689f04fef8a7252cf3b82b32"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b53bc44141c2d45f2d35fe50234624ae5d2ce9a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b53bc44141c2d45f2d35fe50234624ae5d2ce9a", "committedDate": "2020-09-14T02:08:50Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a3cf3f15b4758cb14c17c2525b53ae3835a8fa", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/85a3cf3f15b4758cb14c17c2525b53ae3835a8fa", "committedDate": "2020-09-14T02:11:25Z", "message": "Remove sentence which is redundant with every manual instrumentation we provide."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2583, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}