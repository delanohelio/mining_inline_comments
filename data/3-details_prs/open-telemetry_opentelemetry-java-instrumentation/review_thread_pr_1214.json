{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjA0NTg5", "number": 1214, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NTozNlrOEkznpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozMzowNVrOEkz_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDI5OTI0OnYy", "diffSide": "LEFT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NTozNlrOHT9MlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NTozNlrOHT9MlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzYzNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490687636", "createdAt": "2020-09-18T03:55:36Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -93,13 +90,8 @@\n \n   private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n \n-  private static final boolean DEFAULT_HTTP_SERVER_TAG_QUERY_STRING = false;\n-  private static final boolean DEFAULT_HTTP_CLIENT_TAG_QUERY_STRING = false;\n   private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n \n-  public static final boolean DEFAULT_LOG_INJECTION_ENABLED = false;\n-  public static final String DEFAULT_EXPERIMENTAL_LOG_CAPTURE_THRESHOLD = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDI5OTk1OnYy", "diffSide": "LEFT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NjowNFrOHT9M-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMzo1NjowNFrOHT9M-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4NzczNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490687736", "createdAt": "2020-09-18T03:56:04Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -76,8 +75,6 @@\n   public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n   public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n   public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String HTTP_SERVER_TAG_QUERY_STRING = \"http.server.tag.query-string\";\n-  public static final String HTTP_CLIENT_TAG_QUERY_STRING = \"http.client.tag.query-string\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDMwODE4OnYy", "diffSide": "RIGHT", "path": "instrumentation/google-http-client-1.19/src/test/groovy/AbstractGoogleHttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDowMTowM1rOHT9Rkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDowMTowM1rOHT9Rkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY4ODkxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"${SemanticAttributes.HTTP_FLAVOR.key()}\" '1.1'\n          \n          \n            \n                        \"${SemanticAttributes.HTTP_FLAVOR.key()}\" \"1.1\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490688914", "createdAt": "2020-09-18T04:01:03Z", "author": {"login": "trask"}, "path": "instrumentation/google-http-client-1.19/src/test/groovy/AbstractGoogleHttpClientTest.groovy", "diffHunk": "@@ -83,6 +83,7 @@ abstract class AbstractGoogleHttpClientTest extends HttpClientTest {\n             \"${SemanticAttributes.HTTP_URL.key()}\" \"${uri}\"\n             \"${SemanticAttributes.HTTP_METHOD.key()}\" method\n             \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" 500\n+            \"${SemanticAttributes.HTTP_FLAVOR.key()}\" '1.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDMzODM5OnYy", "diffSide": "RIGHT", "path": "instrumentation/java-httpclient/src/test/groovy/JdkHttpClientTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDoxOToyOVrOHT9iTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNTowNDo1NlrOHT-NRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MzE5Ng==", "bodyText": "is it only flavor that's different?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490693196", "createdAt": "2020-09-18T04:19:29Z", "author": {"login": "trask"}, "path": "instrumentation/java-httpclient/src/test/groovy/JdkHttpClientTest.groovy", "diffHunk": "@@ -52,4 +55,45 @@ abstract class JdkHttpClientTest extends HttpClientTest {\n   boolean testCircularRedirects() {\n     return false\n   }\n+\n+  //We override this test below because it produces somewhat different attributes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwNDE5Ng==", "bodyText": "Yes", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490704196", "createdAt": "2020-09-18T05:04:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/java-httpclient/src/test/groovy/JdkHttpClientTest.groovy", "diffHunk": "@@ -52,4 +55,45 @@ abstract class JdkHttpClientTest extends HttpClientTest {\n   boolean testCircularRedirects() {\n     return false\n   }\n+\n+  //We override this test below because it produces somewhat different attributes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MzE5Ng=="}, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM0MjY4OnYy", "diffSide": "RIGHT", "path": "instrumentation/java-httpclient/src/main/java/io/opentelemetry/instrumentation/auto/httpclient/JdkHttpClientTracer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDoyMjowMlrOHT9kuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDoyMjowMlrOHT9kuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MzgxOQ==", "bodyText": "interesting, makes sense for a negotiated connection, where we don't know flavor ahead of time", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490693819", "createdAt": "2020-09-18T04:22:02Z", "author": {"login": "trask"}, "path": "instrumentation/java-httpclient/src/main/java/io/opentelemetry/instrumentation/auto/httpclient/JdkHttpClientTracer.java", "diffHunk": "@@ -66,10 +70,22 @@ protected String requestHeader(HttpRequest httpRequest, String name) {\n   }\n \n   @Override\n-  protected String responseHeader(HttpResponse httpResponse, String name) {\n+  protected String responseHeader(HttpResponse<?> httpResponse, String name) {\n     return httpResponse.headers().firstValue(name).orElse(null);\n   }\n \n+  @Override\n+  protected Span onResponse(Span span, HttpResponse<?> httpResponse) {\n+    span = super.onResponse(span, httpResponse);\n+\n+    if (httpResponse != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(\n+          span, httpResponse.version() == Version.HTTP_1_1 ? \"1.1\" : \"2.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDM1OTQ1OnYy", "diffSide": "RIGHT", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDozMzowNVrOHT9uIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyNTowMlrOHUa2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg==", "bodyText": "I like this placement (type annotation) \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490696226", "createdAt": "2020-09-18T04:33:05Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwNDQ5NA==", "bodyText": "I don't :) It is IDEA's doing, so I have to accept :(", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490704494", "createdAt": "2020-09-18T05:06:06Z", "author": {"login": "iNikem"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxODA3Ng==", "bodyText": "Reformat code puts the annotation there? I haven't seen that before. I agree with @iNikem that for normal methods, annotation above looks a bit better mostly due to how annotations end up getting colored in IDE GitHub etc. @iNikem Is it not worth manually fixing these?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490718076", "createdAt": "2020-09-18T05:55:02Z", "author": {"login": "anuraaga"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxOTY2OA==", "bodyText": "Not reformat but \"implement missing method\", I think.\nI don't want to fix this manually every time IDEA generates code for me. I can do it here, but it will not be sustainable", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r490719668", "createdAt": "2020-09-18T06:00:26Z", "author": {"login": "iNikem"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MzUzNw==", "bodyText": "ya, i like type annotations, but they are not common. i'm very surprised Intellij does the \"right thing\" \ud83d\ude09", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1214#discussion_r491173537", "createdAt": "2020-09-18T20:25:02Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/instrumentation/auto/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -46,6 +47,11 @@ protected String method(HttpRequest request) {\n     }\n   }\n \n+  @Override\n+  protected @Nullable String flavor(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5NjIyNg=="}, "originalCommit": {"oid": "5b6d6577343eee77a7695ab1344549151f40da3e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4936, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}