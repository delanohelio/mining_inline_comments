{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTgzNjEx", "number": 1801, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoyNDoyMlrOE-hiAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoyNDoyMlrOE-hiAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTk2NTQ0OnYy", "diffSide": "RIGHT", "path": "instrumentation/opentelemetry-annotations-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/otelannotations/WithSpanTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzoyNDoyMlrOH7ue9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzo1ODo0MVrOH8SptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4OTYyMg==", "bodyText": "See #1806", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1801#discussion_r532389622", "createdAt": "2020-11-30T07:24:22Z", "author": {"login": "iNikem"}, "path": "instrumentation/opentelemetry-annotations-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/otelannotations/WithSpanTracer.java", "diffHunk": "@@ -22,6 +24,42 @@ public static WithSpanTracer tracer() {\n \n   private static final Logger log = LoggerFactory.getLogger(WithSpanTracer.class);\n \n+  public io.opentelemetry.api.trace.Span startSpan(\n+      Context context,\n+      WithSpan applicationAnnotation,\n+      Method method,\n+      io.opentelemetry.api.trace.Span.Kind kind) {\n+\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.SERVER\n+        && getCurrentServerSpan(context) != null) {\n+      return io.opentelemetry.api.trace.Span.getInvalid();\n+    }\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.CLIENT\n+        && context.get(CONTEXT_CLIENT_SPAN_KEY) != null) {\n+      return io.opentelemetry.api.trace.Span.getInvalid();\n+    }\n+    return startSpan(spanNameForMethodWithAnnotation(applicationAnnotation, method), kind);\n+  }\n+\n+  /**\n+   * Creates new scoped context, based on the given context, with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope startScope(\n+      Context context,\n+      io.opentelemetry.api.trace.Span span,\n+      io.opentelemetry.api.trace.Span.Kind kind) {\n+\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.SERVER) {\n+      return context.with(CONTEXT_SERVER_SPAN_KEY, span).with(span).makeCurrent();\n+    }\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.CLIENT) {\n+      return context.with(CONTEXT_CLIENT_SPAN_KEY, span).with(span).makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1b827a73032616729b5b64f3a2b27f101aeb54"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk4MjE5Ng==", "bodyText": "oh this is a good point, I thought that issue was just about an optimization, but understand now \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1801#discussion_r532982196", "createdAt": "2020-11-30T23:58:41Z", "author": {"login": "trask"}, "path": "instrumentation/opentelemetry-annotations-1.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/otelannotations/WithSpanTracer.java", "diffHunk": "@@ -22,6 +24,42 @@ public static WithSpanTracer tracer() {\n \n   private static final Logger log = LoggerFactory.getLogger(WithSpanTracer.class);\n \n+  public io.opentelemetry.api.trace.Span startSpan(\n+      Context context,\n+      WithSpan applicationAnnotation,\n+      Method method,\n+      io.opentelemetry.api.trace.Span.Kind kind) {\n+\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.SERVER\n+        && getCurrentServerSpan(context) != null) {\n+      return io.opentelemetry.api.trace.Span.getInvalid();\n+    }\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.CLIENT\n+        && context.get(CONTEXT_CLIENT_SPAN_KEY) != null) {\n+      return io.opentelemetry.api.trace.Span.getInvalid();\n+    }\n+    return startSpan(spanNameForMethodWithAnnotation(applicationAnnotation, method), kind);\n+  }\n+\n+  /**\n+   * Creates new scoped context, based on the given context, with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope startScope(\n+      Context context,\n+      io.opentelemetry.api.trace.Span span,\n+      io.opentelemetry.api.trace.Span.Kind kind) {\n+\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.SERVER) {\n+      return context.with(CONTEXT_SERVER_SPAN_KEY, span).with(span).makeCurrent();\n+    }\n+    if (kind == io.opentelemetry.api.trace.Span.Kind.CLIENT) {\n+      return context.with(CONTEXT_CLIENT_SPAN_KEY, span).with(span).makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4OTYyMg=="}, "originalCommit": {"oid": "3f1b827a73032616729b5b64f3a2b27f101aeb54"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}