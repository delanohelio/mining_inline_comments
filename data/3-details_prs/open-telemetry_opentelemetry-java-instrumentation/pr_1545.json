{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzEwNzIz", "number": 1545, "title": "add baggage propagator to default propagators", "bodyText": "cc @carlosalberto", "createdAt": "2020-11-03T12:48:13Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545", "merged": true, "mergeCommit": {"oid": "4b3bbf661232f81f8b64deef1569d1279658ce76"}, "closed": true, "closedAt": "2020-11-20T17:56:02Z", "author": {"login": "malafeev"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY4l-lgH2gAyNTE0NzEwNzIzOjFlZjU5ZDg4ZTFiM2YxYjhjOGEwYzQxMTYxYzViOGVlOGQ1NmJkOWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdebMPNAFqTUzNTY1NDk2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b", "committedDate": "2020-11-03T12:47:35Z", "message": "add baggage propagators to default propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNTcwNTE0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-522570514", "createdAt": "2020-11-03T14:48:02Z", "commit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0ODowM1rOHsyPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0ODowM1rOHsyPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw==", "bodyText": "W3CBaggagePropagator shouldn't be registered as part of TraceMultiPropagator, i.e. it should be added directly through addTextMapPropagator() ;)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516722517", "createdAt": "2020-11-03T14:48:03Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -49,7 +52,11 @@ public static void initializePropagators(List<String> propagators) {\n       //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n-              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(\n+                  TraceMultiPropagator.builder()\n+                      .addPropagator(HttpTraceContext.getInstance())\n+                      .addPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd3f1efbde64b906977240fa73c8532159a9b75", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dcd3f1efbde64b906977240fa73c8532159a9b75", "committedDate": "2020-11-03T15:29:34Z", "message": "add W3CBaggagePropagator directly through addTextMapPropagator()\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7fd80137204475a76219c0e588d90609ee85a927", "committedDate": "2020-11-05T16:01:01Z", "message": "never add Baggage propagator to TraceMultiPropagator\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDg1MzEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-524485312", "createdAt": "2020-11-05T17:15:16Z", "commit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzoxNToxN1rOHuNmIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzoxNToxN1rOHuNmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw==", "bodyText": "@carlosalberto\nW3CBaggagePropagator should be first one or last one?\nit doesn't matter for inject but for extract we return context from last propagator.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518219297", "createdAt": "2020-11-05T17:15:17Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00845a8dd77249d96a651652ef3b245625cb5da", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d00845a8dd77249d96a651652ef3b245625cb5da", "committedDate": "2020-11-09T13:26:53Z", "message": "Merge branch 'master' into baggage-propagator\n\n# Conflicts:\n#\tREADME.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f550cdd37f6a27ec508a4b491080f4f5d58546da", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f550cdd37f6a27ec508a4b491080f4f5d58546da", "committedDate": "2020-11-10T08:59:10Z", "message": "leave JaegerPropagator out of the TraceMultiPropagator\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40764886b20751cab9bb4db3ee5e60a825f834f5", "committedDate": "2020-11-10T13:56:40Z", "message": "add javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjUwOTI2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-527250926", "createdAt": "2020-11-10T14:22:27Z", "commit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyMjoyN1rOHwe2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODoxM1rOHwfIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTIwNQ==", "bodyText": "Sorry, but no :) I will add comments to javadoc. And we still have to update README", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599205", "createdAt": "2020-11-10T14:22:27Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTU2OQ==", "bodyText": "Is it always added? Or only if baggage value is provided?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599569", "createdAt": "2020-11-10T14:22:56Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTcyMw==", "bodyText": "Is it always added? Or only if jaeger value is provided?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599723", "createdAt": "2020-11-10T14:23:09Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzY2MA==", "bodyText": "Above you say \"returns first successful extracted Context\", here you seem to say that later Baggage extraction can enrich the previous one. If context and baggage extractions behave differently in this regard, we have to say so explicitly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520603660", "createdAt": "2020-11-10T14:28:13Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context\n+   *       and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract any\n+   *       existing Baggage.\n+   *   <li>W3CBaggagePropagator comes after JaegerPropagator, as it can have more complex/complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4ada7a1de84c1fcb0cef80d0fc1809b915e6b6", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f4ada7a1de84c1fcb0cef80d0fc1809b915e6b6", "committedDate": "2020-11-10T15:17:46Z", "message": "update javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c78d5afdf892ce5e5c5102b62dd903d0e3b8bd1f", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c78d5afdf892ce5e5c5102b62dd903d0e3b8bd1f", "committedDate": "2020-11-10T15:22:20Z", "message": "update javadoc explaining rules for putting propagators\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c08df3206a36545cdf20a2134bf5b3cd41311ae7", "committedDate": "2020-11-12T15:28:43Z", "message": "update README.md\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTEzNTA0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-529513504", "createdAt": "2020-11-12T21:32:04Z", "commit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozMzoxMVrOHyPLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDo0NjowOFrOHya2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * extraction next rules applied:\n          \n          \n            \n               * extraction, these rules are applied:", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522439578", "createdAt": "2020-11-12T21:33:11Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n          \n          \n            \n               *       propagator extract Context.\n          \n          \n            \n               *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n          \n          \n            \n               *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n          \n          \n            \n               *       any existing Baggage.\n          \n          \n            \n               *   <li>W3CBaggagePropagator and JaegerPropagator are added outside of the multi-propagator so that they will always runs and extract baggage (note: JaegerPropagator extracts both baggage and context).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522558480", "createdAt": "2020-11-13T01:52:14Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n+   *       propagator extract Context.\n+   *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n+   *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n+   *       any existing Baggage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw==", "bodyText": "I don't see mention of supporting case-insensitivity in the spec, I would suggest leaving this out?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522603943", "createdAt": "2020-11-13T04:15:02Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDU1NA==", "bodyText": "doesn't seem important enough to log by default (default is info)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604554", "createdAt": "2020-11-13T04:15:46Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDY5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604698", "createdAt": "2020-11-13T04:15:55Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n+    }\n+    if (propagatorIds.remove(BAGGAGE)) {\n+      propagatorsBuilder.addTextMapPropagator(W3CBaggagePropagator.getInstance());\n+      log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext,baggage` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |\n          \n          \n            \n            | otel.propagators | OTEL_PROPAGATORS     | The propagators to be used. Use a comma-separated list for multiple propagators. Supported propagators are `tracecontext`, `baggage`, `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. Default is `tracecontext,baggage` (W3C). |", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522619243", "createdAt": "2020-11-13T04:34:03Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-If set to a comma-separated list of the values, the multi-propagator is used. The multi-propagator attempts\n-to extract the context from incoming requests using each of the configured propagator formats (in order),\n-stopping after the first successful context extraction. The multi-propagator injects the context into\n-outgoing requests using all the configured propagator formats.\n+If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n+and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n+to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n+The multi-propagator attempts to extract the context from incoming requests using each of the \n+configured propagator formats (in order), stopping after the first successful context extraction. \n+The multi-propagator injects the context into outgoing requests using all the configured propagator \n+formats.\n \n | System property  | Environment variable | Description                                                                                                     |\n |------------------|----------------------|-----------------------------------------------------------------------------------------------------------------|\n-| otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |\n+| otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext,baggage` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMTk3MA==", "bodyText": "I think this is going to be really confusing for users, suggest we just leave it out, and if anyone asks, refer them to the spec.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n          \n          \n            \n            and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n          \n          \n            \n            to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n          \n          \n            \n            The multi-propagator attempts to extract the context from incoming requests using each of the \n          \n          \n            \n            configured propagator formats (in order), stopping after the first successful context extraction. \n          \n          \n            \n            The multi-propagator injects the context into outgoing requests using all the configured propagator \n          \n          \n            \n            formats.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522621970", "createdAt": "2020-11-13T04:37:31Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-If set to a comma-separated list of the values, the multi-propagator is used. The multi-propagator attempts\n-to extract the context from incoming requests using each of the configured propagator formats (in order),\n-stopping after the first successful context extraction. The multi-propagator injects the context into\n-outgoing requests using all the configured propagator formats.\n+If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n+and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n+to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n+The multi-propagator attempts to extract the context from incoming requests using each of the \n+configured propagator formats (in order), stopping after the first successful context extraction. \n+The multi-propagator injects the context into outgoing requests using all the configured propagator \n+formats.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzMDc4MQ==", "bodyText": "also change section title to \"Propagators\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The propagator controls which distributed tracing header format is used.\n          \n          \n            \n            The propagators determine which distributed tracing header formats are used, and which baggage propagation header formats are used.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522630781", "createdAt": "2020-11-13T04:46:08Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ebc480970dcec1a126ac8482da5da4941f4404", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2ebc480970dcec1a126ac8482da5da4941f4404", "committedDate": "2020-11-13T13:22:58Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46fba221f0dedcddb54d9f3772b3cf9b0db645b", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d46fba221f0dedcddb54d9f3772b3cf9b0db645b", "committedDate": "2020-11-13T14:14:54Z", "message": "fix styling\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a678c7ef83a560e6ee6e9640fe0ea0c03703c69d", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a678c7ef83a560e6ee6e9640fe0ea0c03703c69d", "committedDate": "2020-11-18T12:34:20Z", "message": "Merge branch 'master' into baggage-propagator\n\n# Conflicts:\n#\tREADME.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a00e7a5ee72c1e51874e2e1b9b5f766a87ee2a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40a00e7a5ee72c1e51874e2e1b9b5f766a87ee2a", "committedDate": "2020-11-19T07:26:13Z", "message": "Simplify the rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3569df1ea2429d9fed370d1874b51441cd6bc190", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3569df1ea2429d9fed370d1874b51441cd6bc190", "committedDate": "2020-11-19T08:47:25Z", "message": "Merge pull request #6 from trask/pr-baggage-propagator\n\nSimplify the rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDIyMzA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-535422306", "createdAt": "2020-11-20T13:23:28Z", "commit": {"oid": "3569df1ea2429d9fed370d1874b51441cd6bc190"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjU0OTYw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#pullrequestreview-535654960", "createdAt": "2020-11-20T17:55:46Z", "commit": {"oid": "3569df1ea2429d9fed370d1874b51441cd6bc190"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2167, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}