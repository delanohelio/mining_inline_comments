{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5OTAyNTcw", "number": 1906, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyODozM1rOFFa0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyOTowOVrOFFa1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjI2NTk1OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyODozM1rOIF6-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjo0MTozOVrOIF7SWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTk0NQ==", "bodyText": "Can this use SpringWebFluxConfig?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1906#discussion_r543079945", "createdAt": "2020-12-15T06:28:33Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -97,4 +100,12 @@ private static MethodHandle findRawStatusCode() {\n       return null;\n     }\n   }\n+\n+  // TODO cache this after\n+  //  https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643\n+  private static boolean captureExperimentalSpanAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5093f0ba5b21edb607d2abfc96b3336eef654e86"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4NTE0NQ==", "bodyText": "SpringWebFluxConfig is in the javaagent module. I didn't want to add public API surface to the library module.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1906#discussion_r543085145", "createdAt": "2020-12-15T06:41:39Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -97,4 +100,12 @@ private static MethodHandle findRawStatusCode() {\n       return null;\n     }\n   }\n+\n+  // TODO cache this after\n+  //  https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643\n+  private static boolean captureExperimentalSpanAttributes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTk0NQ=="}, "originalCommit": {"oid": "5093f0ba5b21edb607d2abfc96b3336eef654e86"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjI2NzU0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyOTowOVrOIF6-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjo0MjozNVrOIF7UKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDE2NQ==", "bodyText": "Why the hell anybody could want this??", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1906#discussion_r543080165", "createdAt": "2020-12-15T06:29:09Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -91,10 +97,12 @@ private String spanNameOnRender(ModelAndView mv) {\n   }\n \n   private void onRender(Span span, ModelAndView mv) {\n-    span.setAttribute(\"spring-webmvc.view.name\", mv.getViewName());\n-    View view = mv.getView();\n-    if (view != null) {\n-      span.setAttribute(\"spring-webmvc.view.type\", spanNameForClass(view.getClass()));\n+    if (captureExperimentalSpanAttributes) {\n+      span.setAttribute(\"spring-webmvc.view.name\", mv.getViewName());\n+      View view = mv.getView();\n+      if (view != null) {\n+        span.setAttribute(\"spring-webmvc.view.type\", spanNameForClass(view.getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5093f0ba5b21edb607d2abfc96b3336eef654e86"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4NTYxMA==", "bodyText": "step 1: move to experimental\nstep 2: eliminate(?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1906#discussion_r543085610", "createdAt": "2020-12-15T06:42:35Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -91,10 +97,12 @@ private String spanNameOnRender(ModelAndView mv) {\n   }\n \n   private void onRender(Span span, ModelAndView mv) {\n-    span.setAttribute(\"spring-webmvc.view.name\", mv.getViewName());\n-    View view = mv.getView();\n-    if (view != null) {\n-      span.setAttribute(\"spring-webmvc.view.type\", spanNameForClass(view.getClass()));\n+    if (captureExperimentalSpanAttributes) {\n+      span.setAttribute(\"spring-webmvc.view.name\", mv.getViewName());\n+      View view = mv.getView();\n+      if (view != null) {\n+        span.setAttribute(\"spring-webmvc.view.type\", spanNameForClass(view.getClass()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4MDE2NQ=="}, "originalCommit": {"oid": "5093f0ba5b21edb607d2abfc96b3336eef654e86"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4367, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}