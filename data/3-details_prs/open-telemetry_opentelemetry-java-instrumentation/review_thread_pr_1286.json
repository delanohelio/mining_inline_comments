{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0ODUzNDA1", "number": 1286, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoxNzoxOVrOEoxwUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzozMDo1NFrOEo52AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTkzNjgyOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoxNzoxOVrOHaEI1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODozOTo0NFrOHaTOtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5MjgyMg==", "bodyText": "Is this class still needed/useful?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497092822", "createdAt": "2020-09-29T22:17:19Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "diffHunk": "@@ -16,53 +16,15 @@\n \n package io.opentelemetry.javaagent.tooling.config;\n \n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_EXPORTER;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_HYSTRIX_TAGS_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_INTEGRATIONS_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_SQL_NORMALIZER_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_EXECUTORS_ALL;\n import static io.opentelemetry.instrumentation.api.config.Config.normalizePropertyName;\n \n import io.opentelemetry.instrumentation.api.config.Config;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.function.Function;\n-import org.checkerframework.checker.nullness.qual.Nullable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public final class ConfigBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MDA4Nw==", "bodyText": "I think it is: it allows us to reuse SDK ConfigBuilder's environment variable and system property mechanism, it is a single place where we can specify the property reading order.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497340087", "createdAt": "2020-09-30T08:39:44Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "diffHunk": "@@ -16,53 +16,15 @@\n \n package io.opentelemetry.javaagent.tooling.config;\n \n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_EXPORTER;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_HYSTRIX_TAGS_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_INTEGRATIONS_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_SQL_NORMALIZER_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_ENABLED;\n-import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_EXECUTORS_ALL;\n import static io.opentelemetry.instrumentation.api.config.Config.normalizePropertyName;\n \n import io.opentelemetry.instrumentation.api.config.Config;\n-import java.util.Arrays;\n-import java.util.Collections;\n import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-import java.util.function.Function;\n-import org.checkerframework.checker.nullness.qual.Nullable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public final class ConfigBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5MjgyMg=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTk3MDIxOnYy", "diffSide": "RIGHT", "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoyOTo1M1rOHaEcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMzo0NTo1NFrOHaHooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NzgxMA==", "bodyText": "I'm curious the reason for this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497097810", "createdAt": "2020-09-29T22:29:53Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java", "diffHunk": "@@ -102,7 +102,7 @@\n   private static volatile ClassFileTransformer activeTransformer = null;\n \n   static {\n-    INSTRUMENTATION = ByteBuddyAgent.getInstrumentation();\n+    INSTRUMENTATION = ByteBuddyAgent.install();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MDExMg==", "bodyText": "oh nm, I see install() was moved here from AgentSpecification \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497150112", "createdAt": "2020-09-29T23:45:54Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java", "diffHunk": "@@ -102,7 +102,7 @@\n   private static volatile ClassFileTransformer activeTransformer = null;\n \n   static {\n-    INSTRUMENTATION = ByteBuddyAgent.getInstrumentation();\n+    INSTRUMENTATION = ByteBuddyAgent.install();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NzgxMA=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMjAxNTU1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/context/ContextPropagationDebug.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjo0NDoxN1rOHaE4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1Mzo0MVrOHaTxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNTA2OQ==", "bodyText": "maybe make fields private with static accessors, e.g. isEnabled(), getLocation(Context), withLocation(List<StackTraceElement[]>, Context)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497105069", "createdAt": "2020-09-29T22:44:17Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/context/ContextPropagationDebug.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.context;\n+\n+import io.grpc.Context;\n+import java.util.List;\n+\n+public final class ContextPropagationDebug {\n+\n+  // locations where the context was propagated to another thread (tracking multiple steps is\n+  // helpful in akka where there is so much recursive async spawning of new work)\n+  public static final Context.Key<List<StackTraceElement[]>> THREAD_PROPAGATION_LOCATIONS =\n+      Context.key(\"thread-propagation-locations\");\n+  public static final boolean THREAD_PROPAGATION_DEBUGGER =\n+      Boolean.getBoolean(\"otel.threadPropagationDebugger\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NjAzNQ==", "bodyText": "Specification explicitly advices against exposing context keys.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497296035", "createdAt": "2020-09-30T07:25:57Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/context/ContextPropagationDebug.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.context;\n+\n+import io.grpc.Context;\n+import java.util.List;\n+\n+public final class ContextPropagationDebug {\n+\n+  // locations where the context was propagated to another thread (tracking multiple steps is\n+  // helpful in akka where there is so much recursive async spawning of new work)\n+  public static final Context.Key<List<StackTraceElement[]>> THREAD_PROPAGATION_LOCATIONS =\n+      Context.key(\"thread-propagation-locations\");\n+  public static final boolean THREAD_PROPAGATION_DEBUGGER =\n+      Boolean.getBoolean(\"otel.threadPropagationDebugger\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNTA2OQ=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0OTAyOA==", "bodyText": "Very good point, fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497349028", "createdAt": "2020-09-30T08:53:41Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/context/ContextPropagationDebug.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.context;\n+\n+import io.grpc.Context;\n+import java.util.List;\n+\n+public final class ContextPropagationDebug {\n+\n+  // locations where the context was propagated to another thread (tracking multiple steps is\n+  // helpful in akka where there is so much recursive async spawning of new work)\n+  public static final Context.Key<List<StackTraceElement[]>> THREAD_PROPAGATION_LOCATIONS =\n+      Context.key(\"thread-propagation-locations\");\n+  public static final boolean THREAD_PROPAGATION_DEBUGGER =\n+      Boolean.getBoolean(\"otel.threadPropagationDebugger\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwNTA2OQ=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzIzNTQ5OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoyMzoxNVrOHaQc8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NTozN1rOHaT28g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDU3Ng==", "bodyText": "So default config is one without any configuration? Maybe it should use old default values in some way?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497294576", "createdAt": "2020-09-30T07:23:15Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -35,23 +35,7 @@\n   private static final Logger log = LoggerFactory.getLogger(Config.class);\n   private static final Pattern PROPERTY_NAME_REPLACEMENTS = Pattern.compile(\"[^a-zA-Z0-9.]\");\n \n-  // locations where the context was propagated to another thread (tracking multiple steps is\n-  // helpful in akka where there is so much recursive async spawning of new work)\n-  public static final Context.Key<List<StackTraceElement[]>> THREAD_PROPAGATION_LOCATIONS =\n-      Context.key(\"thread-propagation-locations\");\n-  public static final boolean THREAD_PROPAGATION_DEBUGGER =\n-      Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n-\n-  public static final String DEFAULT_EXPORTER = \"otlp\";\n-  public static final boolean DEFAULT_TRACE_ENABLED = true;\n-  public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-  public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-  public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n-\n-  private static final Config DEFAULT = Config.newBuilder().build();\n+  private static final Config DEFAULT = Config.create(Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1MDM4Ng==", "bodyText": "The default values are now specified by Config callers, so there's no need to keep anything here -- which makes sense, because we wouldn't want to keep a default value for some Kafka property here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497350386", "createdAt": "2020-09-30T08:55:37Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -35,23 +35,7 @@\n   private static final Logger log = LoggerFactory.getLogger(Config.class);\n   private static final Pattern PROPERTY_NAME_REPLACEMENTS = Pattern.compile(\"[^a-zA-Z0-9.]\");\n \n-  // locations where the context was propagated to another thread (tracking multiple steps is\n-  // helpful in akka where there is so much recursive async spawning of new work)\n-  public static final Context.Key<List<StackTraceElement[]>> THREAD_PROPAGATION_LOCATIONS =\n-      Context.key(\"thread-propagation-locations\");\n-  public static final boolean THREAD_PROPAGATION_DEBUGGER =\n-      Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n-\n-  public static final String DEFAULT_EXPORTER = \"otlp\";\n-  public static final boolean DEFAULT_TRACE_ENABLED = true;\n-  public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-  public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-  public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n-\n-  private static final Config DEFAULT = Config.newBuilder().build();\n+  private static final Config DEFAULT = Config.create(Collections.emptyMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDU3Ng=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzI0NjY3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoyNjozNFrOHaQj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTowMDoyNFrOHaUDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NjM1Ng==", "bodyText": "Looks like more than Utils now", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497296356", "createdAt": "2020-09-30T07:26:34Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/BaseDecorator.java", "diffHunk": "@@ -17,10 +17,10 @@\n package io.opentelemetry.instrumentation.api.decorator;\n \n import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.instrumentation.api.tracer.utils.NetPeerUtils.ENDPOINT_PEER_SERVICE_MAPPING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1MzYwNg==", "bodyText": "Yes - but on the other hand, once we remove all BaseDecorator extensions this constant will go back to being private.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497353606", "createdAt": "2020-09-30T09:00:24Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/decorator/BaseDecorator.java", "diffHunk": "@@ -17,10 +17,10 @@\n package io.opentelemetry.instrumentation.api.decorator;\n \n import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.instrumentation.api.tracer.utils.NetPeerUtils.ENDPOINT_PEER_SERVICE_MAPPING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NjM1Ng=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzI1NDc1OnYy", "diffSide": "LEFT", "path": "instrumentation/jdbc/src/test/groovy/SqlNormalizerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoyODo1OVrOHaQo9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOToxMzoyMFrOHaUiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NzY1NA==", "bodyText": "Why removed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497297654", "createdAt": "2020-09-30T07:28:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/jdbc/src/test/groovy/SqlNormalizerTest.groovy", "diffHunk": "@@ -139,19 +137,4 @@ class SqlNormalizerTest extends AgentSpecification {\n       JDBCUtils.normalizeSql(sb.toString())\n     }\n   }\n-\n-  def \"config can disable sql normalizer\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM2MTQ3MQ==", "bodyText": "I had two options here:\n\nstore the property in a static final constant and remove this test (changing property value would require unloading & loading JDBCUtils);\nleave this test and call Config on each normalizeSql() call.\n\nI suspect that normalizeSql() can be called very often (each SQL query), so I've decided to choose the first option for performance reasons.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497361471", "createdAt": "2020-09-30T09:13:20Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jdbc/src/test/groovy/SqlNormalizerTest.groovy", "diffHunk": "@@ -139,19 +137,4 @@ class SqlNormalizerTest extends AgentSpecification {\n       JDBCUtils.normalizeSql(sb.toString())\n     }\n   }\n-\n-  def \"config can disable sql normalizer\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NzY1NA=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzI2MjA5OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/Instrumenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzozMDo1NFrOHaQtQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTowNDowOVrOHaUMbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5ODc1Mg==", "bodyText": "This should be cached, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497298752", "createdAt": "2020-09-30T07:30:54Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/Instrumenter.java", "diffHunk": "@@ -237,7 +237,7 @@ protected ReferenceMatcher getInstrumentationMuzzle() {\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      return Config.get().getBooleanProperty(\"otel.integrations.enabled\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1NTg4NQ==", "bodyText": "It probably should - but its value is modified in the unit test heavily, so I've decided to just leave it here. This method is only called during the instrumenter initialization, so calling the Config here adds no overhead once the agent starts.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1286#discussion_r497355885", "createdAt": "2020-09-30T09:04:09Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/Instrumenter.java", "diffHunk": "@@ -237,7 +237,7 @@ protected ReferenceMatcher getInstrumentationMuzzle() {\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      return Config.get().getBooleanProperty(\"otel.integrations.enabled\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5ODc1Mg=="}, "originalCommit": {"oid": "502782cf4f7971b1ab0347c8cb38436bd4b62b3b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4781, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}