{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTA1NzQ4", "number": 827, "title": "feat(tags): http", "bodyText": "flavour, user agent, client ip\nI had to make a new type of tracer method that takes both the request and the connection because netty has the flavour on the request while armeria has the flavour on the connection. Also, I needed a fallback for the client ip which relies on the connection.\nCloses #776", "createdAt": "2020-07-28T23:14:33Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827", "merged": true, "mergeCommit": {"oid": "adab0efcd6bc37b80772edd7cf4b56b6bc85d9a7"}, "closed": true, "closedAt": "2020-07-30T06:57:13Z", "author": {"login": "FrankSpitulski"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5fGCYgFqTQ1NzA5NTY1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc55nXSgH2gAyNDU4MTA1NzQ4OjJiMGQzYWM4ZWJkYzcyODFlNjVhODJkOGFhMTZjOGI4ZTFhMmFiYmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDk1NjUx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-457095651", "createdAt": "2020-07-28T23:25:02Z", "commit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyNTowM1rOG4jJpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzozMTowOFrOG4jSAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTM0OQ==", "bodyText": "do you think we need to support this header?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461949349", "createdAt": "2020-07-28T23:25:03Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDA3Ng==", "bodyText": "should be slightly faster to split by , and then trim result", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461950076", "createdAt": "2020-07-28T23:27:07Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : forwarded.split(\";|(, *)\")) {\n+        String[] split = forwardedValues.split(\"=\", 2);\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        if (\"for\".equalsIgnoreCase(split[0]) && !split[1].isEmpty()) {\n+          return split[1];\n+        }\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      String[] split = forwarded.split(\", *\", 2); // only need the first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDg2NQ==", "bodyText": "ya, fix should be merged shortly in #824 \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461950865", "createdAt": "2020-07-28T23:29:16Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/typedspan/DelegatingSpan.java", "diffHunk": "@@ -91,6 +91,11 @@ public void setStatus(final Status status) {\n     delegate.setStatus(status);\n   }\n \n+  @Override\n+  public void recordException(Throwable throwable) {\n+    delegate.recordException(throwable);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MTQ4OA==", "bodyText": "does this work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null; // TODO flavor is on the request, not the connection for this tracer\n          \n          \n            \n                return request.getProtocolVersion().toString();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461951488", "createdAt": "2020-07-28T23:31:08Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/NettyHttpServerTracer.java", "diffHunk": "@@ -67,6 +72,11 @@ protected String peerHostIP(final Channel channel) {\n     return null;\n   }\n \n+  @Override\n+  protected String flavor(Channel channel, HttpRequest request) {\n+    return null; // TODO flavor is on the request, not the connection for this tracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTAwNjE2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-457100616", "createdAt": "2020-07-28T23:38:50Z", "commit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzozODo1MFrOG4jb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzozODo1MFrOG4jb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDAxMA==", "bodyText": "split(regex) is really slow, if we need a regex we should use Pattern.compile at least. But it'd be best if we can avoid split too due to the array allocations, do you think we can loop through to find the indexes instead of splitting?\n@trask By the way, is it ok to use Guava here? CharMatcher can help with such searches.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r461954010", "createdAt": "2020-07-28T23:38:50Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,44 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : forwarded.split(\";|(, *)\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "952c19e5130f7075f2e747c5367da719107dcbb3", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/952c19e5130f7075f2e747c5367da719107dcbb3", "committedDate": "2020-07-28T23:11:42Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}, "afterCommit": {"oid": "44e5261fd119c564cee426c09c87e377b3f34c4e", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44e5261fd119c564cee426c09c87e377b3f34c4e", "committedDate": "2020-07-29T01:39:58Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44e5261fd119c564cee426c09c87e377b3f34c4e", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44e5261fd119c564cee426c09c87e377b3f34c4e", "committedDate": "2020-07-29T01:39:58Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}, "afterCommit": {"oid": "f4a7fc944c30333b0b9e35ff3be8a496bba0cd1e", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f4a7fc944c30333b0b9e35ff3be8a496bba0cd1e", "committedDate": "2020-07-29T01:40:37Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTY2NTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-457166544", "createdAt": "2020-07-29T03:17:45Z", "commit": {"oid": "2ee612c5aa6d6225c35a224a66e30a152c98739c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoxNzo0NVrOG4nEWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzoyNzo0M1rOG4nOYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxMzUzMQ==", "bodyText": "did we need trim here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    forwarded = forwarded.substring(0, endIndex);\n          \n          \n            \n                    forwarded = forwarded.substring(0, endIndex).trim();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462013531", "createdAt": "2020-07-29T03:17:45Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +205,48 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : FORWARDED_SPLIT_PATTERN.split(forwarded)) {\n+        forwardedValues = forwardedValues.trim();\n+        String[] split = EQUALS_PATTERN.split(forwardedValues, 2);\n+        if (split.length != 2) {\n+          continue;\n+        }\n+        if (\"for\".equalsIgnoreCase(split[0]) && !split[1].isEmpty()) {\n+          return split[1];\n+        }\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee612c5aa6d6225c35a224a66e30a152c98739c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjA5OQ==", "bodyText": "can you convert EQUALS_PATTERN to indexOf/substring to avoid that regex? I don't think that would add code complexity.\nreplacing FORWARDED_SPLIT_PATTERN would definitely add code complexity, so i don't mind keeping", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462016099", "createdAt": "2020-07-29T03:27:43Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +205,48 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      // may be split by ; or ,\n+      for (String forwardedValues : FORWARDED_SPLIT_PATTERN.split(forwarded)) {\n+        forwardedValues = forwardedValues.trim();\n+        String[] split = EQUALS_PATTERN.split(forwardedValues, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ee612c5aa6d6225c35a224a66e30a152c98739c"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3eddbad4b7a4e00fe62587b74a1f5e3700119617", "committedDate": "2020-07-29T17:55:43Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7708ca8543cedd4958ada88ca3dab9ec9f13d88f", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7708ca8543cedd4958ada88ca3dab9ec9f13d88f", "committedDate": "2020-07-29T05:53:08Z", "message": "remove unused pattern"}, "afterCommit": {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3eddbad4b7a4e00fe62587b74a1f5e3700119617", "committedDate": "2020-07-29T17:55:43Z", "message": "feat(tags): http\n\nflavour, user agent, client ip"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTAxMjIz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-457901223", "createdAt": "2020-07-29T21:11:45Z", "commit": {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxMTo0NlrOG5KXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxMTo0NlrOG5KXeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5MTg2Ng==", "bodyText": "Can you add unit test for this method (to mitigate against the extra complexity we asked for \ud83d\ude04)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462591866", "createdAt": "2020-07-29T21:11:46Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,59 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      forwarded = extractForwardedFor(forwarded);\n+      if (forwarded != null) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);\n+      }\n+      if (!forwarded.isEmpty()) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // fallback to peer IP if there are no proxy headers\n+    return peerHostIP(connection);\n+  }\n+\n+  private static String extractForwardedFor(String forwarded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eddbad4b7a4e00fe62587b74a1f5e3700119617"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413eefb590daa8320b6b5798c4590f89c04e9a4b", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/413eefb590daa8320b6b5798c4590f89c04e9a4b", "committedDate": "2020-07-29T23:31:49Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ce87ff1410f21df72a561d814623bcc08a0c46", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6ce87ff1410f21df72a561d814623bcc08a0c46", "committedDate": "2020-07-29T23:49:27Z", "message": "add copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTg4NTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-457988548", "createdAt": "2020-07-30T00:38:40Z", "commit": {"oid": "f6ce87ff1410f21df72a561d814623bcc08a0c46"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDozODo0MFrOG5O-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMDozODo0MFrOG5O-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY2NzMzOQ==", "bodyText": "Since the spec seems to use lowercase, and it's not a commonly used header anyways, I probably wouldn't be so permissive and just not do the toLowerCase but it's ok too. From what I can tell, we consider it unimportant enough to not have unit tests :P", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#discussion_r462667339", "createdAt": "2020-07-30T00:38:40Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -195,6 +201,63 @@ protected void onRequest(final Span span, final REQUEST request) {\n     // TODO set resource name from URL.\n   }\n \n+  protected void onConnectionAndRequest(Span span, CONNECTION connection, REQUEST request) {\n+    String flavor = flavor(connection, request);\n+    if (flavor != null) {\n+      SemanticAttributes.HTTP_FLAVOR.set(span, flavor);\n+    }\n+    SemanticAttributes.HTTP_CLIENT_IP.set(span, clientIP(connection, request));\n+  }\n+\n+  protected String clientIP(CONNECTION connection, REQUEST request) {\n+    // try Forwarded\n+    String forwarded = requestHeader(request, \"Forwarded\");\n+    if (forwarded != null) {\n+      forwarded = extractForwardedFor(forwarded);\n+      if (forwarded != null) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // try X-Forwarded-For\n+    forwarded = requestHeader(request, \"X-Forwarded-For\");\n+    if (forwarded != null) {\n+      // may be split by ,\n+      int endIndex = forwarded.indexOf(',');\n+      if (endIndex > 0) {\n+        forwarded = forwarded.substring(0, endIndex);\n+      }\n+      if (!forwarded.isEmpty()) {\n+        return forwarded;\n+      }\n+    }\n+\n+    // fallback to peer IP if there are no proxy headers\n+    return peerHostIP(connection);\n+  }\n+\n+  // VisibleForTesting\n+  static String extractForwardedFor(String forwarded) {\n+    int start = forwarded.toLowerCase().indexOf(\"for=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ce87ff1410f21df72a561d814623bcc08a0c46"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "610199f67ec5b2fb576aa308128ead9eef568d0c", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/610199f67ec5b2fb576aa308128ead9eef568d0c", "committedDate": "2020-07-30T02:02:40Z", "message": "add caps test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDYxNTc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-458061576", "createdAt": "2020-07-30T04:23:38Z", "commit": {"oid": "610199f67ec5b2fb576aa308128ead9eef568d0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDY4NTQ3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/827#pullrequestreview-458068547", "createdAt": "2020-07-30T04:48:57Z", "commit": {"oid": "610199f67ec5b2fb576aa308128ead9eef568d0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0d3ac8ebdc7281e65a82d8aa16c8b8e1a2abbe", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2b0d3ac8ebdc7281e65a82d8aa16c8b8e1a2abbe", "committedDate": "2020-07-30T06:27:21Z", "message": "Merge remote-tracking branch 'upstream/master' into FrankSpitulski-http"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2889, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}