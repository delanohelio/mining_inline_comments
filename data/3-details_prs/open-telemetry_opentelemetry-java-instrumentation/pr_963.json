{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDY1Mjk0", "number": 963, "title": "add some JMS attributes", "bodyText": "I'm trying to add what I can from https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md#messaging-attributes\nBut I don't see the way for some attributes like:\n\nmessaging.system\nmessaging.protocol\nmessaging.protocol_version\nmessaging.url\nmessaging.message_payload_size_bytes\nmessaging.message_payload_compressed_size_bytes\n\nany ideas?", "createdAt": "2020-08-13T15:36:20Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963", "merged": true, "mergeCommit": {"oid": "43e01410568145c6cc077cd598b0bc73b1ff601b"}, "closed": true, "closedAt": "2020-08-14T16:42:07Z", "author": {"login": "malafeev"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-h2p0gH2gAyNDY3NDY1Mjk0OjAzOTFhMDZlMGQ5ZjZhMjRmNWVkNWZiODQwNGYzZjQ3MTVjYTMwOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-3ZPUAFqTQ2NzcxODkwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0391a06e0d9f6a24f5ed5fb8404f3f4715ca309c", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0391a06e0d9f6a24f5ed5fb8404f3f4715ca309c", "committedDate": "2020-08-13T15:35:57Z", "message": "add some JMS attributes\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/11d3e435bf71d8e0c2006019b71a26b11f6a169b", "committedDate": "2020-08-13T15:48:17Z", "message": "remove semicolon\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDgxODUx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#pullrequestreview-467081851", "createdAt": "2020-08-13T19:51:01Z", "commit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo1MTowMVrOHAbO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0NDozNVrOHAc_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODIzOQ==", "bodyText": "i think good to narrow down the try/catch, and log exception at debug level\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                    String messageID = message.getJMSMessageID();\n          \n          \n            \n                    if (messageID != null) {\n          \n          \n            \n                      SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n          \n          \n            \n                    }\n          \n          \n            \n                  } catch (JMSException e) {\n          \n          \n            \n                  }\n          \n          \n            \n                  String messageID = null;\n          \n          \n            \n                  try {\n          \n          \n            \n                    messageID = message.getJMSMessageID();\n          \n          \n            \n                  } catch (JMSException e) {\n          \n          \n            \n                    log.debug(e.getMessage(), e);\n          \n          \n            \n                  }\n          \n          \n            \n                  if (messageID != null) {\n          \n          \n            \n                    SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n          \n          \n            \n                  }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208239", "createdAt": "2020-08-13T19:51:01Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }\n+\n+    if (message != null) {\n+      try {\n+        String messageID = message.getJMSMessageID();\n+        if (messageID != null) {\n+          SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n+        }\n+      } catch (JMSException e) {\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODM1Nw==", "bodyText": "same here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208357", "createdAt": "2020-08-13T19:51:14Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }\n+\n+    if (message != null) {\n+      try {\n+        String messageID = message.getJMSMessageID();\n+        if (messageID != null) {\n+          SemanticAttributes.MESSAGING_MESSAGE_ID.set(span, messageID);\n+        }\n+      } catch (JMSException e) {\n+      }\n+\n+      try {\n+        String correlationID = message.getJMSCorrelationID();\n+        if (correlationID != null) {\n+          SemanticAttributes.MESSAGING_CONVERSATION_ID.set(span, correlationID);\n+        }\n+      } catch (JMSException e) {\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwODkyOA==", "bodyText": "and call super.afterStart(span) from inside afterStart(Span, String, Message)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  DECORATE.afterStart(span);\n          \n          \n            \n                  DECORATE.afterStart(span, spanName, message);\n          \n          \n            \n                  DECORATE.afterStart(span, spanName, message);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470208928", "createdAt": "2020-08-13T19:52:29Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageListenerInstrumentation.java", "diffHunk": "@@ -79,12 +79,13 @@ public JMSMessageListenerInstrumentation() {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static SpanWithScope onEnter(@Advice.Argument(0) final Message message) {\n \n-      Span.Builder spanBuilder =\n-          TRACER.spanBuilder(DECORATE.spanNameForConsumer(message)).setSpanKind(CONSUMER);\n+      final String spanName = DECORATE.spanNameForConsumer(message);\n+      Span.Builder spanBuilder = TRACER.spanBuilder(spanName).setSpanKind(CONSUMER);\n       spanBuilder.setParent(extract(message, GETTER));\n \n       Span span = spanBuilder.startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTA2OA==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470209068", "createdAt": "2020-08-13T19:52:43Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageProducerInstrumentation.java", "diffHunk": "@@ -105,12 +105,10 @@ public static SpanWithScope onEnter(\n         defaultDestination = null;\n       }\n \n-      Span span =\n-          TRACER\n-              .spanBuilder(DECORATE.spanNameForProducer(message, defaultDestination))\n-              .setSpanKind(PRODUCER)\n-              .startSpan();\n+      final String spanName = DECORATE.spanNameForProducer(message, defaultDestination);\n+      Span span = TRACER.spanBuilder(spanName).setSpanKind(PRODUCER).startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwOTE3MQ==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470209171", "createdAt": "2020-08-13T19:52:51Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSMessageProducerInstrumentation.java", "diffHunk": "@@ -146,12 +144,11 @@ public static SpanWithScope onEnter(\n         return null;\n       }\n \n-      Span span =\n-          TRACER\n-              .spanBuilder(DECORATE.spanNameForProducer(message, destination))\n-              .setSpanKind(PRODUCER)\n-              .startSpan();\n+      final String spanName = DECORATE.spanNameForProducer(message, destination);\n+\n+      Span span = TRACER.spanBuilder(spanName).setSpanKind(PRODUCER).startSpan();\n       DECORATE.afterStart(span);\n+      DECORATE.afterStart(span, spanName, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMDA4MQ==", "bodyText": "when in groovy... \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Message receivedMessage\n          \n          \n            \n                def receivedMessage", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470210081", "createdAt": "2020-08-13T19:54:33Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/test/groovy/SpringTemplateJMS1Test.groovy", "diffHunk": "@@ -66,29 +68,31 @@ class SpringTemplateJMS1Test extends AgentTestRunner {\n     receivedMessage.text == messageText\n     assertTraces(2) {\n       trace(0, 1) {\n-        producerSpan(it, 0, expectedSpanName)\n+        producerSpan(it, 0, destinationType, destinationName)\n       }\n       trace(1, 1) {\n-        consumerSpan(it, 0, expectedSpanName, false, ActiveMQMessageConsumer, traces[0][0])\n+        consumerSpan(it, 0, destinationType, destinationName, receivedMessage.getJMSMessageID(), false, ActiveMQMessageConsumer, traces[0][0])\n       }\n     }\n \n     where:\n-    destination                               | expectedSpanName\n-    session.createQueue(\"SpringTemplateJMS1\") | \"queue/SpringTemplateJMS1\"\n+    destination                               | destinationType | destinationName\n+    session.createQueue(\"SpringTemplateJMS1\") | \"queue\"         | \"SpringTemplateJMS1\"\n   }\n \n   def \"send and receive message generates spans\"() {\n     setup:\n+    AtomicReference<String> msgId = new AtomicReference<>()\n     Thread.start {\n       TextMessage msg = template.receive(destination)\n       assert msg.text == messageText\n+      msgId.set(msg.getJMSMessageID())\n \n       template.send(msg.getJMSReplyTo()) {\n         session -> template.getMessageConverter().toMessage(\"responded!\", session)\n       }\n     }\n-    def receivedMessage\n+    Message receivedMessage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMTQ5Mw==", "bodyText": "see related comment below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"${SemanticAttributes.MESSAGING_MESSAGE_ID.key()}\" messageId\n          \n          \n            \n                    if (messageId != null) {\n          \n          \n            \n                      \"${SemanticAttributes.MESSAGING_MESSAGE_ID.key()}\" messageId\n          \n          \n            \n                    } else {\n          \n          \n            \n                      \"${SemanticAttributes.MESSAGING_MESSAGE_ID.key()}\" String\n          \n          \n            \n                    }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470211493", "createdAt": "2020-08-13T19:57:09Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/test/groovy/JMS1Test.groovy", "diffHunk": "@@ -263,6 +281,12 @@ class JMS1Test extends AgentTestRunner {\n       }\n       errored false\n       attributes {\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_MESSAGE_ID.key()}\" messageId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIxMTc4Ng==", "bodyText": "this doesn't really validate the messageId, since getting the id from the span, and then validating the id back against the same span\ninstead, it's ok to just validate that the messageId is String, see related comment above\nEDIT: I noticed that you are able to capture the real messageId from some of the other tests. so maybe pass in null here instead of removing param altogether\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // cannot get messageId therefore get it from span attributes\n          \n          \n            \n                    consumerSpan(it, 1, \"queue\", \"SpringListenerJMS1\", it.span(1).attributes.get(SemanticAttributes.MESSAGING_MESSAGE_ID.key()).stringValue, true, MessagingMessageListenerAdapter, span(0))\n          \n          \n            \n                    consumerSpan(it, 1, \"queue\", \"SpringListenerJMS1\", null, true, MessagingMessageListenerAdapter, span(0))", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470211786", "createdAt": "2020-08-13T19:57:40Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/test/groovy/SpringListenerJMS1Test.groovy", "diffHunk": "@@ -39,11 +40,13 @@ class SpringListenerJMS1Test extends AgentTestRunner {\n     expect:\n     assertTraces(2) {\n       trace(0, 2) {\n-        producerSpan(it, 0, \"queue/SpringListenerJMS1\")\n-        consumerSpan(it, 1, \"queue/SpringListenerJMS1\", true, MessagingMessageListenerAdapter, span(0))\n+        producerSpan(it, 0, \"queue\", \"SpringListenerJMS1\")\n+        // cannot get messageId therefore get it from span attributes\n+        consumerSpan(it, 1, \"queue\", \"SpringListenerJMS1\", it.span(1).attributes.get(SemanticAttributes.MESSAGING_MESSAGE_ID.key()).stringValue, true, MessagingMessageListenerAdapter, span(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNzE2NQ==", "bodyText": "when we move to the new Tracer design, and do both JMSDecorator.toSpanName() and afterStart() inside of startSpan, we can consolidate the conditionals between these two methods (and remove the startsWith logic)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#discussion_r470237165", "createdAt": "2020-08-13T20:44:35Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jms/JMSDecorator.java", "diffHunk": "@@ -80,4 +83,35 @@ public static String toSpanName(Destination destination) {\n     }\n     return \"destination\";\n   }\n+\n+  public void afterStart(Span span, String spanName, Message message) {\n+    if (spanName.startsWith(\"queue/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"queue\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"queue/\", \"\"));\n+    } else if (spanName.startsWith(\"topic/\")) {\n+      SemanticAttributes.MESSAGING_DESTINATION_KIND.set(span, \"topic\");\n+      SemanticAttributes.MESSAGING_DESTINATION.set(span, spanName.replaceFirst(\"topic/\", \"\"));\n+    }\n+    if (spanName.equals(\"queue/<temporary>\") || spanName.equals(\"topic/<temporary>\")) {\n+      SemanticAttributes.MESSAGING_TEMP_DESTINATION.set(span, true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d3e435bf71d8e0c2006019b71a26b11f6a169b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c3814dc88381ac7bc5dffdbac4f1c444459791c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c3814dc88381ac7bc5dffdbac4f1c444459791c", "committedDate": "2020-08-14T06:26:27Z", "message": "Merge remote-tracking branch 'upstream/master' into malafeev-merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1b4048007603408ae5e97eb11c229648384865", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e1b4048007603408ae5e97eb11c229648384865", "committedDate": "2020-08-14T10:02:06Z", "message": "fix review comments\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9171eb07f7747a32001a79f8f69ff03ce8c3b9a2", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9171eb07f7747a32001a79f8f69ff03ce8c3b9a2", "committedDate": "2020-08-14T10:17:42Z", "message": "get rid of unused imports\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzE4OTA3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/963#pullrequestreview-467718907", "createdAt": "2020-08-14T16:41:44Z", "commit": {"oid": "9171eb07f7747a32001a79f8f69ff03ce8c3b9a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2709, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}