{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjMyMzI2", "number": 462, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoxMDoxNFrOEBMOOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoxMDoxNFrOEBMOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Njg0MjgyOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoxMDoxNFrOGc52vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxNjoyODo0NVrOGc58uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTIxNQ==", "bodyText": "System properties override environment variables \ud83d\udc4d\nThis seems good to me, same as Spring Boot: https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/462#discussion_r432961215", "createdAt": "2020-05-31T16:10:14Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,10 +70,12 @@ private static synchronized void installExportersFromJar(final String exporterJa\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n     if (spanExporterFactory != null) {\n       final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      OpenTelemetrySdk.getTracerProvider()\n-          .addSpanProcessor(\n-              BatchSpansProcessor.create(\n-                  spanExporter, BatchSpansProcessor.Config.loadFromDefaultSources()));\n+      BatchSpanProcessor spanProcessor =\n+          BatchSpanProcessor.newBuilder(spanExporter)\n+              .readEnvironmentVariables()\n+              .readSystemProperties()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3f74c1672d9b5be1b7639382355527712357700"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2Mjc0NA==", "bodyText": "Yes :) I always use their order as a reference :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/462#discussion_r432962744", "createdAt": "2020-05-31T16:28:45Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,10 +70,12 @@ private static synchronized void installExportersFromJar(final String exporterJa\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n     if (spanExporterFactory != null) {\n       final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      OpenTelemetrySdk.getTracerProvider()\n-          .addSpanProcessor(\n-              BatchSpansProcessor.create(\n-                  spanExporter, BatchSpansProcessor.Config.loadFromDefaultSources()));\n+      BatchSpanProcessor spanProcessor =\n+          BatchSpanProcessor.newBuilder(spanExporter)\n+              .readEnvironmentVariables()\n+              .readSystemProperties()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk2MTIxNQ=="}, "originalCommit": {"oid": "c3f74c1672d9b5be1b7639382355527712357700"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 463, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}