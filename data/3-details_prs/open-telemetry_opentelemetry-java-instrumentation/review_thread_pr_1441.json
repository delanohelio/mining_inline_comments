{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTc1MzE0", "number": 1441, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNzowOFrOEwtHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDozMVrOEyCK4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA2MjQ3OnYy", "diffSide": "LEFT", "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jedis/v3_0/JedisInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozNzowOFrOHmbeAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo1NTo0NVrOHmgU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1Nzk4Ng==", "bodyText": "Why this is removed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510057986", "createdAt": "2020-10-22T10:37:08Z", "author": {"login": "iNikem"}, "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -59,14 +63,10 @@ public JedisInstrumentation() {\n     public static void onEnter(\n         @Advice.This Connection connection,\n         @Advice.Argument(0) ProtocolCommand command,\n+        @Advice.Argument(1) byte[][] args,\n         @Advice.Local(\"otelSpan\") Span span,\n         @Advice.Local(\"otelScope\") Scope scope) {\n-      int callDepth = CallDepthThreadLocalMap.incrementCallDepth(Connection.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNzU1Nw==", "bodyText": "It's no longer needed - I changed the method matcher so that exactly one method matches; previously there were 2 or 3 methods that got matched.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510137557", "createdAt": "2020-10-22T12:55:45Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -59,14 +63,10 @@ public JedisInstrumentation() {\n     public static void onEnter(\n         @Advice.This Connection connection,\n         @Advice.Argument(0) ProtocolCommand command,\n+        @Advice.Argument(1) byte[][] args,\n         @Advice.Local(\"otelSpan\") Span span,\n         @Advice.Local(\"otelScope\") Scope scope) {\n-      int callDepth = CallDepthThreadLocalMap.incrementCallDepth(Connection.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1Nzk4Ng=="}, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTA3MDQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jedis/jedis-3.0/src/test/groovy/Jedis30ClientTest.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDozOTozM1rOHmbi1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowMVrOHoVsSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1OTIyMQ==", "bodyText": "I am not sure about this. foo here is cache key, right? Thus its cardinality is high. Thousands and millions potentially. Semantic convention says that span name should be low-cardinality value. select * from table_name is Ok span name, but here in Redis having cache key as part of the name - I am not sure.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510059221", "createdAt": "2020-10-22T10:39:33Z", "author": {"login": "iNikem"}, "path": "instrumentation/jedis/jedis-3.0/src/test/groovy/Jedis30ClientTest.groovy", "diffHunk": "@@ -76,29 +76,29 @@ class Jedis30ClientTest extends AgentTestRunner {\n     assertTraces(2) {\n       trace(0, 1) {\n         span(0) {\n-          name \"SET\"\n+          name \"SET foo ?\"\n           kind CLIENT\n           attributes {\n-            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"$SemanticAttributes.DB_SYSTEM.key\" \"redis\"\n+            \"$SemanticAttributes.DB_CONNECTION_STRING.key\" \"localhost:$port\"\n+            \"$SemanticAttributes.DB_STATEMENT.key\" \"SET foo ?\"\n+            \"$SemanticAttributes.NET_PEER_IP.key\" \"127.0.0.1\"\n+            \"$SemanticAttributes.NET_PEER_NAME.key\" \"localhost\"\n+            \"$SemanticAttributes.NET_PEER_PORT.key\" port\n           }\n         }\n       }\n       trace(1, 1) {\n         span(0) {\n-          name \"GET\"\n+          name \"GET foo\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzOTU3Mg==", "bodyText": "Hmm, that's true. Lettuce 5.1 uses just the command name as span name, how about making all other Redis instrumentations do the same? I think it matches the spec:\n\nThe span name SHOULD be set to a low cardinality value representing the statement executed on the database. It may be a stored procedure name (without arguments), SQL statement without variable arguments, operation name, etc.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510139572", "createdAt": "2020-10-22T12:58:36Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jedis/jedis-3.0/src/test/groovy/Jedis30ClientTest.groovy", "diffHunk": "@@ -76,29 +76,29 @@ class Jedis30ClientTest extends AgentTestRunner {\n     assertTraces(2) {\n       trace(0, 1) {\n         span(0) {\n-          name \"SET\"\n+          name \"SET foo ?\"\n           kind CLIENT\n           attributes {\n-            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"$SemanticAttributes.DB_SYSTEM.key\" \"redis\"\n+            \"$SemanticAttributes.DB_CONNECTION_STRING.key\" \"localhost:$port\"\n+            \"$SemanticAttributes.DB_STATEMENT.key\" \"SET foo ?\"\n+            \"$SemanticAttributes.NET_PEER_IP.key\" \"127.0.0.1\"\n+            \"$SemanticAttributes.NET_PEER_NAME.key\" \"localhost\"\n+            \"$SemanticAttributes.NET_PEER_PORT.key\" port\n           }\n         }\n       }\n       trace(1, 1) {\n         span(0) {\n-          name \"GET\"\n+          name \"GET foo\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1OTIyMQ=="}, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1MjAxMw==", "bodyText": "Yes, just command name seems good.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510152013", "createdAt": "2020-10-22T13:15:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/jedis/jedis-3.0/src/test/groovy/Jedis30ClientTest.groovy", "diffHunk": "@@ -76,29 +76,29 @@ class Jedis30ClientTest extends AgentTestRunner {\n     assertTraces(2) {\n       trace(0, 1) {\n         span(0) {\n-          name \"SET\"\n+          name \"SET foo ?\"\n           kind CLIENT\n           attributes {\n-            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"$SemanticAttributes.DB_SYSTEM.key\" \"redis\"\n+            \"$SemanticAttributes.DB_CONNECTION_STRING.key\" \"localhost:$port\"\n+            \"$SemanticAttributes.DB_STATEMENT.key\" \"SET foo ?\"\n+            \"$SemanticAttributes.NET_PEER_IP.key\" \"127.0.0.1\"\n+            \"$SemanticAttributes.NET_PEER_NAME.key\" \"localhost\"\n+            \"$SemanticAttributes.NET_PEER_PORT.key\" port\n           }\n         }\n       }\n       trace(1, 1) {\n         span(0) {\n-          name \"GET\"\n+          name \"GET foo\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1OTIyMQ=="}, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDQ4OA==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r512060488", "createdAt": "2020-10-26T15:41:01Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jedis/jedis-3.0/src/test/groovy/Jedis30ClientTest.groovy", "diffHunk": "@@ -76,29 +76,29 @@ class Jedis30ClientTest extends AgentTestRunner {\n     assertTraces(2) {\n       trace(0, 1) {\n         span(0) {\n-          name \"SET\"\n+          name \"SET foo ?\"\n           kind CLIENT\n           attributes {\n-            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"$SemanticAttributes.DB_SYSTEM.key\" \"redis\"\n+            \"$SemanticAttributes.DB_CONNECTION_STRING.key\" \"localhost:$port\"\n+            \"$SemanticAttributes.DB_STATEMENT.key\" \"SET foo ?\"\n+            \"$SemanticAttributes.NET_PEER_IP.key\" \"127.0.0.1\"\n+            \"$SemanticAttributes.NET_PEER_NAME.key\" \"localhost\"\n+            \"$SemanticAttributes.NET_PEER_PORT.key\" port\n           }\n         }\n       }\n       trace(1, 1) {\n         span(0) {\n-          name \"GET\"\n+          name \"GET foo\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA1OTIyMQ=="}, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTEyNDI0OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/redisson/RedissonClientTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMDo1NDozNlrOHmcDeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTo0MTowNVrOHoVsfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2NzU3OA==", "bodyText": "Can args be List<Object>? This would eliminate this stream and thus extra allocations.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r510067578", "createdAt": "2020-10-22T10:54:36Z", "author": {"login": "iNikem"}, "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/redisson/RedissonClientTracer.java", "diffHunk": "@@ -24,24 +28,33 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(Object args) {\n+  protected String normalizeQuery(Object command) {\n     // get command\n-    if (args instanceof CommandsData) {\n-      List<CommandData<?, ?>> commands = ((CommandsData) args).getCommands();\n+    if (command instanceof CommandsData) {\n+      List<CommandData<?, ?>> commands = ((CommandsData) command).getCommands();\n       StringBuilder commandStrings = new StringBuilder();\n-      for (CommandData commandData : commands) {\n-        commandStrings.append(commandData.getCommand().getName()).append(\";\");\n+      for (CommandData<?, ?> commandData : commands) {\n+        commandStrings.append(normalizeSingleCommand(commandData)).append(\";\");\n       }\n       if (commandStrings.length() > 0) {\n         commandStrings.deleteCharAt(commandStrings.length() - 1);\n       }\n       return commandStrings.toString();\n-    } else if (args instanceof CommandData) {\n-      return ((CommandData) args).getCommand().getName();\n+    } else if (command instanceof CommandData) {\n+      return normalizeSingleCommand((CommandData<?, ?>) command);\n     }\n     return \"Redis Command\";\n   }\n \n+  private static String normalizeSingleCommand(CommandData<?, ?> command) {\n+    List<String> args = new ArrayList<>();\n+    if (command.getCommand().getSubName() != null) {\n+      args.add(command.getCommand().getSubName());\n+    }\n+    args.addAll(Stream.of(command.getParams()).map(String::valueOf).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MDU0Mw==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r512060543", "createdAt": "2020-10-26T15:41:05Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/javaagent/instrumentation/redisson/RedissonClientTracer.java", "diffHunk": "@@ -24,24 +28,33 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(Object args) {\n+  protected String normalizeQuery(Object command) {\n     // get command\n-    if (args instanceof CommandsData) {\n-      List<CommandData<?, ?>> commands = ((CommandsData) args).getCommands();\n+    if (command instanceof CommandsData) {\n+      List<CommandData<?, ?>> commands = ((CommandsData) command).getCommands();\n       StringBuilder commandStrings = new StringBuilder();\n-      for (CommandData commandData : commands) {\n-        commandStrings.append(commandData.getCommand().getName()).append(\";\");\n+      for (CommandData<?, ?> commandData : commands) {\n+        commandStrings.append(normalizeSingleCommand(commandData)).append(\";\");\n       }\n       if (commandStrings.length() > 0) {\n         commandStrings.deleteCharAt(commandStrings.length() - 1);\n       }\n       return commandStrings.toString();\n-    } else if (args instanceof CommandData) {\n-      return ((CommandData) args).getCommand().getName();\n+    } else if (command instanceof CommandData) {\n+      return normalizeSingleCommand((CommandData<?, ?>) command);\n     }\n     return \"Redis Command\";\n   }\n \n+  private static String normalizeSingleCommand(CommandData<?, ?> command) {\n+    List<String> args = new ArrayList<>();\n+    if (command.getCommand().getSubName() != null) {\n+      args.add(command.getCommand().getSubName());\n+    }\n+    args.addAll(Stream.of(command.getParams()).map(String::valueOf).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2NzU3OA=="}, "originalCommit": {"oid": "270b7cc11876285f433d04744ece70af6a43c826"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk5ODA4OnYy", "diffSide": "RIGHT", "path": "instrumentation/jedis/jedis-1.4/src/main/java/io/opentelemetry/javaagent/instrumentation/jedis/v1_4/JedisInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDozMVrOHodCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMDozMVrOHodCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDgzNA==", "bodyText": "can we extract constant for new byte[0][] to avoid allocating each time?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1441#discussion_r512180834", "createdAt": "2020-10-26T18:30:31Z", "author": {"login": "trask"}, "path": "instrumentation/jedis/jedis-1.4/src/main/java/io/opentelemetry/javaagent/instrumentation/jedis/v1_4/JedisInstrumentation.java", "diffHunk": "@@ -47,34 +50,81 @@ public JedisInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      packageName + \".JedisClientTracer\",\n+      packageName + \".JedisClientTracer$CommandWithArgs\", packageName + \".JedisClientTracer\",\n     };\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n+    // FIXME: This instrumentation only incorporates sending the command, not processing the result.\n+    Map<ElementMatcher.Junction<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n         isMethod()\n             .and(named(\"sendCommand\"))\n+            .and(takesArguments(1))\n             .and(takesArgument(0, named(\"redis.clients.jedis.Protocol$Command\"))),\n-        JedisInstrumentation.class.getName() + \"$JedisAdvice\");\n-    // FIXME: This instrumentation only incorporates sending the command, not processing the result.\n+        JedisInstrumentation.class.getName() + \"$JedisNoArgsAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"sendCommand\"))\n+            .and(takesArguments(2))\n+            .and(takesArgument(0, named(\"redis.clients.jedis.Protocol$Command\")))\n+            .and(takesArgument(1, is(byte[][].class))),\n+        JedisInstrumentation.class.getName() + \"$JedisArgsAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class JedisNoArgsAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.This Connection connection,\n+        @Advice.Argument(0) Command command,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      int callDepth = CallDepthThreadLocalMap.incrementCallDepth(Connection.class);\n+      if (callDepth > 0) {\n+        return;\n+      }\n+\n+      span = TRACER.startSpan(connection, new CommandWithArgs(command, new byte[0][]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdde6c6a7ffc8b5d65d43c4d2aad86042ff5f894"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}