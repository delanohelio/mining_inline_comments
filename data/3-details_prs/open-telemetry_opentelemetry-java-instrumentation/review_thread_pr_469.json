{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjU0Mjkz", "number": 469, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxMDo1OFrOEB4ptQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDo1MFrOEDEb7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDEyMjEzOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxMDo1OFrOGeAVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNjoyMToxNlrOGfhweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ==", "bodyText": "I think I'd keep SpanWithScope out of this this new API, and have HttpServerTracer return and work only on spans.\nSpanWithScope is primarily an auto-instrumentation detail to make it easier to pass them both between @OnMethodEnter and @OnMethodExit (in the future we could potentially get rid of it altogether using an extra @Local bytebuddy parameter, reducing memory allocations).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434115945", "createdAt": "2020-06-02T19:10:58Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2MzUzMg==", "bodyText": "I see your point, but don't know how do that. Take a look at line 73. This method currently both returns newly created span (or null) and new scope. And that scope incapsulates a span which may be different from the returned value. If we don't need this \"rescoping\" then things become easier.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434463532", "createdAt": "2020-06-03T10:20:37Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MzA1Mw==", "bodyText": "Maybe this rescoping should happen in the instrumentation that needs it? I don't think the rescoping is applicable to most of the http server instrumentation anyways?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434773053", "createdAt": "2020-06-03T18:33:17Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NDAxNA==", "bodyText": "I have put this rescoping here because it looks like generic concern to me. I don't see how this can be instrumentation-specific.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434774014", "createdAt": "2020-06-03T18:34:53Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NTc1OA==", "bodyText": "most of the http server instrumentations don't need this rescoping", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434775758", "createdAt": "2020-06-03T18:38:10Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MTA0NA==", "bodyText": "How do you decide that? I would think that all server instrumentations need that, why not?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434791044", "createdAt": "2020-06-03T19:06:33Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NzUxMA==", "bodyText": "E.g. in case of async servlet request processing we create span for incoming request in one thread, but actual request continues processing happens in another thread.\nDepending on servlet container implementation, this processing may again arrive into this method.\nE.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n\nOther http servers don't do this weird thing of calling the same entrypoint for a second time from another thread", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434797510", "createdAt": "2020-06-03T19:18:43Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0Mjg4Mg==", "bodyText": "Current comment brings Jetty example only because I have personally seen this effect in Jetty. I have currently no idea if other containers can lead to the same effect. In master this rescoping logic lives in Servlet3Advice, which is servlet-container agnostic. I can move rescoping back there to preserve the current status quo.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r435042882", "createdAt": "2020-06-04T07:20:16Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0ODgxMw==", "bodyText": "But coming back to you original request in this thread. Do you propose that tracers should only concern themselves with spans and not scopes? For me managing scope (aka \"what is the current span\") is a cross-cutting concern that we should, ideally, handle centrally. And not in every single instrumentation. If you don't want to do it here, then what common code will handle #465 ? I thought this tracer is a good place for that.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r435048813", "createdAt": "2020-06-04T07:30:56Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5NTE2Mg==", "bodyText": "My current thoughts:\n\nHave HttpServerTracer.startSpan() just create a new span (no conditional logic whether to create it or not, and no attaching to scope)\nHave a separate method that we call beforehand: HttpServerTracer.shouldCreateSpan(...) --> boolean, which can check the SERVER attribute in the current context\nHave another method that we call afterwards: HttpServerTracer.withSpan(Span) --> Scope, which can set the span in the SERVER attribute and attach the scope\nYa, let's leave that rescoping logic only in Servlet3Advice, I don't think it's needed anywhere else\n\nSome additional background:\n\nI don't particularly like SpanWithScope, it was basically just a workaround for passing both of those objects between @OnMethodEnter and @OnMethodExit, and at some point I'd like to get rid of SpanWithScope, instead adding a ByteBuddy @Local parameter to carry Span and Scope separately between @OnMethodEnter and @OnMethodExit\nI like being explicit about Scope/Context, and think it's ok to have a couple extra method calls to keep this more explicit", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r435695162", "createdAt": "2020-06-05T05:19:24Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcxMjEyMg==", "bodyText": "Your suggestion looks good, I will try it. But it defeats one of my goals: to remove \"constant call chains\", where every instrumentation has to call exact same methods in exact same sequence.\nBut I will try first removing rescoping and will see how code will look like then.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r435712122", "createdAt": "2020-06-05T06:21:16Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNTk0NQ=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE0NTE0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNjo0MlrOGeAjSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo0NjozOFrOGeo48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTQ5Ng==", "bodyText": "I think this code is correct, short of checking response.isCommitted().\nFrom the servlet spec:\n\nIf the exception isn't caught and handled, and the response hasn\u2019t been committed, the status code MUST be set to 500", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434119496", "createdAt": "2020-06-02T19:16:42Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {\n+    final Span existingSpan = getAttachedSpan(request);\n+    if (existingSpan != null) {\n+      /*\n+      Given request already has a span associated with it.\n+      As there should not be nested spans of kind SERVER, we should NOT create a new span here.\n+\n+      But it may happen that there is no span in current Context or it is from a different trace.\n+      E.g. in case of async servlet request processing we create span for incoming request in one thread,\n+      but actual request continues processing happens in another thread.\n+      Depending on servlet container implementation, this processing may again arrive into this method.\n+      E.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n+\n+      In this case we have to put the span from the request into current context before continuing.\n+      */\n+      final boolean spanContextWasLost = !sameTrace(tracer.getCurrentSpan(), existingSpan);\n+      if (spanContextWasLost) {\n+        // Put span from request attribute into current context.\n+        // We did not create a new span here, so return null instead\n+        return new SpanWithScope(null, currentContextWith(existingSpan));\n+      } else {\n+        // We are inside nested servlet/filter, don't create new span\n+        return null;\n+      }\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return new SpanWithScope(span, currentContextWith(span));\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  private boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  // TODO use semantic attributes\n+\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachedSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+\n+  public void end(SpanWithScope spanWithScope, int responseCode) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(\n+      SpanWithScope spanWithScope, Throwable throwable, int responseStatus) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NDA1Mw==", "bodyText": "But we don't have response here any more :) By your own suggestion, we now only have response status code :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434464053", "createdAt": "2020-06-03T10:21:34Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {\n+    final Span existingSpan = getAttachedSpan(request);\n+    if (existingSpan != null) {\n+      /*\n+      Given request already has a span associated with it.\n+      As there should not be nested spans of kind SERVER, we should NOT create a new span here.\n+\n+      But it may happen that there is no span in current Context or it is from a different trace.\n+      E.g. in case of async servlet request processing we create span for incoming request in one thread,\n+      but actual request continues processing happens in another thread.\n+      Depending on servlet container implementation, this processing may again arrive into this method.\n+      E.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n+\n+      In this case we have to put the span from the request into current context before continuing.\n+      */\n+      final boolean spanContextWasLost = !sameTrace(tracer.getCurrentSpan(), existingSpan);\n+      if (spanContextWasLost) {\n+        // Put span from request attribute into current context.\n+        // We did not create a new span here, so return null instead\n+        return new SpanWithScope(null, currentContextWith(existingSpan));\n+      } else {\n+        // We are inside nested servlet/filter, don't create new span\n+        return null;\n+      }\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return new SpanWithScope(span, currentContextWith(span));\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  private boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  // TODO use semantic attributes\n+\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachedSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+\n+  public void end(SpanWithScope spanWithScope, int responseCode) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(\n+      SpanWithScope spanWithScope, Throwable throwable, int responseStatus) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTQ5Ng=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2OTUxMw==", "bodyText": "Good point, since this behavior (setting status to 500 if response is not committed) is specific to the servlet instrumentation, maybe we should pull this out into the caller?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434769513", "createdAt": "2020-06-03T18:27:04Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {\n+    final Span existingSpan = getAttachedSpan(request);\n+    if (existingSpan != null) {\n+      /*\n+      Given request already has a span associated with it.\n+      As there should not be nested spans of kind SERVER, we should NOT create a new span here.\n+\n+      But it may happen that there is no span in current Context or it is from a different trace.\n+      E.g. in case of async servlet request processing we create span for incoming request in one thread,\n+      but actual request continues processing happens in another thread.\n+      Depending on servlet container implementation, this processing may again arrive into this method.\n+      E.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n+\n+      In this case we have to put the span from the request into current context before continuing.\n+      */\n+      final boolean spanContextWasLost = !sameTrace(tracer.getCurrentSpan(), existingSpan);\n+      if (spanContextWasLost) {\n+        // Put span from request attribute into current context.\n+        // We did not create a new span here, so return null instead\n+        return new SpanWithScope(null, currentContextWith(existingSpan));\n+      } else {\n+        // We are inside nested servlet/filter, don't create new span\n+        return null;\n+      }\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return new SpanWithScope(span, currentContextWith(span));\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  private boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  // TODO use semantic attributes\n+\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachedSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+\n+  public void end(SpanWithScope spanWithScope, int responseCode) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(\n+      SpanWithScope spanWithScope, Throwable throwable, int responseStatus) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTQ5Ng=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NDc5OA==", "bodyText": "But then we have to bring back that ResponseWithStatus because in Servlet 2 you cannot get response code from HttpResponse object.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434774798", "createdAt": "2020-06-03T18:36:17Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {\n+    final Span existingSpan = getAttachedSpan(request);\n+    if (existingSpan != null) {\n+      /*\n+      Given request already has a span associated with it.\n+      As there should not be nested spans of kind SERVER, we should NOT create a new span here.\n+\n+      But it may happen that there is no span in current Context or it is from a different trace.\n+      E.g. in case of async servlet request processing we create span for incoming request in one thread,\n+      but actual request continues processing happens in another thread.\n+      Depending on servlet container implementation, this processing may again arrive into this method.\n+      E.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n+\n+      In this case we have to put the span from the request into current context before continuing.\n+      */\n+      final boolean spanContextWasLost = !sameTrace(tracer.getCurrentSpan(), existingSpan);\n+      if (spanContextWasLost) {\n+        // Put span from request attribute into current context.\n+        // We did not create a new span here, so return null instead\n+        return new SpanWithScope(null, currentContextWith(existingSpan));\n+      } else {\n+        // We are inside nested servlet/filter, don't create new span\n+        return null;\n+      }\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return new SpanWithScope(span, currentContextWith(span));\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  private boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  // TODO use semantic attributes\n+\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachedSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+\n+  public void end(SpanWithScope spanWithScope, int responseCode) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(\n+      SpanWithScope spanWithScope, Throwable throwable, int responseStatus) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTQ5Ng=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDQwMQ==", "bodyText": "See https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469/files#r434780039", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434780401", "createdAt": "2020-06-03T18:46:38Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public SpanWithScope startSpan(REQUEST request, Method origin, String originType) {\n+    final Span existingSpan = getAttachedSpan(request);\n+    if (existingSpan != null) {\n+      /*\n+      Given request already has a span associated with it.\n+      As there should not be nested spans of kind SERVER, we should NOT create a new span here.\n+\n+      But it may happen that there is no span in current Context or it is from a different trace.\n+      E.g. in case of async servlet request processing we create span for incoming request in one thread,\n+      but actual request continues processing happens in another thread.\n+      Depending on servlet container implementation, this processing may again arrive into this method.\n+      E.g. Jetty handles async requests in a way that calls HttpServlet.service method twice.\n+\n+      In this case we have to put the span from the request into current context before continuing.\n+      */\n+      final boolean spanContextWasLost = !sameTrace(tracer.getCurrentSpan(), existingSpan);\n+      if (spanContextWasLost) {\n+        // Put span from request attribute into current context.\n+        // We did not create a new span here, so return null instead\n+        return new SpanWithScope(null, currentContextWith(existingSpan));\n+      } else {\n+        // We are inside nested servlet/filter, don't create new span\n+        return null;\n+      }\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return new SpanWithScope(span, currentContextWith(span));\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  private boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  // TODO use semantic attributes\n+\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachedSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+\n+  public void end(SpanWithScope spanWithScope, int responseCode) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(\n+      SpanWithScope spanWithScope, Throwable throwable, int responseStatus) {\n+    if (spanWithScope == null) {\n+      return;\n+    }\n+\n+    final Span span = spanWithScope.getSpan();\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    spanWithScope.closeScope();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTQ5Ng=="}, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE0NzE0OnYy", "diffSide": "RIGHT", "path": "gradle/instrumentation.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNzowOFrOGeAkZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNzowOFrOGeAkZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExOTc4Mw==", "bodyText": "undo this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434119783", "createdAt": "2020-06-02T19:17:08Z", "author": {"login": "trask"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -13,9 +13,9 @@ byteBuddy {\n \n apply from: \"${rootDir}/gradle/java.gradle\"\n \n-tasks.withType(Test) {\n-  forkEvery = 1\n-}\n+//tasks.withType(Test) {\n+//  forkEvery = 1\n+//}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE2Mjg0OnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/auto/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyMTozMlrOGeAt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyMTozMlrOGeAt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMjIwNg==", "bodyText": "This is for adding traceId and spanId to access logs, so you can correlate access logs with traces (e.g. https://tomcat.apache.org/tomcat-8.0-doc/config/valve.html#Access_Log_Valve/Attributes).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434122206", "createdAt": "2020-06-02T19:21:32Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/auto/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.servlet;\n+\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.Span;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.Principal;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class ServletHttpServerTracer extends HttpServerTracer<HttpServletRequest> {\n+\n+  protected String getVersion() {\n+    return null;\n+  }\n+\n+  @Override\n+  // TODO this violates convention\n+  protected URI url(HttpServletRequest httpServletRequest) throws URISyntaxException {\n+    return new URI(\n+        httpServletRequest.getScheme(),\n+        null,\n+        httpServletRequest.getServerName(),\n+        httpServletRequest.getServerPort(),\n+        httpServletRequest.getRequestURI(),\n+        httpServletRequest.getQueryString(),\n+        null);\n+  }\n+\n+  @Override\n+  protected Span getAttachedSpan(HttpServletRequest request) {\n+    Object span = request.getAttribute(SPAN_ATTRIBUTE);\n+    return span instanceof Span ? (Span) span : null;\n+  }\n+\n+  @Override\n+  protected void attachedSpanToRequest(Span span, HttpServletRequest request) {\n+    request.setAttribute(SPAN_ATTRIBUTE, span);\n+  }\n+\n+  @Override\n+  protected Integer peerPort(HttpServletRequest request) {\n+    // HttpServletResponse doesn't have accessor for remote port prior to Servlet spec 3.0\n+    return null;\n+  }\n+\n+  @Override\n+  protected String peerHostIP(HttpServletRequest request) {\n+    return request.getRemoteAddr();\n+  }\n+\n+  @Override\n+  protected String method(HttpServletRequest request) {\n+    return request.getMethod();\n+  }\n+\n+  public void onRequest(Span span, HttpServletRequest request) {\n+    // TODO why?\n+    request.setAttribute(\"traceId\", span.getContext().getTraceId().toLowerBase16());\n+    request.setAttribute(\"spanId\", span.getContext().getSpanId().toLowerBase16());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE4ODQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODo1NFrOGeA9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToyODo1NFrOGeA9kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNjIyNA==", "bodyText": "I think it's incorrect that we are not setting \"user.principal\" on the current span here, but it's not related to this PR (which just preserves existing behavior), so I opened a separate issue to track #470", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434126224", "createdAt": "2020-06-02T19:28:54Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDE5NzE4OnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/TagSettingAsyncListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMToyN1rOGeBCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTozMToyN1rOGeBCug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyNzU0Ng==", "bodyText": "to save on memory:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Servlet3HttpServerTracer servletHttpServerTracer;\n          \n          \n            \n              private static final Servlet3HttpServerTracer servletHttpServerTracer = new Servlet3HttpServerTracer();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434127546", "createdAt": "2020-06-02T19:31:27Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/TagSettingAsyncListener.java", "diffHunk": "@@ -15,57 +15,48 @@\n  */\n package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n \n-import static io.opentelemetry.auto.instrumentation.servlet.v3_0.Servlet3Decorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.Tags;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Status;\n import java.util.concurrent.atomic.AtomicBoolean;\n import javax.servlet.AsyncEvent;\n import javax.servlet.AsyncListener;\n import javax.servlet.http.HttpServletResponse;\n \n public class TagSettingAsyncListener implements AsyncListener {\n-  private final AtomicBoolean activated;\n+  private final AtomicBoolean responseHandled;\n   private final Span span;\n+  private final Servlet3HttpServerTracer servletHttpServerTracer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69e63c5147d526c6b32ed7776d28b90f4fc3126"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODIzODkzOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo0NTo1OFrOGeo3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyNDoyOFrOGe5Dbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ==", "bodyText": "something like this is what i was trying to say\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TRACER.endExceptionally(spanWithScope, throwable, responseStatus);\n          \n          \n            \n                    if (!response.isCommitted()) {\n          \n          \n            \n                      responseStatus = 500;\n          \n          \n            \n                    }\n          \n          \n            \n                    TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434780039", "createdAt": "2020-06-03T18:45:58Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNjM2OQ==", "bodyText": "Do you suggest to add this condition check to all servlet instrumentations who calls this method? This means Servlet2Advice, Servlet3Advice and TagSettingAsyncListener. Avoiding such duplication was the original goal of this PR :)\nIn addition, should we check documentation for all other http servers/frameworks, if they require the same logic?\nNow thinking about this... Your citation from servlet spec says about changing status code of the servlet response. We don't do this here and did not do that before. So this current logic will report response status code in Span which is different from the one that client got in response. This was my original concern and why I think this is wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434806369", "createdAt": "2020-06-03T19:36:02Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ=="}, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg1OA==", "bodyText": "Do you suggest to add this condition check to all servlet instrumentations who calls this method? This means Servlet2Advice, Servlet3Advice and TagSettingAsyncListener. Avoiding such duplication was the original goal of this PR :)\n\nOh yes \ud83d\ude04. How about a subclass of HttpServerTracer that handles servlet-specific stuff?\n\nNow thinking about this... Your citation from servlet spec says about changing status code of the servlet response. We don't do this here and did not do that before. So this current logic will report response status code in Span which is different from the one that client got in response. This was my original concern and why I think this is wrong.\n\nAdding this logic (checking isCommitted) should make the response code in the Span align with the response code received by the client, no?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434811858", "createdAt": "2020-06-03T19:43:27Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ=="}, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMzU2Nw==", "bodyText": "Adding this logic (checking isCommitted) should make the response code in the Span align with the response code received by the client, no?\n\nI think not. We read status code from the response. Then if that status code is not 200 and exception was thrown, then we set http.status_code attribute value to 500. But we don't change response status code in HttpResponse object. So client will still get 200. Or am I wrong?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434813567", "createdAt": "2020-06-03T19:46:43Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ=="}, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzE1OA==", "bodyText": "Ah, no, this part of the servlet spec is defining how servlet containers behave:\n\nIf the exception isn't caught and handled, and the response hasn\u2019t been committed, the status code MUST be set to 500\n\nSo if an exception is thrown, and the response has not been committed, the servlet container will change the response code to 500 and the client will get 500.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r434817158", "createdAt": "2020-06-03T19:54:01Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ=="}, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0NTIzMA==", "bodyText": "How about a subclass of HttpServerTracer that handles servlet-specific stuff?\n\nI already have one in this PR, ServletHttpServerTracer. But it still means that I have to bring back ResponseWithStatus", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r435045230", "createdAt": "2020-06-04T07:24:28Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/request-2.3/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v2_3/Servlet2Advice.java", "diffHunk": "@@ -90,40 +55,17 @@ public static void stopSpan(\n       @Advice.Argument(1) final ServletResponse response,\n       @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable) {\n-    // Set user.principal regardless of who created this span.\n-    final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-    if (spanAttr instanceof Span && request instanceof HttpServletRequest) {\n-      final Principal principal = ((HttpServletRequest) request).getUserPrincipal();\n-      if (principal != null) {\n-        ((Span) spanAttr).setAttribute(MoreTags.USER_NAME, principal.getName());\n-      }\n-    }\n+    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n+      TRACER.setPrincipal((HttpServletRequest) request);\n \n-    if (spanWithScope == null) {\n-      return;\n-    }\n-\n-    final Span span = spanWithScope.getSpan();\n-\n-    if (response instanceof HttpServletResponse) {\n-      DECORATE.onResponse(\n-          span, InstrumentationContext.get(ServletResponse.class, Integer.class).get(response));\n-    } else {\n-      DECORATE.onResponse(span, null);\n-    }\n+      Integer responseStatus =\n+          InstrumentationContext.get(ServletResponse.class, Integer.class).get(response);\n \n-    if (throwable != null) {\n-      if (response instanceof HttpServletResponse\n-          && InstrumentationContext.get(ServletResponse.class, Integer.class).get(response)\n-              == HttpServletResponse.SC_OK) {\n-        // exception was thrown but status code wasn't set\n-        span.setAttribute(Tags.HTTP_STATUS, 500);\n-        span.setStatus(Status.UNKNOWN);\n+      if (throwable == null) {\n+        TRACER.end(spanWithScope, responseStatus);\n+      } else {\n+        TRACER.endExceptionally(spanWithScope, throwable, responseStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4MDAzOQ=="}, "originalCommit": {"oid": "8f72676cd15cfe623406f69fe05d6b64280bd830"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjM3OTE3OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxODo1N1rOGf4zmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNDoyOVrOGf65NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4OTc1NQ==", "bodyText": "is this comment still applicable after latest changes?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // TODO should end methods remove SPAN attribute from request as well?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436089755", "createdAt": "2020-06-05T18:18:57Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d95d77bb2d7bc8076c520dd4e0ec1369355d08"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMzk1Nw==", "bodyText": "I think yes. As long as there is attachSpanToRequest and #465 is not implemented, this question remains.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436123957", "createdAt": "2020-06-05T19:34:29Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4OTc1NQ=="}, "originalCommit": {"oid": "62d95d77bb2d7bc8076c520dd4e0ec1369355d08"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQzOTkwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozOToxMlrOGf5Z0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNDo1N1rOGf66AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTUzOA==", "bodyText": "looks unused now\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean sameTrace(Span oneSpan, Span otherSpan) {\n          \n          \n            \n                return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436099538", "createdAt": "2020-06-05T18:39:12Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDE2MA==", "bodyText": "It is used from io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Advice.java:61", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436124160", "createdAt": "2020-06-05T19:34:57Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTUzOA=="}, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQ0MzMyOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MDoxNVrOGf5b6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo0MDoxNVrOGf5b6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDA3Mg==", "bodyText": "seems good to be consistent with Tracer name?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Scope newScope(Span span) {\n          \n          \n            \n              public Scope withSpan(Span span) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436100072", "createdAt": "2020-06-05T18:40:15Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjUxNTQ1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1M1rOGf6KQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1M1rOGf6KQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTkzNw==", "bodyText": "similar comment as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void endExceptionally(Span span, Scope scope, Throwable throwable, int responseStatus) {\n          \n          \n            \n                if (scope == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                if (span != null) {\n          \n          \n            \n                  endExceptionally(span, throwable, responseStatus);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                scope.close();\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436111937", "createdAt": "2020-06-05T19:05:53Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(Span span, Scope scope, Throwable throwable, int responseStatus) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    scope.close();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjUxNjg0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNjoyN1rOGf6LNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDoyMjowNlrOGgDBiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMjE4MQ==", "bodyText": "it doesn't looks like this is ever called with null span or null scope\nalso, i think i like calling end(span, responseStatus) directly, and keeping scope.close() an explicit separate action\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void end(Span span, Scope scope, int responseCode) {\n          \n          \n            \n                if (scope == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                if (span != null) {\n          \n          \n            \n                  end(span, responseCode);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                scope.close();\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436112181", "createdAt": "2020-06-05T19:06:27Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNTY0MQ==", "bodyText": "This again will force instrumentation to call several methods on tracer in row. The whole point of these \"semantic/typed tracers\" for me is encapsulating all those steps that are repeated again and again in every instrumentation. I want as few repetitive lines of code in instrumentation classes as possible.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436125641", "createdAt": "2020-06-05T19:38:25Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMjE4MQ=="}, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNzAxOA==", "bodyText": "And it can be called with null span if instrumentation decided not to create new span. Servlet instrumentations do that from time to time.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436127018", "createdAt": "2020-06-05T19:41:49Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMjE4MQ=="}, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NzE2MQ==", "bodyText": "I have moved scope management out of tracer for now. But I have a strong feeling that #465 will want to bring it back :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436257161", "createdAt": "2020-06-06T10:22:06Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMjE4MQ=="}, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjUzNzY2OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDozMFrOGf6Yfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDozMFrOGf6Yfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExNTU4Mw==", "bodyText": "i think we only need this for servlet-ish instrumentations, so maybe provide default so it's more clear subclasses don't need to implement this\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract void attachSpanToRequest(Span span, REQUEST request);\n          \n          \n            \n              protected void attachSpanToRequest(Span span, REQUEST request) {\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436115583", "createdAt": "2020-06-05T19:14:30Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(Span span, Scope scope, Throwable throwable, int responseStatus) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    scope.close();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute\n+      responseStatus = 500;\n+    }\n+    setStatus(span, responseStatus);\n+    onError(span, unwrapThrowable(throwable));\n+    span.end();\n+  }\n+\n+  protected Throwable unwrapThrowable(Throwable throwable) {\n+    return throwable instanceof ExecutionException ? throwable.getCause() : throwable;\n+  }\n+\n+  private <C> SpanContext extract(final C carrier, final HttpTextFormat.Getter<C> getter) {\n+    final Context context =\n+        getPropagators().getHttpTextFormat().extract(Context.current(), carrier, getter);\n+    final Span span = getSpan(context);\n+    return span.getContext();\n+  }\n+\n+  private void setStatus(Span span, int status) {\n+    SemanticAttributes.HTTP_STATUS_CODE.set(span, status);\n+    // TODO status_message\n+    if (Config.get().getHttpServerErrorStatuses().get(status)) {\n+      span.setStatus(Status.UNKNOWN);\n+    }\n+  }\n+\n+  protected abstract Integer peerPort(REQUEST request);\n+\n+  protected abstract String peerHostIP(REQUEST request);\n+\n+  protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract void attachSpanToRequest(Span span, REQUEST request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjUzODcxOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDo1MFrOGf6ZGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToxNDo1MFrOGf6ZGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExNTczNw==", "bodyText": "same comment as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract Span getAttachedSpan(REQUEST request);\n          \n          \n            \n              protected Span getAttachedSpan(REQUEST request) {\n          \n          \n            \n                return null;\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/469#discussion_r436115737", "createdAt": "2020-06-05T19:14:50Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import static io.opentelemetry.OpenTelemetry.getPropagators;\n+import static io.opentelemetry.trace.Span.Kind.SERVER;\n+import static io.opentelemetry.trace.TracingContextUtils.getSpan;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.concurrent.ExecutionException;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// TODO In search for a better home package\n+@Slf4j\n+public abstract class HttpServerTracer<REQUEST> {\n+  public static final String SPAN_ATTRIBUTE = \"io.opentelemetry.auto.span\";\n+\n+  protected final Tracer tracer;\n+\n+  public HttpServerTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public Span startSpan(REQUEST request, Method origin, String originType) {\n+    if (getAttachedSpan(request) != null) {\n+      return null;\n+    }\n+\n+    final Span.Builder builder =\n+        tracer\n+            .spanBuilder(spanNameForMethod(origin))\n+            .setSpanKind(SERVER)\n+            .setParent(extract(request, getGetter()))\n+            // TODO Where span.origin.type is defined?\n+            .setAttribute(\"span.origin.type\", originType);\n+\n+    Span span = builder.startSpan();\n+    onConnection(span, request);\n+    onRequest(span, request);\n+\n+    return span;\n+  }\n+\n+  protected abstract String getVersion();\n+\n+  protected abstract String getInstrumentationName();\n+\n+  protected void onConnection(Span span, REQUEST request) {\n+    SemanticAttributes.NET_PEER_IP.set(span, peerHostIP(request));\n+    final Integer port = peerPort(request);\n+    // Negative or Zero ports might represent an unset/null value for an int type.  Skip setting.\n+    if (port != null && port > 0) {\n+      SemanticAttributes.NET_PEER_PORT.set(span, port);\n+    }\n+  }\n+\n+  // TODO use semantic attributes\n+  protected void onRequest(final Span span, final REQUEST request) {\n+    attachSpanToRequest(span, request);\n+    SemanticAttributes.HTTP_METHOD.set(span, method(request));\n+\n+    // Copy of HttpClientDecorator url handling\n+    try {\n+      final URI url = url(request);\n+      if (url != null) {\n+        final StringBuilder urlBuilder = new StringBuilder();\n+        if (url.getScheme() != null) {\n+          urlBuilder.append(url.getScheme());\n+          urlBuilder.append(\"://\");\n+        }\n+        if (url.getHost() != null) {\n+          urlBuilder.append(url.getHost());\n+          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+            urlBuilder.append(\":\");\n+            urlBuilder.append(url.getPort());\n+          }\n+        }\n+        final String path = url.getPath();\n+        if (path.isEmpty()) {\n+          urlBuilder.append(\"/\");\n+        } else {\n+          urlBuilder.append(path);\n+        }\n+        final String query = url.getQuery();\n+        if (query != null) {\n+          urlBuilder.append(\"?\").append(query);\n+        }\n+        final String fragment = url.getFragment();\n+        if (fragment != null) {\n+          urlBuilder.append(\"#\").append(fragment);\n+        }\n+\n+        span.setAttribute(Tags.HTTP_URL, urlBuilder.toString());\n+\n+        if (Config.get().isHttpServerTagQueryString()) {\n+          span.setAttribute(MoreTags.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreTags.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      }\n+    } catch (final Exception e) {\n+      log.debug(\"Error tagging url\", e);\n+    }\n+    // TODO set resource name from URL.\n+  }\n+\n+  public boolean sameTrace(Span oneSpan, Span otherSpan) {\n+    return oneSpan.getContext().getTraceId().equals(otherSpan.getContext().getTraceId());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  protected String spanNameForMethod(final Method method) {\n+    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given class\n+   * reference. Anonymous classes are named based on their parent.\n+   */\n+  public String spanNameForClass(final Class clazz) {\n+    if (!clazz.isAnonymousClass()) {\n+      return clazz.getSimpleName();\n+    }\n+    String className = clazz.getName();\n+    if (clazz.getPackage() != null) {\n+      final String pkgName = clazz.getPackage().getName();\n+      if (!pkgName.isEmpty()) {\n+        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+      }\n+    }\n+    return className;\n+  }\n+\n+  protected void onError(final Span span, final Throwable throwable) {\n+    addThrowable(span, unwrapThrowable(throwable));\n+  }\n+\n+  // TODO semantic attributes\n+  public static void addThrowable(final Span span, final Throwable throwable) {\n+    span.setAttribute(MoreTags.ERROR_MSG, throwable.getMessage());\n+    span.setAttribute(MoreTags.ERROR_TYPE, throwable.getClass().getName());\n+\n+    final StringWriter errorString = new StringWriter();\n+    throwable.printStackTrace(new PrintWriter(errorString));\n+    span.setAttribute(MoreTags.ERROR_STACK, errorString.toString());\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  public Scope newScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, Scope scope, int responseCode) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      end(span, responseCode);\n+    }\n+\n+    scope.close();\n+  }\n+\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  public void endExceptionally(Span span, Scope scope, Throwable throwable, int responseStatus) {\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    if (span != null) {\n+      endExceptionally(span, throwable, responseStatus);\n+    }\n+\n+    scope.close();\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.\n+      // We must report that response status that was actually sent to end user\n+      // We may change span status, but not http_status attribute\n+      responseStatus = 500;\n+    }\n+    setStatus(span, responseStatus);\n+    onError(span, unwrapThrowable(throwable));\n+    span.end();\n+  }\n+\n+  protected Throwable unwrapThrowable(Throwable throwable) {\n+    return throwable instanceof ExecutionException ? throwable.getCause() : throwable;\n+  }\n+\n+  private <C> SpanContext extract(final C carrier, final HttpTextFormat.Getter<C> getter) {\n+    final Context context =\n+        getPropagators().getHttpTextFormat().extract(Context.current(), carrier, getter);\n+    final Span span = getSpan(context);\n+    return span.getContext();\n+  }\n+\n+  private void setStatus(Span span, int status) {\n+    SemanticAttributes.HTTP_STATUS_CODE.set(span, status);\n+    // TODO status_message\n+    if (Config.get().getHttpServerErrorStatuses().get(status)) {\n+      span.setStatus(Status.UNKNOWN);\n+    }\n+  }\n+\n+  protected abstract Integer peerPort(REQUEST request);\n+\n+  protected abstract String peerHostIP(REQUEST request);\n+\n+  protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n+\n+  protected abstract URI url(REQUEST request) throws URISyntaxException;\n+\n+  protected abstract String method(REQUEST request);\n+\n+  protected abstract void attachSpanToRequest(Span span, REQUEST request);\n+\n+  protected abstract Span getAttachedSpan(REQUEST request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9a8066c178138e6b0ff1c3ed5759750db5e3d7"}, "originalPosition": 260}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 471, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}