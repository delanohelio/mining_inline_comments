{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk1MjM3", "number": 152, "title": "More general class loading instrumentation", "bodyText": "Replacing Tomcat/JBoss/OSGi-specific class loading instrumentation.\nThis has worked well for Glowroot, see glowroot/glowroot@c9783a0.", "createdAt": "2020-02-10T18:51:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152", "merged": true, "mergeCommit": {"oid": "d3f6c87bf14d873e6fec2ec407dcb1623fc57bd1"}, "closed": true, "closedAt": "2020-02-12T20:08:48Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDBttMgH2gAyMzczMjk1MjM3OjdlZDYyYzhjN2EwNTVmYmE0OTlmM2U5YTM4ZTEyYTNhNzlhMTQ1NmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDryBygH2gAyMzczMjk1MjM3OmI5YmU0YzE2ZTMwYmMwNWI5OTgxZmQzOWRkOTMyZWMyNTcwYzM2YmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7ed62c8c7a055fba499f3e9a38e12a3a79a1456c", "committedDate": "2020-02-10T18:47:41Z", "message": "More general class loading instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDQ2MjI2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#pullrequestreview-357046226", "createdAt": "2020-02-11T22:32:26Z", "commit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMjoyNlrOFobmOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNzozN1rOFobu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg==", "bodyText": "Worth excluding the internal classloader or any classloader that we know delegates properly?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377939512", "createdAt": "2020-02-11T22:32:26Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ==", "bodyText": "What is this for?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377940725", "createdAt": "2020-02-11T22:35:06Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {Constants.class.getName()};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"loadClass\"))\n+            .and(\n+                takesArguments(1)\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .or(\n+                        takesArguments(2)\n+                            .and(takesArgument(0, named(\"java.lang.String\")))\n+                            .and(takesArgument(1, named(\"boolean\")))))\n+            .and(isPublic().or(isProtected()))\n+            .and(not(isStatic())),\n+        ClassloadingInstrumentation.class.getName() + \"$LoadClassAdvice\");\n+  }\n+\n+  public static class LoadClassAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng==", "bodyText": "Consider adding a unit test for this project with a regular urlclassloader that doesn't delegate properly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941346", "createdAt": "2020-02-11T22:36:37Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTcyOQ==", "bodyText": "Also, a class comment here explaining the reason for this instrumentation would be a good idea since it might not be obvious to everyone.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941729", "createdAt": "2020-02-11T22:37:37Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6b67fa894296cc3f3ce977809b54822ba9115f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb6b67fa894296cc3f3ce977809b54822ba9115f", "committedDate": "2020-02-12T00:35:37Z", "message": "Merge remote-tracking branch 'upstream/master' into more-general-class-loading-instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "487feb54f407bae3f7ff3fc04264f7a9d0fa2653", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/487feb54f407bae3f7ff3fc04264f7a9d0fa2653", "committedDate": "2020-02-12T00:51:26Z", "message": "Add test against non-delegating URLClassLoader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7d7199e6baa704a925d825e28abb6de954e061", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e7d7199e6baa704a925d825e28abb6de954e061", "committedDate": "2020-02-12T01:00:17Z", "message": "Add class comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad4f9a22eeef6f37f336fe333f8922bfe4474aba", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad4f9a22eeef6f37f336fe333f8922bfe4474aba", "committedDate": "2020-02-12T01:05:18Z", "message": "Exclude java.lang.ClassLoader since it delegates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aec5a841781a0c633f931b422b244d0d887beb5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8aec5a841781a0c633f931b422b244d0d887beb5", "committedDate": "2020-02-12T01:06:21Z", "message": "Merge branch 'master' into more-general-class-loading-instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6a9eb0b81b45f1425b70e452b79cde848dc56502", "committedDate": "2020-02-12T01:27:43Z", "message": "Fix codenarc failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMzMDQ5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#pullrequestreview-357733049", "createdAt": "2020-02-12T19:38:41Z", "commit": {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozODo0MVrOFo7_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozODo0MVrOFo7_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDI2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Some class loaders to do not delegate to their parent, so classes in those class loaders\n          \n          \n            \n             * Some class loaders do not delegate to their parent, so classes in those class loaders", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378470269", "createdAt": "2020-02-12T19:38:41Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -20,6 +20,16 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/*\n+ * Some class loaders to do not delegate to their parent, so classes in those class loaders", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b542fa9fa34d4bceed89fba73255f0bb88f52ab5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b542fa9fa34d4bceed89fba73255f0bb88f52ab5", "committedDate": "2020-02-12T19:46:27Z", "message": "Merge remote-tracking branch 'upstream/master' into more-general-class-loading-instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350c40f71c65bf4daec88a067d79cd4c2ec49ecf", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/350c40f71c65bf4daec88a067d79cd4c2ec49ecf", "committedDate": "2020-02-12T19:47:23Z", "message": "Fix comment wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9be4c16e30bc05b9981fd39dd932ec2570c36bf", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b9be4c16e30bc05b9981fd39dd932ec2570c36bf", "committedDate": "2020-02-12T19:48:25Z", "message": "Exclude AgentClassLoader as well"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3296, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}