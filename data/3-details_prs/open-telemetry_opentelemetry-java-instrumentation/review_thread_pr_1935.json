{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjczOTg0", "number": 1935, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoxOTowMVrOFHAxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzozNDozM1rOFHpyeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODk3MDA3OnYy", "diffSide": "RIGHT", "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoxOTowMVrOIISjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDozNToxNlrOIISybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static String app = System.getenv(\"APP_IMAGE\");\n          \n          \n            \n              private static final String APP_NAME = System.getenv(\"APP_IMAGE\", \"ghcr.io/open-telemetry/java-test-containers:smoke-springboot-jdk8-20201204.400701583\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545563420", "createdAt": "2020-12-18T04:19:01Z", "author": {"login": "anuraaga"}, "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5503986fb91ecab64ab6308a741cc697e2429aaf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzE4Nw==", "bodyText": "Sorry I did not understand this suggestion. System.gentenv() accepts 1 String param right?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545567187", "createdAt": "2020-12-18T04:34:39Z", "author": {"login": "bhautikpip"}, "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA=="}, "originalCommit": {"oid": "5503986fb91ecab64ab6308a741cc697e2429aaf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzM0Mw==", "bodyText": "Oops - sorry System.getenv().getOrDefault", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545567343", "createdAt": "2020-12-18T04:35:16Z", "author": {"login": "anuraaga"}, "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzQyMA=="}, "originalCommit": {"oid": "5503986fb91ecab64ab6308a741cc697e2429aaf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODk3MTE5OnYy", "diffSide": "RIGHT", "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoxOToyNlrOIISjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDoxOToyNlrOIISjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2MzU1OA==", "bodyText": "Can remove these lines with above suggestion", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r545563558", "createdAt": "2020-12-18T04:19:26Z", "author": {"login": "anuraaga"}, "path": "benchmark-e2e/src/main/java/io/opentelemetry/e2ebenchmark/E2EAgentBenchmark.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.e2ebenchmark;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class E2EAgentBenchmark {\n+  private static String app = System.getenv(\"APP_IMAGE\");\n+\n+  private List<GenericContainer<?>> containers;\n+  private static final Logger LOG = LoggerFactory.getLogger(E2EAgentBenchmark.class);\n+\n+  // docker images\n+  private static final DockerImageName APP_IMAGE = DockerImageName.parse(app);\n+  private static final DockerImageName OTLP_COLLECTOR_IMAGE =\n+      DockerImageName.parse(\"otel/opentelemetry-collector-dev:latest\");\n+  private static final DockerImageName WRK_IMAGE = DockerImageName.parse(\"quay.io/dim/wrk:stable\");\n+\n+  @BeforeEach\n+  void setUp() {\n+    containers = new ArrayList<>();\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    containers.forEach(GenericContainer::stop);\n+  }\n+\n+  @Test\n+  void run() throws Exception {\n+    runBenchmark();\n+  }\n+\n+  private void runBenchmark() throws Exception {\n+    if (app == null || app.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5503986fb91ecab64ab6308a741cc697e2429aaf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY5MDE4OnYy", "diffSide": "RIGHT", "path": "benchmark-e2e/src/main/resources/collector-config.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzozNDozM1rOIJLRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDozNDozNFrOIJuDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5Mjg2MA==", "bodyText": "can we leave out the exporter, or is there a no-op exporter? in hopes of reducing the impact of running a local collector on the benchmark", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r546492860", "createdAt": "2020-12-21T03:34:33Z", "author": {"login": "trask"}, "path": "benchmark-e2e/src/main/resources/collector-config.yml", "diffHunk": "@@ -0,0 +1,34 @@\n+receivers:\n+  otlp:\n+    protocols:\n+      grpc:\n+        endpoint: 0.0.0.0:55680\n+\n+exporters:\n+  logging:\n+    loglevel: info\n+\n+processors:\n+  batch:\n+  queued_retry:\n+\n+extensions:\n+  health_check:\n+\n+service:\n+  extensions: health_check\n+  pipelines:\n+    traces:\n+      processors:\n+        - batch\n+      receivers:\n+        - otlp\n+      exporters:\n+        - logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1042e4d225a91105076af5a5cd3e063bdcd46215"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg4ODA2NA==", "bodyText": "I couldn't find no-op exporter in here. Wouldn't leaving out exporter throws some weird exceptions on the terminal? Since we are not exporting any data out from collector.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r546888064", "createdAt": "2020-12-21T19:26:30Z", "author": {"login": "bhautikpip"}, "path": "benchmark-e2e/src/main/resources/collector-config.yml", "diffHunk": "@@ -0,0 +1,34 @@\n+receivers:\n+  otlp:\n+    protocols:\n+      grpc:\n+        endpoint: 0.0.0.0:55680\n+\n+exporters:\n+  logging:\n+    loglevel: info\n+\n+processors:\n+  batch:\n+  queued_retry:\n+\n+extensions:\n+  health_check:\n+\n+service:\n+  extensions: health_check\n+  pipelines:\n+    traces:\n+      processors:\n+        - batch\n+      receivers:\n+        - otlp\n+      exporters:\n+        - logging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5Mjg2MA=="}, "originalCommit": {"oid": "1042e4d225a91105076af5a5cd3e063bdcd46215"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MjcwMQ==", "bodyText": "I haven't tried running collector without any exporters :) But if it throws errors when there's no exporter defined than using logging seems reasonable.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1935#discussion_r547062701", "createdAt": "2020-12-22T04:34:34Z", "author": {"login": "anuraaga"}, "path": "benchmark-e2e/src/main/resources/collector-config.yml", "diffHunk": "@@ -0,0 +1,34 @@\n+receivers:\n+  otlp:\n+    protocols:\n+      grpc:\n+        endpoint: 0.0.0.0:55680\n+\n+exporters:\n+  logging:\n+    loglevel: info\n+\n+processors:\n+  batch:\n+  queued_retry:\n+\n+extensions:\n+  health_check:\n+\n+service:\n+  extensions: health_check\n+  pipelines:\n+    traces:\n+      processors:\n+        - batch\n+      receivers:\n+        - otlp\n+      exporters:\n+        - logging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5Mjg2MA=="}, "originalCommit": {"oid": "1042e4d225a91105076af5a5cd3e063bdcd46215"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4401, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}