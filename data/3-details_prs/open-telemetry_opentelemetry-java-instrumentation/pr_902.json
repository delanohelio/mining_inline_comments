{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzA0MDQ2", "number": 902, "title": "Add @Withspan functionality using spring-aop", "bodyText": "Extend this functionality to spring projects: https://github.com/open-telemetry/opentelemetry-java-instrumentation#configure-a-withspan-annotation.", "createdAt": "2020-08-06T00:01:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902", "merged": true, "mergeCommit": {"oid": "1d80e19812cdaac8f835e40d8488d6b67eb5bc7d"}, "closed": true, "closedAt": "2020-08-08T03:22:31Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8E7jCAH2gAyNDYzNzA0MDQ2OmM0MTNhNDc2M2FhYjkzOTU2YWU3NTg2NDRmOTM3Nzk0YWU1NTA1ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8wW-0gFqTQ2MzcxMzkwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c413a4763aab93956ae758644f937794ae550583", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c413a4763aab93956ae758644f937794ae550583", "committedDate": "2020-08-06T00:46:12Z", "message": "first shot at withspan support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a726ac44294f6e624ad8579427b4316f968c81af", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a726ac44294f6e624ad8579427b4316f968c81af", "committedDate": "2020-08-06T00:46:12Z", "message": "Update spring-starter.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa005c404eb3f6d4dfe92dcf29d2df8fc83c003", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfa005c404eb3f6d4dfe92dcf29d2df8fc83c003", "committedDate": "2020-08-06T00:46:12Z", "message": "with span working version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d078fbaa58ba545bbec0fd42bf34444229f5af7f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d078fbaa58ba545bbec0fd42bf34444229f5af7f", "committedDate": "2020-08-06T00:46:12Z", "message": "clean up with span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ee92815845daa783ae80ed80bfed5025052cfc", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05ee92815845daa783ae80ed80bfed5025052cfc", "committedDate": "2020-08-06T00:46:12Z", "message": "fix property name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e758a8b7f8495b3c9de1a17a0e71d944ede6b122", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e758a8b7f8495b3c9de1a17a0e71d944ede6b122", "committedDate": "2020-08-06T00:46:12Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156500e80fe7202b922c55cfc63da3f08dec4336", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/156500e80fe7202b922c55cfc63da3f08dec4336", "committedDate": "2020-08-06T00:46:12Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b8001f4296a4fd741e0c6e0fdad61657d148c1f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b8001f4296a4fd741e0c6e0fdad61657d148c1f", "committedDate": "2020-08-06T00:01:50Z", "message": "Update spring-boot-autoconfigure.gradle"}, "afterCommit": {"oid": "156500e80fe7202b922c55cfc63da3f08dec4336", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/156500e80fe7202b922c55cfc63da3f08dec4336", "committedDate": "2020-08-06T00:46:12Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572d6296dd67d3239618428cb69a6c13ebd66ba8", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/572d6296dd67d3239618428cb69a6c13ebd66ba8", "committedDate": "2020-08-06T01:22:45Z", "message": "Update WithSpanAspect.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc2b230140e0394a01d0009b98b3ce77a5cd138b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc2b230140e0394a01d0009b98b3ce77a5cd138b", "committedDate": "2020-08-06T01:23:13Z", "message": "Update WithSpanAspect.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTM1ODg4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-462135888", "createdAt": "2020-08-06T01:57:41Z", "commit": {"oid": "fc2b230140e0394a01d0009b98b3ce77a5cd138b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1Nzo0MVrOG8ggvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1Nzo0MVrOG8ggvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String message = t.getMessage();\n          \n          \n            \n                span.addEvent(message);\n          \n          \n            \n                span.setAttribute(\"error\", true);\n          \n          \n            \n                span.setStatus(Status.UNKNOWN);\n          \n          \n            \n                span.recordException(t);\n          \n          \n            \n                span.setStatus(Status.INTERNAL);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466100414", "createdAt": "2020-08-06T01:57:41Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed\n+ * by the Spring container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    String message = t.getMessage();\n+    span.addEvent(message);\n+    span.setAttribute(\"error\", true);\n+    span.setStatus(Status.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2b230140e0394a01d0009b98b3ce77a5cd138b"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d72be973657d572c9e37d54f83872bfbaf4a5eca", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d72be973657d572c9e37d54f83872bfbaf4a5eca", "committedDate": "2020-08-06T02:27:32Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6dc5be6ec6deac77ac6629ff440ff6edba21b3b8", "committedDate": "2020-08-06T02:29:40Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTk0OTE3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-462194917", "createdAt": "2020-08-06T05:21:29Z", "commit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMTozMFrOG8jsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMjoyNFrOG8jteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjYxNg==", "bodyText": "It should be className.methodName", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152616", "createdAt": "2020-08-06T05:21:30Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjgyNQ==", "bodyText": "WithSpan now supports kind attribute as well for setting span kind. Do you want to support this as well?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152825", "createdAt": "2020-08-06T05:22:24Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28eae4aef2d01626ab291e7d8d2b7f07d392649", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a28eae4aef2d01626ab291e7d8d2b7f07d392649", "committedDate": "2020-08-06T15:02:42Z", "message": "aspect autoconfiguration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "699022ca0782dfcf44b4b8603b312fd9968b4d72", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/699022ca0782dfcf44b4b8603b312fd9968b4d72", "committedDate": "2020-08-06T15:20:53Z", "message": "rename span name to include class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df1981bb46c8b530baa6b26b20a075a379d88b64", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df1981bb46c8b530baa6b26b20a075a379d88b64", "committedDate": "2020-08-06T16:17:15Z", "message": "add span kind"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06b7049d538507d0079dc17689eaea8cf18d11dc", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06b7049d538507d0079dc17689eaea8cf18d11dc", "committedDate": "2020-08-06T15:22:20Z", "message": "add span kind"}, "afterCommit": {"oid": "df1981bb46c8b530baa6b26b20a075a379d88b64", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df1981bb46c8b530baa6b26b20a075a379d88b64", "committedDate": "2020-08-06T16:17:15Z", "message": "add span kind"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12de6ee128fa20f3ccbd69f4654641db630eb2e2", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12de6ee128fa20f3ccbd69f4654641db630eb2e2", "committedDate": "2020-08-06T20:53:37Z", "message": "add tests for aspect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "committedDate": "2020-08-06T20:57:39Z", "message": "fix name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "296280b8993ff881f47f14150dbdf0990ab33fdb", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/296280b8993ff881f47f14150dbdf0990ab33fdb", "committedDate": "2020-08-06T20:56:04Z", "message": "rename static class"}, "afterCommit": {"oid": "848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/848d8b197d5bdd97c2dc5f1714a9204806c07bfa", "committedDate": "2020-08-06T20:57:39Z", "message": "fix name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac12024d8c5e1398b53c8d6b4285de0e812d6805", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac12024d8c5e1398b53c8d6b4285de0e812d6805", "committedDate": "2020-08-06T21:31:44Z", "message": "better solution for testing aspects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a30c41eb3feae3ccbbabbebd1fb5322bff679f2", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6a30c41eb3feae3ccbbabbebd1fb5322bff679f2", "committedDate": "2020-08-06T21:32:15Z", "message": "better solution for testing aspects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91d66fcafe9bd344ecfdfa7ac0f04a53597b2232", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91d66fcafe9bd344ecfdfa7ac0f04a53597b2232", "committedDate": "2020-08-06T21:45:14Z", "message": "add exception to verify"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c93165c75a232098ab6fe78aa62fcebb5b8ac3a", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4c93165c75a232098ab6fe78aa62fcebb5b8ac3a", "committedDate": "2020-08-06T22:05:43Z", "message": "add java docs"}, "afterCommit": {"oid": "5292fc1525b2c534031ee1235f36dca44f919f2f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5292fc1525b2c534031ee1235f36dca44f919f2f", "committedDate": "2020-08-06T22:06:02Z", "message": "add java docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1287187549e16f88c7b7ced32edebb80b270bf0b", "committedDate": "2020-08-06T23:06:07Z", "message": "add java docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5292fc1525b2c534031ee1235f36dca44f919f2f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5292fc1525b2c534031ee1235f36dca44f919f2f", "committedDate": "2020-08-06T22:06:02Z", "message": "add java docs"}, "afterCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1287187549e16f88c7b7ced32edebb80b270bf0b", "committedDate": "2020-08-06T23:06:07Z", "message": "add java docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDM0ODcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463034873", "createdAt": "2020-08-07T05:00:23Z", "commit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMDoyM1rOG9Mh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMTo0OVrOG9MjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTU5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures {@link WithSpanAspect} to trace spring beans. */\n          \n          \n            \n            /** Configures {@link WithSpanAspect} to trace bean methods annotated with {@link WithSpan}. */", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821592", "createdAt": "2020-08-07T05:00:23Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** Configures {@link WithSpanAspect} to trace spring beans. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTYxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configuration for enabling aspects. */\n          \n          \n            \n            /** Configuration for enabling tracing aspects. */", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821617", "createdAt": "2020-08-07T05:00:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/** Configuration for enabling aspects. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTgyNQ==", "bodyText": "Statics before non-statics", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821825", "createdAt": "2020-08-07T05:01:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTg3Nw==", "bodyText": "Don't think we need final in the arguments", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821877", "createdAt": "2020-08-07T05:01:36Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTkyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(getSpanName(pjp));", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821926", "createdAt": "2020-08-07T05:01:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();\n+    logger.info(getSpanName(pjp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDU0NjMw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463054630", "createdAt": "2020-08-07T06:04:44Z", "commit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNDo0NFrOG9Nk6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNDo0NFrOG9Nk6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzODc2Mw==", "bodyText": "You should take kind from WithSpan annotation, if that is present.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466838763", "createdAt": "2020-08-07T06:04:44Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec539f45045a0f6fedc863cb343a899d8f4aec4", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eec539f45045a0f6fedc863cb343a899d8f4aec4", "committedDate": "2020-08-07T15:00:50Z", "message": "kind tests and refactor to use withspan.kind"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a261787c17ad871330bb6b5d1f9d343b9ef87b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/16a261787c17ad871330bb6b5d1f9d343b9ef87b", "committedDate": "2020-08-07T15:01:38Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/706570ba8eb0abe13105f8efddcbd997045fca40", "committedDate": "2020-08-07T16:19:53Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eed02ee40114c25d6b3d9c57ca2b6350087fc607", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eed02ee40114c25d6b3d9c57ca2b6350087fc607", "committedDate": "2020-08-07T15:01:46Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}, "afterCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/706570ba8eb0abe13105f8efddcbd997045fca40", "committedDate": "2020-08-07T16:19:53Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTIxMTgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463521181", "createdAt": "2020-08-07T18:31:54Z", "commit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozMTo1NFrOG9j5UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozNjo0OFrOG9kBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNDQzMg==", "bodyText": "i think these two lines will read better inlined into the catch block", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467204432", "createdAt": "2020-08-07T18:31:54Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(ProceedingJoinPoint pjp) throws Throwable {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    Span span =\n+        tracer.spanBuilder(getSpanName(withSpan, method)).setSpanKind(withSpan.kind()).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(WithSpan withSpan, Method method) {\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      return method.getDeclaringClass().getSimpleName() + \".\" + method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    span.recordException(t);\n+    span.setStatus(Status.INTERNAL);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNTIwMQ==", "bodyText": "nice tests \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467205201", "createdAt": "2020-08-07T18:33:48Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg==", "bodyText": "based on discussion in #846, does this make sense?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              api deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              api deps.opentelemetryLogging\n          \n          \n            \n              api deps.opentelemetrySdk\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              compileOnly deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              compileOnly deps.opentelemetrySdk", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467206506", "createdAt": "2020-08-07T18:36:48Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/12a9b3f78c2c1d714f0a42b766d460daa0335ecd", "committedDate": "2020-08-07T21:38:28Z", "message": "Update WithSpanAspect.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzA4NTM3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463708537", "createdAt": "2020-08-08T01:52:02Z", "commit": {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMTo1MjowMlrOG9sl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMTo1MzoyMVrOG9smdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NjkzOQ==", "bodyText": "Yeah that discussion wasn't about starter :) I think it should have out-of-the-box deps. Could even add otlp by default, reconfigure would be similar to the process for reconfiguring logging to use log4j instead of logback (exclude and add dependency)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467346939", "createdAt": "2020-08-08T01:52:02Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg=="}, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NzA2MQ==", "bodyText": "Can you add a test with a constructor? We document that it works so should test it (not sure if it would, since usually constructors happen before becoming a bean). If it doesn't work let's update the javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467347061", "createdAt": "2020-08-08T01:53:21Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {\n+  static class WithSpanTester {\n+    @WithSpan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51e4e638b7ee30b95ad19187930bd53b4c641b7f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/51e4e638b7ee30b95ad19187930bd53b4c641b7f", "committedDate": "2020-08-08T02:08:26Z", "message": "Update WithSpanAspectTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzA5OTA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463709906", "createdAt": "2020-08-08T02:10:59Z", "commit": {"oid": "51e4e638b7ee30b95ad19187930bd53b4c641b7f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoxMDo1OVrOG9stiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoxMDo1OVrOG9stiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODg3Mw==", "bodyText": "Ah sorry I meant this doc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467348873", "createdAt": "2020-08-08T02:10:59Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51e4e638b7ee30b95ad19187930bd53b4c641b7f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ff1f84ea0445007bd016030f3aa6d5c74d3059", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1ff1f84ea0445007bd016030f3aa6d5c74d3059", "committedDate": "2020-08-08T02:12:56Z", "message": "Update WithSpanAspectTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64fabb2cb650670f525fe3aaf4e9a4b481b05db", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c64fabb2cb650670f525fe3aaf4e9a4b481b05db", "committedDate": "2020-08-08T02:14:25Z", "message": "Update WithSpanAspect.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e", "committedDate": "2020-08-08T02:45:47Z", "message": "format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzEzMjY3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463713267", "createdAt": "2020-08-08T03:10:51Z", "commit": {"oid": "b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzEzOTA4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#pullrequestreview-463713908", "createdAt": "2020-08-08T03:22:05Z", "commit": {"oid": "b1a5dcc0fb46d1db611f9cea9e3fa1b0cc966c4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2944, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}