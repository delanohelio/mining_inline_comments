{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NjM1MDEz", "number": 1200, "title": "Implement MDC auto-instrumentation for log4j2", "bodyText": "Resolves #1196", "createdAt": "2020-09-14T13:54:17Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200", "merged": true, "mergeCommit": {"oid": "d89ce818efc8860cccb79cf1477ac7f46627bae9"}, "closed": true, "closedAt": "2020-09-18T14:53:44Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI0VdeAFqTQ4Nzg0MzYzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJtdxYABqjM3NzY5NzYwMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3ODQzNjM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-487843635", "createdAt": "2020-09-14T14:43:17Z", "commit": {"oid": "e860520997f48c8529ba9458d55e5bdb8570bf8a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0MzoxN1rOHRYaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0NzowNVrOHRYlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NzczOA==", "bodyText": "We generally try to support as old version as possible. Are there some hard reasons why we cannot decrease this version?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r487987738", "createdAt": "2020-09-14T14:43:17Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -204,6 +204,7 @@ provide the path to a JAR file including an SPI implementation using the system\n | [khttp](https://khttp.readthedocs.io)                                                                                                 | 0.1+                           |\n | [Kubernetes Client](https://github.com/kubernetes-client/java)                                                                        | 7.0+                           |\n | [Lettuce](https://github.com/lettuce-io/lettuce-core)                                                                                 | 4.0+                           |\n+| [Log4j 2](https://logging.apache.org/log4j/2.x/)                                                                                      | 2.13.2+                        |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e860520997f48c8529ba9458d55e5bdb8570bf8a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5MDU5Mw==", "bodyText": "A, I see. Our current manual instrumentation uses a recent SPI. But if we go to bytecode level, can we actually provide support for older versions?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r487990593", "createdAt": "2020-09-14T14:47:05Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -204,6 +204,7 @@ provide the path to a JAR file including an SPI implementation using the system\n | [khttp](https://khttp.readthedocs.io)                                                                                                 | 0.1+                           |\n | [Kubernetes Client](https://github.com/kubernetes-client/java)                                                                        | 7.0+                           |\n | [Lettuce](https://github.com/lettuce-io/lettuce-core)                                                                                 | 4.0+                           |\n+| [Log4j 2](https://logging.apache.org/log4j/2.x/)                                                                                      | 2.13.2+                        |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NzczOA=="}, "originalCommit": {"oid": "e860520997f48c8529ba9458d55e5bdb8570bf8a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTAzNzAz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-487903703", "createdAt": "2020-09-14T15:40:11Z", "commit": {"oid": "5687f2ee54a1dca8c3471f4fdf61e54a2fddef36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0MDoxMlrOHRbK4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0MDoxMlrOHRbK4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzMjk5NQ==", "bodyText": "By the way, what do you think about adding some logging constant class to keep those three strings somewhere in auto-api?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r488032995", "createdAt": "2020-09-14T15:40:12Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/log4j/log4j-2.7/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v2_7/Log4j27Instrumentation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v2_7;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.util.SortedArrayStringMap;\n+import org.apache.logging.log4j.util.StringMap;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j27Instrumentation extends Instrumenter.Default {\n+  public Log4j27Instrumentation() {\n+    super(\"log4j2\", \"log4j\", \"log4j2.7\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"org.apache.logging.log4j.core.util.ContextDataProvider\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.apache.logging.log4j.core.ContextDataInjector\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod()\n+            .and(named(\"injectContextData\"))\n+            .and(returns(named(\"org.apache.logging.log4j.util.StringMap\"))),\n+        Log4j27Instrumentation.class.getName() + \"$InjectContextDataAdvice\");\n+  }\n+\n+  public static class InjectContextDataAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.Return(typing = Typing.DYNAMIC, readOnly = false) StringMap contextData) {\n+      SpanContext currentContext = TracingContextUtils.getCurrentSpan().getContext();\n+      if (!currentContext.isValid()) {\n+        return;\n+      }\n+\n+      if (contextData.containsKey(\"traceId\")) {\n+        // Assume already instrumented event if traceId is present.\n+        return;\n+      }\n+\n+      StringMap newContextData = new SortedArrayStringMap(contextData);\n+      newContextData.putValue(\"traceId\", currentContext.getTraceId().toLowerBase16());\n+      newContextData.putValue(\"spanId\", currentContext.getSpanId().toLowerBase16());\n+      newContextData.putValue(\"traceFlags\", currentContext.getTraceFlags().toLowerBase16());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5687f2ee54a1dca8c3471f4fdf61e54a2fddef36"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5687f2ee54a1dca8c3471f4fdf61e54a2fddef36", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5687f2ee54a1dca8c3471f4fdf61e54a2fddef36", "committedDate": "2020-09-14T15:37:31Z", "message": "Implement MDC auto-instrumentation for log4j2 2.7"}, "afterCommit": {"oid": "004c45e6c31fe6ab381b26bcd37b1626bf438d37", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/004c45e6c31fe6ab381b26bcd37b1626bf438d37", "committedDate": "2020-09-15T10:34:07Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "004c45e6c31fe6ab381b26bcd37b1626bf438d37", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/004c45e6c31fe6ab381b26bcd37b1626bf438d37", "committedDate": "2020-09-15T10:34:07Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3146643d5348feec28bfeac3391fa5b9b88e841c", "committedDate": "2020-09-15T10:56:08Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTg4ODE5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-489188819", "createdAt": "2020-09-16T00:11:19Z", "commit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDoxMToxOVrOHSbelw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDoxNDoyMFrOHSbh1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NjYxNQ==", "bodyText": "MDC is a name used by slf4j but these are more generic, how about LoggingContextConstants or LoggingTags?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489086615", "createdAt": "2020-09-16T00:11:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/log/MdcConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.log;\n+\n+/** This class contains several constants used in logging libraries' MDC instrumentations. */\n+public final class MdcConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NzQ0Nw==", "bodyText": "Generally looking good - is there a reason to use bytecode instrumentation here instead of the SPI?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489087447", "createdAt": "2020-09-16T00:14:20Z", "author": {"login": "anuraaga"}, "path": "instrumentation/log4j/log4j-2.7/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v2_7/Log4j27MdcInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v2_7;\n+\n+import static io.opentelemetry.instrumentation.api.log.MdcConstants.SAMPLED;\n+import static io.opentelemetry.instrumentation.api.log.MdcConstants.SPAN_ID;\n+import static io.opentelemetry.instrumentation.api.log.MdcConstants.TRACE_ID;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.util.SortedArrayStringMap;\n+import org.apache.logging.log4j.util.StringMap;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j27MdcInstrumentation extends Instrumenter.Default {\n+  public Log4j27MdcInstrumentation() {\n+    super(\"log4j2\", \"log4j\", \"log4j-2.7\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"org.apache.logging.log4j.core.util.ContextDataProvider\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.apache.logging.log4j.core.ContextDataInjector\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3146643d5348feec28bfeac3391fa5b9b88e841c", "committedDate": "2020-09-15T10:56:08Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "e323d3c55ef9522d33c0fe3e9462a8f1bac1f626", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e323d3c55ef9522d33c0fe3e9462a8f1bac1f626", "committedDate": "2020-09-16T08:33:49Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Mzk5ODE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-489399815", "createdAt": "2020-09-16T08:37:06Z", "commit": {"oid": "e323d3c55ef9522d33c0fe3e9462a8f1bac1f626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozNzowNlrOHSmQQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozNzowNlrOHSmQQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2MzE2OA==", "bodyText": "If I'm reading correctly, this is the base for both library and auto instrumentation. In that case it can't extend AgentTestRunner which executes auto instrumentation. We AgentTestTrait and InstrumentationTestTrait instead, do those work?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489263168", "createdAt": "2020-09-16T08:37:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation/log4j/log4j-2-testing/src/main/groovy/Log4j2Test.groovy", "diffHunk": "@@ -14,24 +14,22 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.instrumentation.log4j.v2_13_2\n-\n+import io.opentelemetry.auto.test.AgentTestRunner\n import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.instrumentation.log4j.v2_13_2.ListAppender\n import io.opentelemetry.trace.Span\n import io.opentelemetry.trace.TracingContextUtils\n import org.apache.logging.log4j.LogManager\n-import org.apache.logging.log4j.Logger\n-import spock.lang.Specification\n-\n-class Log4j2Test extends Specification {\n-\n-  private static final Logger logger = LogManager.getLogger(\"TestLogger\")\n \n+abstract class Log4j2Test extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e323d3c55ef9522d33c0fe3e9462a8f1bac1f626"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db596ae832286daac0af9ba2921da53d8adf4cbf", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db596ae832286daac0af9ba2921da53d8adf4cbf", "committedDate": "2020-09-16T08:48:45Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "9d9b54d1d77cc0b7ef30e2809f8523efcec8be06", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9d9b54d1d77cc0b7ef30e2809f8523efcec8be06", "committedDate": "2020-09-16T08:50:58Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDg2NTA0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-489486504", "createdAt": "2020-09-16T10:25:11Z", "commit": {"oid": "9d9b54d1d77cc0b7ef30e2809f8523efcec8be06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d9b54d1d77cc0b7ef30e2809f8523efcec8be06", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9d9b54d1d77cc0b7ef30e2809f8523efcec8be06", "committedDate": "2020-09-16T08:50:58Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86", "committedDate": "2020-09-16T11:35:08Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjY2MjU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-488666259", "createdAt": "2020-09-15T13:12:26Z", "commit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxMjoyNlrOHSBIMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTo1NToxN1rOHStTkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NDg5OQ==", "bodyText": "2.7+ now, correct?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r488654899", "createdAt": "2020-09-15T13:12:26Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -204,6 +204,7 @@ provide the path to a JAR file including an SPI implementation using the system\n | [khttp](https://khttp.readthedocs.io)                                                                                                 | 0.1+                           |\n | [Kubernetes Client](https://github.com/kubernetes-client/java)                                                                        | 7.0+                           |\n | [Lettuce](https://github.com/lettuce-io/lettuce-core)                                                                                 | 4.0+                           |\n+| [Log4j 2](https://logging.apache.org/log4j/2.x/)                                                                                      | 2.13.2+                        |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NTI0OA==", "bodyText": "This is not MDC specific", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r488655248", "createdAt": "2020-09-15T13:12:56Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/log/MdcConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.log;\n+\n+/** This class contains several constants used in logging libraries' MDC instrumentations. */\n+public final class MdcConstants {\n+  /** Key under which the current trace id will be injected into the context data. */\n+  public static final String TRACE_ID = \"traceId\";\n+  /** Key under which the current span id will be injected into the context data. */\n+  public static final String SPAN_ID = \"spanId\";\n+  /**\n+   * Key under which a boolean indicating whether current span is sampled will be injected into the\n+   * context data.\n+   */\n+  public static final String SAMPLED = \"sampled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146643d5348feec28bfeac3391fa5b9b88e841c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3NDE5MA==", "bodyText": "This is too broad matcher. The goal of classLoaderMatcher is to filter out as much classloaders as possible and not to match every class in it.\nAdd hasClasssName(\"org.apache.logging.log4j.core.impl.ContextDataInjectorFactory\") or similar.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489374190", "createdAt": "2020-09-16T11:47:26Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.7/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v2_7/Log4j27MdcInstrumentation.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v2_7;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner.Typing;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.logging.log4j.core.ContextDataInjector;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j27MdcInstrumentation extends Instrumenter.Default {\n+  public Log4j27MdcInstrumentation() {\n+    super(\"log4j2\", \"log4j\", \"log4j-2.7\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.auto.log4j.v2_7.SpanDecoratingContextDataInjector\"\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"org.apache.logging.log4j.core.util.ContextDataProvider\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3ODcwNQ==", "bodyText": "Change to org.apache.logging.log4j.core.util.ContextDataProvider for consistency?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489378705", "createdAt": "2020-09-16T11:55:17Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.13.2/auto/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v2_13_2/Log4j2MdcInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v2_13_2;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Log4j2MdcInstrumentation extends Instrumenter.Default {\n+  public Log4j2MdcInstrumentation() {\n+    super(\"log4j2\", \"log4j\", \"log4j-2.13.2\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.apache.logging.log4j.core.util.ContextDataProvider\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.apache.logging.log4j.core.impl.ThreadContextDataInjector\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbb2d17e6e1dd40a8a466a4bde9ff8b925b87d86", "committedDate": "2020-09-16T11:35:08Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "02880de61038b4bbb231c69e23aa331f78068fe9", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02880de61038b4bbb231c69e23aa331f78068fe9", "committedDate": "2020-09-16T12:37:13Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTgxOTg2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-489581986", "createdAt": "2020-09-16T12:41:46Z", "commit": {"oid": "02880de61038b4bbb231c69e23aa331f78068fe9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02880de61038b4bbb231c69e23aa331f78068fe9", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02880de61038b4bbb231c69e23aa331f78068fe9", "committedDate": "2020-09-16T12:37:13Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "65d866f07b31bfbd8ef47f021e6c3096e4c05e08", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/65d866f07b31bfbd8ef47f021e6c3096e4c05e08", "committedDate": "2020-09-16T12:45:15Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTg2MjUy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#pullrequestreview-489586252", "createdAt": "2020-09-16T12:46:33Z", "commit": {"oid": "65d866f07b31bfbd8ef47f021e6c3096e4c05e08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NjozM1rOHSvHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjo0NjozM1rOHSvHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODI3NQ==", "bodyText": "\"match\", not \"instrument\" :) As you say yourself in transformers: \"Nothing to instrument\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1200#discussion_r489408275", "createdAt": "2020-09-16T12:46:33Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.13.2/auto/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v2_13_2/Log4j2MdcInstrumentation.java", "diffHunk": "@@ -40,6 +40,8 @@ public Log4j2MdcInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // need to instrument a class, not an interface (ContextDataProvider) - otherwise helper classes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d866f07b31bfbd8ef47f021e6c3096e4c05e08"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65d866f07b31bfbd8ef47f021e6c3096e4c05e08", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/65d866f07b31bfbd8ef47f021e6c3096e4c05e08", "committedDate": "2020-09-16T12:45:15Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "3dc072dc6df81d9662eb64b67eafcb32aa2fffe0", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dc072dc6df81d9662eb64b67eafcb32aa2fffe0", "committedDate": "2020-09-16T12:48:11Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc072dc6df81d9662eb64b67eafcb32aa2fffe0", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dc072dc6df81d9662eb64b67eafcb32aa2fffe0", "committedDate": "2020-09-16T12:48:11Z", "message": "Implement MDC auto-instrumentation for log4j2"}, "afterCommit": {"oid": "695bc9d0bfa7a22d3360ca8a9a068eb810c8d12c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/695bc9d0bfa7a22d3360ca8a9a068eb810c8d12c", "committedDate": "2020-09-17T08:04:58Z", "message": "Implement MDC auto-instrumentation for log4j1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14f4e840de7ee0060a4d1354645c2314a2db9fcf", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/14f4e840de7ee0060a4d1354645c2314a2db9fcf", "committedDate": "2020-09-17T09:16:54Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8226af191d6ba8ae3c0fba22f7a5c51a94ee6b", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c8226af191d6ba8ae3c0fba22f7a5c51a94ee6b", "committedDate": "2020-09-17T09:18:49Z", "message": "Implement MDC auto-instrumentation for log4j2 2.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e208f85d753fb0e103772fb0e0840593cfe26d9", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e208f85d753fb0e103772fb0e0840593cfe26d9", "committedDate": "2020-09-17T09:18:49Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb94a2ebfceb3d1012d142c7265dbacb659b145f", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb94a2ebfceb3d1012d142c7265dbacb659b145f", "committedDate": "2020-09-17T09:18:49Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb3e7fc77e69ac4ccebfa78e21c2ab497eadafd2", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb3e7fc77e69ac4ccebfa78e21c2ab497eadafd2", "committedDate": "2020-09-17T09:18:49Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ce072f73c0149e1fc904e1cf1dac0a2b7c6b01", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2ce072f73c0149e1fc904e1cf1dac0a2b7c6b01", "committedDate": "2020-09-17T09:18:49Z", "message": "Implement MDC auto-instrumentation for log4j1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049850e581915d4c4fa9f3491332cd130cfc397c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/049850e581915d4c4fa9f3491332cd130cfc397c", "committedDate": "2020-09-17T09:20:37Z", "message": "Implement MDC auto-instrumentation for log4j2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "695bc9d0bfa7a22d3360ca8a9a068eb810c8d12c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/695bc9d0bfa7a22d3360ca8a9a068eb810c8d12c", "committedDate": "2020-09-17T08:04:58Z", "message": "Implement MDC auto-instrumentation for log4j1"}, "afterCommit": {"oid": "049850e581915d4c4fa9f3491332cd130cfc397c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/049850e581915d4c4fa9f3491332cd130cfc397c", "committedDate": "2020-09-17T09:20:37Z", "message": "Implement MDC auto-instrumentation for log4j2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2595, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}