{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzgzOTY5", "number": 72, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MDowNVrODY-wBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDoxMTo0NVrODY-yuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNTE5OnYy", "diffSide": "LEFT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MDowNVrOFfJX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MDowNVrOFfJX4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzc0Ng==", "bodyText": "let's keep the scope activation:\ntry (final Scope scope = TRACER.withSpan(span)) {\n  ...\n}", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203746", "createdAt": "2020-01-18T03:50:05Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNjAwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MTo0NVrOFfJYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MTo0NVrOFfJYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203848", "createdAt": "2020-01-18T03:51:45Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNjExOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MjoyMVrOFfJYWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1MjoyMVrOFfJYWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203865", "createdAt": "2020-01-18T03:52:21Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNjI2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1Mjo0NVrOFfJYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1Mjo0NVrOFfJYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.out.println(\"onMessage\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203880", "createdAt": "2020-01-18T03:52:45Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNzA4OnYy", "diffSide": "LEFT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NDo0M1rOFfJY0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NDo0M1rOFfJY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwMzk4NQ==", "bodyText": "let's keep the scope activation:\nfinal Scope scope = TRACER.withSpan(messageSpan);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368203985", "createdAt": "2020-01-18T03:54:43Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNzIzOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NTozOFrOFfJY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NTozOFrOFfJY7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204014", "createdAt": "2020-01-18T03:55:38Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(messageSpan, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(messageSpan);\n-        scope.close();\n+        messageSpan.end();\n       }\n     }\n \n     @Override\n     public void onClose(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNzM5OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NTo1MlrOFfJY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NTo1MlrOFfJY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204031", "createdAt": "2020-01-18T03:55:52Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -29,112 +26,107 @@\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final AgentSpan span =\n-        startSpan(\"grpc.client\").setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n-    try (final AgentScope scope = activateSpan(span, false)) {\n-      DECORATE.afterStart(span);\n-\n-      final ClientCall<ReqT, RespT> result;\n-      try {\n-        // call other interceptors\n-        result = next.newCall(method, callOptions);\n-      } catch (final Throwable e) {\n-        DECORATE.onError(span, e);\n-        DECORATE.beforeFinish(span);\n-        span.finish();\n-        throw e;\n-      }\n-\n-      return new TracingClientCall<>(span, result);\n+    final Span span = TRACER.spanBuilder(\"grpc.client\").startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    DECORATE.afterStart(span);\n+\n+    final ClientCall<ReqT, RespT> result;\n+    try {\n+      // call other interceptors\n+      result = next.newCall(method, callOptions);\n+    } catch (final Throwable e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+      span.end();\n+      throw e;\n     }\n+    return new TracingClientCall<>(span, result);\n   }\n \n   static final class TracingClientCall<ReqT, RespT>\n       extends ForwardingClientCall.SimpleForwardingClientCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCall(final AgentSpan span, final ClientCall<ReqT, RespT> delegate) {\n+    TracingClientCall(final Span span, final ClientCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void start(final Listener<RespT> responseListener, final Metadata headers) {\n-      propagate().inject(span, headers, SETTER);\n-\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      TRACER.getHttpTextFormat().inject(span.getContext(), headers, SETTER);\n+      try {\n         super.start(new TracingClientCallListener<>(span, responseListener), headers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void sendMessage(final ReqT message) {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         super.sendMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n   }\n \n   static final class TracingClientCallListener<RespT>\n       extends ForwardingClientCallListener.SimpleForwardingClientCallListener<RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingClientCallListener(final AgentSpan span, final ClientCall.Listener<RespT> delegate) {\n+    TracingClientCallListener(final Span span, final ClientCall.Listener<RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final RespT message) {\n-      final AgentSpan messageSpan =\n-          startSpan(\"grpc.message\", span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      System.out.println(\"onMessage\");\n+      final Span messageSpan = TRACER.spanBuilder(\"grpc.message\").setParent(span).startSpan();\n+      messageSpan.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(messageSpan);\n-      final AgentScope scope = activateSpan(messageSpan, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(messageSpan, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(messageSpan);\n-        scope.close();\n+        messageSpan.end();\n       }\n     }\n \n     @Override\n     public void onClose(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onClose(status, trailers);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onReady() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwNzgwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/GrpcServerDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NzoyM1rOFfJZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1NzoyM1rOFfJZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDA4Ng==", "bodyText": "let's stay consistent with above and import io.opentelemetry.trace.Status and fully qualify io.grpc.Status", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204086", "createdAt": "2020-01-18T03:57:23Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/GrpcServerDecorator.java", "diffHunk": "@@ -23,16 +26,16 @@ protected String component() {\n     return \"grpc-server\";\n   }\n \n-  public AgentSpan onClose(final AgentSpan span, final Status status) {\n+  public Span onClose(final Span span, final Status status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwODQwOnYy", "diffSide": "LEFT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1ODo1MVrOFfJZew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1ODo1MVrOFfJZew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDE1NQ==", "bodyText": "let's keep the scope activation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204155", "createdAt": "2020-01-18T03:58:51Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -30,13 +27,11 @@ private TracingServerInterceptor() {}\n       final Metadata headers,\n       final ServerCallHandler<ReqT, RespT> next) {\n \n-    final Context spanContext = propagate().extract(headers, GETTER);\n-    final AgentSpan span =\n-        startSpan(\"grpc.server\", spanContext)\n-            .setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n-    DECORATE.afterStart(span);\n+    final SpanContext spanContext = TRACER.getHttpTextFormat().extract(headers, GETTER);\n+    final Span span = TRACER.spanBuilder(\"grpc.server\").setParent(spanContext).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n \n-    final AgentScope scope = activateSpan(span, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwODY0OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1OTo0OFrOFfJZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwMzo1OTo0OFrOFfJZmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDE4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204184", "createdAt": "2020-01-18T03:59:48Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -61,17 +54,17 @@ private TracingServerInterceptor() {}\n \n   static final class TracingServerCall<ReqT, RespT>\n       extends ForwardingServerCall.SimpleForwardingServerCall<ReqT, RespT> {\n-    final AgentSpan span;\n+    final Span span;\n \n-    TracingServerCall(final AgentSpan span, final ServerCall<ReqT, RespT> delegate) {\n+    TracingServerCall(final Span span, final ServerCall<ReqT, RespT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void close(final Status status, final Metadata trailers) {\n       DECORATE.onClose(span, status);\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwODg2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMDozN1rOFfJZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMDozN1rOFfJZug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204218", "createdAt": "2020-01-18T04:00:37Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwOTAwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMTowM1rOFfJZyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMTowM1rOFfJZyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDIzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204235", "createdAt": "2020-01-18T04:01:03Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwOTEyOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMToyOFrOFfJZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMToyOFrOFfJZ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDI1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204250", "createdAt": "2020-01-18T04:01:28Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onCancel();\n         span.setAttribute(\"canceled\", true);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onComplete() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIwOTIyOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMTo0MFrOFfJZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowMTo0MFrOFfJZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDI2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                  try (Scope scope : TRACER.withSpan(span)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204261", "createdAt": "2020-01-18T04:01:40Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -82,82 +75,81 @@ public void close(final Status status, final Metadata trailers) {\n \n   static final class TracingServerCallListener<ReqT>\n       extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {\n-    private final AgentSpan span;\n+    private final Span span;\n \n-    TracingServerCallListener(final AgentSpan span, final ServerCall.Listener<ReqT> delegate) {\n+    TracingServerCallListener(final Span span, final ServerCall.Listener<ReqT> delegate) {\n       super(delegate);\n       this.span = span;\n     }\n \n     @Override\n     public void onMessage(final ReqT message) {\n-      final AgentSpan span =\n-          startSpan(\"grpc.message\", this.span.context())\n-              .setAttribute(\"message.type\", message.getClass().getName());\n+      final Span span =\n+          TRACER.spanBuilder(\"grpc.message\").setParent(this.span.getContext()).startSpan();\n+      span.setAttribute(\"message.type\", message.getClass().getName());\n       DECORATE.afterStart(span);\n-      final AgentScope scope = activateSpan(span, true);\n       try {\n         delegate().onMessage(message);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(this.span);\n-        this.span.finish();\n+        this.span.end();\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        scope.close();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onHalfClose() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onHalfClose();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n         throw e;\n       }\n     }\n \n     @Override\n     public void onCancel() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onCancel();\n         span.setAttribute(\"canceled\", true);\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onComplete() {\n       // Finishes span.\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {\n         delegate().onComplete();\n       } catch (final Throwable e) {\n         DECORATE.onError(span, e);\n         throw e;\n       } finally {\n         DECORATE.beforeFinish(span);\n-        span.finish();\n+        span.end();\n       }\n     }\n \n     @Override\n     public void onReady() {\n-      try (final AgentScope scope = activateSpan(span, false)) {\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIxMDk2OnYy", "diffSide": "RIGHT", "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowODowMVrOFfJaxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowODowMVrOFfJaxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDQ4NA==", "bodyText": "it's just test code, but do u mind parameterizing, e.g.\nlog.debug(\"SPAN START: {} id={} traceid={} parent={}\", sd.getName(), sd.getSpanId(), sd.getTraceId(), sd.getParentSpanId());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204484", "createdAt": "2020-01-18T04:08:01Z", "author": {"login": "trask"}, "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "diffHunk": "@@ -40,11 +42,31 @@\n \n   @Override\n   public void onStart(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN START: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIxMTM4OnYy", "diffSide": "RIGHT", "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowOTowNVrOFfJa-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDowOTowNVrOFfJa-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDUzNw==", "bodyText": "same as above re: parameterizing", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204537", "createdAt": "2020-01-18T04:09:05Z", "author": {"login": "trask"}, "path": "java-agent/testing/src/main/groovy/io/opentelemetry/auto/test/ListWriter.java", "diffHunk": "@@ -40,11 +42,31 @@\n \n   @Override\n   public void onStart(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN START: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());\n     spanOrders.put(readableSpan.getSpanContext().getSpanId(), nextSpanOrder.getAndIncrement());\n   }\n \n   @Override\n   public void onEnd(final ReadableSpan readableSpan) {\n+    final SpanData sd = readableSpan.toSpanData();\n+    log.debug(\n+        \"SPAN END: \"\n+            + sd.getName()\n+            + \" id=\"\n+            + sd.getSpanId()\n+            + \" traceid=\"\n+            + sd.getTraceId()\n+            + \" parent=\"\n+            + sd.getParentSpanId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTIxMjExOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDoxMTo0NVrOFfJbXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQwNDoxMTo0NVrOFfJbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIwNDYzOA==", "bodyText": "go ahead and delete this test since it's no longer applicable", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/72#discussion_r368204638", "createdAt": "2020-01-18T04:11:45Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "diffHunk": "@@ -271,16 +269,21 @@ class GrpcTest extends AgentTestRunner {\n     \"StatusRuntime - description\" | Status.UNIMPLEMENTED.withDescription(\"some description\")\n   }\n \n+  /*\n+  The new attribute propagation doesn't have a 'keys' method. This test no longer works.\n+  TODO: Revisit this!\n+\n   def \"skip binary headers\"() {\n     setup:\n     def meta = new Metadata()\n     meta.put(Metadata.Key.<String> of(\"test\", Metadata.ASCII_STRING_MARSHALLER), \"val\")\n     meta.put(Metadata.Key.<byte[]> of(\"test-bin\", Metadata.BINARY_BYTE_MARSHALLER), \"bin-val\".bytes)\n \n     when:\n-    def keys = GrpcExtractAdapter.GETTER.keys(meta)\n+    def keys = meta.keys()\n \n     then:\n     keys == [\"test\"]\n   }\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96df0d9f9795b5513066eb1ad8dcfce6acd51b67"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 614, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}