{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzE2MDQz", "number": 1902, "title": "Tomcat server handlers", "bodyText": "This is a Tomcat version of a server handler, as described and discussed in #1886\nSome notable findings:\n\nServer instrumentation needs uncaught exceptions from outermost servlets/filters. These are passed via AppServerBridge.THROWABLE_CONTEXT_KEY context attribute. Outermost servlets/filters set their unhandled exceptions with the current span.\nException handling in tomcat is done in a way, where a request passes the servlet stack two times \u2013 first pass is the initial request and the second pass is when tomcat tries to render an error page mapped in web.xml. Server span name should be updated only when doing a first pass. Thus the AppServerBridge context attribute and not the intuitive callDepth counter.", "createdAt": "2020-12-14T18:28:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902", "merged": true, "mergeCommit": {"oid": "135ba344cb2719b75f54b1f44f4c78c059238f4a"}, "closed": true, "closedAt": "2020-12-16T14:59:55Z", "author": {"login": "vovencij"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmG3qPgH2gAyNTM5NzE2MDQzOmNhNjRmNDhmNjhkODE5MTI4ZGU2NTkxNTk3NjNkMjU1MTdkMjZlYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmvgWlAFqTU1MzcxNzc3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca64f48f68d819128de659159763d25517d26ebb", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca64f48f68d819128de659159763d25517d26ebb", "committedDate": "2020-12-14T14:46:35Z", "message": "Tomcat server handler with passing integration and smoke tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b4e8d926a3b72a43d75afef7f1882356e1d100", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50b4e8d926a3b72a43d75afef7f1882356e1d100", "committedDate": "2020-12-14T18:11:30Z", "message": "Update server span name from the servlet integration instead of trying to mimic it from the server handler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95ceae157b289d686aded7a9949b1f92a9a4c70f", "committedDate": "2020-12-14T18:21:14Z", "message": "Cleanup and more javadocs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODQ3NTQx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-551847541", "createdAt": "2020-12-14T20:01:14Z", "commit": {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDowMToxNFrOIFk24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDowMToxNFrOIFk24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNzY2NQ==", "bodyText": "Why do you need this AppServerBridge.getUnhandledThrowable? You can record the exception on SERVER span write when it happened inside servlet instrumentation. You don't need to pass it up.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r542717665", "createdAt": "2020-12-14T20:01:14Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7888b11f3e9ee4122fbb22b712b1209ac288be4", "committedDate": "2020-12-14T20:01:37Z", "message": "Use Java8BytecodeBridge in advice code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDkxODM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-552091839", "createdAt": "2020-12-15T04:11:38Z", "commit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDoyNDoyM1rOIF4SFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDo0Njo0OFrOIF4u0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNTkyNQ==", "bodyText": "is this meant to be parameterized by the test params below?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543035925", "createdAt": "2020-12-15T04:24:23Z", "author": {"login": "trask"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TomcatSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+\n+class TomcatSmokeTest extends AppServerTest {\n+\n+  protected String getTargetImage(int jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:tomcat-${serverVersion}-jdk$jdk-20201207.405832649\"\n+  }\n+\n+  def \"Server Handler test\"() {\n+    setup:\n+    startTarget(8, \"7.0.107\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNzU4Ng==", "bodyText": "typically this is the lowest version, and then tests will be run against the latest version in nightly build using -PtestLatestDeps=true, in this case you don't quite want the latest version, so need to supply latestDepTestLibrary like below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'\n          \n          \n            \n              library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '7.0.4'\n          \n          \n            \n              latestDepTestLibrary  group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.+'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543037586", "createdAt": "2020-12-15T04:29:25Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA==", "bodyText": "Jetty and Servlet advice also does this, do you think applicable here also?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                  // Check again in case the request finished before adding the listener.\n          \n          \n            \n                  if (!request.isAsync() && responseHandled.compareAndSet(false, true)) {\n          \n          \n            \n                    tracer().end(context, response);\n          \n          \n            \n                  }\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040178", "createdAt": "2020-12-15T04:37:05Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg==", "bodyText": "can you add a comment here about why not passing response when it's not committed? it's not obvious to me at least", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040742", "createdAt": "2020-12-15T04:38:52Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MTExMA==", "bodyText": "no need for this null check I think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543041110", "createdAt": "2020-12-15T04:40:09Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzI4Mw==", "bodyText": "the SERVER span name is also updated in several of the web framework instrumentations", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543043283", "createdAt": "2020-12-15T04:46:48Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {\n         scope = attachedContext.makeCurrent();\n       }\n \n+      // We're interested only in the very first suggested name, as this is where the initial\n+      // request arrived. There are potential forward and other scenarios, where servlet path\n+      // may change, but we don't want this to be reflected in the span name.\n+      if (!AppServerBridge.isBetterNameSuggested(attachedContext)) {\n+        tracer().updateServerSpanName(httpServletRequest);\n+        AppServerBridge.setBetterNameSuggested(attachedContext, true);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTM0Nzcx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-552134771", "createdAt": "2020-12-15T06:16:05Z", "commit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoxNjowNlrOIF6qog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoxNjowNlrOIF6qog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NDk3OA==", "bodyText": "It's better if we can have a single key / object with multiple fields for any particular concern, rather than multiple keys", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543074978", "createdAt": "2020-12-15T06:16:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTc0NDU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-552174459", "createdAt": "2020-12-15T07:38:58Z", "commit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozODo1OFrOIF89lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzo0Njo1MFrOIF9OlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw==", "bodyText": "Why exactly do we want to record exception in SERVER span if that was swallowed inside it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543112597", "createdAt": "2020-12-15T07:38:58Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-unhandled-throwable\");\n+  public static final ContextKey<AtomicBoolean> SERVLET_SUGGESTED_BETTER_NAME_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-better-name-suggested\");\n+\n+  public static Context init(Context ctx) {\n+    return ctx.with(AppServerBridge.THROWABLE_CONTEXT_KEY, new AtomicReference<>())\n+        .with(AppServerBridge.SERVLET_SUGGESTED_BETTER_NAME_KEY, new AtomicBoolean(false));\n+  }\n+\n+  /**\n+   * This is for servlet instrumentation to record exceptions unhandled by servlets and filters,\n+   * that app-server integrations are interested in (to fail the span exceptionally with attached\n+   * throwable), but which may be swallowed by an app-server before execution arrives to an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNDk4Ng==", "bodyText": "This comment better be in the code :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543114986", "createdAt": "2020-12-15T07:43:14Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjk0OQ==", "bodyText": "Why this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543116949", "createdAt": "2020-12-15T07:46:50Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4cff205f8d7173ab8ee5b3d752f85755293cf82c", "committedDate": "2020-12-15T08:22:15Z", "message": "Use Java8BytecodeBridge in advice code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjE3MTU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-552217159", "createdAt": "2020-12-15T08:40:52Z", "commit": {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0MDo1M1rOIF_MKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0MDo1M1rOIF_MKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0OTA5Ng==", "bodyText": "Should be \"io.opentelemetry.javaagent.tomcat\" to be consistent with other integrations", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543149096", "createdAt": "2020-12-15T08:40:53Z", "author": {"login": "laurit"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {\n+    Context context =\n+        AppServerBridge.init(startSpan(request, request, request, adapterClassName + \".service\"));\n+\n+    // context must be reattached, because it has new attributes compared to the one returned from\n+    // startSpan().\n+    attachServerContext(context, request);\n+    return context;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"tomcat\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0207a02a5bd1ec548c9ead2036708172c09919c", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a0207a02a5bd1ec548c9ead2036708172c09919c", "committedDate": "2020-12-15T08:57:26Z", "message": "Use earliest version for compilation and muzzling."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccdf5da62123844efda179aa928d869426953ebb", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccdf5da62123844efda179aa928d869426953ebb", "committedDate": "2020-12-15T09:15:03Z", "message": "Use consistent instrumentation name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8ec354f3ccae910e37e6d5792fbecb23e29030", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed8ec354f3ccae910e37e6d5792fbecb23e29030", "committedDate": "2020-12-15T12:30:02Z", "message": "Record throwables only if the context is managed by something else."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTMwODgz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-552530883", "createdAt": "2020-12-15T14:44:16Z", "commit": {"oid": "ed8ec354f3ccae910e37e6d5792fbecb23e29030"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0NDoxNlrOIGO6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0NDoxNlrOIGO6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNjYwNQ==", "bodyText": "I now seems to me that this whole logic can live in ServletHttpServerTracer. This will also remove some ifs from servlet advices.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543406605", "createdAt": "2020-12-15T14:44:16Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Helper container for Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ec354f3ccae910e37e6d5792fbecb23e29030"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41edea5d294675ea2508887dee2d46363bb246b3", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/41edea5d294675ea2508887dee2d46363bb246b3", "committedDate": "2020-12-15T15:11:46Z", "message": "Getting scope handling right. Moved server span renaming logic via AppServerBridge to the ServletHttpServerTracer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83b86f94b288697abc515545d9a353c6072e54e9", "committedDate": "2020-12-15T15:34:06Z", "message": "codenarc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMzMzNTYy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-553333562", "createdAt": "2020-12-16T03:38:36Z", "commit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDA3NTU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-553407557", "createdAt": "2020-12-16T07:09:49Z", "commit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowOTo0OVrOIG2pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxNzo1OVrOIG3Erg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzcxOA==", "bodyText": "Is this isPresent needed here? The result of if is the same without it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544057718", "createdAt": "2020-12-16T07:09:49Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -126,4 +131,12 @@ private static String getSpanName(HttpServletRequest request) {\n     }\n     return spanName;\n   }\n+\n+  public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n+    if (AppServerBridge.isPresent(attachedContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1OTEzNQ==", "bodyText": "Shouldn't this comment go to updateServerSpanNameOnce method declaration site?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544059135", "createdAt": "2020-12-16T07:11:35Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v2_2/Servlet2Advice.java", "diffHunk": "@@ -24,14 +26,20 @@ public static void onEnter(\n       @Advice.Argument(value = 1, typing = Assigner.Typing.DYNAMIC) ServletResponse response,\n       @Advice.Local(\"otelContext\") Context context,\n       @Advice.Local(\"otelScope\") Scope scope) {\n+    CallDepthThreadLocalMap.incrementCallDepth(Servlet2Advice.class);\n \n     if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) {\n       return;\n     }\n \n     HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n \n-    if (tracer().getServerContext(httpServletRequest) != null) {\n+    Context serverContext = tracer().getServerContext(httpServletRequest);\n+    if (serverContext != null) {\n+      // We're interested only in the very first suggested name, as this is where the initial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTE2Mw==", "bodyText": "scope can be null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061163", "createdAt": "2020-12-16T07:13:58Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTk4NQ==", "bodyText": "@vovencij ?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061985", "createdAt": "2020-12-16T07:14:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA==", "bodyText": "Pass the whole Method here instead of adapterClassName. There is getSpanName(Method)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544063364", "createdAt": "2020-12-16T07:16:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NDY4Ng==", "bodyText": "I wonder, why no other instrumentation defines this dependency?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544064686", "createdAt": "2020-12-16T07:17:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '7.0.4'\n+  implementation project(':instrumentation:servlet:servlet-3.0:javaagent')\n+  implementation(\"org.slf4j:slf4j-api:1.7.30\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d16daa9444b7d547812ea6d812ce568e90b38e5", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d16daa9444b7d547812ea6d812ce568e90b38e5", "committedDate": "2020-12-16T09:58:26Z", "message": "more PR comments addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "198ffc6cf5b07ed956a443fe0987b806b04f1250", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/198ffc6cf5b07ed956a443fe0987b806b04f1250", "committedDate": "2020-12-16T13:30:14Z", "message": "Pass Method to startServerSpan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzE3Nzc4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#pullrequestreview-553717778", "createdAt": "2020-12-16T14:07:15Z", "commit": {"oid": "198ffc6cf5b07ed956a443fe0987b806b04f1250"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1992, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}