{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzUyMzky", "number": 1897, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMDo1NVrOFFYhHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1OTozOVrOFFaUQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTg4ODkzOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SimpleAsyncTaskExecutorInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMDo1NVrOIF30og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMDo1NVrOIF30og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyODM4Ng==", "bodyText": "Since this is protected on a public class, it's effectively not an internal API so seems like a great instrumentation point.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543028386", "createdAt": "2020-12-15T04:00:55Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SimpleAsyncTaskExecutorInstrumentation.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class SimpleAsyncTaskExecutorInstrumentation implements TypeInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.core.task.SimpleAsyncTaskExecutor\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isProtected())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA2NDA3OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToxMzoyN1rOIF5RGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToxMzoyN1rOIF5RGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MjA1OA==", "bodyText": "Spring 2.0 was released in October 2006\n\nhttps://en.wikipedia.org/wiki/Spring_Framework\n\ud83d\ude02\ud83d\ude02\ud83d\ude02", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543052058", "createdAt": "2020-12-15T05:13:27Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-core'\n+    versions = \"[2.0,]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjE3ODc0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1Nzo1M1rOIF6PLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToxODoyN1rOIGF2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2Nzk1MQ==", "bodyText": "Do we need this inverse check?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543067951", "createdAt": "2020-12-15T05:57:53Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-core'\n+    versions = \"[2.0,]\"\n+    assertInverse = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1ODMxOQ==", "bodyText": "Now that I think of it, we probably don't really care about spring 1.x \ud83d\ude02", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543258319", "createdAt": "2020-12-15T11:18:27Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-core'\n+    versions = \"[2.0,]\"\n+    assertInverse = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2Nzk1MQ=="}, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjE4MzcwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SpringCoreInstrumentationModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1OTozOVrOIF6R2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMToyMToxN1rOIGF9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2ODYzMg==", "bodyText": "Is it spring-core or something specific for executors?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543068632", "createdAt": "2020-12-15T05:59:39Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SpringCoreInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringCoreInstrumentationModule extends InstrumentationModule {\n+  public SpringCoreInstrumentationModule() {\n+    super(\"spring-core\", \"spring-core-2.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MDAwOA==", "bodyText": "spring-core is where the AsyncTaskExecutor interface is placed - most implementations are in some other modules though (spring-context, spring-security, ...)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543260008", "createdAt": "2020-12-15T11:21:17Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SpringCoreInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringCoreInstrumentationModule extends InstrumentationModule {\n+  public SpringCoreInstrumentationModule() {\n+    super(\"spring-core\", \"spring-core-2.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2ODYzMg=="}, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4357, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}