{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NzAyMzkw", "number": 1427, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToxMjo1MVrOEvuVJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjoyNjowMlrOEwC_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDc3NjA3OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToxMjo1MVrOHk3JxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo0NTo0MVrOHk6hDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ==", "bodyText": "Should I change Cassandra 4.0 tests to use testcontainers as well? WDYT?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508414405", "createdAt": "2020-10-20T11:12:51Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -13,39 +13,45 @@ import io.opentelemetry.instrumentation.test.AgentTestRunner\n import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n import io.opentelemetry.sdk.trace.data.SpanData\n import io.opentelemetry.trace.attributes.SemanticAttributes\n+import java.time.Duration\n import java.util.concurrent.Executors\n import java.util.concurrent.atomic.AtomicBoolean\n-import org.cassandraunit.utils.EmbeddedCassandraServerHelper\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import org.testcontainers.containers.GenericContainer\n+import org.testcontainers.containers.output.Slf4jLogConsumer\n import spock.lang.Shared\n \n class CassandraClientTest extends AgentTestRunner {\n+  private static final Logger log = LoggerFactory.getLogger(CassandraClientTest)\n \n   @Shared\n-  Cluster cluster\n+  def executor = Executors.newCachedThreadPool()\n \n   @Shared\n-  def executor = Executors.newCachedThreadPool()\n+  GenericContainer cassandra\n+  @Shared\n+  int cassandraPort\n+  @Shared\n+  Cluster cluster\n \n   def setupSpec() {\n-    /*\n-     This timeout seems excessive but we've seen tests fail with timeout of 40s.\n-     TODO: if we continue to see failures we may want to consider using 'real' Cassandra\n-     started in container like we do for memcached. Note: this will complicate things because\n-     tests would have to assume they run under shared Cassandra and act accordingly.\n-      */\n-    EmbeddedCassandraServerHelper.startEmbeddedCassandra(EmbeddedCassandraServerHelper.CASSANDRA_RNDPORT_YML_FILE, 120000L)\n-\n-    cluster = EmbeddedCassandraServerHelper.getCluster()\n-\n-    /*\n-    Looks like sometimes our requests fail because Cassandra takes to long to respond,\n-    Increase this timeout as well to try to cope with this.\n-     */\n-    cluster.getConfiguration().getSocketOptions().setReadTimeoutMillis(120000)\n+    cassandra = new GenericContainer(\"cassandra:3\")\n+      .withExposedPorts(9042)\n+      .withLogConsumer(new Slf4jLogConsumer(log))\n+      .withStartupTimeout(Duration.ofSeconds(120))\n+    cassandra.start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1840b8e49ec380c61264fc977a9ab2deb71836b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTMwMg==", "bodyText": "Yes, please. Although in the future I personally would prefer to have these logically separate changes in separate PRs :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508459302", "createdAt": "2020-10-20T12:30:20Z", "author": {"login": "iNikem"}, "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -13,39 +13,45 @@ import io.opentelemetry.instrumentation.test.AgentTestRunner\n import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n import io.opentelemetry.sdk.trace.data.SpanData\n import io.opentelemetry.trace.attributes.SemanticAttributes\n+import java.time.Duration\n import java.util.concurrent.Executors\n import java.util.concurrent.atomic.AtomicBoolean\n-import org.cassandraunit.utils.EmbeddedCassandraServerHelper\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import org.testcontainers.containers.GenericContainer\n+import org.testcontainers.containers.output.Slf4jLogConsumer\n import spock.lang.Shared\n \n class CassandraClientTest extends AgentTestRunner {\n+  private static final Logger log = LoggerFactory.getLogger(CassandraClientTest)\n \n   @Shared\n-  Cluster cluster\n+  def executor = Executors.newCachedThreadPool()\n \n   @Shared\n-  def executor = Executors.newCachedThreadPool()\n+  GenericContainer cassandra\n+  @Shared\n+  int cassandraPort\n+  @Shared\n+  Cluster cluster\n \n   def setupSpec() {\n-    /*\n-     This timeout seems excessive but we've seen tests fail with timeout of 40s.\n-     TODO: if we continue to see failures we may want to consider using 'real' Cassandra\n-     started in container like we do for memcached. Note: this will complicate things because\n-     tests would have to assume they run under shared Cassandra and act accordingly.\n-      */\n-    EmbeddedCassandraServerHelper.startEmbeddedCassandra(EmbeddedCassandraServerHelper.CASSANDRA_RNDPORT_YML_FILE, 120000L)\n-\n-    cluster = EmbeddedCassandraServerHelper.getCluster()\n-\n-    /*\n-    Looks like sometimes our requests fail because Cassandra takes to long to respond,\n-    Increase this timeout as well to try to cope with this.\n-     */\n-    cluster.getConfiguration().getSocketOptions().setReadTimeoutMillis(120000)\n+    cassandra = new GenericContainer(\"cassandra:3\")\n+      .withExposedPorts(9042)\n+      .withLogConsumer(new Slf4jLogConsumer(log))\n+      .withStartupTimeout(Duration.ofSeconds(120))\n+    cassandra.start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ=="}, "originalCommit": {"oid": "e1840b8e49ec380c61264fc977a9ab2deb71836b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTUxOQ==", "bodyText": "I agree, I probably should have split this PR... but once I started working on this there were so many things that needed to be fixed/improved that I went with the flow and put them all here \ud83d\ude05", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508469519", "createdAt": "2020-10-20T12:45:41Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -13,39 +13,45 @@ import io.opentelemetry.instrumentation.test.AgentTestRunner\n import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n import io.opentelemetry.sdk.trace.data.SpanData\n import io.opentelemetry.trace.attributes.SemanticAttributes\n+import java.time.Duration\n import java.util.concurrent.Executors\n import java.util.concurrent.atomic.AtomicBoolean\n-import org.cassandraunit.utils.EmbeddedCassandraServerHelper\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import org.testcontainers.containers.GenericContainer\n+import org.testcontainers.containers.output.Slf4jLogConsumer\n import spock.lang.Shared\n \n class CassandraClientTest extends AgentTestRunner {\n+  private static final Logger log = LoggerFactory.getLogger(CassandraClientTest)\n \n   @Shared\n-  Cluster cluster\n+  def executor = Executors.newCachedThreadPool()\n \n   @Shared\n-  def executor = Executors.newCachedThreadPool()\n+  GenericContainer cassandra\n+  @Shared\n+  int cassandraPort\n+  @Shared\n+  Cluster cluster\n \n   def setupSpec() {\n-    /*\n-     This timeout seems excessive but we've seen tests fail with timeout of 40s.\n-     TODO: if we continue to see failures we may want to consider using 'real' Cassandra\n-     started in container like we do for memcached. Note: this will complicate things because\n-     tests would have to assume they run under shared Cassandra and act accordingly.\n-      */\n-    EmbeddedCassandraServerHelper.startEmbeddedCassandra(EmbeddedCassandraServerHelper.CASSANDRA_RNDPORT_YML_FILE, 120000L)\n-\n-    cluster = EmbeddedCassandraServerHelper.getCluster()\n-\n-    /*\n-    Looks like sometimes our requests fail because Cassandra takes to long to respond,\n-    Increase this timeout as well to try to cope with this.\n-     */\n-    cluster.getConfiguration().getSocketOptions().setReadTimeoutMillis(120000)\n+    cassandra = new GenericContainer(\"cassandra:3\")\n+      .withExposedPorts(9042)\n+      .withLogConsumer(new Slf4jLogConsumer(log))\n+      .withStartupTimeout(Duration.ofSeconds(120))\n+    cassandra.start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxNDQwNQ=="}, "originalCommit": {"oid": "e1840b8e49ec380c61264fc977a9ab2deb71836b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA1OTQ3OnYy", "diffSide": "RIGHT", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyOTowOVrOHk52DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyODoyNFrOHk_4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA==", "bodyText": "I don't like this new package structure. How many classes in total are there under io.opentelemetry.javaagent.instrumentation.api.db package? Do we really need to split them even more into several subpackages?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508458508", "createdAt": "2020-10-20T12:29:09Z", "author": {"login": "iNikem"}, "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.cassandra;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.SqlNormalizer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21411639181b1718429b53a8bd1d722fb7520113"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjQ3OQ==", "bodyText": "Honestly I don't really like it as well, it's too long and there's too much nesting. How about ...api.db.normalizer? The auto-generated code probably needs its own package, because that package needs to be excluded from spotbugs/checkstyle.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508466479", "createdAt": "2020-10-20T12:41:11Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.cassandra;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.SqlNormalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}, "originalCommit": {"oid": "21411639181b1718429b53a8bd1d722fb7520113"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxNjMwNA==", "bodyText": "Makes sense", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508516304", "createdAt": "2020-10-20T13:44:49Z", "author": {"login": "iNikem"}, "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.cassandra;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.SqlNormalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}, "originalCommit": {"oid": "21411639181b1718429b53a8bd1d722fb7520113"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1NzM3NA==", "bodyText": "Done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508557374", "createdAt": "2020-10-20T14:28:24Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/cassandra/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.cassandra;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.sql.normalizer.SqlNormalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODUwOA=="}, "originalCommit": {"oid": "21411639181b1718429b53a8bd1d722fb7520113"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODEwNDA1OnYy", "diffSide": "LEFT", "path": "instrumentation/cassandra/cassandra-3.0/cassandra-3.0.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMTo1NDowNFrOHlXWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMTo1NDowNFrOHlXWWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0MTkxNA==", "bodyText": "\ud83e\udd73", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508941914", "createdAt": "2020-10-21T01:54:04Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-3.0/cassandra-3.0.gradle", "diffHunk": "@@ -1,8 +1,5 @@\n // Set properties before any plugins get loaded\n ext {\n-  // TODO switch to container-based tests (away from cassandraunit)\n-  // Tests use cassandraunit, which runs embedded Cassandra 3, which is currently incompatible with Java 9.\n-  maxJavaVersionForTests = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODEyNDYxOnYy", "diffSide": "RIGHT", "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/CassandraQueryNormalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjowNTozMFrOHlXiNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjowNTozMFrOHlXiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk0NDk0OA==", "bodyText": "this feels cassandra-specific enough, and small enough, to not include in the api", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508944948", "createdAt": "2020-10-21T02:05:30Z", "author": {"login": "trask"}, "path": "javaagent-api/src/main/java/io/opentelemetry/javaagent/instrumentation/api/db/CassandraQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CassandraQueryNormalizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODE2MTUzOnYy", "diffSide": "RIGHT", "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwMjoyNjowMlrOHlX36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToyODoxN1rOHmY4CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw==", "bodyText": "how about io.opentelemetry.javaagent.instrumentation.api.normalizer?\ni'm hoping io.opentelemetry.javaagent.instrumentation.api.db.DbSystem may go away open-telemetry/opentelemetry-java#1841, which would then leave .db empty\nalso, maybe it should go in instrumentation-api? (we can also decide this later)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r508950507", "createdAt": "2020-10-21T02:26:02Z", "author": {"login": "trask"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MzQ4OQ==", "bodyText": "api.normalizer is strange. We don't normalize API, do we? I think we need some sort of qualification here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509083489", "createdAt": "2020-10-21T08:22:31Z", "author": {"login": "iNikem"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNzgyNA==", "bodyText": "api.querynormalizer?\n\nalso, maybe it should go in instrumentation-api? (we can also decide this later)\n\nHmm, there's no need for this class to be accessible in manual instrumentations. Also, shouldn't we treat instrumentation-api kind of like a public API?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509137824", "createdAt": "2020-10-21T09:41:11Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNjMxNw==", "bodyText": "There is no need, but there can be a \"want\". Manual instrumentations may want to have access to a standard normalization logic.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509226317", "createdAt": "2020-10-21T12:13:16Z", "author": {"login": "iNikem"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5OTcyNg==", "bodyText": "How about api.normalize? or api.normalization?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r509699726", "createdAt": "2020-10-21T21:10:20Z", "author": {"login": "trask"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxNTQ5Ng==", "bodyText": "Hmm, that still sounds kind of like we're normalizing API.\nHow about leaving it like it is for now? We can come back to this issue when DbSystem gets deleted", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1427#discussion_r510015496", "createdAt": "2020-10-22T09:28:17Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-api/src/main/javacc/SqlNormalizer.jj", "diffHunk": "@@ -22,7 +11,7 @@ options {\n \n PARSER_BEGIN(SqlNormalizer)\n \n-package io.opentelemetry.javaagent.instrumentation.jdbc.normalizer;\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODk1MDUwNw=="}, "originalCommit": {"oid": "5bae7d96ac93d95187e14c739ac19825675f1467"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4714, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}