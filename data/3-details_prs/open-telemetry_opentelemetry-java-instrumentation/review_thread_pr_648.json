{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1ODYwMjEx", "number": 648, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1Mzo1MFrOEMVzTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowODo1OVrOENJBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1NTY2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1Mzo1MFrOGuZIBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1Mzo1MFrOGuZIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTMzMg==", "bodyText": "This is default, so no need to specify this manually", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451299332", "createdAt": "2020-07-08T05:53:50Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1NjMyOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDowM1rOGuZIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDowM1rOGuZIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTQyMw==", "bodyText": "Version is taken care of automatically, please remove this.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451299423", "createdAt": "2020-07-08T05:54:03Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1ODE4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDo1MlrOGuZJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDo1MlrOGuZJag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTY5MA==", "bodyText": "Muzzle is purely byte-code manipulation related functionality. No need to have it here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451299690", "createdAt": "2020-07-08T05:54:52Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1ODc0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NToxMFrOGuZJvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NToxMFrOGuZJvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTc3NQ==", "bodyText": "remove this please", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451299775", "createdAt": "2020-07-08T05:55:10Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc2MTI1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NjoxM1rOGuZLJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1NDo1MVrOGu-Apg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ==", "bodyText": "Manual instrumentations must not depend on auto-instrumentations. What functionality do you need from there?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451300135", "createdAt": "2020-07-08T05:56:13Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0MDQxNQ==", "bodyText": "I need this getter: https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/servlet/servlet-common/src/main/java/io/opentelemetry/auto/instrumentation/servlet/HttpServletRequestGetter.java", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451540415", "createdAt": "2020-07-08T13:23:42Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0Njg1OQ==", "bodyText": "I wanted to keep this pull request small. I plan to extract the servlet-common project to instrumentation-core in my next pull request.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451646859", "createdAt": "2020-07-08T15:48:26Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NDE3Nw==", "bodyText": "Take a look at #601. Probably I have done there exactly this.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451654177", "createdAt": "2020-07-08T15:58:52Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDg5NQ==", "bodyText": "Awesome. I noticed that you moved (HttpServletRequestGetter)[https://github.com/iNikem/opentelemetry-java-instrumentation/blob/servlet-common/instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/HttpServletRequestGetter.java] to the core module. I'll update this dependency to map to :instrumentation-core:servlet:servlet-common when your change gets in. Keep an eye on this in case my change gets in first", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451850895", "createdAt": "2020-07-08T22:04:47Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4NDYwNw==", "bodyText": "hey @mabdinur, I just merged #601 \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451884607", "createdAt": "2020-07-08T23:44:26Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzY1NA==", "bodyText": "@trask Thanks. I just rebased from master and updated this dependency. This should be good to go", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451903654", "createdAt": "2020-07-09T00:54:51Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/spring-webmvc-3.1-core.gradle", "diffHunk": "@@ -0,0 +1,52 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_7\n+}\n+\n+group = 'io.opentelemetry.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'muzzle'\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-webmvc'\n+    versions = \"[3.1.0.RELEASE,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+    assertInverse = true\n+  }\n+\n+  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n+  fail {\n+    group = 'org.springframework'\n+    module = 'spring-web'\n+    versions = \"[,]\"\n+    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n+  }\n+}\n+\n+sourceCompatibility = '7'\n+\n+dependencies {\n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+\n+  // TODO(mabdinur):\n+  // Move servlet-common to instrumentation-core\n+  compileOnly project(':instrumentation:servlet:servlet-common')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDEzNQ=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc2NjI2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1ODozNFrOGuZOCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1ODozNFrOGuZOCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDg3NQ==", "bodyText": "Our codes currently has 2 approaches for creating spans and setting attributes. One is using old-style \"Decorators\", another is newer one using \"Tracers\". It will take time, but the goal is to replaces Decorators with Tracers. As you extend from Tracer, please don't use \"Decorator\" in you class/field names to avoid confusion.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451300875", "createdAt": "2020-07-08T05:58:34Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracerBase;\n+import io.opentelemetry.auto.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcDecorator\n+    extends HttpServerTracerBase<HttpServletRequest, HttpServletRequest, HttpServletRequest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc3MTE1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMDo0OVrOGuZQ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMDo0OVrOGuZQ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTYwMA==", "bodyText": "There is no need to override and expose this method. Clients should use end or endExceptionally from the base class instead.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451301600", "createdAt": "2020-07-08T06:00:49Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracerBase;\n+import io.opentelemetry.auto.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcDecorator\n+    extends HttpServerTracerBase<HttpServletRequest, HttpServletRequest, HttpServletRequest> {\n+\n+  public static final SpringWebMvcDecorator DECORATE = new SpringWebMvcDecorator();\n+\n+  public Span afterStart(final Span span) {\n+    assert span != null;\n+    return span;\n+  }\n+\n+  public Span beforeFinish(final Span span) {\n+    assert span != null;\n+    return span;\n+  }\n+\n+  @Override\n+  public void onError(final Span span, final Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc3MzQzOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMTo1NFrOGuZSOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMTo1NFrOGuZSOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTk0Ng==", "bodyText": "Use endExceptionally here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451301946", "createdAt": "2020-07-08T06:01:54Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcDecorator.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);\n+\n+    try (Scope scope = tracer.withSpan(serverSpan)) {\n+      filterChain.doFilter(req, response);\n+    } catch (Throwable t) {\n+      DECORATE.onError(serverSpan, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgwODY4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxNzo0MVrOGuZnKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozMjo0MlrOGutsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzMwNg==", "bodyText": "I am not sure if my thoughts below are correct... @trask @anuraaga what do you think about it?\nAmong other things there are two objectives in introducing manual instrumentations in this repo.\n\nTo produce roughly the same result as auto-instrumentation does\nTo allow auto-instrumentation to reuse code from manual one, if possible.\n\nThis filter violates at least the first one. Auto-instrumentation for Spring MVC creates spans with Span.Kind=INTERNAL, this filter produces Span.King=SERVER.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451307306", "createdAt": "2020-07-08T06:17:41Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcDecorator.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYzNjI0MQ==", "bodyText": "The auto-instrumentation uses bytebuddy advice to add instrumentation to WebApplicationContexts, javax DispatchServerlets, and spring-web HandlerAdapters. I could mirror this approach by using spring aspects to keep things consistent. I thought a cleaner approach would be to use a spring-web filter to auto-configure traces. I'm still figuring out the pros and cons for each approach but using filters seems to be the most direct.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451636241", "createdAt": "2020-07-08T15:32:42Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webmvc-3.1-core/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcDecorator.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzMwNg=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgxMjAxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoxOTowOVrOGuZpKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1Njo1MlrOGvVCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzgxNw==", "bodyText": "What exactly does this auto-instrumentation modules (re)-uses from that \"core\" module?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451307817", "createdAt": "2020-07-08T06:19:09Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "diffHunk": "@@ -1,31 +1,7 @@\n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n \n-muzzle {\n-  pass {\n-    group = 'org.springframework'\n-    module = 'spring-webmvc'\n-    versions = \"[3.1.0.RELEASE,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-    assertInverse = true\n-  }\n-\n-  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n-  fail {\n-    group = 'org.springframework'\n-    module = 'spring-web'\n-    versions = \"[,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-  }\n-}\n-\n dependencies {\n-  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '3.1.0.RELEASE'\n-  compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'\n-//  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '2.5.6'\n-//  compileOnly group: 'javax.servlet', name: 'servlet-api', version: '2.4'\n+  compileOnly project(':instrumentation-core:spring:spring-webmvc-3.1-core')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1ODUwMw==", "bodyText": "I packaged the javax.servlet-api and spring-webmvc dependencies in the core module. I thought it would be best to keep the versions in sync. I also have plans to refactor HandlerMappingResourceNameFilter.java and SpringWebMvcDecorator.java and move it from the auto instrumentation module to the core module. This pull request #632 has these changes.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r451558503", "createdAt": "2020-07-08T13:49:16Z", "author": {"login": "mabdinur"}, "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "diffHunk": "@@ -1,31 +1,7 @@\n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n \n-muzzle {\n-  pass {\n-    group = 'org.springframework'\n-    module = 'spring-webmvc'\n-    versions = \"[3.1.0.RELEASE,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-    assertInverse = true\n-  }\n-\n-  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n-  fail {\n-    group = 'org.springframework'\n-    module = 'spring-web'\n-    versions = \"[,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-  }\n-}\n-\n dependencies {\n-  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '3.1.0.RELEASE'\n-  compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'\n-//  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '2.5.6'\n-//  compileOnly group: 'javax.servlet', name: 'servlet-api', version: '2.4'\n+  compileOnly project(':instrumentation-core:spring:spring-webmvc-3.1-core')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzgxNw=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MTAyNQ==", "bodyText": "I removed the :instrumentation-core:spring:spring-webmvc-3.1 dependency for now", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452281025", "createdAt": "2020-07-09T14:56:52Z", "author": {"login": "mabdinur"}, "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "diffHunk": "@@ -1,31 +1,7 @@\n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n \n-muzzle {\n-  pass {\n-    group = 'org.springframework'\n-    module = 'spring-webmvc'\n-    versions = \"[3.1.0.RELEASE,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    skipVersions += '3.2.1.RELEASE' // missing a required class.  (bad release?)\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-    assertInverse = true\n-  }\n-\n-  // FIXME: webmvc depends on web, so we need a separate integration for spring-web specifically.\n-  fail {\n-    group = 'org.springframework'\n-    module = 'spring-web'\n-    versions = \"[,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n-    extraDependency \"javax.servlet:javax.servlet-api:3.0.1\"\n-  }\n-}\n-\n dependencies {\n-  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '3.1.0.RELEASE'\n-  compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'\n-//  compileOnly group: 'org.springframework', name: 'spring-webmvc', version: '2.5.6'\n-//  compileOnly group: 'javax.servlet', name: 'servlet-api', version: '2.4'\n+  compileOnly project(':instrumentation-core:spring:spring-webmvc-3.1-core')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwNzgxNw=="}, "originalCommit": {"oid": "406a1f606ae035901fa95b05c9376f09a0f61905"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQwMDc1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo1NDo0NVrOGvjJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo1NDo0NVrOGvjJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMjAzNw==", "bodyText": "need to re-throw t (otherwise exception will be suppressed and alter the application behavior)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452512037", "createdAt": "2020-07-09T21:54:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcServerTracer.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;\n+\n+    Span serverSpan = DECORATE.startSpan(tracer, req, req, FILTER_METHOD, FILTER_CLASS);\n+\n+    try (Scope scope = tracer.withSpan(serverSpan)) {\n+      filterChain.doFilter(req, response);\n+      DECORATE.end(serverSpan, response.getStatus());\n+    } catch (Throwable t) {\n+      DECORATE.endExceptionally(serverSpan, t, response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769ab4fa7c9edb2bb11fc15f93b29582466da6d9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQwMTc4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo1NTowMlrOGvjJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo1NTowMlrOGvjJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxMjE3Ng==", "bodyText": "this cast is not needed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452512176", "createdAt": "2020-07-09T21:55:02Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMVCTracingFilter.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.instrumentation.springwebmvc.SpringWebMvcServerTracer.DECORATE;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.Ordered;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+public class WebMVCTracingFilter extends OncePerRequestFilter implements Ordered {\n+\n+  private static final String FILTER_CLASS = \"WebMVCTracingFilter\";\n+  private static final String FILTER_METHOD = \"doFilterInteral\";\n+  private final Tracer tracer;\n+\n+  public WebMVCTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public void doFilterInternal(\n+      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n+      throws ServletException, IOException {\n+    HttpServletRequest req = (HttpServletRequest) request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769ab4fa7c9edb2bb11fc15f93b29582466da6d9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE0NzQ1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowODo1OVrOGvqBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowODo1OVrOGvqBGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNDY2NQ==", "bodyText": "i like the idea from an earlier review of keeping public api surface of manual instrumentation minimal \ud83d\udc4d\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SpringWebMvcServerTracer\n          \n          \n            \n            class SpringWebMvcServerTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/648#discussion_r452624665", "createdAt": "2020-07-10T05:08:59Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/SpringWebMvcServerTracer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.springwebmvc;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class SpringWebMvcServerTracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278801b0f3a5aae7f2a94cb1328ebe5a633b5de8"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 348, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}