{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODU1MzE4", "number": 774, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0NDozMVrOERjURA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTozMToxOFrOERlj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODM5ODc2OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0NDozMVrOG2VCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDoyMzo0MVrOG2iwPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMTA2Mg==", "bodyText": "since we only get the server span to update its name, does it make sense to scope this down to only support that use case? e.g. updateCurrentServerSpanName(String), or do you prefer this in case other use cases emerge, e.g. updating attributes(?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459621062", "createdAt": "2020-07-23T17:44:31Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "diffHunk": "@@ -16,11 +16,124 @@\n \n package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n \n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.ExecutionException;\n \n public abstract class BaseTracer {\n+  // Keeps track of the server span for the current trace.\n+  public static final Context.Key<Span> CONTEXT_SERVER_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-server-span-key\");\n \n-  protected BaseTracer() {}\n+  protected final Tracer tracer;\n+\n+  public BaseTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public BaseTracer(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  public Span startSpan(Class<?> clazz) {\n+    String spanName = spanNameForClass(clazz);\n+    return startSpan(spanName);\n+  }\n+\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).startSpan();\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  /** Returns valid span of type SERVER from current context or <code>null</code> if not found. */\n+  // TODO when all decorator are replaced with tracers, make this method instance\n+  public static Span getCurrentServerSpan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ffda5cf6fe476cbb8cf9ebc9cd47bf0e9b97df"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0NTY5Mg==", "bodyText": "I would leave it as is for now. It is nice counterpart to getCurrentSpan and I am not comfortable claiming this is the only use-case for server spans.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459845692", "createdAt": "2020-07-24T04:23:41Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseTracer.java", "diffHunk": "@@ -16,11 +16,124 @@\n \n package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n \n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.instrumentation.api.MoreAttributes;\n import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.util.concurrent.ExecutionException;\n \n public abstract class BaseTracer {\n+  // Keeps track of the server span for the current trace.\n+  public static final Context.Key<Span> CONTEXT_SERVER_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-server-span-key\");\n \n-  protected BaseTracer() {}\n+  protected final Tracer tracer;\n+\n+  public BaseTracer() {\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n+  }\n+\n+  public BaseTracer(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  public Span startSpan(Class<?> clazz) {\n+    String spanName = spanNameForClass(clazz);\n+    return startSpan(spanName);\n+  }\n+\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).startSpan();\n+  }\n+\n+  public Span getCurrentSpan() {\n+    return tracer.getCurrentSpan();\n+  }\n+\n+  /** Returns valid span of type SERVER from current context or <code>null</code> if not found. */\n+  // TODO when all decorator are replaced with tracers, make this method instance\n+  public static Span getCurrentServerSpan() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMTA2Mg=="}, "originalCommit": {"oid": "a2ffda5cf6fe476cbb8cf9ebc9cd47bf0e9b97df"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU4Mzg5OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/server/HttpServerRequestTracingHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozNzoyMFrOG2W3mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozNzoyMFrOG2W3mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MDk2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459650969", "createdAt": "2020-07-23T18:37:20Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/server/HttpServerRequestTracingHandler.java", "diffHunk": "@@ -33,11 +34,11 @@ public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n     Channel channel = ctx.channel();\n \n     if (!(msg instanceof HttpRequest)) {\n-      Span serverSpan = TRACER.getServerSpan(channel);\n-      if (serverSpan == null) {\n+      Context serverContext = TRACER.getServerContext(channel);\n+      if (serverContext == null) {\n         ctx.fireChannelRead(msg);\n       } else {\n-        try (Scope ignored = currentContextWith(serverSpan)) {\n+        try (Scope ignored = withScopedContext(serverContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcwODI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webflux-5.0/src/main/java/io/opentelemetry/auto/instrumentation/springwebflux/server/HandlerAdapterAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDowNFrOG2YFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDowNFrOG2YFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDg4NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459670885", "createdAt": "2020-07-23T19:14:04Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/src/main/java/io/opentelemetry/auto/instrumentation/springwebflux/server/HandlerAdapterAdvice.java", "diffHunk": "@@ -59,12 +60,13 @@ public static SpanWithScope methodEnter(\n       spanWithScope = new SpanWithScope(span, currentContextWith(span));\n     }\n \n-    Context parentContext = exchange.getAttribute(AdviceUtils.PARENT_CONTEXT_ATTRIBUTE);\n-    PathPattern bestPattern = exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n-    if (parentContext != null && bestPattern != null) {\n-      // TODO this is wrong span to update. We should update the outermost server span\n-      String spanName = bestPattern.getPatternString();\n-      TracingContextUtils.getSpan(parentContext).updateName(spanName);\n+    if (context != null) {\n+      Span serverSpan = BaseTracer.CONTEXT_SERVER_SPAN_KEY.get(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcxOTcyOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/DispatcherServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNzoyNVrOG2YMTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNzoyNVrOG2YMTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MjY1NQ==", "bodyText": "span is ended above in stopSpan\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO sooo this adds throwable but does not end the span?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459672655", "createdAt": "2020-07-23T19:17:25Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/DispatcherServletInstrumentation.java", "diffHunk": "@@ -134,7 +133,8 @@ public static void nameResource(@Advice.Argument(3) final Exception exception) {\n       if (span.getContext().isValid() && exception != null) {\n         // We want to capture the stacktrace, but that doesn't mean it should be an error.\n         // We rely on a decorator to set the error state based on response code. (5xx -> error)\n-        DECORATE.addThrowable(span, exception);\n+        // TODO sooo this adds throwable but does not end the span?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODc2NjM3OnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs/jaxrs-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTozMToxOFrOG2YpiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDoyNjoxMFrOG2iyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4MDEzNg==", "bodyText": "would be better to set the span name directly in the Span.Builder in this case, i'd be happy with just a TODO marker here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459680136", "createdAt": "2020-07-23T19:31:18Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs/jaxrs-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -18,55 +18,49 @@\n \n import static io.opentelemetry.auto.bootstrap.WeakMap.Provider.newWeakMap;\n \n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.WeakMap;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n import io.opentelemetry.auto.tooling.ClassHierarchyIterable;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.Path;\n \n-public class JaxRsAnnotationsDecorator extends BaseDecorator {\n+public class JaxRsAnnotationsTracer extends BaseTracer {\n   public static final String ABORT_FILTER_CLASS =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.class\";\n   public static final String ABORT_HANDLED =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.handled\";\n-  public static final String ABORT_PARENT =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.parent\";\n-  public static final String ABORT_SPAN =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.span\";\n \n-  public static final JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.jaxrs-2.0\");\n+  public static final JaxRsAnnotationsTracer TRACER = new JaxRsAnnotationsTracer();\n \n   private final WeakMap<Class<?>, Map<Method, String>> spanNames = newWeakMap();\n \n-  public void onJaxRsSpan(\n-      final Span span, final Span parent, final Class target, final Method method) {\n-\n-    String spanName = getPathSpanName(target, method);\n-    updateParent(parent, spanName);\n+  public Span startSpan(final Class<?> target, final Method method) {\n+    // We create span and immediately update its name\n+    // We do that in order to reuse logic inside updateSpanNames method, which is used externally as\n+    // well.\n+    Span span = tracer.spanBuilder(\"jax-rs.request\").startSpan();\n+    updateSpanNames(span, getCurrentServerSpan(), target, method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTg2NA==", "bodyText": "Have you seen my comment? :) Setting name to builder would lead to almost identical two methods in this class.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459839864", "createdAt": "2020-07-24T03:50:51Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs/jaxrs-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -18,55 +18,49 @@\n \n import static io.opentelemetry.auto.bootstrap.WeakMap.Provider.newWeakMap;\n \n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.WeakMap;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n import io.opentelemetry.auto.tooling.ClassHierarchyIterable;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.Path;\n \n-public class JaxRsAnnotationsDecorator extends BaseDecorator {\n+public class JaxRsAnnotationsTracer extends BaseTracer {\n   public static final String ABORT_FILTER_CLASS =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.class\";\n   public static final String ABORT_HANDLED =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.handled\";\n-  public static final String ABORT_PARENT =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.parent\";\n-  public static final String ABORT_SPAN =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.span\";\n \n-  public static final JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.jaxrs-2.0\");\n+  public static final JaxRsAnnotationsTracer TRACER = new JaxRsAnnotationsTracer();\n \n   private final WeakMap<Class<?>, Map<Method, String>> spanNames = newWeakMap();\n \n-  public void onJaxRsSpan(\n-      final Span span, final Span parent, final Class target, final Method method) {\n-\n-    String spanName = getPathSpanName(target, method);\n-    updateParent(parent, spanName);\n+  public Span startSpan(final Class<?> target, final Method method) {\n+    // We create span and immediately update its name\n+    // We do that in order to reuse logic inside updateSpanNames method, which is used externally as\n+    // well.\n+    Span span = tracer.spanBuilder(\"jax-rs.request\").startSpan();\n+    updateSpanNames(span, getCurrentServerSpan(), target, method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4MDEzNg=="}, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0NjE4MA==", "bodyText": "ah, I missed the comment. I still think better to set the span name directly on span builder instead of calling updateName right afterwards, even if it requires some duplicate code, but not a big deal", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/774#discussion_r459846180", "createdAt": "2020-07-24T04:26:10Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs/jaxrs-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -18,55 +18,49 @@\n \n import static io.opentelemetry.auto.bootstrap.WeakMap.Provider.newWeakMap;\n \n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.WeakMap;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n import io.opentelemetry.auto.tooling.ClassHierarchyIterable;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.Path;\n \n-public class JaxRsAnnotationsDecorator extends BaseDecorator {\n+public class JaxRsAnnotationsTracer extends BaseTracer {\n   public static final String ABORT_FILTER_CLASS =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.class\";\n   public static final String ABORT_HANDLED =\n       \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.handled\";\n-  public static final String ABORT_PARENT =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.parent\";\n-  public static final String ABORT_SPAN =\n-      \"io.opentelemetry.auto.instrumentation.jaxrs2.filter.abort.span\";\n \n-  public static final JaxRsAnnotationsDecorator DECORATE = new JaxRsAnnotationsDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.jaxrs-2.0\");\n+  public static final JaxRsAnnotationsTracer TRACER = new JaxRsAnnotationsTracer();\n \n   private final WeakMap<Class<?>, Map<Method, String>> spanNames = newWeakMap();\n \n-  public void onJaxRsSpan(\n-      final Span span, final Span parent, final Class target, final Method method) {\n-\n-    String spanName = getPathSpanName(target, method);\n-    updateParent(parent, spanName);\n+  public Span startSpan(final Class<?> target, final Method method) {\n+    // We create span and immediately update its name\n+    // We do that in order to reuse logic inside updateSpanNames method, which is used externally as\n+    // well.\n+    Span span = tracer.spanBuilder(\"jax-rs.request\").startSpan();\n+    updateSpanNames(span, getCurrentServerSpan(), target, method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4MDEzNg=="}, "originalCommit": {"oid": "6724e0d693627f84815ded1c5d3cf95715e79c2e"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 140, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}