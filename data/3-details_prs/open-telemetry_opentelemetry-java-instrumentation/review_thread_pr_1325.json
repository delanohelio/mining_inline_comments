{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NzM0NDIz", "number": 1325, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowMzoyMlrOEqRG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMjoyMVrOEqZ9jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU1OTY2OnYy", "diffSide": "RIGHT", "path": "gradle/spotbugs-exclude.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowMzoyMlrOHcYAzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowMzoyMlrOHcYAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNTU5OQ==", "bodyText": "We should fix it instead of silencing. The correct way is to pass Callable, as HttpServerTest#controller expects. Which now means just lambda.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499515599", "createdAt": "2020-10-05T11:03:22Z", "author": {"login": "iNikem"}, "path": "gradle/spotbugs-exclude.xml", "diffHunk": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<FindBugsFilter>\n+  <Match>\n+    <Class name=\"io.opentelemetry.instrumentation.auto.jdbc.normalizer.SimpleCharStream\"/>\n+    <Not>\n+      <Bug code=\"DM_DEFAULT_ENCODING\"/> <!-- ignore default encoding for auto-genned class -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"io.opentelemetry.auto.util.gc.GCUtils\"/>\n+    <Not>\n+      <Bug code=\"DM_GC\"/> <!-- forced GC only used in testing -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"~muzzle\\.TestClasses.*\"/>\n+    <Not>\n+      <Bug code=\"MS_SHOULD_BE_FINAL\"/> <!-- final field warnings can be ignored for this test class -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"~HttpServletResponseTest\\$.*\"/>\n+    <Not>\n+      <Bug code=\"SE_INNER_CLASS\"/> <!-- inner class serialization warning can be ignored for testing purposes -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"~HttpServletTest\\$.*\"/>\n+    <Not>\n+      <Bug code=\"SE_INNER_CLASS\"/> <!-- inner class serialization warning can be ignored for testing purposes -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"~SpymemcachedTest\\$.*\"/>\n+    <Not>\n+      <Bug code=\"SE_INNER_CLASS\"/> <!-- inner class serialization warning can be ignored for testing purposes -->\n+    </Not>\n+  </Match>\n+\n+  <Match>\n+    <Class name=\"~TestServlets.*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU2NTk0OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowNToyNVrOHcYEwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozMjoyOFrOHco76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjYxMA==", "bodyText": "Can we instead ignore this rule? I think @trask will object, but why static final variable MUST be in uppercase?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499516610", "createdAt": "2020-10-05T11:05:25Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -46,7 +46,7 @@ abstract class SmokeTest extends Specification {\n \n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n \n-  protected static OkHttpClient client = OkHttpUtils.client()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyODc2MA==", "bodyText": "spotBugs actually doesn't complain about the uppercase, just the missing final declaration. As for the uppercase, I believe it's  a JLS convention for constants, but given the naming exception done for loggers, I don't see why it cannot be the same here - just possibly, have to look out for other static analysis checkers complaining about it ;)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499528760", "createdAt": "2020-10-05T11:28:31Z", "author": {"login": "imavroukakis"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -46,7 +46,7 @@ abstract class SmokeTest extends Specification {\n \n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n \n-  protected static OkHttpClient client = OkHttpUtils.client()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjYxMA=="}, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2OTg0Ng==", "bodyText": "I don't think JLS has any naming conventions. Has it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499569846", "createdAt": "2020-10-05T12:44:41Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -46,7 +46,7 @@ abstract class SmokeTest extends Specification {\n \n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n \n-  protected static OkHttpClient client = OkHttpUtils.client()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjYxMA=="}, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMjE2MA==", "bodyText": "https://docs.oracle.com/javase/specs/jls/se11/html/jls-6.html look for \"Constant Names\" section.\nEmphasis, mine.\n\nThe names of constants in interface types should be, and final variables of class types may conventionally be, a sequence of one or more words, acronyms, or abbreviations, all uppercase\n\nThe capitalisation could have been a misrepresentation though, and the intent may have been to use them for primitives, but it somehow stuck for everything", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499602160", "createdAt": "2020-10-05T13:34:06Z", "author": {"login": "imavroukakis"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -46,7 +46,7 @@ abstract class SmokeTest extends Specification {\n \n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n \n-  protected static OkHttpClient client = OkHttpUtils.client()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjYxMA=="}, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5Mjg3NQ==", "bodyText": "Can we instead ignore this rule? I think @trask will object, but why static final variable MUST be in uppercase?\n\nI do not object \ud83d\ude02\nstatic final variables should only be uppercase if they are constants, see https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names for \"what is a constant\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499792875", "createdAt": "2020-10-05T18:32:28Z", "author": {"login": "trask"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -46,7 +46,7 @@ abstract class SmokeTest extends Specification {\n \n   private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n \n-  protected static OkHttpClient client = OkHttpUtils.client()\n+  protected static final OkHttpClient CLIENT = OkHttpUtils.client()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjYxMA=="}, "originalCommit": {"oid": "0b5af13c8e0b01f03bd93a2c7a3cb5f45936317f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxMDA1OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/AgentConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMjoyMVrOHcl-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoyNjoyM1rOHcovlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDM2OA==", "bodyText": "Really minor: you can now import ConfigBuilder", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499744368", "createdAt": "2020-10-05T17:02:21Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/AgentConfigBuilder.java", "diffHunk": "@@ -12,12 +12,12 @@\n import java.util.Map;\n import java.util.Properties;\n \n-public final class ConfigBuilder\n-    extends io.opentelemetry.sdk.common.export.ConfigBuilder<ConfigBuilder> {\n+public final class AgentConfigBuilder\n+    extends io.opentelemetry.sdk.common.export.ConfigBuilder<AgentConfigBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b439de4416bac1b7aaa74b77813f311e09c58b4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4OTcxNg==", "bodyText": "good point, let's keep it clean.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1325#discussion_r499789716", "createdAt": "2020-10-05T18:26:23Z", "author": {"login": "imavroukakis"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/AgentConfigBuilder.java", "diffHunk": "@@ -12,12 +12,12 @@\n import java.util.Map;\n import java.util.Properties;\n \n-public final class ConfigBuilder\n-    extends io.opentelemetry.sdk.common.export.ConfigBuilder<ConfigBuilder> {\n+public final class AgentConfigBuilder\n+    extends io.opentelemetry.sdk.common.export.ConfigBuilder<AgentConfigBuilder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDM2OA=="}, "originalCommit": {"oid": "3b439de4416bac1b7aaa74b77813f311e09c58b4"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4798, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}