{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzQwMzk5", "number": 1848, "title": "Add ComponentInstaller SPI and use it for OpenTelemetry SDK", "bodyText": "Supersedes #1629", "createdAt": "2020-12-08T10:14:31Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848", "merged": true, "mergeCommit": {"oid": "f69217e2a4ffd8e40b44659806b1192576483262"}, "closed": true, "closedAt": "2020-12-18T06:55:25Z", "author": {"login": "pavolloffay"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlF0NTgFqTU0OTk5ODQwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnFRkmAFqTU1NDcxNDM3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTk4NDAx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-549998401", "createdAt": "2020-12-11T10:58:54Z", "commit": {"oid": "4efa47669cd9107a57488b074c6ac7ce1929daaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1ODo1NFrOIDzwPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1ODo1NFrOIDzwPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NDU3Mg==", "bodyText": "Why did you comment this out?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r540864572", "createdAt": "2020-12-11T10:58:54Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-bootstrap/src/main/java/io/opentelemetry/javaagent/bootstrap/AgentInitializer.java", "diffHunk": "@@ -130,7 +130,7 @@ public String getName() {\n \n     @Override\n     public void execute() {\n-      installAgentTracer();\n+      //      installAgentTracer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4efa47669cd9107a57488b074c6ac7ce1929daaf"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4efa47669cd9107a57488b074c6ac7ce1929daaf", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4efa47669cd9107a57488b074c6ac7ce1929daaf", "committedDate": "2020-12-09T17:50:09Z", "message": "Use api\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}, "afterCommit": {"oid": "05526cc2afa4af87c8cdc47c9cea4945e36b3886", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05526cc2afa4af87c8cdc47c9cea4945e36b3886", "committedDate": "2020-12-14T14:41:34Z", "message": "remove comment\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxODczMDg3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-551873087", "createdAt": "2020-12-14T20:38:06Z", "commit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDozODoyNlrOIFnPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDo1OTo0MVrOIFonoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1NjY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link ComponentInstaller} can be used to install to install any implementation providers that\n          \n          \n            \n             * {@link ComponentInstaller} can be used to install any implementation providers that", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r542756652", "createdAt": "2020-12-14T20:38:26Z", "author": {"login": "trask"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/ComponentInstaller.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi;\n+\n+/**\n+ * {@link ComponentInstaller} can be used to install to install any implementation providers that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1Nzc0NA==", "bodyText": "can we do this automatically before calling ComponentInstallers?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r542757744", "createdAt": "2020-12-14T20:39:26Z", "author": {"login": "trask"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/ComponentInstaller.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi;\n+\n+/**\n+ * {@link ComponentInstaller} can be used to install to install any implementation providers that\n+ * are used by instrumentations. For instance Java agent uses this to install OpenTelemetry SDK. The\n+ * instrumentation uses shaded OpenTelemetry API that lives in the bootstrap classlaoder and the\n+ * implementation (SDK) is installed via service loader from agent's classloader. This way the\n+ * application does not have a direct access to the OpenTelemetry SDK classes. The same approach can\n+ * be done for other APIs used by custom instrumentations.\n+ *\n+ * <p>Before using service loader set the context classloader to agent's classloader e.g. {@code\n+ * Thread.currentThread().setContextClassLoader(ComponentInstaller.class.getClassLoader())} if the\n+ * component does not accept classloader when loading implementation via service loader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc2MjE5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Runs before instrumentations are installed to ByteBuddy. Execute only a minimal code because it\n          \n          \n            \n               * agent boostrap sequence and instrumentations should be installed as early as possible.\n          \n          \n            \n               * Runs before instrumentations are installed to ByteBuddy. Execute only a minimal code because any classes loaded before the instrumentations are installed will have to be retransformed, which takes extra time, and more importantly means that fields can't be added to those classes and InstrumentationContext falls back to the less performant Map implementation for those classes.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r542762193", "createdAt": "2020-12-14T20:43:41Z", "author": {"login": "trask"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/ComponentInstaller.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi;\n+\n+/**\n+ * {@link ComponentInstaller} can be used to install to install any implementation providers that\n+ * are used by instrumentations. For instance Java agent uses this to install OpenTelemetry SDK. The\n+ * instrumentation uses shaded OpenTelemetry API that lives in the bootstrap classlaoder and the\n+ * implementation (SDK) is installed via service loader from agent's classloader. This way the\n+ * application does not have a direct access to the OpenTelemetry SDK classes. The same approach can\n+ * be done for other APIs used by custom instrumentations.\n+ *\n+ * <p>Before using service loader set the context classloader to agent's classloader e.g. {@code\n+ * Thread.currentThread().setContextClassLoader(ComponentInstaller.class.getClassLoader())} if the\n+ * component does not accept classloader when loading implementation via service loader.\n+ *\n+ * <p>This is a service provider interface that requires implementations to be registered in {@code\n+ * META-INF/services} folder.\n+ */\n+public interface ComponentInstaller {\n+\n+  /**\n+   * Runs before instrumentations are installed to ByteBuddy. Execute only a minimal code because it\n+   * agent boostrap sequence and instrumentations should be installed as early as possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3MzYzMA==", "bodyText": "I'm not sure this is correct to call installAgentTracer() here, check out the existing callers of installAgentTracer()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r542773630", "createdAt": "2020-12-14T20:54:33Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/OpenTelemetryInstaller.java", "diffHunk": "@@ -30,15 +34,47 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TracerInstaller {\n-  private static final Logger log = LoggerFactory.getLogger(TracerInstaller.class);\n+@AutoService(ComponentInstaller.class)\n+public class OpenTelemetryInstaller implements ComponentInstaller {\n+  private static final Logger log = LoggerFactory.getLogger(OpenTelemetryInstaller.class);\n \n   private static final String EXPORTER_JAR_CONFIG = \"otel.exporter.jar\";\n   private static final String EXPORTERS_CONFIG = \"otel.exporter\"; // this name is from spec\n   private static final String PROPAGATORS_CONFIG = \"otel.propagators\"; // this name is from spec\n   private static final String JAVAAGENT_ENABLED_CONFIG = \"otel.javaagent.enabled\";\n   private static final List<String> DEFAULT_EXPORTERS = Collections.singletonList(\"otlp\");\n \n+  @Override\n+  public void beforeByteBuddyAgent() {\n+    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      // calling (shaded) OpenTelemetry.getGlobalTracerProvider() with context class loader set to\n+      // the\n+      // agent class loader, so that SPI finds the agent's (isolated) SDK, and (shaded)\n+      // OpenTelemetry registers it, and then when instrumentation calls (shaded)\n+      // OpenTelemetry.getGlobalTracerProvider() later, they get back the agent's (isolated) SDK\n+      //\n+      // but if we don't trigger this early registration, then if instrumentation is the first to\n+      // call (shaded) OpenTelemetry.getGlobalTracerProvider(), then SPI can't see the agent class\n+      // loader,\n+      // and so (shaded) OpenTelemetry registers the no-op TracerFactory, and it cannot be replaced\n+      // later\n+      Thread.currentThread().setContextClassLoader(OpenTelemetryInstaller.class.getClassLoader());\n+      OpenTelemetry.getGlobalTracerProvider();\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n+    }\n+\n+    OpenTelemetrySdkAccess.internalSetForceFlush(\n+        (timeout, unit) ->\n+            OpenTelemetrySdk.getGlobalTracerManagement().forceFlush().join(timeout, unit));\n+  }\n+\n+  @Override\n+  public void afterByteBuddyAgent() {\n+    installAgentTracer();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3OTI5Nw==", "bodyText": "it feels a little odd to use the OpenTelemetryInstaller class as both an SPI interface and as a static entry point here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r542779297", "createdAt": "2020-12-14T20:59:41Z", "author": {"login": "trask"}, "path": "javaagent-bootstrap/src/main/java/io/opentelemetry/javaagent/bootstrap/AgentInitializer.java", "diffHunk": "@@ -159,7 +159,7 @@ private static synchronized void installAgentTracer() {\n     try {\n       // install global tracer\n       Class<?> tracerInstallerClass =\n-          AGENT_CLASSLOADER.loadClass(\"io.opentelemetry.javaagent.tooling.TracerInstaller\");\n+          AGENT_CLASSLOADER.loadClass(\"io.opentelemetry.javaagent.tooling.OpenTelemetryInstaller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTM1NjAy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-552135602", "createdAt": "2020-12-15T06:18:18Z", "commit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoxODoxOFrOIF6t8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoxODoxOFrOIF6t8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NTgyNQ==", "bodyText": "Oh we should be able to remove this now since we're on 0.12.0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543075825", "createdAt": "2020-12-15T06:18:18Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/TestOpenTelemetryInstaller.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.test;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.TracerProvider;\n+import io.opentelemetry.api.trace.propagation.HttpTraceContext;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.javaagent.tooling.OpenTelemetryInstaller;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import java.lang.reflect.Method;\n+\n+public class TestOpenTelemetryInstaller extends OpenTelemetryInstaller {\n+\n+  private final SpanProcessor spanProcessor;\n+\n+  public TestOpenTelemetryInstaller(SpanProcessor spanProcessor) {\n+    this.spanProcessor = spanProcessor;\n+  }\n+\n+  @Override\n+  public void afterByteBuddyAgent() {\n+    // TODO this is probably temporary until default propagators are supplied by SDK\n+    //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n+    //  currently checking against no-op implementation so that it won't override aws-lambda\n+    //  propagator configuration\n+    if (OpenTelemetry.getGlobalPropagators()\n+        .getTextMapPropagator()\n+        .getClass()\n+        .getSimpleName()\n+        .equals(\"NoopTextMapPropagator\")) {\n+      // Workaround https://github.com/open-telemetry/opentelemetry-java/pull/2096\n+      setGlobalPropagators(\n+          DefaultContextPropagators.builder()\n+              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .build());\n+    }\n+    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(spanProcessor);\n+  }\n+\n+  // Workaround https://github.com/open-telemetry/opentelemetry-java/pull/2096\n+  public static void setGlobalPropagators(ContextPropagators propagators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b9648d215e7650b224547033742f25bada4d225", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b9648d215e7650b224547033742f25bada4d225", "committedDate": "2020-12-15T09:36:34Z", "message": "Fix javadocs\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}, "afterCommit": {"oid": "8708742a98e3e628379ba4f198f7cdf29ce77498", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8708742a98e3e628379ba4f198f7cdf29ce77498", "committedDate": "2020-12-15T09:36:48Z", "message": "Fix javadocs\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTA1OTcx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-552505971", "createdAt": "2020-12-15T14:19:58Z", "commit": {"oid": "2fa142a682b973497d47debc0a367dafa6361668"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxOTo1OFrOIGNjqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMToyOVrOIGNrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NDQ4OQ==", "bodyText": "JMXFetch is a DataDog thing that's no longer present in OTel javaagent, we should consider removing this code in separate issue/PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543384489", "createdAt": "2020-12-15T14:19:58Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -160,7 +140,69 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n \n     agentBuilder = customizeByteBuddyAgent(agentBuilder);\n     log.debug(\"Installed {} instrumenter(s)\", numInstrumenters);\n-    return agentBuilder.installOn(inst);\n+    ResettableClassFileTransformer resettableClassFileTransformer = agentBuilder.installOn(inst);\n+    installComponentsAfterByteBuddy(componentInstallers);\n+    return resettableClassFileTransformer;\n+  }\n+\n+  private static void installComponentsBeforeByteBuddy(\n+      Iterable<ComponentInstaller> componentInstallers) {\n+    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      // calling (shaded) OpenTelemetry.getGlobalTracerProvider() with context class loader set to\n+      // the\n+      // agent class loader, so that SPI finds the agent's (isolated) SDK, and (shaded)\n+      // OpenTelemetry registers it, and then when instrumentation calls (shaded)\n+      // OpenTelemetry.getGlobalTracerProvider() later, they get back the agent's (isolated) SDK\n+      //\n+      // but if we don't trigger this early registration, then if instrumentation is the first to\n+      // call (shaded) OpenTelemetry.getGlobalTracerProvider(), then SPI can't see the agent class\n+      // loader,\n+      // and so (shaded) OpenTelemetry registers the no-op TracerFactory, and it cannot be replaced\n+      // later\n+      Thread.currentThread().setContextClassLoader(AgentInstaller.class.getClassLoader());\n+      for (ComponentInstaller componentInstaller : componentInstallers) {\n+        componentInstaller.beforeByteBuddyAgent();\n+      }\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n+    }\n+  }\n+\n+  private static void installComponentsAfterByteBuddy(\n+      Iterable<ComponentInstaller> componentInstallers) {\n+    /*\n+     * java.util.logging.LogManager maintains a final static LogManager, which is created during class initialization.\n+     *\n+     * JMXFetch uses jre bootstrap classes which touch this class. This means applications which require a custom log\n+     * manager may not have a chance to set the global log manager if jmxfetch runs first. JMXFetch will incorrectly\n+     * set the global log manager in cases where the app sets the log manager system property or when the log manager\n+     * class is not on the system classpath.\n+     *\n+     * Our solution is to delay the initialization of jmxfetch when we detect a custom log manager being used.\n+     *\n+     * Once we see the LogManager class loading, it's safe to start jmxfetch because the application is already setting\n+     * the global log manager and jmxfetch won't be able to touch it due to classloader locking.\n+     */\n+\n+    /*\n+     * Similar thing happens with AgentTracer on (at least) zulu-8 because it uses OkHttp which indirectly loads JFR\n+     * events which in turn loads LogManager. This is not a problem on newer JDKs because there JFR uses different\n+     * logging facility.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa142a682b973497d47debc0a367dafa6361668"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NjQ3OA==", "bodyText": "Can you preserve this comment in OpenTelemetryInstaller?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543386478", "createdAt": "2020-12-15T14:21:29Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -81,30 +81,10 @@ public static void installBytebuddyAgent(Instrumentation inst) {\n   public static ResettableClassFileTransformer installBytebuddyAgent(\n       Instrumentation inst,\n       boolean skipAdditionalLibraryMatcher,\n+      Iterable<ComponentInstaller> componentInstallers,\n       AgentBuilder.Listener... listeners) {\n \n-    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n-    try {\n-      // calling (shaded) OpenTelemetry.getGlobalTracerProvider() with context class loader set to\n-      // the\n-      // agent class loader, so that SPI finds the agent's (isolated) SDK, and (shaded)\n-      // OpenTelemetry registers it, and then when instrumentation calls (shaded)\n-      // OpenTelemetry.getGlobalTracerProvider() later, they get back the agent's (isolated) SDK\n-      //\n-      // but if we don't trigger this early registration, then if instrumentation is the first to\n-      // call (shaded) OpenTelemetry.getGlobalTracerProvider(), then SPI can't see the agent class\n-      // loader,\n-      // and so (shaded) OpenTelemetry registers the no-op TracerFactory, and it cannot be replaced\n-      // later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa142a682b973497d47debc0a367dafa6361668"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMTQ5Mjgw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-553149280", "createdAt": "2020-12-16T00:11:59Z", "commit": {"oid": "acac6d24864595c44f906d2e9f8a2e27d7de114d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDoxMTo1OVrOIGluCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDozMzozOVrOIGmO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MDM2Mw==", "bodyText": "can move this to AgentInstaller also", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543780363", "createdAt": "2020-12-16T00:11:59Z", "author": {"login": "trask"}, "path": "javaagent-bootstrap/src/main/java/io/opentelemetry/javaagent/bootstrap/AgentInitializer.java", "diffHunk": "@@ -246,57 +143,11 @@ private static boolean isDebugMode() {\n     return false;\n   }\n \n-  /**\n-   * Search for java or agent-tracer sysprops which indicate that a custom log manager will be used.\n-   * Also search for any app classes known to set a custom log manager.\n-   *\n-   * @return true if we detect a custom log manager being used.\n-   */\n-  private static boolean isAppUsingCustomLogManager() {\n-    String tracerCustomLogManSysprop = \"otel.app.customlogmanager\";\n-    String customLogManagerProp = System.getProperty(tracerCustomLogManSysprop);\n-    String customLogManagerEnv =\n-        System.getenv(tracerCustomLogManSysprop.replace('.', '_').toUpperCase());\n-\n-    if (customLogManagerProp != null || customLogManagerEnv != null) {\n-      log.debug(\"Prop - customlogmanager: \" + customLogManagerProp);\n-      log.debug(\"Env - customlogmanager: \" + customLogManagerEnv);\n-      // Allow setting to skip these automatic checks:\n-      return Boolean.parseBoolean(customLogManagerProp)\n-          || Boolean.parseBoolean(customLogManagerEnv);\n-    }\n-\n-    String jbossHome = System.getenv(\"JBOSS_HOME\");\n-    if (jbossHome != null) {\n-      log.debug(\"Env - jboss: \" + jbossHome);\n-      // JBoss/Wildfly is known to set a custom log manager after startup.\n-      // Originally we were checking for the presence of a jboss class,\n-      // but it seems some non-jboss applications have jboss classes on the classpath.\n-      // This would cause jmxfetch initialization to be delayed indefinitely.\n-      // Checking for an environment variable required by jboss instead.\n-      return true;\n-    }\n-\n-    String logManagerProp = System.getProperty(\"java.util.logging.manager\");\n-    if (logManagerProp != null) {\n-      boolean onSysClasspath =\n-          ClassLoader.getSystemResource(logManagerProp.replaceAll(\"\\\\.\", \"/\") + \".class\") != null;\n-      log.debug(\"Prop - logging.manager: \" + logManagerProp);\n-      log.debug(\"logging.manager on system classpath: \" + onSysClasspath);\n-      // Some applications set java.util.logging.manager but never actually initialize the logger.\n-      // Check to see if the configured manager is on the system classpath.\n-      // If so, it should be safe to initialize jmxfetch which will setup the log manager.\n-      return !onSysClasspath;\n-    }\n-\n-    return false;\n-  }\n-\n   private static boolean isJavaBefore9() {\n     return System.getProperty(\"java.version\").startsWith(\"1.\");\n   }\n \n-  private static boolean isJavaBefore9WithJfr() {\n+  public static boolean isJavaBefore9WithJfr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acac6d24864595c44f906d2e9f8a2e27d7de114d"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MTY5OA==", "bodyText": "oh i see this is delayed via the callback when needed \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543781698", "createdAt": "2020-12-16T00:15:43Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/OpenTelemetryInstaller.java", "diffHunk": "@@ -30,15 +34,47 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TracerInstaller {\n-  private static final Logger log = LoggerFactory.getLogger(TracerInstaller.class);\n+@AutoService(ComponentInstaller.class)\n+public class OpenTelemetryInstaller implements ComponentInstaller {\n+  private static final Logger log = LoggerFactory.getLogger(OpenTelemetryInstaller.class);\n \n   private static final String EXPORTER_JAR_CONFIG = \"otel.exporter.jar\";\n   private static final String EXPORTERS_CONFIG = \"otel.exporter\"; // this name is from spec\n   private static final String PROPAGATORS_CONFIG = \"otel.propagators\"; // this name is from spec\n   private static final String JAVAAGENT_ENABLED_CONFIG = \"otel.javaagent.enabled\";\n   private static final List<String> DEFAULT_EXPORTERS = Collections.singletonList(\"otlp\");\n \n+  @Override\n+  public void beforeByteBuddyAgent() {\n+    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      // calling (shaded) OpenTelemetry.getGlobalTracerProvider() with context class loader set to\n+      // the\n+      // agent class loader, so that SPI finds the agent's (isolated) SDK, and (shaded)\n+      // OpenTelemetry registers it, and then when instrumentation calls (shaded)\n+      // OpenTelemetry.getGlobalTracerProvider() later, they get back the agent's (isolated) SDK\n+      //\n+      // but if we don't trigger this early registration, then if instrumentation is the first to\n+      // call (shaded) OpenTelemetry.getGlobalTracerProvider(), then SPI can't see the agent class\n+      // loader,\n+      // and so (shaded) OpenTelemetry registers the no-op TracerFactory, and it cannot be replaced\n+      // later\n+      Thread.currentThread().setContextClassLoader(OpenTelemetryInstaller.class.getClassLoader());\n+      OpenTelemetry.getGlobalTracerProvider();\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n+    }\n+\n+    OpenTelemetrySdkAccess.internalSetForceFlush(\n+        (timeout, unit) ->\n+            OpenTelemetrySdk.getGlobalTracerManagement().forceFlush().join(timeout, unit));\n+  }\n+\n+  @Override\n+  public void afterByteBuddyAgent() {\n+    installAgentTracer();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc3MzYzMA=="}, "originalCommit": {"oid": "e00759cae111833b0f13b0023bb9adcaf0ae64ff"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MjU3OQ==", "bodyText": "I think nice to pass the list into InstallComponentsAfterByteBuddyCallback, consolidating into a single callback", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543782579", "createdAt": "2020-12-16T00:17:40Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -160,7 +140,58 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n \n     agentBuilder = customizeByteBuddyAgent(agentBuilder);\n     log.debug(\"Installed {} instrumenter(s)\", numInstrumenters);\n-    return agentBuilder.installOn(inst);\n+    ResettableClassFileTransformer resettableClassFileTransformer = agentBuilder.installOn(inst);\n+    installComponentsAfterByteBuddy(componentInstallers);\n+    return resettableClassFileTransformer;\n+  }\n+\n+  private static void installComponentsBeforeByteBuddy(\n+      Iterable<ComponentInstaller> componentInstallers) {\n+    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(AgentInstaller.class.getClassLoader());\n+      for (ComponentInstaller componentInstaller : componentInstallers) {\n+        componentInstaller.beforeByteBuddyAgent();\n+      }\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n+    }\n+  }\n+\n+  private static void installComponentsAfterByteBuddy(\n+      Iterable<ComponentInstaller> componentInstallers) {\n+    /*\n+     * java.util.logging.LogManager maintains a final static LogManager, which is created during class initialization.\n+     *\n+     * JMXFetch uses jre bootstrap classes which touch this class. This means applications which require a custom log\n+     * manager may not have a chance to set the global log manager if jmxfetch runs first. JMXFetch will incorrectly\n+     * set the global log manager in cases where the app sets the log manager system property or when the log manager\n+     * class is not on the system classpath.\n+     *\n+     * Our solution is to delay the initialization of jmxfetch when we detect a custom log manager being used.\n+     *\n+     * Once we see the LogManager class loading, it's safe to start jmxfetch because the application is already setting\n+     * the global log manager and jmxfetch won't be able to touch it due to classloader locking.\n+     */\n+\n+    /*\n+     * Similar thing happens with AgentTracer on (at least) zulu-8 because it uses OkHttp which indirectly loads JFR\n+     * events which in turn loads LogManager. This is not a problem on newer JDKs because there JFR uses different\n+     * logging facility.\n+     */\n+    boolean appUsingCustomLogManager = isAppUsingCustomLogManager();\n+    if (AgentInitializer.isJavaBefore9WithJfr() && appUsingCustomLogManager) {\n+      log.debug(\"Custom logger detected. Delaying Agent Tracer initialization.\");\n+      for (ComponentInstaller componentInstaller : componentInstallers) {\n+        registerClassLoadCallback(\n+            \"java.util.logging.LogManager\",\n+            new InstallComponentAfterByteBuddyCallback(componentInstaller));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acac6d24864595c44f906d2e9f8a2e27d7de114d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4ODQyMQ==", "bodyText": "I think setting the context class loader would make more sense (and be more self-explanatory) up in AgentInitializer.startAgent(), e.g.\n        ClassLoader agentClassLoader = createAgentClassLoader(\"inst\", bootstrapUrl);\n        Class<?> agentInstallerClass =\n            agentClassLoader.loadClass(\"io.opentelemetry.javaagent.tooling.AgentInstaller\");\n        Method agentInstallerMethod =\n            agentInstallerClass.getMethod(\"installBytebuddyAgent\", Instrumentation.class);\n        ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n        try {\n          Thread.currentThread().setContextClassLoader(agentClassLoader);\n          agentInstallerMethod.invoke(null, inst);\n        } finally {\n          Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n        }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543788421", "createdAt": "2020-12-16T00:32:38Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -160,7 +140,58 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n \n     agentBuilder = customizeByteBuddyAgent(agentBuilder);\n     log.debug(\"Installed {} instrumenter(s)\", numInstrumenters);\n-    return agentBuilder.installOn(inst);\n+    ResettableClassFileTransformer resettableClassFileTransformer = agentBuilder.installOn(inst);\n+    installComponentsAfterByteBuddy(componentInstallers);\n+    return resettableClassFileTransformer;\n+  }\n+\n+  private static void installComponentsBeforeByteBuddy(\n+      Iterable<ComponentInstaller> componentInstallers) {\n+    ClassLoader savedContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    try {\n+      Thread.currentThread().setContextClassLoader(AgentInstaller.class.getClassLoader());\n+      for (ComponentInstaller componentInstaller : componentInstallers) {\n+        componentInstaller.beforeByteBuddyAgent();\n+      }\n+    } finally {\n+      Thread.currentThread().setContextClassLoader(savedContextClassLoader);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acac6d24864595c44f906d2e9f8a2e27d7de114d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4ODc5Mg==", "bodyText": "I'm not sure this comment makes sense here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#discussion_r543788792", "createdAt": "2020-12-16T00:33:39Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/OpenTelemetryInstaller.java", "diffHunk": "@@ -30,15 +34,40 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TracerInstaller {\n-  private static final Logger log = LoggerFactory.getLogger(TracerInstaller.class);\n+@AutoService(ComponentInstaller.class)\n+public class OpenTelemetryInstaller implements ComponentInstaller {\n+  private static final Logger log = LoggerFactory.getLogger(OpenTelemetryInstaller.class);\n \n   private static final String EXPORTER_JAR_CONFIG = \"otel.exporter.jar\";\n   private static final String EXPORTERS_CONFIG = \"otel.exporter\"; // this name is from spec\n   private static final String PROPAGATORS_CONFIG = \"otel.propagators\"; // this name is from spec\n   private static final String JAVAAGENT_ENABLED_CONFIG = \"otel.javaagent.enabled\";\n   private static final List<String> DEFAULT_EXPORTERS = Collections.singletonList(\"otlp\");\n \n+  @Override\n+  public void beforeByteBuddyAgent() {\n+    // calling (shaded) OpenTelemetry.getGlobalTracerProvider() with context class loader set to\n+    // the\n+    // agent class loader, so that SPI finds the agent's (isolated) SDK, and (shaded)\n+    // OpenTelemetry registers it, and then when instrumentation calls (shaded)\n+    // OpenTelemetry.getGlobalTracerProvider() later, they get back the agent's (isolated) SDK\n+    //\n+    // but if we don't trigger this early registration, then if instrumentation is the first to\n+    // call (shaded) OpenTelemetry.getGlobalTracerProvider(), then SPI can't see the agent class\n+    // loader,\n+    // and so (shaded) OpenTelemetry registers the no-op TracerFactory, and it cannot be replaced\n+    // later", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acac6d24864595c44f906d2e9f8a2e27d7de114d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjgyNzc4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-554282778", "createdAt": "2020-12-17T05:05:57Z", "commit": {"oid": "d3723ba0a1c8200272fd2143e52d94c0d73ed3d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a190772997ff9fc07fc803e9572165787030c6c", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5a190772997ff9fc07fc803e9572165787030c6c", "committedDate": "2020-12-17T14:24:28Z", "message": "Add component installer SPI\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3723ba0a1c8200272fd2143e52d94c0d73ed3d8", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d3723ba0a1c8200272fd2143e52d94c0d73ed3d8", "committedDate": "2020-12-16T06:39:48Z", "message": "Fix\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}, "afterCommit": {"oid": "5a190772997ff9fc07fc803e9572165787030c6c", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5a190772997ff9fc07fc803e9572165787030c6c", "committedDate": "2020-12-17T14:24:28Z", "message": "Add component installer SPI\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349aaf8f2f284837d006f27ba8f0f34f89273067", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/349aaf8f2f284837d006f27ba8f0f34f89273067", "committedDate": "2020-12-17T14:28:25Z", "message": "Move more code to agent installer\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzE0Mzc0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1848#pullrequestreview-554714374", "createdAt": "2020-12-17T15:29:00Z", "commit": {"oid": "349aaf8f2f284837d006f27ba8f0f34f89273067"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2153, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}