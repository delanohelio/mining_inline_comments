{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzE2MDQz", "number": 1902, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDowMToxNFrOFFMIwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxNzo1OVrOFGCpkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTg2MDQ4OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMDowMToxNFrOIFk24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzo0ODowOFrOIF9RMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNzY2NQ==", "bodyText": "Why do you need this AppServerBridge.getUnhandledThrowable? You can record the exception on SERVER span write when it happened inside servlet instrumentation. You don't need to pass it up.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r542717665", "createdAt": "2020-12-14T20:01:14Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNzYxOQ==", "bodyText": "Good point! Looks that this works. Will change.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543117619", "createdAt": "2020-12-15T07:48:08Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjcxNzY2NQ=="}, "originalCommit": {"oid": "95ceae157b289d686aded7a9949b1f92a9a4c70f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk0NTYzOnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TomcatSmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDoyNDoyM1rOIF4SFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxMjowMFrOIGAdqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNTkyNQ==", "bodyText": "is this meant to be parameterized by the test params below?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543035925", "createdAt": "2020-12-15T04:24:23Z", "author": {"login": "trask"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TomcatSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+\n+class TomcatSmokeTest extends AppServerTest {\n+\n+  protected String getTargetImage(int jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:tomcat-${serverVersion}-jdk$jdk-20201207.405832649\"\n+  }\n+\n+  def \"Server Handler test\"() {\n+    setup:\n+    startTarget(8, \"7.0.107\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2OTk2Mg==", "bodyText": "Quick answer - eventually yes, but not right now \ud83d\ude04\nIdeal solution eventually would be for the matrix to work as follows:\nSmokeTestClass {\n  forEach (configuration : matrix) {\n    startTarget(configuration)\n    testScenario1()\n    testScenario2()\n    ....\n    tearDown(configuration)\n }\n}\n\nAs a result there will be several separate test cases for each configuration in the matrix and the app server is started once per matrix entry.\nCurrently it is only possible to have either:\na) each testScenarioX will call startTarget which will effectively mean that each app server is started as many times as there are test cases. In case of this particular smoke test it would start 5 more tomcats.\nor\nb) There is one testScenario which contains all asserts in the world and it would be impossible to distinguish between failing tests.\nThe problem is I don't know yet how to achieve the ideal solution using neither Spock or JUnit.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543169962", "createdAt": "2020-12-15T09:12:00Z", "author": {"login": "vovencij"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/TomcatSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+\n+class TomcatSmokeTest extends AppServerTest {\n+\n+  protected String getTargetImage(int jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:tomcat-${serverVersion}-jdk$jdk-20201207.405832649\"\n+  }\n+\n+  def \"Server Handler test\"() {\n+    setup:\n+    startTarget(8, \"7.0.107\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNTkyNQ=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk1NzgyOnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDoyOToyNVrOIF4Ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMzozNTowNlrOIGsfxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNzU4Ng==", "bodyText": "typically this is the lowest version, and then tests will be run against the latest version in nightly build using -PtestLatestDeps=true, in this case you don't quite want the latest version, so need to supply latestDepTestLibrary like below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'\n          \n          \n            \n              library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '7.0.4'\n          \n          \n            \n              latestDepTestLibrary  group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.+'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543037586", "createdAt": "2020-12-15T04:29:25Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1Mjc2Mw==", "bodyText": "Actually I don't need tomcat-embed-core for the instrumentation. I only need it for the test. For the instrumentation I need two tomcat libraries - org.apache.tomcat:tomcat-coyote (handling of HTTP) and org.apache.tomcat:tomcat-catalina (Servlet implementation). However, these two dependencies must have the same version while muzzling (because some classes moved between those Jars at some point and there are NoClassDefFound errors from either one or other jar). Is there a way to configure muzzle in a way that two dependencies would have the same version at a time?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543152763", "createdAt": "2020-12-15T08:46:26Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNzU4Ng=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg5MTM5Ng==", "bodyText": "Is there a way to configure muzzle in a way that two dependencies would have the same version at a time?\n\nI don't think so. The way you have it currently using the aggregating artifact tomcat-embed-core seems reasonable to me.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543891396", "createdAt": "2020-12-16T03:35:06Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,17 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.40'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNzU4Ng=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk3Njg2OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDozNzowNVrOIF4isg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTowODoxMVrOIG6_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA==", "bodyText": "Jetty and Servlet advice also does this, do you think applicable here also?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                  // Check again in case the request finished before adding the listener.\n          \n          \n            \n                  if (!request.isAsync() && responseHandled.compareAndSet(false, true)) {\n          \n          \n            \n                    tracer().end(context, response);\n          \n          \n            \n                  }\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040178", "createdAt": "2020-12-15T04:37:05Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTk4NQ==", "bodyText": "@vovencij ?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061985", "createdAt": "2020-12-16T07:14:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyODk3Nw==", "bodyText": "Checked Tomcat's source code, the check is relevant for older tomcats (7). Newer tomcats (e.g., 9) will throw IllegalStateException in this case, which is handled above. Added the check.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544128977", "createdAt": "2020-12-16T09:08:11Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);\n+      }\n+      return;\n+    }\n+\n+    if (response.isCommitted()) {\n+      tracer().end(context, response);\n+      return;\n+    }\n+\n+    Object note = request.getNote(1);\n+    if (note instanceof org.apache.catalina.connector.Request) {\n+      AtomicBoolean responseHandled = new AtomicBoolean(false);\n+\n+      org.apache.catalina.connector.Request servletRequest =\n+          (org.apache.catalina.connector.Request) note;\n+      if (servletRequest.isAsync()) {\n+        try {\n+          servletRequest\n+              .getAsyncContext()\n+              .addListener(new TagSettingAsyncListener(responseHandled, context));\n+        } catch (IllegalStateException e) {\n+          // thrown by tomcat if request was already handled while setting the listener.\n+          tracer().end(context, response);\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDE3OA=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk4MDg0OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDozODo1MlrOIF4k5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyMDowNlrOIF-XcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg==", "bodyText": "can you add a comment here about why not passing response when it's not committed? it's not obvious to me at least", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543040742", "createdAt": "2020-12-15T04:38:52Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwODg2Nw==", "bodyText": "If the response is not yet committed, then response headers, including response code, are not yet written to the output stream. And the only reason response is passed to the endExceptionally is to read the response code.\n.... And after looking at the #894 and into endExceptionally I see that in this case http.status_code will be set to 500 even if it wasn't actually sent. Maybe this has to be fixed also, but I'm reluctant to change that logic in the current PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543108867", "createdAt": "2020-12-15T07:31:44Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNDk4Ng==", "bodyText": "This comment better be in the code :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543114986", "createdAt": "2020-12-15T07:43:14Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNTYwMA==", "bodyText": "Coming soon...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543135600", "createdAt": "2020-12-15T08:20:06Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+\n+    Throwable throwableToReport =\n+        throwable != null ? throwable : AppServerBridge.getUnhandledThrowable(context);\n+\n+    if (throwableToReport != null) {\n+      if (response.isCommitted()) {\n+        tracer().endExceptionally(context, throwableToReport, response);\n+      } else {\n+        tracer().endExceptionally(context, throwableToReport);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MDc0Mg=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk4MzU2OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDo0MDowOVrOIF4mVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxNTo0NFrOIGAntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MTExMA==", "bodyText": "no need for this null check I think\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543041110", "createdAt": "2020-12-15T04:40:09Z", "author": {"login": "trask"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MjUzNA==", "bodyText": "Removed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543172534", "createdAt": "2020-12-15T09:15:44Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MTExMA=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTk5OTUyOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDo0Njo0OFrOIF4u0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoyNjo1MVrOIF67fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzI4Mw==", "bodyText": "the SERVER span name is also updated in several of the web framework instrumentations", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543043283", "createdAt": "2020-12-15T04:46:48Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {\n         scope = attachedContext.makeCurrent();\n       }\n \n+      // We're interested only in the very first suggested name, as this is where the initial\n+      // request arrived. There are potential forward and other scenarios, where servlet path\n+      // may change, but we don't want this to be reflected in the span name.\n+      if (!AppServerBridge.isBetterNameSuggested(attachedContext)) {\n+        tracer().updateServerSpanName(httpServletRequest);\n+        AppServerBridge.setBetterNameSuggested(attachedContext, true);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3OTI5Mw==", "bodyText": "Web Framework instrumentations are expecting the SERVER span to be present and to update the server span name unconditionally. Servlet integration was either creating a new SERVER span or exiting as soon as possible if a SERVER span was already present. This flag is actually needed for the Servlet instrumentation only to indicate that the servlet instrumentation itself has set the name. I probably should rename methods to better reflect what's happening.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543079293", "createdAt": "2020-12-15T06:26:51Z", "author": {"login": "vovencij"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {\n         scope = attachedContext.makeCurrent();\n       }\n \n+      // We're interested only in the very first suggested name, as this is where the initial\n+      // request arrived. There are potential forward and other scenarios, where servlet path\n+      // may change, but we don't want this to be reflected in the span name.\n+      if (!AppServerBridge.isBetterNameSuggested(attachedContext)) {\n+        tracer().updateServerSpanName(httpServletRequest);\n+        AppServerBridge.setBetterNameSuggested(attachedContext, true);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA0MzI4Mw=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjIzMDM3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjoxNjowNlrOIF6qog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoyMjozNFrOIF-dYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NDk3OA==", "bodyText": "It's better if we can have a single key / object with multiple fields for any particular concern, rather than multiple keys", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543074978", "createdAt": "2020-12-15T06:16:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNzEyMQ==", "bodyText": "Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543137121", "createdAt": "2020-12-15T08:22:34Z", "author": {"login": "vovencij"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA3NDk3OA=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjUwMTE2OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozODo1OFrOIF89lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxOToxMFrOIF-VMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw==", "bodyText": "Why exactly do we want to record exception in SERVER span if that was swallowed inside it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543112597", "createdAt": "2020-12-15T07:38:58Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-unhandled-throwable\");\n+  public static final ContextKey<AtomicBoolean> SERVLET_SUGGESTED_BETTER_NAME_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-better-name-suggested\");\n+\n+  public static Context init(Context ctx) {\n+    return ctx.with(AppServerBridge.THROWABLE_CONTEXT_KEY, new AtomicReference<>())\n+        .with(AppServerBridge.SERVLET_SUGGESTED_BETTER_NAME_KEY, new AtomicBoolean(false));\n+  }\n+\n+  /**\n+   * This is for servlet instrumentation to record exceptions unhandled by servlets and filters,\n+   * that app-server integrations are interested in (to fail the span exceptionally with attached\n+   * throwable), but which may be swallowed by an app-server before execution arrives to an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTk5MA==", "bodyText": "I changed this part as you have suggested earlier - record throwable from the outermost servlet/filter instead of storing it in the context. Will push soon.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543131990", "createdAt": "2020-12-15T08:14:04Z", "author": {"login": "vovencij"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-unhandled-throwable\");\n+  public static final ContextKey<AtomicBoolean> SERVLET_SUGGESTED_BETTER_NAME_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-better-name-suggested\");\n+\n+  public static Context init(Context ctx) {\n+    return ctx.with(AppServerBridge.THROWABLE_CONTEXT_KEY, new AtomicReference<>())\n+        .with(AppServerBridge.SERVLET_SUGGESTED_BETTER_NAME_KEY, new AtomicBoolean(false));\n+  }\n+\n+  /**\n+   * This is for servlet instrumentation to record exceptions unhandled by servlets and filters,\n+   * that app-server integrations are interested in (to fail the span exceptionally with attached\n+   * throwable), but which may be swallowed by an app-server before execution arrives to an", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzNTAyNQ==", "bodyText": "I don't like AppServerBridge at all. I have no better suggestions right now, but I will think about it...\n\nAfter removing throwables from this bridge, the only thing it has left is the flag for the updated name. The flag is only used by the servlet instrumentation, but it must have the same lifetime as the context created by the app server, so this bridge must be added to the context by the server instrumentation. You are welcome to suggest a better name or  more elegant approach altogether.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543135025", "createdAt": "2020-12-15T08:19:10Z", "author": {"login": "vovencij"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Helper containers for the Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {\n+\n+  public static final ContextKey<AtomicReference<Throwable>> THROWABLE_CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-unhandled-throwable\");\n+  public static final ContextKey<AtomicBoolean> SERVLET_SUGGESTED_BETTER_NAME_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-better-name-suggested\");\n+\n+  public static Context init(Context ctx) {\n+    return ctx.with(AppServerBridge.THROWABLE_CONTEXT_KEY, new AtomicReference<>())\n+        .with(AppServerBridge.SERVLET_SUGGESTED_BETTER_NAME_KEY, new AtomicBoolean(false));\n+  }\n+\n+  /**\n+   * This is for servlet instrumentation to record exceptions unhandled by servlets and filters,\n+   * that app-server integrations are interested in (to fail the span exceptionally with attached\n+   * throwable), but which may be swallowed by an app-server before execution arrives to an", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMjU5Nw=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjUzMTQxOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzo0Njo1MFrOIF9OlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxMjo0MlrOIF-Gfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjk0OQ==", "bodyText": "Why this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543116949", "createdAt": "2020-12-15T07:46:50Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMTI2Mw==", "bodyText": "needsRescoping is a static method. IntelliJ suggested.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543131263", "createdAt": "2020-12-15T08:12:42Z", "author": {"login": "vovencij"}, "path": "instrumentation/servlet/servlet-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v3_0/Servlet3Advice.java", "diffHunk": "@@ -32,10 +36,18 @@ public static void onEnter(\n \n     Context attachedContext = tracer().getServerContext(httpServletRequest);\n     if (attachedContext != null) {\n-      if (tracer().needsRescoping(attachedContext)) {\n+      if (Servlet3HttpServerTracer.needsRescoping(attachedContext)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExNjk0OQ=="}, "originalCommit": {"oid": "c7888b11f3e9ee4122fbb22b712b1209ac288be4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjc1MjU1OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODo0MDo1M1rOIF_MKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxNToxN1rOIGAmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0OTA5Ng==", "bodyText": "Should be \"io.opentelemetry.javaagent.tomcat\" to be consistent with other integrations", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543149096", "createdAt": "2020-12-15T08:40:53Z", "author": {"login": "laurit"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {\n+    Context context =\n+        AppServerBridge.init(startSpan(request, request, request, adapterClassName + \".service\"));\n+\n+    // context must be reattached, because it has new attributes compared to the one returned from\n+    // startSpan().\n+    attachServerContext(context, request);\n+    return context;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"tomcat\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MjI0OA==", "bodyText": "Yes, fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543172248", "createdAt": "2020-12-15T09:15:17Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {\n+    Context context =\n+        AppServerBridge.init(startSpan(request, request, request, adapterClassName + \".service\"));\n+\n+    // context must be reattached, because it has new attributes compared to the one returned from\n+    // startSpan().\n+    attachServerContext(context, request);\n+    return context;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"tomcat\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE0OTA5Ng=="}, "originalCommit": {"oid": "4cff205f8d7173ab8ee5b3d752f85755293cf82c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDQ3NjE1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0NDoxNlrOIGO6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDo0NDoxNlrOIGO6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwNjYwNQ==", "bodyText": "I now seems to me that this whole logic can live in ServletHttpServerTracer. This will also remove some ifs from servlet advices.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r543406605", "createdAt": "2020-12-15T14:44:16Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Helper container for Context attributes for transferring certain information between servlet\n+ * integration and app-server server handler integrations.\n+ */\n+public class AppServerBridge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8ec354f3ccae910e37e6d5792fbecb23e29030"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc0ODcyOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowOTo0OVrOIG2pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzo0ODoyMFrOIG4Dfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzcxOA==", "bodyText": "Is this isPresent needed here? The result of if is the same without it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544057718", "createdAt": "2020-12-16T07:09:49Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -126,4 +131,12 @@ private static String getSpanName(HttpServletRequest request) {\n     }\n     return spanName;\n   }\n+\n+  public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n+    if (AppServerBridge.isPresent(attachedContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA4MDc2Ng==", "bodyText": "isPresent is for the cases, where there is no app-server specific tracer (and thus no AppServerBridge in the context) which actually needs this update. Without this check camel tests, for example, will fail because the name changes unexpectedly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544080766", "createdAt": "2020-12-16T07:48:20Z", "author": {"login": "vovencij"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -126,4 +131,12 @@ private static String getSpanName(HttpServletRequest request) {\n     }\n     return spanName;\n   }\n+\n+  public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n+    if (AppServerBridge.isPresent(attachedContext)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzcxOA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc1NzE3OnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/servlet-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v2_2/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxMTozNVrOIG2u_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxMTozNVrOIG2u_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1OTEzNQ==", "bodyText": "Shouldn't this comment go to updateServerSpanNameOnce method declaration site?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544059135", "createdAt": "2020-12-16T07:11:35Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/servlet/v2_2/Servlet2Advice.java", "diffHunk": "@@ -24,14 +26,20 @@ public static void onEnter(\n       @Advice.Argument(value = 1, typing = Assigner.Typing.DYNAMIC) ServletResponse response,\n       @Advice.Local(\"otelContext\") Context context,\n       @Advice.Local(\"otelScope\") Scope scope) {\n+    CallDepthThreadLocalMap.incrementCallDepth(Servlet2Advice.class);\n \n     if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) {\n       return;\n     }\n \n     HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n \n-    if (tracer().getServerContext(httpServletRequest) != null) {\n+    Context serverContext = tracer().getServerContext(httpServletRequest);\n+    if (serverContext != null) {\n+      // We're interested only in the very first suggested name, as this is where the initial", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc2OTg2OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxMzo1OFrOIG226w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxMzo1OFrOIG226w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MTE2Mw==", "bodyText": "scope can be null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544061163", "createdAt": "2020-12-16T07:13:58Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/ServerHandlerAdvice.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import static io.opentelemetry.javaagent.instrumentation.tomcat7.TomcatTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.TagSettingAsyncListener;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import net.bytebuddy.asm.Advice;\n+import org.apache.coyote.Adapter;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SuppressWarnings(\"unused\")\n+public class ServerHandlerAdvice {\n+  private static final Logger log = LoggerFactory.getLogger(ServerHandlerAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This Adapter itsMe,\n+      @Advice.Argument(0) Request request,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    Context attachedContext = tracer().getServerContext(request);\n+    if (attachedContext != null) {\n+      log.debug(\"Unexpected context found before server handler even started: {}\", attachedContext);\n+      return;\n+    }\n+\n+    context = tracer().startServerSpan(request, itsMe.getClass().getSimpleName());\n+\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Argument(0) Request request,\n+      @Advice.Argument(1) Response response,\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc4MzQ5OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxNjoyNFrOIG2_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzozMDoyOVrOIHFWvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA==", "bodyText": "Pass the whole Method here instead of adapterClassName. There is getSpanName(Method)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544063364", "createdAt": "2020-12-16T07:16:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMDAxMw==", "bodyText": "But I don't have the method \ud83e\udd14", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544130013", "createdAt": "2020-12-16T09:09:49Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzODk4NA==", "bodyText": "But you can have :) Like servlet advices do", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544138984", "createdAt": "2020-12-16T09:23:21Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MTQ3MQ==", "bodyText": "Now you lost me. Servlet advices set server span name from the URL obtained from the Request. What method are you talking about?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544161471", "createdAt": "2020-12-16T09:54:58Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMDcxMw==", "bodyText": "Take a look at io.opentelemetry.javaagent.instrumentation.servlet.http.HttpServletResponseInstrumentationModule.SendAdvice", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544210713", "createdAt": "2020-12-16T11:09:38Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5ODY4NA==", "bodyText": "ok", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544298684", "createdAt": "2020-12-16T13:30:29Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/tomcat7/TomcatTracer.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.tomcat7;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.servlet.AppServerBridge;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.util.Collections;\n+import org.apache.coyote.Request;\n+import org.apache.coyote.Response;\n+import org.apache.tomcat.util.buf.MessageBytes;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TomcatTracer extends HttpServerTracer<Request, Response, Request, Request>\n+    implements TextMapPropagator.Getter<Request> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(TomcatTracer.class);\n+  private static final TomcatTracer TRACER = new TomcatTracer();\n+\n+  public static TomcatTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startServerSpan(Request request, String adapterClassName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2MzM2NA=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxODc5MTg2OnYy", "diffSide": "RIGHT", "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzoxNzo1OVrOIG3Erg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwOTo1MDowMlrOIG8xWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NDY4Ng==", "bodyText": "I wonder, why no other instrumentation defines this dependency?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544064686", "createdAt": "2020-12-16T07:17:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '7.0.4'\n+  implementation project(':instrumentation:servlet:servlet-3.0:javaagent')\n+  implementation(\"org.slf4j:slf4j-api:1.7.30\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1ODA0Mw==", "bodyText": "removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1902#discussion_r544158043", "createdAt": "2020-12-16T09:50:02Z", "author": {"login": "vovencij"}, "path": "instrumentation/tomcat-7.0/javaagent/tomcat-7.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,22 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.tomcat.embed\"\n+    module = \"tomcat-embed-core\"\n+    // Tomcat 10 is about servlet 5.0\n+    // 7.0.4 added Request.isAsync, which is needed\n+    versions = \"[7.0.4, 10)\"\n+  }\n+}\n+\n+dependencies {\n+  library group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '7.0.4'\n+  implementation project(':instrumentation:servlet:servlet-3.0:javaagent')\n+  implementation(\"org.slf4j:slf4j-api:1.7.30\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA2NDY4Ng=="}, "originalCommit": {"oid": "83b86f94b288697abc515545d9a353c6072e54e9"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4365, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}