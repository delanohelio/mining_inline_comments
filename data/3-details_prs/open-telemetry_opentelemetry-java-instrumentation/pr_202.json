{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjQwODE5", "number": 202, "title": "Made gRPC instrumenter compliant with semantic conventions", "bodyText": "Changed span name to comply with conventions\n\n\nAdded rpc.service span attribute\n\n\nAdded net.peer.* attributes to client and server span.\n\n\nCloses #201", "createdAt": "2020-03-02T22:26:08Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202", "merged": true, "mergeCommit": {"oid": "d3246121ccbfae2f5a992ce6ca631b88ccf98d84"}, "closed": true, "closedAt": "2020-03-03T18:01:27Z", "author": {"login": "prydin"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJwXPrAH2gAyMzgyNjQwODE5OmY0MmIzY2ZjZDBhNTQ1MzhmZDNhNzg0NmRjM2E0ZThkNDUwOWRkNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKGO7wAFqTM2ODIwMTUwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f42b3cfcd0a54538fd3a7846dc3a4e8d4509dd4e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f42b3cfcd0a54538fd3a7846dc3a4e8d4509dd4e", "committedDate": "2020-03-02T16:32:14Z", "message": "Added service name and corrected span name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179545e344498696d409e0916292ee17db9175b1", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/179545e344498696d409e0916292ee17db9175b1", "committedDate": "2020-03-02T20:50:21Z", "message": "Support peer address for clients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86eb6a938f7c09d8991056122ad04604c00814ab", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86eb6a938f7c09d8991056122ad04604c00814ab", "committedDate": "2020-03-02T21:56:43Z", "message": "Added server peer address resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4253e94c1b326e69a7c37f3b578d76a5e9515b0a", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4253e94c1b326e69a7c37f3b578d76a5e9515b0a", "committedDate": "2020-03-02T22:17:47Z", "message": "Added constants for new tag names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f8a02f790c94a4aa4d4bee8b8dd75f1116a20c", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47f8a02f790c94a4aa4d4bee8b8dd75f1116a20c", "committedDate": "2020-03-02T22:23:37Z", "message": "Cosmetic change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72697a11a221252c2be2d01dc26a578dbcd09b70", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72697a11a221252c2be2d01dc26a578dbcd09b70", "committedDate": "2020-03-02T22:42:46Z", "message": "Fixed muzzle issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e224b263d84123fdc3f320b92616ee56be4332e5", "committedDate": "2020-03-03T03:20:20Z", "message": "Better handling of addresses"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzM0OTM4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#pullrequestreview-367734938", "createdAt": "2020-03-03T06:48:41Z", "commit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo0ODo0MlrOFw5_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzo1NFrOFw6Qhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjIxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n          \n          \n            \n                    .or(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n      \n    \n    \n  \n\nsafeHasSuperType includes itself already", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386826210", "createdAt": "2020-03-03T06:48:42Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "diffHunk": "@@ -38,7 +43,8 @@ public GrpcClientBuilderInstrumentation() {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractManagedChannelImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n+        .or(named(\"io.grpc.ManagedChannelBuilder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzg2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nlet's remove RESOURCE_NAME here. @tylerbenson has mentioned previously that in general RESOURCE_NAME should be migrated to span name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386827866", "createdAt": "2020-03-03T06:54:40Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -30,27 +30,34 @@\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.AttributeValue;\n import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n public class TracingClientInterceptor implements ClientInterceptor {\n+  private final InetSocketAddress peerAddress;\n \n-  public static final TracingClientInterceptor INSTANCE = new TracingClientInterceptor();\n+  public TracingClientInterceptor(final InetSocketAddress peerAddress) {\n+    this.peerAddress = peerAddress;\n+  }\n \n   @Override\n   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n       final MethodDescriptor<ReqT, RespT> method,\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final Span span = TRACER.spanBuilder(\"grpc.client\").setSpanKind(CLIENT).startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    final String methodName = method.getFullMethodName();\n+    final Span span = TRACER.spanBuilder(methodName).setSpanKind(CLIENT).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTA1MQ==", "bodyText": "There's a fancy (and more efficient) way to do this.\nCheck out the context store functionality, e.g. here and here\nUsing this will inject a field into ManagedChannelBuilder to track the InetSocketAddress if possible (and if not it will fall back to using WeakMap)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829051", "createdAt": "2020-03-03T06:58:54Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.grpc.common;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.bootstrap.WeakMap;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n+\n+public class GrpcHelper {\n+  private static final WeakMap<ManagedChannelBuilder, InetSocketAddress> builderToAddress =\n+      WeakMap.Provider.newWeakMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nsame comment as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829887", "createdAt": "2020-03-03T07:01:48Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -57,7 +62,11 @@ private TracingServerInterceptor() {}\n       spanBuilder.setNoParent();\n     }\n     final Span span = spanBuilder.startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDM4Ng==", "bodyText": "Nice, dealing with different versions is so clean with groovy! \ud83d\ude06", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386830386", "createdAt": "2020-03-03T07:03:36Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "diffHunk": "@@ -68,9 +69,17 @@ class GrpcStreamingTest extends AgentTestRunner {\n         }\n       }\n     }\n-    Server server = InProcessServerBuilder.forName(getClass().name).addService(greeter).directExecutor().build().start()\n-\n-    ManagedChannel channel = InProcessChannelBuilder.forName(getClass().name).build()\n+    def port = PortUtils.randomOpenPort()\n+    Server server = ServerBuilder.forPort(port).addService(greeter).build().start()\n+    ManagedChannelBuilder channelBuilder = ManagedChannelBuilder.forAddress(\"localhost\", port)\n+\n+    // Depending on the version of gRPC usePlainText may or may not take an argument.\n+    try {\n+      channelBuilder.usePlaintext()\n+    } catch (MissingMethodException e) {\n+      channelBuilder.usePlaintext(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDQ3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"$MoreTags.RESOURCE_NAME\" \"example.Greeter/Conversation\"\n          \n      \n    \n    \n  \n\netc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386830470", "createdAt": "2020-03-03T07:03:54Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "diffHunk": "@@ -102,14 +111,18 @@ class GrpcStreamingTest extends AgentTestRunner {\n     assertTraces(1) {\n       trace(0, 2) {\n         span(0) {\n-          operationName \"grpc.client\"\n+          operationName \"example.Greeter/Conversation\"\n           spanKind CLIENT\n           parent()\n           errored false\n           tags {\n             \"$MoreTags.RESOURCE_NAME\" \"example.Greeter/Conversation\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f79c595fd94df82df0fa595400a5719ad360b3", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1f79c595fd94df82df0fa595400a5719ad360b3", "committedDate": "2020-03-03T13:21:17Z", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-grpc-semantics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b50db1465e4ade50e8f8748a78cbed5c725522", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3b50db1465e4ade50e8f8748a78cbed5c725522", "committedDate": "2020-03-03T14:20:39Z", "message": "Addressed PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjAxNTA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#pullrequestreview-368201506", "createdAt": "2020-03-03T18:01:04Z", "commit": {"oid": "c3b50db1465e4ade50e8f8748a78cbed5c725522"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3326, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}