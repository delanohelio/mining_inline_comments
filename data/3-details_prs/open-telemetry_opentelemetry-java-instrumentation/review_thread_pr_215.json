{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDQwOTA1", "number": 215, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NTo0NFrODl-Vhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMTowNFrODmx39w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ1MjIyOnYy", "diffSide": "RIGHT", "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NTo0NFrOFzKo_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NTo0NFrOFzKo_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjAyOQ==", "bodyText": "I think\n.and(takesArgument(0, named(\"java.lang.String\")))\n\nis good corresponding to @Advice.Argument(0) String below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389196029", "createdAt": "2020-03-06T23:45:44Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ1NTY0OnYy", "diffSide": "RIGHT", "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0ODoyNlrOFzKrHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0ODoyNlrOFzKrHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjU3NA==", "bodyText": "I think this should go before the try/finally, don't need to call reset if it's a nested invocation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389196574", "createdAt": "2020-03-06T23:48:26Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),\n+        GeodeInstrumentation.class.getName() + \"$QueryAdvice\");\n+    return map;\n+  }\n+\n+  public static class SimpleAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz, @Advice.Origin final Method method) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(SimpleAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ3NjI3OnYy", "diffSide": "RIGHT", "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDoyNFrOFzK3zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDoyNFrOFzK3zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5OTgyMg==", "bodyText": "same here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389199822", "createdAt": "2020-03-07T00:04:24Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),\n+        GeodeInstrumentation.class.getName() + \"$QueryAdvice\");\n+    return map;\n+  }\n+\n+  public static class SimpleAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz, @Advice.Origin final Method method) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(SimpleAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }\n+        final Span span = spanWithScope.getSpan();\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        spanWithScope.closeScope();\n+      } finally {\n+        CallDepthThreadLocalMap.reset(SimpleAdvice.class);\n+      }\n+    }\n+  }\n+\n+  public static class QueryAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz,\n+        @Advice.Origin final Method method,\n+        @Advice.Argument(0) final String query) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(QueryAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      span.setAttribute(Tags.DB_STATEMENT, query);\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTg5NjIzOnYy", "diffSide": "RIGHT", "path": "instrumentation/geode-1.4/geode-1.4.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMTowNFrOF0ZHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMTowNFrOF0ZHRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MTczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            apply from: \"${rootDir}/gradle/java.gradle\"\n          \n          \n            \n            apply from: \"${rootDir}/gradle/instrumentation.gradle\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r390481735", "createdAt": "2020-03-10T17:21:04Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.4/geode-1.4.gradle", "diffHunk": "@@ -0,0 +1,29 @@\n+// Geode only supports Java 8+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de31ad852c945f6bfc42ef4ed3a231299e788da6"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 592, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}