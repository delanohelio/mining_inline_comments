{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNTc2Njcz", "number": 237, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNTo0NlrODpSYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNjozNFrODpSY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjE5MjY1OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNTo0NlrOF4Xuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzoxMDoyM1rOF4Z_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA==", "bodyText": "does this possibly leak PII into the span names?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394653354", "createdAt": "2020-03-18T21:35:46Z", "author": {"login": "jkwatson"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDUwOA==", "bodyText": "Yeah, similar to our jdbc capture, if you embed PII directly into your query and don't use parameters, then it will end up in span name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394654508", "createdAt": "2020-03-18T21:38:24Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTU4MA==", "bodyText": "I see.  Are we ok with this? Does this open the project up to any legal issues if PII leaks because of this decision?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394661580", "createdAt": "2020-03-18T21:54:25Z", "author": {"login": "jkwatson"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NDUxOA==", "bodyText": "Are you asking me a legal question?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394664518", "createdAt": "2020-03-18T22:01:03Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NDg5Mg==", "bodyText": "ha! I'm more wondering if this decision has been discussed with CNCF legal sorts of people, and if that's appropriate.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394664892", "createdAt": "2020-03-18T22:02:00Z", "author": {"login": "jkwatson"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2Njc5Nw==", "bodyText": "Pretty sure Apache License covers open source projects from liability. Otherwise how does anything work?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394666797", "createdAt": "2020-03-18T22:06:50Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzM3OA==", "bodyText": "wait! things work??!!??", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394667378", "createdAt": "2020-03-18T22:08:07Z", "author": {"login": "jkwatson"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY5MDQyNg==", "bodyText": "Btw, we do have an issue already tracking the PII concern, see #193, does that make you comfortable approving this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394690426", "createdAt": "2020-03-18T23:10:23Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -260,7 +260,7 @@ public void run() {\n   }\n \n   private Span startSpan(final String query) {\n-    final Span span = TRACER.spanBuilder(\"cassandra.query\").setSpanKind(CLIENT).startSpan();\n+    final Span span = TRACER.spanBuilder(query).setSpanKind(CLIENT).startSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzM1NA=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjE5NTAwOnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNjozNFrOF4XwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozODozNlrOF4XzlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzcxNg==", "bodyText": "same question on possibly leaking PII", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394653716", "createdAt": "2020-03-18T21:36:34Z", "author": {"login": "jkwatson"}, "path": "instrumentation/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -125,7 +125,7 @@ class CassandraClientTest extends AgentTestRunner {\n \n   def cassandraSpan(TraceAssert trace, int index, String statement, String keyspace, boolean renameService, Object parentSpan = null, Throwable exception = null) {\n     trace.span(index) {\n-      operationName \"cassandra.query\"\n+      operationName statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDYxMw==", "bodyText": "and same answer \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/237#discussion_r394654613", "createdAt": "2020-03-18T21:38:36Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -125,7 +125,7 @@ class CassandraClientTest extends AgentTestRunner {\n \n   def cassandraSpan(TraceAssert trace, int index, String statement, String keyspace, boolean renameService, Object parentSpan = null, Throwable exception = null) {\n     trace.span(index) {\n-      operationName \"cassandra.query\"\n+      operationName statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzcxNg=="}, "originalCommit": {"oid": "d5944f3be66593b3fe4f3265073d6d02c920d10e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 599, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}