{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDUyNTQz", "number": 1528, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMDoyNFrOE0qQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMzozM1rOE0qSiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjUzODQxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMDoyNFrOHsgcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyOToxM1rOHsoleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDkyOA==", "bodyText": "Now that it's not service loader, just wondering do these need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516430928", "createdAt": "2020-11-03T05:10:24Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -16,43 +15,26 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n import io.opentelemetry.javaagent.instrumentation.api.SpanWithScope;\n-import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-@AutoService(Instrumenter.class)\n-public final class HandlerAdapterInstrumentation extends Instrumenter.Default {\n-\n-  public HandlerAdapterInstrumentation() {\n-    super(\"spring-web\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.servlet.HandlerAdapter\");\n-  }\n+public final class HandlerAdapterInstrumentation implements TypeInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NDM0NQ==", "bodyText": "Nope, do not need. Thanks for catching this!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516564345", "createdAt": "2020-11-03T10:29:13Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -16,43 +15,26 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n import io.opentelemetry.javaagent.instrumentation.api.SpanWithScope;\n-import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-@AutoService(Instrumenter.class)\n-public final class HandlerAdapterInstrumentation extends Instrumenter.Default {\n-\n-  public HandlerAdapterInstrumentation() {\n-    super(\"spring-web\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.servlet.HandlerAdapter\");\n-  }\n+public final class HandlerAdapterInstrumentation implements TypeInstrumentation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDkyOA=="}, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjU0MjgwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMzozM1rOHsgeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyODo1NlrOHsok3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ==", "bodyText": "The only unfortunate change is that these optimizations for expensive type matcher aren't next to the optimized type matcher anymore. I don't know if that means it's good to accept classloaderMatcher on typeinstrumentation as well or not, wonder what others think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516431561", "createdAt": "2020-11-03T05:13:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n+  public SpringMvcInstrumentationModule() {\n+    super(\"spring-mvc\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatchers.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0Mzc1NQ==", "bodyText": "\ud83d\udc4d that would be nice to keep them next to each other somehow", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516443755", "createdAt": "2020-11-03T06:10:12Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n+  public SpringMvcInstrumentationModule() {\n+    super(\"spring-mvc\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatchers.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ=="}, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NDE5MQ==", "bodyText": "Hmm, that is true. I think that we have 2 pattern of classLoaderMatcher() usage (correct me if I'm wrong):\n\nOptimization for extends()/implements() typeMatcher()\nlibrary version check, e.g. requiring a class that is present in a particular instrumented library version.\n\nI believe that 2. should stay in the InstrumentationModule - 1. should be placed in TypeInstrumentation though, as it 's and optimization for a single type instrumentation. I'll add another classLoaderMatcher() method to TypeInstrumentation and just and() those two.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516564191", "createdAt": "2020-11-03T10:28:56Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n+  public SpringMvcInstrumentationModule() {\n+    super(\"spring-mvc\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatchers.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ=="}, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4762, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}