{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Nzk2MzE2", "number": 171, "title": "Removed statically loaded exporters and added more tests", "bodyText": "Removed statically loaded jaeger and dummy-exporter.\n\n\nAdded exporter-adapters to facilitate loading of well-known exporters (currently dummy-exporter and Jaeger)\n\n\nRemoved the ota.exporter property. Only ota.exporter.jar is supported from now on.\n\n\nAdded exporters to the smoketests for basic checking of exporter functionality (using the dummy exporter)\n\n\nUpdated README", "createdAt": "2020-02-18T19:32:48Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171", "merged": true, "mergeCommit": {"oid": "239eb53a44000f9f77e251a79e7189883451f5fc"}, "closed": true, "closedAt": "2020-02-21T23:12:48Z", "author": {"login": "prydin"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCJ6S4gH2gAyMzc2Nzk2MzE2OjQ2OGY1NWU5MmJlZDRmNWRjNTNmMDUyOWI5NzU4YzkyMjZjMTU2MGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGoFnjAFqTM2Mjk3MDcxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "468f55e92bed4f5dc53f0529b9758c9226c1560c", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/468f55e92bed4f5dc53f0529b9758c9226c1560c", "committedDate": "2020-02-08T01:46:45Z", "message": "Classloader done. Still needs shading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93b9eed41e5851e70434e53b1287ac8c5ba00a4", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d93b9eed41e5851e70434e53b1287ac8c5ba00a4", "committedDate": "2020-02-10T16:27:59Z", "message": "First working version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7bbcfd19df1c0e4a4c50321f65ca8738cc90b0f", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b7bbcfd19df1c0e4a4c50321f65ca8738cc90b0f", "committedDate": "2020-02-10T18:33:36Z", "message": "Made the dummy exporter slightly less stupid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40c68f60ef6be8d77d80462effc3a24eb637401", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b40c68f60ef6be8d77d80462effc3a24eb637401", "committedDate": "2020-02-11T04:03:40Z", "message": "Use SPI pattern for loading. Added runtime shader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ae2f524764636d859c2ae81db0fe2e64c9e3bc", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3ae2f524764636d859c2ae81db0fe2e64c9e3bc", "committedDate": "2020-02-11T14:44:24Z", "message": "Changed to do shading on binary stream instead of loading the class first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a827279a5de8fdca26e93fe799c619217be6af2", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7a827279a5de8fdca26e93fe799c619217be6af2", "committedDate": "2020-02-12T15:52:12Z", "message": "Protected the runtime shader from having its internals shaded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4934e259a5d45c8154c5e7f2b4f3b2b137254529", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4934e259a5d45c8154c5e7f2b4f3b2b137254529", "committedDate": "2020-02-12T22:25:54Z", "message": "Cleaned up code and naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223c561024cbf4b39ece218df920474d7be9ce7c", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/223c561024cbf4b39ece218df920474d7be9ce7c", "committedDate": "2020-02-13T01:27:39Z", "message": "Cleaned up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced5de1f2e8d5f56629b6ee64df6da6c7ca38f84", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ced5de1f2e8d5f56629b6ee64df6da6c7ca38f84", "committedDate": "2020-02-13T01:27:42Z", "message": "Merge remote-tracking branch 'upstream/master' into prydin-exporter-experiment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2371bdf9fa27b312eff388255a9492c089054b8", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2371bdf9fa27b312eff388255a9492c089054b8", "committedDate": "2020-02-13T04:05:49Z", "message": "Cleaned up and fixed test issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1d2f7532728ed3131f29474662b58fafb277c7ec", "committedDate": "2020-02-13T04:16:59Z", "message": "Merge branch 'master' into prydin-exporter-experiment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ad858bd931d0645f16f0ce436dacfcce1098f1", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3ad858bd931d0645f16f0ce436dacfcce1098f1", "committedDate": "2020-02-13T13:33:17Z", "message": "Minor fixes from code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0e247749554f5bb44f5d890f034e69417080aa", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b0e247749554f5bb44f5d890f034e69417080aa", "committedDate": "2020-02-13T14:14:52Z", "message": "Merge from upstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf5a9db69bb5e2ab7a91d0bca1e5387855ee1fd7", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf5a9db69bb5e2ab7a91d0bca1e5387855ee1fd7", "committedDate": "2020-02-13T14:19:32Z", "message": "Merge branch 'prydin-exporter-experiment' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-exporter-experiment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcdd621f53dc51d5f671b7efafc716d6ad2a1862", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dcdd621f53dc51d5f671b7efafc716d6ad2a1862", "committedDate": "2020-02-13T22:23:34Z", "message": "Added exporter smoke tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6bd6e5c36b09640ffd0e5bd74c0a1662c6240a", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0a6bd6e5c36b09640ffd0e5bd74c0a1662c6240a", "committedDate": "2020-02-13T22:23:58Z", "message": "Merge remote-tracking branch 'upstream/master' into prydin-exporter-experiment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "210a8973fad7f59dceea281852f680121022ec1b", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/210a8973fad7f59dceea281852f680121022ec1b", "committedDate": "2020-02-13T23:03:44Z", "message": "Finalized exporter smoke tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c10330d07ccf09fcdefbe5aec0f96b8919094fb", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c10330d07ccf09fcdefbe5aec0f96b8919094fb", "committedDate": "2020-02-13T23:14:35Z", "message": "Reenabled springboot test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dca1b2d76489b086b118849839e0cd7ac8a5d21", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2dca1b2d76489b086b118849839e0cd7ac8a5d21", "committedDate": "2020-02-13T23:18:38Z", "message": "Fixed some copy-paste issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ac07bf21ac88f7148b33f11763c57400be8c4e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b6ac07bf21ac88f7148b33f11763c57400be8c4e", "committedDate": "2020-02-14T01:31:46Z", "message": "Initial work on exporter bridges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb44fb516a47a893b80a424c1f10ad78106adc4e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fb44fb516a47a893b80a424c1f10ad78106adc4e", "committedDate": "2020-02-15T20:59:04Z", "message": "Implemented dynamically loaded exporter adapters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc86881e1394474e560697675a35c44d63cfa2a6", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc86881e1394474e560697675a35c44d63cfa2a6", "committedDate": "2020-02-15T21:00:02Z", "message": "Added some more files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96f61c7231ceb5302ca0edfc22562fdf43792f0", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d96f61c7231ceb5302ca0edfc22562fdf43792f0", "committedDate": "2020-02-18T14:14:25Z", "message": "Added exporter-adapters for well-known exporters\n\nMoved dummy-exporter to exporter adapters\n\nRemoved -Dota.exporter option in favor of ota.exporter.jar\n\nAdded basic exporter tests to smoketest\n\nIncreased timeout for Finatra server start to help with parallel test execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d10bcb864cdf9a9984c073ed9b8b6dbcb04308ea", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d10bcb864cdf9a9984c073ed9b8b6dbcb04308ea", "committedDate": "2020-02-18T19:17:51Z", "message": "Cleaned up tests, removed dead code and updated README"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d384d5876434e0ee28e70e856411293e845b6b2d", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d384d5876434e0ee28e70e856411293e845b6b2d", "committedDate": "2020-02-18T19:23:39Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d87b3e5df54d63b47aba2389aba45239d59e36d1", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d87b3e5df54d63b47aba2389aba45239d59e36d1", "committedDate": "2020-02-18T19:24:17Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6a27033656dd0508a40a70c9544d5a8e2f20e7", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d6a27033656dd0508a40a70c9544d5a8e2f20e7", "committedDate": "2020-02-18T19:36:28Z", "message": "Removed references to gRPC dependencies needed by Jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92f8fdec0263b40b0048616adc65a4300328ea0a", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/92f8fdec0263b40b0048616adc65a4300328ea0a", "committedDate": "2020-02-18T19:36:44Z", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-dynamic-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147145d6191726e0ab953af35226bbd796fa417f", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/147145d6191726e0ab953af35226bbd796fa417f", "committedDate": "2020-02-18T19:37:42Z", "message": "Merge branch 'prydin-dynamic-jaeger' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-dynamic-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a51083cd2607512fabb038dc05a47c4fe1f8744", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1a51083cd2607512fabb038dc05a47c4fe1f8744", "committedDate": "2020-02-18T20:05:48Z", "message": "Fixed incorrect use of ServiceLoader in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7e1d5dfd30d4515c747f9d56687ee4bbddded0", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa7e1d5dfd30d4515c747f9d56687ee4bbddded0", "committedDate": "2020-02-18T21:15:30Z", "message": "Fixed test dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bf1d4d82eb9ebe4dd56d0789ac0b873270bd5a0", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3bf1d4d82eb9ebe4dd56d0789ac0b873270bd5a0", "committedDate": "2020-02-18T21:47:14Z", "message": "Adjusted exporter tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50bdc689a19b759c03ceff44406755e318c98108", "committedDate": "2020-02-18T21:54:27Z", "message": "Fixed codeNarc issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODI2NTE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#pullrequestreview-360826515", "createdAt": "2020-02-19T03:49:50Z", "commit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1MTowN1rOFraThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxNjo0OFrOFranPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDA3MA==", "bodyText": "what do you think about renaming \"dummy exporter\" to \"logging exporter\" throughout (doc & code)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064070", "createdAt": "2020-02-19T03:51:07Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDM1OQ==", "bodyText": "let's confirm with @tedsuo on Thu that it is ok to link to vendor-specific exporters (e.g. i notice there's no link to vendor-specific exporters from opentelemetry-java repo)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064359", "createdAt": "2020-02-19T03:52:40Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter\n+The dummy exporter simply prints the name of the span along with its attributes to stdout. It is used manly\n+for testing and debugging. It takes a single configuration parameter.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.dummy.prefix | OTA_EXPORTER_DUMMY_PREFIX | A string that is printed in front of the span name and attributes.\n+\n+#### Jaeger exporter\n+A simple wrapper for the Jaeger exporter of opentelemetry-java. It currently only supports gRPC as its communications protocol.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.jaeger.host | OTA_EXPORTER_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.exporter.jaeger.port | OTA_EXPORTER_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n \n These parameter names are very likely to change over time, so please check back here when trying out a new version!\n \n Please report any bugs or unexpected behavior you may find.\n \n+#### Vendor-specific exporters\n+Exporters from observability and Application Performance Management vendors are currently under development. We will compile a list of vendor-specific exporters as they become available.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDcxNA==", "bodyText": "just want to check that things moved around in this file intentionally?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064714", "createdAt": "2020-02-19T03:54:39Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -73,17 +68,16 @@\n   private static final boolean DEFAULT_HTTP_CLIENT_SPLIT_BY_DOMAIN = false;\n   private static final boolean DEFAULT_DB_CLIENT_HOST_SPLIT_BY_INSTANCE = false;\n   private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n-  public static final boolean DEFAULT_LOGS_INJECTION_ENABLED = false;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NjQ1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381066455", "createdAt": "2020-02-19T04:03:23Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ExporterClassLoader.java", "diffHunk": "@@ -37,6 +38,17 @@ public ExporterClassLoader(final URL[] urls, final ClassLoader parent) {\n     super(urls, parent);\n   }\n \n+  @Override\n+  public Enumeration<URL> getResources(final String name) throws IOException {\n+    // A small hack to prevent other exporters from being loaded by this classloader if they\n+    // should happen to appear on the classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NzQzOQ==", "bodyText": "why not use default deadline?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381067439", "createdAt": "2020-02-19T04:07:47Z", "author": {"login": "trask"}, "path": "exporter-adapters/jaeger-adapter/src/main/java/io/opentelemetry/auto/exporters/jaeger/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.opentelemetry.auto.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n+\n+  private static final String SERVICE_CONFIG = \"service\";\n+\n+  private static final int DEFAULT_PORT = 14250;\n+\n+  private static final String DEFAULT_SERVICE = \"(unknown service)\";\n+\n+  @Override\n+  public SpanExporter fromConfig(final ConfigProvider config) {\n+    final String host = config.getString(HOST_CONFIG, null);\n+    if (host == null) {\n+      throw new IllegalArgumentException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final int port = config.getInt(PORT_CONFIG, DEFAULT_PORT);\n+    final String service = config.getString(SERVICE_CONFIG, DEFAULT_SERVICE);\n+    final ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n+    return JaegerGrpcSpanExporter.newBuilder()\n+        .setServiceName(service)\n+        .setChannel(jaegerChannel)\n+        .setDeadline(30000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NzkxNA==", "bodyText": "i'm personally a fan of longer variable names (and especially when there's no type name)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381067914", "createdAt": "2020-02-19T04:10:11Z", "author": {"login": "trask"}, "path": "exporter-adapters/src/test/groovy/io/opentelemetry/auto/exporteradapters/ExporterAdaptersTest.groovy", "diffHunk": "@@ -0,0 +1,34 @@\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory\n+import io.opentelemetry.auto.tooling.ExporterClassLoader\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+class ExporterAdaptersTest extends Specification {\n+  @Shared\n+  def projectVersion = System.getProperty(\"projectVersion\")\n+  def adapterRoot = System.getProperty(\"adapterRoot\")\n+\n+  def \"test exporter load\"() {\n+    setup:\n+    def file = new File(\"${adapterRoot}/${exporter}-adapter/build/libs/${exporter}-adapter-${projectVersion}-all.jar\")\n+    println \"Attempting to load ${file.toString()} for ${classname}\"\n+    assert file.exists(): \"${file.toString()} does not exist\"\n+    URL[] urls = [file.toURI().toURL()]\n+    def cl = new ExporterClassLoader(urls, this.getClass().getClassLoader())\n+    def sl = ServiceLoader.load(SpanExporterFactory, cl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODE4Nw==", "bodyText": "nice!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068187", "createdAt": "2020-02-19T04:11:36Z", "author": {"login": "trask"}, "path": "smoke-tests/play/src/test/groovy/io/opentelemetry/smoketest/PlaySmokeTest.groovy", "diffHunk": "@@ -13,25 +16,36 @@ class PlaySmokeTest extends AbstractServerSmokeTest {\n     ProcessBuilder processBuilder =\n       new ProcessBuilder(\"${playDirectory}/bin/playBinary\")\n     processBuilder.directory(playDirectory)\n+\n     processBuilder.environment().put(\"JAVA_OPTS\",\n       defaultJavaProperties.join(\" \")\n+        + \" -Dota.exporter.jar=${exporterPath}\"\n+        + \" -Dota.exporter.dummy.prefix=LOGGED_SPAN\"\n         + \" -Dconfig.file=${workingDirectory}/conf/application.conf -Dhttp.port=${httpPort}\"\n         + \" -Dhttp.address=127.0.0.1\")\n     return processBuilder\n   }\n \n   def \"welcome endpoint #n th time\"() {\n     setup:\n+    def spanCounter = new SpanCounter([\n+      (PLAY_SPAN): 1,\n+      (AKKA_SPAN): 1,\n+    ], 10000)\n     String url = \"http://localhost:$httpPort/welcome?id=$n\"\n     def request = new Request.Builder().url(url).get().build()\n \n     when:\n+    spanCounter.run(logfile)\n     def response = client.newCall(request).execute()\n+    def spans = spanCounter.waitForResult()\n \n     then:\n     def responseBodyStr = response.body().string()\n     responseBodyStr == \"Welcome $n.\"\n     response.code() == 200\n+    spans[PLAY_SPAN] == 1\n+    spans[AKKA_SPAN] == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODQ0Mw==", "bodyText": "was this exception not getting logged anywhere? maybe e.printStackTrace() instead?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068443", "createdAt": "2020-02-19T04:12:58Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "diffHunk": "@@ -17,7 +17,12 @@ abstract class AbstractServerSmokeTest extends AbstractSmokeTest {\n   protected OkHttpClient client = OkHttpUtils.client()\n \n   def setupSpec() {\n-    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    try {\n+      PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    } catch (e) {\n+      System.err.println(logfile.text)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODg3OQ==", "bodyText": "someday we'll pipe the spans over-the-wire to a listener (instead of piping them via-log-file). until then, this is good", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068879", "createdAt": "2020-02-19T04:15:41Z", "author": {"login": "trask"}, "path": "smoke-tests/wildfly/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "diffHunk": "@@ -18,8 +18,13 @@ class WildflySmokeTest extends AbstractServerSmokeTest {\n     ProcessBuilder processBuilder =\n       new ProcessBuilder(\"${wildflyDirectory}/bin/standalone.sh\")\n     processBuilder.directory(wildflyDirectory)\n+\n+    // We're installing a span exporter to make sure it doesn't blow anything up, but we're not\n+    // checking the spans, since JBoss seems to redirect stdout to something we don't have (easy) access to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2OTExNg==", "bodyText": "i think keep the example using jaeger?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381069116", "createdAt": "2020-02-19T04:16:48Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -21,7 +21,7 @@ as Java system properties (-D flags) or as environment variables. This is an exa\n \n ```\n java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n-     -Dota.exporter=jaeger \\\n+     -Dota.exporter.jar=exporter-adapters/dummy-exporter-adapter/build/libs/dummy-exporter-adapter-0.1.2-SNAPSHOT.jar \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd947cebfbcb75f21a09b3c5ef8a23e9ec8240f", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bcd947cebfbcb75f21a09b3c5ef8a23e9ec8240f", "committedDate": "2020-02-19T13:56:42Z", "message": "Fixed CircleCI issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206dcf8667c50b7d4a0fb1cb93fcce4f1ae23df8", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/206dcf8667c50b7d4a0fb1cb93fcce4f1ae23df8", "committedDate": "2020-02-19T14:52:59Z", "message": "Added tests to check what CircleCI is doing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7506714de74d56c4e81bd9f1301aebac7cb06af", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7506714de74d56c4e81bd9f1301aebac7cb06af", "committedDate": "2020-02-19T15:08:28Z", "message": "Added missing logging directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dec100147620430a96422a4d2d352630ad38896", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4dec100147620430a96422a4d2d352630ad38896", "committedDate": "2020-02-19T15:38:33Z", "message": "Removed deadline() from Jaeger factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71e4f5357383445ca0333dd4ab9fd0d4faca0540", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/71e4f5357383445ca0333dd4ab9fd0d4faca0540", "committedDate": "2020-02-19T16:13:53Z", "message": "Another attempt to make it pass CircleCI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79109ea99eb76e4e049da7277158952b81872629", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/79109ea99eb76e4e049da7277158952b81872629", "committedDate": "2020-02-20T19:54:09Z", "message": "Fixed some minor codeNarc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ee78f32a67ecff218987293a9325dac6ad1be2", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/66ee78f32a67ecff218987293a9325dac6ad1be2", "committedDate": "2020-02-21T12:34:14Z", "message": "Wrapped test config in doFirst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ccce10651c182120275eee848b87b18104f4c15", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6ccce10651c182120275eee848b87b18104f4c15", "committedDate": "2020-02-21T15:48:13Z", "message": "Merged and removed thread silliness in SpanCounter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d0edee97270a835a48f36b9fef5edd05e87987", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/14d0edee97270a835a48f36b9fef5edd05e87987", "committedDate": "2020-02-21T17:17:04Z", "message": "Change forEach -> each"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d274543500dd145f0210967cc9ad8f033485282e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d274543500dd145f0210967cc9ad8f033485282e", "committedDate": "2020-02-21T17:38:34Z", "message": "Removed README section about commercial exporters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODQ3NDMz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#pullrequestreview-362847433", "createdAt": "2020-02-21T19:00:38Z", "commit": {"oid": "d274543500dd145f0210967cc9ad8f033485282e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMDozOFrOFtBUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowNzozOVrOFtBgug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTc2NQ==", "bodyText": "can you reduce moving things around in this PR? it will help with merge conflicts as i'm still merging from https://github.com/DataDog/dd-trace-java", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382751765", "createdAt": "2020-02-21T19:00:38Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -638,4 +595,31 @@ public static Config get(final Properties properties) {\n       return new Config(properties, INSTANCE);\n     }\n   }\n+\n+  public boolean isIntegrationEnabled(\n+      final SortedSet<String> integrationNames, final boolean defaultEnabled) {\n+    return integrationEnabled(integrationNames, defaultEnabled);\n+  }\n+\n+  private Set<Integer> getIntegerRangeSettingFromEnvironment(\n+      final String name, final Set<Integer> defaultValue) {\n+    final String value = getSettingFromEnvironment(name, null);\n+    try {\n+      return value == null ? defaultValue : parseIntegerRangeSet(value, name);\n+    } catch (final NumberFormatException e) {\n+      log.warn(\"Invalid configuration for \" + name, e);\n+      return defaultValue;\n+    }\n+  }\n+\n+  private Set<Integer> getPropertyIntegerRangeValue(\n+      final Properties properties, final String name, final Set<Integer> defaultValue) {\n+    final String value = properties.getProperty(name);\n+    try {\n+      return value == null ? defaultValue : parseIntegerRangeSet(value, name);\n+    } catch (final NumberFormatException e) {\n+      log.warn(\"Invalid configuration for \" + name, e);\n+      return defaultValue;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d274543500dd145f0210967cc9ad8f033485282e"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MjcyMQ==", "bodyText": "i'm not seeing this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382752721", "createdAt": "2020-02-21T19:02:48Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDA3MA=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTAwMg==", "bodyText": "oh, this dumps the full text from the log file to stderr before the exception is logged by testing framework? got it, that makes sense", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382755002", "createdAt": "2020-02-21T19:07:39Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "diffHunk": "@@ -17,7 +17,12 @@ abstract class AbstractServerSmokeTest extends AbstractSmokeTest {\n   protected OkHttpClient client = OkHttpUtils.client()\n \n   def setupSpec() {\n-    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    try {\n+      PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    } catch (e) {\n+      System.err.println(logfile.text)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODQ0Mw=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e97b3c2d71d81950f2e30c7f1b894296a49de6", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/89e97b3c2d71d81950f2e30c7f1b894296a49de6", "committedDate": "2020-02-21T20:14:21Z", "message": "Merge branch 'master' into prydin-dynamic-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe63fc65d435b3779acafbdb9940b684d4ca8de3", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe63fc65d435b3779acafbdb9940b684d4ca8de3", "committedDate": "2020-02-21T20:30:07Z", "message": "Reduced number of changes to Config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "087752cb87e06255a2bd820643e2532dad9d69dd", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/087752cb87e06255a2bd820643e2532dad9d69dd", "committedDate": "2020-02-21T20:30:30Z", "message": "Merge branch 'prydin-dynamic-jaeger' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-dynamic-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f21747387520d6f954add4ec36607b43266db1", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/60f21747387520d6f954add4ec36607b43266db1", "committedDate": "2020-02-21T21:15:48Z", "message": "Fixed field reordering issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df09a89f7f1347d2d53de758ceabad2ce24fa4e5", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df09a89f7f1347d2d53de758ceabad2ce24fa4e5", "committedDate": "2020-02-21T22:56:16Z", "message": "Removed references to dummy exporter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTcwNzE0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#pullrequestreview-362970714", "createdAt": "2020-02-21T23:11:58Z", "commit": {"oid": "df09a89f7f1347d2d53de758ceabad2ce24fa4e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3313, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}