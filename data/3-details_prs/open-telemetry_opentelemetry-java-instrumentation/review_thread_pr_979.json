{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODY1Mjc4", "number": 979, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoxNjowN1rOEYaquA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyMDoxNVrOEYavfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDM4MjAwOnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/auto/armeria-1.0-auto.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoxNjowN1rOHAvaDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODowOTozNVrOHC73Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzODc2NA==", "bodyText": "How this will work in production where java_concurrent instrumentation IS enabled by default? Don't you want to test in realistic env?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r470538764", "createdAt": "2020-08-14T10:16:07Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/auto/armeria-1.0-auto.gradle", "diffHunk": "@@ -22,3 +22,9 @@ dependencies {\n \n   testImplementation project(':instrumentation:armeria-1.0:testing')\n }\n+\n+tasks.withType(Test) {\n+  // Armeria has its own mechanism for context propagation which we don't want our automatic context\n+  // propagation mechanism to interfere with.\n+  jvmArgs '-Dotel.integration.java_concurrent.enabled=false'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgzOTk1OA==", "bodyText": "Yeah I don't have a good story for this yet - I tried to inject the context storage override and play with this flag disabled but the bootstrap classloader issue I ran into is problematic. I may need to just instrument the context methods themselves. I will follow up for it.\nInterestingly, even with concurrent instrumentation, my unit test fails - I don't do anything particularly weird in it I think, just call CompletableFuture :(", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r472839958", "createdAt": "2020-08-19T08:09:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/auto/armeria-1.0-auto.gradle", "diffHunk": "@@ -22,3 +22,9 @@ dependencies {\n \n   testImplementation project(':instrumentation:armeria-1.0:testing')\n }\n+\n+tasks.withType(Test) {\n+  // Armeria has its own mechanism for context propagation which we don't want our automatic context\n+  // propagation mechanism to interfere with.\n+  jvmArgs '-Dotel.integration.java_concurrent.enabled=false'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzODc2NA=="}, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDM5NDIwOnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/library/src/main/java/io/grpc/override/ContextStorageOverride.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyMDoxNVrOHAvhTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxODowN1rOHDo9Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MDYyMQ==", "bodyText": "First, javadoc please :)\nSecond, having this class will override context storage for the whole JVM with our agent. Including all our instrumentations. And may change the before of the application, if it already has its own override.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r470540621", "createdAt": "2020-08-14T10:20:15Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/grpc/override/ContextStorageOverride.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import io.grpc.Context;\n+import io.grpc.Context.Storage;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextStorageOverride extends Storage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0MTk2Mw==", "bodyText": "Yeah - I think this is better behavior for Armeria users than the default. When Armeria context isn't available, the behavior is the same as normal so I'm not terribly worried about affecting the JVM.\nBut this gRPC API is silly so is problematic... indeed most problematic is if the user wants to override this themselves. Best I can think of is to provide our implementation (I extracted into a separate class) so they can delegate to it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r472841963", "createdAt": "2020-08-19T08:11:45Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/grpc/override/ContextStorageOverride.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import io.grpc.Context;\n+import io.grpc.Context.Storage;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextStorageOverride extends Storage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MDYyMQ=="}, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3OTkzMA==", "bodyText": "Have you tested this with the full javaagent? I think (shaded) io.grpc.override.ContextStorageOverride will be in the AgentClassLoader, while (shaded) io.grpc.Context will be in the bootstrap class loader, so may not find the (shaded) io.grpc.override.ContextStorageOverride.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r473279930", "createdAt": "2020-08-19T19:50:32Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/grpc/override/ContextStorageOverride.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import io.grpc.Context;\n+import io.grpc.Context.Storage;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextStorageOverride extends Storage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MDYyMQ=="}, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3ODgyMg==", "bodyText": "Yeah I think this is why the auto unit tests don't work. I'll continue to follow up on it, but any quick ideas on why the java_concurrent instrumentation wouldn't be enough anyways? #979 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/979#discussion_r473578822", "createdAt": "2020-08-20T04:18:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/grpc/override/ContextStorageOverride.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.override;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import io.grpc.Context;\n+import io.grpc.Context.Storage;\n+import io.netty.util.AttributeKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ContextStorageOverride extends Storage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MDYyMQ=="}, "originalCommit": {"oid": "ec915bf4e5356b735040325eab5d9cfbd5ad41cc"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 39, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}