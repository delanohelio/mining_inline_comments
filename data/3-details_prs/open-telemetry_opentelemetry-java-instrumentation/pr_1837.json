{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMTUwNTMy", "number": 1837, "title": "Make sure AWS SDK spans suppress client spans all the time.", "bodyText": "Also explicitly populate aws header instead of global propagators.\nA lot to process here.\nCurrently, AWS SDK instrumentation always breaks the signature because transport spans aren't suppressed.\nWhen separating out library / javaagent instrumentation ages ago, I was still very green in this repo and don't think I understood the point of the testImplementation dependencies on downstream instrumentation and didn't port them over. So for a while we haven't verified suppression of transport spans.\nSync: This was working in 0.10.0 and stopped working in 0.11.0. I haven't dug into why but presume some refactoring around client tracers is related. We would have caught the issue if I hadn't broken the tests in the first place.\nAsync: I suspect this has been broken for a long time, but none of our (e.g., aws-otel-java) integration tests use async clients yet. The docs from age-old code in the instrumentation seemed to indicate context is propagated to Netty properly, though extremely hackily, so I removed the even more hacky amz-sdk-invocation-id header check that we used to have to prevent signature breakage. But after adding the downstream instrumentation to the tests, I found that this wasn't the case. Using an IntelliJ debugger, I could confirm beforeTransmission is run on the application thread, not Netty thread, so the complicated instrumentation hack was having no effect (our executor instrumentation does not apply to netty event loops so I wouldn't expect those to ever have been helping here. Anyways, it's too deep to rely on IMO.). I went ahead and removed the hacky instrumentation and moved the scope management to the interceptor for use in synchronous clients only. For the netty spans, I restored the fun amz-sdk-invocation-id as no alternative seems clearly better.\nI also went ahead and had the SDK explicitly use aws propagation instead of the global ones. Unlike lambda, there is no use case for any other header, probably not for the next several years really, so this will allow a user's app to be more efficient, they don't have to enable aws globally (meaning on their own ingestion and extraction), and still get the benefit it provides on AWS SDK calls. This makes the integration test confirming that headers haven't been added (breaking signature, the worst thing our instrumentation could ever do) more robust in the process.", "createdAt": "2020-12-06T06:48:04Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837", "merged": true, "mergeCommit": {"oid": "c5a257619a3301e00f2777666899788987981db8"}, "closed": true, "closedAt": "2020-12-07T08:10:44Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjbGBeAH2gAyNTMzMTUwNTMyOjYxYTVmM2FjNzVmZjg3YmZhMjAyZGY3NThmZTg0NjlkOTgzY2JhNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjwOeHAH2gAyNTMzMTUwNTMyOmZjZDQwOWE0NTAwZmI1Y2RlNDk4YWE4YWI4NDRhOWZhYzVkNjExYjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "61a5f3ac75ff87bfa202df758fe8469d983cba59", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61a5f3ac75ff87bfa202df758fe8469d983cba59", "committedDate": "2020-12-06T06:38:36Z", "message": "Make sure AWS SDK spans suppress client spans all the time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Njc2Mzc3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#pullrequestreview-545676377", "createdAt": "2020-12-06T06:52:42Z", "commit": {"oid": "1c618e4b730d565aac3572d9080b84d852a393e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNjo1Mjo0MlrOIAGMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQwNjo1Mjo0MlrOIAGMGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjk3MjMxMg==", "bodyText": "I think after #1643 I may try to remove this class, instead just service loading the shaded library instrumentation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#discussion_r536972312", "createdAt": "2020-12-06T06:52:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -41,10 +39,6 @@\n  */\n public class TracingExecutionInterceptor implements ExecutionInterceptor {\n \n-  public static class ScopeHolder {\n-    public static final ThreadLocal<Scope> CURRENT = new ThreadLocal<>();\n-  }\n-\n   private final ExecutionInterceptor delegate;\n \n   public TracingExecutionInterceptor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c618e4b730d565aac3572d9080b84d852a393e6"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c618e4b730d565aac3572d9080b84d852a393e6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c618e4b730d565aac3572d9080b84d852a393e6", "committedDate": "2020-12-06T06:51:28Z", "message": "dependency hell"}, "afterCommit": {"oid": "61a5f3ac75ff87bfa202df758fe8469d983cba59", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61a5f3ac75ff87bfa202df758fe8469d983cba59", "committedDate": "2020-12-06T06:38:36Z", "message": "Make sure AWS SDK spans suppress client spans all the time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e2c328b46d1c355e489db990e982964befd431", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/27e2c328b46d1c355e489db990e982964befd431", "committedDate": "2020-12-07T02:31:18Z", "message": "Make more consistent with other instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODU0MDI0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#pullrequestreview-545854024", "createdAt": "2020-12-07T06:12:17Z", "commit": {"oid": "27e2c328b46d1c355e489db990e982964befd431"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMjoxN1rOIAXbcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjoxMjoxN1rOIAXbcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NDc3MA==", "bodyText": "I think including a note here about the signature problem would be good too, since that's the biggest worry\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // instrumentation, which executs on event loops. If it's possible, it may require instrumenting\n          \n          \n            \n                // instrumentation, which executes on event loops. If it's possible, it may require instrumenting", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#discussion_r537254770", "createdAt": "2020-12-07T06:12:17Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/netty/v4_1/client/NettyHttpClientTracer.java", "diffHunk": "@@ -65,6 +66,21 @@ protected String responseHeader(HttpResponse httpResponse, String name) {\n     return SETTER;\n   }\n \n+  public boolean shouldStartSpan(Context parentContext, HttpRequest request) {\n+    if (!super.shouldStartSpan(parentContext)) {\n+      return false;\n+    }\n+    // The AWS SDK uses Netty for asynchronous clients. We have not found how to propagate Context\n+    // from the SDK instrumentation, which executes on an application thread, to Netty\n+    // instrumentation, which executs on event loops. If it's possible, it may require instrumenting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e2c328b46d1c355e489db990e982964befd431"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0681694bd71a3a409a7b0602140cdaf6d967f3f2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0681694bd71a3a409a7b0602140cdaf6d967f3f2", "committedDate": "2020-12-07T06:38:24Z", "message": "Update instrumentation/netty/netty-4.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/netty/v4_1/client/NettyHttpClientTracer.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6551c0dc2e58a92b645247f436ff1828a80e2028", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6551c0dc2e58a92b645247f436ff1828a80e2028", "committedDate": "2020-12-07T06:41:00Z", "message": "more dragons"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODY1NTUy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#pullrequestreview-545865552", "createdAt": "2020-12-07T06:43:18Z", "commit": {"oid": "6551c0dc2e58a92b645247f436ff1828a80e2028"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MzoxOVrOIAYF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MzoxOVrOIAYF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NTY1Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#discussion_r537265657", "createdAt": "2020-12-07T06:43:19Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/netty/v4_1/client/NettyHttpClientTracer.java", "diffHunk": "@@ -70,11 +70,14 @@ public boolean shouldStartSpan(Context parentContext, HttpRequest request) {\n     if (!super.shouldStartSpan(parentContext)) {\n       return false;\n     }\n-    // The AWS SDK uses Netty for asynchronous clients. We have not found how to propagate Context\n-    // from the SDK instrumentation, which executes on an application thread, to Netty\n-    // instrumentation, which executes on event loops. If it's possible, it may require instrumenting\n-    // internal classes. Using a header which is more or less guaranteed to always exist is arguably\n-    // more stable.\n+    // The AWS SDK uses Netty for asynchronous clients but constructs a request signature before\n+    // beginning transport. This means we MUST suppress Netty spans we would normally create or\n+    // they will inject their own trace header, which does not match what was present when the\n+    // signature was computed, breaking the SDK request completely We have not found how to\n+    // cleanly propagate context from the SDK instrumentation, which executes on an application\n+    // thread, to Netty instrumentation, which executes on event loops. If it's possible, it may\n+    // require instrumenting internal classes. Using a header which is more or less guaranteed to\n+    // always exist is arguably more stable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6551c0dc2e58a92b645247f436ff1828a80e2028"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfc600e11129a2d568ed88f81650105f19bb573", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dcfc600e11129a2d568ed88f81650105f19bb573", "committedDate": "2020-12-07T06:43:42Z", "message": "Grammar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1ODc0OTcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#pullrequestreview-545874973", "createdAt": "2020-12-07T07:06:35Z", "commit": {"oid": "dcfc600e11129a2d568ed88f81650105f19bb573"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzowNjozNlrOIAYoNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzowNjozNlrOIAYoNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3NDQyMA==", "bodyText": "Even if you are sure that AWS SDK calls are always terminal and that nobody uses some alternative implementations of AWS services (like local S3 server?), we at least have to document this behaviour very clearly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1837#discussion_r537274420", "createdAt": "2020-12-07T07:06:36Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -79,46 +80,55 @@ private RequestType getTypeFromAttributes(ExecutionAttributes executionAttribute\n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = tracer().getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer(), kind);\n-    executionAttributes.putAttribute(\n-        CONTEXT_ATTRIBUTE, io.opentelemetry.context.Context.current().with(span));\n+    io.opentelemetry.context.Context parentContext = io.opentelemetry.context.Context.current();\n+    if (!tracer().shouldStartSpan(parentContext)) {\n+      return;\n+    }\n+    io.opentelemetry.context.Context otelContext =\n+        tracer().startSpan(parentContext, spanName(executionAttributes), AwsSdk.tracer(), kind);\n+    executionAttributes.putAttribute(CONTEXT_ATTRIBUTE, otelContext);\n     RequestType type = ofSdkRequest(context.request());\n     if (type != null) {\n       executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, type);\n     }\n+    if (executionAttributes\n+        .getAttribute(SdkExecutionAttribute.CLIENT_TYPE)\n+        .equals(ClientType.SYNC)) {\n+      // We can only activate context for synchronous clients, which allows downstream\n+      // instrumentation like Apache to know about the SDK span.\n+      executionAttributes.putAttribute(SCOPE_ATTRIBUTE, otelContext.makeCurrent());\n+    }\n   }\n \n   @Override\n   public SdkHttpRequest modifyHttpRequest(\n       Context.ModifyHttpRequest context, ExecutionAttributes executionAttributes) {\n-    io.opentelemetry.context.Context otelContext =\n-        executionAttributes.getAttribute(CONTEXT_ATTRIBUTE);\n-    // Never null in practice unless another interceptor cleared out the attribute, which\n-    // is theoretically possible.\n+    io.opentelemetry.context.Context otelContext = getContextFromAttributes(executionAttributes);\n     if (otelContext == null) {\n       return context.httpRequest();\n     }\n+\n     SdkHttpRequest.Builder builder = context.httpRequest().toBuilder();\n-    OpenTelemetry.getGlobalPropagators()\n-        .getTextMapPropagator()\n-        .inject(otelContext, builder, AwsSdkInjectAdapter.INSTANCE);\n+    AwsXRayPropagator.getInstance().inject(otelContext, builder, AwsSdkInjectAdapter.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfc600e11129a2d568ed88f81650105f19bb573"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd409a4500fb5cde498aa8ab844a9fac5d611b9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fcd409a4500fb5cde498aa8ab844a9fac5d611b9", "committedDate": "2020-12-07T07:15:50Z", "message": "README"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2140, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}