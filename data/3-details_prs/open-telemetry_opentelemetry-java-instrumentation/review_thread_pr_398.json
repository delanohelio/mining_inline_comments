{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NjYzOTM2", "number": 398, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNzowNlrOD7GHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNTo1OFrOD7Xf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjkyNzk1OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/TracingSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNzowNlrOGTN9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNzowNlrOGTN9jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNDg3OA==", "bodyText": "Remove dd- prefix?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r422804878", "createdAt": "2020-05-11T06:17:06Z", "author": {"login": "iNikem"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/TracingSession.java", "diffHunk": "@@ -45,7 +46,9 @@\n   private static final Tracer TRACER =\n       OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.cassandra-3.0\");\n \n-  private final ExecutorService executorService = Executors.newCachedThreadPool();\n+  private static final ExecutorService EXECUTOR_SERVICE =\n+      Executors.newCachedThreadPool(new DaemonThreadFactory(\"dd-cassandra-session-executor\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjkyOTgwOnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.0/lettuce-5.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNzo1MlrOGTN-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyMzo1MFrOGTcCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNTE1OQ==", "bodyText": "Is this needed for all tests or for latestDepTest only?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r422805159", "createdAt": "2020-05-11T06:17:52Z", "author": {"login": "iNikem"}, "path": "instrumentation/lettuce/lettuce-5.0/lettuce-5.0.gradle", "diffHunk": "@@ -28,7 +28,7 @@ dependencies {\n \n   testCompile group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'\n   testCompile group: 'io.lettuce', name: 'lettuce-core', version: '5.0.0.RELEASE'\n+  testCompile project(':instrumentation:reactor-3.1')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNTU4MA==", "bodyText": "All, the earliest versions of Lettuce 5 use project reactor", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r423035580", "createdAt": "2020-05-11T13:23:50Z", "author": {"login": "devinsba"}, "path": "instrumentation/lettuce/lettuce-5.0/lettuce-5.0.gradle", "diffHunk": "@@ -28,7 +28,7 @@ dependencies {\n \n   testCompile group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'\n   testCompile group: 'io.lettuce', name: 'lettuce-core', version: '5.0.0.RELEASE'\n+  testCompile project(':instrumentation:reactor-3.1')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNTE1OQ=="}, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjk0MDY4OnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp/okhttp-2.2/okhttp-2.2.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyMjowMFrOGTOE7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyMjowMFrOGTOE7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNjc2Nw==", "bodyText": "I don't see that auto-tooling depends on okhttp", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r422806767", "createdAt": "2020-05-11T06:22:00Z", "author": {"login": "iNikem"}, "path": "instrumentation/okhttp/okhttp-2.2/okhttp-2.2.gradle", "diffHunk": "@@ -0,0 +1,41 @@\n+apply from: \"${rootDir}/gradle/instrumentation.gradle\"\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+/*\n+Note: The Interceptor class for OkHttp was not introduced until 2.2+, so we need to make sure the\n+instrumentation is not loaded unless the dependency is 2.2+.\n+*/\n+muzzle {\n+  pass {\n+    group = \"com.squareup.okhttp\"\n+    module = \"okhttp\"\n+    versions = \"[2.2,3)\"\n+    assertInverse = true\n+  }\n+}\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(group: 'com.squareup.okhttp', name: 'okhttp', version: '2.2.0')\n+\n+  compile(project(':auto-tooling')) {\n+    exclude module: 'okhttp'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjk0Mjc4OnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp/okhttp-2.2/okhttp-2.2.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyMjozOFrOGTOGHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyMjozOFrOGTOGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzA2OA==", "bodyText": "Same here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r422807068", "createdAt": "2020-05-11T06:22:38Z", "author": {"login": "iNikem"}, "path": "instrumentation/okhttp/okhttp-2.2/okhttp-2.2.gradle", "diffHunk": "@@ -0,0 +1,41 @@\n+apply from: \"${rootDir}/gradle/instrumentation.gradle\"\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+/*\n+Note: The Interceptor class for OkHttp was not introduced until 2.2+, so we need to make sure the\n+instrumentation is not loaded unless the dependency is 2.2+.\n+*/\n+muzzle {\n+  pass {\n+    group = \"com.squareup.okhttp\"\n+    module = \"okhttp\"\n+    versions = \"[2.2,3)\"\n+    assertInverse = true\n+  }\n+}\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(group: 'com.squareup.okhttp', name: 'okhttp', version: '2.2.0')\n+\n+  compile(project(':auto-tooling')) {\n+    exclude module: 'okhttp'\n+  }\n+\n+  testCompile(project(':testing')) {\n+    exclude module: 'okhttp'\n+  }\n+  testCompile(project(':instrumentation:java-concurrent')) {\n+    exclude module: 'okhttp'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjk2MDY5OnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp/okhttp-2.2/src/test/groovy/OkHttp2AsyncTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoyOTozMlrOGTOQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDo0NzoyOFrOGTySXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwOTcxMw==", "bodyText": "Maybe easier to use one CompletableFuture instead of two AtomicReference and a CountDownLatch? Callback will call either complete or completeExceptionally and test can end in just one line return future.get(10, SECONDS).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r422809713", "createdAt": "2020-05-11T06:29:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/okhttp/okhttp-2.2/src/test/groovy/OkHttp2AsyncTest.groovy", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.squareup.okhttp.Callback\n+import com.squareup.okhttp.Headers\n+import com.squareup.okhttp.MediaType\n+import com.squareup.okhttp.Request\n+import com.squareup.okhttp.RequestBody\n+import com.squareup.okhttp.Response\n+import com.squareup.okhttp.internal.http.HttpMethod\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.atomic.AtomicReference\n+\n+import static java.util.concurrent.TimeUnit.SECONDS\n+\n+class OkHttp2AsyncTest extends OkHttp2Test {\n+  @Override\n+  int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n+    def body = HttpMethod.requiresRequestBody(method) ? RequestBody.create(MediaType.parse(\"text/plain\"), \"\") : null\n+    def request = new Request.Builder()\n+      .url(uri.toURL())\n+      .method(method, body)\n+      .headers(Headers.of(HeadersUtil.headersToArray(headers)))\n+      .build()\n+\n+    AtomicReference<Response> responseRef = new AtomicReference()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMDAzMA==", "bodyText": "Ah, this didn't end up working out because the Java 7 tests failed, oh well, it was a nice idea \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r423400030", "createdAt": "2020-05-12T00:47:28Z", "author": {"login": "trask"}, "path": "instrumentation/okhttp/okhttp-2.2/src/test/groovy/OkHttp2AsyncTest.groovy", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import com.squareup.okhttp.Callback\n+import com.squareup.okhttp.Headers\n+import com.squareup.okhttp.MediaType\n+import com.squareup.okhttp.Request\n+import com.squareup.okhttp.RequestBody\n+import com.squareup.okhttp.Response\n+import com.squareup.okhttp.internal.http.HttpMethod\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.atomic.AtomicReference\n+\n+import static java.util.concurrent.TimeUnit.SECONDS\n+\n+class OkHttp2AsyncTest extends OkHttp2Test {\n+  @Override\n+  int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n+    def body = HttpMethod.requiresRequestBody(method) ? RequestBody.create(MediaType.parse(\"text/plain\"), \"\") : null\n+    def request = new Request.Builder()\n+      .url(uri.toURL())\n+      .method(method, body)\n+      .headers(Headers.of(HeadersUtil.headersToArray(headers)))\n+      .build()\n+\n+    AtomicReference<Response> responseRef = new AtomicReference()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwOTcxMw=="}, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDQyMzg1OnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceReactiveClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyNjoxMVrOGTcI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyNjoxMVrOGTcI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNzE1NA==", "bodyText": "I should have removed these comments. They no longer apply now that the tests pass", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r423037154", "createdAt": "2020-05-11T13:26:11Z", "author": {"login": "devinsba"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceReactiveClientTest.groovy", "diffHunk": "@@ -287,4 +290,121 @@ class LettuceReactiveClientTest extends AgentTestRunner {\n     }\n   }\n \n+  def \"blocking subscriber\"() {\n+    when:\n+    runUnderTrace(\"test-parent\") {\n+      reactiveCommands.set(\"a\", \"1\")\n+        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace\n+        .block()\n+    }\n+\n+    then:\n+    assertTraces(1) {\n+      trace(0, 3) {\n+        span(0) {\n+          operationName \"test-parent\"\n+          errored false\n+          tags {\n+          }\n+        }\n+        span(1) {\n+          operationName \"SET\"\n+          spanKind CLIENT\n+          errored false\n+          childOf span(0)\n+          tags {\n+            \"$Tags.DB_TYPE\" \"redis\"\n+          }\n+        }\n+        span(2) {\n+          operationName \"GET\"\n+          spanKind CLIENT\n+          errored false\n+          childOf span(0)\n+          tags {\n+            \"$Tags.DB_TYPE\" \"redis\"\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def \"async subscriber\"() {\n+    when:\n+    runUnderTrace(\"test-parent\") {\n+      reactiveCommands.set(\"a\", \"1\")\n+        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace\n+        .subscribe()\n+    }\n+\n+    then:\n+    assertTraces(1) {\n+      trace(0, 3) {\n+        span(0) {\n+          operationName \"test-parent\"\n+          errored false\n+          tags {\n+          }\n+        }\n+        span(1) {\n+          operationName \"SET\"\n+          spanKind CLIENT\n+          errored false\n+          childOf span(0)\n+          tags {\n+            \"$Tags.DB_TYPE\" \"redis\"\n+          }\n+        }\n+        span(2) {\n+          operationName \"GET\"\n+          spanKind CLIENT\n+          errored false\n+          childOf span(0)\n+          tags {\n+            \"$Tags.DB_TYPE\" \"redis\"\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def \"async subscriber with specific thread pool\"() {\n+    when:\n+    runUnderTrace(\"test-parent\") {\n+      reactiveCommands.set(\"a\", \"1\")\n+        .then(reactiveCommands.get(\"a\")) // The get here is ending up in another trace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51253f1c66aae01073e3693ab16c14cf687174f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTc3NTcwOnYy", "diffSide": "RIGHT", "path": "instrumentation/okhttp/okhttp-2.2/src/test/groovy/OkHttp2AsyncTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNTo1OFrOGTpg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTowNTo1OFrOGTpg7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI1NjMwMA==", "bodyText": "timeout on get?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/398#discussion_r423256300", "createdAt": "2020-05-11T19:05:58Z", "author": {"login": "iNikem"}, "path": "instrumentation/okhttp/okhttp-2.2/src/test/groovy/OkHttp2AsyncTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.squareup.okhttp.*\n+import com.squareup.okhttp.internal.http.HttpMethod\n+\n+import java.util.concurrent.CompletableFuture\n+\n+class OkHttp2AsyncTest extends OkHttp2Test {\n+  @Override\n+  int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n+    def body = HttpMethod.requiresRequestBody(method) ? RequestBody.create(MediaType.parse(\"text/plain\"), \"\") : null\n+    def request = new Request.Builder()\n+        .url(uri.toURL())\n+        .method(method, body)\n+        .headers(Headers.of(HeadersUtil.headersToArray(headers)))\n+        .build()\n+\n+    def future = new CompletableFuture<Response>()\n+\n+    client.newCall(request).enqueue(new Callback() {\n+      void onResponse(Response response) {\n+        callback?.call()\n+        future.complete(response)\n+      }\n+\n+      void onFailure(Request req, IOException e) {\n+        future.completeExceptionally(e)\n+      }\n+    })\n+    return future.get().code()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d9134a36c72d0597d64a76ffed11a2e5da3f1d"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 433, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}