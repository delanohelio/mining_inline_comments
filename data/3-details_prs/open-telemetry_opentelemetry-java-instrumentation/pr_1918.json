{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMTU3Mjc5", "number": 1918, "title": "Muzzle should add SPI classes defined in helperResourceNames as references", "bodyText": "Resolves #1887", "createdAt": "2020-12-16T13:14:58Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1918", "merged": true, "mergeCommit": {"oid": "cd58ac816e52e7804484650038c6d8321b0a2295"}, "closed": true, "closedAt": "2020-12-17T05:54:05Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmusB8gH2gAyNTQxMTU3Mjc5Ojg3ZGZmNzIzNGY0ZWJhNGJhMWMxYTY1NmZhNDg3YWE4ZmNiMDZhNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm2kMjAFqTU1NDEzMTY0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87dff7234f4eba4ba1c1a656fa487aa8fcb06a71", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/87dff7234f4eba4ba1c1a656fa487aa8fcb06a71", "committedDate": "2020-12-16T13:10:05Z", "message": "Muzzle should add SPI classes defined in helperResourceNames as references"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzQ4NzU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1918#pullrequestreview-553748757", "createdAt": "2020-12-16T14:38:41Z", "commit": {"oid": "87dff7234f4eba4ba1c1a656fa487aa8fcb06a71"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDozODo0MVrOIHIdJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo0MDoxMlrOIHIh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM0OTQ3Nw==", "bodyText": "Thanks a lot for the change!!! Just checking, will muzzle task fail if this class isn't included now?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1918#discussion_r544349477", "createdAt": "2020-12-16T14:38:41Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/awssdk/v2_2/AwsSdkInstrumentationModule.java", "diffHunk": "@@ -22,17 +22,7 @@ public AwsSdkInstrumentationModule() {\n \n   @Override\n   public String[] additionalHelperClassNames() {\n-    return new String[] {\n-      \"io.opentelemetry.javaagent.instrumentation.awssdk.v2_2.TracingExecutionInterceptor\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdk\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkHttpClientTracer\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.AwsSdkInjectAdapter\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.RequestType\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.SdkRequestDecorator\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.DbRequestDecorator\",\n-      \"io.opentelemetry.instrumentation.awssdk.v2_2.TracingExecutionInterceptor\",\n-      \"io.opentelemetry.extension.trace.propagation.AwsXRayPropagator\"\n-    };\n+    return new String[] {\"io.opentelemetry.extension.trace.propagation.AwsXRayPropagator\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87dff7234f4eba4ba1c1a656fa487aa8fcb06a71"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1MDcwNQ==", "bodyText": "Is it possible to use Files.lines or Files.readAllLines?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1918#discussion_r544350705", "createdAt": "2020-12-16T14:40:12Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -7,54 +7,103 @@\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static io.opentelemetry.javaagent.tooling.muzzle.InstrumentationClassPredicate.isInstrumentationClass;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.singleton;\n \n+import com.google.common.base.Strings;\n import com.google.common.graph.Graph;\n import com.google.common.graph.GraphBuilder;\n import com.google.common.graph.Graphs;\n import com.google.common.graph.MutableGraph;\n import io.opentelemetry.javaagent.tooling.Utils;\n import io.opentelemetry.javaagent.tooling.muzzle.Reference;\n+import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.net.URLConnection;\n import java.util.ArrayDeque;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n+import java.util.regex.Pattern;\n import net.bytebuddy.jar.asm.ClassReader;\n \n /**\n  * {@link LinkedHashMap} is used for reference map to guarantee a deterministic order of iteration,\n  * so that bytecode generated based on it would also be deterministic.\n+ *\n+ * <p>This class is only called at compile time by the {@link MuzzleCodeGenerationPlugin} ByteBuddy\n+ * plugin.\n  */\n public class ReferenceCollector {\n   private final Map<String, Reference> references = new LinkedHashMap<>();\n   private final MutableGraph<String> helperSuperClassGraph = GraphBuilder.directed().build();\n   private final Set<String> visitedClasses = new HashSet<>();\n \n+  /**\n+   * If passed {@code resource} path points to an SPI file (either Java {@link\n+   * java.util.ServiceLoader} or AWS SDK {@code ExecutionInterceptor}) reads the file and adds every\n+   * implementation as a reference, traversing the graph of classes until a non-instrumentation\n+   * (external) class is encountered.\n+   *\n+   * @param resource path to the resource file, same as in {@link ClassLoader#getResource(String)}\n+   * @see io.opentelemetry.javaagent.tooling.muzzle.InstrumentationClassPredicate\n+   */\n+  public void collectReferencesFromResource(String resource) {\n+    if (!isSpiFile(resource)) {\n+      return;\n+    }\n+\n+    List<String> spiImplementations = new ArrayList<>();\n+    try (InputStream stream = getResourceStream(resource)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87dff7234f4eba4ba1c1a656fa487aa8fcb06a71"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTMxNjQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1918#pullrequestreview-554131644", "createdAt": "2020-12-16T22:20:46Z", "commit": {"oid": "87dff7234f4eba4ba1c1a656fa487aa8fcb06a71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2009, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}