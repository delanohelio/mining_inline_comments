{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTQ0NzA0", "number": 87, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzozNlrODaTGEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzozNlrODaTGEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTAyNDE4OnYy", "diffSide": "RIGHT", "path": "instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzozNlrOFhLP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoxMzozNlrOFhLP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMTYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new SpanScopePair(span, TRACER.withSpan(span));\n          \n          \n            \n                    return TRACER.withSpan(DefaultSpan.getInvalid());\n          \n      \n    \n    \n  \n\nand pass Scope to @OnMethodExit\n(the idea behind this instrumentation is that it prevents the current span from propagating into async work that should not be considered as part of the current request)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/87#discussion_r370331631", "createdAt": "2020-01-23T20:13:36Z", "author": {"login": "trask"}, "path": "instrumentation/java-concurrent/src/main/java/io/opentelemetry/auto/instrumentation/java/concurrent/AsyncPropagatingDisableInstrumentation.java", "diffHunk": "@@ -87,18 +85,18 @@ public DisableAsyncInstrumentation(\n   public static class DisableAsyncAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope enter() {\n-      final AgentSpan span = activeSpan();\n-      if (span != null) {\n-        return activateSpan(noopSpan(), false);\n+    public static SpanScopePair enter() {\n+      final Span span = TRACER.getCurrentSpan();\n+      if (span.getContext().isValid()) {\n+        return new SpanScopePair(span, TRACER.withSpan(span));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "224497083859edf448046cbf4529a6837b48a248"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 625, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}