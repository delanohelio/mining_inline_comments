{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MjIyMTg1", "number": 1339, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1MzozN1rOErKhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1MzozN1rOErKhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjk2NzE5OnYy", "diffSide": "RIGHT", "path": "docs/logger-mdc-instrumentation.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo1MzozN1rOHdx1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo0NDo0NVrOHd2_Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzI3Nw==", "bodyText": "If it is always true, why include it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1339#discussion_r500987277", "createdAt": "2020-10-07T12:53:37Z", "author": {"login": "iNikem"}, "path": "docs/logger-mdc-instrumentation.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Logger MDC auto-instrumentation\n+\n+The Mapped Diagnostic Context (MDC) is\n+\n+> an instrument for distinguishing interleaved log output from different sources.\n+> &mdash; <cite> [log4j MDC documentation](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html) </cite>\n+\n+It contains thread-local contextual information which is later copied to each logging event captured\n+by a logging library.\n+\n+The OTel Java agent injects several pieces of information about the current span into each logging\n+event's MDC copy:\n+\n+- `traceId` - the current trace id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getTraceIdAsHexString()`);\n+- `spanId` - the current span id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getSpanIdAsHexString()`);\n+- `sampled` - a boolean flag marking whether the current span is sampled or not\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().isSampled()`).\n+  Only added when `sampled` is `true`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "868a1c4365190e61187bfd476cf90bff5b1c3ee3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1MTQwNA==", "bodyText": "I've added an explanation to the doc. Basically if it's there the span is sampled, if not it is not - I guess the reasoning behind it is that most of spans are not sampled and keeping sampled=false in every log line would be just a waste of space.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1339#discussion_r501051404", "createdAt": "2020-10-07T14:19:20Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/logger-mdc-instrumentation.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Logger MDC auto-instrumentation\n+\n+The Mapped Diagnostic Context (MDC) is\n+\n+> an instrument for distinguishing interleaved log output from different sources.\n+> &mdash; <cite> [log4j MDC documentation](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html) </cite>\n+\n+It contains thread-local contextual information which is later copied to each logging event captured\n+by a logging library.\n+\n+The OTel Java agent injects several pieces of information about the current span into each logging\n+event's MDC copy:\n+\n+- `traceId` - the current trace id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getTraceIdAsHexString()`);\n+- `spanId` - the current span id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getSpanIdAsHexString()`);\n+- `sampled` - a boolean flag marking whether the current span is sampled or not\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().isSampled()`).\n+  Only added when `sampled` is `true`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzI3Nw=="}, "originalCommit": {"oid": "868a1c4365190e61187bfd476cf90bff5b1c3ee3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1Nzc0Nw==", "bodyText": "Aren't most span sampled? With AlwaysOn sampler, which is default", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1339#discussion_r501057747", "createdAt": "2020-10-07T14:27:16Z", "author": {"login": "iNikem"}, "path": "docs/logger-mdc-instrumentation.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Logger MDC auto-instrumentation\n+\n+The Mapped Diagnostic Context (MDC) is\n+\n+> an instrument for distinguishing interleaved log output from different sources.\n+> &mdash; <cite> [log4j MDC documentation](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html) </cite>\n+\n+It contains thread-local contextual information which is later copied to each logging event captured\n+by a logging library.\n+\n+The OTel Java agent injects several pieces of information about the current span into each logging\n+event's MDC copy:\n+\n+- `traceId` - the current trace id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getTraceIdAsHexString()`);\n+- `spanId` - the current span id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getSpanIdAsHexString()`);\n+- `sampled` - a boolean flag marking whether the current span is sampled or not\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().isSampled()`).\n+  Only added when `sampled` is `true`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzI3Nw=="}, "originalCommit": {"oid": "868a1c4365190e61187bfd476cf90bff5b1c3ee3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MTY1NQ==", "bodyText": "\ud83e\udd26  That's true...\nI somehow thought that it worked completely the other way \ud83d\ude05\nNow I'm starting to wonder why it works that way... @anuraaga I think you've added it first in the logback instrumentation -- why do we only log true value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1339#discussion_r501071655", "createdAt": "2020-10-07T14:44:45Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/logger-mdc-instrumentation.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Logger MDC auto-instrumentation\n+\n+The Mapped Diagnostic Context (MDC) is\n+\n+> an instrument for distinguishing interleaved log output from different sources.\n+> &mdash; <cite> [log4j MDC documentation](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html) </cite>\n+\n+It contains thread-local contextual information which is later copied to each logging event captured\n+by a logging library.\n+\n+The OTel Java agent injects several pieces of information about the current span into each logging\n+event's MDC copy:\n+\n+- `traceId` - the current trace id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getTraceIdAsHexString()`);\n+- `spanId` - the current span id\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().getSpanIdAsHexString()`);\n+- `sampled` - a boolean flag marking whether the current span is sampled or not\n+  (same as `TracingContextUtils.getCurrentSpan().getContext().isSampled()`).\n+  Only added when `sampled` is `true`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk4NzI3Nw=="}, "originalCommit": {"oid": "868a1c4365190e61187bfd476cf90bff5b1c3ee3"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4810, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}