{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzQwMTQx", "number": 918, "title": "Change aws-sdk client decorators to tracers", "bodyText": "Fix #828\nContinuation of #893\nThis PR focuses on aws-sdk 1.11 and 2.2\nAws-sdk tracers are structured differently.  Need some feedback on how to apply the same pattern like other tracers.", "createdAt": "2020-08-07T01:29:56Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918", "merged": true, "mergeCommit": {"oid": "5b114d0ac8e51935a21504ca8c78260c00549e1e"}, "closed": true, "closedAt": "2020-08-12T00:10:03Z", "author": {"login": "heyams"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8aOdmAFqTQ2Mjk4MDQ4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9_4H5gFqTQ2NTUwNTY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTgwNDgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-462980481", "createdAt": "2020-08-07T01:34:51Z", "commit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozNDo1MVrOG9JiPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozNDo1MVrOG9JiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjU0MQ==", "bodyText": "I did try to replace SpanWithScope with Scope, but I have a problem getting the span out of the Scope.\nI need some feedback on howto.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772541", "createdAt": "2020-08-07T01:34:51Z", "author": {"login": "heyams"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -74,14 +74,12 @@ public static void methodExit(\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (spanWithScope != null) {\n+        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (scope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = spanWithScope.getSpan();\n-          DECORATE.onError(span, throwable);\n-          DECORATE.beforeFinish(span);\n-          span.end();\n-          spanWithScope.closeScope();\n+          Span span = scope.getSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTgwNTU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-462980559", "createdAt": "2020-08-07T01:35:07Z", "commit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozNTowN1rOG9Jimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTozNjowMFrOG9Jjgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjYzNQ==", "bodyText": "Same as above.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772635", "createdAt": "2020-08-07T01:35:07Z", "author": {"login": "heyams"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -112,14 +110,12 @@ public static void methodExit(\n           @Advice.FieldValue(\"request\") final Request<?> request,\n           @Advice.Thrown final Throwable throwable) {\n         if (throwable != null) {\n-          SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-          if (spanWithScope != null) {\n+          SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+          if (scope != null) {\n             request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-            Span span = spanWithScope.getSpan();\n-            DECORATE.onError(span, throwable);\n-            DECORATE.beforeFinish(span);\n-            span.end();\n-            spanWithScope.closeScope();\n+            Span span = scope.getSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng==", "bodyText": "Not sure if i have followed the right naming convention here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466772866", "createdAt": "2020-08-07T01:36:00Z", "author": {"login": "heyams"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java", "diffHunk": "@@ -16,8 +16,13 @@\n \n package io.opentelemetry.auto.instrumentation.awssdk.v1_11;\n \n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n \n-public class OnErrorDecorator extends BaseDecorator {\n-  public static final OnErrorDecorator DECORATE = new OnErrorDecorator();\n+public class OnErrorTracer extends BaseTracer {\n+  public static final OnErrorTracer ERROR_TRACER = new OnErrorTracer();\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-1.11-error\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTg2NjMz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-462986633", "createdAt": "2020-08-07T01:56:56Z", "commit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1Njo1N1rOG9J4KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1Njo1N1rOG9J4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODE1Mw==", "bodyText": "this is used by TracingExecutionInterceptor.beforeExecution.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466778153", "createdAt": "2020-08-07T01:56:57Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  // Keeps track of the client span in a subtree corresponding to a client request.\n+  // Visible for testing\n+  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-auto-client-span-key\");\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  public Span getOrCreateSpan(String name, Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTg2ODI1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-462986825", "createdAt": "2020-08-07T01:57:31Z", "commit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1NzozMVrOG9J4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMTo1NzozMVrOG9J4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODMxNw==", "bodyText": "this is needed by TracingExecutionInterceptor.afterMarshalling (2.2)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r466778317", "createdAt": "2020-08-07T01:57:31Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -100,7 +100,7 @@ private Span startSpan(REQUEST request, String name) {\n     return span;\n   }\n \n-  private Span onRequest(final Span span, final REQUEST request) {\n+  public Span onRequest(final Span span, final REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1a18ec798f6d4d523c020ce29501723f48124d5", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a18ec798f6d4d523c020ce29501723f48124d5", "committedDate": "2020-08-07T02:23:09Z", "message": "Change AwsSdkClientDecorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "committedDate": "2020-08-07T02:23:09Z", "message": "Change awsclient 1.11 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "committedDate": "2020-08-07T02:23:09Z", "message": "Use startSpan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "committedDate": "2020-08-07T02:23:09Z", "message": "Remove unused method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c03f0432ef415b8dac816648a27ecb093b7b90ce", "committedDate": "2020-08-07T01:46:24Z", "message": "Remove unused method"}, "afterCommit": {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "committedDate": "2020-08-07T02:23:09Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dde6e21e2ad4bbdc99f6b005283c90412a1347", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dde6e21e2ad4bbdc99f6b005283c90412a1347", "committedDate": "2020-08-07T02:44:14Z", "message": "Fix a muzzle failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "committedDate": "2020-08-07T17:33:31Z", "message": "Make onRequest protected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTA0NTk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-463504594", "createdAt": "2020-08-07T18:04:03Z", "commit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODowNDowM1rOG9jGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoxODowNlrOG9jgcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5MTMyNQ==", "bodyText": "i'm not sure what to do about this either, i recommend out of scope for this PR", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467191325", "createdAt": "2020-08-07T18:04:03Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -74,14 +74,12 @@ public static void methodExit(\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (spanWithScope != null) {\n+        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (scope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = spanWithScope.getSpan();\n-          DECORATE.onError(span, throwable);\n-          DECORATE.beforeFinish(span);\n-          span.end();\n-          spanWithScope.closeScope();\n+          Span span = scope.getSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjU0MQ=="}, "originalCommit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NDM2MQ==", "bodyText": "i think consolidating these into a single method would be nice, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.onRequest(span, context.httpRequest());\n          \n          \n            \n                  TRACER.onSdkRequest(span, context.request());\n          \n          \n            \n                  TRACER.onAttributes(span, executionAttributes);\n          \n          \n            \n                  TRACER.afterMarshalling(span, context, executionAttributes);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467194361", "createdAt": "2020-08-07T18:10:15Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -53,9 +50,9 @@ public void afterMarshalling(\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n \n     if (span != null) {\n-      DECORATE.onRequest(span, context.httpRequest());\n-      DECORATE.onSdkRequest(span, context.request());\n-      DECORATE.onAttributes(span, executionAttributes);\n+      TRACER.onRequest(span, context.httpRequest());\n+      TRACER.onSdkRequest(span, context.request());\n+      TRACER.onAttributes(span, executionAttributes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NTk0OQ==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.afterExecution(span, context.httpRequest());\n          \n          \n            \n                  // Call onResponse on both types of responses:\n          \n          \n            \n                  TRACER.onSdkResponse(span, context.response());\n          \n          \n            \n                  TRACER.end(span, context.httpResponse());\n          \n          \n            \n                  TRACER.afterExecution(span, context);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467195949", "createdAt": "2020-08-07T18:13:39Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -64,16 +61,11 @@ public void afterExecution(\n       final Context.AfterExecution context, final ExecutionAttributes executionAttributes) {\n     Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n     if (span != null) {\n-      try {\n-        executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n-        DECORATE.afterExecution(span, context.httpRequest());\n-        // Call onResponse on both types of responses:\n-        DECORATE.onSdkResponse(span, context.response());\n-        DECORATE.onResponse(span, context.httpResponse());\n-        DECORATE.beforeFinish(span);\n-      } finally {\n-        span.end();\n-      }\n+      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n+      TRACER.afterExecution(span, context.httpRequest());\n+      // Call onResponse on both types of responses:\n+      TRACER.onSdkResponse(span, context.response());\n+      TRACER.end(span, context.httpResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5NzEwMw==", "bodyText": "current convention is for this to be based on module name only, e.g. io.opentelemetry.auto.aws-sdk-1.11", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467197103", "createdAt": "2020-08-07T18:16:00Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/OnErrorTracer.java", "diffHunk": "@@ -16,8 +16,13 @@\n \n package io.opentelemetry.auto.instrumentation.awssdk.v1_11;\n \n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseDecorator;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n \n-public class OnErrorDecorator extends BaseDecorator {\n-  public static final OnErrorDecorator DECORATE = new OnErrorDecorator();\n+public class OnErrorTracer extends BaseTracer {\n+  public static final OnErrorTracer ERROR_TRACER = new OnErrorTracer();\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-1.11-error\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3Mjg2Ng=="}, "originalCommit": {"oid": "30d2d53cb8de50108ef082c0453de9a91c5bc6fc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE5ODA2NQ==", "bodyText": "i think this can stay private for now at least", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467198065", "createdAt": "2020-08-07T18:18:06Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientTracer.java", "diffHunk": "@@ -172,7 +171,7 @@ private Span onResponse(final Span span, final RESPONSE response) {\n     return span;\n   }\n \n-  private String spanNameForRequest(final REQUEST request) {\n+  protected String spanNameForRequest(final REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "committedDate": "2020-08-07T22:34:39Z", "message": "Address feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzE0NTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-463714548", "createdAt": "2020-08-08T03:34:45Z", "commit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzozNDo0NVrOG9tJGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzo1ODoxNVrOG9tQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NTkzMQ==", "bodyText": "hopefully we can use the normal startSpan in the future, since it's almost the same as this method\nfor now since this is only needed from aws-sdk-2.2, i think better put it in the AwsSdkClientTracer subclass\nalso, can remove Tracer param, and it will use the protected tracer field from BaseTracer super class", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467355931", "createdAt": "2020-08-08T03:34:45Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  // Keeps track of the client span in a subtree corresponding to a client request.\n+  // Visible for testing\n+  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-auto-client-span-key\");\n+\n+  /**\n+   * Returns a new client {@link Span} if there is no client {@link Span} in the current {@link\n+   * Context}, or an invalid {@link Span} otherwise.\n+   */\n+  public Span getOrCreateSpan(String name, Tracer tracer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3ODE1Mw=="}, "originalCommit": {"oid": "c03f0432ef415b8dac816648a27ecb093b7b90ce"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Njg1MQ==", "bodyText": "these changes doesn't follow pattern used elsewhere, would be better to make this kind of change to convention in a separate PR, and across all modules, so we don't end up following different patterns in different places", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467356851", "createdAt": "2020-08-08T03:45:50Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdk.java", "diffHunk": "@@ -40,12 +40,12 @@\n  */\n public class AwsSdk {\n \n-  private static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.aws-sdk-2.2\");\n+  private static final Tracer tracer =\n+      OpenTelemetry.getTracerProvider().get(AwsSdkClientTracer.TRACER.getInstrumentationName());\n \n   /** Returns the {@link Tracer} used to instrument the AWS SDK. */\n   public static Tracer tracer() {\n-    return TRACER;\n+    return tracer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzA5MA==", "bodyText": "can you (either in this PR or add to #912) change DatabaseClientTracer to extend ClientTracer and remove DatabaseClientTracer.CONTEXT_CLIENT_SPAN_KEY since that's a duplicate of this now?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357090", "createdAt": "2020-08-08T03:48:52Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/ClientTracer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+\n+public abstract class ClientTracer extends BaseTracer {\n+\n+  // Keeps track of the client span in a subtree corresponding to a client request.\n+  // Visible for testing\n+  static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n+      Context.key(\"opentelemetry-trace-auto-client-span-key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQxMw==", "bodyText": "this will look a little nicer i think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span span = scope.getSpan();\n          \n          \n            \n                  tracer.end(span, response);\n          \n          \n            \n                  tracer.end(scope.getSpan(), response);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357413", "createdAt": "2020-08-08T03:52:47Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,31 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));\n   }\n \n   @Override\n   public void afterResponse(final Request<?> request, final Response<?> response) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onResponse(span, response);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.end(span, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQzNw==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span span = scope.getSpan();\n          \n          \n            \n                  tracer.endExceptionally(span, e);\n          \n          \n            \n                  tracer.endExceptionally(scope.getSpan(), e);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357437", "createdAt": "2020-08-08T03:53:05Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,31 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));\n   }\n \n   @Override\n   public void afterResponse(final Request<?> request, final Response<?> response) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onResponse(span, response);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.end(span, response);\n     }\n   }\n \n   @Override\n   public void afterError(final Request<?> request, final Response<?> response, final Exception e) {\n-    SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-    if (spanWithScope != null) {\n+    SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+    if (scope != null) {\n       request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-      spanWithScope.closeScope();\n-      Span span = spanWithScope.getSpan();\n-      decorate.onError(span, e);\n-      decorate.beforeFinish(span);\n-      span.end();\n+      scope.closeScope();\n+      Span span = scope.getSpan();\n+      tracer.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NzQ3Mg==", "bodyText": "it looks like this method is not needed since only calls super\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n          \n          \n            \n                return super.onRequest(span, sdkHttpRequest);\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357472", "createdAt": "2020-08-08T03:53:55Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +119,43 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;\n+  }\n+\n   private static String header(SdkHttpHeaders headers, String name) {\n     return headers.firstMatchingHeader(name).orElse(null);\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-2.2\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n+    return super.onRequest(span, sdkHttpRequest);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1Nzg0MQ==", "bodyText": "i think better to handle executionAttributes.get/putAttribute(SPAN_ATTRIBUTE) consistently in one place, so either all of them in this class or all of them in TracingExecutionInterceptor. then also i think you can make SPAN_ATTRIBUTE private (in whichever class you choose to handle this in)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r467357841", "createdAt": "2020-08-08T03:58:15Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +119,43 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;\n+  }\n+\n   private static String header(SdkHttpHeaders headers, String name) {\n     return headers.firstMatchingHeader(name).orElse(null);\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.aws-sdk-2.2\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, SdkHttpRequest sdkHttpRequest) {\n+    return super.onRequest(span, sdkHttpRequest);\n+  }\n+\n+  public void afterMarshalling(\n+      final Context.AfterMarshalling context, final ExecutionAttributes executionAttributes) {\n+    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f7059931e3e3d7761a7c770cdbab01b17b80445", "committedDate": "2020-08-10T06:03:14Z", "message": "Merge remote-tracking branch 'upstream/master' into heyams-http-client-tracers-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "committedDate": "2020-08-10T20:45:24Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369031cf05ad843e2dd9e374f522b155e96c97fb", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/369031cf05ad843e2dd9e374f522b155e96c97fb", "committedDate": "2020-08-10T20:51:35Z", "message": "Remove an overridden method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "committedDate": "2020-08-10T22:39:53Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1fcad70884bc22656543de2dd704d462cd5d69", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c1fcad70884bc22656543de2dd704d462cd5d69", "committedDate": "2020-08-10T22:41:34Z", "message": "Fix nullpointerexception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/327757e48651a8f15fe53064a3f61b9a222d95fa", "committedDate": "2020-08-10T23:35:50Z", "message": "Remove BaseTracer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjYzODE0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-464663814", "createdAt": "2020-08-11T00:01:13Z", "commit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMToxM1rOG-jvgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMTo0N1rOG-jwHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDQ5OQ==", "bodyText": "I think reads a little nicer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      Span span = scope.getSpan();\n          \n          \n            \n                      ERROR_TRACER.endExceptionally(span, throwable);\n          \n          \n            \n                      ERROR_TRACER.endExceptionally(scope.getSpan(), throwable);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468250499", "createdAt": "2020-08-11T00:01:13Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -74,14 +74,12 @@ public static void methodExit(\n         @Advice.Argument(value = 0, optional = true) final Request<?> request,\n         @Advice.Thrown final Throwable throwable) {\n       if (throwable != null) {\n-        SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-        if (spanWithScope != null) {\n+        SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+        if (scope != null) {\n           request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-          Span span = spanWithScope.getSpan();\n-          DECORATE.onError(span, throwable);\n-          DECORATE.beforeFinish(span);\n-          span.end();\n-          spanWithScope.closeScope();\n+          Span span = scope.getSpan();\n+          ERROR_TRACER.endExceptionally(span, throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDY1Mw==", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Span span = scope.getSpan();\n          \n          \n            \n                        ERROR_TRACER.endExceptionally(span, throwable);\n          \n          \n            \n                        ERROR_TRACER.endExceptionally(scope.getSpan(), throwable);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468250653", "createdAt": "2020-08-11T00:01:47Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AWSHttpClientInstrumentation.java", "diffHunk": "@@ -112,14 +110,12 @@ public static void methodExit(\n           @Advice.FieldValue(\"request\") final Request<?> request,\n           @Advice.Thrown final Throwable throwable) {\n         if (throwable != null) {\n-          SpanWithScope spanWithScope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n-          if (spanWithScope != null) {\n+          SpanWithScope scope = request.getHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY);\n+          if (scope != null) {\n             request.addHandlerContext(SPAN_SCOPE_PAIR_CONTEXT_KEY, null);\n-            Span span = spanWithScope.getSpan();\n-            DECORATE.onError(span, throwable);\n-            DECORATE.beforeFinish(span);\n-            span.end();\n-            spanWithScope.closeScope();\n+            Span span = scope.getSpan();\n+            ERROR_TRACER.endExceptionally(span, throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Nzk4MTgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-464798181", "createdAt": "2020-08-11T07:02:32Z", "commit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowMjozMlrOG-q6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowOToyMFrOG-rGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2NzkzNg==", "bodyText": "Why is this null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468367936", "createdAt": "2020-08-11T07:02:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientTracer.java", "diffHunk": "@@ -125,4 +125,14 @@ protected String requestHeader(Request<?> request, String name) {\n   protected String responseHeader(Response<?> response, String name) {\n     return response.getHttpResponse().getHeaders().get(name);\n   }\n+\n+  @Override\n+  protected Setter<Request<?>> getSetter() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2ODg2OQ==", "bodyText": "I think this logic should be in tracer.startScope", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468368869", "createdAt": "2020-08-11T07:04:43Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/TracingRequestHandler.java", "diffHunk": "@@ -49,38 +45,29 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    Span span = decorate.getOrCreateSpan(request, TRACER);\n-    decorate.afterStart(span);\n-    decorate.onRequest(span, request);\n+    Span span = tracer.startSpan(request);\n     request.addHandlerContext(\n         SPAN_SCOPE_PAIR_CONTEXT_KEY,\n-        new SpanWithScope(\n-            span, ContextUtils.withScopedContext(ClientDecorator.currentContextWith(span))));\n+        new SpanWithScope(span, withScopedContext(currentContextWith(span))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2OTUwNg==", "bodyText": "Why is this null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468369506", "createdAt": "2020-08-11T07:06:00Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/AwsSdkClientTracer.java", "diffHunk": "@@ -115,7 +123,55 @@ protected String responseHeader(SdkHttpResponse sdkHttpResponse, String name) {\n     return header(sdkHttpResponse, name);\n   }\n \n+  @Override\n+  protected Setter<SdkHttpRequest> getSetter() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDk3Nw==", "bodyText": "Do you really need to call spanName separately? Why getOrCreateSpan cannot handle this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#discussion_r468370977", "createdAt": "2020-08-11T07:09:20Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -41,54 +40,29 @@\n   @Override\n   public void beforeExecution(\n       final Context.BeforeExecution context, final ExecutionAttributes executionAttributes) {\n-    Span span =\n-        ClientDecorator.getOrCreateSpan(DECORATE.spanName(executionAttributes), AwsSdk.tracer());\n-    DECORATE.afterStart(span);\n+    Span span = TRACER.getOrCreateSpan(TRACER.spanName(executionAttributes), AwsSdk.tracer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "committedDate": "2020-08-11T18:24:36Z", "message": "Undo afterMarshalling and afterExecution in the tracer class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2655d28220ae7148983809c5cf47843e2e02fe4b", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2655d28220ae7148983809c5cf47843e2e02fe4b", "committedDate": "2020-08-11T20:13:51Z", "message": "Move spanName method to interceptor class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTA1Njg2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/918#pullrequestreview-465505686", "createdAt": "2020-08-12T00:00:47Z", "commit": {"oid": "2655d28220ae7148983809c5cf47843e2e02fe4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2670, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}