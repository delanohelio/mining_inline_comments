{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTczMzAx", "number": 606, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDo0ODo1MFrOEJiJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1NTo0N1rOEJmTtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDMyMDM1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDo0ODo1MFrOGqEsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNToyMTowMVrOGqFKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDI0Mg==", "bodyText": "i think cite the spec instead?\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#status", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446770242", "createdAt": "2020-06-29T04:48:50Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3Nzg5Mg==", "bodyText": "Yup good point", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446777892", "createdAt": "2020-06-29T05:21:01Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDI0Mg=="}, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDMyMjk1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNDo1MDoyOVrOGqEtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNToyNDo0OVrOGqFOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDYyNQ==", "bodyText": "this isn't in the spec, and i don't think we need to map it, as the way i read https://httpstatuses.com/499 is that nginx just uses this internally (b/c how can it return 499 to the client if the client closes the connection \ud83d\ude04)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446770625", "createdAt": "2020-06-29T04:50:29Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55\n+  static Status statusFromHttpStatus(int httpStatus) {\n+    if (httpStatus >= 100 && httpStatus < 400) {\n+      return Status.OK;\n+    }\n+\n+    switch (httpStatus) {\n+      case 401:\n+        return Status.UNAUTHENTICATED;\n+      case 403:\n+        return Status.PERMISSION_DENIED;\n+      case 404:\n+        return Status.NOT_FOUND;\n+      case 429:\n+        return Status.RESOURCE_EXHAUSTED;\n+      case 499:\n+        return Status.CANCELLED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3ODAyOA==", "bodyText": "Thanks, will see about updating collector too", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446778028", "createdAt": "2020-06-29T05:21:20Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55\n+  static Status statusFromHttpStatus(int httpStatus) {\n+    if (httpStatus >= 100 && httpStatus < 400) {\n+      return Status.OK;\n+    }\n+\n+    switch (httpStatus) {\n+      case 401:\n+        return Status.UNAUTHENTICATED;\n+      case 403:\n+        return Status.PERMISSION_DENIED;\n+      case 404:\n+        return Status.NOT_FOUND;\n+      case 429:\n+        return Status.RESOURCE_EXHAUSTED;\n+      case 499:\n+        return Status.CANCELLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDYyNQ=="}, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3ODczMQ==", "bodyText": "open-telemetry/opentelemetry-collector#1226", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446778731", "createdAt": "2020-06-29T05:24:02Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55\n+  static Status statusFromHttpStatus(int httpStatus) {\n+    if (httpStatus >= 100 && httpStatus < 400) {\n+      return Status.OK;\n+    }\n+\n+    switch (httpStatus) {\n+      case 401:\n+        return Status.UNAUTHENTICATED;\n+      case 403:\n+        return Status.PERMISSION_DENIED;\n+      case 404:\n+        return Status.NOT_FOUND;\n+      case 429:\n+        return Status.RESOURCE_EXHAUSTED;\n+      case 499:\n+        return Status.CANCELLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDYyNQ=="}, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3ODg5OQ==", "bodyText": "it might(?) make sense in the collector if nginx is sending spans to it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446778899", "createdAt": "2020-06-29T05:24:49Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+final class HttpUtil {\n+\n+  // https://github.com/open-telemetry/opentelemetry-collector/blob/8aa273184455591cad278c92c7cfcf75ad353d57/translator/trace/grpc_http_mapper.go#L55\n+  static Status statusFromHttpStatus(int httpStatus) {\n+    if (httpStatus >= 100 && httpStatus < 400) {\n+      return Status.OK;\n+    }\n+\n+    switch (httpStatus) {\n+      case 401:\n+        return Status.UNAUTHENTICATED;\n+      case 403:\n+        return Status.PERMISSION_DENIED;\n+      case 404:\n+        return Status.NOT_FOUND;\n+      case 429:\n+        return Status.RESOURCE_EXHAUSTED;\n+      case 499:\n+        return Status.CANCELLED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc3MDYyNQ=="}, "originalCommit": {"oid": "0870a149d78a94314a71f142f75055736c57a93e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDYxNDM5OnYy", "diffSide": "RIGHT", "path": "instrumentation/jsp-2.3/src/test/groovy/JSPInstrumentationForwardTests.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzowNTozMFrOGqHWUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowODoyMFrOGqJTGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMzc3Ng==", "bodyText": "we should change all errored verifications to status verifications (issue is fine to track this, it's probably lots of places)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446813776", "createdAt": "2020-06-29T07:05:30Z", "author": {"login": "trask"}, "path": "instrumentation/jsp-2.3/src/test/groovy/JSPInstrumentationForwardTests.groovy", "diffHunk": "@@ -525,7 +525,7 @@ class JSPInstrumentationForwardTests extends AgentTestRunner {\n           parent()\n           operationName expectedOperationName()\n           spanKind SERVER\n-          errored false\n+          errored true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTcyMQ==", "bodyText": "Yup - #608", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446845721", "createdAt": "2020-06-29T08:08:20Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jsp-2.3/src/test/groovy/JSPInstrumentationForwardTests.groovy", "diffHunk": "@@ -525,7 +525,7 @@ class JSPInstrumentationForwardTests extends AgentTestRunner {\n           parent()\n           operationName expectedOperationName()\n           spanKind SERVER\n-          errored false\n+          errored true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxMzc3Ng=="}, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDcyNjY0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0MDo0NFrOGqIZKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowNTo1N1rOGqJN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDg5MQ==", "bodyText": "Why don't we set Ok status?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446830891", "createdAt": "2020-06-29T07:40:44Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientDecorator.java", "diffHunk": "@@ -120,8 +120,9 @@ public Span onResponse(final Span span, final RESPONSE response) {\n       if (status != null) {\n         span.setAttribute(Tags.HTTP_STATUS, status);\n \n-        if (Config.get().getHttpClientErrorStatuses().get(status)) {\n-          span.setStatus(Status.UNKNOWN);\n+        Status otelStatus = HttpUtil.statusFromHttpStatus(status);\n+        if (!otelStatus.isOk()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NDM3NA==", "bodyText": "Thought it's not helpful and would just cause extra data to be sent, but indeed this probably isn't the correct layer to worry about it (exporters could strip out OK status if they want)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446844374", "createdAt": "2020-06-29T08:05:57Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpClientDecorator.java", "diffHunk": "@@ -120,8 +120,9 @@ public Span onResponse(final Span span, final RESPONSE response) {\n       if (status != null) {\n         span.setAttribute(Tags.HTTP_STATUS, status);\n \n-        if (Config.get().getHttpClientErrorStatuses().get(status)) {\n-          span.setStatus(Status.UNKNOWN);\n+        Status otelStatus = HttpUtil.statusFromHttpStatus(status);\n+        if (!otelStatus.isOk()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMDg5MQ=="}, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDczMTk2OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0MjoyOFrOGqIcUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0MjoyOFrOGqIcUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMTY5Nw==", "bodyText": "Can we call this StatusConverter or StatusFactory or similar? Util just calls to put more methods here :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446831697", "createdAt": "2020-06-29T07:42:28Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.decorator;\n+\n+import io.opentelemetry.trace.Status;\n+\n+public final class HttpUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDc0MjE3OnYy", "diffSide": "LEFT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzo0NTo0M1rOGqIiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowOToyNVrOGqJVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzI5MQ==", "bodyText": "getIntegerRangeSettingFromEnvironment is now used and can be removed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446833291", "createdAt": "2020-06-29T07:45:43Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -173,14 +171,6 @@\n \n     excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n \n-    httpServerErrorStatuses =\n-        getIntegerRangeSettingFromEnvironment(\n-            HTTP_SERVER_ERROR_STATUSES, DEFAULT_HTTP_SERVER_ERROR_STATUSES);\n-\n-    httpClientErrorStatuses =\n-        getIntegerRangeSettingFromEnvironment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NjI3Nw==", "bodyText": "Nice catch lots of code removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446846277", "createdAt": "2020-06-29T08:09:25Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -173,14 +171,6 @@\n \n     excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n \n-    httpServerErrorStatuses =\n-        getIntegerRangeSettingFromEnvironment(\n-            HTTP_SERVER_ERROR_STATUSES, DEFAULT_HTTP_SERVER_ERROR_STATUSES);\n-\n-    httpClientErrorStatuses =\n-        getIntegerRangeSettingFromEnvironment(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMzI5MQ=="}, "originalCommit": {"oid": "1d6d5bfbfb25d0ad85dc9cfbe6f24a99a8d35e54"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTAwMjc4OnYy", "diffSide": "RIGHT", "path": "instrumentation/finatra-2.9/src/main/java/io/opentelemetry/auto/instrumentation/finatra/FinatraInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1NTo0N1rOGqK-Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODo1NjozNVrOGqK_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzEwNw==", "bodyText": "missed this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446873107", "createdAt": "2020-06-29T08:55:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/finatra-2.9/src/main/java/io/opentelemetry/auto/instrumentation/finatra/FinatraInstrumentation.java", "diffHunk": "@@ -131,8 +131,9 @@ public void onSuccess(final Response response) {\n       final Span span = spanWithScope.getSpan();\n \n       // Don't use DECORATE.onResponse because this is the controller span\n-      if (Config.get().getHttpServerErrorStatuses().get(DECORATE.status(response))) {\n-        span.setStatus(Status.UNKNOWN);\n+      Status status = HttpStatusConverter.statusFromHttpStatus(DECORATE.status(response));\n+      if (!status.isOk()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae3cb907baa9b0d05763da69ce2f8af055de379"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU2Ng==", "bodyText": "Second time in same PR ;)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/606#discussion_r446873566", "createdAt": "2020-06-29T08:56:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/finatra-2.9/src/main/java/io/opentelemetry/auto/instrumentation/finatra/FinatraInstrumentation.java", "diffHunk": "@@ -131,8 +131,9 @@ public void onSuccess(final Response response) {\n       final Span span = spanWithScope.getSpan();\n \n       // Don't use DECORATE.onResponse because this is the controller span\n-      if (Config.get().getHttpServerErrorStatuses().get(DECORATE.status(response))) {\n-        span.setStatus(Status.UNKNOWN);\n+      Status status = HttpStatusConverter.statusFromHttpStatus(DECORATE.status(response));\n+      if (!status.isOk()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzEwNw=="}, "originalCommit": {"oid": "eae3cb907baa9b0d05763da69ce2f8af055de379"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 306, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}