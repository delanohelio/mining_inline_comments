{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTk2NjU3", "number": 1297, "title": "Messaging convention reviewed", "bodyText": "Closes #983\nCloses #1031", "createdAt": "2020-10-01T11:49:38Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297", "merged": true, "mergeCommit": {"oid": "f23ad29187ecea4e742e1dd6a5baeb84020298d4"}, "closed": true, "closedAt": "2020-10-13T06:16:59Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOaAIZgFqTUwMDc1NzkwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSBP75gH2gAyNDk2MTk2NjU3OjBlMDFlYzBkYzY2N2ZmNDE5NGYxYTFmNjVkMWM4ZTg4YmM5NDM4NjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzU3OTA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#pullrequestreview-500757906", "createdAt": "2020-10-01T22:23:10Z", "commit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMzoxMVrOHbcjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo0MToyNlrOHbc44Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ==", "bodyText": "My understanding (which is not very good on this point) is that CONSUMER is used for a span that represents the processing of the message, and fetching a message from a queue synchronously like this would be CLIENT, with parent from the current Context, and a link to the producer span", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498541515", "createdAt": "2020-10-01T22:23:11Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjgwNQ==", "bodyText": "i think deserves to be method level comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {\n          \n          \n            \n              // passing messageId = null will verify message.id is not captured, passing messageId = \"\" will verify message.id is captured (but won't verify anything about the value), any other value for messageId will verify that message.id is captured and has that same value\n          \n          \n            \n              static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498542805", "createdAt": "2020-10-01T22:27:31Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -247,42 +250,42 @@ class JMS2Test extends AgentTestRunner {\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ==", "bodyText": "Are these only used as string constants? If so string constants in JMSTracer seems more natural", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498546635", "createdAt": "2020-10-01T22:40:29Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjkxMw==", "bodyText": "same method level comment suggestion as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498546913", "createdAt": "2020-10-01T22:41:26Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/test/groovy/JMS1Test.groovy", "diffHunk": "@@ -247,48 +251,48 @@ class JMS1Test extends AgentTestRunner {\n     destination                      | destinationType | destinationName\n     session.createQueue(\"someQueue\") | \"queue\"         | \"someQueue\"\n     session.createTopic(\"someTopic\") | \"topic\"         | \"someTopic\"\n-    session.createTemporaryQueue()   | \"queue\"         | \"<temporary>\"\n-    session.createTemporaryTopic()   | \"topic\"         | \"<temporary>\"\n+    session.createTemporaryQueue()   | \"queue\"         | JMSTracer.TEMP_DESTINATION_NAME\n+    session.createTemporaryTopic()   | \"topic\"         | JMSTracer.TEMP_DESTINATION_NAME\n   }\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODk0ODA3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#pullrequestreview-500894807", "createdAt": "2020-10-02T06:54:34Z", "commit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo1NDozNFrOHbi0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo1NDozNFrOHbi0bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NDA3Ng==", "bodyText": "Why do we need to specify start timestamp to current time ourselves here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498644076", "createdAt": "2020-10-02T06:54:34Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/instrumentation/auto/kafkaclients/KafkaConsumerTracer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.kafkaclients;\n+\n+import static io.opentelemetry.instrumentation.api.decorator.BaseDecorator.extract;\n+import static io.opentelemetry.instrumentation.auto.kafkaclients.TextMapExtractAdapter.GETTER;\n+import static io.opentelemetry.trace.Span.Kind.CONSUMER;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.record.TimestampType;\n+\n+public class KafkaConsumerTracer extends BaseTracer {\n+  public static final KafkaConsumerTracer TRACER = new KafkaConsumerTracer();\n+\n+  public Span startSpan(ConsumerRecord<?, ?> record) {\n+    long now = System.currentTimeMillis();\n+\n+    Span span =\n+        tracer\n+            .spanBuilder(spanNameOnConsume(record))\n+            .setSpanKind(CONSUMER)\n+            .setParent(extractParent(record))\n+            .setStartTimestamp(TimeUnit.MILLISECONDS.toNanos(now))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ff31755291f32e8b46c2bcf05c99dfde4257ec", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8ff31755291f32e8b46c2bcf05c99dfde4257ec", "committedDate": "2020-10-02T10:40:28Z", "message": "Kafka reviewed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "395b6b34cae1f73e4236ef8f9828e4256a358273", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/395b6b34cae1f73e4236ef8f9828e4256a358273", "committedDate": "2020-10-02T10:40:28Z", "message": "Kafka Streams reviewed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a9dced3199e9fec151bbf0cf3ee51d3e9d2a226", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3a9dced3199e9fec151bbf0cf3ee51d3e9d2a226", "committedDate": "2020-10-02T10:40:28Z", "message": "JMS reviewed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6bd7879df25a8217f53be417e4a674ffbec78da", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b6bd7879df25a8217f53be417e4a674ffbec78da", "committedDate": "2020-10-02T10:40:28Z", "message": "RabbitMQ reviewed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637e030ad7ae6c836e1f40b786043d883e811d7b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/637e030ad7ae6c836e1f40b786043d883e811d7b", "committedDate": "2020-10-02T10:40:28Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924a2f802501d199668db18bf10122df4bf7e276", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/924a2f802501d199668db18bf10122df4bf7e276", "committedDate": "2020-10-02T10:40:28Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e542abb72c4adf14cf9ffb91214231fc8d746f63", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e542abb72c4adf14cf9ffb91214231fc8d746f63", "committedDate": "2020-10-02T10:40:28Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef7b0ea4ccf2fc5469cb0b0f00a79df2e8719d3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bef7b0ea4ccf2fc5469cb0b0f00a79df2e8719d3", "committedDate": "2020-10-02T10:40:28Z", "message": "Add comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdebeaf5b191c094da9fbe4df277c4badf2f8d64", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cdebeaf5b191c094da9fbe4df277c4badf2f8d64", "committedDate": "2020-10-02T07:30:23Z", "message": "Add comments"}, "afterCommit": {"oid": "bef7b0ea4ccf2fc5469cb0b0f00a79df2e8719d3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bef7b0ea4ccf2fc5469cb0b0f00a79df2e8719d3", "committedDate": "2020-10-02T10:40:28Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d97e3bd07fbe0e053a14bcb5e6f6cef65e3105", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c9d97e3bd07fbe0e053a14bcb5e6f6cef65e3105", "committedDate": "2020-10-02T13:44:51Z", "message": "Merge remote-tracking branch 'upstream/master' into messaging-convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89dfb39c3a807a7a6481488d9eb731c6c5063387", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/89dfb39c3a807a7a6481488d9eb731c6c5063387", "committedDate": "2020-10-11T07:00:33Z", "message": "Merge remote-tracking branch 'upstream/master' into messaging-convention"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b79511d41ebd5e4152804a3f01dd19d60a434da5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b79511d41ebd5e4152804a3f01dd19d60a434da5", "committedDate": "2020-10-11T06:53:04Z", "message": "Merge remote-tracking branch 'upstream/master' into messaging-convention"}, "afterCommit": {"oid": "89dfb39c3a807a7a6481488d9eb731c6c5063387", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/89dfb39c3a807a7a6481488d9eb731c6c5063387", "committedDate": "2020-10-11T07:00:33Z", "message": "Merge remote-tracking branch 'upstream/master' into messaging-convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f817037296160f3c617c8d65f03f34f07c627b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56f817037296160f3c617c8d65f03f34f07c627b", "committedDate": "2020-10-11T14:08:25Z", "message": "Update parents as per spec proposal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTg0NTk5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#pullrequestreview-506184599", "createdAt": "2020-10-11T14:27:21Z", "commit": {"oid": "56f817037296160f3c617c8d65f03f34f07c627b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30ce6b8bdb4061c6c4e90e27567935b528bbdb3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c30ce6b8bdb4061c6c4e90e27567935b528bbdb3", "committedDate": "2020-10-11T14:37:28Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjAzNjEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#pullrequestreview-506203612", "createdAt": "2020-10-11T18:15:41Z", "commit": {"oid": "c30ce6b8bdb4061c6c4e90e27567935b528bbdb3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edcc518e0d9c3864b39352562dba0fcd86943719", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/edcc518e0d9c3864b39352562dba0fcd86943719", "committedDate": "2020-10-12T14:07:32Z", "message": "Remove Operation enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5570b89fa53ae1b937b2a8c891d1c2e454df78", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2b5570b89fa53ae1b937b2a8c891d1c2e454df78", "committedDate": "2020-10-13T02:21:58Z", "message": "Merge remote-tracking branch 'upstream/master' into iNikem-messaging-convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53fb103fd1f1e95e76ff205e2441a2d19f331b00", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/53fb103fd1f1e95e76ff205e2441a2d19f331b00", "committedDate": "2020-10-13T03:16:20Z", "message": "muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23337bd6b69f6a7b7c5fd5b698110ca18305bbbc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/23337bd6b69f6a7b7c5fd5b698110ca18305bbbc", "committedDate": "2020-10-13T04:41:43Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a06e81ff11fb694a9a87e62da276dd7dcd3533e5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a06e81ff11fb694a9a87e62da276dd7dcd3533e5", "committedDate": "2020-10-13T04:54:52Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e01ec0dc667ff4194f1a1f65d1c8e88bc943865", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e01ec0dc667ff4194f1a1f65d1c8e88bc943865", "committedDate": "2020-10-13T04:55:11Z", "message": "Merge branch 'messaging-convention' of github.com:iNikem/opentelemetry-java-instrumentation into messaging-convention"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2453, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}