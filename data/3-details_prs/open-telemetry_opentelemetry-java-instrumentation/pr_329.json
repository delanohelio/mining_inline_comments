{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NDg2MjA2", "number": 329, "title": "Jetty-based benchmark for memory usage", "bodyText": "This PR attempts at measuring what is the impact of having the agent on the memory profile of app. Essentially a first part of issue: #312\nI added a basic custom memory profiler that measures the amount of memory consumed before and after the series of operations.\nThe benchmark runs an embedded Jetty server with a basic servlet and runs a series of GET requests. Both parts should be automatically instrumented and impact memory and cpu usage.\nRunning this locally on macOS and OpenJDK 11.0.6, I got following results:\n\n\n\n\ngc.alloc.rate.norm\nheap.used.before\n\n\n\n\nNo agent\n55,927 B/op\n9,826,125 B\n\n\nOT 0.2.3-SNAPSHOT\n88,233 B/op\n31,947,220 B\n\n\n\nRaw benchmark results:\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest                                   avgt   10         13.186 \u00b1         0.856   ms/op\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.alloc.rate                    avgt   10          6.074 \u00b1         0.364  MB/sec\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.alloc.rate.norm               avgt   10      88233.833 \u00b1       285.569    B/op\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.churn.G1_Eden_Space           avgt   10          5.337 \u00b1         3.140  MB/sec\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.churn.G1_Eden_Space.norm      avgt   10      77916.125 \u00b1     46270.096    B/op\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.churn.G1_Survivor_Space       avgt   10          0.057 \u00b1         0.139  MB/sec\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.churn.G1_Survivor_Space.norm  avgt   10        822.790 \u00b1      2003.598    B/op\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.count                         avgt   10         14.000                  counts\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7gc.time                          avgt   10        111.000                      ms\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.total.after                 avgt   10  229428428.800 \u00b1 133367802.800   bytes\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.total.before                avgt   10  115133644.800 \u00b1  47721866.371   bytes\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.total.change                avgt   10  114294784.000 \u00b1 177573740.280   bytes\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.used.after                  avgt   10   96286686.400 \u00b1  23026009.240   bytes\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.used.before                 avgt   10   31947220.800 \u00b1  11074380.709   bytes\nHttpBenchmark.WithOT023ExpAgent.testMakingRequest:\u00b7heap.used.change                 avgt   10   64339465.600 \u00b1  27097305.905   bytes\nHttpBenchmark.testMakingRequest                                                     avgt   10         12.438 \u00b1         0.567   ms/op\nHttpBenchmark.testMakingRequest:\u00b7gc.alloc.rate                                      avgt   10          4.082 \u00b1         0.188  MB/sec\nHttpBenchmark.testMakingRequest:\u00b7gc.alloc.rate.norm                                 avgt   10      55927.110 \u00b1       220.234    B/op\nHttpBenchmark.testMakingRequest:\u00b7gc.churn.G1_Eden_Space                             avgt   10          4.732 \u00b1         0.392  MB/sec\nHttpBenchmark.testMakingRequest:\u00b7gc.churn.G1_Eden_Space.norm                        avgt   10      64861.886 \u00b1      5367.398    B/op\nHttpBenchmark.testMakingRequest:\u00b7gc.churn.G1_Old_Gen                                avgt   10          1.356 \u00b1         0.230  MB/sec\nHttpBenchmark.testMakingRequest:\u00b7gc.churn.G1_Old_Gen.norm                           avgt   10      18629.961 \u00b1      3734.859    B/op\nHttpBenchmark.testMakingRequest:\u00b7gc.count                                           avgt   10        119.000                  counts\nHttpBenchmark.testMakingRequest:\u00b7gc.time                                            avgt   10        191.000                      ms\nHttpBenchmark.testMakingRequest:\u00b7heap.total.after                                   avgt   10   41313894.400 \u00b1   3007890.117   bytes\nHttpBenchmark.testMakingRequest:\u00b7heap.total.before                                  avgt   10   41313894.400 \u00b1   3007890.117   bytes\nHttpBenchmark.testMakingRequest:\u00b7heap.total.change                                  avgt   10            \u2248 0                   bytes\nHttpBenchmark.testMakingRequest:\u00b7heap.used.after                                    avgt   10   19197616.800 \u00b1   3515717.907   bytes\nHttpBenchmark.testMakingRequest:\u00b7heap.used.before                                   avgt   10    9826125.600 \u00b1    553095.971   bytes\nHttpBenchmark.testMakingRequest:\u00b7heap.used.change                                   avgt   10    9371491.200 \u00b1   3630360.420   bytes", "createdAt": "2020-04-16T15:49:59Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329", "merged": true, "mergeCommit": {"oid": "ddb99884733467461259ae863dff6894ec1535c5"}, "closed": true, "closedAt": "2020-04-17T16:52:17Z", "author": {"login": "pmm-sumo"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYOkksgH2gAyNDA0NDg2MjA2OjE5ZmM3YTY4NzBkZTBjYjk4ODkxNGM5NzljN2QzZjkyOGJkZTQyNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYjqv1AFqTM5NTU4OTg3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "19fc7a6870de0cb988914c979c7d3f928bde425d", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/19fc7a6870de0cb988914c979c7d3f928bde425d", "committedDate": "2020-04-16T15:38:53Z", "message": "Jetty-based benchmark for memory usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9ffd6494593c7667809c906084705ece6d6b7d", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb9ffd6494593c7667809c906084705ece6d6b7d", "committedDate": "2020-04-16T16:13:48Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/623be2af263ce74e31d1d39c3c575f483c16003f", "committedDate": "2020-04-16T16:40:43Z", "message": "Fix headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTg4OTIw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#pullrequestreview-394988920", "createdAt": "2020-04-16T20:50:24Z", "commit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MDoyNFrOGG2p5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NjoxOFrOGG5zig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MDEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n          \n      \n    \n    \n  \n\nIs this accidental duplicate?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409840100", "createdAt": "2020-04-16T20:50:24Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/HttpBenchmark.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import io.opentelemetry.benchmark.classes.HttpClass;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.util.component.AbstractLifeCycle;\n+import org.openjdk.jmh.annotations.*;\n+\n+public class HttpBenchmark {\n+\n+  @State(Scope.Benchmark)\n+  public static class BenchmarkState {\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      try {\n+        jettyServer = new HttpClass().buildJettyServer();\n+        jettyServer.start();\n+        // Make sure it's actually running\n+        while (!AbstractLifeCycle.STARTED.equals(jettyServer.getState())) {\n+          Thread.sleep(500);\n+        }\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      try {\n+        jettyServer.stop();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      } finally {\n+        jettyServer.destroy();\n+      }\n+    }\n+\n+    HttpClass http = new HttpClass();\n+    Server jettyServer;\n+  }\n+\n+  @Benchmark\n+  public void testMakingRequest(BenchmarkState state) {\n+    state.http.executeRequest();\n+  }\n+\n+  @Fork(\n+      jvmArgsAppend = {\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODA5Mw==", "bodyText": "This is cool, I hadn't seen custom profiler before.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409888093", "createdAt": "2020-04-16T22:36:24Z", "author": {"login": "trask"}, "path": "benchmark/benchmark.gradle", "diffHunk": "@@ -25,6 +30,7 @@ jmh {\n \n //  profilers = ['stack:lines=5;detailLine=true;period=5;excludePackages=true']\n   // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]\n+  profilers = ['io.opentelemetry.benchmark.UsedMemoryProfiler', 'gc']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTE4Mw==", "bodyText": "Can you use Intellij settings from https://github.com/open-telemetry/opentelemetry-auto-instr-java/blob/master/CONTRIBUTING.md#intellij-idea?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889183", "createdAt": "2020-04-16T22:39:17Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTk5Ng==", "bodyText": "The special character (middot?) worries me a little, but I should really stop being afraid of unicode, so let's keep it \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889996", "createdAt": "2020-04-16T22:41:32Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import org.openjdk.jmh.profile.*;\n+import org.openjdk.jmh.results.*;\n+\n+public class UsedMemoryProfiler implements InternalProfiler {\n+  private long totalHeapBefore;\n+  private long usedHeapBefore;\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Used memory heap profiler\";\n+  }\n+\n+  @Override\n+  public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n+    System.gc();\n+    System.runFinalization();\n+\n+    totalHeapBefore = Runtime.getRuntime().totalMemory();\n+    usedHeapBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+  }\n+\n+  @Override\n+  public Collection<? extends Result> afterIteration(\n+      BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n+\n+    long totalHeap = Runtime.getRuntime().totalMemory();\n+    long usedHeap = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+\n+    Collection<ScalarResult> results = new ArrayList<>();\n+    results.add(\n+        new ScalarResult(\"\u00b7heap.total.before\", totalHeapBefore, \"bytes\", AggregationPolicy.AVG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MDg0NQ==", "bodyText": "Should we bubble up the exception instead of catch/log? Would it fail the test? (is that good?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409890845", "createdAt": "2020-04-16T22:43:52Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }\n+  }\n+\n+  private HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n+\n+  public void executeRequest() {\n+    String url = \"http://localhost:\" + port + contextPath;\n+\n+    try {\n+      HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(url));\n+      request.setThrowExceptionOnExecuteError(false);\n+      request.execute();\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public void init(final ServletConfig config) throws ServletException {\n          \n          \n            \n                  super.init(config);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891385", "createdAt": "2020-04-16T22:45:29Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTcyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n          \n          \n            \n                    throws ServletException, IOException {\n          \n          \n            \n                  doGet(req, resp);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891722", "createdAt": "2020-04-16T22:46:18Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561e44e4cf48d20f559f3b6e40504bf60cc319b9", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/561e44e4cf48d20f559f3b6e40504bf60cc319b9", "committedDate": "2020-04-17T09:55:53Z", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1312abc197c07b668b79975d79b82245d2f416b6", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1312abc197c07b668b79975d79b82245d2f416b6", "committedDate": "2020-04-17T09:56:16Z", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e023a656d27643ea1f03cd46e304b0f91b219b", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83e023a656d27643ea1f03cd46e304b0f91b219b", "committedDate": "2020-04-17T09:56:35Z", "message": "Remove unnecessary code\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fb6811e88ab869e6a8bcd1b0b8c9f3d2791aaed", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2fb6811e88ab869e6a8bcd1b0b8c9f3d2791aaed", "committedDate": "2020-04-17T13:51:40Z", "message": "Formatting and code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6344a6bd77e2880f6dc9ce3f33dbb3b5edb69a0b", "author": {"user": {"login": "pmm-sumo", "name": "Przemek Maciolek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6344a6bd77e2880f6dc9ce3f33dbb3b5edb69a0b", "committedDate": "2020-04-17T14:35:43Z", "message": "Formatting fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae90946299b9249d50096bcddff1028f2a03292", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fae90946299b9249d50096bcddff1028f2a03292", "committedDate": "2020-04-17T16:13:05Z", "message": "Merge branch 'master' into memory-churn-benchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTg5ODcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#pullrequestreview-395589873", "createdAt": "2020-04-17T16:13:38Z", "commit": {"oid": "fae90946299b9249d50096bcddff1028f2a03292"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3274, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}