{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODIyNzgz", "number": 109, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozNTo0OFrODcFUOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozNzoxMFrODcFVhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzczODE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozNTo0OFrOFj8N9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzowNjoxMlrOFlDGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTA5NQ==", "bodyText": "I think this is acceptable and probably a better option than relying on activeSpan().  Any risk of this getting out of sync somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r373231095", "createdAt": "2020-01-30T22:35:48Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java", "diffHunk": "@@ -35,6 +32,10 @@\n   // Also this instrumentation doesn't define 'producer' making it 'asymmetric' - resulting\n   // in awkward tests and traces. We may want to revisit this in the future.\n \n+  public static class SpanScopeHolder {\n+    public static final ThreadLocal<SpanScopePair> CURRENT = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5MjUxNg==", "bodyText": "I don't think it can get out of sync, unless there are future changes to the kafka streams lib that invalidate the assumption of our instrumentation:\n    public boolean process() {\n        final StampedRecord record = partitionGroup.nextRecord(recordInfo);\n        ...\n        <on exit (success or failure), if CURRENT was set, then end span and clear>\n    }\n\n    StampedRecord nextRecord(RecordInfo info) {\n        ...\n        <on successful exit, start span and set CURRENT>\n    }\n\nIt could be better though, I just pushed a change to make the instrumentation more future-proof (e.g. in case there are changes to kafka streams lib).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r374392516", "createdAt": "2020-02-03T23:06:12Z", "author": {"login": "trask"}, "path": "instrumentation/kafka-streams-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafka_streams/KafkaStreamsProcessorInstrumentation.java", "diffHunk": "@@ -35,6 +32,10 @@\n   // Also this instrumentation doesn't define 'producer' making it 'asymmetric' - resulting\n   // in awkward tests and traces. We may want to revisit this in the future.\n \n+  public static class SpanScopeHolder {\n+    public static final ThreadLocal<SpanScopePair> CURRENT = new ThreadLocal<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTA5NQ=="}, "originalCommit": {"oid": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzc0MTUwOnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozNzoxMFrOFj8QFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozNzoxMFrOFj8QFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMTYzOA==", "bodyText": "Static import CURRENT", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/109#discussion_r373231638", "createdAt": "2020-01-30T22:37:10Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/aws-java-sdk-2.2/src/main/java/io/opentelemetry/auto/instrumentation/aws/v2/AwsHttpClientInstrumentation.java", "diffHunk": "@@ -58,8 +57,9 @@\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static boolean methodEnter(@Advice.This final Object thiz) {\n       if (thiz instanceof MakeAsyncHttpRequestStage) {\n-        final AgentScope scope = activeScope();\n+        final Scope scope = TracingExecutionInterceptor.ScopeHolder.CURRENT.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc00e32c341ff18c31d5f20bfbe1d00b0b9817e5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 634, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}