{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTkwMTAy", "number": 1314, "title": "feat(cassandra4): more attributes", "bodyText": "fixes #1298", "createdAt": "2020-10-03T00:56:26Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314", "merged": true, "mergeCommit": {"oid": "9ded7188b871c730e85d10dfaf430e8122e9ec0d"}, "closed": true, "closedAt": "2021-02-02T09:12:56Z", "author": {"login": "FrankSpitulski"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPGrEFAFqTUwMTU4ODEzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2HLHEgFqTU4MTA3NjE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTg4MTM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-501588134", "createdAt": "2020-10-04T03:32:29Z", "commit": {"oid": "39b9bdd054a5a401f1402ebcb4a135f8d9a8fd8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMzozMjozMFrOHcE3sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMzozMjozMFrOHcE3sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTIwMTk3MQ==", "bodyText": "I think in parallel with the spec change we could proceed if this is scoped to cassandra. How about moving these into the cassandra package and prefixing with that for now? @trask what do you think?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r499201971", "createdAt": "2020-10-04T03:32:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/MoreAttributes.java", "diffHunk": "@@ -21,4 +21,11 @@\n   public static final String HTTP_FRAGMENT = \"http.fragment.string\";\n \n   public static final String USER_NAME = \"user.principal\";\n+  public static final String QUERY_PAGE_SIZE = \"query.pageSize\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39b9bdd054a5a401f1402ebcb4a135f8d9a8fd8d"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39b9bdd054a5a401f1402ebcb4a135f8d9a8fd8d", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39b9bdd054a5a401f1402ebcb4a135f8d9a8fd8d", "committedDate": "2020-10-03T00:55:22Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}, "afterCommit": {"oid": "021c905751e5e796dfaec9bff9e14b131aef9965", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/021c905751e5e796dfaec9bff9e14b131aef9965", "committedDate": "2020-12-14T22:52:06Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "021c905751e5e796dfaec9bff9e14b131aef9965", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/021c905751e5e796dfaec9bff9e14b131aef9965", "committedDate": "2020-12-14T22:52:06Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}, "afterCommit": {"oid": "1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "committedDate": "2020-12-28T18:52:58Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fb4a47705cc1bc3ab313c40e6ca6a59c7cfcade", "committedDate": "2020-12-28T18:52:58Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}, "afterCommit": {"oid": "78514e94819918f22884d690ef2a95acdf7b1dee", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78514e94819918f22884d690ef2a95acdf7b1dee", "committedDate": "2020-12-28T19:01:25Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78514e94819918f22884d690ef2a95acdf7b1dee", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78514e94819918f22884d690ef2a95acdf7b1dee", "committedDate": "2020-12-28T19:01:25Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}, "afterCommit": {"oid": "7280c2ab57d182c0c4fc93cc679082ecd468e854", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7280c2ab57d182c0c4fc93cc679082ecd468e854", "committedDate": "2020-12-28T20:50:47Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7280c2ab57d182c0c4fc93cc679082ecd468e854", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7280c2ab57d182c0c4fc93cc679082ecd468e854", "committedDate": "2020-12-28T20:50:47Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}, "afterCommit": {"oid": "3465108ed414963eeda05c1b14f593f2b30795a2", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3465108ed414963eeda05c1b14f593f2b30795a2", "committedDate": "2020-12-28T21:03:12Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTQ1NDIx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-561545421", "createdAt": "2021-01-05T06:40:21Z", "commit": {"oid": "3465108ed414963eeda05c1b14f593f2b30795a2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0MDoyMVrOIOLvdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjo0MTowMFrOIOLwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Boolean idempotent = statement.isIdempotent();\n          \n          \n            \n                if (idempotent != null) {\n          \n          \n            \n                  return idempotent;\n          \n          \n            \n                }\n          \n          \n            \n                return false;\n          \n          \n            \n                return Boolean.TRUE.equals(Statement.isIdempotent());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r551743348", "createdAt": "2021-01-05T06:40:21Z", "author": {"login": "anuraaga"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +62,85 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n+    }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));\n+  }\n+\n+  @Override\n+  protected void onStatement(Span span, String statement) {\n+    super.onStatement(span, statement);\n+    String table = extractTableNameFromQuery(statement);\n+    if (table != null) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_TABLE, table);\n+    }\n+  }\n+\n+  @Nullable\n+  private static String extractTableNameFromQuery(String query) {\n+    String tableName = null;\n+    Matcher matcher = tableNameRegex.matcher(query);\n+    if (matcher.find()) {\n+      if (matcher.group(2) != null) {\n+        tableName = matcher.group(2);\n+      } else {\n+        tableName = matcher.group(1);\n+      }\n+    }\n+    return tableName;\n+  }\n+\n+  private static boolean isIdempotent(Statement<?> statement) {\n+    Boolean idempotent = statement.isIdempotent();\n+    if (idempotent != null) {\n+      return idempotent;\n     }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3465108ed414963eeda05c1b14f593f2b30795a2"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0MzUwOA==", "bodyText": "Do we have a unit test for these two types of matches?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r551743508", "createdAt": "2021-01-05T06:41:00Z", "author": {"login": "anuraaga"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +62,85 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n+    }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));\n+  }\n+\n+  @Override\n+  protected void onStatement(Span span, String statement) {\n+    super.onStatement(span, statement);\n+    String table = extractTableNameFromQuery(statement);\n+    if (table != null) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_TABLE, table);\n+    }\n+  }\n+\n+  @Nullable\n+  private static String extractTableNameFromQuery(String query) {\n+    String tableName = null;\n+    Matcher matcher = tableNameRegex.matcher(query);\n+    if (matcher.find()) {\n+      if (matcher.group(2) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3465108ed414963eeda05c1b14f593f2b30795a2"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c83acaa5f93ebf2f2144d830cb7000929465329f", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c83acaa5f93ebf2f2144d830cb7000929465329f", "committedDate": "2021-01-05T23:03:58Z", "message": "formatting"}, "afterCommit": {"oid": "e50164fbe66d56cd014489857e0b2f27630ca39e", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e50164fbe66d56cd014489857e0b2f27630ca39e", "committedDate": "2021-01-05T23:35:04Z", "message": "extract CassandraTableNameExtractor to new class due to visibility issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e50164fbe66d56cd014489857e0b2f27630ca39e", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e50164fbe66d56cd014489857e0b2f27630ca39e", "committedDate": "2021-01-05T23:35:04Z", "message": "extract CassandraTableNameExtractor to new class due to visibility issues"}, "afterCommit": {"oid": "2e634fd92b0a732ac9b52168220380fee0a03150", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e634fd92b0a732ac9b52168220380fee0a03150", "committedDate": "2021-01-08T00:01:30Z", "message": "extract CassandraTableNameExtractor to new class due to visibility issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTQ5Nzg2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-563949786", "createdAt": "2021-01-08T01:44:35Z", "commit": {"oid": "2e634fd92b0a732ac9b52168220380fee0a03150"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e634fd92b0a732ac9b52168220380fee0a03150", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e634fd92b0a732ac9b52168220380fee0a03150", "committedDate": "2021-01-08T00:01:30Z", "message": "extract CassandraTableNameExtractor to new class due to visibility issues"}, "afterCommit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8907dfbf4994ce917db26e744fb65b3c0ba1408", "committedDate": "2021-01-11T22:28:47Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODAwMzA4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-565800308", "createdAt": "2021-01-11T22:48:18Z", "commit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjo0ODoxOFrOIRqSCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMzoxMDoyMFrOIRq0Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM4OTQ0OA==", "bodyText": "If Statement is provided with overridden consistency or page size, and then the query throws an exception, the instrumentation never calls onResponse, and I think we will be left capturing the wrong value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555389448", "createdAt": "2021-01-11T22:48:18Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +56,67 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MDY4Mg==", "bodyText": "if we can't check for the default when isIdempotent returns null, then I think better to capture nothing when it's null (instead of a potentially incorrect value)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555390682", "createdAt": "2021-01-11T22:51:20Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -49,14 +56,67 @@ protected InetSocketAddress peerAddress(CqlSession cqlSession) {\n     return null;\n   }\n \n+  @Override\n+  protected Span onConnection(Span span, CqlSession cqlSession) {\n+    span = super.onConnection(span, cqlSession);\n+    DriverExecutionProfile config = cqlSession.getContext().getConfig().getDefaultProfile();\n+    // may be overwritten by statement, but take the default for now\n+    int pageSize = config.getInt(DefaultDriverOption.REQUEST_PAGE_SIZE);\n+    if (pageSize > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, pageSize);\n+    }\n+    // may be overwritten by statement, but take the default for now\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+        config.getString(DefaultDriverOption.REQUEST_CONSISTENCY));\n+    return span;\n+  }\n+\n   public void onResponse(Context context, ExecutionInfo executionInfo) {\n+    Span span = Span.fromContext(context);\n     Node coordinator = executionInfo.getCoordinator();\n     if (coordinator != null) {\n       SocketAddress socketAddress = coordinator.getEndPoint().resolve();\n       if (socketAddress instanceof InetSocketAddress) {\n-        Span span = Span.fromContext(context);\n         NetPeerUtils.INSTANCE.setNetPeer(span, ((InetSocketAddress) socketAddress));\n       }\n+      if (coordinator.getDatacenter() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC, coordinator.getDatacenter());\n+      }\n+      if (coordinator.getHostId() != null) {\n+        span.setAttribute(\n+            SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID, coordinator.getHostId().toString());\n+      }\n     }\n+    span.setAttribute(\n+        SemanticAttributes.DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n+        executionInfo.getSpeculativeExecutionCount());\n+\n+    Statement<?> statement = executionInfo.getStatement();\n+    // override connection default if present\n+    if (statement.getConsistencyLevel() != null) {\n+      span.setAttribute(\n+          SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL,\n+          statement.getConsistencyLevel().name());\n+    }\n+    // override connection default if present\n+    if (statement.getPageSize() > 0) {\n+      span.setAttribute(SemanticAttributes.DB_CASSANDRA_PAGE_SIZE, statement.getPageSize());\n+    }\n+    span.setAttribute(SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE, isIdempotent(statement));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5MTk3Nw==", "bodyText": "this is the convention used elsewhere for verifying presence of attribute:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"$SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID.key\" { id -> true } // not tested\n          \n          \n            \n                    \"$SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE.key\" { idempotence -> true } // not tested\n          \n          \n            \n                    \"$SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID.key\" String\n          \n          \n            \n                    \"$SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE.key\" Boolean", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555391977", "createdAt": "2021-01-11T22:54:34Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -113,6 +114,13 @@ class CassandraClientTest extends AgentTestRunner {\n         \"$SemanticAttributes.DB_SYSTEM.key\" \"cassandra\"\n         \"$SemanticAttributes.DB_NAME.key\" keyspace\n         \"$SemanticAttributes.DB_STATEMENT.key\" statement\n+        \"$SemanticAttributes.DB_CASSANDRA_CONSISTENCY_LEVEL.key\" \"LOCAL_ONE\"\n+        \"$SemanticAttributes.DB_CASSANDRA_COORDINATOR_DC.key\" \"datacenter1\"\n+        \"$SemanticAttributes.DB_CASSANDRA_COORDINATOR_ID.key\" { id -> true } // not tested\n+        \"$SemanticAttributes.DB_CASSANDRA_IDEMPOTENCE.key\" { idempotence -> true } // not tested", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM5ODIwNg==", "bodyText": "from https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\n\nIt is not recommended to attempt any client-side parsing of db.statement just to get this property\n\nWe also parse jdbc SQL for the table name, though, violating this, so ??? <-- @mateuszrzeszutek @iNikem @johnbley @anuraaga\nIf we are going to parse/capture the table name, it would be great to use it in the span name: <db.operation> <db.name>.<db.sql.table>", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#discussion_r555398206", "createdAt": "2021-01-11T23:10:20Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-4.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/cassandra/v4_0/CassandraTableNameExtractor.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.cassandra.v4_0;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * this class is separate to enable testing. when the {@link #extractTableNameFromQuery} method was\n+ * embedded there was an issue with visibility, even if the method was public.\n+ */\n+public class CassandraTableNameExtractor {\n+\n+  private CassandraTableNameExtractor() {}\n+\n+  private static final Pattern tableNameRegex =\n+      Pattern.compile(\n+          \".*(?:FROM|INTO|UPDATE|TRUNCATE|(?:CREATE|ALTER|DROP) TABLE)\\\\s+(?:IF (?:NOT )?EXISTS\\\\s+)?([A-Z1-9_]+\\\\.([A-Z1-9_]+)|([A-Z1-9_]+))\",\n+          Pattern.CASE_INSENSITIVE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8907dfbf4994ce917db26e744fb65b3c0ba1408"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0ccb5501103d809dedfe26e36792ab7ca57c2f6", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e0ccb5501103d809dedfe26e36792ab7ca57c2f6", "committedDate": "2021-01-12T03:40:26Z", "message": "default idempotence"}, "afterCommit": {"oid": "ae24113b04332dfacf5babe250ed1e7689b5de78", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae24113b04332dfacf5babe250ed1e7689b5de78", "committedDate": "2021-01-12T03:41:20Z", "message": "default idempotence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2MDU1OTEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-576055910", "createdAt": "2021-01-26T06:30:32Z", "commit": {"oid": "901e4fb11808a60ba6e09834817e680a357a6f33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05da4d91c7f372714461e2d022c4eae19f968d8", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e05da4d91c7f372714461e2d022c4eae19f968d8", "committedDate": "2021-02-02T03:14:24Z", "message": "feat(cassandra4): more attributes\n\nfixes #1298\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba8e13653421bf174491685ef88d1dd584d29b52", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ba8e13653421bf174491685ef88d1dd584d29b52", "committedDate": "2021-02-02T03:14:25Z", "message": "Update instrumentation/cassandra/cassandra-4.0/javaagent/src/test/groovy/CassandraClientTest.groovy\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b1df681dcd3e7c7a5e67dc841a35f31c666edb", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84b1df681dcd3e7c7a5e67dc841a35f31c666edb", "committedDate": "2021-02-02T03:14:25Z", "message": "add error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3906903722afce1e0b5e14c5c5fb4d291959f2a5", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3906903722afce1e0b5e14c5c5fb4d291959f2a5", "committedDate": "2021-02-02T03:14:25Z", "message": "default idempotence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056800386f8f9d202ed7e1dca468221c4bdae930", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/056800386f8f9d202ed7e1dca468221c4bdae930", "committedDate": "2021-02-02T03:14:25Z", "message": "embed session into onResponse to prevent need to overwrite default tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f640dd1ab5eee58131b349c48bf102839ddd682f", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f640dd1ab5eee58131b349c48bf102839ddd682f", "committedDate": "2021-02-02T03:14:26Z", "message": "change javadoc according to spotless"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "901e4fb11808a60ba6e09834817e680a357a6f33", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/901e4fb11808a60ba6e09834817e680a357a6f33", "committedDate": "2021-01-12T07:08:23Z", "message": "change javadoc according to spotless"}, "afterCommit": {"oid": "f640dd1ab5eee58131b349c48bf102839ddd682f", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f640dd1ab5eee58131b349c48bf102839ddd682f", "committedDate": "2021-02-02T03:14:26Z", "message": "change javadoc according to spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4696fab77392694befdfd2bd3e94cf51d3546ffe", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4696fab77392694befdfd2bd3e94cf51d3546ffe", "committedDate": "2021-02-02T03:34:42Z", "message": "use shared table name extractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dba7dc2ffcb78e092d49a6b707deabd434998b4", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1dba7dc2ffcb78e092d49a6b707deabd434998b4", "committedDate": "2021-02-02T04:08:39Z", "message": "fix tests to account for SqlStatementSanitizer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4be78fafdf8d2ffc85e77218c046d6d40c1af9bd", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4be78fafdf8d2ffc85e77218c046d6d40c1af9bd", "committedDate": "2021-02-02T04:05:37Z", "message": "fix tests to account for SqlStatementSanitizer"}, "afterCommit": {"oid": "1dba7dc2ffcb78e092d49a6b707deabd434998b4", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1dba7dc2ffcb78e092d49a6b707deabd434998b4", "committedDate": "2021-02-02T04:08:39Z", "message": "fix tests to account for SqlStatementSanitizer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMDc2MTY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1314#pullrequestreview-581076169", "createdAt": "2021-02-02T08:10:37Z", "commit": {"oid": "1dba7dc2ffcb78e092d49a6b707deabd434998b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2469, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}