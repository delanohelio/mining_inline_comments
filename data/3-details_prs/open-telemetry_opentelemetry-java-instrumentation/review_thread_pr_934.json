{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTQ2NzU2", "number": 934, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMjoyNVrOEXYXtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozMzoxOVrOEXY7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTUxOTkwOnYy", "diffSide": "RIGHT", "path": ".github/workflows/pr.yaml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTowMjoyNVrOG_JIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0MjoyOFrOG_r1Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzA3NA==", "bodyText": "just checking that we want to do this retry on PRs (not just nightly)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468863074", "createdAt": "2020-08-11T21:02:25Z", "author": {"login": "trask"}, "path": ".github/workflows/pr.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+name: PR build\n+\n+on: pull_request\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        java: [8, 11, 14]\n+      fail-fast: false\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK ${{ matrix.java }} for running tests\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: ${{ matrix.java }}\n+      - name: Set JDK ${{ matrix.java }} home\n+        run: echo \"::set-env name=JAVA_${{ matrix.java }}_HOME::${{ env.JAVA_HOME }}\"\n+\n+      - name: Set up JDK 11 for running Gradle\n+        if: matrix.java != 11\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk${{ matrix.java }}\n+\n+      - name: Test with Gradle\n+        uses: nick-invision/retry@v1\n+        with:\n+          command: ./gradlew testJava${{ matrix.java }} --stacktrace\n+          timeout_minutes: 60\n+          max_attempts: 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMTY3Ng==", "bodyText": "I think we still want to protect PRs from flaky test.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r469111676", "createdAt": "2020-08-12T08:59:19Z", "author": {"login": "iNikem"}, "path": ".github/workflows/pr.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+name: PR build\n+\n+on: pull_request\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        java: [8, 11, 14]\n+      fail-fast: false\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK ${{ matrix.java }} for running tests\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: ${{ matrix.java }}\n+      - name: Set JDK ${{ matrix.java }} home\n+        run: echo \"::set-env name=JAVA_${{ matrix.java }}_HOME::${{ env.JAVA_HOME }}\"\n+\n+      - name: Set up JDK 11 for running Gradle\n+        if: matrix.java != 11\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk${{ matrix.java }}\n+\n+      - name: Test with Gradle\n+        uses: nick-invision/retry@v1\n+        with:\n+          command: ./gradlew testJava${{ matrix.java }} --stacktrace\n+          timeout_minutes: 60\n+          max_attempts: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzA3NA=="}, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyOTk0NQ==", "bodyText": "just realized, this will slow down feedback (3x?) on real failing builds, which are common in PRs", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r469429945", "createdAt": "2020-08-12T17:39:24Z", "author": {"login": "trask"}, "path": ".github/workflows/pr.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+name: PR build\n+\n+on: pull_request\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        java: [8, 11, 14]\n+      fail-fast: false\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK ${{ matrix.java }} for running tests\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: ${{ matrix.java }}\n+      - name: Set JDK ${{ matrix.java }} home\n+        run: echo \"::set-env name=JAVA_${{ matrix.java }}_HOME::${{ env.JAVA_HOME }}\"\n+\n+      - name: Set up JDK 11 for running Gradle\n+        if: matrix.java != 11\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk${{ matrix.java }}\n+\n+      - name: Test with Gradle\n+        uses: nick-invision/retry@v1\n+        with:\n+          command: ./gradlew testJava${{ matrix.java }} --stacktrace\n+          timeout_minutes: 60\n+          max_attempts: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzA3NA=="}, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMTY0Mg==", "bodyText": "Not exactly 3x, because already passed tests will not be re-run. But you are right. Will see how this goes...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r469431642", "createdAt": "2020-08-12T17:42:28Z", "author": {"login": "iNikem"}, "path": ".github/workflows/pr.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+name: PR build\n+\n+on: pull_request\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        java: [8, 11, 14]\n+      fail-fast: false\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK ${{ matrix.java }} for running tests\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: ${{ matrix.java }}\n+      - name: Set JDK ${{ matrix.java }} home\n+        run: echo \"::set-env name=JAVA_${{ matrix.java }}_HOME::${{ env.JAVA_HOME }}\"\n+\n+      - name: Set up JDK 11 for running Gradle\n+        if: matrix.java != 11\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk${{ matrix.java }}\n+\n+      - name: Test with Gradle\n+        uses: nick-invision/retry@v1\n+        with:\n+          command: ./gradlew testJava${{ matrix.java }} --stacktrace\n+          timeout_minutes: 60\n+          max_attempts: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2MzA3NA=="}, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU3MzU2OnYy", "diffSide": "RIGHT", "path": ".github/workflows/build-play-smoke-dist.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMDozOVrOG_Jp2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMDozOVrOG_Jp2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTY0Mw==", "bodyText": "now that this dir has gradle?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    run: cd smoke-tests/play && ../../gradlew jib\n          \n          \n            \n                    run: cd smoke-tests/play && ./gradlew jib", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468871643", "createdAt": "2020-08-11T21:20:39Z", "author": {"login": "trask"}, "path": ".github/workflows/build-play-smoke-dist.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+name: Build Play smoke test distribution\n+\n+on:\n+  push:\n+    paths:\n+      - 'smoke-tests/play/**'\n+    branches: 'master'\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK 11 for running Gradle\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk11\n+\n+      - name: Login to GitHub Package Registry\n+        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.repository }} --password-stdin\n+\n+      - name: Build Docker Image\n+        run: cd smoke-tests/play && ../../gradlew jib", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU3NDIwOnYy", "diffSide": "RIGHT", "path": ".github/workflows/build-springboot-smoke-dist.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMDo1NFrOG_JqSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMDo1NFrOG_JqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTc1Mw==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    run: cd smoke-tests/springboot && ../../gradlew jib\n          \n          \n            \n                    run: cd smoke-tests/springboot && ./gradlew jib", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468871753", "createdAt": "2020-08-11T21:20:54Z", "author": {"login": "trask"}, "path": ".github/workflows/build-springboot-smoke-dist.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+name: Build Spring Boot smoke test distribution\n+\n+on:\n+  push:\n+    paths:\n+      - 'smoke-tests/springboot/**'\n+    branches: 'master'\n+\n+jobs:\n+  test:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK 11 for running Gradle\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+\n+      - name: Cache gradle dependencies\n+        uses: burrunan/gradle-cache-action@v1\n+        with:\n+          job-id: jdk11\n+\n+      - name: Login to GitHub Package Registry\n+        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{ github.repository }} --password-stdin\n+\n+      - name: Build Docker Image\n+        run: cd smoke-tests/springboot && ../../gradlew jib", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU3ODU0OnYy", "diffSide": "RIGHT", "path": "smoke-tests/play/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMjoyMFrOG_Js8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyMjoyMFrOG_Js8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MjQzMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468872432", "createdAt": "2020-08-11T21:22:20Z", "author": {"login": "trask"}, "path": "smoke-tests/play/README.md", "diffHunk": "@@ -0,0 +1,6 @@\n+# Play framework smoke test\n+Play application used by smoke tests of OpenTelemetry java agent.\n+Builds and publishes Docker image containing a trivial Play application.\n+\n+This is a separate gradle project, independent from the rest. This was done to allow\n+to build and publish it only when actually needed and not on every project build. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU4NjQ2OnYy", "diffSide": "RIGHT", "path": "smoke-tests/springboot/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNTowMFrOG_Jx4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNTowMFrOG_Jx4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY5Ng==", "bodyText": "i think nice to keep our smoke tests targeted to Java 8, even if we are only running them on Java 11 currently\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sourceCompatibility = '11'\n          \n          \n            \n            sourceCompatibility = '8'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468873696", "createdAt": "2020-08-11T21:25:00Z", "author": {"login": "trask"}, "path": "smoke-tests/springboot/build.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+  id 'org.springframework.boot' version '2.3.2.RELEASE'\n+  id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n+  id 'java'\n+  id 'com.google.cloud.tools.jib' version '2.4.0'\n+}\n+\n+group = 'io.opentelemetry'\n+version = '0.0.1-SNAPSHOT'\n+sourceCompatibility = '11'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU5NDg5OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNzo1N1rOG_J3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToyNzo1N1rOG_J3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NTA2Mw==", "bodyText": "nice \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468875063", "createdAt": "2020-08-11T21:27:57Z", "author": {"login": "trask"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/SmokeTest.groovy", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import com.google.protobuf.util.JsonFormat\n+import io.opentelemetry.auto.test.utils.OkHttpUtils\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n+import io.opentelemetry.proto.trace.v1.Span\n+import java.nio.file.Files\n+import java.util.concurrent.TimeUnit\n+import java.util.stream.Stream\n+import okhttp3.OkHttpClient\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import org.testcontainers.containers.BindMode\n+import org.testcontainers.containers.GenericContainer\n+import org.testcontainers.containers.Network\n+import org.testcontainers.containers.output.Slf4jLogConsumer\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+abstract class SmokeTest extends Specification {\n+  private static final Logger logger = LoggerFactory.getLogger(SmokeTest)\n+\n+  protected static OkHttpClient client = OkHttpUtils.client()\n+\n+  @Shared\n+  private Network network = Network.newNetwork()\n+  @Shared\n+  protected String agentPath = System.getProperty(\"io.opentelemetry.smoketest.agent.shadowJar.path\")\n+\n+  @Shared\n+  protected GenericContainer target = new GenericContainer<>(getTargetImage())\n+    .withExposedPorts(8080)\n+    .withNetwork(network)\n+    .withLogConsumer(new Slf4jLogConsumer(logger))\n+    .withFileSystemBind(agentPath, \"/opentelemetry-javaagent-all.jar\")\n+    .withEnv(\"JAVA_TOOL_OPTIONS\", \"-javaagent:/opentelemetry-javaagent-all.jar\")\n+    .withEnv(\"OTEL_BSP_MAX_EXPORT_BATCH\", \"1\")\n+    .withEnv(\"OTEL_BSP_SCHEDULE_DELAY\", \"10\")\n+    .withEnv(\"OTEL_OTLP_ENDPOINT\", \"collector:55680\")\n+    .withEnv(extraEnv)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTYxMTE4OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTozMzoxOVrOG_KA9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTowMjoyMFrOG_YahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NzU1OA==", "bodyText": "i think this should work now with real span verification, the reason it didn't before is because we were verifying from logging exporter and wildfly messed with stdout/stderr, i can try it out after the merge", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r468877558", "createdAt": "2020-08-11T21:33:19Z", "author": {"login": "trask"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+\n+import okhttp3.Request\n+\n+class WildflySmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage() {\n+    \"jboss/wildfly:latest\"\n+  }\n+\n+  //We don't have support for Wildfly Undertow server yet.\n+  //So this test just verifies that Wildfly has come up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMzQ3Ng==", "bodyText": "I haven't seen any spans generated during this test", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/934#discussion_r469113476", "createdAt": "2020-08-12T09:02:20Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+\n+import okhttp3.Request\n+\n+class WildflySmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage() {\n+    \"jboss/wildfly:latest\"\n+  }\n+\n+  //We don't have support for Wildfly Undertow server yet.\n+  //So this test just verifies that Wildfly has come up.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NzU1OA=="}, "originalCommit": {"oid": "331b04828598a6ed939b7ec3d17719b8a129fe5a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 9, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}