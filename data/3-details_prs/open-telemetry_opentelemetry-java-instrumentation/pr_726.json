{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTg1Nzc5", "number": 726, "title": "feat(servlet): content length", "bodyText": "add content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes", "createdAt": "2020-07-18T00:41:26Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726", "merged": true, "mergeCommit": {"oid": "d6e39f89e6dd2a9f15c173a076b4302960c83b2c"}, "closed": true, "closedAt": "2020-07-22T03:24:32Z", "author": {"login": "FrankSpitulski"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc19wweABqjM1NjAzNDAyMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3RcMhAH2gAyNDUxNTg1Nzc5OmQ0NDA1Nzg3MjE0MmIzN2IwMTZmMTljMDExODQ1NWQ4OTQ2NDA4NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2ee74296387a53de731d2ce470fb98f9b4e4f87", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2ee74296387a53de731d2ce470fb98f9b4e4f87", "committedDate": "2020-07-18T00:40:51Z", "message": "feat(servlet): content length\n\nadd content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes"}, "afterCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ff22b26030b7523acf6d6820091dd97a9fbebefc", "committedDate": "2020-07-18T01:01:07Z", "message": "feat(servlet): content length\n\nadd content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDI0NDcw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-451024470", "createdAt": "2020-07-18T02:34:54Z", "commit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjozNDo1NFrOGzlGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjo0MDo0MlrOGzlIRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODM2Mg==", "bodyText": "If I recall correctly this was already released in otel 0.6.0, is it not part of SemanticAttributes?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456738362", "createdAt": "2020-07-18T02:34:54Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/instrumentation/api/MoreAttributes.java", "diffHunk": "@@ -19,6 +19,7 @@\n public class MoreAttributes {\n   public static final String HTTP_QUERY = \"http.query.string\";\n   public static final String HTTP_FRAGMENT = \"http.fragment.string\";\n+  public static final String HTTP_RESPONSE_CONTENT_LENGTH = \"http.response_content_length\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczODg4Nw==", "bodyText": "I think we may need counting for cases like chunked responses but a huge majority will have a content length header. What do you think about starting with that to get most bang for buck? We could do it in HttpServerTracer I think.\nEither way we probably want to avoid adding this wrapper when the response has a content length header. We could use the content length in a future PR instead.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456738887", "createdAt": "2020-07-18T02:40:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDc1NjQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-451075644", "createdAt": "2020-07-18T18:54:55Z", "commit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxODo1NDo1NVrOGzp8NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxODo1NDo1NVrOGzp8NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgxNzcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  counter += len - off;\n          \n          \n            \n                  counter += len;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456817717", "createdAt": "2020-07-18T18:54:55Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  public int getContentLength() {\n+    return outputStream.counter;\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len - off;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTU1NzMx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-451155731", "createdAt": "2020-07-19T19:09:09Z", "commit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTowOTowOVrOGzxodA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTowOTowOVrOGzxodA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzczMg==", "bodyText": "The design principal of Tracers (as opposed to old Decorators) is to expose as small API as possible. For this reason I don't really like this new public method here. I don't have better idea though right now.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r456943732", "createdAt": "2020-07-19T19:09:09Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -109,4 +109,8 @@ public void setPrincipal(Span span, HttpServletRequest request) {\n       span.setAttribute(MoreAttributes.USER_NAME, principal.getName());\n     }\n   }\n+\n+  public void setContentLength(Span span, int length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzE2MjA0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-451316204", "createdAt": "2020-07-20T06:02:56Z", "commit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowMjo1NlrOGz5_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowMzo1M1rOGz6A4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MDY0NQ==", "bodyText": "Use packageName as below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457080645", "createdAt": "2020-07-20T06:02:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/AsyncContextInstrumentation.java", "diffHunk": "@@ -50,6 +50,9 @@ public AsyncContextInstrumentation() {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n+      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTA1OQ==", "bodyText": "Use packageName as below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457081059", "createdAt": "2020-07-20T06:03:53Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3Instrumentation.java", "diffHunk": "@@ -54,6 +54,9 @@ public Servlet3Instrumentation() {\n     return new String[] {\n       \"io.opentelemetry.instrumentation.servlet.HttpServletRequestGetter\",\n       \"io.opentelemetry.instrumentation.servlet.ServletHttpServerTracer\",\n+      \"io.opentelemetry.auto.instrumentation.servlet.v3_0.CountingHttpServletResponse\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff22b26030b7523acf6d6820091dd97a9fbebefc"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24abd5a3f3eba2eca87eaa8993c430ff273baf43", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/24abd5a3f3eba2eca87eaa8993c430ff273baf43", "committedDate": "2020-07-20T19:45:26Z", "message": "count printwriter and add null checks"}, "afterCommit": {"oid": "6476633c33c59a04227650798df9a9a93c949810", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6476633c33c59a04227650798df9a9a93c949810", "committedDate": "2020-07-20T19:47:27Z", "message": "count printwriter and add null checks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDExMzYz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-452011363", "createdAt": "2020-07-20T22:49:17Z", "commit": {"oid": "42343a8582605ef203cadb7657a5ae0bb879646e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OToxN1rOG0h7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OToxN1rOG0h7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDkxMw==", "bodyText": "curious under what conditions is response content length not captured? (why we need it == null)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457734913", "createdAt": "2020-07-20T22:49:17Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/test/groovy/AbstractServlet3Test.groovy", "diffHunk": "@@ -88,6 +88,8 @@ abstract class AbstractServlet3Test<SERVER, CONTEXT> extends HttpServerTest<SERV\n         \"${SemanticAttributes.HTTP_URL.key()}\" { it == \"${endpoint.resolve(address)}\" || it == \"${endpoint.resolveWithoutFragment(address)}\" }\n         \"${SemanticAttributes.HTTP_METHOD.key()}\" method\n         \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" endpoint.status\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == null || it == getContentLength(endpoint) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42343a8582605ef203cadb7657a5ae0bb879646e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "920bd1822de43917fbc98f1859e7f2c1673ce6d2", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/920bd1822de43917fbc98f1859e7f2c1673ce6d2", "committedDate": "2020-07-21T03:28:35Z", "message": "feat(servlet): content length\n\nadd content length tag for v3 servlets as per https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#common-attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a624085c7c3cc33102f9bae3474cc53d1a0deb7", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0a624085c7c3cc33102f9bae3474cc53d1a0deb7", "committedDate": "2020-07-21T03:28:35Z", "message": "address bugs in PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4c061cbed18ca770d5c5c1ba99028e4b47e93c", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f4c061cbed18ca770d5c5c1ba99028e4b47e93c", "committedDate": "2020-07-21T03:28:35Z", "message": "count printwriter and add null checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6a6ab4fa476e4557f53d15edbfee6b5710deb5", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f6a6ab4fa476e4557f53d15edbfee6b5710deb5", "committedDate": "2020-07-21T03:28:35Z", "message": "add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e13a34f2c951d741f80c10393dff77b0b11375d1", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e13a34f2c951d741f80c10393dff77b0b11375d1", "committedDate": "2020-07-21T02:18:59Z", "message": "fix finatra glassfish and spring tests"}, "afterCommit": {"oid": "7e0f082b750a00bf2ddac207481031a86c76e40a", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7e0f082b750a00bf2ddac207481031a86c76e40a", "committedDate": "2020-07-21T03:29:30Z", "message": "git demands that I push this file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTAyMjkz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-452102293", "createdAt": "2020-07-21T03:33:26Z", "commit": {"oid": "7e0f082b750a00bf2ddac207481031a86c76e40a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzozMzoyNlrOG0m2GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzozMzoyNlrOG0m2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgxNTU3Ng==", "bodyText": "I cannot get git to leave this file alone. It changes it to have CRLF but according to the .gitattributes that should already be the case.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r457815576", "createdAt": "2020-07-21T03:33:26Z", "author": {"login": "FrankSpitulski"}, "path": "gradlew.bat", "diffHunk": "@@ -1,104 +1,104 @@\n-@rem\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e0f082b750a00bf2ddac207481031a86c76e40a"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b6035b841ea80301e2c33e9b50c0eb35b54b13b", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8b6035b841ea80301e2c33e9b50c0eb35b54b13b", "committedDate": "2020-07-21T04:13:20Z", "message": "fix GlassFishServerTest"}, "afterCommit": {"oid": "c7eedc45fccd3bc25d2f4036bd84aae0b0e6684c", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7eedc45fccd3bc25d2f4036bd84aae0b0e6684c", "committedDate": "2020-07-21T04:47:22Z", "message": "fix servlet 2 test and GlassFishServerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec0f05a63b58da64092f54d31047d93e22bf0cd0", "committedDate": "2020-07-21T05:52:57Z", "message": "fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e5c14ba6b19ba347f4dfad3b9a0fa302b355b73", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e5c14ba6b19ba347f4dfad3b9a0fa302b355b73", "committedDate": "2020-07-21T05:16:41Z", "message": "fix async imports\n\nCountingPrintWriter is unused by the tests but should be imported for completeness in case some implementation uses it"}, "afterCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec0f05a63b58da64092f54d31047d93e22bf0cd0", "committedDate": "2020-07-21T05:52:57Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDE1Nzcw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-452415770", "createdAt": "2020-07-21T12:44:49Z", "commit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NDo0OVrOG02LRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NDo0OVrOG02LRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Njc1OQ==", "bodyText": "Is a volatile enough? Writes from different threads sure but is it possible to have simultaneous writes?\nEither way sticking with atomic for safety is fine too", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458066759", "createdAt": "2020-07-21T12:44:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+      delegate.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      delegate.close();\n+    }\n+  }\n+\n+  static class CountingPrintWriter extends PrintWriter {\n+    // PrintWriter is synchronised, so the counter has to be atomic\n+    private AtomicInteger counter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzY5NDc4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-452769478", "createdAt": "2020-07-21T19:36:04Z", "commit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozNjowNFrOG1G4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1ODoyM1rOG1Hm8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ServletOutputStream delegate;\n          \n          \n            \n                private final ServletOutputStream delegate;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458340452", "createdAt": "2020-07-21T19:36:04Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MDYxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private AtomicInteger counter = new AtomicInteger(0);\n          \n          \n            \n                private final AtomicInteger counter = new AtomicInteger(0);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458340613", "createdAt": "2020-07-21T19:36:25Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+      delegate.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      delegate.close();\n+    }\n+  }\n+\n+  static class CountingPrintWriter extends PrintWriter {\n+    // PrintWriter is synchronised, so the counter has to be atomic\n+    private AtomicInteger counter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0MjA4NA==", "bodyText": "can you change this to pass in int responseContentLength instead of the okhttp Response, and also swap the last two params, so then can leave off endpoint from the callers since most don't use it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458342084", "createdAt": "2020-07-21T19:39:20Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "diffHunk": "@@ -453,7 +453,7 @@ abstract class HttpServerTest<SERVER> extends AgentTestRunner {\n   }\n \n   // parent span must be cast otherwise it breaks debugging classloading (junit loads it early)\n-  void serverSpan(TraceAssert trace, int index, String traceID = null, String parentID = null, String method = \"GET\", ServerEndpoint endpoint = SUCCESS) {\n+  void serverSpan(TraceAssert trace, int index, String traceID = null, String parentID = null, String method = \"GET\", ServerEndpoint endpoint = SUCCESS, Response response = null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1MjM3MA==", "bodyText": "I think the Servlet Spec comes to our rescue here:\n\nOther than the startAsync and complete methods, implementations of the request\nand response objects are not guaranteed to be thread safe. This means that they\nshould either only be used within the scope of the request handling thread or the\napplication must ensure that access to the request and response objects are thread\nsafe.\n\nMy reading of this is that we don't even need volatile here (similar to implementation above in CountingServletOutputStream).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#discussion_r458352370", "createdAt": "2020-07-21T19:58:23Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.servlet.v3_0;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.Writer;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/** HttpServletResponseWrapper since servlet 2.3, not applicable to 2.2 */\n+public class CountingHttpServletResponse extends HttpServletResponseWrapper {\n+  private CountingServletOutputStream outputStream = null;\n+  private CountingPrintWriter printWriter = null;\n+  private int errorLength = 0;\n+\n+  /**\n+   * Constructs a response adaptor wrapping the given response.\n+   *\n+   * @throws IllegalArgumentException if the response is null\n+   */\n+  public CountingHttpServletResponse(HttpServletResponse response) {\n+    super(response);\n+  }\n+\n+  @Override\n+  public ServletOutputStream getOutputStream() throws IOException {\n+    if (outputStream == null) {\n+      outputStream = new CountingServletOutputStream(super.getOutputStream());\n+    }\n+    return outputStream;\n+  }\n+\n+  @Override\n+  public PrintWriter getWriter() throws IOException {\n+    if (printWriter == null) {\n+      printWriter = new CountingPrintWriter(super.getWriter());\n+    }\n+    return printWriter;\n+  }\n+\n+  public int getContentLength() {\n+    int contentLength = errorLength;\n+    if (outputStream != null) {\n+      contentLength += outputStream.counter;\n+    }\n+    if (printWriter != null) {\n+      contentLength += printWriter.counter.get();\n+    }\n+    return contentLength;\n+  }\n+\n+  /** sendError bypasses the servlet response writers and writes directly to the response */\n+  @Override\n+  public void sendError(int sc, String msg) throws IOException {\n+    super.sendError(sc, msg);\n+    if (msg != null) {\n+      errorLength += msg.length();\n+    }\n+  }\n+\n+  static class CountingServletOutputStream extends ServletOutputStream {\n+\n+    private ServletOutputStream delegate;\n+    private int counter = 0;\n+\n+    public CountingServletOutputStream(ServletOutputStream delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+      delegate.write(b);\n+      counter++;\n+    }\n+\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+      delegate.write(b);\n+      counter += b.length;\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+      delegate.write(b, off, len);\n+      counter += len;\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+      delegate.flush();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+      delegate.close();\n+    }\n+  }\n+\n+  static class CountingPrintWriter extends PrintWriter {\n+    // PrintWriter is synchronised, so the counter has to be atomic\n+    private AtomicInteger counter = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2Njc1OQ=="}, "originalCommit": {"oid": "ec0f05a63b58da64092f54d31047d93e22bf0cd0"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df25960bba4ded00bc15eb432762c4da45a3c7c", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7df25960bba4ded00bc15eb432762c4da45a3c7c", "committedDate": "2020-07-21T21:36:51Z", "message": "Update instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7884a6f39b047261ab26b25f381a9bee1b26f9c", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c7884a6f39b047261ab26b25f381a9bee1b26f9c", "committedDate": "2020-07-21T21:37:00Z", "message": "Update instrumentation/servlet/servlet-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/CountingHttpServletResponse.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e780889e8430f3c836e67dbcc66b20bce8c0361a", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e780889e8430f3c836e67dbcc66b20bce8c0361a", "committedDate": "2020-07-21T22:17:03Z", "message": "remove atomic print writer counter\n\nrefactor tests"}, "afterCommit": {"oid": "f799b7f719916d951d3e254a52aab7185edacc04", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f799b7f719916d951d3e254a52aab7185edacc04", "committedDate": "2020-07-21T22:25:30Z", "message": "remove atomic print writer counter\n\nrefactor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad2589938f10650c91b9f9cd319890cc30fc583a", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad2589938f10650c91b9f9cd319890cc30fc583a", "committedDate": "2020-07-21T22:56:02Z", "message": "remove atomic print writer counter\n\nrefactor tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f799b7f719916d951d3e254a52aab7185edacc04", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f799b7f719916d951d3e254a52aab7185edacc04", "committedDate": "2020-07-21T22:25:30Z", "message": "remove atomic print writer counter\n\nrefactor tests"}, "afterCommit": {"oid": "ad2589938f10650c91b9f9cd319890cc30fc583a", "author": {"user": {"login": "FrankSpitulski", "name": "Frank Spitulski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad2589938f10650c91b9f9cd319890cc30fc583a", "committedDate": "2020-07-21T22:56:02Z", "message": "remove atomic print writer counter\n\nrefactor tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODkyMDMy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/726#pullrequestreview-452892032", "createdAt": "2020-07-21T23:14:10Z", "commit": {"oid": "ad2589938f10650c91b9f9cd319890cc30fc583a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44057872142b37b016f19c0118455d894640849", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d44057872142b37b016f19c0118455d894640849", "committedDate": "2020-07-22T02:31:06Z", "message": "Merge remote-tracking branch 'upstream/master' into frankspitulski"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}