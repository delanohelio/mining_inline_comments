{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDIyNzQy", "number": 1211, "title": "Implement MDC auto-instrumentation for log4j1", "bodyText": "Resolves #1197", "createdAt": "2020-09-16T14:16:47Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211", "merged": true, "mergeCommit": {"oid": "bc8224f88f8dfddd8be532a1a15d0dd641deec23"}, "closed": true, "closedAt": "2020-09-17T09:07:13Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJdQmeABqjM3NzM0OTU0OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJtQ3NAFqTQ5MDM5MjM2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa65caffa43dc0c318d0e9472166b9e58bf12110", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa65caffa43dc0c318d0e9472166b9e58bf12110", "committedDate": "2020-09-16T13:37:07Z", "message": "Implement MDC auto-instrumentation for log4j1"}, "afterCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5bbff34247b2250c22a0b955716fd3605b714b34", "committedDate": "2020-09-16T14:27:44Z", "message": "Implement MDC auto-instrumentation for log4j1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTE4NTA0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#pullrequestreview-489918504", "createdAt": "2020-09-16T18:32:37Z", "commit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozMjozN1rOHS9gVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxODozNToxMlrOHS9sdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY0NDExNw==", "bodyText": "Should we cap that on 2.0? Or it has different module?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489644117", "createdAt": "2020-09-16T18:32:37Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-1.2/log4j-1.2.gradle", "diffHunk": "@@ -0,0 +1,24 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"log4j\"\n+    module = \"log4j\"\n+    versions = \"[1.2,)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY0NzIyMQ==", "bodyText": "Why don't you assert the result of this method call?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489647221", "createdAt": "2020-09-16T18:35:12Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-1.2/src/test/groovy/Log4j1MdcTest.groovy", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.TracingContextUtils\n+import org.apache.log4j.LogManager\n+\n+class Log4j1MdcTest extends AgentTestRunner {\n+  def cleanup() {\n+    ListAppender.clearEvents()\n+  }\n+\n+  def \"no ids when no span\"() {\n+    given:\n+    def logger = LogManager.getLogger('TestLogger')\n+\n+    when:\n+    logger.info(\"log message 1\")\n+    logger.info(\"log message 2\")\n+\n+    then:\n+    def events = ListAppender.events\n+\n+    events.size() == 2\n+    events[0].message == \"log message 1\"\n+    events[0].getMDC(\"traceId\") == null\n+    events[0].getMDC(\"spanId\") == null\n+    events[0].getMDC(\"traceFlags\") == null\n+\n+    events[1].message == \"log message 2\"\n+    events[1].getMDC(\"traceId\") == null\n+    events[1].getMDC(\"spanId\") == null\n+    events[1].getMDC(\"traceFlags\") == null\n+  }\n+\n+  def \"ids when span\"() {\n+    given:\n+    def logger = LogManager.getLogger('TestLogger')\n+\n+    when:\n+    def span1 = TraceUtils.runUnderTrace(\"test\") {\n+      logger.info(\"log message 1\")\n+      TracingContextUtils.currentSpan\n+    }\n+\n+    logger.info(\"log message 2\")\n+\n+    def span2 = TraceUtils.runUnderTrace(\"test 2\") {\n+      logger.info(\"log message 3\")\n+      TracingContextUtils.currentSpan\n+    }\n+\n+    then:\n+    def events = ListAppender.events\n+\n+    events.size() == 3\n+    events[0].message == \"log message 1\"\n+    events[0].getMDC(\"traceId\") == span1.context.traceIdAsHexString\n+    events[0].getMDC(\"spanId\") == span1.context.spanIdAsHexString\n+    events[0].getMDC(\"sampled\") == \"true\"\n+\n+    events[1].message == \"log message 2\"\n+    events[1].getMDC(\"traceId\") == null\n+    events[1].getMDC(\"spanId\") == null\n+    events[1].getMDC(\"sampled\") == null\n+\n+    events[2].message == \"log message 3\"\n+    // this explicit getMDCCopy() call here is to make sure that whole instrumentation is tested\n+    events[2].getMDCCopy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTQzNTE5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#pullrequestreview-489943519", "createdAt": "2020-09-16T19:09:10Z", "commit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTowOToxMFrOHTACDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxMDowMVrOHTAGOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NTUxOQ==", "bodyText": "typically this uses the same class as typeMatcher, if there's a reason for it to be different can you add a comment here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489685519", "createdAt": "2020-09-16T19:09:10Z", "author": {"login": "trask"}, "path": "instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1Instrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j1Instrumentation extends Instrumenter.Default {\n+  public Log4j1Instrumentation() {\n+    super(\"log4j1\", \"log4j\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.apache.log4j.MDC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY4NjU4Nw==", "bodyText": "same comment as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#discussion_r489686587", "createdAt": "2020-09-16T19:10:01Z", "author": {"login": "trask"}, "path": "instrumentation/log4j/log4j-1.2/src/main/java/io/opentelemetry/instrumentation/auto/log4j/v1_2/Log4j1LoggingEventInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.log4j.v1_2;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.instrumentation.auto.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.log4j.MDC;\n+import org.apache.log4j.spi.LoggingEvent;\n+\n+@AutoService(Instrumenter.class)\n+public class Log4j1LoggingEventInstrumentation extends Instrumenter.Default {\n+  public Log4j1LoggingEventInstrumentation() {\n+    super(\"log4j1\", \"log4j\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.apache.log4j.MDC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "committedDate": "2020-09-17T08:14:43Z", "message": "Implement MDC auto-instrumentation for log4j1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bbff34247b2250c22a0b955716fd3605b714b34", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5bbff34247b2250c22a0b955716fd3605b714b34", "committedDate": "2020-09-16T14:27:44Z", "message": "Implement MDC auto-instrumentation for log4j1"}, "afterCommit": {"oid": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/44dcb310fb41ebb2f394c8449407d31e1f3cb84b", "committedDate": "2020-09-17T08:14:43Z", "message": "Implement MDC auto-instrumentation for log4j1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzkyMzY0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1211#pullrequestreview-490392364", "createdAt": "2020-09-17T09:06:42Z", "commit": {"oid": "44dcb310fb41ebb2f394c8449407d31e1f3cb84b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2614, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}