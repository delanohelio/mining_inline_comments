{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NzczOTM4", "number": 1462, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo0MDowOFrOExUjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo0MDowOFrOExUjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTUyMzIwOnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODo0MDowOFrOHnZhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjowNTowOFrOHpESpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA==", "bodyText": "does it make sense to use muzzle and split out separate instrumentation module for couchbase 2.5?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r511074574", "createdAt": "2020-10-23T18:40:08Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM4NzMwNw==", "bodyText": "Just a general remark: I think the fewer modules we have, the better :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r511387307", "createdAt": "2020-10-24T10:37:51Z", "author": {"login": "iNikem"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5ODkyNg==", "bodyText": "I think it's a trade-off of how much complexity we need to add in order to handle multiple incompatible versions in a single module\nspring-webflux is the only other module that uses MethodHandle, and in that case adds much less complexity compared to this\nall other modules currently use muzzle to handle incompatible versions", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r511498926", "createdAt": "2020-10-24T18:12:10Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MDQwMA==", "bodyText": "It turns out the situation is much more complicated: I was kinda lazy last time (\ud83d\ude05 ) and did not check in which version which class appears, but I did it right now and it looks like we'd need 4 different instrumentations if we wanted to avoid using MethodHandles at all: 2.0.0 - 2.1.0, 2.1.0 - 2.2.0, 2.2.0 - 2.4.3, 2.4.3 - latest.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r511860400", "createdAt": "2020-10-26T10:32:20Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDg3OQ==", "bodyText": "yikes that's a lot of version dependency!\nif we keep it in a single module, how do we get test coverage of these different versions? maybe we need a way to specify multiple versions for testLatestDeps?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r512194879", "createdAt": "2020-10-26T18:53:29Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDQ1OQ==", "bodyText": "Right now all tests use Couchbase 2.5.0 (common test code in couchbase-testing for both 2.0.0 and 2.6.0 instrumentations) and every query type except the 2.0.0-2.2.0 Query interface is covered. If we wanted to test that we'd probably need to refactor the testing module.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r512570459", "createdAt": "2020-10-27T10:23:09Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyMzk3Mw==", "bodyText": "thx for explanations, approach / testing coverage seems reasonable to me", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1462#discussion_r512823973", "createdAt": "2020-10-27T16:05:08Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/couchbase/v2_0/CouchbaseQueryNormalizer.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.couchbase.v2_0;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.ParseException;\n+import io.opentelemetry.javaagent.instrumentation.api.db.normalizer.SqlNormalizer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CouchbaseQueryNormalizer {\n+  private static final Logger log = LoggerFactory.getLogger(CouchbaseQueryNormalizer.class);\n+\n+  private static final Class<?> QUERY_CLASS;\n+  private static final Class<?> STATEMENT_CLASS;\n+  private static final Class<?> N1QL_QUERY_CLASS;\n+  private static final MethodHandle N1QL_GET_STATEMENT;\n+  private static final Class<?> ANALYTICS_QUERY_CLASS;\n+  private static final MethodHandle ANALYTICS_GET_STATEMENT;\n+\n+  static {\n+    Class<?> queryClass;\n+    try {\n+      queryClass = Class.forName(\"com.couchbase.client.java.query.Query\");\n+    } catch (Exception e) {\n+      queryClass = null;\n+    }\n+    QUERY_CLASS = queryClass;\n+\n+    Class<?> statementClass;\n+    try {\n+      statementClass = Class.forName(\"com.couchbase.client.java.query.Statement\");\n+    } catch (Exception e) {\n+      statementClass = null;\n+    }\n+    STATEMENT_CLASS = statementClass;\n+\n+    Class<?> n1qlQueryClass;\n+    MethodHandle n1qlGetStatement;\n+    try {\n+      n1qlQueryClass = Class.forName(\"com.couchbase.client.java.query.N1qlQuery\");\n+      n1qlGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  n1qlQueryClass,\n+                  \"statement\",\n+                  MethodType.methodType(\n+                      Class.forName(\"com.couchbase.client.java.query.Statement\")));\n+    } catch (Exception e) {\n+      n1qlQueryClass = null;\n+      n1qlGetStatement = null;\n+    }\n+    N1QL_QUERY_CLASS = n1qlQueryClass;\n+    N1QL_GET_STATEMENT = n1qlGetStatement;\n+\n+    Class<?> analyticsQueryClass;\n+    MethodHandle analyticsGetStatement;\n+    try {\n+      analyticsQueryClass = Class.forName(\"com.couchbase.client.java.analytics.AnalyticsQuery\");\n+      analyticsGetStatement =\n+          MethodHandles.publicLookup()\n+              .findVirtual(analyticsQueryClass, \"statement\", MethodType.methodType(String.class));\n+    } catch (Exception e) {\n+      analyticsQueryClass = null;\n+      analyticsGetStatement = null;\n+    }\n+    ANALYTICS_QUERY_CLASS = analyticsQueryClass;\n+    ANALYTICS_GET_STATEMENT = analyticsGetStatement;\n+  }\n+\n+  public static String normalize(Object query) {\n+    if (query instanceof String) {\n+      return normalizeString((String) query);\n+    }\n+    // Couchbase 2.0 uses Query, Couchbase 2.5+ uses Statement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3NDU3NA=="}, "originalCommit": {"oid": "15d131e32ecf8943ae477aeabcf4effe1690c2de"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4734, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}