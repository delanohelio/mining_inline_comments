{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTY5Mzk3", "number": 910, "title": "Add document describing current problem with context propagation", "bodyText": "", "createdAt": "2020-08-06T11:34:14Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910", "merged": true, "mergeCommit": {"oid": "e26801482ccaa36273a90eaed9d901b5ba2af717"}, "closed": true, "closedAt": "2020-08-12T17:33:08Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8OLvbAH2gAyNDYzOTY5Mzk3OjQ3Y2I2M2VhMGY5YzY4MzdjYTAxOTA3MjQ1ZGEyMDE2OTlmNjIzYmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-OJtoAFqTQ2NjA4ODY2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47cb63ea0f9c6837ca01907245da201699f623bc", "committedDate": "2020-08-06T11:33:02Z", "message": "Add document describing current problem with context propagation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjk1ODgw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-462695880", "createdAt": "2020-08-06T16:49:17Z", "commit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo0OToxN1rOG870qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo0OToxN1rOG870qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0Nzg4Mg==", "bodyText": "Add the note about cleaning context on SERVER span creation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r466547882", "createdAt": "2020-08-06T16:49:17Z", "author": {"login": "iNikem"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# The story of context propagation across threads\n+\n+## The need\n+Take a look at the following two pseudo-code snippets (see below for explanations).\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    Future f1 = pool.submit(() -> {\n+        return userRepository.queryShippingAddress(requet)\n+    })\n+    Future f2 = pool.submit(() -> {\n+        return warehouse.currentState(requet)\n+    })\n+    writeResponse(response, f1.get(), f2.get())\n+}\n+```\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    final AsyncContext acontext = request.startAsync();\n+    acontext.start(() -> {\n+            String address = userRepository.queryShippingAddress(requet)\n+            HttpServletResponse response = acontext.getResponse();\n+            writeResponse(response, address)\n+            acontext.complete();\n+   }\n+}\n+```\n+\n+In both cases request processing requires some potentially long operation and application developer\n+wants to do them off the main thread. In the first case this hand-off between request accepting thread\n+and request processing thread happens manually, by submitting work into some thread pool.\n+In the second case it is the framework that handles separate thread pool and passing work to it.\n+\n+In cases like this proper tracing solution should still combine into a single trace all the work\n+required for request processing, irregardless in what thread that work happened. With proper\n+parent-child relationship between span: span representing shipping address query should be the child\n+of the span which denotes accepting HTTP request.\n+\n+## The solution\n+Java auto instrumentation uses an obvious solution to the requirement above: we attach current execution\n+context (represented in the code by `io.grpc.Context`) with each `Runnable`, `Callable` and `ForkJoinTask`.\n+\"Current\" means the context active on the thread which calls `Executor.execute` (and its analogues\n+such as `submit`, `invokeAll` etc) at the moment of that call. Whenever some other thread starts\n+actual execution of that `Runnable` (or `Callable` or `ForkJoinTask`), that context get restored\n+on that thread for the duration of the execution. This can be illustrated by the following pseudo-code:\n+\n+```\n+    var job = () -> {\n+        try(Scope scope = withScopedContext(this.context)) {\n+            return userRepository.queryShippingAddress(requet)\n+        }}\n+    job.context = Context.current()\n+    Future f1 = pool.submit()\n+\n+```\n+\n+## The drawback\n+There are some runtime environments which, simplifying, do the following:\n+```\n+pool.submit(new AcceptRequestRunnable() {\n+    Request req = readRequest()\n+    pool.submit(new ProcessRequestRunnable(req) {\n+        writeResponse(process(req))\n+        pool.submit(new AcceptRequestRunnable() {\n+        ... repeat untill shutdown\n+    })\n+})\n+```\n+\n+This means that mechanism described in the previous section will propagate the execution context\n+of one request processing to a thread accepting some next, unrelated, request.\n+This will result in spans representing the accepting and processing of the second request will join\n+the same trace as those of the first span. This mistakenly correlates unrelated requests and may lead\n+to huge traces being active for hours and hours.\n+\n+In addition this makes some of our tests extremely flaky.\n+\n+## The currently accepted trade-offs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTQzNTE4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-462943518", "createdAt": "2020-08-06T23:30:09Z", "commit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTI3NjA1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-463527605", "createdAt": "2020-08-07T18:43:10Z", "commit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0MzoxMFrOG9kMhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1MToxNFrOG9kahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            required for request processing, irregardless in what thread that work happened. With proper\n          \n          \n            \n            required for request processing, regardless in what thread that work happened. With proper", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r467209349", "createdAt": "2020-08-07T18:43:10Z", "author": {"login": "trask"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# The story of context propagation across threads\n+\n+## The need\n+Take a look at the following two pseudo-code snippets (see below for explanations).\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    Future f1 = pool.submit(() -> {\n+        return userRepository.queryShippingAddress(requet)\n+    })\n+    Future f2 = pool.submit(() -> {\n+        return warehouse.currentState(requet)\n+    })\n+    writeResponse(response, f1.get(), f2.get())\n+}\n+```\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    final AsyncContext acontext = request.startAsync();\n+    acontext.start(() -> {\n+            String address = userRepository.queryShippingAddress(requet)\n+            HttpServletResponse response = acontext.getResponse();\n+            writeResponse(response, address)\n+            acontext.complete();\n+   }\n+}\n+```\n+\n+In both cases request processing requires some potentially long operation and application developer\n+wants to do them off the main thread. In the first case this hand-off between request accepting thread\n+and request processing thread happens manually, by submitting work into some thread pool.\n+In the second case it is the framework that handles separate thread pool and passing work to it.\n+\n+In cases like this proper tracing solution should still combine into a single trace all the work\n+required for request processing, irregardless in what thread that work happened. With proper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMDI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ... repeat untill shutdown\n          \n          \n            \n                    ... repeat until shutdown", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r467210278", "createdAt": "2020-08-07T18:45:14Z", "author": {"login": "trask"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# The story of context propagation across threads\n+\n+## The need\n+Take a look at the following two pseudo-code snippets (see below for explanations).\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    Future f1 = pool.submit(() -> {\n+        return userRepository.queryShippingAddress(requet)\n+    })\n+    Future f2 = pool.submit(() -> {\n+        return warehouse.currentState(requet)\n+    })\n+    writeResponse(response, f1.get(), f2.get())\n+}\n+```\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    final AsyncContext acontext = request.startAsync();\n+    acontext.start(() -> {\n+            String address = userRepository.queryShippingAddress(requet)\n+            HttpServletResponse response = acontext.getResponse();\n+            writeResponse(response, address)\n+            acontext.complete();\n+   }\n+}\n+```\n+\n+In both cases request processing requires some potentially long operation and application developer\n+wants to do them off the main thread. In the first case this hand-off between request accepting thread\n+and request processing thread happens manually, by submitting work into some thread pool.\n+In the second case it is the framework that handles separate thread pool and passing work to it.\n+\n+In cases like this proper tracing solution should still combine into a single trace all the work\n+required for request processing, irregardless in what thread that work happened. With proper\n+parent-child relationship between span: span representing shipping address query should be the child\n+of the span which denotes accepting HTTP request.\n+\n+## The solution\n+Java auto instrumentation uses an obvious solution to the requirement above: we attach current execution\n+context (represented in the code by `io.grpc.Context`) with each `Runnable`, `Callable` and `ForkJoinTask`.\n+\"Current\" means the context active on the thread which calls `Executor.execute` (and its analogues\n+such as `submit`, `invokeAll` etc) at the moment of that call. Whenever some other thread starts\n+actual execution of that `Runnable` (or `Callable` or `ForkJoinTask`), that context get restored\n+on that thread for the duration of the execution. This can be illustrated by the following pseudo-code:\n+\n+```\n+    var job = () -> {\n+        try(Scope scope = withScopedContext(this.context)) {\n+            return userRepository.queryShippingAddress(requet)\n+        }}\n+    job.context = Context.current()\n+    Future f1 = pool.submit()\n+\n+```\n+\n+## The drawback\n+There are some runtime environments which, simplifying, do the following:\n+```\n+pool.submit(new AcceptRequestRunnable() {\n+    Request req = readRequest()\n+    pool.submit(new ProcessRequestRunnable(req) {\n+        writeResponse(process(req))\n+        pool.submit(new AcceptRequestRunnable() {\n+        ... repeat untill shutdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjkzMw==", "bodyText": "the example in this section shows how if we leak to the first pool.submit, then it will keep leaking, but i don't think it answers the question of how we leak to the first pool.submit.\nmaybe the more concrete example you tracked down with tomcat / async dispatch would be more illustrative of the problem?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r467212933", "createdAt": "2020-08-07T18:51:14Z", "author": {"login": "trask"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -0,0 +1,87 @@\n+# The story of context propagation across threads\n+\n+## The need\n+Take a look at the following two pseudo-code snippets (see below for explanations).\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    Future f1 = pool.submit(() -> {\n+        return userRepository.queryShippingAddress(requet)\n+    })\n+    Future f2 = pool.submit(() -> {\n+        return warehouse.currentState(requet)\n+    })\n+    writeResponse(response, f1.get(), f2.get())\n+}\n+```\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    final AsyncContext acontext = request.startAsync();\n+    acontext.start(() -> {\n+            String address = userRepository.queryShippingAddress(requet)\n+            HttpServletResponse response = acontext.getResponse();\n+            writeResponse(response, address)\n+            acontext.complete();\n+   }\n+}\n+```\n+\n+In both cases request processing requires some potentially long operation and application developer\n+wants to do them off the main thread. In the first case this hand-off between request accepting thread\n+and request processing thread happens manually, by submitting work into some thread pool.\n+In the second case it is the framework that handles separate thread pool and passing work to it.\n+\n+In cases like this proper tracing solution should still combine into a single trace all the work\n+required for request processing, irregardless in what thread that work happened. With proper\n+parent-child relationship between span: span representing shipping address query should be the child\n+of the span which denotes accepting HTTP request.\n+\n+## The solution\n+Java auto instrumentation uses an obvious solution to the requirement above: we attach current execution\n+context (represented in the code by `io.grpc.Context`) with each `Runnable`, `Callable` and `ForkJoinTask`.\n+\"Current\" means the context active on the thread which calls `Executor.execute` (and its analogues\n+such as `submit`, `invokeAll` etc) at the moment of that call. Whenever some other thread starts\n+actual execution of that `Runnable` (or `Callable` or `ForkJoinTask`), that context get restored\n+on that thread for the duration of the execution. This can be illustrated by the following pseudo-code:\n+\n+```\n+    var job = () -> {\n+        try(Scope scope = withScopedContext(this.context)) {\n+            return userRepository.queryShippingAddress(requet)\n+        }}\n+    job.context = Context.current()\n+    Future f1 = pool.submit()\n+\n+```\n+\n+## The drawback\n+There are some runtime environments which, simplifying, do the following:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47cb63ea0f9c6837ca01907245da201699f623bc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92e4ab02dbfbc8036c6e07670c4b343d67f6609a", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/92e4ab02dbfbc8036c6e07670c4b343d67f6609a", "committedDate": "2020-08-09T14:23:29Z", "message": "Update docs/contributing/inter-thread-context-propagation.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90689e4ea4c0a9cb99ddc464226dface20d9f9e4", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/90689e4ea4c0a9cb99ddc464226dface20d9f9e4", "committedDate": "2020-08-09T14:23:35Z", "message": "Update docs/contributing/inter-thread-context-propagation.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417aea42d88251bd47394d3f38fecaab54d01446", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/417aea42d88251bd47394d3f38fecaab54d01446", "committedDate": "2020-08-11T06:43:52Z", "message": "More clarifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzkxNDk1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-464791495", "createdAt": "2020-08-11T06:50:05Z", "commit": {"oid": "417aea42d88251bd47394d3f38fecaab54d01446"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo1MDowNVrOG-qlag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo1MDowNVrOG-qlag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MjYwMg==", "bodyText": "At this point Context.current() will have a started span\n\nthis is the part of the example that I'm not following, how does the (thread-bound) Context with the started span escape readRequest()?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r468362602", "createdAt": "2020-08-11T06:50:05Z", "author": {"login": "trask"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -0,0 +1,94 @@\n+# The story of context propagation across threads\n+\n+## The need\n+Take a look at the following two pseudo-code snippets (see below for explanations).\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    Future f1 = pool.submit(() -> {\n+        return userRepository.queryShippingAddress(requet)\n+    })\n+    Future f2 = pool.submit(() -> {\n+        return warehouse.currentState(requet)\n+    })\n+    writeResponse(response, f1.get(), f2.get())\n+}\n+```\n+\n+```\n+Executor pool = Executors.newFixedThreadPool(10)\n+\n+public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    final AsyncContext acontext = request.startAsync();\n+    acontext.start(() -> {\n+            String address = userRepository.queryShippingAddress(requet)\n+            HttpServletResponse response = acontext.getResponse();\n+            writeResponse(response, address)\n+            acontext.complete();\n+   }\n+}\n+```\n+\n+In both cases request processing requires some potentially long operation and application developer\n+wants to do them off the main thread. In the first case this hand-off between request accepting thread\n+and request processing thread happens manually, by submitting work into some thread pool.\n+In the second case it is the framework that handles separate thread pool and passing work to it.\n+\n+In cases like this proper tracing solution should still combine into a single trace all the work\n+required for request processing, regardless in what thread that work happened. With proper\n+parent-child relationship between span: span representing shipping address query should be the child\n+of the span which denotes accepting HTTP request.\n+\n+## The solution\n+Java auto instrumentation uses an obvious solution to the requirement above: we attach current execution\n+context (represented in the code by `io.grpc.Context`) with each `Runnable`, `Callable` and `ForkJoinTask`.\n+\"Current\" means the context active on the thread which calls `Executor.execute` (and its analogues\n+such as `submit`, `invokeAll` etc) at the moment of that call. Whenever some other thread starts\n+actual execution of that `Runnable` (or `Callable` or `ForkJoinTask`), that context get restored\n+on that thread for the duration of the execution. This can be illustrated by the following pseudo-code:\n+\n+```\n+    var job = () -> {\n+        try(Scope scope = withScopedContext(this.context)) {\n+            return userRepository.queryShippingAddress(requet)\n+        }}\n+    job.context = Context.current()\n+    Future f1 = pool.submit()\n+\n+```\n+\n+## The drawback\n+There are some runtime environments which, simplifying, do the following:\n+```\n+pool.submit(new AcceptRequestRunnable() {\n+    Request req = readRequest()\n+    // At this point Context.current() will have a started span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "417aea42d88251bd47394d3f38fecaab54d01446"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1605ddf0d028d909933a8898a45fa44ee268825", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f1605ddf0d028d909933a8898a45fa44ee268825", "committedDate": "2020-08-11T07:18:30Z", "message": "More clarifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODIzOTI3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-464823927", "createdAt": "2020-08-11T07:44:18Z", "commit": {"oid": "f1605ddf0d028d909933a8898a45fa44ee268825"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0NDoxOFrOG-sKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0NDoxOFrOG-sKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4ODQzMg==", "bodyText": "why would we instrument service(req) above, and not instrument writeResponse(process(req)), which would solve the propagation issue for this example? let's add this to agenda for tomorrow's special topic meeting, will be easier to discuss, i have a feeling i'm not expressing my thoughts about this (complicated topic) very well", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#discussion_r468388432", "createdAt": "2020-08-11T07:44:18Z", "author": {"login": "trask"}, "path": "docs/contributing/inter-thread-context-propagation.md", "diffHunk": "@@ -64,15 +64,17 @@ There are some runtime environments which, simplifying, do the following:\n ```\n pool.submit(new AcceptRequestRunnable() {\n     Request req = readRequest()\n-    // At this point Context.current() will have a started span\n-    // recording monitoring data about `req`\n-    pool.submit(new ProcessRequestRunnable(req) {\n-        // The same context from above is active here\n-        writeResponse(process(req))\n-        pool.submit(new AcceptRequestRunnable() {\n-        // The same context from above is propagated here as well\n-        ... repeat until shutdown\n-    })\n+    service(req){ <- This method is instrumented and we start new scope here\n+        // At this point Context.current() will have a started span\n+        // recording monitoring data about `req`\n+        pool.submit(new ProcessRequestRunnable(req) {\n+            // The same context from above is active here\n+            writeResponse(process(req))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1605ddf0d028d909933a8898a45fa44ee268825"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad238351e71652d13edac91bde95025fc2a80fdc", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad238351e71652d13edac91bde95025fc2a80fdc", "committedDate": "2020-08-12T07:39:00Z", "message": "Better example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDg4NjYz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/910#pullrequestreview-466088663", "createdAt": "2020-08-12T16:38:40Z", "commit": {"oid": "ad238351e71652d13edac91bde95025fc2a80fdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2951, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}