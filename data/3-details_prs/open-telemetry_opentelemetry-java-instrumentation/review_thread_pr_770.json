{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NTc1MTYx", "number": 770, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1Mjo0M1rOEUhaYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1MTo0MVrOEWE9SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU0NDAwOnYy", "diffSide": "RIGHT", "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpClientTest.groovy", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1Mjo0M1rOG6xY9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo0Nzo1NFrOHAW37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3OTc5Nw==", "bodyText": "In this PR PlayJavaWEClientTest fails because of invalid header name characters (space) which looks correct to me... The Play tests have a couple other assertions that fail (TimeoutException vs ConnectException) that seem similarly like they should be failing, as if on current master we're not actually running these tests so I need to investigate more what's going on...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r464279797", "createdAt": "2020-08-03T08:52:43Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpClientTest.groovy", "diffHunk": "@@ -42,7 +42,7 @@ import static org.junit.Assume.assumeTrue\n abstract class HttpClientTest extends AgentTestRunner {\n   protected static final BODY_METHODS = [\"POST\", \"PUT\"]\n   protected static final CONNECT_TIMEOUT_MS = 1000\n-  protected static final BASIC_AUTH_KEY = \"custom authorization header\"\n+  protected static final BASIC_AUTH_KEY = \"custom-authorization-header\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5549e2b172643ad27768e6fca49694550931eb3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2NjEzNw==", "bodyText": "as if on current master we're not actually running these tests\n\noh, wow, they were not, before this PR!!!\ncc: @tylerbenson", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r469666137", "createdAt": "2020-08-13T02:51:58Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpClientTest.groovy", "diffHunk": "@@ -42,7 +42,7 @@ import static org.junit.Assume.assumeTrue\n abstract class HttpClientTest extends AgentTestRunner {\n   protected static final BODY_METHODS = [\"POST\", \"PUT\"]\n   protected static final CONNECT_TIMEOUT_MS = 1000\n-  protected static final BASIC_AUTH_KEY = \"custom authorization header\"\n+  protected static final BASIC_AUTH_KEY = \"custom-authorization-header\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3OTc5Nw=="}, "originalCommit": {"oid": "d5549e2b172643ad27768e6fca49694550931eb3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2Mzk4NA==", "bodyText": "@anuraaga could you elaborate... which task isn't failing that should be?  Any idea why they aren't being executed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r470063984", "createdAt": "2020-08-13T16:08:32Z", "author": {"login": "tylerbenson"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpClientTest.groovy", "diffHunk": "@@ -42,7 +42,7 @@ import static org.junit.Assume.assumeTrue\n abstract class HttpClientTest extends AgentTestRunner {\n   protected static final BODY_METHODS = [\"POST\", \"PUT\"]\n   protected static final CONNECT_TIMEOUT_MS = 1000\n-  protected static final BASIC_AUTH_KEY = \"custom authorization header\"\n+  protected static final BASIC_AUTH_KEY = \"custom-authorization-header\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3OTc5Nw=="}, "originalCommit": {"oid": "d5549e2b172643ad27768e6fca49694550931eb3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzNjgxMw==", "bodyText": "I didn't end up digging on the why, but I think it was this test that started failing with this PR\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/874b157fe5fdaad80fd82f3ece0600b6860924e7/instrumentation/play-ws/play-ws-2.1/src/test/groovy/PlayWSClientTest.groovy\nNetty threw a validation error because of the spaces in this header name which seems right to me.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r470136813", "createdAt": "2020-08-13T17:47:54Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpClientTest.groovy", "diffHunk": "@@ -42,7 +42,7 @@ import static org.junit.Assume.assumeTrue\n abstract class HttpClientTest extends AgentTestRunner {\n   protected static final BODY_METHODS = [\"POST\", \"PUT\"]\n   protected static final CONNECT_TIMEOUT_MS = 1000\n-  protected static final BASIC_AUTH_KEY = \"custom authorization header\"\n+  protected static final BASIC_AUTH_KEY = \"custom-authorization-header\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI3OTc5Nw=="}, "originalCommit": {"oid": "d5549e2b172643ad27768e6fca49694550931eb3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzA4MzMwOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/test/HelperInjectionTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjoxMzozOVrOG7Se-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjoxMzozOVrOG7Se-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyMjAxMQ==", "bodyText": "@trask Yup! My biggest concern right now is this test, not sure why it's not passing with JUnit5. The issues with assumeTrue I'll need to file an issue with JUnit team for.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r464822011", "createdAt": "2020-08-04T06:13:39Z", "author": {"login": "anuraaga"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/test/HelperInjectionTest.groovy", "diffHunk": "@@ -33,13 +32,15 @@ import java.util.concurrent.atomic.AtomicReference\n import static io.opentelemetry.auto.test.utils.ClasspathUtils.isClassLoaded\n import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.BOOTSTRAP_CLASSLOADER\n import static io.opentelemetry.auto.util.gc.GCUtils.awaitGC\n+import static org.junit.Assume.assumeTrue\n \n class HelperInjectionTest extends AgentSpecification {\n \n   @Timeout(10)\n   def \"helpers injected to non-delegating classloader\"() {\n     setup:\n     String helperClassName = HelperInjectionTest.getPackage().getName() + '.HelperClass'\n+    assumeTrue(!isClassLoaded(helperClassName, Utils.getAgentClassLoader()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dc18c14f3df6801698f4e1006bc20ac3a8288ec"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzI5MDM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-client-1.9/src/test/groovy/GrizzlyAsyncHttpClientTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoyODoxNlrOG7UbCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNDoyMDowN1rOG75l2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1Mzc3MA==", "bodyText": "When I thought I finally had a good mental model of what's going on in our tests, a grizzly shows up \ud83d\udc3b\nI think one of the reasons a couple of test failed is because with JUnit5, there is no way to intercept class loading\njunit-team/junit5#201\nThis is a fundamental aspect of JUnit5 so presumably even when using the vintage engine, the limitation applies.\nI noticed only two tests in the entire repo actually seem to rely on this behavior though, so I gave them special treatment. At that point, it seemed SpockRunner doesn't actually do anything anymore, so I tried removing it completely. Everything worked, except for this one test.\n@trask if you feel like it, maybe you could look at this test without and with SpockRunner and teach me what function it's serving and why it would only affect this test :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r464853770", "createdAt": "2020-08-04T07:28:16Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grizzly-client-1.9/src/test/groovy/GrizzlyAsyncHttpClientTest.groovy", "diffHunk": "@@ -20,10 +20,13 @@ import com.ning.http.client.Request\n import com.ning.http.client.RequestBuilder\n import com.ning.http.client.Response\n import com.ning.http.client.uri.Uri\n+import io.opentelemetry.auto.test.SpockRunner\n import io.opentelemetry.auto.test.base.HttpClientTest\n+import org.junit.runner.RunWith\n import spock.lang.AutoCleanup\n import spock.lang.Shared\n \n+@RunWith(SpockRunner)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b3540d9271d8f7862c2adf885b55eccf917642"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2Mjc0NQ==", "bodyText": "Yeah, that's a tricky one...\nThere are two things conspiring against that test:\n\nthe test code itself gets instrumented, not only the library under test (GrizzlyAsyncHttpClientTest$AsyncCompletionHandlerMock)\nthe instrumentation that gets injected into that test code uses InstrumentationContext, and tries to put a null value into it\n\nBecause AsyncCompletionHandlerMock is a nested class inside of the test, it appears that class is loaded before we install bytebuddy, which means we can only retransform it, which means InstrumentationContext cannot use the (fast) field-backed provider, and instead has to use the WeakMap.\nThis is fine.\nBut then comes (2) and tries to put a null value into the WeakMap, which is what then causes the NPE.\nMoving AsyncCompletionHandlerMock out into a top-level class resolves the issue.\nI'll also open an issue about the WeakMap implementation not supporting null values, though in general we don't use the the WeakMap when running as -javaagent:..., since in that case we are typically able to do initial transform (not structure limited re-transform) and so we can inject a field into the class and use the field-backed provider.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r465462745", "createdAt": "2020-08-05T04:20:07Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/test/groovy/GrizzlyAsyncHttpClientTest.groovy", "diffHunk": "@@ -20,10 +20,13 @@ import com.ning.http.client.Request\n import com.ning.http.client.RequestBuilder\n import com.ning.http.client.Response\n import com.ning.http.client.uri.Uri\n+import io.opentelemetry.auto.test.SpockRunner\n import io.opentelemetry.auto.test.base.HttpClientTest\n+import org.junit.runner.RunWith\n import spock.lang.AutoCleanup\n import spock.lang.Shared\n \n+@RunWith(SpockRunner)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1Mzc3MA=="}, "originalCommit": {"oid": "c6b3540d9271d8f7862c2adf885b55eccf917642"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg1MTUyOnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1MDozMFrOG9MYTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1Njo0MFrOG9MeXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTE1MA==", "bodyText": "Do we need a milestone or current stable is enough?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466819150", "createdAt": "2020-08-07T04:50:30Z", "author": {"login": "iNikem"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -24,6 +24,7 @@ ext {\n     kotlin            : \"1.3.72\",\n     coroutines        : \"1.3.0\",\n     springboot        : \"2.3.1.RELEASE\",\n+    junit5            : \"5.7.0-M1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDcwMA==", "bodyText": "Yeah this milestone fixed a spock issue", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466820700", "createdAt": "2020-08-07T04:56:40Z", "author": {"login": "anuraaga"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -24,6 +24,7 @@ ext {\n     kotlin            : \"1.3.72\",\n     coroutines        : \"1.3.0\",\n     springboot        : \"2.3.1.RELEASE\",\n+    junit5            : \"5.7.0-M1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTE1MA=="}, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg1MjE2OnYy", "diffSide": "RIGHT", "path": "gradle/java.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1MDo1NlrOG9MYtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1NzoxOFrOG9MfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTI1NA==", "bodyText": "Do we need both old and new engines?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466819254", "createdAt": "2020-08-07T04:50:56Z", "author": {"login": "iNikem"}, "path": "gradle/java.gradle", "diffHunk": "@@ -99,6 +99,12 @@ repositories {\n }\n \n dependencies {\n+  testImplementation enforcedPlatform(group: 'org.junit', name: 'junit-bom', version: versions.junit5)\n+  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'\n+  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'\n+  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'\n+  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDg2OQ==", "bodyText": "We need new engine for any Java tests, we have one PatchLoggerTest. If we get to Spock 2.0 we'll remove vintage at that point.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466820869", "createdAt": "2020-08-07T04:57:18Z", "author": {"login": "anuraaga"}, "path": "gradle/java.gradle", "diffHunk": "@@ -99,6 +99,12 @@ repositories {\n }\n \n dependencies {\n+  testImplementation enforcedPlatform(group: 'org.junit', name: 'junit-bom', version: versions.junit5)\n+  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'\n+  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'\n+  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'\n+  testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTI1NA=="}, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg1MzUyOnYy", "diffSide": "RIGHT", "path": "instrumentation/annotations/annotations.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1MTo0MVrOG9MZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNDo1NzoyN1rOG9MfJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTQ2NQ==", "bodyText": "Why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466819465", "createdAt": "2020-08-07T04:51:41Z", "author": {"login": "iNikem"}, "path": "instrumentation/annotations/annotations.gradle", "diffHunk": "@@ -28,3 +28,17 @@ dependencies {\n     transitive = false\n   }\n }\n+\n+test {\n+  filter {\n+    excludeTestsMatching 'TraceProvidersTest'\n+  }\n+}\n+\n+// Needs a fresh classloader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDkwMA==", "bodyText": "No clue :P Filed an issue", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/770#discussion_r466820900", "createdAt": "2020-08-07T04:57:27Z", "author": {"login": "anuraaga"}, "path": "instrumentation/annotations/annotations.gradle", "diffHunk": "@@ -28,3 +28,17 @@ dependencies {\n     transitive = false\n   }\n }\n+\n+test {\n+  filter {\n+    excludeTestsMatching 'TraceProvidersTest'\n+  }\n+}\n+\n+// Needs a fresh classloader.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxOTQ2NQ=="}, "originalCommit": {"oid": "85b9d10aa1f6ef41b5443897167c820ae172d235"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}