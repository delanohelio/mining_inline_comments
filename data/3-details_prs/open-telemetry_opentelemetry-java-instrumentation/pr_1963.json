{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDA0NTcz", "number": 1963, "title": "Move QueuedThreadPool from executors to jetty ", "bodyText": "This resolves #1912.\nWe can move the NonStandardExecutorInstrumentationModule out of the executors instrumentation and over to the jetty specific instrumentation. This allows the special QueuedThreadPool.dispatch() method to be covered by jetty-specific instrumentation code.\nOne downside is that it does copy some code from the executors instrumentation....but the upside is hopefully improved test coverage around dispatch().  Also note that QueuedThreadPool was left in the large list of executors instrumentation, so that it is also covered as an Executor.", "createdAt": "2020-12-23T19:57:12Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963", "merged": true, "mergeCommit": {"oid": "f14c9b77237f61fa1ba2dcfaefee3e40f2aa7f91"}, "closed": true, "closedAt": "2021-01-06T19:02:40Z", "author": {"login": "breedx-splk"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdozqXFAH2gAyNTQ1MDA0NTczOmFjMTk0MTgyYmYxNTk1OTlhNmRmZGU1NDdhNjcxZGIyZTVkZWVlYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtkQ4fgFqTU2Mjk2NDI4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac194182bf159599a6dfde547a671db2e5deeeb3", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac194182bf159599a6dfde547a671db2e5deeeb3", "committedDate": "2020-12-23T00:05:38Z", "message": "rename to be more specific before introducing new module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1459281cac99cf9d961f418803539de3551faf8", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1459281cac99cf9d961f418803539de3551faf8", "committedDate": "2020-12-23T18:14:01Z", "message": "move module over to jetty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c2b7fe98f024021c5486ec339f1b6ca86e2fdf2", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c2b7fe98f024021c5486ec339f1b6ca86e2fdf2", "committedDate": "2020-12-23T19:52:42Z", "message": "reinstante QueuedThreadPool so that the executor functionality is covered."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d734c1963db0c563f865b77a8a22de56acd4228", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d734c1963db0c563f865b77a8a22de56acd4228", "committedDate": "2020-12-23T19:52:52Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d9029464b97335c110c6a923c00408be913f41", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/13d9029464b97335c110c6a923c00408be913f41", "committedDate": "2020-12-23T21:10:52Z", "message": "afraid of stars."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjc3NzMz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#pullrequestreview-558277733", "createdAt": "2020-12-23T23:58:28Z", "commit": {"oid": "13d9029464b97335c110c6a923c00408be913f41"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzo1ODoyOFrOIK7FWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMDowMToxM1rOIK7HWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDY5OQ==", "bodyText": "I don't think this needs to be a separate InstrumentationModule, and can glob onto the existing jetty InstrumentationModule", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324699", "createdAt": "2020-12-23T23:58:28Z", "author": {"login": "trask"}, "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d9029464b97335c110c6a923c00408be913f41"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDgzNw==", "bodyText": "should be able to leave this out\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public ElementMatcher<ClassLoader> classLoaderOptimization() {\n          \n          \n            \n                  return any();\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324837", "createdAt": "2020-12-23T23:59:08Z", "author": {"login": "trask"}, "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n+\n+  public JettyQueuedThreadPoolModule() {\n+    super(\"executor\", \"non-standard-executor\");\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new JettyQueuedThreadPoolInstrumentation());\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+      return any();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d9029464b97335c110c6a923c00408be913f41"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNDk1Mg==", "bodyText": "I think this is clear enough from typeMatcher\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // org.eclipse.jetty.util.thread.QueuedThreadPool", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548324952", "createdAt": "2020-12-23T23:59:43Z", "author": {"login": "trask"}, "path": "instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.jetty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.any;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class JettyQueuedThreadPoolModule extends InstrumentationModule {\n+\n+  public JettyQueuedThreadPoolModule() {\n+    super(\"executor\", \"non-standard-executor\");\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new JettyQueuedThreadPoolInstrumentation());\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  public static class JettyQueuedThreadPoolInstrumentation implements TypeInstrumentation {\n+\n+    @Override\n+    public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+      return any();\n+    }\n+\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"org.eclipse.jetty.util.thread.QueuedThreadPool\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+\n+      transformers.put(\n+          // org.eclipse.jetty.util.thread.QueuedThreadPool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d9029464b97335c110c6a923c00408be913f41"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyNTIxMQ==", "bodyText": "nice", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#discussion_r548325211", "createdAt": "2020-12-24T00:01:13Z", "author": {"login": "trask"}, "path": "instrumentation/jetty-8.0/javaagent/src/test/groovy/QueuedThreadPoolTest.groovy", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import io.opentelemetry.instrumentation.test.AgentTestRunner\n+import io.opentelemetry.javaagent.instrumentation.jetty.JavaLambdaMaker\n+import io.opentelemetry.sdk.trace.data.SpanData\n+import org.eclipse.jetty.util.thread.QueuedThreadPool\n+\n+import static io.opentelemetry.instrumentation.test.utils.TraceUtils.runUnderTrace\n+\n+class QueuedThreadPoolTest extends AgentTestRunner {\n+\n+  def \"QueueThreadPool 'dispatch' propagates\"() {\n+    setup:\n+    def pool = new QueuedThreadPool()\n+    pool.start()\n+\n+    new Runnable() {\n+      @Override\n+      void run() {\n+        runUnderTrace(\"parent\") {\n+          // this child will have a span\n+          def child1 = new JavaAsyncChild()\n+          // this child won't\n+          def child2 = new JavaAsyncChild(false, false)\n+          pool.dispatch(child1)\n+          pool.dispatch(child2)\n+          child1.waitForCompletion()\n+          child2.waitForCompletion()\n+        }\n+      }\n+    }.run()\n+\n+    TEST_WRITER.waitForTraces(1)\n+    List<SpanData> trace = TEST_WRITER.traces[0]\n+\n+    expect:\n+    TEST_WRITER.traces.size() == 1\n+    trace.size() == 2\n+    trace.get(0).traceId == trace.get(1).traceId\n+    trace.get(0).name == \"parent\"\n+    trace.get(1).name == \"asyncChild\"\n+    trace.get(1).parentSpanId == trace.get(0).spanId\n+\n+    cleanup:\n+    pool.stop()\n+  }\n+\n+  def \"QueueThreadPool 'dispatch' propagates lambda\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d9029464b97335c110c6a923c00408be913f41"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f03c8678ce85116ec5817556e5727343a7589bd7", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f03c8678ce85116ec5817556e5727343a7589bd7", "committedDate": "2021-01-04T17:21:34Z", "message": "Update instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc9bbaf035e12bb8d77c9994e4bdb61e8986e5ac", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc9bbaf035e12bb8d77c9994e4bdb61e8986e5ac", "committedDate": "2021-01-04T17:22:04Z", "message": "Update instrumentation/jetty-8.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/jetty/JettyQueuedThreadPoolModule.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f6d580f7ac609613f84c9668731b85fb3b5ced", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/94f6d580f7ac609613f84c9668731b85fb3b5ced", "committedDate": "2021-01-06T17:41:45Z", "message": "move JettyQueuedThreadPoolModule into the other module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe273f1dd15e6bf371266a4bf8893bba9b94a44", "author": {"user": {"login": "breedx-splk", "name": "jason plumb"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfe273f1dd15e6bf371266a4bf8893bba9b94a44", "committedDate": "2021-01-06T17:52:23Z", "message": "rename module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTY0Mjgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1963#pullrequestreview-562964282", "createdAt": "2021-01-06T18:58:51Z", "commit": {"oid": "cfe273f1dd15e6bf371266a4bf8893bba9b94a44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2035, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}