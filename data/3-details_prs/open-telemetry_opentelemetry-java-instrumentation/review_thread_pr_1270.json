{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNzQ3NjA2", "number": 1270, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNDozOVrOEn3Sbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0Nzo1N1rOEoTF-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjM1NzU5OnYy", "diffSide": "RIGHT", "path": "buildSrc/muzzle.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNDozOVrOHYpV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNDozOVrOHYpV3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNTIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            on the application classpath. The Muzzle can prevent loading an instrumentation\n          \n          \n            \n            on the application classpath. The Muzzle will prevent loading an instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495605212", "createdAt": "2020-09-27T19:14:39Z", "author": {"login": "trask"}, "path": "buildSrc/muzzle.md", "diffHunk": "@@ -0,0 +1,27 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle can prevent loading an instrumentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434b0d2c03240bd525af615073ae719f185f5045"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjM1ODM3OnYy", "diffSide": "RIGHT", "path": "buildSrc/muzzle.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNToyMlrOHYpWLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNToyMlrOHYpWLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNTI5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            At build time the Muzzle gradle plugin generates matcher for 3rd party APIs used by the agent.\n          \n          \n            \n            At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495605295", "createdAt": "2020-09-27T19:15:22Z", "author": {"login": "trask"}, "path": "buildSrc/muzzle.md", "diffHunk": "@@ -0,0 +1,27 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle can prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates matcher for 3rd party APIs used by the agent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434b0d2c03240bd525af615073ae719f185f5045"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjM1OTI3OnYy", "diffSide": "RIGHT", "path": "buildSrc/muzzle.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNjoyMFrOHYpWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxOToxNjoyMFrOHYpWlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNTM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and symbols at the application classpath. Before inspecting the classpath\n          \n          \n            \n            and symbols in the application class loader. Before inspecting the class loader", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495605399", "createdAt": "2020-09-27T19:16:20Z", "author": {"login": "trask"}, "path": "buildSrc/muzzle.md", "diffHunk": "@@ -0,0 +1,27 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle can prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols at the application classpath. Before inspecting the classpath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434b0d2c03240bd525af615073ae719f185f5045"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzE3MDAzOnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNjozNzo0OFrOHYwMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzowMzowOFrOHZ4VgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg==", "bodyText": "Is this correct? In this location there is MuzzleGradlePlugin but it more seems like ByteBuddy plugin as it implements bytebuddy plugin interface.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495717382", "createdAt": "2020-09-28T06:37:48Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5ODQ3OQ==", "bodyText": "cc) @tylerbenson", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495998479", "createdAt": "2020-09-28T14:50:19Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNzU5Nw==", "bodyText": "The ByteBuddy plugin is what does the source graph traversal to find all the references for purposes of matching at run time as well as build time in the muzzle task.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496007597", "createdAt": "2020-09-28T14:58:18Z", "author": {"login": "tylerbenson"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMjkxNg==", "bodyText": "Yeah, it's a ByteBuddy plugin. The name's a bit misleading and it should be changed in the future -- though to be honest I don't have any great idea right now.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496032916", "createdAt": "2020-09-28T15:20:13Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0NjI2Ng==", "bodyText": "We could rename it to MuzzleByteBuddyPlugin", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496446266", "createdAt": "2020-09-29T06:28:27Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5OTQ1Nw==", "bodyText": "I created #1288 for renaming it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496899457", "createdAt": "2020-09-29T17:03:08Z", "author": {"login": "trask"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin\n+* `agent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle` - Muzzle ByteBuddy plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzM4Mg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQxNDM5OnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzo1Nzo1NVrOHYydHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoyNjo0N1rOHY3osw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDUyNg==", "bodyText": "Do you mean classLoaderMatcher?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495754526", "createdAt": "2020-09-28T07:57:55Z", "author": {"login": "iNikem"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzOTQxMQ==", "bodyText": "No I meant this \n  \n    \n      opentelemetry-java-instrumentation/instrumentation/google-http-client-1.19/src/main/java/io/opentelemetry/instrumentation/auto/googlehttpclient/GoogleHttpClientInstrumentation.java\n    \n    \n         Line 57\n      in\n      5d2ae07\n    \n    \n    \n    \n\n        \n          \n           return named(\"com.google.api.client.http.HttpRequest\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495839411", "createdAt": "2020-09-28T10:26:47Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc1NDUyNg=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDk4ODQyOnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0NzoyNFrOHZBNaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1NjoxMVrOHZBv7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NjI2NA==", "bodyText": "This part of muzzle isn't really documented above.  This plugin is responsible for downloading the range of libraries from Maven Central and verifying expected compatibility.  If a new incompatible version is published, this is what will break the build.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495996264", "createdAt": "2020-09-28T14:47:24Z", "author": {"login": "tylerbenson"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5ODI4MA==", "bodyText": "Is there also a task to run it explicitly?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r495998280", "createdAt": "2020-09-28T14:50:06Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NjI2NA=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNTEwMw==", "bodyText": "Yeah, this is what actually runs when you call the muzzle task.\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/.circleci/config.yml#L132\nThat can be called at the top level, or for an individual project.\nAs an optimization, these tasks are only added to gradle if muzzle is explicitly listed as a task, otherwise it slows down the config stage substantially.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496005103", "createdAt": "2020-09-28T14:56:11Z", "author": {"login": "tylerbenson"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.\n+\n+```bash\n+./gradlew :instrumentation:google-http-client-1.19:printReferences\n+```\n+\n+## Muzzle location\n+\n+* `buildSrc` - Muzzle Gradle plugin", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5NjI2NA=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI0MTQyOnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyMTo1OVrOHZDkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjozMjo1OVrOHZcy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzNDk2MQ==", "bodyText": "It prints all references that are collected & later validated by muzzle -- not only the 3rd party ones.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496034961", "createdAt": "2020-09-28T15:21:59Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjM0Nw==", "bodyText": "I'm hoping we can optimize it to only check 3rd party ones", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496296347", "createdAt": "2020-09-28T23:49:08Z", "author": {"login": "trask"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzNDk2MQ=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0ODIxMw==", "bodyText": "ack, changing it to all APIs for now.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496448213", "createdAt": "2020-09-29T06:32:59Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.\n+\n+## Muzzle gradle plugin\n+\n+The `printReferences` task prints 3rd party API references in a given module.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzNDk2MQ=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTI1NzI2OnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyNDoxMVrOHZDulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjozMzo1NlrOHZc0PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzNzUyNA==", "bodyText": "Muzzle actually collects symbols from advice classes -- values of the map returned by transformers() method. Muzzle by itself calls neither classLoaderMatcher() nor typeMatcher().", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496037524", "createdAt": "2020-09-28T15:24:11Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0ODU3Mg==", "bodyText": "@trask mentioned that muzzle first checks API referenced in typeMatcher() for optimization purposes", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496448572", "createdAt": "2020-09-29T06:33:56Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzNzUyNA=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTMyNTkxOnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozOToyMlrOHZEZUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyMjo0NVrOHZ2owQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0ODQ2Ng==", "bodyText": "Can you add a sentence explaining where do the symbols come from?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n          \n          \n            \n            The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n          \n          \n            \n            At build time, for each instrumentation the Muzzle ByteBuddy plugin collects symbols referring to both internal and 3rd party APIs used by the currently processed instrumentation. The reference collection process starts from advice classes - values of the map returned by the `Instrumenter.Default#transformers()` method.\n          \n          \n            \n            All those references are then used to create a `ReferenceMatcher` instance.\n          \n          \n            \n            The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496048466", "createdAt": "2020-09-28T15:39:22Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5MjcxNA==", "bodyText": "this is nice, i'm not sure about \"internal\" APIs though, we do currently, but hopefully we won't after #1233?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496292714", "createdAt": "2020-09-28T23:36:56Z", "author": {"login": "trask"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0ODQ2Ng=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MTYxNw==", "bodyText": "Hopefully we'll get rid of at least most of these", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496871617", "createdAt": "2020-09-29T16:22:45Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0ODQ2Ng=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjkxMzIwOnYy", "diffSide": "RIGHT", "path": "docs/contributing/muzzle.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMzo0Nzo1N1rOHZTgWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDowOFrOHZ2uTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjAyNw==", "bodyText": "another suggestion \ud83d\ude04\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and symbols in the application class loader. Before inspecting the class loader\n          \n          \n            \n            the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n          \n          \n            \n            as a performance optimization. If the symbols do not match the instrumentation\n          \n          \n            \n            is not loaded.\n          \n          \n            \n            and symbols in the application class loader. If the symbols do not match the instrumentation is not loaded.\n          \n          \n            \n            Because the muzzle matcher is expensive, it is only performed after a match has been made by the `classLoaderMatcher()` and `typeMatcher()` matchers.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496296027", "createdAt": "2020-09-28T23:47:57Z", "author": {"login": "trask"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1MDAwMw==", "bodyText": "+1. The match for classLoaderMatcher() and typeMatcher() is done by ByteBuddy right?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496450003", "createdAt": "2020-09-29T06:37:07Z", "author": {"login": "pavolloffay"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjAyNw=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MzAzNg==", "bodyText": "Yeah, it's done a few steps before the MuzzleMatcher runs.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1270#discussion_r496873036", "createdAt": "2020-09-29T16:24:08Z", "author": {"login": "mateuszrzeszutek"}, "path": "docs/contributing/muzzle.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Muzzle\n+\n+Muzzle is a feature of the Java agent that ensures API compatibility\n+between libraries/symbols on the application classpath and APIs of instrumented\n+3rd party libraries used by the Agent. In other words the Muzzle ensures\n+that the API symbols used by the Agent are compatible with API symbols\n+on the application classpath. The Muzzle will prevent loading an instrumentation\n+if the APIs do not match.\n+\n+## How does it work\n+\n+At build time the Muzzle gradle plugin generates a matcher for 3rd party APIs used by the agent.\n+The matcher is stored in the instrumentation class in method `ReferenceMatcher getInstrumentationMuzzle()`.\n+\n+At runtime the Muzzle checks API compatibility between symbols used by the Agent\n+and symbols in the application class loader. Before inspecting the class loader\n+the Muzzle plugin checks symbols defined in `SomeInstrumentation.typeMatcher()`\n+as a performance optimization. If the symbols do not match the instrumentation\n+is not loaded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI5NjAyNw=="}, "originalCommit": {"oid": "264109fd69c3adea808dc35cdf596b6d30f0b503"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4976, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}