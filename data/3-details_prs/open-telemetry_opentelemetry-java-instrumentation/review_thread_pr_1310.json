{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDM0MDMz", "number": 1310, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyODoyMlrOErTl9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDozOFrOErTpdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ1MjM3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyODoyMlrOHeAU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODo1OTozNVrOHeUuDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNDY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final PREVIOUS_CONFIG = ConfigUtils.updateConfig {\n          \n          \n            \n                it.setProperty(\n          \n          \n            \n                  \"otel.endpoint.peer.service.mapping\",\n          \n          \n            \n                  \"1.2.3.4=catservice,dogs.com=dogsservice,opentelemetry.io=specservice\")\n          \n          \n            \n              }\n          \n          \n            \n              static final PREVIOUS_CONFIG = ConfigUtils.updateConfig {\n          \n          \n            \n                it.setProperty(\n          \n          \n            \n                  \"otel.endpoint.peer.service.mapping\",\n          \n          \n            \n                  \"dogs.com=dogsservice\")\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501224658", "createdAt": "2020-10-07T18:28:22Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "diffHunk": "@@ -5,28 +5,29 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import static io.opentelemetry.auto.test.utils.ConfigUtils.updateConfig\n-\n+import io.opentelemetry.auto.test.utils.ConfigUtils\n import io.opentelemetry.context.propagation.TextMapPropagator\n import io.opentelemetry.instrumentation.api.decorator.HttpStatusConverter\n import io.opentelemetry.trace.Span\n import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n class HttpClientTracerTest extends BaseTracerTest {\n-  static {\n-    updateConfig {\n-      System.setProperty(\n-        \"otel.endpoint.peer.service.mapping\",\n-        \"myhost-mapped=reservation-service\")\n-    }\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfig {\n+    it.setProperty(\n+      \"otel.endpoint.peer.service.mapping\",\n+      \"1.2.3.4=catservice,dogs.com=dogsservice,opentelemetry.io=specservice\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1ODc5Nw==", "bodyText": "I can only remove specservice, catservice is used by e.g. NetPeerUtilsTest. Will be fixed after next PR (ConfigValue!)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501558797", "createdAt": "2020-10-08T08:59:35Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "diffHunk": "@@ -5,28 +5,29 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import static io.opentelemetry.auto.test.utils.ConfigUtils.updateConfig\n-\n+import io.opentelemetry.auto.test.utils.ConfigUtils\n import io.opentelemetry.context.propagation.TextMapPropagator\n import io.opentelemetry.instrumentation.api.decorator.HttpStatusConverter\n import io.opentelemetry.trace.Span\n import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n class HttpClientTracerTest extends BaseTracerTest {\n-  static {\n-    updateConfig {\n-      System.setProperty(\n-        \"otel.endpoint.peer.service.mapping\",\n-        \"myhost-mapped=reservation-service\")\n-    }\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfig {\n+    it.setProperty(\n+      \"otel.endpoint.peer.service.mapping\",\n+      \"1.2.3.4=catservice,dogs.com=dogsservice,opentelemetry.io=specservice\")\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNDY1OA=="}, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ1ODQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyOTo1NlrOHeAYqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODoyOTo1NlrOHeAYqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTY0MA==", "bodyText": "Is this needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n          \n          \n            \n                it.setProperty(\"otel.trace.classes.exclude\",\n          \n          \n            \n                  \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n          \n          \n            \n                    + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501225640", "createdAt": "2020-10-07T18:29:56Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -34,6 +35,11 @@ import org.hornetq.jms.client.HornetQTextMessage\n import spock.lang.Shared\n \n class JMS2Test extends AgentTestRunner {\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n+    it.setProperty(\"otel.trace.classes.exclude\",\n+      \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n+        + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ2MDE0OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringListenerJMS2Test.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDoyMVrOHeAZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTowMDoxNlrOHeUv0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTg5NQ==", "bodyText": "is this needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n          \n          \n            \n                it.setProperty(\"otel.trace.classes.exclude\",\n          \n          \n            \n                  \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n          \n          \n            \n                    + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              def cleanupSpec() {\n          \n          \n            \n                ConfigUtils.setConfig(PREVIOUS_CONFIG)\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501225895", "createdAt": "2020-10-07T18:30:21Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringListenerJMS2Test.groovy", "diffHunk": "@@ -15,6 +16,15 @@ import org.springframework.jms.core.JmsTemplate\n import org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter\n \n class SpringListenerJMS2Test extends AgentTestRunner {\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n+    it.setProperty(\"otel.trace.classes.exclude\",\n+      \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n+        + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n+  }\n+\n+  def cleanupSpec() {\n+    ConfigUtils.setConfig(PREVIOUS_CONFIG)\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1OTI0OA==", "bodyText": "Nope, not needed anymore.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501559248", "createdAt": "2020-10-08T09:00:16Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringListenerJMS2Test.groovy", "diffHunk": "@@ -15,6 +16,15 @@ import org.springframework.jms.core.JmsTemplate\n import org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter\n \n class SpringListenerJMS2Test extends AgentTestRunner {\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n+    it.setProperty(\"otel.trace.classes.exclude\",\n+      \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n+        + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n+  }\n+\n+  def cleanupSpec() {\n+    ConfigUtils.setConfig(PREVIOUS_CONFIG)\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNTg5NQ=="}, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODQ2MTM1OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringTemplateJMS2Test.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDozOFrOHeAaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODozMDozOFrOHeAaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIyNjA2Nw==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n          \n          \n            \n                it.setProperty(\"otel.trace.classes.exclude\",\n          \n          \n            \n                  \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n          \n          \n            \n                    + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1310#discussion_r501226067", "createdAt": "2020-10-07T18:30:38Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringTemplateJMS2Test.groovy", "diffHunk": "@@ -28,6 +29,11 @@ import org.springframework.jms.core.JmsTemplate\n import spock.lang.Shared\n \n class SpringTemplateJMS2Test extends AgentTestRunner {\n+  static final PREVIOUS_CONFIG = ConfigUtils.updateConfigAndResetInstrumentation {\n+    it.setProperty(\"otel.trace.classes.exclude\",\n+      \"org.springframework.jms.config.JmsListenerEndpointRegistry\\$AggregatingCallback,\"\n+        + \"org.springframework.context.support.DefaultLifecycleProcessor\\$1\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3bacae75e0dddf5601bc0c39c66a7167a718e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4792, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}