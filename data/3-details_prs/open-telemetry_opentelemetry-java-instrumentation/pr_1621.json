{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MjY0NDM0", "number": 1621, "title": "Add example of creating custom vendor distribution", "bodyText": "", "createdAt": "2020-11-11T15:16:06Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621", "merged": true, "mergeCommit": {"oid": "3185abac10698cfa1721a01cbe83aabb9bfec95a"}, "closed": true, "closedAt": "2020-11-21T19:00:54Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbfXLjAH2gAyNTE5MjY0NDM0OjcxN2I1ZDk2YmFkMjc1NjhhMDAyNDQzOTY5YTNkMjYyMWYwMGZkMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeXL1DAH2gAyNTE5MjY0NDM0OjJhN2VjMjMyYjhmNDY0NzlkNDA3YjJkMWVlM2NlZGM5YzgwZmY3NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/717b5d96bad27568a002443969a3d2621f00fd01", "committedDate": "2020-11-11T15:05:34Z", "message": "Add example of creating custom vendor distribution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTQxNzgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#pullrequestreview-528541782", "createdAt": "2020-11-11T21:18:39Z", "commit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToxODozOVrOHxepog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjowNzo0OVrOHxgDoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0NDQ1MA==", "bodyText": "why different version property for javaagent-spi? or is this just gradle best practice?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521644450", "createdAt": "2020-11-11T21:18:39Z", "author": {"login": "trask"}, "path": "examples/distro/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+group 'io.opentelemetry.example'\n+version '1.0-SNAPSHOT'\n+\n+subprojects {\n+    version = rootProject.version\n+\n+    apply plugin: \"java\"\n+\n+    ext {\n+        versions = [\n+                opentelemetry            : \"0.10.0\",\n+                opentelemetryJavaagent   : \"0.10.0\",\n+                opentelemetryJavaagentSpi: \"0.10.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0NjM3MA==", "bodyText": "this isn't needed anymore since grpc context gone in 0.10.0\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                    // relocate OpenTelemetry API dependency\n          \n          \n            \n                    relocate(\"io.grpc\", \"io.opentelemetry.javaagent.shaded.io.grpc\")", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521646370", "createdAt": "2020-11-11T21:22:43Z", "author": {"login": "trask"}, "path": "examples/distro/custom/build.gradle", "diffHunk": "@@ -0,0 +1,40 @@\n+plugins {\n+    id \"java\"\n+    id(\"com.github.johnrengelman.shadow\") version \"6.0.0\"\n+}\n+\n+dependencies {\n+    implementation(\"io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}\")\n+    implementation(\"io.opentelemetry.javaagent:opentelemetry-javaagent-spi:${versions.opentelemetryJavaagentSpi}\")\n+    implementation(\"io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagent}\")\n+\n+    implementation deps.bytebuddy\n+    implementation deps.bytebuddyagent\n+    annotationProcessor deps.autoservice\n+    implementation deps.autoservice\n+\n+    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'\n+}\n+\n+tasks {\n+    shadowJar {\n+        mergeServiceFiles()\n+\n+        exclude(\"**/module-info.class\")\n+\n+        // Prevents conflict with other SLF4J instances. Important for premain.\n+        relocate(\"org.slf4j\", \"io.opentelemetry.javaagent.slf4j\")\n+        // rewrite dependencies calling Logger.getLogger\n+        relocate(\"java.util.logging.Logger\", \"io.opentelemetry.javaagent.bootstrap.PatchLogger\")\n+\n+        // prevents conflict with library instrumentation\n+        relocate(\"io.opentelemetry.instrumentation.api\", \"io.opentelemetry.javaagent.shaded.instrumentation.api\")\n+\n+        // relocate OpenTelemetry API\n+        relocate(\"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\")\n+        relocate(\"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\")\n+\n+        // relocate OpenTelemetry API dependency\n+        relocate(\"io.grpc\", \"io.opentelemetry.javaagent.shaded.io.grpc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0Njc3MA==", "bodyText": "just to return valid span id\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return String.valueOf(spanId.incrementAndGet());\n          \n          \n            \n                return String.format(\"%016d\", spanId.incrementAndGet());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521646770", "createdAt": "2020-11-11T21:23:42Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Custom {@link IdGenerator} which provides span and trace ids.\n+ *\n+ * @see io.opentelemetry.sdk.trace.TracerSdkProvider\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoIdGenerator implements IdGenerator {\n+  private static final AtomicLong traceId = new AtomicLong(0);\n+  private static final AtomicLong spanId = new AtomicLong(0);\n+\n+  @Override\n+  public String generateSpanId() {\n+    return String.valueOf(spanId.incrementAndGet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0ODUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                return \"DemoSampler\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521648527", "createdAt": "2020-11-11T21:27:12Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoSampler.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.api.common.ReadableAttributes;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.samplers.Sampler;\n+import io.opentelemetry.sdk.trace.samplers.SamplingResult;\n+import java.util.List;\n+\n+/**\n+ * This demo sampler filters out all internal spans whose name contains string \"greeting\".\n+ *\n+ * See <a href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/sdk.md#sampling\">\n+ * OpenTelemetry Specification</a> for more information about span sampling.\n+ *\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoSampler implements Sampler {\n+  @Override\n+  public SamplingResult shouldSample(Context parentContext, String traceId, String name, Span.Kind spanKind, ReadableAttributes attributes, List<SpanData.Link> parentLinks) {\n+    if (spanKind == Span.Kind.INTERNAL && name.contains(\"greeting\")) {\n+      return SamplingResult.create(SamplingResult.Decision.DROP);\n+    } else {\n+      return SamplingResult.create(SamplingResult.Decision.RECORD_AND_SAMPLE);\n+    }\n+  }\n+\n+  @Override\n+  public String getDescription() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0OTQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Just read the {@link #configure(TracerSdkManagement)} method.\n          \n          \n            \n             * See the {@link #configure(TracerSdkManagement)} method below.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521649485", "createdAt": "2020-11-11T21:29:20Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoTracerCustomizer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.javaagent.spi.TracerCustomizer;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.TracerSdkManagement;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+\n+/**\n+ * This is the main entry point for the majority of Instrumentation Agent's customizations.\n+ * It allows for configuring various aspects of OpenTelemetrySdk.\n+ * Just read the {@link #configure(TracerSdkManagement)} method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1MjcxMw==", "bodyText": "I don't think muzzle will like this since the Advice class itself lives in AgentClassLoader, maybe add helper class and helperClassNames() since that's a common need", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521652713", "createdAt": "2020-11-11T21:36:23Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/instrumentation/DemoServlet3Instrumentation.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package io.opentelemetry.demo.instrumentation;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static io.opentelemetry.javaagent.tooling.matcher.NameMatchers.namedOneOf;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * This is a demo instrumentation which hooks into servlet invocation and modifies the http response.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class DemoServlet3Instrumentation extends Instrumenter.Default {\n+  public DemoServlet3Instrumentation() {\n+    super(\"servlet-demo\", \"servlet-3\");\n+  }\n+\n+  /*\n+  We want this instrumentation to be applied after the standard servlet instrumentation.\n+  The latter creates a server span around http request.\n+  This instrumentation needs access to that server span.\n+   */\n+  @Override\n+  public int getOrder() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"javax.servlet.http.HttpServlet\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(\n+        namedOneOf(\"javax.servlet.FilterChain\", \"javax.servlet.http.HttpServlet\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        namedOneOf(\"doFilter\", \"service\")\n+            .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+            .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")))\n+            .and(isPublic()),\n+        DemoServlet3Instrumentation.class.getName() + \"$DemoServlet3Advice\");\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  public static class DemoServlet3Advice {\n+\n+    public static final String X_SERVER_ID = \"X-server-id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDEwMw==", "bodyText": "spotlessApply?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521654103", "createdAt": "2020-11-11T21:38:49Z", "author": {"login": "trask"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/OkHttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Splunk Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDU4Mg==", "bodyText": "com.example.javaagent.smoketest?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521654582", "createdAt": "2020-11-11T21:39:37Z", "author": {"login": "trask"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/OkHttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NTE0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .withEnv(\"OTEL_INTEGRATION_GEODE_ENABLED\",\"false\")", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521655146", "createdAt": "2020-11-11T21:40:47Z", "author": {"login": "trask"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SmokeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.util.JsonFormat;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.ResponseBody;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.MountableFile;\n+\n+abstract class SmokeTest {\n+  private static final Logger logger = LoggerFactory.getLogger(SmokeTest.class);\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  protected static OkHttpClient client = OkHttpUtils.client();\n+\n+  private static final Network network = Network.newNetwork();\n+  protected static final String agentPath =\n+      System.getProperty(\"io.opentelemetry.smoketest.agent.shadowJar.path\");\n+\n+  protected abstract String getTargetImage(int jdk);\n+\n+  /**\n+   * Subclasses can override this method to customise target application's environment\n+   */\n+  protected Map<String, String> getExtraEnv() {\n+    return Collections.emptyMap();\n+  }\n+\n+  private static GenericContainer backend;\n+  private static GenericContainer collector;\n+\n+  @BeforeAll\n+  static void setupSpec() {\n+    backend =\n+        new GenericContainer<>(\n+            \"open-telemetry-docker-dev.bintray.io/java/smoke-fake-backend:latest\")\n+            .withExposedPorts(8080)\n+            .waitingFor(Wait.forHttp(\"/health\").forPort(8080))\n+            .withNetwork(network)\n+            .withNetworkAliases(\"backend\")\n+            .withLogConsumer(new Slf4jLogConsumer(logger));\n+    backend.start();\n+\n+    collector =\n+        new GenericContainer<>(\"otel/opentelemetry-collector-dev:latest\")\n+            .dependsOn(backend)\n+            .withNetwork(network)\n+            .withNetworkAliases(\"collector\")\n+            .withLogConsumer(new Slf4jLogConsumer(logger))\n+            .withCopyFileToContainer(\n+                MountableFile.forClasspathResource(\"/otel.yaml\"), \"/etc/otel.yaml\")\n+            .withCommand(\"--config /etc/otel.yaml\");\n+    collector.start();\n+  }\n+\n+  protected GenericContainer target;\n+\n+  void startTarget(int jdk) {\n+    target =\n+        new GenericContainer<>(getTargetImage(jdk))\n+            .withExposedPorts(8080)\n+            .withNetwork(network)\n+            .withLogConsumer(new Slf4jLogConsumer(logger))\n+            .withCopyFileToContainer(\n+                MountableFile.forHostPath(agentPath), \"/opentelemetry-javaagent.jar\")\n+            .withEnv(\"JAVA_TOOL_OPTIONS\", \"-javaagent:/opentelemetry-javaagent.jar\")\n+            .withEnv(\"OTEL_BSP_MAX_EXPORT_BATCH\", \"1\")\n+            .withEnv(\"OTEL_BSP_SCHEDULE_DELAY\", \"10\")\n+            .withEnv(\"OTEL_INTEGRATION_GEODE_ENABLED\",\"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjAxOQ==", "bodyText": "Very nice test of so many things \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521656019", "createdAt": "2020-11-11T21:42:46Z", "author": {"login": "trask"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SpringBootSmokeTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class SpringBootSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    return \"open-telemetry-docker-dev.bintray.io/java/smoke-springboot-jdk\" + jdk + \":latest\";\n+  }\n+\n+  @Test\n+  public void springBootSmokeTestOnJDK() throws IOException, InterruptedException {\n+    startTarget(11);\n+    String url = String.format(\"http://localhost:%d/greeting\", target.getMappedPort(8080));\n+    Request request = new Request.Builder().url(url).get().build();\n+\n+    String currentAgentVersion =\n+        (String) new JarFile(agentPath)\n+            .getManifest()\n+            .getMainAttributes()\n+            .get(Attributes.Name.IMPLEMENTATION_VERSION);\n+\n+    Response response = client.newCall(request).execute();\n+    System.out.println(response.headers().toString());\n+\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces();\n+\n+    Assertions.assertNotNull(response.header(\"X-server-id\"));\n+    Assertions.assertEquals(1, response.headers(\"X-server-id\").size());\n+    Assertions.assertTrue(TraceId.isValid(response.header(\"X-server-id\")));\n+    Assertions.assertEquals(response.body().string(), \"Hi!\");\n+    Assertions.assertEquals(1, countSpansByName(traces, \"/greeting\"));\n+    Assertions.assertEquals(0, countSpansByName(traces, \"WebController.greeting\"));\n+    Assertions.assertEquals(1, countSpansByName(traces, \"WebController.withSpan\"));\n+    Assertions.assertEquals(2, countSpansByAttributeValue(traces, \"custom\", \"demo\"));\n+    Assertions.assertEquals(1, countResourcesByValue(traces, \"telemetry.auto.version\", currentAgentVersion));\n+    Assertions.assertEquals(1, countResourcesByValue(traces, \"custom.resource\", \"demo\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NjQzOA==", "bodyText": "can we publish artifact with our SmokeTest and reuse this and OkHttpUtils? (not in this PR)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521656438", "createdAt": "2020-11-11T21:43:48Z", "author": {"login": "trask"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/SmokeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright Splunk Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.splunk.opentelemetry;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.util.JsonFormat;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import okhttp3.ResponseBody;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.utility.MountableFile;\n+\n+abstract class SmokeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NTA5NQ==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return String.valueOf(traceId.incrementAndGet());\n          \n          \n            \n                return String.format(\"%032d\", spanId.incrementAndGet());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521665095", "createdAt": "2020-11-11T22:02:14Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;\n+\n+import io.opentelemetry.sdk.trace.IdGenerator;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Custom {@link IdGenerator} which provides span and trace ids.\n+ *\n+ * @see io.opentelemetry.sdk.trace.TracerSdkProvider\n+ * @see DemoTracerCustomizer\n+ */\n+public class DemoIdGenerator implements IdGenerator {\n+  private static final AtomicLong traceId = new AtomicLong(0);\n+  private static final AtomicLong spanId = new AtomicLong(0);\n+\n+  @Override\n+  public String generateSpanId() {\n+    return String.valueOf(spanId.incrementAndGet());\n+  }\n+\n+  @Override\n+  public String generateTraceId() {\n+    return String.valueOf(traceId.incrementAndGet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzQ4OA==", "bodyText": "what do u think of putting everything under com.example.javaagent instead of io.opentelemetry.demo?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521667488", "createdAt": "2020-11-11T22:07:49Z", "author": {"login": "trask"}, "path": "examples/distro/custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package io.opentelemetry.demo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODE3MDky", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#pullrequestreview-528817092", "createdAt": "2020-11-12T07:44:07Z", "commit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0NDowN1rOHxt8pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzo0ODoxNVrOHxuEeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTA3OQ==", "bodyText": "This might be too much personal preference, but I wonder if it's worth demonstrating a versioning pattern where the distro name is suffixed? e.g., 1.0.0-aws.1, 1.0.0-demo.1. It's a free way of getting the telemetry.sdk stuff to identify the distro and might be nice for vendors (I'm not doing it yet but am planning on it).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521895079", "createdAt": "2020-11-12T07:44:07Z", "author": {"login": "anuraaga"}, "path": "examples/distro/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+group 'io.opentelemetry.example'\n+version '1.0-SNAPSHOT'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTQyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            opentelemetryJavaagent   : \"0.10.0\",\n          \n          \n            \n                            opentelemetryJavaagentSpi: \"0.10.0\",\n          \n          \n            \n                            opentelemetryJavaagent   : \"0.10.1\",\n          \n          \n            \n                            opentelemetryJavaagentSpi: \"0.10.1\",", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521895425", "createdAt": "2020-11-12T07:44:48Z", "author": {"login": "anuraaga"}, "path": "examples/distro/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+group 'io.opentelemetry.example'\n+version '1.0-SNAPSHOT'\n+\n+subprojects {\n+    version = rootProject.version\n+\n+    apply plugin: \"java\"\n+\n+    ext {\n+        versions = [\n+                opentelemetry            : \"0.10.0\",\n+                opentelemetryJavaagent   : \"0.10.0\",\n+                opentelemetryJavaagentSpi: \"0.10.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NTUxOQ==", "bodyText": "I guess best practice is for us to publish a BOM :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521895519", "createdAt": "2020-11-12T07:44:59Z", "author": {"login": "anuraaga"}, "path": "examples/distro/build.gradle", "diffHunk": "@@ -0,0 +1,57 @@\n+group 'io.opentelemetry.example'\n+version '1.0-SNAPSHOT'\n+\n+subprojects {\n+    version = rootProject.version\n+\n+    apply plugin: \"java\"\n+\n+    ext {\n+        versions = [\n+                opentelemetry            : \"0.10.0\",\n+                opentelemetryJavaagent   : \"0.10.0\",\n+                opentelemetryJavaagentSpi: \"0.10.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0NDQ1MA=="}, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg5NzA4MA==", "bodyText": "Don't think this example has it :) We should remove copyright headers from sample code.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r521897080", "createdAt": "2020-11-12T07:48:15Z", "author": {"login": "anuraaga"}, "path": "examples/distro/smoke-tests/src/test/java/com/splunk/opentelemetry/OkHttpUtils.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright Splunk Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY1NDEwMw=="}, "originalCommit": {"oid": "717b5d96bad27568a002443969a3d2621f00fd01"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a84714a5aa2cd3bf5aa564a5998eed35b032bd8", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1a84714a5aa2cd3bf5aa564a5998eed35b032bd8", "committedDate": "2020-11-12T08:39:09Z", "message": "Update examples/distro/custom/build.gradle\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd46d5a21140fba5f85e31532817c40772d3975", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afd46d5a21140fba5f85e31532817c40772d3975", "committedDate": "2020-11-12T08:41:41Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae37a84a08bc1b0c138a59515821a39ed73ec9c5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ae37a84a08bc1b0c138a59515821a39ed73ec9c5", "committedDate": "2020-11-12T19:24:17Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d1b1be79a1f6f6e5d916ac747b28fd589cc4f8", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8d1b1be79a1f6f6e5d916ac747b28fd589cc4f8", "committedDate": "2020-11-12T20:06:14Z", "message": "Remove constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df3ad0e2af2cb65dd9475f76197efbaf35a7a89a", "committedDate": "2020-11-16T09:39:31Z", "message": "Extract instrumentation into separate module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTY2OTgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#pullrequestreview-531166982", "createdAt": "2020-11-16T09:55:45Z", "commit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1NTo0NVrOHzxmiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1NTo0NVrOHzxmiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1MjEwNQ==", "bodyText": "I don't like at all that this config is currently copy-pasted around. In the future we HAVE to address this.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r524052105", "createdAt": "2020-11-16T09:55:45Z", "author": {"login": "iNikem"}, "path": "examples/distro/custom/build.gradle", "diffHunk": "@@ -1,37 +1,30 @@\n plugins {\n-    id \"java\"\n-    id(\"com.github.johnrengelman.shadow\") version \"6.0.0\"\n+  id \"java\"\n+  id(\"com.github.johnrengelman.shadow\") version \"6.0.0\"\n }\n \n dependencies {\n-    implementation(\"io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}\")\n-    implementation(\"io.opentelemetry.javaagent:opentelemetry-javaagent-spi:${versions.opentelemetryJavaagent}\")\n-    implementation(\"io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagent}\")\n-\n-    implementation deps.bytebuddy\n-    implementation deps.bytebuddyagent\n-    annotationProcessor deps.autoservice\n-    implementation deps.autoservice\n-\n-    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'\n+  compileOnly(\"io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}\")\n+  compileOnly(\"io.opentelemetry.javaagent:opentelemetry-javaagent-spi:${versions.opentelemetryJavaagent}\")\n+  compileOnly(\"io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagent}\")\n }\n \n tasks {\n-    shadowJar {\n-        mergeServiceFiles()\n+  shadowJar {\n+    mergeServiceFiles()\n \n-        exclude(\"**/module-info.class\")\n+    exclude(\"**/module-info.class\")\n \n-        // Prevents conflict with other SLF4J instances. Important for premain.\n-        relocate(\"org.slf4j\", \"io.opentelemetry.javaagent.slf4j\")\n-        // rewrite dependencies calling Logger.getLogger\n-        relocate(\"java.util.logging.Logger\", \"io.opentelemetry.javaagent.bootstrap.PatchLogger\")\n+    // Prevents conflict with other SLF4J instances. Important for premain.\n+    relocate(\"org.slf4j\", \"io.opentelemetry.javaagent.slf4j\")\n+    // rewrite dependencies calling Logger.getLogger\n+    relocate(\"java.util.logging.Logger\", \"io.opentelemetry.javaagent.bootstrap.PatchLogger\")\n \n-        // prevents conflict with library instrumentation\n-        relocate(\"io.opentelemetry.instrumentation.api\", \"io.opentelemetry.javaagent.shaded.instrumentation.api\")\n+    // prevents conflict with library instrumentation\n+    relocate(\"io.opentelemetry.instrumentation.api\", \"io.opentelemetry.javaagent.shaded.instrumentation.api\")\n \n-        // relocate OpenTelemetry API\n-        relocate(\"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\")\n-        relocate(\"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\")\n-    }\n+    // relocate OpenTelemetry API\n+    relocate(\"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\")\n+    relocate(\"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMzEwNDYy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#pullrequestreview-532310462", "createdAt": "2020-11-17T12:26:11Z", "commit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoyNjoxMVrOH0yfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjozNzo1NFrOH0y5mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTMyMg==", "bodyText": "Four submodules, now that we have instrumentation?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r525115322", "createdAt": "2020-11-17T12:26:11Z", "author": {"login": "mateuszrzeszutek"}, "path": "examples/distro/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+## Introduction\n+\n+This repository serves as a collection of examples of extending functionality of OpenTelemetry Java instrumentation agent.\n+It demonstrates how to repackage the aforementioned agent adding custom functionality.\n+For every extension point provided by OpenTelemetry Java instrumentation, this repository contains an example of\n+its usage.\n+\n+## General structure\n+\n+This repository has three main submodules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNjA2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * [DemoServlet3Instrumentation](custom/src/main/java/io/opentelemetry/demo/instrumentation/DemoServlet3Instrumentation.java) - additional instrumentation\n          \n          \n            \n            * [DemoServlet3Instrumentation](instrumentation/servlet-3/src/main/java/io/opentelemetry/demo/instrumentation/DemoServlet3Instrumentation.java) - additional instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r525116063", "createdAt": "2020-11-17T12:27:36Z", "author": {"login": "mateuszrzeszutek"}, "path": "examples/distro/README.md", "diffHunk": "@@ -0,0 +1,25 @@\n+## Introduction\n+\n+This repository serves as a collection of examples of extending functionality of OpenTelemetry Java instrumentation agent.\n+It demonstrates how to repackage the aforementioned agent adding custom functionality.\n+For every extension point provided by OpenTelemetry Java instrumentation, this repository contains an example of\n+its usage.\n+\n+## General structure\n+\n+This repository has three main submodules:\n+\n+* `custom` contains all custom functionality, SPI and other extensions\n+* `agent` contains the main repackaging functionality and, optionally, an entry point to the agent, if one wishes to\n+customize that\n+* `smoke-tests` contains simple tests to verify that resulting agent builds and applies correctly\n+\n+## Extensions examples\n+\n+* [DemoIdGenerator](custom/src/main/java/io/opentelemetry/demo/DemoIdGenerator.java) - custom `IdGenerator`\n+* [DemoPropagator](custom/src/main/java/io/opentelemetry/demo/DemoPropagator.java) - custom `TextMapPropagator`\n+* [DemoPropertySource](custom/src/main/java/io/opentelemetry/demo/DemoPropertySource.java) - default configuration\n+* [DemoSampler](custom/src/main/java/io/opentelemetry/demo/DemoSampler.java) - custom `Sampler`\n+* [DemoSpanProcessor](custom/src/main/java/io/opentelemetry/demo/DemoSpanProcessor.java) - custom `SpanProcessor`\n+* [DemoSpanExporter](custom/src/main/java/io/opentelemetry/demo/DemoSpanExporter.java) - custom `SpanExporter`\n+* [DemoServlet3Instrumentation](custom/src/main/java/io/opentelemetry/demo/instrumentation/DemoServlet3Instrumentation.java) - additional instrumentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMDc2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <logger name=\"com.splunk\" level=\"debug\"/>\n          \n          \n            \n              <logger name=\"com.example.javaagent\" level=\"debug\"/>\n          \n      \n    \n    \n  \n\n\ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r525120763", "createdAt": "2020-11-17T12:35:46Z", "author": {"login": "mateuszrzeszutek"}, "path": "examples/distro/smoke-tests/src/test/resources/logback.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+\n+  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n+    <encoder>\n+      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n+    </encoder>\n+  </appender>\n+\n+  <root level=\"INFO\">\n+    <appender-ref ref=\"console\"/>\n+  </root>\n+\n+  <logger name=\"io.opentelemetry\" level=\"debug\"/>\n+  <logger name=\"com.splunk\" level=\"debug\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMTk0Ng==", "bodyText": "What do you think about adding // given // when // then comments?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#discussion_r525121946", "createdAt": "2020-11-17T12:37:54Z", "author": {"login": "mateuszrzeszutek"}, "path": "examples/distro/smoke-tests/src/test/java/com/example/javaagent/smoketest/SpringBootSmokeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.example.javaagent.smoketest;\n+\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarFile;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class SpringBootSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    return \"open-telemetry-docker-dev.bintray.io/java/smoke-springboot-jdk\" + jdk + \":latest\";\n+  }\n+\n+  @Test\n+  public void springBootSmokeTestOnJDK() throws IOException, InterruptedException {\n+    startTarget(11);\n+    String url = String.format(\"http://localhost:%d/greeting\", target.getMappedPort(8080));\n+    Request request = new Request.Builder().url(url).get().build();\n+\n+    String currentAgentVersion =\n+        (String) new JarFile(agentPath)\n+            .getManifest()\n+            .getMainAttributes()\n+            .get(Attributes.Name.IMPLEMENTATION_VERSION);\n+\n+    Response response = client.newCall(request).execute();\n+    System.out.println(response.headers().toString());\n+\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3ad0e2af2cb65dd9475f76197efbaf35a7a89a"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa78cd88e3afc4f74615d7ca19693a4b12e1117", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fa78cd88e3afc4f74615d7ca19693a4b12e1117", "committedDate": "2020-11-19T08:12:40Z", "message": "Polish documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mzc4NDcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1621#pullrequestreview-535378473", "createdAt": "2020-11-20T12:15:52Z", "commit": {"oid": "1fa78cd88e3afc4f74615d7ca19693a4b12e1117"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7ec232b8f46479d407b2d1ee3cedc9c80ff744", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a7ec232b8f46479d407b2d1ee3cedc9c80ff744", "committedDate": "2020-11-20T13:15:42Z", "message": "Merge remote-tracking branch 'upstream/master' into vendor-example"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}