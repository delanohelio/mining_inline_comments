{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDg0MzQ2", "number": 825, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzowNlrOETEvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozNToxMVrOETfHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM2MDk1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzowNlrOG4mrNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzowNlrOG4mrNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzA5Mw==", "bodyText": "Sorry I think I missed it in the previous test PR - can you use assertj? Otherwise you should definitely use the jupiter assertions instead of junit4, but assertj is even better", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007093", "createdAt": "2020-07-29T02:53:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM2MTE0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzoxNlrOG4mrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzoxNlrOG4mrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzEzMw==", "bodyText": "With jupiter, class / methods are generally not public", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007133", "createdAt": "2020-07-29T02:53:16Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM2MjM0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1Mzo1M1rOG4mr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0OTozOFrOG4-3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA==", "bodyText": "Would probably use a simpler, more java-idiomatic method name and DisplayName annotation instead\nhttps://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007294", "createdAt": "2020-07-29T02:53:53Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzQ1Mg==", "bodyText": "(I had these two comments as draft comments on the other PR ><)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007452", "createdAt": "2020-07-29T02:54:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA=="}, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMzUzNQ==", "bodyText": "I'll create another pull request to make these changes in the other tests", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462403535", "createdAt": "2020-07-29T15:49:38Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA=="}, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDM2NTY3OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NTozNVrOG4mt_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NTozNVrOG4mt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzgwNg==", "bodyText": "I think this test is only really checking JaegerGrpcSpanExporterProperties, not that the properties are actually applied, which is probably not really possible. So can update the naming", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007806", "createdAt": "2020-07-29T02:55:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertNotNull(\n+                  \"Application Context contains JaegerGrpcSpanExporter bean\",\n+                  context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class));\n+            });\n+  }\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_with_property_values() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODY3Njg0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjoyOVrOG5P33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjoyOVrOG5P33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjA3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n          \n          \n            \n              void exportersEnabled() {\n          \n      \n    \n    \n  \n\nI'd find a short method name that captures as much intent when adding a longer display name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682077", "createdAt": "2020-07-30T01:32:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODY3ODA2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjo0OFrOG5P4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjo0OFrOG5P4rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n          \n          \n            \n              void handlesProperties() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682285", "createdAt": "2020-07-30T01:32:48Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODY3ODg0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMzowMVrOG5P5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMzowMVrOG5P5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n          \n          \n            \n              void disabledProperty() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682414", "createdAt": "2020-07-30T01:33:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODY4MDA1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMzo0N1rOG5P56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMzo0N1rOG5P56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {\n          \n          \n            \n              void noProperty() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682603", "createdAt": "2020-07-30T01:33:47Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporter.jaeger.enabled=false\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.containsBean(\"otelJaegerSpanExporter\")).isFalse();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when jaeger enabled property is MISSING should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODY4MzAxOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozNToxMVrOG5P7kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozNToxMVrOG5P7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MzAyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n          \n          \n            \n                              .isEqualTo(Duration.ofMillis(420));\n          \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout()).hasMillis(420);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462683024", "createdAt": "2020-07-30T01:35:11Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 169, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}