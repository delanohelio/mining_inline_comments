{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5OTA2ODc1", "number": 1050, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMDo1NFrOEZz8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMDo1NFrOEZz8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTAwODE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/TracingSession.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMDo1NFrOHC2YCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMDo1NFrOHC2YCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDA5MA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1050#discussion_r472750090", "createdAt": "2020-08-19T06:20:54Z", "author": {"login": "anuraaga"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/TracingSession.java", "diffHunk": "@@ -240,19 +220,20 @@ private static String getQuery(Statement statement) {\n     return query == null ? \"\" : query;\n   }\n \n-  private static Runnable createListener(final Span span, final ResultSetFuture future) {\n-    return new Runnable() {\n-      @Override\n-      public void run() {\n-        try (Scope ignored = currentContextWith(span)) {\n-          ResultSet resultSet = future.get();\n-          TRACER.onResponse(span, resultSet.getExecutionInfo());\n-        } catch (InterruptedException | ExecutionException e) {\n-          TRACER.endExceptionally(span, e);\n-        } finally {\n-          TRACER.end(span);\n-        }\n-      }\n-    };\n+  private void addCallbackToEndSpan(ResultSetFuture future, final Span span) {\n+    Futures.addCallback(\n+        future,\n+        new FutureCallback<ResultSet>() {\n+          @Override\n+          public void onSuccess(ResultSet result) {\n+            TRACER.end(span, result.getExecutionInfo());\n+          }\n+\n+          @Override\n+          public void onFailure(Throwable t) {\n+            TRACER.endExceptionally(span, t);\n+          }\n+        },\n+        directExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813c65781fe057189be7159662db266e912fde5a"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 75, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}