{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTQyMTE0", "number": 1035, "title": "Add documentation for spring starters ", "bodyText": "Add documentation for:\nOpentelemetry-spring-boot-autoconfigure\nOpentelemetry-spring-starter\nOpentelemetry-zipkin-exporter-starter\nOpentelemetry-jaeger-exporter-starter\nOpentelemetry-otlp-exporter-starter\nMinor clean up: I removed 2 fields from WithSpanAspectTest that are not being used in any tests.", "createdAt": "2020-08-17T16:42:01Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035", "merged": true, "mergeCommit": {"oid": "51a6e8b1e76f33e544928866e372dd9cb9c4677d"}, "closed": true, "closedAt": "2020-08-21T17:13:14Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_1ObFAH2gAyNDY4OTQyMTE0Ojg2ZmIxZmVhYjAzYjQyNTA1MzlkMmE2NWE1YTAyNTEwYmY5N2U0NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBICdOgFqTQ3MjY1NjQzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "86fb1feab03b4250539d2a65a5a02510bf97e473", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86fb1feab03b4250539d2a65a5a02510bf97e473", "committedDate": "2020-08-17T16:44:02Z", "message": "add starter and autoconfigure readmes, first draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3547777a4ad0dda4829bddc653f551406b9ab859", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3547777a4ad0dda4829bddc653f551406b9ab859", "committedDate": "2020-08-17T16:44:03Z", "message": "add exporter dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b045bb44eee999be9902c092781d567796aa2d57", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b045bb44eee999be9902c092781d567796aa2d57", "committedDate": "2020-08-17T16:44:04Z", "message": "format and add to readmes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "400ef1f78499a9f31947e2d5defa485f2d0b7ebd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/400ef1f78499a9f31947e2d5defa485f2d0b7ebd", "committedDate": "2020-08-17T16:44:05Z", "message": "clean up readme dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e2f64dd5890dc4a0293a057de84d775dcc97181", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e2f64dd5890dc4a0293a057de84d775dcc97181", "committedDate": "2020-08-17T16:44:05Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de0c6e0a9a03e3123550e7c7bf4c8810ab2fdf4", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8de0c6e0a9a03e3123550e7c7bf4c8810ab2fdf4", "committedDate": "2020-08-17T16:44:06Z", "message": "add sample trace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b31bdae356043f5e5fc28cb8efad1ed81d58c4e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b31bdae356043f5e5fc28cb8efad1ed81d58c4e", "committedDate": "2020-08-17T16:44:07Z", "message": "add documentation for all features"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d7cacba781d80fd15203dcf647d75be4e339d1", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e4d7cacba781d80fd15203dcf647d75be4e339d1", "committedDate": "2020-08-17T16:44:07Z", "message": "clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384eeed15814ebe6c5ae10efe8f74717b21ab28d", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/384eeed15814ebe6c5ae10efe8f74717b21ab28d", "committedDate": "2020-08-17T16:44:08Z", "message": "clean up link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2b77abb012f8b672ffdb2a1b9c8c6e5c7cc994", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc2b77abb012f8b672ffdb2a1b9c8c6e5c7cc994", "committedDate": "2020-08-17T16:44:09Z", "message": "remove unused fields and imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9afdf39095ed91f8ab8f44975dc83dc4d3717d64", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9afdf39095ed91f8ab8f44975dc83dc4d3717d64", "committedDate": "2020-08-17T16:37:04Z", "message": "remove unused fields and imports"}, "afterCommit": {"oid": "dc2b77abb012f8b672ffdb2a1b9c8c6e5c7cc994", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc2b77abb012f8b672ffdb2a1b9c8c6e5c7cc994", "committedDate": "2020-08-17T16:44:09Z", "message": "remove unused fields and imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86b5879bcca696046e38669e93af07abb50925a0", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86b5879bcca696046e38669e93af07abb50925a0", "committedDate": "2020-08-17T22:06:50Z", "message": "update readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11add179ee133576f35e65a904920fed6762446", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f11add179ee133576f35e65a904920fed6762446", "committedDate": "2020-08-17T22:23:22Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fb4a6ec8c1f1971c6390697344dacf680ec5cec2", "committedDate": "2020-08-18T14:40:13Z", "message": "broken internal link"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODg5MTAx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#pullrequestreview-469889101", "createdAt": "2020-08-18T23:08:31Z", "commit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowODozMlrOHCprrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo1MzoxM1rOHCqikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MjEyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n          \n          \n            \n            Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472542124", "createdAt": "2020-08-18T23:08:32Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0Mzc0MA==", "bodyText": "I think better to link to official site, e.g. https://search.maven.org/search?q=g:io.opentelemetry\nalso, we aren't publishing to maven central yet from opentelemetry-java-instrumentation, so maybe include somewhere that for now you need to add our bintray maven repository: https://dl.bintray.com/open-telemetry/maven/", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472543740", "createdAt": "2020-08-18T23:13:40Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NjI3Mw==", "bodyText": "we have this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472546273", "createdAt": "2020-08-18T23:21:24Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0Njg3OQ==", "bodyText": "did you mean for this to be otlp? (looks like otlp below in gradle config)\nalso, let's put otlp first in the exporters list, since it's our default\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <artifactId>opentelemetry-exporters-logging</artifactId>\n          \n          \n            \n                <artifactId>opentelemetry-exporters-otlp</artifactId>", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472546879", "createdAt": "2020-08-18T23:23:23Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NzgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n          \n          \n            \n            Provides OpenTelemetry tracer bean (`io.opentelemetry.trace.Tracer`) if one does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472547801", "createdAt": "2020-08-18T23:26:12Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0Nzg1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n          \n          \n            \n            Provides auto-configuration for the OpenTelemetry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This auto-configuration instruments all requests sent using Spring RestTemplate beans by applying a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=false` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this auto-configuration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472547851", "createdAt": "2020-08-18T23:26:25Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0OTkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n          \n          \n            \n            This feature auto-configures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to capture OpenTelemetry server spans and propagate distribute tracing context if provided in the request. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472549937", "createdAt": "2020-08-18T23:32:29Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MDcwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n          \n          \n            \n            Provides auto-configurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This auto-configuration instruments all outgoing http requests sent using Spring's WebClient and WebClient Builder beans by applying a bean post processor. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=false` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') showcases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472550700", "createdAt": "2020-08-18T23:34:44Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjU5Mg==", "bodyText": "link to newer version \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.\n          \n          \n            \n            Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop) to learn more about aspect weaving in spring.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472552592", "createdAt": "2020-08-18T23:41:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n+\n+#### Manual Instrumentation Support - @WithSpan\n+\n+This feature uses spring-aop to wrap methods annotated with `@WithSpan` in a span.\n+\n+Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MzA2OQ==", "bodyText": "I think users don't necessarily need to know where in our source code it comes from\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Tracer bean is provided by\n          \n          \n            \n                // io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration.java\n          \n          \n            \n                // Tracer bean is provided by spring-boot-autoconfigure", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472553069", "createdAt": "2020-08-18T23:42:34Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n+\n+#### Manual Instrumentation Support - @WithSpan\n+\n+This feature uses spring-aop to wrap methods annotated with `@WithSpan` in a span.\n+\n+Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.\n+\n+##### Usage\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * Test WithSpan\n+ *\n+ */\n+@Component\n+public class TracedClass {\n+\n+    @Autowired\n+    // Tracer bean is provided by\n+    // io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDAwNw==", "bodyText": "maybe mention what json format this is, e.g. Zipkin?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472554007", "createdAt": "2020-08-18T23:45:53Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n+\n+#### Manual Instrumentation Support - @WithSpan\n+\n+This feature uses spring-aop to wrap methods annotated with `@WithSpan` in a span.\n+\n+Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.\n+\n+##### Usage\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * Test WithSpan\n+ *\n+ */\n+@Component\n+public class TracedClass {\n+\n+    @Autowired\n+    // Tracer bean is provided by\n+    // io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration.java\n+    Tracer tracer;\n+\n+    @WithSpan\n+    public void tracedMethod() {\n+    }\n+\n+    @WithSpan(value=\"span name\")\n+    public void tracedMethodWithName() {\n+        Span currentSpan = tracer.getCurrentSpan();\n+        currentSpan.addEvent(\"ADD EVENT TO tracedMethodWithName SPAN\");\n+        currentSpan.setAttribute(\"isTestAttribute\", true);\n+    }\n+\n+    @WithSpan(kind=Span.Kind.CLIENT)\n+    public void tracedClientSpan() {\n+    }\n+}\n+\n+```\n+\n+#### Sample Traces\n+\n+##### Spring Web MVC - Server Span\n+```json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDIxNg==", "bodyText": "oh i c \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472554216", "createdAt": "2020-08-18T23:46:39Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n+\n+#### Manual Instrumentation Support - @WithSpan\n+\n+This feature uses spring-aop to wrap methods annotated with `@WithSpan` in a span.\n+\n+Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.\n+\n+##### Usage\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * Test WithSpan\n+ *\n+ */\n+@Component\n+public class TracedClass {\n+\n+    @Autowired\n+    // Tracer bean is provided by\n+    // io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration.java\n+    Tracer tracer;\n+\n+    @WithSpan\n+    public void tracedMethod() {\n+    }\n+\n+    @WithSpan(value=\"span name\")\n+    public void tracedMethodWithName() {\n+        Span currentSpan = tracer.getCurrentSpan();\n+        currentSpan.addEvent(\"ADD EVENT TO tracedMethodWithName SPAN\");\n+        currentSpan.setAttribute(\"isTestAttribute\", true);\n+    }\n+\n+    @WithSpan(kind=Span.Kind.CLIENT)\n+    public void tracedClientSpan() {\n+    }\n+}\n+\n+```\n+\n+#### Sample Traces\n+\n+##### Spring Web MVC - Server Span\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"id\":\"9b782243ad7df179\",\n+      \"kind\":\"SERVER\",\n+      \"name\":\"webmvctracingfilter.dofilterinteral\",\n+      \"timestamp\":1596841405866633,\n+      \"duration\":355648,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.client_ip\":\"0:0:0:0:0:0:0:1\",\n+         \"http.flavor\":\"HTTP/1.1\",\n+         \"http.method\":\"GET\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-webmvc/sample\",\n+         \"http.user_agent\":\"PostmanRuntime/7.26.2\",\n+         \"net.peer.ip\":\"0:0:0:0:0:0:0:1\",\n+         \"net.peer.port\":\"33916\",\n+         \"sampling.probability\":\"1.0\"\n+      }\n+   }\n+```\n+\n+##### Spring Web - RestTemplate Client Span\n+\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"43990118a8bdbdf5\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"http get\",\n+      \"timestamp\":1596841405949825,\n+      \"duration\":21288,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.method\":\"GET\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-web/sample/rest-template\",\n+         \"net.peer.name\":\"localhost\",\n+         \"net.peer.port\":\"8081\"\n+      }\n+   }\n+```\n+\n+##### Spring Web-Flux - WebClient Span\n+\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"1b14a2fc89d7a762\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"http post\",\n+      \"timestamp\":1596841406109125,\n+      \"duration\":25137,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.method\":\"POST\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-webflux/sample/web-client\",\n+         \"net.peer.name\":\"localhost\",\n+         \"net.peer.port\":\"8082\"\n+      }\n+   }\n+```\n+\n+##### @WithSpan Instrumentation\n+\n+```\n+[\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"c3ef24b9bff5901c\",\n+      \"name\":\"tracedclass.withspanmethod\",\n+      \"timestamp\":1596841406165439,\n+      \"duration\":6912,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":'@WithSpan',\n+         \"test.hasEvent\":'true',\n+      }\n+   },\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"1a6cb395a8a33cc0\",\n+      \"name\":\"@withspan set span name\",\n+      \"timestamp\":1596841406182759,\n+      \"duration\":2187,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"annotations\":[\n+         {\n+            \"timestamp\":1596841406182920,\n+            \"value\":\"ADD EVENT TO tracedMethodWithName SPAN\"\n+         }\n+      ],\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":'@WithSpan(value=\"@withspan set span name\")',\n+         \"test.hasEvent\":'true',\n+      }\n+   },\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"74dd19a8a9883f80\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"tracedClientSpan\",\n+      \"timestamp\":1596841406194210,\n+      \"duration\":130,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      }\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":\"@WithSpan(kind=Span.Kind.Client)\",\n+      }\n+   },\n+]\n+```\n+\n+<!-- #### In Development - Slf4j Log Correlation  -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The OpenTelemetry Jaeger Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-jaeger](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/jaeger) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.\n          \n          \n            \n            The OpenTelemetry Jaeger Exporter Starter for Java is a starter package that includes packages required to enable tracing using OpenTelemetry. It also provides the [opentelemetry-exporters-jaeger](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/jaeger) dependency and corresponding auto-configuration.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472554792", "createdAt": "2020-08-18T23:48:39Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/jaeger-exporter-starter/README.md", "diffHunk": "@@ -0,0 +1,34 @@\n+# OpenTelemetry Jaeger Exporter Starter\n+\n+The OpenTelemetry Jaeger Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-jaeger](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/jaeger) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NDk1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The OpenTelemetry OTLP Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-otlp](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.\n          \n          \n            \n            The OpenTelemetry OTLP Exporter Starter for Java is a starter package that includes packages required to enable tracing using OpenTelemetry. It also provides the [opentelemetry-exporters-otlp](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp) dependency and corresponding auto-configuration.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472554951", "createdAt": "2020-08-18T23:49:10Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/otlp-exporter-starter/README.md", "diffHunk": "@@ -0,0 +1,34 @@\n+# OpenTelemetry OTLP Exporter Starter\n+\n+The OpenTelemetry OTLP Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-otlp](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NTM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The OpenTelemetry Zipkin Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-zipkin](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/zipkin) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.\n          \n          \n            \n            The OpenTelemetry Zipkin Exporter Starter for Java is a starter package that includes packages required to enable tracing using OpenTelemetry. It also provides the [opentelemetry-exporters-zipkin](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/zipkin) dependency and corresponding auto-configuration.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472555376", "createdAt": "2020-08-18T23:50:26Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/zipkin-exporter-starter/README.md", "diffHunk": "@@ -0,0 +1,34 @@\n+# OpenTelemetry Zipkin Exporter Starter\n+\n+The OpenTelemetry Zipkin Exporter Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. It also provides the [opentelemetry-exporters-zipkin](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/zipkin) dependency and corresponding autoconfigurations.  Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NTQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The OpenTelemetry Spring Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.\n          \n          \n            \n            The OpenTelemetry Spring Starter for Java is a starter package that includes packages required to enable tracing using OpenTelemetry. Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472555489", "createdAt": "2020-08-18T23:50:49Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/spring-starter/README.md", "diffHunk": "@@ -0,0 +1,36 @@\n+# OpenTelemetry Spring Starter\n+\n+The OpenTelemetry Spring Starter for Java is a starter package that includes packages required to enable tracing using opentelemetry. Check out [opentelemetry-spring-boot-autoconfigure](../../spring-boot-autoconfigure/README.md#features) for the list of supported libraries and features.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1NjE3OQ==", "bodyText": "for the documentation, i think nice to include the real default values", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r472556179", "createdAt": "2020-08-18T23:53:13Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,428 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include use all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://mvnrepository.com/artifact/io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Slf4j log correlation support -->\n+  <dependency>\n+    <groupId>org.slf4j</groupId>\n+    <artifactId>slf4j-api</artifactId>\n+    <version>SLF4J_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+\n+//Slf4j log correlation support\n+implementation \"org.sl4j:slf4j-api:SLF4J_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean if a tracer bean does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n+\n+#### Spring Web Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry RestTemplate trace interceptor defined in [opentelemetry-spring-web-3.1](../spring-web-3.1/). This autoconfiguration instruments all requests sent using Spring RestTemplate beans using conditional class loaders and a RestTemplate bean post processor. This feature is supported for spring web versions 3.1+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web - RestTemplate Client Span]('#spring-web-resttemplate-client-span') show cases a sample client span generated by this autoconfiguration. Check out [opentelemetry-spring-web-3.1](../spring-web-3.1/) to learn more about the OpenTelemetry RestTemplateInterceptor.\n+\n+#### Spring Web MVC Auto Configuration\n+\n+This feature autoconfigures instrumentation for spring-webmvc controllers by adding a [WebMvcTracingFilter](../spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/springwebmvc/WebMvcTracingFilter.java) bean to the application context. This request filter implements the [OncePerRequestFilter](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/OncePerRequestFilter.html) interface to add OpenTelemetry server spans to incoming requests. [Spring Web MVC - Server Span]('#spring-web-mvc-server-span') show cases a sample span generated by the WebMvcTracingFilter. Check out [opentelemetry-spring-webmvc-3.1](../spring-webmvc-3.1/) to learn more about the OpenTelemetry WebMvcTracingFilter.\n+\n+#### Spring WebFlux Auto Configuration\n+\n+Provides autoconfigurations for the OpenTelemtry WebClient ExchangeFilter defined in [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/). This autoconfiguration instruments all requests sent using Spring's WebClient and WebClient Builder beans using conditional class loaders and bean post processors. This feature is supported for spring webflux versions 5.0+ and can be disabled by adding `opentelemetry.trace.httpclients.enabled=False` to your `resources/applications.properties` file. [Spring Web-Flux - WebClient Span]('#spring-web-flux-webclient-span') show cases a sample span generated by the WebClientFilter. Check out [opentelemetry-spring-webflux-5.0](../spring-webflux-5.0/) to learn more about the OpenTelemetry WebClientFilter.\n+\n+#### Manual Instrumentation Support - @WithSpan\n+\n+This feature uses spring-aop to wrap methods annotated with `@WithSpan` in a span.\n+\n+Note - This annotation can only be applied to bean methods managed by the spring application context. Check out [spring-aop](https://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/aop.html) to learn more about aspect weaving in spring.\n+\n+##### Usage\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+/**\n+ * Test WithSpan\n+ *\n+ */\n+@Component\n+public class TracedClass {\n+\n+    @Autowired\n+    // Tracer bean is provided by\n+    // io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration.java\n+    Tracer tracer;\n+\n+    @WithSpan\n+    public void tracedMethod() {\n+    }\n+\n+    @WithSpan(value=\"span name\")\n+    public void tracedMethodWithName() {\n+        Span currentSpan = tracer.getCurrentSpan();\n+        currentSpan.addEvent(\"ADD EVENT TO tracedMethodWithName SPAN\");\n+        currentSpan.setAttribute(\"isTestAttribute\", true);\n+    }\n+\n+    @WithSpan(kind=Span.Kind.CLIENT)\n+    public void tracedClientSpan() {\n+    }\n+}\n+\n+```\n+\n+#### Sample Traces\n+\n+##### Spring Web MVC - Server Span\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"id\":\"9b782243ad7df179\",\n+      \"kind\":\"SERVER\",\n+      \"name\":\"webmvctracingfilter.dofilterinteral\",\n+      \"timestamp\":1596841405866633,\n+      \"duration\":355648,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.client_ip\":\"0:0:0:0:0:0:0:1\",\n+         \"http.flavor\":\"HTTP/1.1\",\n+         \"http.method\":\"GET\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-webmvc/sample\",\n+         \"http.user_agent\":\"PostmanRuntime/7.26.2\",\n+         \"net.peer.ip\":\"0:0:0:0:0:0:0:1\",\n+         \"net.peer.port\":\"33916\",\n+         \"sampling.probability\":\"1.0\"\n+      }\n+   }\n+```\n+\n+##### Spring Web - RestTemplate Client Span\n+\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"43990118a8bdbdf5\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"http get\",\n+      \"timestamp\":1596841405949825,\n+      \"duration\":21288,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.method\":\"GET\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-web/sample/rest-template\",\n+         \"net.peer.name\":\"localhost\",\n+         \"net.peer.port\":\"8081\"\n+      }\n+   }\n+```\n+\n+##### Spring Web-Flux - WebClient Span\n+\n+```json\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"1b14a2fc89d7a762\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"http post\",\n+      \"timestamp\":1596841406109125,\n+      \"duration\":25137,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"http.method\":\"POST\",\n+         \"http.status_code\":\"200\",\n+         \"http.url\":\"/spring-webflux/sample/web-client\",\n+         \"net.peer.name\":\"localhost\",\n+         \"net.peer.port\":\"8082\"\n+      }\n+   }\n+```\n+\n+##### @WithSpan Instrumentation\n+\n+```\n+[\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"c3ef24b9bff5901c\",\n+      \"name\":\"tracedclass.withspanmethod\",\n+      \"timestamp\":1596841406165439,\n+      \"duration\":6912,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":'@WithSpan',\n+         \"test.hasEvent\":'true',\n+      }\n+   },\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"1a6cb395a8a33cc0\",\n+      \"name\":\"@withspan set span name\",\n+      \"timestamp\":1596841406182759,\n+      \"duration\":2187,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      },\n+      \"annotations\":[\n+         {\n+            \"timestamp\":1596841406182920,\n+            \"value\":\"ADD EVENT TO tracedMethodWithName SPAN\"\n+         }\n+      ],\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":'@WithSpan(value=\"@withspan set span name\")',\n+         \"test.hasEvent\":'true',\n+      }\n+   },\n+   {\n+      \"traceId\":\"0371febbbfa76b2e285a08b53a055d17\",\n+      \"parentId\":\"9b782243ad7df179\",\n+      \"id\":\"74dd19a8a9883f80\",\n+      \"kind\":\"CLIENT\",\n+      \"name\":\"tracedClientSpan\",\n+      \"timestamp\":1596841406194210,\n+      \"duration\":130,\n+      \"localEndpoint\":{\n+         \"serviceName\":\"sample_trace\",\n+         \"ipv4\":\"XXX.XXX.X.XXX\"\n+      }\n+      \"tags\":{\n+         \"test.type\":\"@WithSpan annotation\",\n+         \"test.case\":\"@WithSpan(kind=Span.Kind.Client)\",\n+      }\n+   },\n+]\n+```\n+\n+<!-- #### In Development - Slf4j Log Correlation  -->\n+<!-- TODO: Blocked by:  -->\n+\n+#### Spring Support\n+\n+Auto-configuration is natively supported by Springboot applications. To enable these features in \"vanilla\" use `@EnableOpenTelemetryTracing` to complete a component scan of this package.\n+\n+##### Usage\n+\n+```java\n+import io.opentelemetry.instrumentation.spring.autoconfigure.EnableOpenTelemetryTracing\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableOpenTelemetryTracing\n+public class OpenTelemetryConfig {}\n+```\n+\n+#### Exporter Configurations\n+\n+This package provides auto configurations for [OTLP](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp), [Jaeger](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/jaeger), [Zipkin](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/zipkin), and [Logging](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging) Span Exporters.\n+\n+If an exporter is present in the classpath during runtime and a spring bean of the exporter is missing from the spring application context. An exporter bean is initialized and added to a simple span processor in the active tracer provider. Check out the implementation [here](/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java).\n+\n+\n+#### Configuration Properties\n+\n+##### Enabling/Disabling Features\n+\n+|Feature   \t\t\t\t|Property   \t\t\t\t\t\t\t\t\t|Default Value  |ConditionalOnClass\n+|---\t\t\t\t\t|---\t\t\t\t\t\t\t\t\t\t\t|---\t\t\t|---\n+|spring-web  \t \t\t|opentelemetry.trace.httpclients.enabled   \t\t|true   \t\t|RestTemplate\n+|spring-webmvc   \t\t|opentelemetry.trace.httpclients.enabled   \t\t|true   \t\t|OncePerRequestFilter\n+|spring-webflux   \t\t|opentelemetry.trace.httpclients.enabled \t\t|true   \t\t|WebClient\n+|@WithSpan   \t\t\t|opentelemetry.trace.aspects.enabled \t \t\t|true   \t\t|WithSpan, Aspect\n+|Otlp Exporter\t\t    |opentelemetry.trace.exporters.otlp.enabled\t\t|true   \t\t|OtlpGrpcSpanExporter\n+|Jaeger Exporter\t\t|opentelemetry.trace.exporters.jaeger.enabled\t|true   \t\t|JaegerGrpcSpanExporter\n+|Zipkin Exporter\t\t|opentelemetry.trace.exporters.zipkin.enabled\t|true   \t\t|ZipkinSpanExporter\n+|Logging Exporter\t    |opentelemetry.trace.exporters.logging.enabled\t|true   \t\t|LoggingSpanExporter\n+\n+<!-- Slf4j Log Correlation  opentelemetry.trace.loggers.slf4j.enabled\t\ttrue   \t\torg.slf4j.MDC -->\n+\n+##### Exporter Properties\n+\n+|Feature   \t\t\t\t|Property   \t\t\t\t\t\t\t\t\t\t|Default Value\n+|---\t\t\t\t\t|---\t\t\t\t\t\t\t\t\t\t\t\t|---\n+|Otlp Exporter  \t \t|opentelemetry.trace.exporters.otlp.servicename \t|OtlpGrpcSpanExporter.DEFAULT_SERVICE_NAME\n+|\t\t\t\t  \t\t|opentelemetry.trace.exporters.otlp.endpoint\t\t|OtlpGrpcSpanExporter.DEFAULT_ENDPOINT\n+|\t\t\t\t   \t\t|opentelemetry.trace.exporters.otlp.spantimeout\t\t|OtlpGrpcSpanExporter.DEFAULT_DEADLINE_MS\n+|Jaeger Exporter  \t \t|opentelemetry.trace.exporters.jaeger.servicename \t|JaegerGrpcSpanExporter.DEFAULT_SERVICE_NAME\n+|\t\t\t\t  \t\t|opentelemetry.trace.exporters.jaeger.endpoint\t\t|JaegerGrpcSpanExporter.DEFAULT_ENDPOINT\n+|\t\t\t\t   \t\t|opentelemetry.trace.exporters.jaeger.spantimeout\t|JaegerGrpcSpanExporter.DEFAULT_DEADLINE_MS\n+|Zipkin Exporter \t\t|opentelemetry.trace.exporters.jaeger.servicename\t|ZipkinSpanExporter.DEFAULT_SERVICE_NAME\n+|\t\t\t\t \t\t|opentelemetry.trace.exporters.jaeger.endpoint\t\t|ZipkinSpanExporter.DEFAULT_ENDPOINT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb4a6ec8c1f1971c6390697344dacf680ec5cec2"}, "originalPosition": 416}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629b752f23f6659759726b50f3b5975834bb6c39", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/629b752f23f6659759726b50f3b5975834bb6c39", "committedDate": "2020-08-19T18:00:31Z", "message": "Update instrumentation-core/spring/starters/spring-starter/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e52202ca5e535d7f222baf220a2ce4b97a5c83b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3e52202ca5e535d7f222baf220a2ce4b97a5c83b", "committedDate": "2020-08-19T18:00:40Z", "message": "Update instrumentation-core/spring/starters/zipkin-exporter-starter/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2281e8befc3afed2205778466c6d456a97c7167b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2281e8befc3afed2205778466c6d456a97c7167b", "committedDate": "2020-08-19T18:00:46Z", "message": "Update instrumentation-core/spring/starters/otlp-exporter-starter/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2383b80e507a66a02166da35e2185edc940a201", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2383b80e507a66a02166da35e2185edc940a201", "committedDate": "2020-08-19T18:00:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e485e430541e9afae428854b2476791a98a0d4e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5e485e430541e9afae428854b2476791a98a0d4e", "committedDate": "2020-08-19T18:05:25Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3abf0b6299ad57d09d2b042de6c70883f8c18fe7", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3abf0b6299ad57d09d2b042de6c70883f8c18fe7", "committedDate": "2020-08-19T18:05:35Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d977d59e8681b49a7b8f26090e173ca1c56389", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10d977d59e8681b49a7b8f26090e173ca1c56389", "committedDate": "2020-08-20T01:18:57Z", "message": "Update instrumentation-core/spring/starters/jaeger-exporter-starter/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3a896ebc0f122ec34e5c220c11b49d1e5d8ee8", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe3a896ebc0f122ec34e5c220c11b49d1e5d8ee8", "committedDate": "2020-08-20T17:00:05Z", "message": "remove slf4j spring doc, clean up dependencies, update main spring doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b2b5ab3d22eb7cd382513b1a0326249ab02c2e9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b2b5ab3d22eb7cd382513b1a0326249ab02c2e9", "committedDate": "2020-08-20T17:04:41Z", "message": "update default values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b1c91bc6bbea32115c94570d352f22b84d95bc5", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b1c91bc6bbea32115c94570d352f22b84d95bc5", "committedDate": "2020-08-20T17:05:51Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ce087daf60f4fa14a7695d4a0f31b46ae71c32", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72ce087daf60f4fa14a7695d4a0f31b46ae71c32", "committedDate": "2020-08-20T17:06:01Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a06052906e841af67e9b0c5c3e83d7dace4286", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/66a06052906e841af67e9b0c5c3e83d7dace4286", "committedDate": "2020-08-20T17:06:11Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ed9f9890e07ff8ac3a0ded1d6cdc4e322508592", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0ed9f9890e07ff8ac3a0ded1d6cdc4e322508592", "committedDate": "2020-08-20T17:06:28Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68cfdb6570a5c7a079c25f5b65e9c1245252b6f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e68cfdb6570a5c7a079c25f5b65e9c1245252b6f", "committedDate": "2020-08-20T17:06:40Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fecca0629a25177e6786ec18647c3610b4a81cab", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fecca0629a25177e6786ec18647c3610b4a81cab", "committedDate": "2020-08-20T17:09:51Z", "message": "zipkin spans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735f0c17617a37dbce112ec5c9491d7a808a0e9c", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/735f0c17617a37dbce112ec5c9491d7a808a0e9c", "committedDate": "2020-08-20T17:10:26Z", "message": "zipkin spans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMTM0ODYz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#pullrequestreview-472134863", "createdAt": "2020-08-21T04:20:56Z", "commit": {"oid": "735f0c17617a37dbce112ec5c9491d7a808a0e9c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoyMDo1NlrOHEbEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNDoyMDo1NlrOHEbEvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5OTkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Provides OpenTelemetry tracer bean (`io.opentelemetry.trace.Tracer`) if one does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.\n          \n          \n            \n            Provides a OpenTelemetry tracer bean (`io.opentelemetry.trace.Tracer`) if one does not exist in the application context of the spring project. This tracer bean will be used in all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#discussion_r474399934", "createdAt": "2020-08-21T04:20:56Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/README.md", "diffHunk": "@@ -0,0 +1,417 @@\n+# OpenTelemetry Spring Auto-Configuration\n+\n+Auto-configures OpenTelemetry instrumentation for [spring-web](../spring-web-3.1/), [spring-webmvc](../spring-webmvc-3.1/), and [spring-webflux](../spring-webflux-5.0/). Leverages Spring Aspect Oriented Programming, dependency injection, and bean post-processing to trace spring applications. To include all features listed below use the [opentelemetry-spring-starter](../starters/spring-starter/README.md).\n+\n+## Quickstart\n+\n+### Add these dependencies to your project.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.7.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry -->\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-spring-boot-autoconfigure</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-api</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+   <!-- simple span exporter -->\n+   <!-- outputs spans to console -->\n+   <!-- provides opentelemetry-sdk artifact -->\n+   <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-logging</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry spring auto-configuration\n+implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-autoconfigure:OPENTELEMETRY_VERSION'\n+//opentelemetry\n+implementation 'io.opentelemetry:opentelemetry-api:OPENTELEMETRY_VERSION'\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+```\n+\n+### Features\n+\n+#### Dependencies\n+\n+The following dependencies are optional but are required to use the corresponding features.\n+\n+Replace `SPRING_VERSION` with the version of spring you're using.\n+ - Minimum version: `3.1`\n+\n+Replace `SPRING_WEBFLUX_VERSION` with the version of spring-webflux you're using.\n+ - Minimum version: `5.0`\n+\n+Replace `SLF4J_VERSION` with the version of slf4j you're using.\n+\n+For Maven add to your `pom.xml`:\n+\n+```xml\n+<dependencies>\n+  <!-- opentelemetry exporters-->\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-zipkin</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-exporters-otlp</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-web -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-web</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webmvc -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webmvc</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to autoconfigure spring-webflux -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-webflux</artifactId>\n+    <version>SPRING_WEBFLUX_VERSION</version>\n+  </dependency>\n+\n+  <!-- Used to enable instrumentation using @WithSpan  -->\n+  <dependency>\n+    <groupId>org.springframework</groupId>\n+    <artifactId>spring-aop</artifactId>\n+    <version>SPRING_VERSION</version>\n+  </dependency>\n+  <dependency>\n+    <groupId>io.opentelemetry</groupId>\n+    <artifactId>opentelemetry-extension-auto-annotations</artifactId>\n+    <version>OPENTELEMETRY_VERSION</version>\n+  </dependency>\n+</dependencies>\n+```\n+\n+For Gradle add to your dependencies:\n+\n+```groovy\n+//opentelemetry exporter\n+implementation 'io.opentelemetry:opentelemetry-exporters-jaeger:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-zipkin:OPENTELEMETRY_VERSION'\n+implementation 'io.opentelemetry:opentelemetry-exporters-otlp:OPENTELEMETRY_VERSION'\n+\n+//Used to autoconfigure spring-web\n+implementation \"org.springframework:spring-web:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webmvc\n+implementation \"org.springframework:spring-webmvc:SPRING_VERSION\"\n+\n+//Used to autoconfigure spring-webflux\n+implementation \"org.springframework:spring-webflux:SPRING_WEBFLUX_VERSION\"\n+\n+//Enables instrumentation using @WithSpan\n+implementation \"org.springframework:spring-aop:SPRING_VERSION\"\n+implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:OPENTELEMETRY_VERSION\"\n+```\n+\n+#### OpenTelemetry Auto Configuration\n+\n+\n+#### OpenTelemetry Tracer Auto Configuration\n+\n+Provides OpenTelemetry tracer bean (`io.opentelemetry.trace.Tracer`) if one does not exist in the application context of spring project. This tracer bean will be used in the all configurations listed below. Feel free to declare your own Opentelemetry tracer bean to overwrite this configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "735f0c17617a37dbce112ec5c9491d7a808a0e9c"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea8849ee17241c8da7639b4ef2a0bd831d4fed4", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dea8849ee17241c8da7639b4ef2a0bd831d4fed4", "committedDate": "2020-08-21T15:49:58Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/README.md\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjU2NDMw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1035#pullrequestreview-472656430", "createdAt": "2020-08-21T17:13:05Z", "commit": {"oid": "dea8849ee17241c8da7639b4ef2a0bd831d4fed4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2755, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}