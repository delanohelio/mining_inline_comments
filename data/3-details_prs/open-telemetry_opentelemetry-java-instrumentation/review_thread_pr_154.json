{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODAzNzMx", "number": 154, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowOToxM1rODe6EjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowOToxM1rODe6EjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzM1MzA4OnYy", "diffSide": "RIGHT", "path": "testing/src/main/groovy/io/opentelemetry/auto/test/asserts/TraceAssert.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODowOToxM1rOFoThRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoxMjoyNFrOFoTnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNzE3NQ==", "bodyText": "is there a way with spock to put a timeout on the test itself, rather than having to put it in the middle here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/154#discussion_r377807175", "createdAt": "2020-02-11T18:09:13Z", "author": {"login": "jkwatson"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/asserts/TraceAssert.groovy", "diffHunk": "@@ -25,10 +25,7 @@ class TraceAssert {\n                           @DelegatesTo(value = TraceAssert, strategy = Closure.DELEGATE_FIRST) Closure spec) {\n     def spans = getTrace(writer, traceId)\n     Stopwatch stopwatch = Stopwatch.createStarted()\n-    while (stopwatch.elapsed(TimeUnit.SECONDS) < 10) {\n-      if (spans.size() == expectedSize) {\n-        break\n-      }\n+    while (spans.size() < expectedSize && stopwatch.elapsed(TimeUnit.SECONDS) < 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d420e6973371a6f4e71e45c8002a4d3d7d4b7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwODc0Mw==", "bodyText": "yes, but then we would have to apply timeout appropriately for each tests (and tests vary a lot in time since they are more integration test than unit test)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/154#discussion_r377808743", "createdAt": "2020-02-11T18:12:24Z", "author": {"login": "trask"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/asserts/TraceAssert.groovy", "diffHunk": "@@ -25,10 +25,7 @@ class TraceAssert {\n                           @DelegatesTo(value = TraceAssert, strategy = Closure.DELEGATE_FIRST) Closure spec) {\n     def spans = getTrace(writer, traceId)\n     Stopwatch stopwatch = Stopwatch.createStarted()\n-    while (stopwatch.elapsed(TimeUnit.SECONDS) < 10) {\n-      if (spans.size() == expectedSize) {\n-        break\n-      }\n+    while (spans.size() < expectedSize && stopwatch.elapsed(TimeUnit.SECONDS) < 10) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwNzE3NQ=="}, "originalCommit": {"oid": "027d420e6973371a6f4e71e45c8002a4d3d7d4b7"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 562, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}