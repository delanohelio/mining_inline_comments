{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NDc1OTk1", "number": 920, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTo0OVrOEWIaTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo1NTowOFrOEWp66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQxOTMzOnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTo0OVrOG9RpcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo1MDoxNVrOG-BU1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ1Ng==", "bodyText": "This craziness is the only pattern I could find for suppressing a non-void method", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r466905456", "createdAt": "2020-08-07T08:41:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");\n+    }\n+\n+    @Advice.OnMethodExit\n+    public static void handleSuppression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7a083c07dcb67b2f44aea2feeee2648b96a9c2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NjYxNA==", "bodyText": "Please add some documentation about what you are trying to achieve here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467686614", "createdAt": "2020-08-10T04:50:15Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");\n+    }\n+\n+    @Advice.OnMethodExit\n+    public static void handleSuppression(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ1Ng=="}, "originalCommit": {"oid": "4a7a083c07dcb67b2f44aea2feeee2648b96a9c2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQyMjQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v1_0/AbstractArmeriaTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Mjo1NFrOG9RrZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Mjo1NFrOG9RrZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTk1OA==", "bodyText": "Returning ServerBuilder here allows checking my suppression didn't return null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r466905958", "createdAt": "2020-08-07T08:42:54Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v1_0/AbstractArmeriaTest.groovy", "diffHunk": "@@ -17,23 +17,25 @@\n package io.opentelemetry.instrumentation.armeria.v1_0\n \n import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.client.WebClientBuilder\n import com.linecorp.armeria.common.HttpMethod\n import com.linecorp.armeria.common.HttpRequest\n import com.linecorp.armeria.common.HttpResponse\n import com.linecorp.armeria.common.HttpStatus\n import com.linecorp.armeria.server.ServerBuilder\n import com.linecorp.armeria.testing.junit4.server.ServerRule\n import io.opentelemetry.auto.test.InstrumentationSpecification\n-import io.opentelemetry.auto.test.utils.TraceUtils\n import io.opentelemetry.trace.attributes.SemanticAttributes\n-import spock.lang.Ignore\n import spock.lang.Shared\n \n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n import static io.opentelemetry.trace.Span.Kind.SERVER\n \n-abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {\n+abstract class AbstractArmeriaTest extends InstrumentationSpecification {\n \n-  abstract void configureServer(ServerBuilder sb)\n+  abstract ServerBuilder configureServer(ServerBuilder serverBuilder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7a083c07dcb67b2f44aea2feeee2648b96a9c2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTM5NDk5OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDo0OTo1MFrOG9tgYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozOTowN1rOG_Ve-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MTg5MA==", "bodyText": "i think #892 will break this because it will shade this constant also. there are ways to prevent the string from getting shaded (e.g. make it a constant NAME = \"_io.opentelemetry...\".substring(1)\".\nanother option for suppressing library instrumentation that might be easier to generalize, is to make the coordination more explicit, e.g. have a method in instrumentation-api like isAutoEnabled(instrumentationName), and the library instrumentation can explicitly check that to see if there is auto instrumentation with the same name enabled\nin this case i guess that would mean returning a no-op decorator, or changing the API to expose a method that registers a decorator on the ServerBuilder so we can no-op the registration in this case\nI'll add this note to #903, no need to decide/address in this PR", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467361890", "createdAt": "2020-08-08T04:49:50Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NTQ2NQ==", "bodyText": "I ended up needing yet a different pattern because of the shading change making the classnames the same. I guess it's actually a bit more robust now and we'll revisit in #903 for an inversion of control.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469065465", "createdAt": "2020-08-12T07:39:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/ArmeriaServerBuilderInstrumentation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.armeria.v1_0;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import io.opentelemetry.auto.instrumentation.armeria.v1_0.shaded.server.OpenTelemetryService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ArmeriaServerBuilderInstrumentation extends AbstractArmeriaInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"com.linecorp.armeria.server.ServerBuilder\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"decorator\").and(takesArgument(0, Function.class))),\n+        ArmeriaServerBuilderInstrumentation.class.getName() + \"$SuppressDecoratorAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.This ServerBuilder builder) {\n+      builder.decorator(OpenTelemetryService.newDecorator());\n+    }\n+  }\n+\n+  public static class SuppressDecoratorAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)\n+    public static boolean suppressDecorator(@Advice.Argument(0) Function<?, ?> decorator) {\n+      return decorator\n+          .getClass()\n+          .getName()\n+          .equals(\n+              \"io.opentelemetry.instrumentation.armeria.v1_0.server.OpenTelemetryService$Decorator\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2MTg5MA=="}, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTg5NjQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/auto/armeria-1.0-auto.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo0NDozMFrOG-BQ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo0NDozMFrOG-BQ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NTYwNg==", "bodyText": "path: is not needed here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467685606", "createdAt": "2020-08-10T04:44:30Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/auto/armeria-1.0-auto.gradle", "diffHunk": "@@ -20,5 +20,6 @@ dependencies {\n \n   compileOnly group: 'com.linecorp.armeria', name: 'armeria', version: '0.99.8'\n \n+  testImplementation project(path: ':instrumentation:armeria-1.0:library')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTg5Njc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo0NDo1M1rOG-BRFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozMjo0M1rOG_VRzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NTY1NA==", "bodyText": "Not sure if this comment is helping or confusing :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467685654", "createdAt": "2020-08-10T04:44:53Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java", "diffHunk": "@@ -29,7 +29,12 @@ public AbstractArmeriaInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      packageName + \".shaded.internal.ContextUtil\",\n+      packageName + \".shaded.client.ArmeriaClientTracer\",\n+      packageName + \".shaded.client.ArmeriaClientTracer$ArmeriaSetter\",\n+      packageName + \".shaded.client.OpenTelemetryClient\",\n+      packageName + \".shaded.client.OpenTelemetryClient$Decorator\",\n+      // .thenAccept(log -> lambda", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MjA5Mg==", "bodyText": "Tried a bit harder", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469062092", "createdAt": "2020-08-12T07:32:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/auto/src/main/java/io/opentelemetry/auto/instrumentation/armeria/v1_0/AbstractArmeriaInstrumentation.java", "diffHunk": "@@ -29,7 +29,12 @@ public AbstractArmeriaInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      packageName + \".shaded.internal.ContextUtil\",\n+      packageName + \".shaded.client.ArmeriaClientTracer\",\n+      packageName + \".shaded.client.ArmeriaClientTracer$ArmeriaSetter\",\n+      packageName + \".shaded.client.OpenTelemetryClient\",\n+      packageName + \".shaded.client.OpenTelemetryClient$Decorator\",\n+      // .thenAccept(log -> lambda", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NTY1NA=="}, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTkwNjc0OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo1MzowN1rOG-BWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo1MzowN1rOG-BWpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzA3OA==", "bodyText": "Although this is a nice way to ensure only one instance of the class exists in JVM, it differs from all other instrumentations. Unless there is some strong reason for such differences, I prefer to have uniform codebase.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467687078", "createdAt": "2020-08-10T04:53:07Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/ArmeriaClientTracer.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+public class ArmeriaClientTracer extends HttpClientTracer<ClientRequestContext, RequestLog> {\n+\n+  ArmeriaClientTracer() {}\n+\n+  ArmeriaClientTracer(Tracer tracer) {\n+    super(tracer);\n+  }\n+\n+  @Override\n+  protected String method(ClientRequestContext ctx) {\n+    return ctx.method().name();\n+  }\n+\n+  @Override\n+  protected URI url(ClientRequestContext ctx) throws URISyntaxException {\n+    return ctx.request().uri();\n+  }\n+\n+  @Override\n+  protected Integer status(RequestLog log) {\n+    return log.responseHeaders().status().code();\n+  }\n+\n+  @Override\n+  protected String requestHeader(ClientRequestContext ctx, String name) {\n+    return ctx.request().headers().get(name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(RequestLog log, String name) {\n+    return log.responseHeaders().get(name);\n+  }\n+\n+  @Override\n+  protected Setter<ClientRequestContext> getSetter() {\n+    return ArmeriaSetter.INSTANCE;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.armeria-1.0\";\n+  }\n+\n+  private enum ArmeriaSetter implements Setter<ClientRequestContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTkwOTU0OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNDo1NTowOFrOG-BYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0MjowOVrOG_r0vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA==", "bodyText": "Just to be sure: you start new scope even if span is not recording?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r467687454", "createdAt": "2020-08-10T04:55:08Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpClient} to trace outbound {@link HttpResponse}s. */\n+public class OpenTelemetryClient extends SimpleDecoratingHttpClient {\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the default {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator() {\n+    return new Decorator(new ArmeriaClientTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the specified {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaClientTracer(tracer));\n+  }\n+\n+  /**\n+   * Creates a new tracing {@link HttpClient} decorator using the specified {@link\n+   * ArmeriaClientTracer}.\n+   */\n+  public static OpenTelemetryClient.Decorator newDecorator(ArmeriaClientTracer clientTracer) {\n+    return new Decorator(clientTracer);\n+  }\n+\n+  private final ArmeriaClientTracer clientTracer;\n+\n+  private OpenTelemetryClient(HttpClient delegate, ArmeriaClientTracer clientTracer) {\n+    super(delegate);\n+    this.clientTracer = clientTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = clientTracer.startSpan(ctx, requestStartTimeNanos);\n+\n+    if (span.isRecording()) {\n+      ctx.log()\n+          .whenComplete()\n+          .thenAccept(\n+              log -> {\n+                BaseTracer.onPeerConnection(span, ctx.remoteAddress());\n+\n+                long requestEndTimeNanos = requestStartTimeNanos + log.responseDurationNanos();\n+                if (log.responseCause() != null) {\n+                  clientTracer.endExceptionally(\n+                      span, log, log.responseCause(), requestEndTimeNanos);\n+                } else {\n+                  clientTracer.end(span, log, requestEndTimeNanos);\n+                }\n+              });\n+    }\n+\n+    try (Scope ignored = clientTracer.startScope(span, ctx)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NjUzMA==", "bodyText": "Yeah - I think it's required for logs injection", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469096530", "createdAt": "2020-08-12T08:33:57Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpClient} to trace outbound {@link HttpResponse}s. */\n+public class OpenTelemetryClient extends SimpleDecoratingHttpClient {\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the default {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator() {\n+    return new Decorator(new ArmeriaClientTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the specified {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaClientTracer(tracer));\n+  }\n+\n+  /**\n+   * Creates a new tracing {@link HttpClient} decorator using the specified {@link\n+   * ArmeriaClientTracer}.\n+   */\n+  public static OpenTelemetryClient.Decorator newDecorator(ArmeriaClientTracer clientTracer) {\n+    return new Decorator(clientTracer);\n+  }\n+\n+  private final ArmeriaClientTracer clientTracer;\n+\n+  private OpenTelemetryClient(HttpClient delegate, ArmeriaClientTracer clientTracer) {\n+    super(delegate);\n+    this.clientTracer = clientTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = clientTracer.startSpan(ctx, requestStartTimeNanos);\n+\n+    if (span.isRecording()) {\n+      ctx.log()\n+          .whenComplete()\n+          .thenAccept(\n+              log -> {\n+                BaseTracer.onPeerConnection(span, ctx.remoteAddress());\n+\n+                long requestEndTimeNanos = requestStartTimeNanos + log.responseDurationNanos();\n+                if (log.responseCause() != null) {\n+                  clientTracer.endExceptionally(\n+                      span, log, log.responseCause(), requestEndTimeNanos);\n+                } else {\n+                  clientTracer.end(span, log, requestEndTimeNanos);\n+                }\n+              });\n+    }\n+\n+    try (Scope ignored = clientTracer.startScope(span, ctx)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA=="}, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMTQ4Ng==", "bodyText": "ah, interesting, hadn't thought of that \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/920#discussion_r469431486", "createdAt": "2020-08-12T17:42:09Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/client/OpenTelemetryClient.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v1_0.client;\n+\n+import com.linecorp.armeria.client.ClientRequestContext;\n+import com.linecorp.armeria.client.HttpClient;\n+import com.linecorp.armeria.client.SimpleDecoratingHttpClient;\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.BaseTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpClient} to trace outbound {@link HttpResponse}s. */\n+public class OpenTelemetryClient extends SimpleDecoratingHttpClient {\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the default {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator() {\n+    return new Decorator(new ArmeriaClientTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpClient} decorator using the specified {@link Tracer}. */\n+  public static OpenTelemetryClient.Decorator newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaClientTracer(tracer));\n+  }\n+\n+  /**\n+   * Creates a new tracing {@link HttpClient} decorator using the specified {@link\n+   * ArmeriaClientTracer}.\n+   */\n+  public static OpenTelemetryClient.Decorator newDecorator(ArmeriaClientTracer clientTracer) {\n+    return new Decorator(clientTracer);\n+  }\n+\n+  private final ArmeriaClientTracer clientTracer;\n+\n+  private OpenTelemetryClient(HttpClient delegate, ArmeriaClientTracer clientTracer) {\n+    super(delegate);\n+    this.clientTracer = clientTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = clientTracer.startSpan(ctx, requestStartTimeNanos);\n+\n+    if (span.isRecording()) {\n+      ctx.log()\n+          .whenComplete()\n+          .thenAccept(\n+              log -> {\n+                BaseTracer.onPeerConnection(span, ctx.remoteAddress());\n+\n+                long requestEndTimeNanos = requestStartTimeNanos + log.responseDurationNanos();\n+                if (log.responseCause() != null) {\n+                  clientTracer.endExceptionally(\n+                      span, log, log.responseCause(), requestEndTimeNanos);\n+                } else {\n+                  clientTracer.end(span, log, requestEndTimeNanos);\n+                }\n+              });\n+    }\n+\n+    try (Scope ignored = clientTracer.startScope(span, ctx)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4NzQ1NA=="}, "originalCommit": {"oid": "9c68f80800813cb5704a209390798546da76ca51"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4993, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}