{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4ODIyNzkw", "number": 479, "title": "Configured trace config to read from env vars/sys props", "bodyText": "Added SpringBootWithSamplingSmokeTest.groovyin springboot smoke tests to test sampling.\n@iNikem @trask Do you see any other way to test this configured sampling?\nCloses #374", "createdAt": "2020-06-05T22:43:55Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479", "merged": true, "mergeCommit": {"oid": "109d68415226d02899eabfeb9c6eeeccb8de84d7"}, "closed": true, "closedAt": "2020-06-08T06:54:19Z", "author": {"login": "RashmiRam"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoaiougH2gAyNDI4ODIyNzkwOjA0NGYyMDEzYzU5ZjdiZTAwNWE3ODJiMjIwOTAwN2VjYWQ0N2E5Y2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpKRZnAFqTQyNTkzODMzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "044f2013c59f7be005a782b2209007ecad47a9cf", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044f2013c59f7be005a782b2209007ecad47a9cf", "committedDate": "2020-06-05T22:38:25Z", "message": "Configured trace config to read from env vars/sys props"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46db1554b87877f074d167698d04ec84cf6b5284", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/46db1554b87877f074d167698d04ec84cf6b5284", "committedDate": "2020-06-06T00:06:07Z", "message": "Fixed the codenarc violation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzAzNDA1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#pullrequestreview-425703405", "createdAt": "2020-06-06T01:49:33Z", "commit": {"oid": "46db1554b87877f074d167698d04ec84cf6b5284"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo0OTozNFrOGgBK0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMTo0OTozNFrOGgBK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyNjc2OA==", "bodyText": "i think the test might pass currently even if sampling is not configured above, because SpanCounter stops counting spans as soon as it hits the targets\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                def spanCounter = new SpanCounter(logfile, [\n          \n          \n            \n                  (HANDLER_SPAN): SPAN_COUNT_TARGET,\n          \n          \n            \n                  (SERVLET_SPAN): SPAN_COUNT_TARGET,\n          \n          \n            \n                ], 10000)\n          \n          \n            \n                // since sampling is enabled, not really expecting to receive NUM_TRIES spans,\n          \n          \n            \n                // instead giving it 10 seconds and then checking below how many spans were received\n          \n          \n            \n                def spanCounter = new SpanCounter(logfile, [\n          \n          \n            \n                  (HANDLER_SPAN): NUM_TRIES,\n          \n          \n            \n                  (SERVLET_SPAN): NUM_TRIES,\n          \n          \n            \n                ], 10000)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#discussion_r436226768", "createdAt": "2020-06-06T01:49:34Z", "author": {"login": "trask"}, "path": "smoke-tests/springboot/src/test/groovy/io/opentelemetry/smoketest/SpringBootWithSamplingSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.smoketest\n+\n+import okhttp3.Request\n+\n+class SpringBootWithSamplingSmokeTest extends AbstractServerSmokeTest {\n+\n+  static final HANDLER_SPAN = \"LOGGED_SPAN WebController.greeting\"\n+  static final SERVLET_SPAN = \"LOGGED_SPAN /greeting\"\n+  static final double SAMPLER_PROBABILITY = 0.2\n+  static final int NUM_TRIES = 1000\n+  static final int ALLOWED_DEVIATION = 0.1 * NUM_TRIES\n+  static final int SPAN_COUNT_TARGET = (SAMPLER_PROBABILITY + 0.1) * NUM_TRIES\n+\n+\n+  @Override\n+  ProcessBuilder createProcessBuilder() {\n+    String springBootShadowJar = System.getProperty(\"io.opentelemetry.smoketest.springboot.shadowJar.path\")\n+\n+    List<String> command = new ArrayList<>()\n+    command.add(javaPath())\n+    command.addAll(defaultJavaProperties)\n+    command.addAll((String[]) [\"-Dota.exporter.jar=${exporterPath}\", \"-Dota.exporter.logging.prefix=LOGGED_SPAN\", \"-jar\", springBootShadowJar, \"--server.port=${httpPort}\"])\n+    ProcessBuilder processBuilder = new ProcessBuilder(command)\n+    processBuilder.environment().put(\"OTEL_CONFIG_SAMPLER_PROBABILITY\", \"${SAMPLER_PROBABILITY}\")\n+    processBuilder.directory(new File(buildDirectory))\n+  }\n+\n+  def \"default home page with probability sampling enabled\"() {\n+    setup:\n+    def spanCounter = new SpanCounter(logfile, [\n+      (HANDLER_SPAN): SPAN_COUNT_TARGET,\n+      (SERVLET_SPAN): SPAN_COUNT_TARGET,\n+    ], 10000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46db1554b87877f074d167698d04ec84cf6b5284"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84217356a65b1e67cc685aa42ab517da4b6e8e09", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84217356a65b1e67cc685aa42ab517da4b6e8e09", "committedDate": "2020-06-06T06:32:16Z", "message": "Addressing review comments\n\n1. Updated span count target to num_tries in the test since SpanCounter stops counting spans as soon as it hits the targets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzIzNzc5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#pullrequestreview-425723779", "createdAt": "2020-06-06T08:15:15Z", "commit": {"oid": "84217356a65b1e67cc685aa42ab517da4b6e8e09"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwODoxNToxNVrOGgClfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwODoxOTozNlrOGgCmWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0OTk4MQ==", "bodyText": "This is now unused?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#discussion_r436249981", "createdAt": "2020-06-06T08:15:15Z", "author": {"login": "iNikem"}, "path": "smoke-tests/springboot/src/test/groovy/io/opentelemetry/smoketest/SpringBootWithSamplingSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.smoketest\n+\n+import okhttp3.Request\n+\n+class SpringBootWithSamplingSmokeTest extends AbstractServerSmokeTest {\n+\n+  static final HANDLER_SPAN = \"LOGGED_SPAN WebController.greeting\"\n+  static final SERVLET_SPAN = \"LOGGED_SPAN /greeting\"\n+  static final double SAMPLER_PROBABILITY = 0.2\n+  static final int NUM_TRIES = 1000\n+  static final int ALLOWED_DEVIATION = 0.1 * NUM_TRIES\n+  static final int SPAN_COUNT_TARGET = (SAMPLER_PROBABILITY + 0.1) * NUM_TRIES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84217356a65b1e67cc685aa42ab517da4b6e8e09"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1MDIwMg==", "bodyText": "I am not sure this is the right place for this code. This method is called installExportersFromJar, does not seem to be related to sampling. I would create a new method, e.g. configure or configureSampler, and call it from installAgentTracer method. Independently of exporter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#discussion_r436250202", "createdAt": "2020-06-06T08:19:36Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -75,6 +76,14 @@ private static synchronized void installExportersFromJar(final String exporterJa\n               .readEnvironmentVariables()\n               .readSystemProperties()\n               .build();\n+      TraceConfig activeTraceConfig = OpenTelemetrySdk.getTracerProvider().getActiveTraceConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84217356a65b1e67cc685aa42ab517da4b6e8e09"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81dea272b342a220ae0abc276077155d5909dafc", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/81dea272b342a220ae0abc276077155d5909dafc", "committedDate": "2020-06-08T05:53:31Z", "message": "Extracted the configure method outside of installExportersFromJar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc777ed5ff6f80d2db2f0d6884df9a7985d65147", "author": {"user": {"login": "RashmiRam", "name": "Rashmi"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc777ed5ff6f80d2db2f0d6884df9a7985d65147", "committedDate": "2020-06-08T06:09:57Z", "message": "Addressing comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTM4MzM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/479#pullrequestreview-425938334", "createdAt": "2020-06-08T06:15:02Z", "commit": {"oid": "bc777ed5ff6f80d2db2f0d6884df9a7985d65147"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3215, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}