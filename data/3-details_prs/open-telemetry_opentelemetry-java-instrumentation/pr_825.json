{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDg0MzQ2", "number": 825, "title": "Tests for spring-boot-autoconfigure", "bodyText": "spring-boot-autoconfigure tests for:\n\nJaegerSpanExporter\nOtlpSpanExporter\nZipkinSpanExporter", "createdAt": "2020-07-28T22:08:06Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825", "merged": true, "mergeCommit": {"oid": "d8ba6e3d51b934356c00631c36d1b43c3a88ed67"}, "closed": true, "closedAt": "2020-07-31T18:52:18Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5eZWCABqjM1OTY1MjQ5MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6Y3n5AFqTQ1OTM5MDE1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5b21fa65778e2f69d91ab56affe00de09cbce66", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5b21fa65778e2f69d91ab56affe00de09cbce66", "committedDate": "2020-07-28T22:43:17Z", "message": "otlp draft"}, "afterCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e", "committedDate": "2020-07-28T22:44:21Z", "message": "otlp draft"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTU5NTM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#pullrequestreview-457159534", "createdAt": "2020-07-29T02:53:06Z", "commit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1MzowNlrOG4mrNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjo1NTozNVrOG4mt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzA5Mw==", "bodyText": "Sorry I think I missed it in the previous test PR - can you use assertj? Otherwise you should definitely use the jupiter assertions instead of junit4, but assertj is even better", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007093", "createdAt": "2020-07-29T02:53:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzEzMw==", "bodyText": "With jupiter, class / methods are generally not public", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007133", "createdAt": "2020-07-29T02:53:16Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA==", "bodyText": "Would probably use a simpler, more java-idiomatic method name and DisplayName annotation instead\nhttps://junit.org/junit5/docs/5.0.3/api/org/junit/jupiter/api/DisplayName.html", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007294", "createdAt": "2020-07-29T02:53:53Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzQ1Mg==", "bodyText": "(I had these two comments as draft comments on the other PR ><)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007452", "createdAt": "2020-07-29T02:54:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzI5NA=="}, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwNzgwNg==", "bodyText": "I think this test is only really checking JaegerGrpcSpanExporterProperties, not that the properties are actually applied, which is probably not really possible. So can update the naming", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462007806", "createdAt": "2020-07-29T02:55:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+public class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_when_exporters_are_ENABLED() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertNotNull(\n+                  \"Application Context contains JaegerGrpcSpanExporter bean\",\n+                  context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class));\n+            });\n+  }\n+\n+  @Test\n+  public void should_initialize_JaegerGrpcSpanExporter_bean_with_property_values() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49ad1d12d55092a8cd3651a65f66d3a80e8b1f4e"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d60397f19b78dbfad988e835c93cdf4a44e9dede", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d60397f19b78dbfad988e835c93cdf4a44e9dede", "committedDate": "2020-07-29T14:40:41Z", "message": "add logging otlp and zpikin tests"}, "afterCommit": {"oid": "d4ada011030cfa6352094e7dd6fb2971ab480515", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4ada011030cfa6352094e7dd6fb2971ab480515", "committedDate": "2020-07-29T14:42:27Z", "message": "add logging otlp and zpikin tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MDEyMzgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#pullrequestreview-458012381", "createdAt": "2020-07-30T01:32:28Z", "commit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozMjoyOVrOG5P33Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMTozNToxMVrOG5P7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjA3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n          \n          \n            \n              void exportersEnabled() {\n          \n      \n    \n    \n  \n\nI'd find a short method name that captures as much intent when adding a longer display name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682077", "createdAt": "2020-07-30T01:32:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjI4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n          \n          \n            \n              void handlesProperties() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682285", "createdAt": "2020-07-30T01:32:48Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n          \n          \n            \n              void disabledProperty() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682414", "createdAt": "2020-07-30T01:33:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MjYwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {\n          \n          \n            \n              void noProperty() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462682603", "createdAt": "2020-07-30T01:33:47Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\"when exporters are DISABLED should NOT initialize JaegerGrpcSpanExporter bean\")\n+  void shouldNotInitializeJaegerGrpcSpanExporterBeanWhenExportersAreDisabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporter.jaeger.enabled=false\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.containsBean(\"otelJaegerSpanExporter\")).isFalse();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when jaeger enabled property is MISSING should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenJaegerEnabledPropertyIsMissing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MzAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n          \n          \n            \n                              .isEqualTo(Duration.ofMillis(420));\n          \n          \n            \n                          assertThat(jaegerSpanExporterProperties.getSpanTimeout()).hasMillis(420);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#discussion_r462683024", "createdAt": "2020-07-30T01:35:11Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.TracerAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterAutoConfiguration;\n+import io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger.JaegerSpanExporterProperties;\n+import java.time.Duration;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+\n+/** Spring Boot auto configuration test for {@link JaegerGrpcSpanExporter}. */\n+class JaegerSpanExporterAutoConfigurationTest {\n+\n+  private final ApplicationContextRunner contextRunner =\n+      new ApplicationContextRunner()\n+          .withConfiguration(\n+              AutoConfigurations.of(\n+                  TracerAutoConfiguration.class, JaegerSpanExporterAutoConfiguration.class));\n+\n+  @Test\n+  @DisplayName(\"when exporters are ENABLED should initialize JaegerGrpcSpanExporter bean\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWhenExportersAreEnabled() {\n+    this.contextRunner\n+        .withPropertyValues(\"opentelemetry.trace.exporters.jaeger.enabled=true\")\n+        .run(\n+            (context) -> {\n+              assertThat(context.getBean(\"otelJaegerSpanExporter\", JaegerGrpcSpanExporter.class))\n+                  .isNotNull();\n+            });\n+  }\n+\n+  @Test\n+  @DisplayName(\n+      \"when opentelemetry.trace.exporter.jaeger properties are set should initialize JaegerSpanExporterProperties\")\n+  void shouldInitializeJaegerGrpcSpanExporterBeanWithPropertyValues() {\n+    this.contextRunner\n+        .withPropertyValues(\n+            \"opentelemetry.trace.exporter.jaeger.enabled=true\",\n+            \"opentelemetry.trace.exporter.jaeger.servicename=test\",\n+            \"opentelemetry.trace.exporter.jaeger.endpoint=localhost:8080/test\",\n+            \"opentelemetry.trace.exporter.jaeger.spantimeout=420ms\")\n+        .run(\n+            (context) -> {\n+              JaegerSpanExporterProperties jaegerSpanExporterProperties =\n+                  context.getBean(JaegerSpanExporterProperties.class);\n+              assertThat(jaegerSpanExporterProperties.getServiceName()).isEqualTo(\"test\");\n+              assertThat(jaegerSpanExporterProperties.getEndpoint())\n+                  .isEqualTo(\"localhost:8080/test\");\n+              assertThat(jaegerSpanExporterProperties.getSpanTimeout())\n+                  .isEqualTo(Duration.ofMillis(420));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78be5c58f61a8bf989879fa992acefedce3c106f"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQzNzQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#pullrequestreview-458843744", "createdAt": "2020-07-31T00:15:11Z", "commit": {"oid": "9ce902012f85319d345387f70468984f2c13344b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c632ef3a2299ed9dea5956619d8efbec2c8699", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/92c632ef3a2299ed9dea5956619d8efbec2c8699", "committedDate": "2020-07-31T01:47:58Z", "message": "test for jaeger exporter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe2ae8cf5c3402a218a44aecd7bc404befcfe671", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe2ae8cf5c3402a218a44aecd7bc404befcfe671", "committedDate": "2020-07-31T01:47:58Z", "message": "otlp draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0056aa223e52374e66c1ea33246a345e5e32f8db", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0056aa223e52374e66c1ea33246a345e5e32f8db", "committedDate": "2020-07-31T01:47:58Z", "message": "add logging otlp and zpikin tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827dfd58e565c28c5aeeb9bb2af16126aec93c16", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/827dfd58e565c28c5aeeb9bb2af16126aec93c16", "committedDate": "2020-07-31T01:47:58Z", "message": "fix for zipkin test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c4b95142cedf9d5d55319c09819e2b351a2afb", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f1c4b95142cedf9d5d55319c09819e2b351a2afb", "committedDate": "2020-07-31T01:47:58Z", "message": "use assertj with exporters and fix method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b618695a87ac3ea0a956dbd1a5b7b16c1a0a90b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b618695a87ac3ea0a956dbd1a5b7b16c1a0a90b", "committedDate": "2020-07-31T01:47:58Z", "message": "make methods package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8283a2c5a3dd70a963241355e7e6d0177530dd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e8283a2c5a3dd70a963241355e7e6d0177530dd", "committedDate": "2020-07-31T01:47:58Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccad73dacfcb7ac2c85f2941b8e389dfb36bbf15", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccad73dacfcb7ac2c85f2941b8e389dfb36bbf15", "committedDate": "2020-07-31T01:47:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a575bb2ef8fade129e86b40dd03c62c7bd61e8", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a3a575bb2ef8fade129e86b40dd03c62c7bd61e8", "committedDate": "2020-07-31T01:47:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6026c5d4a90a2ea833a2d978a50774e8e4b458d9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6026c5d4a90a2ea833a2d978a50774e8e4b458d9", "committedDate": "2020-07-31T01:47:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b09e87c4881ec1d7c22f9d6f83e948ee4eb368", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61b09e87c4881ec1d7c22f9d6f83e948ee4eb368", "committedDate": "2020-07-31T01:47:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bff2608821eeffd5be144d44ea0f200ab1ea01f9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bff2608821eeffd5be144d44ea0f200ab1ea01f9", "committedDate": "2020-07-31T01:47:59Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/JaegerSpanExporterAutoConfigurationTest.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ce902012f85319d345387f70468984f2c13344b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9ce902012f85319d345387f70468984f2c13344b", "committedDate": "2020-07-31T00:05:11Z", "message": "new method names"}, "afterCommit": {"oid": "2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "committedDate": "2020-07-31T01:47:59Z", "message": "new method names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e3d97f8ee3d07e099e82b7596c1c79f5a5b12c1", "committedDate": "2020-07-31T01:47:59Z", "message": "new method names"}, "afterCommit": {"oid": "842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "committedDate": "2020-07-31T02:24:07Z", "message": "new method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b29ac0d8474916428ec747996dc99db462864f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38b29ac0d8474916428ec747996dc99db462864f", "committedDate": "2020-07-31T02:27:33Z", "message": "new method names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/842dc2dd649f688e9d8fc7d400a4fce3cbf612cd", "committedDate": "2020-07-31T02:24:07Z", "message": "new method names"}, "afterCommit": {"oid": "38b29ac0d8474916428ec747996dc99db462864f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38b29ac0d8474916428ec747996dc99db462864f", "committedDate": "2020-07-31T02:27:33Z", "message": "new method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f89a0e4e5bb98cf354fd696f90849b4267649e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86f89a0e4e5bb98cf354fd696f90849b4267649e", "committedDate": "2020-07-31T03:38:12Z", "message": "fix otlp test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzkwMTU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/825#pullrequestreview-459390159", "createdAt": "2020-07-31T18:52:10Z", "commit": {"oid": "86f89a0e4e5bb98cf354fd696f90849b4267649e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}