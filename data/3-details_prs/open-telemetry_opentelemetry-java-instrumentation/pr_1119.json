{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MTA4Njk1", "number": 1119, "title": "Only include dependencies from exporters when there are dupes.", "bodyText": "I was having a strange linkage error when trying to update my agent distribution to the latest version (copied at bottom). After comparing my distribution and our published jar, the main difference was that the published jar has two copies of opentelemetry-sdk dependencies, such as guava and grpc-context. I tried adding exclude in our build and could reproduce the same linkage error in our smoke tests (have to do ./gradlew :javaagent:clean first! \ud83d\ude2d ). Then reversing the order we add to the jar fixed it. From what I can tell, when I add a dependency on our published artifact, for whatever reason it seems to only read in the first entry of the file (maybe just by nature of how shadow plugin reads zips).\nThe root cause should be some sort of dependency hell, but I checked :instrumentation:dependencies and :javaagent-exporters:dependencies and they both have the same version of grpc-context.\nSo I don't know if this is the right fix, but I'm out of clues on how to investigate more, but I could confirm that when I built my distribution off of the agent from this PR, the error is gone.\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: Exception in thread \"BatchSpanProcessor_WorkerThread_1\" java.lang.VerifyError: Bad return type\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: Exception Details:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Location:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     io/grpc/Context$LazyStorage.createStorage(Ljava/util/concurrent/atomic/AtomicReference;)Lio/grpc/Context$Storage; @43: areturn\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Reason:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     Type 'io/grpc/ThreadLocalContextStorage' (current frame, stack[0]) is not assignable to 'io/grpc/Context$Storage' (from method signature)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Current Frame:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     bci: @43\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     flags: { }\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     locals: { 'java/util/concurrent/atomic/AtomicReference', 'java/lang/ClassNotFoundException' }\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     stack: { 'io/grpc/ThreadLocalContextStorage' }\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Bytecode:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     0000000: 121c b800 224c 2b12 07b6 0026 03bd 001e\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     0000010: b600 2a03 bd00 04b6 0030 c000 07b0 4c2a\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     0000020: 2bb6 0036 bb00 3859 b700 39b0 4cbb 003b\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     0000030: 5912 3d2b b700 40bf                    \n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Exception Handler Table:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     bci [0, 29] => handler: 30\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     bci [0, 29] => handler: 44\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:   Stackmap Table:\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     same_locals_1_stack_item_frame(@30,Object[#24])\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR:     same_locals_1_stack_item_frame(@44,Object[#26])\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.Context.storage(Context.java:119)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.Context.current(Context.java:185)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.internal.CensusTracingModule$TracingClientInterceptor.interceptCall(CensusTracingModule.java:386)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.ClientInterceptors$InterceptorChannel.newCall(ClientInterceptors.java:156)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.internal.CensusStatsModule$StatsClientInterceptor.interceptCall(CensusStatsModule.java:691)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.ClientInterceptors$InterceptorChannel.newCall(ClientInterceptors.java:156)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.internal.ManagedChannelImpl.newCall(ManagedChannelImpl.java:826)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.grpc.internal.ForwardingManagedChannel.newCall(ForwardingManagedChannel.java:63)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.opentelemetry.proto.collector.trace.v1.TraceServiceGrpc$TraceServiceFutureStub.export(TraceServiceGrpc.java:234)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.opentelemetry.exporters.otlp.OtlpGrpcSpanExporter.export(OtlpGrpcSpanExporter.java:122)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.opentelemetry.sdk.trace.export.BatchSpanProcessor$Worker.exportCurrentBatch(BatchSpanProcessor.java:267)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat io.opentelemetry.sdk.trace.export.BatchSpanProcessor$Worker.run(BatchSpanProcessor.java:218)\n[tc-okhttp-stream-1782617518] INFO io.awsobservability.instrumentation.smoketests.runner.SpringBootSmokeTest - STDERR: \tat java.base/java.lang.Thread.run(Unknown Source)", "createdAt": "2020-08-28T05:49:13Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119", "merged": true, "mergeCommit": {"oid": "899263612d338a85310eec4e3c54aaac32aef327"}, "closed": true, "closedAt": "2020-08-31T04:27:52Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDOYQ_gH2gAyNDc1MTA4Njk1OmExZmFmNDUyODY4YTgzNmFiZjc0YmIxZjAzMzg0ZTEzNzQzOWM3Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEK35LAFqTQ3ODI5NTgwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1faf452868a836abf74bb1f03384e137439c767", "committedDate": "2020-08-28T05:44:11Z", "message": "Only include dependencies from exporters when there are dupes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NjE5MzQ5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#pullrequestreview-477619349", "createdAt": "2020-08-28T10:27:08Z", "commit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTYzNzE2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#pullrequestreview-478163716", "createdAt": "2020-08-30T01:04:04Z", "commit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTY5MzM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#pullrequestreview-478169339", "createdAt": "2020-08-30T03:46:47Z", "commit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMzo0Njo0N1rOHJfncw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMzo1MDo1OFrOHJfoog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzIzNQ==", "bodyText": "better to prefer classes that we've used to build/test instrumentation?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              def projectsWithShadowJar = [project(':javaagent-exporters'), project(':instrumentation')]\n          \n          \n            \n              def projectsWithShadowJar = [project(':instrumentation'), project(':javaagent-exporters')]", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#discussion_r479717235", "createdAt": "2020-08-30T03:46:47Z", "author": {"login": "trask"}, "path": "javaagent/javaagent.gradle", "diffHunk": "@@ -42,8 +42,14 @@ CopySpec isolateSpec(Collection<Project> projectsWithShadowJar) {\n shadowJar {\n   dependsOn ':instrumentation:shadowJar'\n   dependsOn ':javaagent-exporters:shadowJar'\n-  def projectsWithShadowJar = [project(':instrumentation'), project(':javaagent-exporters')]\n+  def projectsWithShadowJar = [project(':javaagent-exporters'), project(':instrumentation')]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNzUzOA==", "bodyText": "the exporter classloader is only used for loading external exporter jar files\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Exclude dependencies pulled in from instrumentation that exist in javaagent-exporters.\n          \n          \n            \n              // Instrumentation is in the agent class loader, which is the parent for the exporter classloader\n          \n          \n            \n              // and will be used, removing duplicates can prevent issues when downstream projects repackage the\n          \n          \n            \n              // jar.\n          \n          \n            \n              // Exclude class files pulled in from the javaagent-exporters project that are also pulled in from the\n          \n          \n            \n              // instrumentation project.\n          \n          \n            \n              // Removing duplicates reduces jar size and can prevent issues when downstream projects repackage\n          \n          \n            \n              // the jar.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#discussion_r479717538", "createdAt": "2020-08-30T03:50:58Z", "author": {"login": "trask"}, "path": "javaagent/javaagent.gradle", "diffHunk": "@@ -42,8 +42,14 @@ CopySpec isolateSpec(Collection<Project> projectsWithShadowJar) {\n shadowJar {\n   dependsOn ':instrumentation:shadowJar'\n   dependsOn ':javaagent-exporters:shadowJar'\n-  def projectsWithShadowJar = [project(':instrumentation'), project(':javaagent-exporters')]\n+  def projectsWithShadowJar = [project(':javaagent-exporters'), project(':instrumentation')]\n   with isolateSpec(projectsWithShadowJar)\n+\n+  // Exclude dependencies pulled in from instrumentation that exist in javaagent-exporters.\n+  // Instrumentation is in the agent class loader, which is the parent for the exporter classloader\n+  // and will be used, removing duplicates can prevent issues when downstream projects repackage the\n+  // jar.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1faf452868a836abf74bb1f03384e137439c767"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce91881fc2ab112372aa195b94793ddffee5a15", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1ce91881fc2ab112372aa195b94793ddffee5a15", "committedDate": "2020-08-31T01:58:02Z", "message": "Update javaagent/javaagent.gradle\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed797c344751e70e4b5a11d69e02cf87d5370947", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed797c344751e70e4b5a11d69e02cf87d5370947", "committedDate": "2020-08-31T02:08:27Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into only-include-exporter-dependencies-when-dupe"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Mjk1ODAz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1119#pullrequestreview-478295803", "createdAt": "2020-08-31T04:13:02Z", "commit": {"oid": "ed797c344751e70e4b5a11d69e02cf87d5370947"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2514, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}