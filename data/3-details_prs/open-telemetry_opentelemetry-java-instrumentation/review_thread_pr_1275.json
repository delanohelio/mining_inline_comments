{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTE5MzUy", "number": 1275, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMDoyNVrOEoTW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjozOTowNVrOEoVB9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjk1NjU3OnYy", "diffSide": "LEFT", "path": "instrumentation/servlet/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMDoyNVrOHZT5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDoxMDoyNVrOHZT5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMjQzNw==", "bodyText": "\ud83d\ude04\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1275#discussion_r496302437", "createdAt": "2020-09-29T00:10:25Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/README.md", "diffHunk": "@@ -92,11 +92,6 @@ Of course, still adhering to OpenTelemetry\n `javax.servlet.RequestDispatcher.include` methods to create new `INTERNAL` spans around their\n invocations.\n \n-`ServletContextInstrumentation` instruments `javax.servlet.ServletContext.getRequestDispatcher` and\n-`javax.servlet.ServletContext.getNamedDispatcher`. The only job of this instrumentation is to\n-preserve the input parameter of those methods and to make that available for `RequestDispatcherInstrumentation`\n-described above. The latter uses that name for `dispatcher.target` span attribute.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b159675e72574ec9cc0d734be6acb0f7a3f30d37"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzIzMDYxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-scheduling-3.1/src/main/java/io/opentelemetry/instrumentation/auto/spring/scheduling/SpringSchedulingRunnableWrapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjozOTowNVrOHZWdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjowNzo0NlrOHZcMdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0NDM2MQ==", "bodyText": "Should this be Kind.SERVER since it's a \"root\" span?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1275#discussion_r496344361", "createdAt": "2020-09-29T02:39:05Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-scheduling-3.1/src/main/java/io/opentelemetry/instrumentation/auto/spring/scheduling/SpringSchedulingRunnableWrapper.java", "diffHunk": "@@ -34,18 +35,14 @@ public void run() {\n     if (runnable == null) {\n       return;\n     }\n-    Span span =\n-        TRACER.spanBuilder(SpringSchedulingDecorator.DECORATE.spanNameOnRun(runnable)).startSpan();\n-    SpringSchedulingDecorator.DECORATE.afterStart(span);\n+    Span span = TRACER.startSpan(TRACER.spanNameOnRun(runnable), Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b159675e72574ec9cc0d734be6acb0f7a3f30d37"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM5ODM5MQ==", "bodyText": "It was INTERNAL before, I haven't changed that. But you have a point... I don' know :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1275#discussion_r496398391", "createdAt": "2020-09-29T04:54:39Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-scheduling-3.1/src/main/java/io/opentelemetry/instrumentation/auto/spring/scheduling/SpringSchedulingRunnableWrapper.java", "diffHunk": "@@ -34,18 +35,14 @@ public void run() {\n     if (runnable == null) {\n       return;\n     }\n-    Span span =\n-        TRACER.spanBuilder(SpringSchedulingDecorator.DECORATE.spanNameOnRun(runnable)).startSpan();\n-    SpringSchedulingDecorator.DECORATE.afterStart(span);\n+    Span span = TRACER.startSpan(TRACER.spanNameOnRun(runnable), Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0NDM2MQ=="}, "originalCommit": {"oid": "b159675e72574ec9cc0d734be6acb0f7a3f30d37"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODM5MQ==", "bodyText": "I don't think scheduling tasks are really server (no chance of ever being connected to a client). Seems ok to me.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1275#discussion_r496438391", "createdAt": "2020-09-29T06:07:46Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-scheduling-3.1/src/main/java/io/opentelemetry/instrumentation/auto/spring/scheduling/SpringSchedulingRunnableWrapper.java", "diffHunk": "@@ -34,18 +35,14 @@ public void run() {\n     if (runnable == null) {\n       return;\n     }\n-    Span span =\n-        TRACER.spanBuilder(SpringSchedulingDecorator.DECORATE.spanNameOnRun(runnable)).startSpan();\n-    SpringSchedulingDecorator.DECORATE.afterStart(span);\n+    Span span = TRACER.startSpan(TRACER.spanNameOnRun(runnable), Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0NDM2MQ=="}, "originalCommit": {"oid": "b159675e72574ec9cc0d734be6acb0f7a3f30d37"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4774, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}