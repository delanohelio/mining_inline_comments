{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTQyMzcw", "number": 1929, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNDowOVrOFHhlsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMzoxMVrOFH445Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDM0Njc0OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNDowOVrOIJBCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNDowOVrOIJBCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.liberty-dispatcher\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325012", "createdAt": "2020-12-20T05:34:09Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDM0OTUwOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNzowMlrOIJBDOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNzowMlrOIJBDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTMwNg==", "bodyText": "Void has been convention when storage not needed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n          \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Void> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325306", "createdAt": "2020-12-20T05:37:02Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDM1MjM2OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTo0MjowNFrOIJBEgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTo0MjowNFrOIJBEgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTYzMg==", "bodyText": "doesn't look like context can be null here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  // an existing span was found\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325632", "createdAt": "2020-12-20T05:42:04Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Argument(value = 0) StatusCodes statusCode,\n+      @Advice.Argument(value = 2) Exception failure,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      // an existing span was found\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDM1NzkxOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTo0OTo0MlrOIJBG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTozMjoxNlrOIJcRXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI1Mw==", "bodyText": "I'm not sure if request.getRequestURI() is a spec compliant span name due to high cardinality, spec recommends HTTP {METHOD_NAME} in this case", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326253", "createdAt": "2020-12-20T05:49:42Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyHttpServerTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.Servlet3HttpServerTracer;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class LibertyHttpServerTracer extends Servlet3HttpServerTracer {\n+  private static final LibertyHttpServerTracer TRACER = new LibertyHttpServerTracer();\n+\n+  public static LibertyHttpServerTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  public Context startSpan(HttpServletRequest request) {\n+    // using request URI as span name as server isn't ready for calling request.getServletPath()\n+    // span name will be updated a bit later when calling request.getServletPath() works\n+    Context context = startSpan(request, request, request, request.getRequestURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3MTI5NA==", "bodyText": "Changed it to HTTP {METHOD_NAME} as suggested", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546771294", "createdAt": "2020-12-21T15:32:16Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyHttpServerTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.Servlet3HttpServerTracer;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class LibertyHttpServerTracer extends Servlet3HttpServerTracer {\n+  private static final LibertyHttpServerTracer TRACER = new LibertyHttpServerTracer();\n+\n+  public static LibertyHttpServerTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  public Context startSpan(HttpServletRequest request) {\n+    // using request URI as span name as server isn't ready for calling request.getServletPath()\n+    // span name will be updated a bit later when calling request.getServletPath() works\n+    Context context = startSpan(request, request, request, request.getRequestURI());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI1Mw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDM1ODI4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTo1MDozMlrOIJBHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTowMDo1MVrOIJiq_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw==", "bodyText": "I'm not sure if this span name is spec compliant due to high cardinality of pathInfo, the spec recommends falling back to HTTP {METHOD_NAME} when route is not available", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326297", "createdAt": "2020-12-20T05:50:32Z", "author": {"login": "trask"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path\n+    if (pathInfo != null && spanName.isEmpty()) {\n+      spanName = pathInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NTkzMg==", "bodyText": "If request.getServletPath() is empty then set span name to HTTP {METHOD_NAME} as suggested.\nNote that request.getServletPath() isn't always low cardinality.\nIf servlet is mapped to / then getServletPath for request to /foo/bar/baz is /foo/bar/baz. Default servlet that serves static content is typically mapped to /\nIf servlet is mapped to *.html then getServletPath for request to /foo/bar/baz.html is /foo/bar/baz.html.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546775932", "createdAt": "2020-12-21T15:40:35Z", "author": {"login": "laurit"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path\n+    if (pathInfo != null && spanName.isEmpty()) {\n+      spanName = pathInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg3NjE1Nw==", "bodyText": "this is a great point, I opened #1954 to track", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546876157", "createdAt": "2020-12-21T19:00:51Z", "author": {"login": "trask"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path\n+    if (pathInfo != null && spanName.isEmpty()) {\n+      spanName = pathInfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY0NDk3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzowMjo1NlrOIJK5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzowMjo1NlrOIJK5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjU5NA==", "bodyText": "getCallDepthKey() may be more descriptive", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546486594", "createdAt": "2020-12-21T03:02:56Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -62,4 +62,18 @@ public static void setServletUpdatedServerSpanName(Context ctx, boolean value) {\n       appServerBridge.servletUpdatedServerSpanName.set(value);\n     }\n   }\n+\n+  /**\n+   * Class used as key in CallDepthThreadLocalMap for counting servlet invocation depth in\n+   * Servlet3Advice and Servlet2Advice. We can not use helper classes like Servlet3Advice and\n+   * Servlet2Advice for determining call depth of server invocation because they can be injected\n+   * into multiple class loaders.\n+   *\n+   * @return class used as a key in CallDepthThreadLocalMap for counting servlet invocation depth\n+   */\n+  public static Class<?> getServletKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY1MTkzOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzowNzowMlrOIJK8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzowNzowMlrOIJK8zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzUwMQ==", "bodyText": "in general we use verbose Java naming style \ud83d\ude04, probably lrw -> requestWrapper and lcw -> connectionWrapper would be more consistent here (and similar in a couple other places)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546487501", "createdAt": "2020-12-21T03:07:02Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY2MDQ3OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxMzo0M1rOIJLBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoxNzoxMFrOIJd12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODczMQ==", "bodyText": "can you add a comment in this file about this library not being available via maven dependency, which is why we need the compile-stub module, and we can't do muzzle library version range validation, and we can't do normal tests and rely on smoke tests for testing?\n(and copy-paste or reference the comment from liberty-dispatcher-javaagent.gradle)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546488731", "createdAt": "2020-12-21T03:13:43Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "diffHunk": "@@ -0,0 +1,8 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTQ0Mg==", "bodyText": "@laurit Can you also document this stub approach in https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/docs/contributing/writing-instrumentation.md ? As a separate PR, if you wish.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546541442", "createdAt": "2020-12-21T07:06:48Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "diffHunk": "@@ -0,0 +1,8 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODczMQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NzAxNw==", "bodyText": "doc for using stubs added", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546797017", "createdAt": "2020-12-21T16:17:10Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "diffHunk": "@@ -0,0 +1,8 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODczMQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTY2Mjg1OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxNTozNlrOIJLC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQyMjo1NzozNFrOIJojFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw==", "bodyText": "can you add comment in here about why this is separate module from liberty module? (or can they be combined?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546489067", "createdAt": "2020-12-21T03:15:36Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY4NTg5Ng==", "bodyText": "I initially had some issues keeping them in the same module, but now that I tried again it worked. I still would prefer to keep them separated as they really don't interact with each other and are in separate class loaders during runtime. Maybe I initially had something using servlet api inside dispatcher code and that caused it to fail to load because servlet api isn't available for dispatcher during runtime, idk.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546685896", "createdAt": "2020-12-21T12:44:59Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg3NzI5Nw==", "bodyText": "I think this is a very good reason if they are in different class loaders, can you add comment in the gradle file?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546877297", "createdAt": "2020-12-21T19:03:34Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk3MjQzOQ==", "bodyText": "comment added", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546972439", "createdAt": "2020-12-21T22:57:34Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAxMzgwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1Njo0MFrOIJOEUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoyMzo0N1rOIJYGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw==", "bodyText": "I think this comment is somewhat confusing. If there is no servlet, then that request will not reach this code, will it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538577", "createdAt": "2020-12-21T06:56:40Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjY3Mg==", "bodyText": "It is called from LibertyUpdateSpanAdvice for all requests including the ones that don't have a servelt", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546626672", "createdAt": "2020-12-21T10:26:43Z", "author": {"login": "laurit"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MDI1Ng==", "bodyText": "I don't understand. In what sense \"is called\"? LibertyUpdateSpanAdvice uses LibertyHttpServerTracer, not servlet tracer, doesn't it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546670256", "createdAt": "2020-12-21T12:06:43Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MTI4OQ==", "bodyText": "LibertyHttpServerTracer extends Servlet3HttpServerTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546671289", "createdAt": "2020-12-21T12:09:12Z", "author": {"login": "laurit"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMzA0NA==", "bodyText": "It can. On liberty there is no default servlet for static content, but we still call getSpanName for requests that are for static files. Similarly default servlet can be removed/disable on at least tomcat, in that case it is possible to have a filter that sees the request but no servlet.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546703044", "createdAt": "2020-12-21T13:23:47Z", "author": {"login": "laurit"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAxNjI0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1Nzo1NVrOIJOFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMzoxODoyOFrOIJX9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODkwNw==", "bodyText": "Is it possible for server span to be null here? In what case?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538907", "createdAt": "2020-12-21T06:57:55Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -141,8 +149,15 @@ private static String getSpanName(HttpServletRequest request) {\n   public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n     if (AppServerBridge.isPresent(attachedContext)\n         && !AppServerBridge.isServerSpanNameUpdatedFromServlet(attachedContext)) {\n-      getServerSpan(request).updateName(getSpanName(request));\n+      updateSpanName(request);\n       AppServerBridge.setServletUpdatedServerSpanName(attachedContext, true);\n     }\n   }\n+\n+  public void updateSpanName(HttpServletRequest request) {\n+    Span span = getServerSpan(request);\n+    if (span != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjcwMDYxMg==", "bodyText": "It is possible when liberty request integration didn't start span because the method from where it is supposed to start it wasn't called, but the integration that is supposed to update span name is called. I'll change it so that it won't try to update span when it wasn't started.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546700612", "createdAt": "2020-12-21T13:18:28Z", "author": {"login": "laurit"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -141,8 +149,15 @@ private static String getSpanName(HttpServletRequest request) {\n   public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n     if (AppServerBridge.isPresent(attachedContext)\n         && !AppServerBridge.isServerSpanNameUpdatedFromServlet(attachedContext)) {\n-      getServerSpan(request).updateName(getSpanName(request));\n+      updateSpanName(request);\n       AppServerBridge.setServletUpdatedServerSpanName(attachedContext, true);\n     }\n   }\n+\n+  public void updateSpanName(HttpServletRequest request) {\n+    Span span = getServerSpan(request);\n+    if (span != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODkwNw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAyMTczOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMDo0OFrOIJOInA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1OTo0M1rOIJUYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTY3Ng==", "bodyText": "@trask should we have classLoaderMatcher here somewhere? Or classLoaderOptimization?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546539676", "createdAt": "2020-12-21T07:00:48Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyDispatcherInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MjAzMA==", "bodyText": "I believe it is not needed because this one matches based on exact class name. classLoaderOptimization usually uses hasClassesNamed which uses ClassLoader.getResource to verify that given class loader can see some type that the instrumentation depends on. For example when you want to instrument all classes that implement some interface you first check whether current class loader can see that interface, if it doesn't the assumption is that this class loader can't contain classes that would be needed to instrumented by this module. The idea behind this is that checking whether class implements some interface is currently expensive so we try to avoid it by doing a cheaper check before it, but ClassLoader.getResource isn't free either so if it isn't really needed i would skip it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546642030", "createdAt": "2020-12-21T10:59:43Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyDispatcherInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTY3Ng=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAyNTIwOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjoyN1rOIJOKcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0MToyMVrOIJck_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA==", "bodyText": "Why this is not implemented?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540144", "createdAt": "2020-12-21T07:02:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0MzQ5OA==", "bodyText": "Because it is not needed and I din't immediately see an easy way to implement it. This advice is only used when server didn't find matching application or got an internal error. Nothing that is called within this advice should require access to the span.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546643498", "createdAt": "2020-12-21T11:03:07Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2ODgxNA==", "bodyText": "That deserves documentation in the code then", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546668814", "createdAt": "2020-12-21T12:03:11Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjMxOA==", "bodyText": "comment added", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546776318", "createdAt": "2020-12-21T15:41:21Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAyNTk1OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1OVrOIJOK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowMjo1OVrOIJOK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI3Mg==", "bodyText": "I think this javadoc is not formatted as you intended :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540272", "createdAt": "2020-12-21T07:02:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAzMDk0OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyResponseWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzowNToyMlrOIJONtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMTowNDo0OFrOIJUhGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDk4Mw==", "bodyText": "Why do you need a wrapper for a single value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540983", "createdAt": "2020-12-21T07:05:22Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyResponseWrapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+\n+public class LibertyResponseWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0NDI1MQ==", "bodyText": "To be consistent with request and connection that have wrappers. Additionally I only used liberty classes from the wrappers", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546644251", "createdAt": "2020-12-21T11:04:48Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyResponseWrapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+\n+public class LibertyResponseWrapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDk4Mw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA0NTI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxMjoxOVrOIJOVpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0MTo0NlrOIJcl3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MzAxNQ==", "bodyText": "Can you please add a little README to this module? Its instrumentations are not straightforward and depend on each other. It is quite hard to follow the instrumentation path from the code.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546543015", "createdAt": "2020-12-21T07:12:19Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3NjU0Mg==", "bodyText": "Added javadoc to LibertyInstrumentationModule", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546776542", "createdAt": "2020-12-21T15:41:46Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MzAxNQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA1MjU2OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxNTozNFrOIJOZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0NDoyMVrOIJcsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDAyMw==", "bodyText": "This span name indeed violates the spec's requirement for low cardinality. We have to review other app server instrumentations as well for this problem. /cc @vovencij", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544023", "createdAt": "2020-12-21T07:15:34Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1MDk0MA==", "bodyText": "As far as I know currently all servers behave that way. This is not the only scenario where span name has high cardianality /this-is-definitely-not-there-but-there-should-be-a-trace-nevertheless also is pretty much the same.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546650940", "createdAt": "2020-12-21T11:20:00Z", "author": {"login": "laurit"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDAyMw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY2OTE2Mw==", "bodyText": "Yep, and that also needs fixing...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546669163", "createdAt": "2020-12-21T12:03:57Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDAyMw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3ODExNg==", "bodyText": "Changed span name to HTTP {METHOD_NAME}", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546778116", "createdAt": "2020-12-21T15:44:21Z", "author": {"login": "laurit"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDAyMw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA1NTAzOnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxNjoyOVrOIJOa2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToyMzozNVrOIJVBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDM0NQ==", "bodyText": "Just out of curiosity: why this test is important here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544345", "createdAt": "2020-12-21T07:16:29Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file not found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/file-that-does-not-exist\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response code is 404\"\n+    response.code() == 404\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/file-that-does-not-exist') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test request for WEB-INF/web.xml on JDK #jdk\"(String appServer, String jdk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY1MjQ3NQ==", "bodyText": "Paths under WEB-INF are special, server should not show content for them. At least liberty cuts off request processing rather early for WEB-INF/web.xml. Added a test to verify that we do get a span for such a request.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546652475", "createdAt": "2020-12-21T11:23:35Z", "author": {"login": "laurit"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file not found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/file-that-does-not-exist\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response code is 404\"\n+    response.code() == 404\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/file-that-does-not-exist') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test request for WEB-INF/web.xml on JDK #jdk\"(String appServer, String jdk) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDM0NQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjA1ODU1OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxNzo1M1rOIJOcww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMToxMDoxNFrOIJUquA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDgzNQ==", "bodyText": "Should some (most?) of these tests live in AppServerTest? And tested for all app servers?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544835", "createdAt": "2020-12-21T07:17:53Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY0NjcxMg==", "bodyText": "Yes they should. I plan to do it a bit later along with changing the tests for all the servers so that each configuration starts server once and runs all the tests.\nThough for this to happen it would be really helpful if all servers behaved the same way or at least there was a clear understanding what span names they should use.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546646712", "createdAt": "2020-12-21T11:10:14Z", "author": {"login": "laurit"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDgzNQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODE1OTczOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMTo0MVrOIJhncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMTo0MVrOIJhncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1ODg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Instrumenting request handling in liberty.\n          \n          \n            \n             * Instrumenting request handling in Liberty.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546858865", "createdAt": "2020-12-21T18:21:41Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODE2MjgyOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMjo0M1rOIJhpMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODo0NDoxMVrOIJiOCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTMxNA==", "bodyText": "Thanks! This is really helpful. Can you add links to corresponding advice classes as well?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859314", "createdAt": "2020-12-21T18:22:43Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.\n+ *\n+ * <ul>\n+ *   <li>On entry to WebApp.handleRequest remember request.\n+ *   <li>On call to WebApp.isForbidden (called from WebApp.handleRequest) start span based on\n+ *       remembered request. We don't start span immediately at the start or handleRequest because\n+ *       HttpServletRequest isn't usable yet.\n+ *   <li>On exit from WebAppDispatcherContext.setPathElements (called from WebApp.handleRequest)\n+ *       update span name. We don't do it before because before this method is called we can't use\n+ *       HttpServletRequest.getServletPath.\n+ *   <li>On exit from WebApp.handleRequest close the span.\n+ * </ul>\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg2ODc0NQ==", "bodyText": "Done.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546868745", "createdAt": "2020-12-21T18:44:11Z", "author": {"login": "laurit"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.\n+ *\n+ * <ul>\n+ *   <li>On entry to WebApp.handleRequest remember request.\n+ *   <li>On call to WebApp.isForbidden (called from WebApp.handleRequest) start span based on\n+ *       remembered request. We don't start span immediately at the start or handleRequest because\n+ *       HttpServletRequest isn't usable yet.\n+ *   <li>On exit from WebAppDispatcherContext.setPathElements (called from WebApp.handleRequest)\n+ *       update span name. We don't do it before because before this method is called we can't use\n+ *       HttpServletRequest.getServletPath.\n+ *   <li>On exit from WebApp.handleRequest close the span.\n+ * </ul>\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTMxNA=="}, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzODE2NDIxOnYy", "diffSide": "RIGHT", "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMzoxMVrOIJhqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMzoxMVrOIJhqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTUyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return true when span should be update, false when span was already updated or span wasn't\n          \n          \n            \n               * @return true when span should be updated, false when span was already updated or span wasn't", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859527", "createdAt": "2020-12-21T18:23:11Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java", "diffHunk": "@@ -57,9 +57,13 @@ public boolean startSpan() {\n   /**\n    * Test whether span should be updated.\n    *\n-   * @return true when span should be update, false when span was already updated\n+   * @return true when span should be update, false when span was already updated or span wasn't", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}