{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTI0NDIy", "number": 1643, "title": "Run tests with javaagent.", "bodyText": "Don't get too excited, just first steps in this change for now :)\nI wanted to get it out as a PoC just to see what you think of the general direction. Running a test with the agent active, having it load instrumentation for the project under test, and asserting on exported spans works. I'm hoping other steps aren't extremely hard but there are still a few big steps left and a chance of hitting a roadblock, but hope not.\nI think there are these major components left\nAllow registering multiple custom instrumentation like some of our tests require.\nI am using the otel.initializer_jar mechanism to load instrumentation. Some thoughts on how to proceed\n\nAllow otel.initializer_jar to accept a CSV of jars.\nPackage multiple instrumentation into single JAR for test. Slows down build somewhat (more repackaging)\nDon't use otel.initializer_jar and generate an agent JAR for each project with everything bundled. Slows down build more (even more repackaging)\n\nFirst option seems ok I guess? But maybe doesn't fit with our general customization plans. Second option doesn't seem that bad, especially if java-concurrent and java-classloader are packaged into the agent (always used), making the dual-packaging rare.\nAllow registering transformation listeners\nIf I understand classloaders correctly, we can't simply pass a AgentBuilder.Listener from the test classloader to the agent classloader since the implementation would not be inheriting from the agent classloader's class (@trask correct me if I'm wrong, if so things are trivial). It would be very easy to define an interface similar to AgentBuilder.Listener in the bootstrap classloader for our use. Unfortunately, TRANSFORMED_CLASSES_TYPES depends on byte buddy's TypeDescription which puts a wrinkle in this. But instead of a mostly similar, mostly generic Listener, we could have the callback just accept a boolean matchedGlobalLibrariesIgnoreMatcher, which is only useful for our test, but guess it's ok.\nEdit: Added TransformationListener as a POC for this.\nAllowing updates to Config\nThis seems relatively easy, instead of modifying INSTANCE directly by initializing Config in the test classloader, we can just provide a private (accessed-through-reflection) method that accepts Properties and creates the Config in the agent classloader.  Config's in bootstrap classloader :D But it's shaded\nAlso feel free to bring up any potential other gotchas you see to come up with strategies to squash them :D", "createdAt": "2020-11-16T09:14:14Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643", "merged": true, "mergeCommit": {"oid": "8d74baa2e4d186b1e78ebdc88ae0a7f73a297e69"}, "closed": true, "closedAt": "2021-01-04T21:13:25Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 201, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpJw5WgH2gAyNTIxNTI0NDIyOmVkNmE5MWFhZTBlZWYwYjc4N2M1YjZlNjNhMDY5NThmMjRiYmQ3NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpJw5WgH2gAyNTIxNTI0NDIyOmVkNmE5MWFhZTBlZWYwYjc4N2M1YjZlNjNhMDY5NThmMjRiYmQ3NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed6a91aae0eef0b787c5b6e63a06958f24bbd757", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed6a91aae0eef0b787c5b6e63a06958f24bbd757", "committedDate": "2020-12-24T01:50:41Z", "message": "Maybe still seeing a deadlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6c7b75d5c5f96206335f74dcd53803def6ed096", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a6c7b75d5c5f96206335f74dcd53803def6ed096", "committedDate": "2020-11-28T20:24:25Z", "message": "Extract unittest from mongo-3.1 and mongo-3.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d675c611b465f050d8acdb3db240415add8692", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/64d675c611b465f050d8acdb3db240415add8692", "committedDate": "2020-11-28T20:24:53Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78bd9496f54b54156b9a90cc7ca390f2a2fb14b8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78bd9496f54b54156b9a90cc7ca390f2a2fb14b8", "committedDate": "2020-11-28T20:30:21Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f18c3569f7b129ea48e3ac10a5510febec336a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09f18c3569f7b129ea48e3ac10a5510febec336a", "committedDate": "2020-11-28T20:37:07Z", "message": "Extract unittest from external-annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b01d2103d33e71a747798ca30af8518cf91025", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a8b01d2103d33e71a747798ca30af8518cf91025", "committedDate": "2020-11-28T20:40:06Z", "message": "Consistency in unittests gradle files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "805b520ac09c120c4d77a3a02dbeb76e0ef1b092", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/805b520ac09c120c4d77a3a02dbeb76e0ef1b092", "committedDate": "2020-11-28T20:44:21Z", "message": "Codenarc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a52869d7f9973f96671322974ca3ac985ad6307", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a52869d7f9973f96671322974ca3ac985ad6307", "committedDate": "2020-11-28T21:03:55Z", "message": "Fix opentelemetry-api-1.0 test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ad267b87f0f881d8b2b62ddf738b8524c63bde7", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5ad267b87f0f881d8b2b62ddf738b8524c63bde7", "committedDate": "2020-11-28T21:31:10Z", "message": "Temporarily ignore test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aabf27ecd972fe9cc1f59b4fc10bb9e1bf728ac", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6aabf27ecd972fe9cc1f59b4fc10bb9e1bf728ac", "committedDate": "2020-11-29T06:05:53Z", "message": "Create javaagent dirs for all instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b1d8feb34ccdc933b6e3d9427e4a3c731cbd2b6", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b1d8feb34ccdc933b6e3d9427e4a3c731cbd2b6", "committedDate": "2020-11-29T06:13:33Z", "message": "Format groovy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3db271b632a2753fb14ae2895a90d6ed21e1798", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f3db271b632a2753fb14ae2895a90d6ed21e1798", "committedDate": "2020-11-29T06:40:29Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2bafaae171e132874411b81f3160648a21f355", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a2bafaae171e132874411b81f3160648a21f355", "committedDate": "2020-11-29T06:40:33Z", "message": "Remove no longer needed comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNDUyMTM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-540452135", "createdAt": "2020-11-29T06:51:00Z", "commit": {"oid": "9a2bafaae171e132874411b81f3160648a21f355"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo1MTowMFrOH7gxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwNjo1MTowMFrOH7gxig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE2NTAwMg==", "bodyText": "any thoughts/preferences on this approach to making this class more testable?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r532165002", "createdAt": "2020-11-29T06:51:00Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "diffHunk": "@@ -17,13 +18,17 @@\n \n public final class NetPeerUtils {\n \n-  private static final Map<String, String> ENDPOINT_PEER_SERVICE_MAPPING =\n-      Collections.unmodifiableMap(\n-          Config.get().getMapProperty(\"otel.endpoint.peer.service.mapping\"));\n+  public static final NetPeerUtils INSTANCE = new NetPeerUtils(Config.get());\n \n-  private NetPeerUtils() {}\n+  private final Map<String, String> endpointPeerServiceMapping;\n \n-  public static void setNetPeer(Span span, @Nullable InetSocketAddress remoteConnection) {\n+  // visible for testing\n+  NetPeerUtils(Config config) {\n+    this.endpointPeerServiceMapping =\n+        Collections.unmodifiableMap(config.getMapProperty(\"otel.endpoint.peer.service.mapping\"));\n+  }\n+\n+  public void setNetPeer(Span span, @Nullable InetSocketAddress remoteConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2bafaae171e132874411b81f3160648a21f355"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42ed2c997dd62a4040518d46759b3314444b3048", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42ed2c997dd62a4040518d46759b3314444b3048", "committedDate": "2020-11-29T22:45:01Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1c3860703f3f34bd41f60b0299fb8cc6cc93b1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d1c3860703f3f34bd41f60b0299fb8cc6cc93b1", "committedDate": "2020-11-29T23:19:18Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8227997bf7c8532a323c1bfa9cc2d3f90f58671", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8227997bf7c8532a323c1bfa9cc2d3f90f58671", "committedDate": "2020-11-30T00:00:07Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42517df3f686642ab1e43eb85bc56397e24f092d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42517df3f686642ab1e43eb85bc56397e24f092d", "committedDate": "2020-11-30T00:17:22Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd75472e030d87ef66cd3755f9a2803a2bf324d4", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fd75472e030d87ef66cd3755f9a2803a2bf324d4", "committedDate": "2020-11-30T03:20:26Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf50bf8a0b92d1f6174c3357b82380106bbf40d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dbf50bf8a0b92d1f6174c3357b82380106bbf40d", "committedDate": "2020-11-30T04:53:29Z", "message": "Fix javaagent module tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "456052572f6458b7b021886e9c18b5ec9d25769e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/456052572f6458b7b021886e9c18b5ec9d25769e", "committedDate": "2020-11-30T05:03:44Z", "message": "Fix javaagent-tooling module tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b83907217845732a9f171c45a24ff5d8df97c9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39b83907217845732a9f171c45a24ff5d8df97c9", "committedDate": "2020-11-30T21:02:03Z", "message": "Turn off debug logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "115b6beeea6965297fda24e52c2287529770a1db", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/115b6beeea6965297fda24e52c2287529770a1db", "committedDate": "2020-12-02T01:21:11Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749086c1a596afd0f6f328c41696ada71298fc49", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/749086c1a596afd0f6f328c41696ada71298fc49", "committedDate": "2020-12-02T04:57:54Z", "message": "Merge cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e0f1d26eb738cf4f2eac3265ba5c88160d2f41b", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e0f1d26eb738cf4f2eac3265ba5c88160d2f41b", "committedDate": "2020-12-02T04:58:00Z", "message": "Revert \"Turn off debug logging\"\n\nThis reverts commit 39b83907217845732a9f171c45a24ff5d8df97c9."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1813fe1990b862ae3246041cc4350cb2136788ed", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1813fe1990b862ae3246041cc4350cb2136788ed", "committedDate": "2020-12-03T22:49:10Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09d02e75591f71e793bf20afd0f21b477a9fcf32", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09d02e75591f71e793bf20afd0f21b477a9fcf32", "committedDate": "2020-12-16T00:42:07Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc169ed226b6523d6fd352893eb1c9eb5f3127d7", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc169ed226b6523d6fd352893eb1c9eb5f3127d7", "committedDate": "2020-12-16T04:59:28Z", "message": "Merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6580382d7a2de9329b0c5e0cad515f13d7e120", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c6580382d7a2de9329b0c5e0cad515f13d7e120", "committedDate": "2020-12-16T05:31:19Z", "message": "Fix metrics tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515f68ad9a5bf5088fa990c0b4bd3a5d24e3e61d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/515f68ad9a5bf5088fa990c0b4bd3a5d24e3e61d", "committedDate": "2020-12-17T04:22:40Z", "message": "METRICS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90b0567b0666345353dae192e2b1be04be81f2a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f90b0567b0666345353dae192e2b1be04be81f2a", "committedDate": "2020-12-17T23:13:41Z", "message": "fixup! METRICS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1de976af2a5e95f7e45abb8b8035bb02090313ea", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1de976af2a5e95f7e45abb8b8035bb02090313ea", "committedDate": "2020-12-19T21:00:22Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d65463a08eb55e6c122b1abe6e3bdde9065142e1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d65463a08eb55e6c122b1abe6e3bdde9065142e1", "committedDate": "2020-12-19T21:18:15Z", "message": "Get tests compiling again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc492e734b902a9f25bb264059f0136ca6cf5811", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc492e734b902a9f25bb264059f0136ca6cf5811", "committedDate": "2020-12-19T22:08:27Z", "message": "Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ff1241b3a2ea09a33ed7a152d0db6bd859081b", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4ff1241b3a2ea09a33ed7a152d0db6bd859081b", "committedDate": "2020-12-19T22:20:22Z", "message": "Consistent extra gradle test task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af856d639fcda6ed269bb100d093a871a8d5c2b", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4af856d639fcda6ed269bb100d093a871a8d5c2b", "committedDate": "2020-12-20T19:12:44Z", "message": "Fix testing-common tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "595bf1e1c6b76ed541c350eb549990d6177c4ca1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/595bf1e1c6b76ed541c350eb549990d6177c4ca1", "committedDate": "2020-12-20T20:23:41Z", "message": "Metrics test working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b000232cd54696910ebf648b04566d7cd24198", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22b000232cd54696910ebf648b04566d7cd24198", "committedDate": "2020-12-20T21:16:28Z", "message": "Fix oshi test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a48e2ed236b1a1bb2589cca9db485bc7541eb929", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a48e2ed236b1a1bb2589cca9db485bc7541eb929", "committedDate": "2020-12-20T21:27:47Z", "message": "Fix jsp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5a37bf0c3c9223db60acaa967f16e64cbfb658", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f5a37bf0c3c9223db60acaa967f16e64cbfb658", "committedDate": "2020-12-20T21:39:12Z", "message": "Also percentiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b638ea39e1f4fa44fb52810bd5831069f5015865", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b638ea39e1f4fa44fb52810bd5831069f5015865", "committedDate": "2020-12-20T22:07:50Z", "message": "Add TODO about more tests needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06cb3082117e1c98415272249ea17d9470115f52", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06cb3082117e1c98415272249ea17d9470115f52", "committedDate": "2020-12-20T22:11:21Z", "message": "Bring back 2 more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0574d59a70adee97ab7234d122ac67eb035ebc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4f0574d59a70adee97ab7234d122ac67eb035ebc", "committedDate": "2020-12-20T23:39:39Z", "message": "Wait for spans inside of traces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e77f1ce3656773114358babe539c3b36027d234f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e77f1ce3656773114358babe539c3b36027d234f", "committedDate": "2020-12-21T00:39:29Z", "message": "A bit more review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6bb0230600e8fc54439f36d109d6463f1363b4e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c6bb0230600e8fc54439f36d109d6463f1363b4e", "committedDate": "2020-12-21T00:39:29Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6a6e8b6d4cee30f42ce84541bcba64d83e7382", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0a6a6e8b6d4cee30f42ce84541bcba64d83e7382", "committedDate": "2020-12-21T00:43:12Z", "message": "One more comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bfbb7e5e7e3f6a1305ef3beac262a67703c41f7", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5bfbb7e5e7e3f6a1305ef3beac262a67703c41f7", "committedDate": "2020-12-21T01:07:32Z", "message": "Fix gradle logging deadlocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6befa8111afc32eb196deb5e066c5e0f8908d508", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6befa8111afc32eb196deb5e066c5e0f8908d508", "committedDate": "2020-12-21T01:08:24Z", "message": "Match comment in javaagent.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7576087ca05a4daf0e87fa2078394b6eb3dcb5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e7576087ca05a4daf0e87fa2078394b6eb3dcb5", "committedDate": "2020-12-21T01:24:35Z", "message": "Ooops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDg2MTIx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556086121", "createdAt": "2020-12-21T01:27:21Z", "commit": {"oid": "1e7576087ca05a4daf0e87fa2078394b6eb3dcb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMToyNzoyMlrOIJJwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMToyNzoyMlrOIJJwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ2NzkzMg==", "bodyText": "this is a bummer, see similar comment in javaagent.gradle\nhere's a deadlock I captured locally (interestingly doesn't deadlock on windows, but does on linux):\nFound one Java-level deadlock:\n=============================\n\"main\":\n  waiting to lock monitor 0x00007f1b64008580 (object 0x00000000fd873d20, a java.lang.Object),\n  which is held by \"IntervalMetricReader-1\"\n\"IntervalMetricReader-1\":\n  waiting for ownable synchronizer 0x00000000fba0b0b0, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),\n  which is held by \"main\"\n\nJava stack information for the threads listed above:\n===================================================\n\"main\":\n        at org.gradle.internal.logging.sink.OutputEventRenderer.onOutput(OutputEventRenderer.java:431)\n        - waiting to lock <0x00000000fd873d20> (a java.lang.Object)\n        at org.gradle.internal.logging.sink.OutputEventListenerManager$1.onOutput(OutputEventListenerManager.java:36)\n        at org.gradle.internal.logging.services.TextStreamOutputEventListener.onTextEvent(TextStreamOutputEventListener.java:58)\n        at org.gradle.internal.logging.services.TextStreamOutputEventListener.onOutput(TextStreamOutputEventListener.java:42)\n        at org.gradle.internal.logging.source.PrintStreamLoggingSystem$OutputEventDestination.onOutput(PrintStreamLoggingSystem.java:173)\n        at org.gradle.internal.logging.source.PrintStreamLoggingSystem$1.text(PrintStreamLoggingSystem.java:45)\n        at org.gradle.internal.io.LineBufferingOutputStream.flush(LineBufferingOutputStream.java:98)\n        at org.gradle.internal.io.LineBufferingOutputStream.write(LineBufferingOutputStream.java:82)\n        at java.io.OutputStream.write(java.base@11.0.4/OutputStream.java:157)\n        at java.io.PrintStream.write(java.base@11.0.4/PrintStream.java:559)\n        - locked <0x00000000faf18930> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(java.base@11.0.4/StreamEncoder.java:233)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(java.base@11.0.4/StreamEncoder.java:312)\n        at sun.nio.cs.StreamEncoder.flushBuffer(java.base@11.0.4/StreamEncoder.java:104)\n        - locked <0x00000000faf1aa50> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(java.base@11.0.4/OutputStreamWriter.java:184)\n        at java.io.PrintStream.newLine(java.base@11.0.4/PrintStream.java:625)\n        - locked <0x00000000faf18930> (a java.io.PrintStream)\n        at java.io.PrintStream.println(java.base@11.0.4/PrintStream.java:883)\n        - locked <0x00000000faf18930> (a java.io.PrintStream)\n        at org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(LinePerThreadBufferingOutputStream.java:203)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.write(SimpleLogger.java:318)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.log(SimpleLogger.java:295)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.formatAndLog(SimpleLogger.java:355)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.debug(SimpleLogger.java:446)\n        at io.opentelemetry.javaagent.tooling.context.FieldBackedProvider$1$1$1.visitMethodInsn(FieldBackedProvider.java:201)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitor.onVisitMethodInsn(ExceptionTableSensitiveMethodVisitor.java:199)\n        at net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitor.visitMethodInsn(ExceptionTableSensitiveMethodVisitor.java:186)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.utility.visitor.FramePaddingMethodVisitor.visitMethodInsn(FramePaddingMethodVisitor.java:94)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.utility.visitor.StackAwareMethodVisitor.visitMethodInsn(StackAwareMethodVisitor.java:302)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.utility.visitor.StackAwareMethodVisitor.visitMethodInsn(StackAwareMethodVisitor.java:302)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.jar.asm.MethodVisitor.visitMethodInsn(MethodVisitor.java:438)\n        at net.bytebuddy.jar.asm.ClassReader.readCode(ClassReader.java:2412)\n        at net.bytebuddy.jar.asm.ClassReader.readMethod(ClassReader.java:1481)\n        at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:711)\n        at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:394)\n        at net.bytebuddy.asm.Advice$Dispatcher$Inlining$Resolved$AdviceMethodInliner.apply(Advice.java:7821)\n        at net.bytebuddy.asm.Advice$AdviceVisitor.onAfterExceptionTable(Advice.java:9955)\n        at net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitor.considerEndOfExceptionTable(ExceptionTableSensitiveMethodVisitor.java:49)\n        at net.bytebuddy.utility.visitor.ExceptionTableSensitiveMethodVisitor.visitLabel(ExceptionTableSensitiveMethodVisitor.java:81)\n        at net.bytebuddy.jar.asm.Label.accept(Label.java:358)\n        at net.bytebuddy.jar.asm.ClassReader.readCode(ClassReader.java:2021)\n        at net.bytebuddy.jar.asm.ClassReader.readMethod(ClassReader.java:1481)\n        at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:711)\n        at net.bytebuddy.jar.asm.ClassReader.accept(ClassReader.java:394)\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$Default$ForInlining.create(TypeWriter.java:3892)\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$Default.make(TypeWriter.java:2166)\n        at net.bytebuddy.dynamic.scaffold.inline.RedefinitionDynamicTypeBuilder.make(RedefinitionDynamicTypeBuilder.java:224)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.doTransform(AgentBuilder.java:10366)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.transform(AgentBuilder.java:10302)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.access$1600(AgentBuilder.java:10068)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$Java9CapableVmDispatcher.run(AgentBuilder.java:10761)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$Java9CapableVmDispatcher.run(AgentBuilder.java:10699)\n        at java.security.AccessController.doPrivileged(java.base@11.0.4/Native Method)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.transform(AgentBuilder.java:10258)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$ByteBuddy$ModuleSupport.transform(Unknown Source)\n        at sun.instrument.TransformerManager.transform(java.instrument@11.0.4/TransformerManager.java:188)\n        at sun.instrument.InstrumentationImpl.transform(java.instrument@11.0.4/InstrumentationImpl.java:563)\n        at java.lang.ClassLoader.defineClass1(java.base@11.0.4/Native Method)\n        at java.lang.ClassLoader.defineClass(java.base@11.0.4/ClassLoader.java:1016)\n        at java.security.SecureClassLoader.defineClass(java.base@11.0.4/SecureClassLoader.java:174)\n        at java.net.URLClassLoader.defineClass(java.base@11.0.4/URLClassLoader.java:550)\n        at java.net.URLClassLoader$1.run(java.base@11.0.4/URLClassLoader.java:458)\n        at java.net.URLClassLoader$1.run(java.base@11.0.4/URLClassLoader.java:452)\n        at java.security.AccessController.doPrivileged(java.base@11.0.4/Native Method)\n        at java.net.URLClassLoader.findClass(java.base@11.0.4/URLClassLoader.java:451)\n        at java.lang.ClassLoader.loadClass(java.base@11.0.4/ClassLoader.java:588)\n        - locked <0x00000000fae3f740> (a java.lang.Object)\n        at java.lang.ClassLoader.loadClass(java.base@11.0.4/ClassLoader.java:521)\n        at org.gradle.internal.concurrent.ThreadFactoryImpl.newThread(ThreadFactoryImpl.java:36)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.<init>(java.base@11.0.4/ThreadPoolExecutor.java:623)\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(java.base@11.0.4/ThreadPoolExecutor.java:912)\n        at java.util.concurrent.ThreadPoolExecutor.execute(java.base@11.0.4/ThreadPoolExecutor.java:1354)\n        at org.gradle.internal.concurrent.ManagedExecutorImpl.execute(ManagedExecutorImpl.java:39)\n        at org.gradle.internal.remote.internal.hub.MessageHub.addHandler(MessageHub.java:133)\n        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection.addIncoming(MessageHubBackedObjectConnection.java:100)\n        at org.gradle.api.internal.tasks.testing.worker.TestWorker.startReceivingTests(TestWorker.java:105)\n        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:69)\n        at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:47)\n        at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)\n        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)\n        at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)\n        at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)\n        at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)\n\"IntervalMetricReader-1\":\n        at jdk.internal.misc.Unsafe.park(java.base@11.0.4/Native Method)\n        - parking to wait for  <0x00000000fba0b0b0> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)\n        at java.util.concurrent.locks.LockSupport.park(java.base@11.0.4/LockSupport.java:194)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(java.base@11.0.4/AbstractQueuedSynchronizer.java:885)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(java.base@11.0.4/AbstractQueuedSynchronizer.java:917)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(java.base@11.0.4/AbstractQueuedSynchronizer.java:1240)\n        at java.util.concurrent.locks.ReentrantLock.lock(java.base@11.0.4/ReentrantLock.java:267)\n        at org.gradle.internal.remote.internal.hub.MessageHub$ChannelDispatch.dispatch(MessageHub.java:370)\n        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n        at com.sun.proxy.$Proxy10.sendOutputEvent(Unknown Source)\n        at org.gradle.process.internal.worker.child.WorkerLogEventListener.onOutput(WorkerLogEventListener.java:58)\n        at jdk.internal.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)\n        at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(java.base@11.0.4/DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(java.base@11.0.4/Method.java:566)\n        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\n        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n        at org.gradle.internal.event.AbstractBroadcastDispatch.dispatch(AbstractBroadcastDispatch.java:43)\n        at org.gradle.internal.event.BroadcastDispatch$SingletonDispatch.dispatch(BroadcastDispatch.java:245)\n        at org.gradle.internal.event.BroadcastDispatch$SingletonDispatch.dispatch(BroadcastDispatch.java:157)\n        at org.gradle.internal.event.ListenerBroadcast.dispatch(ListenerBroadcast.java:141)\n        at org.gradle.internal.event.ListenerBroadcast.dispatch(ListenerBroadcast.java:37)\n        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\n        at com.sun.proxy.$Proxy9.onOutput(Unknown Source)\n        at org.gradle.internal.logging.sink.OutputEventTransformer.onOutput(OutputEventTransformer.java:104)\n        at org.gradle.internal.logging.sink.OutputEventRenderer.onOutput(OutputEventRenderer.java:431)\n        - locked <0x00000000fd873d20> (a java.lang.Object)\n        at org.gradle.internal.logging.sink.OutputEventListenerManager$1.onOutput(OutputEventListenerManager.java:36)\n        at org.gradle.internal.logging.services.TextStreamOutputEventListener.onTextEvent(TextStreamOutputEventListener.java:58)\n        at org.gradle.internal.logging.services.TextStreamOutputEventListener.onOutput(TextStreamOutputEventListener.java:42)\n        at org.gradle.internal.logging.source.PrintStreamLoggingSystem$OutputEventDestination.onOutput(PrintStreamLoggingSystem.java:173)\n        at org.gradle.internal.logging.source.PrintStreamLoggingSystem$1.text(PrintStreamLoggingSystem.java:45)\n        at org.gradle.internal.io.LineBufferingOutputStream.flush(LineBufferingOutputStream.java:98)\n        at org.gradle.internal.io.LineBufferingOutputStream.write(LineBufferingOutputStream.java:82)\n        at java.io.OutputStream.write(java.base@11.0.4/OutputStream.java:157)\n        at java.io.PrintStream.write(java.base@11.0.4/PrintStream.java:559)\n        - locked <0x00000000faff6630> (a java.io.PrintStream)\n        at sun.nio.cs.StreamEncoder.writeBytes(java.base@11.0.4/StreamEncoder.java:233)\n        at sun.nio.cs.StreamEncoder.implFlushBuffer(java.base@11.0.4/StreamEncoder.java:312)\n        at sun.nio.cs.StreamEncoder.flushBuffer(java.base@11.0.4/StreamEncoder.java:104)\n        - locked <0x00000000faff8750> (a java.io.OutputStreamWriter)\n        at java.io.OutputStreamWriter.flushBuffer(java.base@11.0.4/OutputStreamWriter.java:184)\n        at java.io.PrintStream.newLine(java.base@11.0.4/PrintStream.java:625)\n        - locked <0x00000000faff6630> (a java.io.PrintStream)\n        at java.io.PrintStream.println(java.base@11.0.4/PrintStream.java:883)\n        - locked <0x00000000faff6630> (a java.io.PrintStream)\n        at org.gradle.internal.io.LinePerThreadBufferingOutputStream.println(LinePerThreadBufferingOutputStream.java:203)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.write(SimpleLogger.java:318)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.log(SimpleLogger.java:295)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.formatAndLog(SimpleLogger.java:355)\n        at io.opentelemetry.javaagent.slf4j.impl.SimpleLogger.debug(SimpleLogger.java:446)\n        at io.opentelemetry.javaagent.instrumentation.javaconcurrent.FutureInstrumentation$1.matches(FutureInstrumentation.java:85)\n        at io.opentelemetry.javaagent.instrumentation.javaconcurrent.FutureInstrumentation$1.matches(FutureInstrumentation.java:80)\n        at net.bytebuddy.matcher.ElementMatcher$Junction$Conjunction.matches(ElementMatcher.java:122)\n        at io.opentelemetry.javaagent.tooling.bytebuddy.matcher.LoggingFailSafeMatcher.matches(LoggingFailSafeMatcher.java:52)\n        at net.bytebuddy.agent.builder.AgentBuilder$RawMatcher$ForElementMatchers.matches(AgentBuilder.java:1312)\n        at net.bytebuddy.agent.builder.AgentBuilder$RawMatcher$Conjunction.matches(AgentBuilder.java:1163)\n        at net.bytebuddy.agent.builder.AgentBuilder$RawMatcher$Conjunction.matches(AgentBuilder.java:1163)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.doTransform(AgentBuilder.java:10343)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.transform(AgentBuilder.java:10302)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.access$1600(AgentBuilder.java:10068)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$Java9CapableVmDispatcher.run(AgentBuilder.java:10761)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$Java9CapableVmDispatcher.run(AgentBuilder.java:10699)\n        at java.security.AccessController.doPrivileged(java.base@11.0.4/Native Method)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer.transform(AgentBuilder.java:10258)\n        at net.bytebuddy.agent.builder.AgentBuilder$Default$ExecutingTransformer$ByteBuddy$ModuleSupport.transform(Unknown Source)\n        at sun.instrument.TransformerManager.transform(java.instrument@11.0.4/TransformerManager.java:188)\n        at sun.instrument.InstrumentationImpl.transform(java.instrument@11.0.4/InstrumentationImpl.java:563)\n        at java.util.concurrent.CompletableFuture.uniHandleStage(java.base@11.0.4/CompletableFuture.java:944)\n        at java.util.concurrent.CompletableFuture.handle(java.base@11.0.4/CompletableFuture.java:2266)\n        at java.lang.ProcessImpl.initStreams(java.base@11.0.4/ProcessImpl.java:389)\n        at java.lang.ProcessImpl.lambda$new$0(java.base@11.0.4/ProcessImpl.java:352)\n        at java.lang.ProcessImpl$$Lambda$116/0x00000001002f9c40.run(java.base@11.0.4/Unknown Source)\n        at java.security.AccessController.doPrivileged(java.base@11.0.4/Native Method)\n        at java.lang.ProcessImpl.<init>(java.base@11.0.4/ProcessImpl.java:351)\n        at java.lang.ProcessImpl.start(java.base@11.0.4/ProcessImpl.java:271)\n        at java.lang.ProcessBuilder.start(java.base@11.0.4/ProcessBuilder.java:1107)\n        at java.lang.ProcessBuilder.start(java.base@11.0.4/ProcessBuilder.java:1071)\n        at java.lang.Runtime.exec(java.base@11.0.4/Runtime.java:591)\n        at java.lang.Runtime.exec(java.base@11.0.4/Runtime.java:415)\n        at java.lang.Runtime.exec(java.base@11.0.4/Runtime.java:312)\n        at com.sun.jna.NativeLibrary.getLinuxLdPaths(NativeLibrary.java:999)\n        at com.sun.jna.NativeLibrary.<clinit>(NativeLibrary.java:941)\n        at com.sun.jna.Library$Handler.<init>(Library.java:192)\n        at com.sun.jna.Native.load(Native.java:596)\n        at com.sun.jna.Native.load(Native.java:570)\n        at com.sun.jna.platform.linux.Udev.<clinit>(Udev.java:37)\n        at oshi.hardware.platform.linux.LinuxHWDiskStore.getDisks(LinuxHWDiskStore.java:160)\n        at oshi.hardware.platform.linux.LinuxHWDiskStore.getDisks(LinuxHWDiskStore.java:151)\n        at oshi.hardware.platform.linux.LinuxHardwareAbstractionLayer.getDiskStores(LinuxHardwareAbstractionLayer.java:75)\n        at io.opentelemetry.javaagent.shaded.instrumentation.oshi.SystemMetrics.lambda$registerObservers$6(SystemMetrics.java:138)\n        at io.opentelemetry.javaagent.shaded.instrumentation.oshi.SystemMetrics$$Lambda$108/0x00000001002c4840.accept(Unknown Source)\n        at io.opentelemetry.sdk.metrics.AsynchronousInstrumentAccumulator.lambda$longAsynchronousAccumulator$3(AsynchronousInstrumentAccumulator.java:59)\n        at io.opentelemetry.sdk.metrics.AsynchronousInstrumentAccumulator$$Lambda$98/0x00000001002c2040.accept(Unknown Source)\n        at io.opentelemetry.sdk.metrics.AsynchronousInstrumentAccumulator.collectAll(AsynchronousInstrumentAccumulator.java:31)\n        at io.opentelemetry.sdk.metrics.AbstractAsynchronousInstrument.collectAll(AbstractAsynchronousInstrument.java:23)\n        at io.opentelemetry.sdk.metrics.SdkMeter.collectAll(SdkMeter.java:102)\n        at io.opentelemetry.sdk.metrics.SdkMeterProvider$MetricProducerSdk.collectAllMetrics(SdkMeterProvider.java:174)\n        at io.opentelemetry.sdk.metrics.export.IntervalMetricReader$Exporter.run(IntervalMetricReader.java:192)\n        at java.util.concurrent.Executors$RunnableAdapter.call(java.base@11.0.4/Executors.java:515)\n        at java.util.concurrent.FutureTask.runAndReset(java.base@11.0.4/FutureTask.java:305)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(java.base@11.0.4/ScheduledThreadPoolExecutor.java:305)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.4/ThreadPoolExecutor.java:1128)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.4/ThreadPoolExecutor.java:628)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\nFound 1 deadlock.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546467932", "createdAt": "2020-12-21T01:27:22Z", "author": {"login": "trask"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -55,3 +51,73 @@ afterEvaluate {\n     project(':javaagent-tooling').configurations.instrumentationMuzzle + configurations.runtimeClasspath\n   ).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  dependencies {\n+    exclude(project(':javaagent-bootstrap'))\n+    exclude(project(':instrumentation-api'))\n+    exclude(project(':javaagent-api'))\n+    exclude(project(':javaagent-tooling'))\n+    exclude(dependency(deps.bytebuddy))\n+    exclude(dependency(deps.opentelemetryApi))\n+    exclude(dependency(deps.opentelemetryContext))\n+    exclude(dependency(deps.slf4j))\n+  }\n+\n+  // rewrite library instrumentation dependencies\n+  relocate \"io.opentelemetry.instrumentation\", \"io.opentelemetry.javaagent.shaded.instrumentation\"\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API usage\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.spi\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.spi\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+\n+  // this is for instrumentation on opentelemetry-api itself\n+  relocate \"application.io.opentelemetry\", \"io.opentelemetry\"\n+}\n+\n+tasks.withType(Test).configureEach {\n+  // Multi-threaded logging seems to be causing deadlocks with Gradle's log capture.\n+  //  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  //  jvmArgs \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e7576087ca05a4daf0e87fa2078394b6eb3dcb5"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f0ae72a2f3704ca1c4ea317ac7bdd01c08a319", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/35f0ae72a2f3704ca1c4ea317ac7bdd01c08a319", "committedDate": "2020-12-21T01:37:22Z", "message": "More oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ae6dfb8f6d59ee8cda683ef93015e0bd47790cc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ae6dfb8f6d59ee8cda683ef93015e0bd47790cc", "committedDate": "2020-12-21T01:43:24Z", "message": "Still fixing recent InMemoryExporter changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f6313d24aa7e8b0631e49be39f0bb1152f14553", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1f6313d24aa7e8b0631e49be39f0bb1152f14553", "committedDate": "2020-12-21T02:43:31Z", "message": "Fix baggage test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eec252bfbfb3c4fc5b9681bbd9ec96a0db3c602d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eec252bfbfb3c4fc5b9681bbd9ec96a0db3c602d", "committedDate": "2020-12-21T03:23:15Z", "message": "Fix the build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f582c01e5a720c8364707e06044dd87a49bc2c9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3f582c01e5a720c8364707e06044dd87a49bc2c9", "committedDate": "2020-12-21T03:29:24Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f26374d30789e8a159e7910d452d757aa64d876", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f26374d30789e8a159e7910d452d757aa64d876", "committedDate": "2020-12-21T04:13:45Z", "message": "Remove code coverage check from testing-common"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44cefd04e11ae646b56bc987eb64f9fac677cda", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a44cefd04e11ae646b56bc987eb64f9fac677cda", "committedDate": "2020-12-21T04:30:38Z", "message": "Spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTIzNjcy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556123672", "createdAt": "2020-12-21T04:31:45Z", "commit": {"oid": "a44cefd04e11ae646b56bc987eb64f9fac677cda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDozMTo0NVrOIJL8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDozMTo0NVrOIJL8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUwMzgyNg==", "bodyText": "@anuraaga I left this one for you \ud83d\ude01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546503826", "createdAt": "2020-12-21T04:31:45Z", "author": {"login": "trask"}, "path": "instrumentation/kotlinx-coroutines/javaagent/src/test/groovy/KotlinCoroutineInstrumentationTest.groovy", "diffHunk": "@@ -7,7 +7,10 @@ import io.opentelemetry.api.common.AttributeKey\n import io.opentelemetry.instrumentation.test.AgentTestRunner\n import kotlinx.coroutines.Dispatchers\n import kotlinx.coroutines.ThreadPoolDispatcherKt\n+import spock.lang.Ignore\n \n+// FIXME (trask)\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a44cefd04e11ae646b56bc987eb64f9fac677cda"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47e7701bb360a12dd80bcde2f5ff02f63deff7bc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/47e7701bb360a12dd80bcde2f5ff02f63deff7bc", "committedDate": "2020-12-21T05:07:49Z", "message": "Fix new gradle files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "584382e4ad249d0eaab6832185743148915cd1ce", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/584382e4ad249d0eaab6832185743148915cd1ce", "committedDate": "2020-12-21T05:19:04Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2264e26f1ec3917b4d1c5a84dbb9b06237555063", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2264e26f1ec3917b4d1c5a84dbb9b06237555063", "committedDate": "2020-12-21T06:42:18Z", "message": "Fix kotlin coroutine test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTc1NDYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556175461", "createdAt": "2020-12-21T07:26:42Z", "commit": {"oid": "2264e26f1ec3917b4d1c5a84dbb9b06237555063"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoyNjo0MlrOIJOoFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoyNjo0MlrOIJOoFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NzczMw==", "bodyText": "Hooray for better tests!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546547733", "createdAt": "2020-12-21T07:26:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kotlinx-coroutines/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/kotlinxcoroutines/KotlinCoroutinesInstrumentationModule.java", "diffHunk": "@@ -28,6 +28,15 @@ public KotlinCoroutinesInstrumentationModule() {\n     super(\"kotlinx-coroutines\");\n   }\n \n+  @Override\n+  public String[] additionalHelperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.extension.kotlin.ContextExtensionsKt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2264e26f1ec3917b4d1c5a84dbb9b06237555063"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/21acc89ec7b325198b7d492b66cef3f7eeb5a2cd", "committedDate": "2020-12-21T07:34:14Z", "message": "Fix CI sporadic hanging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjE0Nzgw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556214780", "createdAt": "2020-12-21T08:45:32Z", "commit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODo0NTozMlrOIJQe6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTowNjowM1rOIJRELQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3ODE1Mw==", "bodyText": "Note to reviewers, the span name already asserts this, no need for a testing-only API", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546578153", "createdAt": "2020-12-21T08:45:32Z", "author": {"login": "anuraaga"}, "path": "instrumentation/hystrix-1.4/javaagent/src/test/groovy/HystrixObservableTest.groovy", "diffHunk": "@@ -62,7 +46,6 @@ class HystrixObservableTest extends AgentTestRunner {\n     }\n \n     expect:\n-    TRANSFORMED_CLASSES_NAMES.contains(\"HystrixObservableTest\\$1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4MjIzOQ==", "bodyText": "\ud83d\ude38", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546582239", "createdAt": "2020-12-21T08:54:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/opentelemetry-api-1.0/javaagent/src/test/groovy/ContextBridgeTest.groovy", "diffHunk": "@@ -3,192 +3,150 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-import application.io.opentelemetry.api.OpenTelemetry\n-import application.io.opentelemetry.api.baggage.Baggage\n-import application.io.opentelemetry.api.baggage.BaggageEntryMetadata\n-import application.io.opentelemetry.api.trace.Span\n-import application.io.opentelemetry.context.Context\n-import application.io.opentelemetry.context.ContextKey\n+import io.opentelemetry.api.OpenTelemetry\n+import io.opentelemetry.api.baggage.Baggage\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.context.ContextKey\n+import io.opentelemetry.extension.annotations.WithSpan\n import io.opentelemetry.instrumentation.test.AgentTestRunner\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.Executors\n import java.util.concurrent.atomic.AtomicReference\n \n class ContextBridgeTest extends AgentTestRunner {\n \n   private static final ContextKey<String> ANIMAL = ContextKey.named(\"animal\")\n \n-  private static final io.opentelemetry.context.ContextKey<String> FOOD =\n-    io.opentelemetry.context.ContextKey.named(\"food\")\n-  private static final io.opentelemetry.context.ContextKey<String> COUNTRY =\n-    io.opentelemetry.context.ContextKey.named(\"country\")\n-\n-  def \"agent and application mix\"() {\n-    expect:\n-    def agentContext = io.opentelemetry.context.Context.current().with(COUNTRY, \"japan\")\n-    io.opentelemetry.context.Context.current().get(COUNTRY) == null\n-    agentContext.makeCurrent().withCloseable {\n-      io.opentelemetry.context.Context.current().get(COUNTRY) == \"japan\"\n-      Context.current().with(ANIMAL, \"cat\").makeCurrent().withCloseable {\n-        Context.current().get(ANIMAL) == \"cat\"\n-        io.opentelemetry.context.Context.current().get(COUNTRY) == \"japan\"\n-\n-        def agentContext2 = io.opentelemetry.context.Context.current().with(FOOD, \"cheese\")\n-        io.opentelemetry.context.Context.current().get(FOOD) == null\n-        agentContext2.makeCurrent().withCloseable {\n-          io.opentelemetry.context.Context.current().get(FOOD) == \"cheese\"\n-          io.opentelemetry.context.Context.current().get(COUNTRY) == \"japan\"\n-          Context.current().get(ANIMAL) == \"cat\"\n-        }\n-      }\n+  def \"agent propagates application's context\"() {\n+    when:\n+    def context = Context.current().with(ANIMAL, \"cat\")\n+    def captured = new AtomicReference<String>()\n+    context.makeCurrent().withCloseable {\n+      Executors.newSingleThreadExecutor().submit({\n+        captured.set(Context.current().get(ANIMAL))\n+      }).get()\n     }\n+\n+    then:\n+    captured.get() == \"cat\"\n   }\n \n-  // The difference between \"standard\" context interop and our bridge is that with normal interop,\n-  // keys are still isolated completely. We have special logic to share the same data for our known\n-  // types like span.\n-  def \"agent and application share span\"() {\n+  def \"application propagates agent's context\"() {\n     when:\n-    def applicationTracer = OpenTelemetry.getGlobalTracer(\"test\")\n-    def agentTracer = io.opentelemetry.api.OpenTelemetry.getGlobalTracer(\"test\")\n+    new Runnable() {\n+      @WithSpan(\"test\")\n+      @Override\n+      void run() {\n+        // using @WithSpan above to make the agent generate a context\n+        // and then using manual propagation below to verify that context can be propagated by user\n+        def context = Context.current()\n+        Context.root().makeCurrent().withCloseable {\n+          Span.current().setAttribute(\"dog\", \"no\")\n+          context.makeCurrent().withCloseable {\n+            Span.current().setAttribute(\"cat\", \"yes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg==", "bodyText": "What's this change for? Existing bug?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546584252", "createdAt": "2020-12-21T08:58:31Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -42,14 +42,17 @@ public boolean matches(T target) {\n         || name.startsWith(\"com.jayway.jsonpath.\")\n         || name.startsWith(\"com.lightbend.lagom.\")\n         || name.startsWith(\"javax.el.\")\n-        || name.startsWith(\"net.sf.cglib.\")\n         || name.startsWith(\"org.apache.lucene.\")\n         || name.startsWith(\"org.apache.tartarus.\")\n         || name.startsWith(\"org.json.simple.\")\n         || name.startsWith(\"org.yaml.snakeyaml.\")) {\n       return true;\n     }\n \n+    if (name.startsWith(\"net.sf.cglib.\")) {\n+      return !name.equals(\"net.sf.cglib.core.internal.LoadingCache$2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDU0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546584541", "createdAt": "2020-12-21T08:59:08Z", "author": {"login": "anuraaga"}, "path": "settings.gradle", "diffHunk": "@@ -217,7 +221,9 @@ include ':benchmark-integration'\n include ':benchmark-integration:jetty-perftest'\n \n def setBuildFile(project) {\n-  if (['javaagent', 'library', 'testing'].contains(project.projectDir.name) && project.path != ':javaagent') {\n+  // javaagent-unittests modules are needed until those projects have library modules", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NTA5NQ==", "bodyText": "Is this needed even though we don't have a suppress? Well IIRC default of bytebuddy is to suppress, should we disable suppression instead and let it throw?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546585095", "createdAt": "2020-12-21T09:00:18Z", "author": {"login": "anuraaga"}, "path": "testing-common/integration-tests/src/main/java/context/ContextTestInstrumentationModule.java", "diffHunk": "@@ -87,10 +93,14 @@ public static void methodExit(@Advice.Return(readOnly = false) boolean isInstrum\n     @Advice.OnMethodExit\n     public static void methodExit(\n         @Advice.This KeyClass thiz, @Advice.Return(readOnly = false) int contextCount) {\n-      ContextStore<KeyClass, Context> contextStore =\n-          InstrumentationContext.get(KeyClass.class, Context.class);\n-      Context context = contextStore.putIfAbsent(thiz, new Context());\n-      contextCount = ++context.count;\n+      try {\n+        ContextStore<KeyClass, Context> contextStore =\n+            InstrumentationContext.get(KeyClass.class, Context.class);\n+        Context context = contextStore.putIfAbsent(thiz, new Context());\n+        contextCount = ++context.count;\n+      } catch (Throwable t) {\n+        t.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NTgzNA==", "bodyText": "We do this for many tests, is there anything specific for this one?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546585834", "createdAt": "2020-12-21T09:01:57Z", "author": {"login": "anuraaga"}, "path": "testing-common/integration-tests/src/test/groovy/context/FieldInjectionDisabledTest.groovy", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package context\n+\n+import io.opentelemetry.instrumentation.test.AgentTestRunner\n+import java.lang.reflect.Field\n+import java.util.function.BiFunction\n+import library.DisabledKeyClass\n+\n+/**\n+ * Make sure that fields not get injected into the class if it is disabled via system properties.\n+ *\n+ * Unfortunately we cannot set system properties here early enough for AgentTestRunner to see.\n+ * Instead we have to configure this via Gradle. Ideally we should not have to do this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NjIyMQ==", "bodyText": "Nice", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546586221", "createdAt": "2020-12-21T09:02:55Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/InstrumentationSpecification.groovy", "diffHunk": "@@ -25,13 +24,4 @@ abstract class InstrumentationSpecification extends Specification {\n       options = \"io.opentelemetry.instrumentation.test.asserts.ListWriterAssert\")\n     @DelegatesTo(value = InMemoryExporterAssert, strategy = Closure.DELEGATE_FIRST)\n     final Closure spec)\n-\n-  abstract void assertTracesWithFilter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NjQ3Nw==", "bodyText": "Oh - yeah should be able to", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546586477", "createdAt": "2020-12-21T09:03:26Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/InstrumentationTestRunner.groovy", "diffHunk": "@@ -5,64 +5,98 @@\n \n package io.opentelemetry.instrumentation.test\n \n-import com.google.common.base.Predicate\n-import com.google.common.base.Predicates\n+\n import groovy.transform.stc.ClosureParams\n import groovy.transform.stc.SimpleType\n import io.opentelemetry.api.OpenTelemetry\n import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator\n+import io.opentelemetry.context.Context\n import io.opentelemetry.context.propagation.ContextPropagators\n import io.opentelemetry.instrumentation.test.asserts.InMemoryExporterAssert\n import io.opentelemetry.sdk.OpenTelemetrySdk\n-import io.opentelemetry.sdk.trace.data.SpanData\n+import io.opentelemetry.sdk.common.CompletableResultCode\n+import io.opentelemetry.sdk.testing.exporter.InMemorySpanExporter\n+import io.opentelemetry.sdk.trace.ReadWriteSpan\n+import io.opentelemetry.sdk.trace.ReadableSpan\n+import io.opentelemetry.sdk.trace.SpanProcessor\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor\n import org.junit.Before\n import spock.lang.Specification\n+\n /**\n  * A spock test runner which automatically initializes an in-memory exporter that can be used to\n  * verify traces.\n  */\n abstract class InstrumentationTestRunner extends Specification {\n \n-  protected static final InMemoryExporter TEST_WRITER\n+  protected static final InMemorySpanExporter testExporter\n+\n+  private static boolean forceFlushCalled\n \n   static {\n-    TEST_WRITER = new InMemoryExporter()\n+    testExporter = InMemorySpanExporter.create()\n     // TODO this is probably temporary until default propagators are supplied by SDK\n     //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n     //  currently checking against no-op implementation so that it won't override aws-lambda\n     //  propagator configuration\n     if (OpenTelemetry.getGlobalPropagators().getTextMapPropagator().getClass().getSimpleName() == \"NoopTextMapPropagator\") {\n-      // Workaround https://github.com/open-telemetry/opentelemetry-java/pull/2096\n       OpenTelemetry.setGlobalPropagators(\n         ContextPropagators.create(W3CTraceContextPropagator.getInstance()))\n     }\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(TEST_WRITER)\n+    // TODO (trask) can we add 2 span processors here and not delegate?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NjczNA==", "bodyText": "Remove?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546586734", "createdAt": "2020-12-21T09:03:58Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/asserts/TraceAssert.groovy", "diffHunk": "@@ -23,14 +24,16 @@ class TraceAssert {\n     this.spans = spans\n   }\n \n-  static void assertTrace(InMemoryExporter writer, String traceId, int expectedSize,\n+  static void assertTrace(Supplier<List<SpanData>> spanSupplier, String traceId, int expectedSize,\n                           @ClosureParams(value = SimpleType, options = ['io.opentelemetry.instrumentation.test.asserts.TraceAssert'])\n                           @DelegatesTo(value = TraceAssert, strategy = Closure.DELEGATE_FIRST) Closure spec) {\n-    def spans = getTrace(writer, traceId)\n+    def spans = getTrace(spanSupplier, traceId)\n     Stopwatch stopwatch = Stopwatch.createStarted()\n     while (spans.size() < expectedSize && stopwatch.elapsed(TimeUnit.SECONDS) < 10) {\n       Thread.sleep(10)\n-      spans = getTrace(writer, traceId)\n+      spans = getTrace(spanSupplier, traceId)\n+      println spans.size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NzAyMA==", "bodyText": "Technically it's not an exporter but we can cleanup in followups", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546587020", "createdAt": "2020-12-21T09:04:37Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/java/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -5,240 +5,93 @@\n \n package io.opentelemetry.instrumentation.test;\n \n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Stopwatch;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.TreeTraverser;\n-import com.google.common.primitives.Ints;\n-import com.google.common.primitives.Longs;\n import io.opentelemetry.api.trace.SpanId;\n-import io.opentelemetry.context.Context;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.ReadWriteSpan;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class InMemoryExporter implements SpanProcessor {\n-\n-  private static final Logger log = LoggerFactory.getLogger(InMemoryExporter.class);\n-\n-  private final List<List<SpanData>> traces = new ArrayList<>(); // guarded by tracesLock\n-\n-  private boolean needsTraceSorting; // guarded by tracesLock\n-  private final Set<String> needsSpanSorting = new HashSet<>(); // guarded by tracesLock\n-\n-  private final Object tracesLock = new Object();\n-\n-  // not using span startEpochNanos since that is not strictly increasing so can lead to ties\n-  private final Map<String, Integer> spanOrders = new ConcurrentHashMap<>();\n-  private final AtomicInteger nextSpanOrder = new AtomicInteger();\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-  private volatile boolean forceFlushCalled;\n+public class InMemoryExporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NzY5Mw==", "bodyText": "Does this javadoc apply? I guess it's just to use in scala / kotlin tests", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r546587693", "createdAt": "2020-12-21T09:06:03Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/Java8BytecodeBridge.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.Tracer;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+\n+/**\n+ * A helper for accessing methods that rely on new Java 8 bytecode features such as calling a static\n+ * interface methods. In instrumentation, we may need to call these methods in code that is inlined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa41e7e07af664b273d08a7cafff5b25f7f977d5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa41e7e07af664b273d08a7cafff5b25f7f977d5", "committedDate": "2020-12-21T20:39:50Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bdec4b1ee8b8bbc58ef0b064feda2ccbdcf580c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1bdec4b1ee8b8bbc58ef0b064feda2ccbdcf580c", "committedDate": "2020-12-21T20:50:22Z", "message": "Unnecessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189a68f341d931c8158b370e953f5541724b16df", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/189a68f341d931c8158b370e953f5541724b16df", "committedDate": "2020-12-21T22:32:33Z", "message": "Spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzQwMzEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556740310", "createdAt": "2020-12-22T00:12:02Z", "commit": {"oid": "189a68f341d931c8158b370e953f5541724b16df"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "742474bcc15542e8d14eaef0b908a46e6cbd5ae9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/742474bcc15542e8d14eaef0b908a46e6cbd5ae9", "committedDate": "2020-12-22T01:19:04Z", "message": "Bring back deadlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39246e78cc436ec7ed98465d90985a46d902bb3", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e39246e78cc436ec7ed98465d90985a46d902bb3", "committedDate": "2020-12-22T01:19:04Z", "message": "Fix gradle output deadlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a117395a1e433b3e8b792371099201ee88319ce8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a117395a1e433b3e8b792371099201ee88319ce8", "committedDate": "2020-12-22T04:58:07Z", "message": "Look for new deadlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eb58976873752f8b868542c22dc25b67912a4b55", "committedDate": "2020-12-22T05:08:29Z", "message": "To be reverted: --no-build-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdeb7ac0f94b9fea27e969646b93a1abd996d7e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbdeb7ac0f94b9fea27e969646b93a1abd996d7e", "committedDate": "2020-12-22T07:21:09Z", "message": "Revert \"To be reverted: --no-build-cache\"\n\nThis reverts commit eb58976873752f8b868542c22dc25b67912a4b55."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4607cc34b42b6cac0ab1849611d1a498b307df64", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4607cc34b42b6cac0ab1849611d1a498b307df64", "committedDate": "2020-12-22T07:21:11Z", "message": "Revert \"Look for new deadlock\"\n\nThis reverts commit a117395a1e433b3e8b792371099201ee88319ce8."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a673ead51de1386f1eccc52024d646c7ef5a9bb", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8a673ead51de1386f1eccc52024d646c7ef5a9bb", "committedDate": "2020-12-22T07:21:13Z", "message": "Revert \"Fix gradle output deadlock\"\n\nThis reverts commit e39246e78cc436ec7ed98465d90985a46d902bb3."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1efdffe3e98d795531f4dcac25efd87b3a7e4a37", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1efdffe3e98d795531f4dcac25efd87b3a7e4a37", "committedDate": "2020-12-22T07:21:15Z", "message": "Revert \"Bring back deadlock\"\n\nThis reverts commit 742474bcc15542e8d14eaef0b908a46e6cbd5ae9."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODY5MDM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556869039", "createdAt": "2020-12-22T07:24:11Z", "commit": {"oid": "1efdffe3e98d795531f4dcac25efd87b3a7e4a37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoyNDoxMVrOIJxAzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoyNDoxMVrOIJxAzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExMTExOA==", "bodyText": "This seems like a reasonable addition even if it doesn't solve our deadlock. If nothing else, it could speed up the build a bit by having less to run instrumentation on?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547111118", "createdAt": "2020-12-22T07:24:11Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -57,8 +57,7 @@ public boolean matches(T target) {\n       return false;\n     }\n \n-    if (name.startsWith(\"org.gradle.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1efdffe3e98d795531f4dcac25efd87b3a7e4a37"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c684902cd11b0101dd5defd4d6540877c7775938", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c684902cd11b0101dd5defd4d6540877c7775938", "committedDate": "2020-12-22T07:34:47Z", "message": "Add org.gradle to GlobalIgnoresMatcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODc2MTIz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556876123", "createdAt": "2020-12-22T07:39:44Z", "commit": {"oid": "c684902cd11b0101dd5defd4d6540877c7775938"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODYxMjA0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-556861204", "createdAt": "2020-12-22T07:05:15Z", "commit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowNToxNlrOIJwnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzo0MjozMVrOIJxb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNDU1Mg==", "bodyText": "These are compileOnly, do we still have to exclude them?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547104552", "createdAt": "2020-12-22T07:05:16Z", "author": {"login": "iNikem"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -55,3 +51,76 @@ afterEvaluate {\n     project(':javaagent-tooling').configurations.instrumentationMuzzle + configurations.runtimeClasspath\n   ).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  dependencies {\n+    exclude(project(':javaagent-bootstrap'))\n+    exclude(project(':instrumentation-api'))\n+    exclude(project(':javaagent-api'))\n+    exclude(project(':javaagent-tooling'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNTI2Mg==", "bodyText": "Why this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547105262", "createdAt": "2020-12-22T07:07:19Z", "author": {"login": "iNikem"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -55,3 +51,76 @@ afterEvaluate {\n     project(':javaagent-tooling').configurations.instrumentationMuzzle + configurations.runtimeClasspath\n   ).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  dependencies {\n+    exclude(project(':javaagent-bootstrap'))\n+    exclude(project(':instrumentation-api'))\n+    exclude(project(':javaagent-api'))\n+    exclude(project(':javaagent-tooling'))\n+    exclude(dependency(deps.bytebuddy))\n+    exclude(dependency(deps.opentelemetryApi))\n+    exclude(dependency(deps.opentelemetryContext))\n+    exclude(dependency(deps.slf4j))\n+  }\n+\n+  // rewrite library instrumentation dependencies\n+  relocate \"io.opentelemetry.instrumentation\", \"io.opentelemetry.javaagent.shaded.instrumentation\"\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API usage\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.spi\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.spi\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+\n+  // relocate OpenTelemetry extensions\n+  relocate \"io.opentelemetry.extension.kotlin\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.kotlin\"\n+  relocate \"io.opentelemetry.extension.trace.propagation\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.trace.propagation\"\n+\n+  // this is for instrumentation on opentelemetry-api itself\n+  relocate \"application.io.opentelemetry\", \"io.opentelemetry\"\n+}\n+\n+tasks.withType(Test).configureEach {\n+  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dnet.bytebuddy.raw=true\"\n+  jvmArgs \"-javaagent:${project(\":testing:agent-for-testing\").buildDir}/libs/javaagent-for-testing.jar\"\n+  jvmArgs \"-Dotel.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}\"\n+  jvmArgs \"-Dinternal.testing.disable.global.library.ignores=true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNjA5OA==", "bodyText": "I think we have to use sourceSets.main.output here somehow :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547106098", "createdAt": "2020-12-22T07:09:38Z", "author": {"login": "iNikem"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -55,3 +51,76 @@ afterEvaluate {\n     project(':javaagent-tooling').configurations.instrumentationMuzzle + configurations.runtimeClasspath\n   ).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  dependencies {\n+    exclude(project(':javaagent-bootstrap'))\n+    exclude(project(':instrumentation-api'))\n+    exclude(project(':javaagent-api'))\n+    exclude(project(':javaagent-tooling'))\n+    exclude(dependency(deps.bytebuddy))\n+    exclude(dependency(deps.opentelemetryApi))\n+    exclude(dependency(deps.opentelemetryContext))\n+    exclude(dependency(deps.slf4j))\n+  }\n+\n+  // rewrite library instrumentation dependencies\n+  relocate \"io.opentelemetry.instrumentation\", \"io.opentelemetry.javaagent.shaded.instrumentation\"\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API usage\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.spi\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.spi\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+\n+  // relocate OpenTelemetry extensions\n+  relocate \"io.opentelemetry.extension.kotlin\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.kotlin\"\n+  relocate \"io.opentelemetry.extension.trace.propagation\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.trace.propagation\"\n+\n+  // this is for instrumentation on opentelemetry-api itself\n+  relocate \"application.io.opentelemetry\", \"io.opentelemetry\"\n+}\n+\n+tasks.withType(Test).configureEach {\n+  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dnet.bytebuddy.raw=true\"\n+  jvmArgs \"-javaagent:${project(\":testing:agent-for-testing\").buildDir}/libs/javaagent-for-testing.jar\"\n+  jvmArgs \"-Dotel.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}\"\n+  jvmArgs \"-Dinternal.testing.disable.global.library.ignores=true\"\n+\n+  dependsOn shadowJar\n+  dependsOn \":testing:agent-for-testing:shadowJar\"\n+\n+  // The sources are packaged into the testing jar so we need to make sure to exclude from the test\n+  // classpath, which automatically inherits them, to ensure our shaded versions are used.\n+  classpath = classpath.filter {\n+    if (file(\"$buildDir/resources/main\").equals(it) || file(\"$buildDir/classes/java/main\").equals(it)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNzAxOA==", "bodyText": "Why do you have propagators configuration both here and in gradle build script?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547107018", "createdAt": "2020-12-22T07:12:29Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-lambda-1.0/library/src/test/groovy/io/opentelemetry/instrumentation/awslambda/v1_0/AwsLambdaSqsHandlerTest.groovy", "diffHunk": "@@ -8,10 +8,22 @@ package io.opentelemetry.instrumentation.awslambda.v1_0\n import com.amazonaws.services.lambda.runtime.Context\n import com.amazonaws.services.lambda.runtime.RequestHandler\n import com.amazonaws.services.lambda.runtime.events.SQSEvent\n+import io.opentelemetry.api.OpenTelemetry\n+import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator\n+import io.opentelemetry.context.propagation.ContextPropagators\n+import io.opentelemetry.context.propagation.TextMapPropagator\n+import io.opentelemetry.extension.trace.propagation.AwsXRayPropagator\n import io.opentelemetry.instrumentation.test.InstrumentationTestTrait\n \n class AwsLambdaSqsHandlerTest extends AbstractAwsLambdaSqsHandlerTest implements InstrumentationTestTrait {\n \n+  // Lambda instrumentation requires XRay propagator to be enabled.\n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODU4MA==", "bodyText": "skipAdditionalLibraryMatcher is now unused?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547108580", "createdAt": "2020-12-22T07:16:56Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -109,7 +115,9 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n             .ignore(any(), skipClassLoader());\n \n     ignoredAgentBuilder =\n-        ignoredAgentBuilder.or(globalIgnoresMatcher(skipAdditionalLibraryMatcher));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODg5Mg==", "bodyText": "What is this? :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547108892", "createdAt": "2020-12-22T07:17:47Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -143,6 +147,11 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n     agentBuilder = customizeByteBuddyAgent(agentBuilder);\n     log.debug(\"Installed {} instrumenter(s)\", numInstrumenters);\n     ResettableClassFileTransformer resettableClassFileTransformer = agentBuilder.installOn(inst);\n+    try {\n+      Class.forName(\"io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTc5OQ==", "bodyText": "Is this not needed anymore?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547109799", "createdAt": "2020-12-22T07:20:25Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -123,10 +131,6 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n               .with(new TransformLoggingListener());\n     }\n \n-    for (AgentBuilder.Listener listener : listeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwOTkzNQ==", "bodyText": "why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547109935", "createdAt": "2020-12-22T07:20:54Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -42,7 +42,6 @@ public boolean matches(T target) {\n         || name.startsWith(\"com.jayway.jsonpath.\")\n         || name.startsWith(\"com.lightbend.lagom.\")\n         || name.startsWith(\"javax.el.\")\n-        || name.startsWith(\"net.sf.cglib.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb58976873752f8b868542c22dc25b67912a4b55"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzExODA3Mw==", "bodyText": "Who does this now?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547118073", "createdAt": "2020-12-22T07:42:31Z", "author": {"login": "iNikem"}, "path": "testing-common/src/main/java/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -5,240 +5,93 @@\n \n package io.opentelemetry.instrumentation.test;\n \n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Stopwatch;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.TreeTraverser;\n-import com.google.common.primitives.Ints;\n-import com.google.common.primitives.Longs;\n import io.opentelemetry.api.trace.SpanId;\n-import io.opentelemetry.context.Context;\n-import io.opentelemetry.sdk.common.CompletableResultCode;\n-import io.opentelemetry.sdk.trace.ReadWriteSpan;\n-import io.opentelemetry.sdk.trace.ReadableSpan;\n-import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n import io.opentelemetry.sdk.trace.data.SpanData;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class InMemoryExporter implements SpanProcessor {\n-\n-  private static final Logger log = LoggerFactory.getLogger(InMemoryExporter.class);\n-\n-  private final List<List<SpanData>> traces = new ArrayList<>(); // guarded by tracesLock\n-\n-  private boolean needsTraceSorting; // guarded by tracesLock\n-  private final Set<String> needsSpanSorting = new HashSet<>(); // guarded by tracesLock\n-\n-  private final Object tracesLock = new Object();\n-\n-  // not using span startEpochNanos since that is not strictly increasing so can lead to ties\n-  private final Map<String, Integer> spanOrders = new ConcurrentHashMap<>();\n-  private final AtomicInteger nextSpanOrder = new AtomicInteger();\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n-  private volatile boolean forceFlushCalled;\n+public class InMemoryExporter {\n \n-  @Override\n-  public void onStart(Context context, ReadWriteSpan readWriteSpan) {\n-    SpanData sd = readWriteSpan.toSpanData();\n-    log.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c684902cd11b0101dd5defd4d6540877c7775938"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f19bb225f7fa8a99b96fb0cafa2b6fab555885f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f19bb225f7fa8a99b96fb0cafa2b6fab555885f", "committedDate": "2020-12-22T07:53:47Z", "message": "Bring back cglib ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac643e67508e0c52902f68aea600608f67acba49", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac643e67508e0c52902f68aea600608f67acba49", "committedDate": "2020-12-22T08:24:14Z", "message": "Remove unused code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDQ3MzM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-557047339", "createdAt": "2020-12-22T12:35:08Z", "commit": {"oid": "ac643e67508e0c52902f68aea600608f67acba49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozNTowOFrOIJ5q4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozNTowOFrOIJ5q4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1Mjk2Mg==", "bodyText": "The PR does not change this API, however could we keep it to make sure the existing tests in vendor distributions work?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547252962", "createdAt": "2020-12-22T12:35:08Z", "author": {"login": "pavolloffay"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -81,10 +87,7 @@ public static void installBytebuddyAgent(Instrumentation inst) {\n    * @return the agent's class transformer\n    */\n   public static ResettableClassFileTransformer installBytebuddyAgent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac643e67508e0c52902f68aea600608f67acba49"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aa1eaa836e7cfc72ff0c9c2e7ce2689e3b493bc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6aa1eaa836e7cfc72ff0c9c2e7ce2689e3b493bc", "committedDate": "2020-12-23T01:36:37Z", "message": "Fix FieldBackedProviderTest's cglib test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "063613d6d6024f8b13dbed7963e88879d78367b8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/063613d6d6024f8b13dbed7963e88879d78367b8", "committedDate": "2020-12-23T02:04:58Z", "message": "Enable debug logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "839c55e2e4a9c2907f42894167dde2c9c6c91aa1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/839c55e2e4a9c2907f42894167dde2c9c6c91aa1", "committedDate": "2020-12-23T03:21:04Z", "message": "Fix gradle deadlocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "782408062aa91228d925f79aba8c75fbe61b96c8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/782408062aa91228d925f79aba8c75fbe61b96c8", "committedDate": "2020-12-23T03:41:26Z", "message": "Set net.bytebuddy.raw earlier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "058225d1e412a38c60b680e35bb8a7e1f749badb", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/058225d1e412a38c60b680e35bb8a7e1f749badb", "committedDate": "2020-12-23T05:07:20Z", "message": "Add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0775f531d85f5a14778ae67691a4c0b916c819e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c0775f531d85f5a14778ae67691a4c0b916c819e", "committedDate": "2020-12-23T05:11:28Z", "message": "Can't see github action output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10b1acc03d40758532aaa456e059713e7734148d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10b1acc03d40758532aaa456e059713e7734148d", "committedDate": "2020-12-23T05:20:43Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b031c41ca3f661004a6f2b9cdcfb2527e44395e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b031c41ca3f661004a6f2b9cdcfb2527e44395e", "committedDate": "2020-12-23T05:32:19Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8652c1bf7c3b6623b47075e3575e796f379d6a33", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8652c1bf7c3b6623b47075e3575e796f379d6a33", "committedDate": "2020-12-23T05:56:10Z", "message": "Fix undertow tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b263ce30dfbf165e32c594182694f49a4bb7a391", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b263ce30dfbf165e32c594182694f49a4bb7a391", "committedDate": "2020-12-23T06:33:26Z", "message": "Fix undertow tests, take 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86568f2a2b9d2eed64a7cba238341fdf56a6dbf9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/86568f2a2b9d2eed64a7cba238341fdf56a6dbf9", "committedDate": "2020-12-23T06:52:52Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/473acce59118b1fc776578ee3c94136b88f15d4a", "committedDate": "2020-12-23T07:04:55Z", "message": "Simplify depedencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Nzk5MDQy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-557799042", "createdAt": "2020-12-23T11:03:23Z", "commit": {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMTowMzoyNFrOIKhVsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMToxMTo1MlrOIKhjeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwMjg5Nw==", "bodyText": "why no retry?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547902897", "createdAt": "2020-12-23T11:03:24Z", "author": {"login": "iNikem"}, "path": ".github/workflows/pr.yaml", "diffHunk": "@@ -19,11 +19,7 @@ jobs:\n           job-id: jdk11\n \n       - name: Build\n-        uses: nick-invision/retry@v2.2.0\n-        with:\n-          command: ./gradlew check --stacktrace -x :smoke-tests:test\n-          timeout_minutes: 90\n-          max_attempts: 3\n+        run: ./gradlew check --stacktrace -x :smoke-tests:test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwMzUyNA==", "bodyText": "Does word shaded here mean anything? I mean, is this agent used for tests somehow different from the \"usual\" agent that we release?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547903524", "createdAt": "2020-12-23T11:05:00Z", "author": {"login": "iNikem"}, "path": "docs/contributing/writing-instrumentation.md", "diffHunk": "@@ -113,6 +113,34 @@ the base class you wrote earlier, but in this, create a client using none of the\n only the ones offered by the library. Implement the `AgentTestRunner` trait for common setup logic,\n and try running. All the tests should pass for agent instrumentation too.\n \n+Note that all the tests inside the `javaagent` module will be run using the shaded `-javaagent`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwNTE3Ng==", "bodyText": "Does it make sense to change FieldBackedProvider logging to TRACE?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547905176", "createdAt": "2020-12-23T11:08:39Z", "author": {"login": "iNikem"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -55,3 +51,68 @@ afterEvaluate {\n     project(':javaagent-tooling').configurations.instrumentationMuzzle + configurations.runtimeClasspath\n   ).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  // rewrite library instrumentation dependencies\n+  relocate \"io.opentelemetry.instrumentation\", \"io.opentelemetry.javaagent.shaded.instrumentation\"\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API usage\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.spi\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.spi\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+\n+  // relocate OpenTelemetry extensions\n+  relocate \"io.opentelemetry.extension.kotlin\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.kotlin\"\n+  relocate \"io.opentelemetry.extension.trace.propagation\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.extension.trace.propagation\"\n+\n+  // this is for instrumentation on opentelemetry-api itself\n+  relocate \"application.io.opentelemetry\", \"io.opentelemetry\"\n+}\n+\n+tasks.withType(Test).configureEach {\n+  jvmArgs \"-Dotel.javaagent.debug=true\"\n+  // the debug level logging in this class occurs frequently (and under class file transform),\n+  // which can lead gradle to deadlock sporadically when it triggers a class to load while holding\n+  // a lock, and then (because gradle hijacks System.out), it gets called from inside of the class\n+  // file transform, and then tries to grab a different lock\n+  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.log.io.opentelemetry.javaagent.tooling.context.FieldBackedProvider=info\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "473acce59118b1fc776578ee3c94136b88f15d4a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkwNjQyNg==", "bodyText": "I still see it :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r547906426", "createdAt": "2020-12-23T11:11:52Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -42,14 +42,17 @@ public boolean matches(T target) {\n         || name.startsWith(\"com.jayway.jsonpath.\")\n         || name.startsWith(\"com.lightbend.lagom.\")\n         || name.startsWith(\"javax.el.\")\n-        || name.startsWith(\"net.sf.cglib.\")\n         || name.startsWith(\"org.apache.lucene.\")\n         || name.startsWith(\"org.apache.tartarus.\")\n         || name.startsWith(\"org.json.simple.\")\n         || name.startsWith(\"org.yaml.snakeyaml.\")) {\n       return true;\n     }\n \n+    if (name.startsWith(\"net.sf.cglib.\")) {\n+      return !name.equals(\"net.sf.cglib.core.internal.LoadingCache$2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4NDI1Mg=="}, "originalCommit": {"oid": "21acc89ec7b325198b7d492b66cef3f7eeb5a2cd"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db5c58d9a0f9f45b92ce8e70d283c8abfcb88e4a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db5c58d9a0f9f45b92ce8e70d283c8abfcb88e4a", "committedDate": "2020-12-23T22:35:50Z", "message": "More doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f7eaf5f17c68f98bef43a6133457d94694047c8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f7eaf5f17c68f98bef43a6133457d94694047c8", "committedDate": "2020-12-23T23:40:11Z", "message": "Different fix for gradle deadlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1991ee85715e1e6cab83eb7ad021d9317762833", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1991ee85715e1e6cab83eb7ad021d9317762833", "committedDate": "2020-12-23T23:51:08Z", "message": "Add link from CONTRIBUTING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d4171c0713aff6cdade1f96ff5dcdcfc7552d5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1d4171c0713aff6cdade1f96ff5dcdcfc7552d5", "committedDate": "2020-12-24T00:32:46Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e27895fef268ead369f4ad8a53c577d5687d77", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5e27895fef268ead369f4ad8a53c577d5687d77", "committedDate": "2020-12-24T00:55:33Z", "message": "Bump timeout for flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2f1604e43052ce3c668e774f1826e9c1257b04e", "committedDate": "2020-11-16T08:57:49Z", "message": "Run tests with javaagent."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTM1MTAw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-531135100", "createdAt": "2020-11-16T09:14:59Z", "commit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNDo1OVrOHzuyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNDo1OVrOHzuyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwNTk0Nw==", "bodyText": "Quick and dirty - I think better is to have a otel_ flag to disable batch span processor since some people may want to do so.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524005947", "createdAt": "2020-11-16T09:14:59Z", "author": {"login": "anuraaga"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/SpanExporterFactory.java", "diffHunk": "@@ -32,4 +32,9 @@\n    * @return The exporter names supported by this factory\n    */\n   Set<String> getNames();\n+\n+  /** Returns whether the batch span processor should not be used with this exporter. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTM3MDUz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-531137053", "createdAt": "2020-11-16T09:17:25Z", "commit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxNzoyNlrOHzu9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToyMToyMFrOHzvOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwODg0Nw==", "bodyText": "Annoying - but seems a simple way to get exported spans across the classloader. However, I will play with whether Jackson can marshal them for free (the SpanWrapper worries me)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524008847", "createdAt": "2020-11-16T09:17:26Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentTestingExporterAccess.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.doubleArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.longArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.StatusCode;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.ArrayValue;\n+import io.opentelemetry.proto.common.v1.InstrumentationLibrary;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.resource.v1.Resource;\n+import io.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans;\n+import io.opentelemetry.proto.trace.v1.ResourceSpans;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import io.opentelemetry.proto.trace.v1.Status;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class AgentTestingExporterAccess {\n+  private static final char TRACESTATE_KEY_VALUE_DELIMITER = '=';\n+  private static final char TRACESTATE_ENTRY_DELIMITER = ',';\n+  private static final Pattern TRACESTATE_ENTRY_DELIMITER_SPLIT_PATTERN =\n+      Pattern.compile(\"[ \\t]*\" + TRACESTATE_ENTRY_DELIMITER + \"[ \\t]*\");\n+\n+  private static final MethodHandle getExportRequests;\n+  private static final MethodHandle reset;\n+\n+  static {\n+    try {\n+      Class<?> agentTestingExporterFactoryClass =\n+          AgentClassLoaderAccess.loadClass(\n+              \"io.opentelemetry.javaagent.testing.exporter.AgentTestingExporterFactory\");\n+      getExportRequests =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass,\n+                  \"getExportRequests\",\n+                  MethodType.methodType(List.class));\n+      reset =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass, \"reset\", MethodType.methodType(void.class));\n+    } catch (Exception e) {\n+      throw new Error(\"Error accessing fields with reflection.\", e);\n+    }\n+  }\n+\n+  public static void reset() {\n+    try {\n+      reset.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke reset\", t);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static List<SpanData> getExportedSpans() {\n+    final List<byte[]> exportRequests;\n+    try {\n+      exportRequests = (List<byte[]>) getExportRequests.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getExportRequests\", t);\n+    }\n+\n+    List<ResourceSpans> allResourceSpans =\n+        exportRequests.stream()\n+            .map(\n+                serialized -> {\n+                  try {\n+                    return ExportTraceServiceRequest.parseFrom(serialized);\n+                  } catch (InvalidProtocolBufferException e) {\n+                    throw new Error(e);\n+                  }\n+                })\n+            .flatMap(request -> request.getResourceSpansList().stream())\n+            .collect(Collectors.toList());\n+    List<SpanData> spans = new ArrayList<>();\n+    for (ResourceSpans resourceSpans : allResourceSpans) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwOTY3MQ==", "bodyText": "I realized this is why a lot of people have problems identifying local root in collector :O", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524009671", "createdAt": "2020-11-16T09:18:11Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentTestingExporterAccess.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static io.opentelemetry.api.common.AttributeKey.booleanArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.doubleArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.longArrayKey;\n+import static io.opentelemetry.api.common.AttributeKey.stringArrayKey;\n+\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.trace.Span.Kind;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.api.trace.SpanId;\n+import io.opentelemetry.api.trace.StatusCode;\n+import io.opentelemetry.api.trace.TraceFlags;\n+import io.opentelemetry.api.trace.TraceId;\n+import io.opentelemetry.api.trace.TraceState;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.common.v1.AnyValue;\n+import io.opentelemetry.proto.common.v1.ArrayValue;\n+import io.opentelemetry.proto.common.v1.InstrumentationLibrary;\n+import io.opentelemetry.proto.common.v1.KeyValue;\n+import io.opentelemetry.proto.resource.v1.Resource;\n+import io.opentelemetry.proto.trace.v1.InstrumentationLibrarySpans;\n+import io.opentelemetry.proto.trace.v1.ResourceSpans;\n+import io.opentelemetry.proto.trace.v1.Span;\n+import io.opentelemetry.proto.trace.v1.Status;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.testing.trace.TestSpanData;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class AgentTestingExporterAccess {\n+  private static final char TRACESTATE_KEY_VALUE_DELIMITER = '=';\n+  private static final char TRACESTATE_ENTRY_DELIMITER = ',';\n+  private static final Pattern TRACESTATE_ENTRY_DELIMITER_SPLIT_PATTERN =\n+      Pattern.compile(\"[ \\t]*\" + TRACESTATE_ENTRY_DELIMITER + \"[ \\t]*\");\n+\n+  private static final MethodHandle getExportRequests;\n+  private static final MethodHandle reset;\n+\n+  static {\n+    try {\n+      Class<?> agentTestingExporterFactoryClass =\n+          AgentClassLoaderAccess.loadClass(\n+              \"io.opentelemetry.javaagent.testing.exporter.AgentTestingExporterFactory\");\n+      getExportRequests =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass,\n+                  \"getExportRequests\",\n+                  MethodType.methodType(List.class));\n+      reset =\n+          MethodHandles.lookup()\n+              .findStatic(\n+                  agentTestingExporterFactoryClass, \"reset\", MethodType.methodType(void.class));\n+    } catch (Exception e) {\n+      throw new Error(\"Error accessing fields with reflection.\", e);\n+    }\n+  }\n+\n+  public static void reset() {\n+    try {\n+      reset.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke reset\", t);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static List<SpanData> getExportedSpans() {\n+    final List<byte[]> exportRequests;\n+    try {\n+      exportRequests = (List<byte[]>) getExportRequests.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getExportRequests\", t);\n+    }\n+\n+    List<ResourceSpans> allResourceSpans =\n+        exportRequests.stream()\n+            .map(\n+                serialized -> {\n+                  try {\n+                    return ExportTraceServiceRequest.parseFrom(serialized);\n+                  } catch (InvalidProtocolBufferException e) {\n+                    throw new Error(e);\n+                  }\n+                })\n+            .flatMap(request -> request.getResourceSpansList().stream())\n+            .collect(Collectors.toList());\n+    List<SpanData> spans = new ArrayList<>();\n+    for (ResourceSpans resourceSpans : allResourceSpans) {\n+      Resource resource = resourceSpans.getResource();\n+      for (InstrumentationLibrarySpans ilSpans :\n+          resourceSpans.getInstrumentationLibrarySpansList()) {\n+        InstrumentationLibrary instrumentationLibrary = ilSpans.getInstrumentationLibrary();\n+        for (Span span : ilSpans.getSpansList()) {\n+          spans.add(\n+              TestSpanData.builder()\n+                  .setTraceId(TraceId.bytesToHex(span.getTraceId().toByteArray()))\n+                  .setSpanId(SpanId.bytesToHex(span.getSpanId().toByteArray()))\n+                  .setTraceState(extractTraceState(span.getTraceState()))\n+                  .setParentSpanId(SpanId.bytesToHex(span.getParentSpanId().toByteArray()))\n+                  .setResource(\n+                      io.opentelemetry.sdk.resources.Resource.create(\n+                          fromProto(resource.getAttributesList())))\n+                  .setInstrumentationLibraryInfo(\n+                      InstrumentationLibraryInfo.create(\n+                          instrumentationLibrary.getName(), instrumentationLibrary.getVersion()))\n+                  .setName(span.getName())\n+                  .setStartEpochNanos(span.getStartTimeUnixNano())\n+                  .setEndEpochNanos(span.getEndTimeUnixNano())\n+                  .setAttributes(fromProto(span.getAttributesList()))\n+                  .setEvents(\n+                      span.getEventsList().stream()\n+                          .map(\n+                              event ->\n+                                  SpanData.Event.create(\n+                                      event.getTimeUnixNano(),\n+                                      event.getName(),\n+                                      fromProto(event.getAttributesList()),\n+                                      event.getDroppedAttributesCount()\n+                                          + event.getAttributesCount()))\n+                          .collect(Collectors.toList()))\n+                  .setStatus(fromProto(span.getStatus()))\n+                  .setKind(fromProto(span.getKind()))\n+                  .setLinks(\n+                      span.getLinksList().stream()\n+                          .map(\n+                              link ->\n+                                  SpanData.Link.create(\n+                                      SpanContext.create(\n+                                          TraceId.bytesToHex(link.getTraceId().toByteArray()),\n+                                          SpanId.bytesToHex(link.getSpanId().toByteArray()),\n+                                          TraceFlags.getDefault(),\n+                                          extractTraceState(link.getTraceState())),\n+                                      fromProto(link.getAttributesList()),\n+                                      link.getDroppedAttributesCount() + link.getAttributesCount()))\n+                          .collect(Collectors.toList()))\n+                  // OTLP doesn't have hasRemoteParent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMTM4Mg==", "bodyText": "Realized I shouldn't drain here since we want to be able to wait for traces.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524011382", "createdAt": "2020-11-16T09:19:44Z", "author": {"login": "anuraaga"}, "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/exporter/OtlpInMemorySpanExporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing.exporter;\n+\n+import io.grpc.Server;\n+import io.grpc.inprocess.InProcessChannelBuilder;\n+import io.grpc.inprocess.InProcessServerBuilder;\n+import io.grpc.stub.StreamObserver;\n+import io.opentelemetry.exporter.otlp.OtlpGrpcSpanExporter;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest;\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse;\n+import io.opentelemetry.proto.collector.trace.v1.TraceServiceGrpc;\n+import io.opentelemetry.sdk.common.CompletableResultCode;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+class OtlpInMemorySpanExporter implements SpanExporter {\n+\n+  private final BlockingQueue<ExportTraceServiceRequest> collectedRequests =\n+      new LinkedBlockingQueue<>();\n+\n+  List<byte[]> getCollectedExportRequests() {\n+    List<ExportTraceServiceRequest> collected = new ArrayList<>(collectedRequests.size());\n+    collectedRequests.drainTo(collected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMjExNQ==", "bodyText": "This project is essentially a \"custom distro\", with no instrumentation included, and the testing exporter included.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524012115", "createdAt": "2020-11-16T09:20:23Z", "author": {"login": "anuraaga"}, "path": "testing/agent-for-testing/agent-for-testing.gradle", "diffHunk": "@@ -0,0 +1,80 @@\n+plugins {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMjU2NA==", "bodyText": "This test is using OpenTelemetry API, I loaded the instrumentation in here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524012564", "createdAt": "2020-11-16T09:20:46Z", "author": {"login": "anuraaga"}, "path": "testing/agent-for-testing/agent-for-testing.gradle", "diffHunk": "@@ -0,0 +1,80 @@\n+plugins {\n+  id \"com.github.johnrengelman.shadow\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+jar {\n+  manifest {\n+    attributes(\n+      \"Main-Class\": \"io.opentelemetry.javaagent.OpenTelemetryAgent\",\n+      \"Agent-Class\": \"io.opentelemetry.javaagent.OpenTelemetryAgent\",\n+      \"Premain-Class\": \"io.opentelemetry.javaagent.OpenTelemetryAgent\",\n+      \"Can-Redefine-Classes\": true,\n+      \"Can-Retransform-Classes\": true,\n+    )\n+  }\n+}\n+\n+CopySpec isolateSpec(Collection<Jar> shadowJarTasks) {\n+  return copySpec {\n+    from({ shadowJarTasks.collect { zipTree(it.archiveFile) } }) {\n+      // important to keep prefix 'inst' short, as it is prefixed to lots of strings in runtime mem\n+      into 'inst'\n+      rename '(^.*)\\\\.class$', '$1.classdata'\n+      // Rename LICENSE file since it clashes with license dir on non-case sensitive FSs (i.e. Mac)\n+      rename '^LICENSE$', 'LICENSE.renamed'\n+    }\n+  }\n+}\n+\n+configurations {\n+  shadowInclude\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.shadowInclude]\n+  archiveFileName = 'javaagent-for-testing.jar'\n+\n+  dependsOn ':testing:agent-exporter:shadowJar'\n+  with isolateSpec([project(':testing:agent-exporter').tasks.shadowJar])\n+\n+  manifest {\n+    inheritFrom project.tasks.jar.manifest\n+  }\n+\n+  mergeServiceFiles()\n+\n+  exclude '**/module-info.class'\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+}\n+\n+dependencies {\n+  // Dependencies to include without obfuscation.\n+  shadowInclude project(':javaagent-bootstrap')\n+\n+  testImplementation project(':testing-common')\n+  testImplementation deps.opentelemetryApi\n+}\n+\n+tasks.withType(Test).configureEach {\n+  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dnet.bytebuddy.raw=true\"\n+  jvmArgs \"-javaagent:${shadowJar.archiveFile.get().asFile.absolutePath}\"\n+  jvmArgs \"-Dotel.initializer.jar=${project(':instrumentation:opentelemetry-api-beta').tasks.shadowJar.archiveFile.get().asFile.absolutePath}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMzE0Mg==", "bodyText": "Goes through instrumentation API bridge, comes back from the SDK exporter through the agent classloader access", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524013142", "createdAt": "2020-11-16T09:21:20Z", "author": {"login": "anuraaga"}, "path": "testing/agent-for-testing/src/test/java/io/opentelemetry/javaagent/testing/AgentForTestingTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class AgentForTestingTest {\n+\n+  @BeforeEach\n+  void reset() {\n+    AgentTestingExporterAccess.reset();\n+  }\n+\n+  @Test\n+  void empty() {\n+    assertEquals(0, AgentTestingExporterAccess.getExportedSpans().size());\n+  }\n+\n+  @Test\n+  void exportAndRetrieve() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b72aab66d9c219a3f44289addf339cd6f8ba3b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02b72aab66d9c219a3f44289addf339cd6f8ba3b", "committedDate": "2020-11-16T09:41:40Z", "message": "TransformationListener bridge."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTU1MDI5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-531955029", "createdAt": "2020-11-17T01:29:24Z", "commit": {"oid": "02b72aab66d9c219a3f44289addf339cd6f8ba3b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMToyOToyNFrOH0g0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMTozNTo0NlrOH0g9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyNTc3MA==", "bodyText": "do we still need this now that running with real javaagent which should call it already?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524825770", "createdAt": "2020-11-17T01:29:24Z", "author": {"login": "trask"}, "path": "testing-common/src/main/java/io/opentelemetry/javaagent/testing/common/AgentInstallerAccess.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package io.opentelemetry.javaagent.testing.common;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import io.opentelemetry.javaagent.bootstrap.TransformationListener;\n+import java.lang.instrument.ClassFileTransformer;\n+import java.lang.instrument.Instrumentation;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+\n+public final class AgentInstallerAccess {\n+\n+  private static final MethodHandle getInstrumentation;\n+  private static final MethodHandle installBytebuddyAgent;\n+\n+  static {\n+    try {\n+      Class<?> agentInstallerClass =\n+          AgentClassLoaderAccess.loadClass(\"io.opentelemetry.javaagent.tooling.AgentInstaller\");\n+      MethodHandles.Lookup lookup = MethodHandles.lookup();\n+      getInstrumentation =\n+          lookup.findStatic(\n+              agentInstallerClass, \"getInstrumentation\", methodType(Instrumentation.class));\n+\n+      installBytebuddyAgent =\n+          lookup.findStatic(\n+              agentInstallerClass,\n+              \"installBytebuddyAgent\",\n+              methodType(\n+                  ClassFileTransformer.class,\n+                  Instrumentation.class,\n+                  boolean.class,\n+                  TransformationListener[].class));\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not load agent installer.\", t);\n+    }\n+  }\n+\n+  public static Instrumentation getInstrumentation() {\n+    try {\n+      return (Instrumentation) getInstrumentation.invokeExact();\n+    } catch (Throwable t) {\n+      throw new Error(\"Could not invoke getInstrumentation\", t);\n+    }\n+  }\n+\n+  public static ClassFileTransformer installBytebuddyAgent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b72aab66d9c219a3f44289addf339cd6f8ba3b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyODAwOA==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524828008", "createdAt": "2020-11-17T01:35:46Z", "author": {"login": "trask"}, "path": "testing/agent-for-testing/src/test/java/io/opentelemetry/javaagent/testing/AgentForTestingTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.testing;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import io.opentelemetry.api.OpenTelemetry;\n+import io.opentelemetry.javaagent.testing.common.AgentTestingExporterAccess;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class AgentForTestingTest {\n+\n+  @BeforeEach\n+  void reset() {\n+    AgentTestingExporterAccess.reset();\n+  }\n+\n+  @Test\n+  void empty() {\n+    assertEquals(0, AgentTestingExporterAccess.getExportedSpans().size());\n+  }\n+\n+  @Test\n+  void exportAndRetrieve() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxMzE0Mg=="}, "originalCommit": {"oid": "a2f1604e43052ce3c668e774f1826e9c1257b04e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f13d7d54e583925cd8ad17d57ca126aa07aa4f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3f13d7d54e583925cd8ad17d57ca126aa07aa4f", "committedDate": "2020-11-17T04:20:18Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dd1eff3977111121bbcd03a57cc04edb5ce5421c", "committedDate": "2020-11-17T05:58:33Z", "message": "Simple instrumentation (e.g. armeria) work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDQ0MjMy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-532044232", "createdAt": "2020-11-17T06:05:11Z", "commit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjowNToxMlrOH0lktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoxNTowNVrOH0lwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwMzYwNA==", "bodyText": "nice idea to push this down into the custom distro", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524903604", "createdAt": "2020-11-17T06:05:12Z", "author": {"login": "trask"}, "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/bytebuddy/TestAgentListener.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package io.opentelemetry.javaagent.testing.bytebuddy;\n+\n+import io.opentelemetry.javaagent.tooling.matcher.AdditionalLibraryIgnoresMatcher;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.utility.JavaModule;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestAgentListener implements AgentBuilder.Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwMzg1Ng==", "bodyText": "cc: @pavolloffay \ud83d\ude01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524903856", "createdAt": "2020-11-17T06:06:03Z", "author": {"login": "trask"}, "path": "testing/agent-exporter/src/main/java/io/opentelemetry/javaagent/testing/bytebuddy/TestByteBuddyAgentCustomizer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package io.opentelemetry.javaagent.testing.bytebuddy;\n+\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.spi.ByteBuddyAgentCustomizer;\n+\n+@AutoService(ByteBuddyAgentCustomizer.class)\n+public class TestByteBuddyAgentCustomizer implements ByteBuddyAgentCustomizer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNDg3Mg==", "bodyText": "looks like these can go away too \ud83c\udf89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524904872", "createdAt": "2020-11-17T06:09:34Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "diffHunk": "@@ -75,12 +68,6 @@\n \n   protected static final Tracer TEST_TRACER;\n \n-  protected static final Set<String> TRANSFORMED_CLASSES_NAMES = Sets.newConcurrentHashSet();\n-  protected static final Set<String> TRANSFORMED_CLASSES_NAMES_THAT_SHOULD_HAVE_BEEN_IGNORED =\n-      Sets.newConcurrentHashSet();\n-  private static final AtomicInteger INSTRUMENTATION_ERROR_COUNT = new AtomicInteger(0);\n-  private static final TestRunnerListener TEST_LISTENER = new TestRunnerListener();\n-\n   private static final Instrumentation INSTRUMENTATION;\n   private static volatile ClassFileTransformer activeTransformer = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNjYzOQ==", "bodyText": "maybe we need to add opentelemetry-api-beta as default instrumentation for all tests? lots of tests use TraceUtils.runUnderTrace()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524906639", "createdAt": "2020-11-17T06:15:05Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/AgentTestRunner.java", "diffHunk": "@@ -105,31 +92,13 @@\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n               .build());\n     }\n-    OpenTelemetrySdk.getGlobalTracerManagement().addSpanProcessor(TEST_WRITER);\n     TEST_TRACER = OpenTelemetry.getGlobalTracer(\"io.opentelemetry.auto\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd1eff3977111121bbcd03a57cc04edb5ce5421c"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d067842af91ce94aa841260ddd3693058aa3734e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d067842af91ce94aa841260ddd3693058aa3734e", "committedDate": "2020-11-17T07:48:20Z", "message": "Config updates work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1cacb1257333f9cf33e6fce772b286c15515eb4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1cacb1257333f9cf33e6fce772b286c15515eb4", "committedDate": "2020-11-17T08:00:20Z", "message": "Some cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff513ae6e0b0a23cd9077194827fe46f390ce4c8", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ff513ae6e0b0a23cd9077194827fe46f390ce4c8", "committedDate": "2020-11-17T08:17:49Z", "message": "Exclude bootstrap from the testRuntimeClasspath so tooling can continue to live on it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e34a57573487606184c22bca71ce3c0e29e08a9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e34a57573487606184c22bca71ce3c0e29e08a9", "committedDate": "2020-11-17T08:43:46Z", "message": "Exclude bootstrap from all test runtime classpaths."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTQzODk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-532143894", "createdAt": "2020-11-17T08:55:52Z", "commit": {"oid": "4e34a57573487606184c22bca71ce3c0e29e08a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODo1NTo1MlrOH0qgrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODo1NTo1MlrOH0qgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk4NDQ5NA==", "bodyText": "I copied the redefinition strategy from other usages in this file but have no clue what I'm doing :P", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r524984494", "createdAt": "2020-11-17T08:55:52Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -65,24 +72,29 @@ public static Instrumentation getInstrumentation() {\n \n   public static void installBytebuddyAgent(Instrumentation inst) {\n     if (Config.get().getBooleanProperty(TRACE_ENABLED_CONFIG, true)) {\n-      installBytebuddyAgent(inst, false);\n+      ACTIVE_TRANSFORMER = doInstallBytebuddyAgent(inst);\n     } else {\n       log.debug(\"Tracing is disabled, not installing instrumentations.\");\n     }\n   }\n \n+  public static void resetInstrumentation() {\n+    Instrumentation instrumentation = INSTRUMENTATION;\n+    ResettableClassFileTransformer activeTransformer = ACTIVE_TRANSFORMER;\n+    if (instrumentation != null && activeTransformer != null) {\n+      activeTransformer.reset(INSTRUMENTATION, AgentBuilder.RedefinitionStrategy.RETRANSFORMATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e34a57573487606184c22bca71ce3c0e29e08a9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d2c7ab0741b2f6f7aa340822a73bea1facd9b0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42d2c7ab0741b2f6f7aa340822a73bea1facd9b0", "committedDate": "2020-11-18T04:47:20Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "388493b5637403698248c93a5228ae6ff1771c4b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/388493b5637403698248c93a5228ae6ff1771c4b", "committedDate": "2020-11-18T05:00:22Z", "message": "Clean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6757a115d5dfb1d7c3a2d972f62817beb8cb1e5d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6757a115d5dfb1d7c3a2d972f62817beb8cb1e5d", "committedDate": "2020-11-18T06:02:27Z", "message": "testInstrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ff98d586578f8f8de0184a754a1c108ec1b1c1", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/78ff98d586578f8f8de0184a754a1c108ec1b1c1", "committedDate": "2020-11-18T08:31:22Z", "message": "Shrink agent testing jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "808028505e8d36cc6e5423e629d2b6e7443ab5d9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/808028505e8d36cc6e5423e629d2b6e7443ab5d9", "committedDate": "2020-11-18T09:59:55Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec435b69871db64fd850ed34dab18131e7e5317c", "committedDate": "2020-11-20T11:37:28Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916fc2e87512df1d80a2bde2fa2161e882650645", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/916fc2e87512df1d80a2bde2fa2161e882650645", "committedDate": "2020-11-20T11:43:20Z", "message": "Remove iscompleted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzU0MTA5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-535354109", "createdAt": "2020-11-20T11:38:58Z", "commit": {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTozODo1OFrOH3MQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo0NDozOVrOH3MbzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNDUyMw==", "bodyText": "This seemingly innocent change caused a lot of breakage since guava, previously set by autoservice, ended up getting too new for many of our projects. But it's probably better to have the manual downgrading as now to know about these instead of the luck.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527634523", "createdAt": "2020-11-20T11:38:58Z", "author": {"login": "anuraaga"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -23,24 +23,24 @@ if (projectDir.name == 'javaagent') {\n \n afterEvaluate {\n   dependencies {\n-    implementation project(':instrumentation-api')\n-    implementation project(':javaagent-api')\n+    compileOnly project(':instrumentation-api')\n+    compileOnly project(':javaagent-api')\n+    compileOnly project(':javaagent-bootstrap')\n     // Apply common dependencies for instrumentation.\n-    implementation(project(':javaagent-tooling')) {\n+    compileOnly(project(':javaagent-tooling')) {\n       // OpenTelemetry SDK is not needed for compilation, and :opentelemetry-sdk-shaded-for-testing\n       // is brought in for tests by project(:testing-common) below\n       exclude group: 'io.opentelemetry', module: 'opentelemetry-sdk'\n     }\n     implementation deps.bytebuddy\n     annotationProcessor deps.autoservice\n-    implementation deps.autoservice\n+    compileOnly deps.autoservice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNDg0MA==", "bodyText": "I realized my previous testing wasn't actually doing what we wanted - the non-shaded classes from the test classpath would still be used from the agent. Now it's always the shaded ones.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527634840", "createdAt": "2020-11-20T11:39:33Z", "author": {"login": "anuraaga"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -57,3 +57,71 @@ afterEvaluate {\n     sourceSets.main.output.files\n   ]).configure()\n }\n+\n+configurations {\n+  testInstrumentation\n+}\n+\n+shadowJar {\n+  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]\n+  mergeServiceFiles()\n+\n+  archiveFileName = 'agent-testing.jar'\n+\n+  dependencies {\n+    exclude(project(':javaagent-bootstrap'))\n+    exclude(project(':instrumentation-api'))\n+    exclude(project(':javaagent-api'))\n+    exclude(project(':javaagent-tooling'))\n+    exclude(dependency(deps.bytebuddy))\n+    exclude(dependency(deps.opentelemetryApi))\n+    exclude(dependency(deps.opentelemetryContext))\n+    exclude(dependency(deps.slf4j))\n+  }\n+\n+  // rewrite library instrumentation dependencies\n+  relocate \"io.opentelemetry.instrumentation\", \"io.opentelemetry.javaagent.shaded.instrumentation\"\n+\n+  // Prevents conflict with other SLF4J instances. Important for premain.\n+  relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+  // rewrite dependencies calling Logger.getLogger\n+  relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'\n+\n+  // prevents conflict with library instrumentation\n+  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'\n+\n+  // relocate OpenTelemetry API usage\n+  relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.context\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.context\"\n+\n+  // this is for instrumentation on opentelemetry-api itself\n+  relocate \"application.io.opentelemetry\", \"io.opentelemetry\"\n+}\n+\n+tasks.withType(Test).configureEach {\n+  jvmArgs \"-Dio.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\"\n+  jvmArgs \"-Dnet.bytebuddy.raw=true\"\n+  jvmArgs \"-javaagent:${project(\":testing:agent-for-testing\").buildDir}/libs/javaagent-for-testing.jar\"\n+  jvmArgs \"-Dotel.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}\"\n+  jvmArgs \"-Dinternal.testing.disable.global.library.ignores=true\"\n+\n+  dependsOn shadowJar\n+  dependsOn \":testing:agent-for-testing:shadowJar\"\n+\n+  // The sources are packaged into the testing jar so we need to make sure to exclude from the test\n+  // classpath, which automatically inherits them, to ensure our shaded versions are used.\n+  classpath = classpath.filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNTY0Mw==", "bodyText": "After getting the shading working, I found the aws SDK instrumentation probably currently has a bug, because the helpers are injected when matching HTTP classes, so the first client in an app couldn't be instrumented. Hooray for running tests with real agent.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527635643", "createdAt": "2020-11-20T11:40:58Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/awssdk/v2_2/ExecutionInterceptorInstrumentation.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.awssdk.v2_2;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+final class ExecutionInterceptorInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // This is essentially the entry point of the AWS SDK, all clients implement it. We can ensure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec435b69871db64fd850ed34dab18131e7e5317c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzNzQ1Mg==", "bodyText": "This statement is wrong I think - async instrumentation would have root spans completing early. I'm not sure why this seemed to work ok before my change, but I couldn't get most async tests to pass until changing the waiting logic to be closer to what we do in smoke tests.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r527637452", "createdAt": "2020-11-20T11:44:39Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/InMemoryExporter.java", "diffHunk": "@@ -290,37 +214,8 @@ private long getMinSpanOrder(List<SpanData> spans) {\n     return orderedSpans;\n   }\n \n-  private void sortOneLevel(List<Node> nodes) {\n-    Collections.sort(\n-        nodes,\n-        new Comparator<Node>() {\n-          @Override\n-          public int compare(Node node1, Node node2) {\n-            return Ints.compare(getSpanOrder(node1.span), getSpanOrder(node2.span));\n-          }\n-        });\n-  }\n-\n-  private int getSpanOrder(SpanData span) {\n-    Integer order = spanOrders.get(span.getSpanId());\n-    if (order == null) {\n-      throw new IllegalStateException(\"order not found for span: \" + span);\n-    }\n-    return order;\n-  }\n-\n-  // trace is completed if root span is present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916fc2e87512df1d80a2bde2fa2161e882650645"}, "originalPosition": 274}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ca46962767f547a3c33e9abffd6d8ca1c62808", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06ca46962767f547a3c33e9abffd6d8ca1c62808", "committedDate": "2020-11-21T10:17:26Z", "message": "Remove dependency on agent classes in tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTU2Mzgz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-535956383", "createdAt": "2020-11-21T10:23:35Z", "commit": {"oid": "06ca46962767f547a3c33e9abffd6d8ca1c62808"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyMzozNVrOH3te6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDoyNDo1NlrOH3tfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3ODkyMg==", "bodyText": "Not sure how to fix these tests, the context objects need to be shaded.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528178922", "createdAt": "2020-11-21T10:23:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/servlet/servlet-common/src/test/groovy/RequestDispatcherTest.groovy", "diffHunk": "@@ -61,11 +60,11 @@ class RequestDispatcherTest extends AgentTestRunner {\n     }\n \n     then:\n-    1 * request.getAttribute(CONTEXT_ATTRIBUTE) >> mockContext\n+    1 * request.getAttribute(\"io.opentelemetry.javaagent.shaded.instrumentation.context\") >> mockContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ca46962767f547a3c33e9abffd6d8ca1c62808"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3OTA0Nw==", "bodyText": "Had forgotten this - surprised most tests still passed without this :O", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528179047", "createdAt": "2020-11-21T10:24:56Z", "author": {"login": "anuraaga"}, "path": "testing/agent-exporter/agent-exporter.gradle", "diffHunk": "@@ -38,6 +38,10 @@ shadowJar {\n \n   // Prevents conflict with other SLF4J instances. Important for premain.\n   relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'\n+\n+  // rewrite library instrumentation dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ca46962767f547a3c33e9abffd6d8ca1c62808"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d229ab8454c734b32e287b6dc6142d32f6c225b2", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d229ab8454c734b32e287b6dc6142d32f6c225b2", "committedDate": "2020-11-21T21:05:52Z", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d3de5aaf24b6730546f7bc4b4e0eecfd7038495", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1d3de5aaf24b6730546f7bc4b4e0eecfd7038495", "committedDate": "2020-11-21T21:26:57Z", "message": "FIXUP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3552033d6bc91636c17245fc1b1fc31d0e7d7db8", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3552033d6bc91636c17245fc1b1fc31d0e7d7db8", "committedDate": "2020-11-21T22:15:11Z", "message": "Fix for no propagators being installed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1cf896034025da3009081131bf855b1f7b9217", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e1cf896034025da3009081131bf855b1f7b9217", "committedDate": "2020-11-22T00:56:58Z", "message": "Partially fix opentelemetry-api instrumentation tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca5a1189ae1f6f494165a9c55c47638acaf329f2", "committedDate": "2020-11-22T01:00:23Z", "message": "Rename"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDIwNTUz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-536020553", "createdAt": "2020-11-22T01:01:55Z", "commit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMTowMTo1NlrOH3yrVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMTowNDoyN1rOH3yr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDAyMw==", "bodyText": "unrelated cleanup (just documenting for future reviewers)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528264023", "createdAt": "2020-11-22T01:01:56Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -279,7 +279,6 @@ Because the automatic instrumentation runs in a different classpath than the ins\n Some instrumentations can produce too many spans and make traces very noisy.\n For this reason, the following instrumentations are disabled by default:\n - `jdbc-datasource` which creates spans whenever the `java.sql.DataSource#getConnection` method is called.\n-- `servlet-service` which creates spans around Servlet methods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDA0MA==", "bodyText": "unrelated cleanup (just documenting for future reviewers)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528264040", "createdAt": "2020-11-22T01:02:03Z", "author": {"login": "trask"}, "path": "examples/distro/instrumentation/build.gradle", "diffHunk": "@@ -50,6 +50,7 @@ shadowJar {\n \n   // relocate OpenTelemetry API usage\n   relocate \"io.opentelemetry.api\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.api\"\n+  relocate \"io.opentelemetry.spi\", \"io.opentelemetry.javaagent.shaded.io.opentelemetry.spi\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDEwMA==", "bodyText": "unrelated cleanup (renamed opentelemetryAutoAnnotations to opentelemetryExtAnnotations and everything shifted left)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528264100", "createdAt": "2020-11-22T01:02:42Z", "author": {"login": "trask"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -39,57 +39,58 @@ ext {\n \n   deps = [\n     // OpenTelemetry\n-    opentelemetryApi            : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n-    opentelemetryAutoAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),\n-    opentelemetryContext        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-context', version: versions.opentelemetryContext),\n-    opentelemetryTraceProps     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-trace-propagators', version: versions.opentelemetry),\n-    opentelemetrySdk            : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-sdk', version: versions.opentelemetryAnother),\n-    opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-jaeger', version: versions.opentelemetryOther),\n-    opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-otlp', version: versions.opentelemetryOther),\n-    opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-zipkin', version: versions.opentelemetryOther),\n-    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-prometheus', version: versions.opentelemetryOther),\n-    opentelemetryLogging        : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporter-logging', version: versions.opentelemetryOther),\n-    opentelemetryProto          : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-proto', version: versions.opentelemetryAnother),\n+    opentelemetryApi           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-api', version: versions.opentelemetry),\n+    opentelemetryExtAnnotations: dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-extension-annotations', version: versions.opentelemetryAnother),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2NDE4Ng==", "bodyText": "unrelated cleanup (just documenting for future reviewers)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r528264186", "createdAt": "2020-11-22T01:04:27Z", "author": {"login": "trask"}, "path": "instrumentation/akka-actor-2.5/src/test/scala/AkkaActors.scala", "diffHunk": "@@ -6,10 +6,8 @@\n import akka.actor.{Actor, ActorLogging, ActorRef, ActorSystem, Props}\n import akka.pattern.ask\n import akka.util.Timeout\n-import io.opentelemetry.api.OpenTelemetry\n-import io.opentelemetry.context.Context\n-import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge\n import io.opentelemetry.api.trace.Tracer\n+import io.opentelemetry.javaagent.testing.common.Java8BytecodeBridge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5a1189ae1f6f494165a9c55c47638acaf329f2"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2356d5b441cd08fffc006ba96680fe84644d3c4c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2356d5b441cd08fffc006ba96680fe84644d3c4c", "committedDate": "2020-11-22T01:27:47Z", "message": "fixup! Rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90fdaa703c1f6d596c076f3d910f18b3f6b7880", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f90fdaa703c1f6d596c076f3d910f18b3f6b7880", "committedDate": "2020-11-22T01:32:47Z", "message": "Reduce test dependency on OpenTelemetry API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58dae8a9b541eec29810f921d2a2f52553b2842f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/58dae8a9b541eec29810f921d2a2f52553b2842f", "committedDate": "2020-11-22T01:37:01Z", "message": "Revert \"Reduce test dependency on OpenTelemetry API\"\n\nThis reverts commit f90fdaa703c1f6d596c076f3d910f18b3f6b7880."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd1a0dbbe7d9e3ca78d5ad702abeb633342160c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8bd1a0dbbe7d9e3ca78d5ad702abeb633342160c", "committedDate": "2020-11-22T01:48:48Z", "message": "No need to set propagators in AgentTestRunner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e6cf72bf65abd607e064e49b0dca4757d35346", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c9e6cf72bf65abd607e064e49b0dca4757d35346", "committedDate": "2020-11-22T01:51:03Z", "message": "Remove no longer needed code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af1b1a97789fa0e422de03b81b1a47116ff4af9c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/af1b1a97789fa0e422de03b81b1a47116ff4af9c", "committedDate": "2020-11-22T02:46:54Z", "message": "Basic ContextBridgeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915767e648c85c5860db0a817316b5aa3ddbd17e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/915767e648c85c5860db0a817316b5aa3ddbd17e", "committedDate": "2020-11-22T02:57:55Z", "message": "Remove unnecessary verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da51582b3a7819905cc2b0f71d0404fdd97066ac", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da51582b3a7819905cc2b0f71d0404fdd97066ac", "committedDate": "2020-11-22T02:58:55Z", "message": "Revert \"Remove unnecessary verification\"\n\nThis reverts commit 915767e648c85c5860db0a817316b5aa3ddbd17e."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "678a868d9ec5a74bcd797cdcb7b55006b9e9eb6d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/678a868d9ec5a74bcd797cdcb7b55006b9e9eb6d", "committedDate": "2020-11-22T03:10:16Z", "message": "Remove mock context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b76dff8993ed400e152e968a28af59f8e831a7c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b76dff8993ed400e152e968a28af59f8e831a7c", "committedDate": "2020-11-22T03:11:27Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "011b1063341c93dba3272184727c211f73bd295f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/011b1063341c93dba3272184727c211f73bd295f", "committedDate": "2020-11-23T23:55:05Z", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c278b1345a1ef67e7748586a04f7c647998e6fe9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c278b1345a1ef67e7748586a04f7c647998e6fe9", "committedDate": "2020-11-24T01:48:03Z", "message": "Fix guava test\n\nThis behavior changed when removing the restriction for context\npropagation across executors only when context contains valid span."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b5d90ac247d36e3e6fb72ee597e3c6efc938d30", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b5d90ac247d36e3e6fb72ee597e3c6efc938d30", "committedDate": "2020-11-24T01:57:23Z", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d4249190716daa77934e0129fd32a40e94cbe5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0d4249190716daa77934e0129fd32a40e94cbe5", "committedDate": "2020-11-24T03:58:47Z", "message": "Fix jdbc tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf8e85ca61c36f76ea1f4a0401db21acad96126", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/faf8e85ca61c36f76ea1f4a0401db21acad96126", "committedDate": "2020-11-24T05:03:06Z", "message": "Compile failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57492db42615d9ec3683f23ac27432fef35a3d5e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/57492db42615d9ec3683f23ac27432fef35a3d5e", "committedDate": "2020-11-24T05:52:11Z", "message": "Fix cassandra test and jaxrs-1 compile failure."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c62f64f4cb44c5430477bd1d10d1ee5ec808b06", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c62f64f4cb44c5430477bd1d10d1ee5ec808b06", "committedDate": "2020-11-24T06:31:21Z", "message": "Ignore kubernetes test for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef55977c769cb50d38f2f7fa4354ac444e7bba53", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef55977c769cb50d38f2f7fa4354ac444e7bba53", "committedDate": "2020-11-24T06:41:31Z", "message": "Disable oshi assertion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66eb664d64b4d5f6a1202f4736b30b2f23e50cb", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e66eb664d64b4d5f6a1202f4736b30b2f23e50cb", "committedDate": "2020-11-24T07:37:24Z", "message": "Comment out more unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e72263393eb94436c693edafd75b16c3695a04", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c2e72263393eb94436c693edafd75b16c3695a04", "committedDate": "2020-11-24T07:39:54Z", "message": "Don't apply unnecessary plugins at top level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96a9ed1b56267cea2e92f55b8d5e35d5173078ab", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96a9ed1b56267cea2e92f55b8d5e35d5173078ab", "committedDate": "2020-11-24T07:47:11Z", "message": "Merge branch 'top-level-less-plugins' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066cf2919df0577f92801ca16ddc2ab4dd043955", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/066cf2919df0577f92801ca16ddc2ab4dd043955", "committedDate": "2020-11-24T08:10:46Z", "message": "Use agent way to set xray propagator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c5c8c95fbd3b448b7fa8a83aa16647283aad2c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d3c5c8c95fbd3b448b7fa8a83aa16647283aad2c", "committedDate": "2020-11-24T08:14:30Z", "message": "More"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15821e91ff8382cb09878105880fd7fa834b66b4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/15821e91ff8382cb09878105880fd7fa834b66b4", "committedDate": "2020-11-24T09:23:32Z", "message": "Almost there"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23", "committedDate": "2020-11-24T09:25:14Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into run-tests-with-agent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Mjk1MDk5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-537295099", "createdAt": "2020-11-24T09:27:31Z", "commit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToyNzozMVrOH40itA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozMzozOFrOH41AyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0MzE1Ng==", "bodyText": "These are tested in the span name instead so I didn't bother exposing this through the agent classloader. It'd be simple enough though if we want to keep the functionality, these were the only tests using it though.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529343156", "createdAt": "2020-11-24T09:27:31Z", "author": {"login": "anuraaga"}, "path": "instrumentation/hystrix-1.4/src/test/groovy/HystrixObservableTest.groovy", "diffHunk": "@@ -62,7 +62,6 @@ class HystrixObservableTest extends AgentTestRunner {\n     }\n \n     expect:\n-    TRANSFORMED_CLASSES_NAMES.contains(\"HystrixObservableTest\\$1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0NDExNw==", "bodyText": "Test was failing since groovy eagerly calls getEnclosingClass() on almost everything! But technically this was a bug in our agent since there's nothing stopping (other than mostly having no use case for it) a user from calling getEnclsoingClass() too. As a general pattern we should avoid helper classes that are inner to the instrumentation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529344117", "createdAt": "2020-11-24T09:28:18Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/jaxrs-client-2.0-jersey-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrsclient/v2_0/JerseyClientInstrumentationModule.java", "diffHunk": "@@ -104,56 +101,4 @@ public static void handleError(\n     }\n   }\n \n-  public static class WrappedFuture<T> implements Future<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0NTYwNA==", "bodyText": "These tests looked really had to do with the agent separation. We have other caches where we don't have this sort of test, so guessing it's not a huge regression.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529345604", "createdAt": "2020-11-24T09:29:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jaxrs/jaxrs-1.0/src/test/groovy/JaxRsAnnotations1InstrumentationTest.groovy", "diffHunk": "@@ -42,7 +41,6 @@ class JaxRsAnnotations1InstrumentationTest extends AgentTestRunner {\n \n   def \"span named '#name' from annotations on class when is not root span\"() {\n     setup:\n-    def startingCacheSize = spanNames.size()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0NjQ5OQ==", "bodyText": "The readability improvement of the tests seems worth it - thanks @trask", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529346499", "createdAt": "2020-11-24T09:30:11Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jdbc/src/test/groovy/JdbcInstrumentationTest.groovy", "diffHunk": "@@ -206,22 +198,22 @@ class JdbcInstrumentationTest extends AgentTestRunner {\n     connection.close()\n \n     where:\n-    system   | connection                                                           | username | query                                           | spanName                                                | url\n-    \"h2\"     | new Driver().connect(jdbcUrls.get(\"h2\"), null)                       | null     | \"SELECT 3\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n-    \"derby\"  | new EmbeddedDriver().connect(jdbcUrls.get(\"derby\"), null)            | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n-    \"hsqldb\" | new JDBCDriver().connect(jdbcUrls.get(\"hsqldb\"), null)               | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n-    \"h2\"     | new Driver().connect(jdbcUrls.get(\"h2\"), connectionProps)            | null     | \"SELECT 3\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n-    \"derby\"  | new EmbeddedDriver().connect(jdbcUrls.get(\"derby\"), connectionProps) | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n-    \"hsqldb\" | new JDBCDriver().connect(jdbcUrls.get(\"hsqldb\"), connectionProps)    | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n-    \"h2\"     | cpDatasources.get(\"tomcat\").get(\"h2\").getConnection()                | null     | \"SELECT 3\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n-    \"derby\"  | cpDatasources.get(\"tomcat\").get(\"derby\").getConnection()             | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n-    \"hsqldb\" | cpDatasources.get(\"tomcat\").get(\"hsqldb\").getConnection()            | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n-    \"h2\"     | cpDatasources.get(\"hikari\").get(\"h2\").getConnection()                | null     | \"SELECT 3\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n-    \"derby\"  | cpDatasources.get(\"hikari\").get(\"derby\").getConnection()             | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n-    \"hsqldb\" | cpDatasources.get(\"hikari\").get(\"hsqldb\").getConnection()            | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n-    \"h2\"     | cpDatasources.get(\"c3p0\").get(\"h2\").getConnection()                  | null     | \"SELECT 3\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n-    \"derby\"  | cpDatasources.get(\"c3p0\").get(\"derby\").getConnection()               | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n-    \"hsqldb\" | cpDatasources.get(\"c3p0\").get(\"hsqldb\").getConnection()              | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n+    system   | connection                                                           | username | query                                           | normalizedQuery                                 | spanName                                                | url\n+    \"h2\"     | new Driver().connect(jdbcUrls.get(\"h2\"), null)                       | null     | \"SELECT 3\"                                      | \"SELECT ?\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n+    \"derby\"  | new EmbeddedDriver().connect(jdbcUrls.get(\"derby\"), null)            | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ? FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n+    \"hsqldb\" | new JDBCDriver().connect(jdbcUrls.get(\"hsqldb\"), null)               | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ? FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n+    \"h2\"     | new Driver().connect(jdbcUrls.get(\"h2\"), connectionProps)            | null     | \"SELECT 3\"                                      | \"SELECT ?\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n+    \"derby\"  | new EmbeddedDriver().connect(jdbcUrls.get(\"derby\"), connectionProps) | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ? FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n+    \"hsqldb\" | new JDBCDriver().connect(jdbcUrls.get(\"hsqldb\"), connectionProps)    | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ? FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n+    \"h2\"     | cpDatasources.get(\"tomcat\").get(\"h2\").getConnection()                | null     | \"SELECT 3\"                                      | \"SELECT ?\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n+    \"derby\"  | cpDatasources.get(\"tomcat\").get(\"derby\").getConnection()             | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ? FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n+    \"hsqldb\" | cpDatasources.get(\"tomcat\").get(\"hsqldb\").getConnection()            | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ? FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n+    \"h2\"     | cpDatasources.get(\"hikari\").get(\"h2\").getConnection()                | null     | \"SELECT 3\"                                      | \"SELECT ?\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n+    \"derby\"  | cpDatasources.get(\"hikari\").get(\"derby\").getConnection()             | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ? FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n+    \"hsqldb\" | cpDatasources.get(\"hikari\").get(\"hsqldb\").getConnection()            | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ? FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"\n+    \"h2\"     | cpDatasources.get(\"c3p0\").get(\"h2\").getConnection()                  | null     | \"SELECT 3\"                                      | \"SELECT ?\"                                      | \"SELECT $dbNameLower\"                                   | \"h2:mem:\"\n+    \"derby\"  | cpDatasources.get(\"c3p0\").get(\"derby\").getConnection()               | \"APP\"    | \"SELECT 3 FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ? FROM SYSIBM.SYSDUMMY1\"                | \"SELECT ${dbNameLower}.SYSIBM.SYSDUMMY1\"                | \"derby:memory:\"\n+    \"hsqldb\" | cpDatasources.get(\"c3p0\").get(\"hsqldb\").getConnection()              | \"SA\"     | \"SELECT 3 FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ? FROM INFORMATION_SCHEMA.SYSTEM_USERS\" | \"SELECT ${dbNameLower}.INFORMATION_SCHEMA.SYSTEM_USERS\" | \"hsqldb:mem:\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0ODAyNw==", "bodyText": "My exporter orders everything by startTimeNanos - the previous one had some strange ordering hacks in it (presumably since things were timed by micros instead of nanos in opentracing?). I feel like previous successes for JMS were coincidence (possibly helped by gradle-retry-plugin) and the best fix will be to make assertTraces order-agnostic", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529348027", "createdAt": "2020-11-24T09:31:24Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringListenerJms2Test.groovy", "diffHunk": "@@ -18,17 +18,21 @@ class SpringListenerJms2Test extends AgentTestRunner {\n     def context = new AnnotationConfigApplicationContext(Config)\n     def factory = context.getBean(ConnectionFactory)\n     def template = new JmsTemplate(factory)\n+    // TODO(anuraaga): There is no defined order between when JMS starts receiving and our attempt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM0OTE0OA==", "bodyText": "I didn't add a sleep after Thread.start but maybe should, will see if this is flaky", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529349148", "createdAt": "2020-11-24T09:32:13Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/SpringTemplateJms2Test.groovy", "diffHunk": "@@ -119,16 +119,16 @@ class SpringTemplateJms2Test extends AgentTestRunner {\n     receivedMessage.text == \"responded!\"\n     assertTraces(4) {\n       trace(0, 1) {\n-        producerSpan(it, 0, destinationType, destinationName)\n+        consumerSpan(it, 0, destinationType, destinationName, msgId.get(), null, \"receive\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1MDg1Nw==", "bodyText": "Presumably the \"best\" way of handling these tests is to have separate library and agent instrumentation - library instrumentation tests handle any unit tests that require classes not available when running with agent.\nI could temporarily add a unit tests test set for these, but want to be a bit lazy - there are very few projects this affected.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r529350857", "createdAt": "2020-11-24T09:33:38Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes-client-7.0/src/test/groovy/KubernetesRequestUtilsTest.groovy", "diffHunk": "@@ -3,85 +3,89 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-import io.opentelemetry.javaagent.instrumentation.kubernetesclient.KubernetesRequestDigest\n-import io.opentelemetry.javaagent.instrumentation.kubernetesclient.KubernetesResource\n-import io.opentelemetry.javaagent.instrumentation.kubernetesclient.KubernetesVerb\n-import spock.lang.Specification\n-\n-class KubernetesRequestUtilsTest extends Specification {\n-  def \"asserting non-resource requests should work\"() {\n-    expect:\n-    !KubernetesRequestDigest.isResourceRequest(\"/api\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/apis\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/apis/v1\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/healthz\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/swagger.json\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/api/v1\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/api/v1/\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/apis/apps/v1\")\n-    !KubernetesRequestDigest.isResourceRequest(\"/apis/apps/v1/\")\n-  }\n-\n-  def \"asserting resource requests should work\"() {\n-    expect:\n-    KubernetesRequestDigest.isResourceRequest(\"/apis/example.io/v1/foos\")\n-    KubernetesRequestDigest.isResourceRequest(\"/apis/example.io/v1/namespaces/default/foos\")\n-    KubernetesRequestDigest.isResourceRequest(\"/api/v1/namespaces\")\n-    KubernetesRequestDigest.isResourceRequest(\"/api/v1/pods\")\n-    KubernetesRequestDigest.isResourceRequest(\"/api/v1/namespaces/default/pods\")\n-  }\n-\n-  def \"parsing core resource from url-path should work\"(String urlPath, String apiGroup, String apiVersion, String resource, String subResource, String namespace, String name) {\n-    expect:\n-    KubernetesResource.parseCoreResource(urlPath).apiGroup == apiGroup\n-    KubernetesResource.parseCoreResource(urlPath).apiVersion == apiVersion\n-    KubernetesResource.parseCoreResource(urlPath).resource == resource\n-    KubernetesResource.parseCoreResource(urlPath).subResource == subResource\n-    KubernetesResource.parseCoreResource(urlPath).namespace == namespace\n-    KubernetesResource.parseCoreResource(urlPath).name == name\n-\n-    where:\n-    urlPath                                    | apiGroup | apiVersion | resource | subResource | namespace | name\n-    \"/api/v1/pods\"                             | \"\"       | \"v1\"       | \"pods\"   | null        | null      | null\n-    \"/api/v1/namespaces/default/pods\"          | \"\"       | \"v1\"       | \"pods\"   | null        | \"default\" | null\n-    \"/api/v1/namespaces/default/pods/foo\"      | \"\"       | \"v1\"       | \"pods\"   | null        | \"default\" | \"foo\"\n-    \"/api/v1/namespaces/default/pods/foo/exec\" | \"\"       | \"v1\"       | \"pods\"   | \"exec\"      | \"default\" | \"foo\"\n-  }\n-\n-  def \"parsing regular non-core resource from url-path should work\"(String urlPath, String apiGroup, String apiVersion, String resource, String subResource, String namespace, String name) {\n-    expect:\n-    KubernetesResource.parseRegularResource(urlPath).apiGroup == apiGroup\n-    KubernetesResource.parseRegularResource(urlPath).apiVersion == apiVersion\n-    KubernetesResource.parseRegularResource(urlPath).resource == resource\n-    KubernetesResource.parseRegularResource(urlPath).subResource == subResource\n-    KubernetesResource.parseRegularResource(urlPath).namespace == namespace\n-    KubernetesResource.parseRegularResource(urlPath).name == name\n-\n-    where:\n-    urlPath                                                        | apiGroup     | apiVersion | resource      | subResource | namespace | name\n-    \"/apis/apps/v1/deployments\"                                    | \"apps\"       | \"v1\"       | \"deployments\" | null        | null      | null\n-    \"/apis/apps/v1/namespaces/default/deployments\"                 | \"apps\"       | \"v1\"       | \"deployments\" | null        | \"default\" | null\n-    \"/apis/apps/v1/namespaces/default/deployments/foo\"             | \"apps\"       | \"v1\"       | \"deployments\" | null        | \"default\" | \"foo\"\n-    \"/apis/apps/v1/namespaces/default/deployments/foo/status\"      | \"apps\"       | \"v1\"       | \"deployments\" | \"status\"    | \"default\" | \"foo\"\n-    \"/apis/example.io/v1alpha1/foos\"                               | \"example.io\" | \"v1alpha1\" | \"foos\"        | null        | null      | null\n-    \"/apis/example.io/v1alpha1/namespaces/default/foos\"            | \"example.io\" | \"v1alpha1\" | \"foos\"        | null        | \"default\" | null\n-    \"/apis/example.io/v1alpha1/namespaces/default/foos/foo\"        | \"example.io\" | \"v1alpha1\" | \"foos\"        | null        | \"default\" | \"foo\"\n-    \"/apis/example.io/v1alpha1/namespaces/default/foos/foo/status\" | \"example.io\" | \"v1alpha1\" | \"foos\"        | \"status\"    | \"default\" | \"foo\"\n-  }\n-\n-  def \"parsing kubernetes request verbs should work\"(String httpVerb, boolean hasNamePathParam, boolean hasWatchParam, KubernetesVerb kubernetesVerb) {\n-    expect:\n-    KubernetesVerb.of(httpVerb, hasNamePathParam, hasWatchParam) == kubernetesVerb\n-\n-    where:\n-    httpVerb | hasNamePathParam | hasWatchParam | kubernetesVerb\n-    \"GET\"    | true             | false         | KubernetesVerb.GET\n-    \"GET\"    | false            | true          | KubernetesVerb.WATCH\n-    \"GET\"    | false            | false         | KubernetesVerb.LIST\n-    \"POST\"   | false            | false         | KubernetesVerb.CREATE\n-    \"PUT\"    | false            | false         | KubernetesVerb.UPDATE\n-    \"PATCH\"  | false            | false         | KubernetesVerb.PATCH\n-    \"DELETE\" | true             | false         | KubernetesVerb.DELETE\n-    \"DELETE\" | false            | false         | KubernetesVerb.DELETE_COLLECTION\n-  }\n-}\n+// WIP(anuraaga): The best way to support these sort of unit tests is to separate out library /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d76d9dddf8ab8bc33f9bfb57bb88ab67b4e71c23"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9507090449894f0e6a60331449e566e27812d45", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9507090449894f0e6a60331449e566e27812d45", "committedDate": "2020-11-24T19:14:15Z", "message": "Merge remote-tracking branch 'upstream/master' into pr-run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415d8f7fd267b97b9c7f574b60e23f91b36f743e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/415d8f7fd267b97b9c7f574b60e23f91b36f743e", "committedDate": "2020-11-25T05:18:12Z", "message": "Split out ConfigUtils for non-agent instrumentation tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e7fc8c89ca360eb0abd1825d5a504af1dfea6a4", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e7fc8c89ca360eb0abd1825d5a504af1dfea6a4", "committedDate": "2020-11-25T05:20:25Z", "message": "Remove testing-bootstrap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3aa8c621c8fefc35b367392fcfc72de6f1de0c5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a3aa8c621c8fefc35b367392fcfc72de6f1de0c5", "committedDate": "2020-11-25T05:27:24Z", "message": "Remove Shaded SDK projects."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e72ea15f0506ae8f7cef4d9669075deebe0a375", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e72ea15f0506ae8f7cef4d9669075deebe0a375", "committedDate": "2020-11-27T22:15:54Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "904382ab4ad46c0b2355b48671c83f953c375c1e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/904382ab4ad46c0b2355b48671c83f953c375c1e", "committedDate": "2020-11-27T23:36:56Z", "message": "Convert HibernateDecorator to HibernateTracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b062bdecb7837ff45b3230ba698b6bba3e8874e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b062bdecb7837ff45b3230ba698b6bba3e8874e", "committedDate": "2020-11-27T23:49:48Z", "message": "Convert TwilioDecorator to TwilioTracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f7c19607c2e09e134b07d220789f47eae368a89", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6f7c19607c2e09e134b07d220789f47eae368a89", "committedDate": "2020-11-28T00:06:24Z", "message": "Delete BaseDecorator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428e29f74a5e0d9e24e93eebf87b676682390d0f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/428e29f74a5e0d9e24e93eebf87b676682390d0f", "committedDate": "2020-11-28T00:08:38Z", "message": "Remove decorator package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6148a2652c0c5b0fad6b89f19b3e31bc5a44796c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6148a2652c0c5b0fad6b89f19b3e31bc5a44796c", "committedDate": "2020-11-28T00:10:14Z", "message": "More renames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d937ca60616b8fce1eb896fcfc43a9a388079966", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d937ca60616b8fce1eb896fcfc43a9a388079966", "committedDate": "2020-11-28T00:25:23Z", "message": "Improve tests that rely on config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef075ba31353fff7ff444d7cc63c6df8e92e882", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bef075ba31353fff7ff444d7cc63c6df8e92e882", "committedDate": "2020-11-28T00:28:13Z", "message": "RedisCommandNormalizerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "265c5ece366d1bd957e1f0049e6a8e75e2217ead", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/265c5ece366d1bd957e1f0049e6a8e75e2217ead", "committedDate": "2020-11-28T00:37:04Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b12e118e686de4b0679d4605c115fe4c8bf78cc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b12e118e686de4b0679d4605c115fe4c8bf78cc", "committedDate": "2020-11-28T00:43:14Z", "message": "Merge branch 'remove-decorators' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25cb3725c612f04a8ca83470d60eeee1513ede5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d25cb3725c612f04a8ca83470d60eeee1513ede5", "committedDate": "2020-11-28T00:45:08Z", "message": "Remove testing ConfigUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6953cd80dbea61d200d867c418ab21859b2d0f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/af6953cd80dbea61d200d867c418ab21859b2d0f", "committedDate": "2020-11-28T01:06:26Z", "message": "Update more config property names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d654e88238de03e5b167be58b0fee0735a6eaa", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/59d654e88238de03e5b167be58b0fee0735a6eaa", "committedDate": "2020-11-28T02:16:51Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adba247ce0a31137cbc268f36e56accd446479d1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/adba247ce0a31137cbc268f36e56accd446479d1", "committedDate": "2020-11-28T02:51:54Z", "message": "Split out methods and otel-annotations modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "911f77451e48821e0dd05664aa9f275881f670d9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/911f77451e48821e0dd05664aa9f275881f670d9", "committedDate": "2020-11-28T03:03:46Z", "message": "Merge branch 'update-more-config-property-names' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29002ead6473aa12648ec0981d0ceb553105f57a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/29002ead6473aa12648ec0981d0ceb553105f57a", "committedDate": "2020-11-28T03:07:50Z", "message": "Bring back hystrix internal prop, I thought it was instrumentation prop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40cb995c037612cbfd05e6569c40450a16a436ad", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40cb995c037612cbfd05e6569c40450a16a436ad", "committedDate": "2020-11-28T03:10:04Z", "message": "Hystrix config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea5afef03d1ae1520f26fe2b1fe9e98fa399000", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aea5afef03d1ae1520f26fe2b1fe9e98fa399000", "committedDate": "2020-11-28T03:27:33Z", "message": "WORK"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dde42582ea7d5e44a3080270891c51cde3f69f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72dde42582ea7d5e44a3080270891c51cde3f69f", "committedDate": "2020-11-28T03:30:26Z", "message": "Rename defaultEnabled property to default-enabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c855ed4d7c4ce641dca4f9d790a59c58b7c871a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c855ed4d7c4ce641dca4f9d790a59c58b7c871a", "committedDate": "2020-11-28T03:36:33Z", "message": "Fix external-annotations test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "375ceae97117466e8418cdbe61cd5910195a9a9e", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/375ceae97117466e8418cdbe61cd5910195a9a9e", "committedDate": "2020-11-28T03:41:35Z", "message": "Merge branch 'split-out-two-more-modules' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b867b30d59601d3097badc4798c4d5826bc26ea7", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b867b30d59601d3097badc4798c4d5826bc26ea7", "committedDate": "2020-11-28T03:43:05Z", "message": "Merge branch 'rename-default-enabled-prop' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1cb5695b275fdd306b46019cbd904d7bd53ff16", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1cb5695b275fdd306b46019cbd904d7bd53ff16", "committedDate": "2020-11-28T04:13:17Z", "message": "morework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "987daf614100411fb7595e3f546ec00ff450cf73", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/987daf614100411fb7595e3f546ec00ff450cf73", "committedDate": "2020-11-28T04:24:37Z", "message": "Fix ConfiguredTraceAnnotationsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab50b7992f242d7e4010c9fa5c526e4cfa31b79", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4ab50b7992f242d7e4010c9fa5c526e4cfa31b79", "committedDate": "2020-11-28T04:33:25Z", "message": "Merge branch 'split-out-two-more-modules' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818b84e02549129b88084143afc27a1ffa24df5d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/818b84e02549129b88084143afc27a1ffa24df5d", "committedDate": "2020-11-28T04:45:14Z", "message": "Remove ConfigUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb702678e66530a3922484d5b6df07830fed05f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fcb702678e66530a3922484d5b6df07830fed05f", "committedDate": "2020-11-28T04:46:55Z", "message": "Removing ConfigUtils still"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMzQyNzk3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#pullrequestreview-540342797", "createdAt": "2020-11-28T04:49:09Z", "commit": {"oid": "fcb702678e66530a3922484d5b6df07830fed05f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNDo0OTowOVrOH7Og2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNDo0OTowOVrOH7Og2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTg2NTgxNw==", "bodyText": "@anuraaga any words of wisdom?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1643#discussion_r531865817", "createdAt": "2020-11-28T04:49:09Z", "author": {"login": "trask"}, "path": "instrumentation/external-annotations/external-annotations.gradle", "diffHunk": "@@ -38,3 +38,11 @@ def testTraceProviders = tasks.register('testTraceProviders', Test) {\n   }\n }\n test.dependsOn(testTraceProviders)\n+\n+tasks.withType(Test) {\n+  // TODO only run ConfiguredTraceAnnotationsTest with this:\n+  jvmArgs \"-Dotel.instrumentation.external-annotations.include=package.Class\\$Name;OuterClass\\$InterestingMethod\"\n+\n+  // TODO only run TracedMethodsExclusionTest with this:\n+  jvmArgs \"-Dotel.instrumentation.external-annotations.exclude-methods=TracedMethodsExclusionTest\\$TestClass[excluded,annotatedButExcluded]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcb702678e66530a3922484d5b6df07830fed05f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e1903dad6a286856ab59bf66f1e485006e6255", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/10e1903dad6a286856ab59bf66f1e485006e6255", "committedDate": "2020-11-28T05:42:19Z", "message": "Fixing methods instrumentation test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c891f11ff4a7b14279466767d9590695e58ef1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42c891f11ff4a7b14279466767d9590695e58ef1", "committedDate": "2020-11-28T05:58:03Z", "message": "Fix external-annotations tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec14a574f2a7e9536a4d6127e6b2b31eb9bfca5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dec14a574f2a7e9536a4d6127e6b2b31eb9bfca5", "committedDate": "2020-11-28T06:03:08Z", "message": "Fix opentelemetry-annotations-1.0 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2f9b914b29c87a488c2621c379a0438081ebbe", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fd2f9b914b29c87a488c2621c379a0438081ebbe", "committedDate": "2020-11-28T06:22:35Z", "message": "Less ConfigUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17240a67c9a2600a949ffdae676e0ad159197769", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17240a67c9a2600a949ffdae676e0ad159197769", "committedDate": "2020-11-28T06:32:08Z", "message": "Working on testing-common"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca24ed1226a42d7aaa6256c11bebdd8adde3b204", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ca24ed1226a42d7aaa6256c11bebdd8adde3b204", "committedDate": "2020-11-28T07:34:16Z", "message": "Remove ConfigUtils from kafka"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a13ef3ffefeddbb8f8127194ee1a0a9594ac82d2", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a13ef3ffefeddbb8f8127194ee1a0a9594ac82d2", "committedDate": "2020-11-28T07:36:19Z", "message": "Remove ConfigUtils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83c8dacf0700c8219cd04cb1266fee65c53d77c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f83c8dacf0700c8219cd04cb1266fee65c53d77c", "committedDate": "2020-11-28T07:39:18Z", "message": "Delete AgentInstallerAccess and ConfigAccess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cfe7d93f4c93ac10a79fbbe8b31c9e4bd2768bd", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4cfe7d93f4c93ac10a79fbbe8b31c9e4bd2768bd", "committedDate": "2020-11-28T07:41:24Z", "message": "Temporarily ignore some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4bda6a17b6c7da4854dca96609906b1b094f5c4", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4bda6a17b6c7da4854dca96609906b1b094f5c4", "committedDate": "2020-11-28T08:08:48Z", "message": "Fix compilation errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d6e5c82852291159a9644fce3f3421f609d4b9", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/05d6e5c82852291159a9644fce3f3421f609d4b9", "committedDate": "2020-11-28T19:15:33Z", "message": "Merge remote-tracking branch 'upstream/master' into run-tests-with-agent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a781ce7d1c0586f4c936091855cea4003465b3ae", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a781ce7d1c0586f4c936091855cea4003465b3ae", "committedDate": "2020-11-28T19:33:40Z", "message": "Extract unittest from kubernetes-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a44d7ea47b084fa3d96f9874bdfdf1ade3c681fc", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a44d7ea47b084fa3d96f9874bdfdf1ade3c681fc", "committedDate": "2020-11-28T19:38:33Z", "message": "Extract unittest from jdbc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}