{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTQyMzcw", "number": 1929, "title": "Liberty server span handling", "bodyText": "Part of #1886", "createdAt": "2020-12-17T15:30:05Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929", "merged": true, "mergeCommit": {"oid": "79433966fb80aa9d490b9e64d95d401d6c474bf0"}, "closed": true, "closedAt": "2020-12-22T13:00:59Z", "author": {"login": "laurit"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnFPVCgH2gAyNTQxOTQyMzcwOjQ4OTNhMTQ0ZjAyMzNlZmU1MTE5NWY3MDU5NTBlNzM4YjY5YTc0MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdopsrjgH2gAyNTQxOTQyMzcwOjQ2M2YxNTczYWFjNzA4NDNmZDdkODBhZTUzYWNiNmU0Njk5ZjQ4OWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4893a144f0233efe51195f705950e738b69a7417", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4893a144f0233efe51195f705950e738b69a7417", "committedDate": "2020-12-17T15:26:33Z", "message": "Liberty server span handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTg3NTAz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#pullrequestreview-555987503", "createdAt": "2020-12-20T05:34:09Z", "commit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQwNTozNDowOVrOIJBCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxNTozNlrOIJLC6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.liberty-dispatcher\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325012", "createdAt": "2020-12-20T05:34:09Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTMwNg==", "bodyText": "Void has been convention when storage not needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n          \n          \n            \n                    LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Void> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325306", "createdAt": "2020-12-20T05:37:02Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNTYzMg==", "bodyText": "doesn't look like context can be null here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (context == null) {\n          \n          \n            \n                  // an existing span was found\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546325632", "createdAt": "2020-12-20T05:42:04Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());\n+    scope = context.makeCurrent();\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void stopSpan(\n+      @Advice.Thrown Throwable throwable,\n+      @Advice.Argument(value = 0) StatusCodes statusCode,\n+      @Advice.Argument(value = 2) Exception failure,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope == null) {\n+      return;\n+    }\n+    scope.close();\n+\n+    if (context == null) {\n+      // an existing span was found\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI1Mw==", "bodyText": "I'm not sure if request.getRequestURI() is a spec compliant span name due to high cardinality, spec recommends HTTP {METHOD_NAME} in this case", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326253", "createdAt": "2020-12-20T05:49:42Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyHttpServerTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.javaagent.instrumentation.servlet.v3_0.Servlet3HttpServerTracer;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class LibertyHttpServerTracer extends Servlet3HttpServerTracer {\n+  private static final LibertyHttpServerTracer TRACER = new LibertyHttpServerTracer();\n+\n+  public static LibertyHttpServerTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  public Context startSpan(HttpServletRequest request) {\n+    // using request URI as span name as server isn't ready for calling request.getServletPath()\n+    // span name will be updated a bit later when calling request.getServletPath() works\n+    Context context = startSpan(request, request, request, request.getRequestURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjMyNjI5Nw==", "bodyText": "I'm not sure if this span name is spec compliant due to high cardinality of pathInfo, the spec recommends falling back to HTTP {METHOD_NAME} when route is not available", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546326297", "createdAt": "2020-12-20T05:50:32Z", "author": {"login": "trask"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path\n+    if (pathInfo != null && spanName.isEmpty()) {\n+      spanName = pathInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NjU5NA==", "bodyText": "getCallDepthKey() may be more descriptive", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546486594", "createdAt": "2020-12-21T03:02:56Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/AppServerBridge.java", "diffHunk": "@@ -62,4 +62,18 @@ public static void setServletUpdatedServerSpanName(Context ctx, boolean value) {\n       appServerBridge.servletUpdatedServerSpanName.set(value);\n     }\n   }\n+\n+  /**\n+   * Class used as key in CallDepthThreadLocalMap for counting servlet invocation depth in\n+   * Servlet3Advice and Servlet2Advice. We can not use helper classes like Servlet3Advice and\n+   * Servlet2Advice for determining call depth of server invocation because they can be injected\n+   * into multiple class loaders.\n+   *\n+   * @return class used as a key in CallDepthThreadLocalMap for counting servlet invocation depth\n+   */\n+  public static Class<?> getServletKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NzUwMQ==", "bodyText": "in general we use verbose Java naming style \ud83d\ude04, probably lrw -> requestWrapper and lcw -> connectionWrapper would be more consistent here (and similar in a couple other places)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546487501", "createdAt": "2020-12-21T03:07:02Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error\n+ */\n+public class LibertyHttpDispatcherLinkAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This HttpDispatcherLink httpDispatcherLink,\n+      @Advice.FieldValue(\"isc\") HttpInboundServiceContextImpl isc,\n+      @Advice.Local(\"otelContext\") Context context,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    LibertyRequestWrapper lrw = new LibertyRequestWrapper(httpDispatcherLink, isc.getRequest());\n+    LibertyConnectionWrapper lcw =\n+        new LibertyConnectionWrapper(httpDispatcherLink, isc.getRequest());\n+    context = tracer().startSpan(lrw, lcw, null, lrw.getRequestUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODczMQ==", "bodyText": "can you add a comment in this file about this library not being available via maven dependency, which is why we need the compile-stub module, and we can't do muzzle library version range validation, and we can't do normal tests and rely on smoke tests for testing?\n(and copy-paste or reference the comment from liberty-dispatcher-javaagent.gradle)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546488731", "createdAt": "2020-12-21T03:13:43Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "diffHunk": "@@ -0,0 +1,8 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw==", "bodyText": "can you add comment in here about why this is separate module from liberty module? (or can they be combined?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546489067", "createdAt": "2020-12-21T03:15:36Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTY0MDQ5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#pullrequestreview-556164049", "createdAt": "2020-12-21T06:56:39Z", "commit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1Njo0MFrOIJOEUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNzoxNzo1M1rOIJOcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODU3Nw==", "bodyText": "I think this comment is somewhat confusing. If there is no servlet, then that request will not reach this code, will it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538577", "createdAt": "2020-12-21T06:56:40Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -123,8 +123,16 @@ protected String requestHeader(HttpServletRequest httpServletRequest, String nam\n     return httpServletRequest.getHeader(name);\n   }\n \n-  private static String getSpanName(HttpServletRequest request) {\n+  public static String getSpanName(HttpServletRequest request) {\n     String spanName = request.getServletPath();\n+    String pathInfo = request.getPathInfo();\n+    // getServletPath() returns \"\" when request doesn't target any servlet or\n+    // when it targets servlet mapped to /*\n+    // for example websphere liberty does not use a servlet for static content so\n+    // requests for static files will have \"\" for servlet path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzODkwNw==", "bodyText": "Is it possible for server span to be null here? In what case?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546538907", "createdAt": "2020-12-21T06:57:55Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -141,8 +149,15 @@ private static String getSpanName(HttpServletRequest request) {\n   public void updateServerSpanNameOnce(Context attachedContext, HttpServletRequest request) {\n     if (AppServerBridge.isPresent(attachedContext)\n         && !AppServerBridge.isServerSpanNameUpdatedFromServlet(attachedContext)) {\n-      getServerSpan(request).updateName(getSpanName(request));\n+      updateSpanName(request);\n       AppServerBridge.setServletUpdatedServerSpanName(attachedContext, true);\n     }\n   }\n+\n+  public void updateSpanName(HttpServletRequest request) {\n+    Span span = getServerSpan(request);\n+    if (span != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTY3Ng==", "bodyText": "@trask should we have classLoaderMatcher here somewhere? Or classLoaderOptimization?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546539676", "createdAt": "2020-12-21T07:00:48Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyDispatcherInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDE0NA==", "bodyText": "Why this is not implemented?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540144", "createdAt": "2020-12-21T07:02:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyDispatcherTracer.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.propagation.TextMapPropagator;\n+import io.opentelemetry.instrumentation.api.tracer.HttpServerTracer;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LibertyDispatcherTracer\n+    extends HttpServerTracer<\n+        LibertyRequestWrapper, LibertyResponseWrapper, LibertyConnectionWrapper, Object> {\n+  private static final Logger log = LoggerFactory.getLogger(LibertyDispatcherTracer.class);\n+  private static final LibertyDispatcherTracer TRACER = new LibertyDispatcherTracer();\n+\n+  public static LibertyDispatcherTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.javaagent.liberty.dispatcher\";\n+  }\n+\n+  @Override\n+  protected @Nullable Integer peerPort(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerPort();\n+  }\n+\n+  @Override\n+  protected @Nullable String peerHostIP(LibertyConnectionWrapper libertyConnectionWrapper) {\n+    return libertyConnectionWrapper.peerHostIP();\n+  }\n+\n+  @Override\n+  protected String flavor(\n+      LibertyConnectionWrapper libertyConnectionWrapper,\n+      LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyConnectionWrapper.getProtocol();\n+  }\n+\n+  private static final TextMapPropagator.Getter<LibertyRequestWrapper> GETTER =\n+      new TextMapPropagator.Getter<LibertyRequestWrapper>() {\n+\n+        @Override\n+        public Iterable<String> keys(LibertyRequestWrapper carrier) {\n+          return carrier.getAllHeaderNames();\n+        }\n+\n+        @Override\n+        public String get(LibertyRequestWrapper carrier, String key) {\n+          return carrier.getHeaderValue(key);\n+        }\n+      };\n+\n+  @Override\n+  protected TextMapPropagator.Getter<LibertyRequestWrapper> getGetter() {\n+    return GETTER;\n+  }\n+\n+  @Override\n+  protected String url(LibertyRequestWrapper libertyRequestWrapper) {\n+    try {\n+      return new URI(\n+              libertyRequestWrapper.getScheme(),\n+              null,\n+              libertyRequestWrapper.getServerName(),\n+              libertyRequestWrapper.getServerPort(),\n+              libertyRequestWrapper.getRequestUri(),\n+              libertyRequestWrapper.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.debug(\"Failed to construct request URI\", e);\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  protected String method(LibertyRequestWrapper libertyRequestWrapper) {\n+    return libertyRequestWrapper.getMethod();\n+  }\n+\n+  @Override\n+  protected @Nullable String requestHeader(\n+      LibertyRequestWrapper libertyRequestWrapper, String name) {\n+    return libertyRequestWrapper.getHeaderValue(name);\n+  }\n+\n+  @Override\n+  protected int responseStatus(LibertyResponseWrapper libertyResponseWrapper) {\n+    return libertyResponseWrapper.getStatus();\n+  }\n+\n+  @Override\n+  public @Nullable Context getServerContext(Object o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected void attachServerContext(Context context, Object o) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDI3Mg==", "bodyText": "I think this javadoc is not formatted as you intended :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540272", "createdAt": "2020-12-21T07:02:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyHttpDispatcherLinkAdvice.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import static io.opentelemetry.javaagent.instrumentation.liberty.dispatcher.LibertyDispatcherTracer.tracer;\n+\n+import com.ibm.ws.http.channel.internal.inbound.HttpInboundServiceContextImpl;\n+import com.ibm.ws.http.dispatcher.internal.channel.HttpDispatcherLink;\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Instrumenting\n+ * https://github.com/OpenLiberty/open-liberty/blob/master/dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/dispatcher/internal/channel/HttpDispatcherLink.java\n+ * We instrument sendResponse method that is called when - no application has been deployed under\n+ * requested context root - something goes horribly wrong and server responds with Internal Server\n+ * Error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MDk4Mw==", "bodyText": "Why do you need a wrapper for a single value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546540983", "createdAt": "2020-12-21T07:05:22Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/dispatcher/LibertyResponseWrapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty.dispatcher;\n+\n+import com.ibm.wsspi.http.channel.values.StatusCodes;\n+\n+public class LibertyResponseWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MTQ0Mg==", "bodyText": "@laurit Can you also document this stub approach in https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/docs/contributing/writing-instrumentation.md ? As a separate PR, if you wish.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546541442", "createdAt": "2020-12-21T07:06:48Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/liberty-javaagent.gradle", "diffHunk": "@@ -0,0 +1,8 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODczMQ=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0MzAxNQ==", "bodyText": "Can you please add a little README to this module? Its instrumentations are not straightforward and depend on each other. It is quite hard to follow the instrumentation path from the code.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546543015", "createdAt": "2020-12-21T07:12:19Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.liberty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class LibertyInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDAyMw==", "bodyText": "This span name indeed violates the spec's requirement for low cardinality. We have to review other app server instrumentations as well for this problem. /cc @vovencij", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544023", "createdAt": "2020-12-21T07:15:34Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDM0NQ==", "bodyText": "Just out of curiosity: why this test is important here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544345", "createdAt": "2020-12-21T07:16:29Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {\n+  //TODO run more configurations\n+  @Shared\n+  String jdk = 8\n+  @Shared\n+  String serverVersion = \"20.0.0.12\"\n+\n+  protected String getTargetImage(String jdk, String serverVersion) {\n+    \"ghcr.io/open-telemetry/java-test-containers:liberty-${serverVersion}-jdk$jdk-20201215.422527843\"\n+  }\n+\n+  boolean skipStartTarget() {\n+    true\n+  }\n+\n+  def setupSpec() {\n+    startTarget(jdk, serverVersion)\n+  }\n+\n+  def cleanupSpec() {\n+    stopTarget()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/hello.txt\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+    String responseBody = response.body().string()\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response contains Hello\"\n+    responseBody.contains(\"Hello\")\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/hello.txt') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test static file not found on JDK #jdk\"(String appServer, String jdk) {\n+    String url = \"http://localhost:${target.getMappedPort(8080)}/app/file-that-does-not-exist\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    def response = CLIENT.newCall(request).execute()\n+    TraceInspector traces = new TraceInspector(waitForTraces())\n+    Set<String> traceIds = traces.traceIds\n+\n+    then: \"There is one trace\"\n+    traceIds.size() == 1\n+\n+    and: \"Response code is 404\"\n+    response.code() == 404\n+\n+    and: \"There is one server span\"\n+    traces.countSpansByKind(Span.SpanKind.SPAN_KIND_SERVER) == 1\n+\n+    and: \"Expected span names\"\n+    traces.countSpansByName('/app/file-that-does-not-exist') == 1\n+\n+    and: \"The span for the initial web request\"\n+    traces.countFilteredAttributes(\"http.url\", url) == 1\n+\n+    and: \"Number of spans tagged with current otel library version\"\n+    traces.countFilteredResourceAttributes(\"telemetry.auto.version\", currentAgentVersion) == 1\n+\n+    and:\n+    traces.findResourceAttribute(\"os.name\")\n+      .map { it.stringValue }\n+      .findAny()\n+      .isPresent()\n+\n+    where:\n+    [appServer, jdk] << getTestParams()\n+  }\n+\n+  @Unroll\n+  def \"#appServer test request for WEB-INF/web.xml on JDK #jdk\"(String appServer, String jdk) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU0NDgzNQ==", "bodyText": "Should some (most?) of these tests live in AppServerTest? And tested for all app servers?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546544835", "createdAt": "2020-12-21T07:17:53Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/LibertySmokeTest.groovy", "diffHunk": "@@ -0,0 +1,288 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import io.opentelemetry.proto.trace.v1.Span\n+import okhttp3.Request\n+import spock.lang.Shared\n+import spock.lang.Unroll\n+\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+\n+class LibertySmokeTest extends AppServerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a14e8e17bd408eeda9b2fcad3f1b41e6ff7d4a2b", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a14e8e17bd408eeda9b2fcad3f1b41e6ff7d4a2b", "committedDate": "2020-12-21T12:12:03Z", "message": "review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91e5f5c36e1846913cb0e84d4772f6676b8a4322", "committedDate": "2020-12-21T15:30:39Z", "message": "review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c51f09176e71e85c01847fef1eb82b8e252747f5", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c51f09176e71e85c01847fef1eb82b8e252747f5", "committedDate": "2020-12-21T16:15:44Z", "message": "add doc about using compile stubs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTc2NDk1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#pullrequestreview-556576495", "createdAt": "2020-12-21T18:21:41Z", "commit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMTo0MVrOIJhncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoyMzoxMVrOIJhqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1ODg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Instrumenting request handling in liberty.\n          \n          \n            \n             * Instrumenting request handling in Liberty.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546858865", "createdAt": "2020-12-21T18:21:41Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTMxNA==", "bodyText": "Thanks! This is really helpful. Can you add links to corresponding advice classes as well?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859314", "createdAt": "2020-12-21T18:22:43Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java", "diffHunk": "@@ -20,6 +20,20 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/**\n+ * Instrumenting request handling in liberty.\n+ *\n+ * <ul>\n+ *   <li>On entry to WebApp.handleRequest remember request.\n+ *   <li>On call to WebApp.isForbidden (called from WebApp.handleRequest) start span based on\n+ *       remembered request. We don't start span immediately at the start or handleRequest because\n+ *       HttpServletRequest isn't usable yet.\n+ *   <li>On exit from WebAppDispatcherContext.setPathElements (called from WebApp.handleRequest)\n+ *       update span name. We don't do it before because before this method is called we can't use\n+ *       HttpServletRequest.getServletPath.\n+ *   <li>On exit from WebApp.handleRequest close the span.\n+ * </ul>\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1OTUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return true when span should be update, false when span was already updated or span wasn't\n          \n          \n            \n               * @return true when span should be updated, false when span was already updated or span wasn't", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546859527", "createdAt": "2020-12-21T18:23:11Z", "author": {"login": "iNikem"}, "path": "instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java", "diffHunk": "@@ -57,9 +57,13 @@ public boolean startSpan() {\n   /**\n    * Test whether span should be updated.\n    *\n-   * @return true when span should be update, false when span was already updated\n+   * @return true when span should be update, false when span was already updated or span wasn't", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e5f5c36e1846913cb0e84d4772f6676b8a4322"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d61e4d851cb0333a6a4d14840b2200c1fffdc3f", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2d61e4d851cb0333a6a4d14840b2200c1fffdc3f", "committedDate": "2020-12-21T18:38:21Z", "message": "Update instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/LibertyInstrumentationModule.java\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da965a63614ca86c8f620d981c2bdb4b3de32e1a", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da965a63614ca86c8f620d981c2bdb4b3de32e1a", "committedDate": "2020-12-21T18:38:32Z", "message": "Update instrumentation/liberty/liberty/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/liberty/ThreadLocalContext.java\n\nCo-authored-by: Nikita Salnikov-Tarnovski <gnikem@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c299806d9c5482c7aeacf2151d2ffd9a96e4cf9", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c299806d9c5482c7aeacf2151d2ffd9a96e4cf9", "committedDate": "2020-12-21T18:43:39Z", "message": "add links to advice classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTk5NDk2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#pullrequestreview-556599496", "createdAt": "2020-12-21T19:03:34Z", "commit": {"oid": "1c299806d9c5482c7aeacf2151d2ffd9a96e4cf9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTowMzozNFrOIJivcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxOTowMzozNFrOIJivcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg3NzI5Nw==", "bodyText": "I think this is a very good reason if they are in different class loaders, can you add comment in the gradle file?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#discussion_r546877297", "createdAt": "2020-12-21T19:03:34Z", "author": {"login": "trask"}, "path": "instrumentation/liberty/liberty-dispatcher/javaagent/liberty-dispatcher-javaagent.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+dependencies {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4OTA2Nw=="}, "originalCommit": {"oid": "4893a144f0233efe51195f705950e738b69a7417"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9037fd3d481da02dec59ca88448294f41ec3b779", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9037fd3d481da02dec59ca88448294f41ec3b779", "committedDate": "2020-12-21T22:51:18Z", "message": "add commnet, remove unneeded dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDM3NjEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1929#pullrequestreview-557037610", "createdAt": "2020-12-22T12:17:13Z", "commit": {"oid": "9037fd3d481da02dec59ca88448294f41ec3b779"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "463f1573aac70843fd7d80ae53acb6e4699f489e", "author": {"user": {"login": "laurit", "name": "Lauri Tulmin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/463f1573aac70843fd7d80ae53acb6e4699f489e", "committedDate": "2020-12-22T12:29:07Z", "message": "Merge branch 'master' into liberty"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2023, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}