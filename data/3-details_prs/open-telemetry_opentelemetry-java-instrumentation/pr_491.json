{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDc0NDY0", "number": 491, "title": "Embed exporters into agent jar", "bodyText": "Fixes #370\nPublish two versions of java agent: new one, with all available exports embedded into jar file, and old one, without exporters. Version with embedded exporters is a \"default\" one and have no classifier. Version without exporters has the \"no-exporters\" classifier. The former is to be used by all clients, the latter is mainly meant for vendors to repackage with their own exporters.\nOld way of configuring exporter by providing external jar is still supported without any modifications. New, simpler configuration is to provide ota.exporter configuration options with possible values of otlp, logging, jaeger and zipkin. If no configuration is provided then otlp exporter is used. It is currently impossible to configure different exporters for traces and metrics.\nThere is now significant size differences between embedding only otlp exporter and embedding them all.\nDocumentation was NOT changed on purpose. I suggest to update documentation right after next release, when new jar is available from the location pointed by our documentation.", "createdAt": "2020-06-10T13:55:50Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491", "merged": true, "mergeCommit": {"oid": "9f4434821796182094749eb974fd31d073ab01ae"}, "closed": true, "closedAt": "2020-06-11T06:41:12Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp220wAH2gAyNDMyNDc0NDY0OmFiODA0ZDM0NzM3YjQyNjJiODhmZmZmOTMwNDNiODZiZjlkZTY4MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqIcQGAH2gAyNDMyNDc0NDY0OjE1YWQ0NTlhYjk4NzRmYzQ1OTgyNDE1ZjkwZmY1ODAxNDhjOGUxZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab804d34737b4262b88ffff93043b86bf9de6810", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ab804d34737b4262b88ffff93043b86bf9de6810", "committedDate": "2020-06-10T10:11:44Z", "message": "Embed all exporters into agent jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6c74e2cd14b0a835057ce6f81cc9f8ab4f898868", "committedDate": "2020-06-10T13:42:27Z", "message": "Publish agent with exporters and without"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Mjk1OTQ3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#pullrequestreview-428295947", "createdAt": "2020-06-10T17:52:43Z", "commit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOGiAsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNDoxMVrOGiHGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjA4OA==", "bodyText": "good catch", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438316088", "createdAt": "2020-06-10T18:08:49Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractSmokeTest.groovy", "diffHunk": "@@ -21,10 +21,6 @@ import spock.lang.Specification\n \n abstract class AbstractSmokeTest extends Specification {\n \n-  public static final API_KEY = \"some-api-key\"\n-  public static final PROFILING_START_DELAY_SECONDS = 1\n-  public static final int PROFILING_RECORDING_UPLOAD_PERIOD_SECONDS = 5\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMTA2OA==", "bodyText": "oh, nice, I didn't realize there was a default port for OTLP", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438411068", "createdAt": "2020-06-10T21:12:06Z", "author": {"login": "trask"}, "path": "auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n   @Override\n   public MetricExporter fromConfig(final Config config) {\n-    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"\");\n+    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"localhost:55680\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA==", "bodyText": "this seems a little fragile, and we only have smoke tests for the logging exporter at this point, maybe add a comment to each of the SpanExporterFactory classes about this dependency on their names?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438415754", "createdAt": "2020-06-10T21:22:28Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNjMwMQ==", "bodyText": "exporter can't be null here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (exporter != null) {\n          \n          \n            \n                      installExporters(exporter);\n          \n          \n            \n                    } else {\n          \n          \n            \n                      log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n          \n          \n            \n                    }\n          \n          \n            \n                    installExporters(exporter);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438416301", "createdAt": "2020-06-10T21:23:44Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -36,16 +35,23 @@\n @Slf4j\n public class TracerInstaller {\n   /** Register agent tracer if no agent tracer is already registered. */\n+  @SuppressWarnings(\"unused\")\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n \n       configure();\n-      // Try to create an exporter\n+      // Try to create an exporter from external jar file\n       final String exporterJar = Config.get().getExporterJar();\n       if (exporterJar != null) {\n         installExportersFromJar(exporterJar);\n       } else {\n-        log.warn(\"No exporter is specified. Tracing will run but spans are dropped\");\n+        // Try to create embedded exporter\n+        final String exporter = Config.get().getExporter();\n+        if (exporter != null) {\n+          installExporters(exporter);\n+        } else {\n+          log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA==", "bodyText": "this will be confusing for zipkin and jaeger users\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                  log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438421028", "createdAt": "2020-06-10T21:34:11Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a096d2f222345d5b001c4fdf12a68f9c4632886b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a096d2f222345d5b001c4fdf12a68f9c4632886b", "committedDate": "2020-06-11T05:35:50Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjA4Mjg3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#pullrequestreview-428608287", "createdAt": "2020-06-11T05:47:12Z", "commit": {"oid": "a096d2f222345d5b001c4fdf12a68f9c4632886b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo0NzoxMlrOGiPTfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo1MTowN1rOGiPXvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NTUxOA==", "bodyText": "Yes, I like that, I forgot that SpanExporterFactory is basically just for auto-instrumentation anyways, so no reason not to add stuff in there that we need \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438555518", "createdAt": "2020-06-11T05:47:12Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjYwNg==", "bodyText": "Good question. Can you open an issue to track this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438556606", "createdAt": "2020-06-11T05:51:07Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c52af3cdbdfc888623b8bd001a1c953a27e52d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b9c52af3cdbdfc888623b8bd001a1c953a27e52d", "committedDate": "2020-06-11T06:00:53Z", "message": "Merge remote-tracking branch 'upstream/master' into embed-exporters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15ad459ab9874fc45982415f90ff580148c8e1de", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/15ad459ab9874fc45982415f90ff580148c8e1de", "committedDate": "2020-06-11T06:41:00Z", "message": "Merge branch 'master' into embed-exporters"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3224, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}