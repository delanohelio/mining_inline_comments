{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTUyOTg5", "number": 623, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Mjo1NVrOEKvDug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyNDoyM1rOEKvXsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjkyMjE4OnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Mjo1NVrOGr8goA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDozNzo1NFrOGr9KGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzM0NA==", "bodyText": "since this is now arbitrary header, maybe call .toString() (with null check) instead of casting?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733344", "createdAt": "2020-07-02T03:52:55Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientDecorator.java", "diffHunk": "@@ -117,7 +117,12 @@ protected Integer status(final Response response) {\n   }\n \n   @Override\n-  protected String userAgent(Request request) {\n-    return (String) request.getHeaders().get(USER_AGENT);\n+  protected String requestHeader(Request request, String name) {\n+    return (String) request.getHeaders().get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0Mzk2Mg==", "bodyText": "For this one specifically, Java handles this way different than I'd expect - still learning new things :)\nUnchecked assignment: 'java.util.Map' to 'java.util.Map<java.lang.String,java.lang.String>'. Reason: 'request' has raw type, so result of getHeaders is erased\nEven though the class defines Map<String, String>, generics seem to be eliminated deeply when not using them!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448743962", "createdAt": "2020-07-02T04:37:54Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientDecorator.java", "diffHunk": "@@ -117,7 +117,12 @@ protected Integer status(final Response response) {\n   }\n \n   @Override\n-  protected String userAgent(Request request) {\n-    return (String) request.getHeaders().get(USER_AGENT);\n+  protected String requestHeader(Request request, String name) {\n+    return (String) request.getHeaders().get(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzM0NA=="}, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjkyMzAyOnYy", "diffSide": "RIGHT", "path": "instrumentation/google-http-client-1.19/src/main/java/io/opentelemetry/auto/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Mzo0MFrOGr8hMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDozOTo0OVrOGr9L1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzQ4OQ==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733489", "createdAt": "2020-07-02T03:53:40Z", "author": {"login": "trask"}, "path": "instrumentation/google-http-client-1.19/src/main/java/io/opentelemetry/auto/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -50,7 +51,16 @@ protected Integer status(final HttpResponse httpResponse) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    return httpRequest.getHeaders().getUserAgent();\n+  protected String requestHeader(HttpRequest httpRequest, String name) {\n+    return header(httpRequest.getHeaders(), name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpResponse httpResponse, String name) {\n+    return header(httpResponse.getHeaders(), name);\n+  }\n+\n+  private static String header(HttpHeaders headers, String name) {\n+    return (String) headers.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0NDQwNw==", "bodyText": "Oops missed a better method", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448744407", "createdAt": "2020-07-02T04:39:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/google-http-client-1.19/src/main/java/io/opentelemetry/auto/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -50,7 +51,16 @@ protected Integer status(final HttpResponse httpResponse) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    return httpRequest.getHeaders().getUserAgent();\n+  protected String requestHeader(HttpRequest httpRequest, String name) {\n+    return header(httpRequest.getHeaders(), name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpResponse httpResponse, String name) {\n+    return header(httpResponse.getHeaders(), name);\n+  }\n+\n+  private static String header(HttpHeaders headers, String name) {\n+    return (String) headers.get(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzQ4OQ=="}, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjkyMzI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Decorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Mzo0OFrOGr8hUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDo0MTo0OVrOGr9N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzUyMw==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733523", "createdAt": "2020-07-02T03:53:48Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Decorator.java", "diffHunk": "@@ -45,7 +45,12 @@ protected Integer status(final ClientResponse clientResponse) {\n   }\n \n   @Override\n-  protected String userAgent(ClientRequest clientRequest) {\n-    return (String) clientRequest.getHeaders().getFirst(USER_AGENT);\n+  protected String requestHeader(ClientRequest clientRequest, String name) {\n+    return (String) clientRequest.getHeaders().getFirst(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0NDkyMw==", "bodyText": "Fixed (and blown away by not having to do the same to responseHeader...)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448744923", "createdAt": "2020-07-02T04:41:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Decorator.java", "diffHunk": "@@ -45,7 +45,12 @@ protected Integer status(final ClientResponse clientResponse) {\n   }\n \n   @Override\n-  protected String userAgent(ClientRequest clientRequest) {\n-    return (String) clientRequest.getHeaders().getFirst(USER_AGENT);\n+  protected String requestHeader(ClientRequest clientRequest, String name) {\n+    return (String) clientRequest.getHeaders().getFirst(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzUyMw=="}, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Njk3MzMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyNDoyM1rOGr8-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDo0Njo0NlrOGr9S9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0MDg3Mg==", "bodyText": "instead of extracting the response from context twice (even though cheap), do u mind trying out changing ApacheHttpAsyncClientDecorator generic type from HttpContext to HttpResponse, and extracting response from context in TraceContinuedFutureCallback when calling onResponse, e.g.\n    public void completed(final T result) {\n      HttpResponse response = getResponse(context);\n      DECORATE.onResponse(clientSpan, response);\n      ...\n    }\n\ni think this may be nicer\nalso, just noticed, then won't need the response != null conditionals above since response != null is already checked prior to calling those methods", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448740872", "createdAt": "2020-07-02T04:24:23Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientDecorator.java", "diffHunk": "@@ -76,8 +77,26 @@ protected Integer status(final HttpContext context) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    final Header header = httpRequest.getFirstHeader(USER_AGENT);\n+  protected String requestHeader(HttpRequest request, String name) {\n+    return header(request, name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpContext context, String name) {\n+    HttpResponse response = extractResponse(context);\n+    if (response != null) {\n+      return header(response, name);\n+    }\n+    return null;\n+  }\n+\n+  private static String header(HttpMessage message, String name) {\n+    Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  private static HttpResponse extractResponse(HttpContext context) {\n+    Object responseObject = context.getAttribute(HttpCoreContext.HTTP_RESPONSE);\n+    return responseObject instanceof HttpResponse ? (HttpResponse) responseObject : null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0NjIyOQ==", "bodyText": "Cool, looks much nicer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448746229", "createdAt": "2020-07-02T04:46:46Z", "author": {"login": "anuraaga"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientDecorator.java", "diffHunk": "@@ -76,8 +77,26 @@ protected Integer status(final HttpContext context) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    final Header header = httpRequest.getFirstHeader(USER_AGENT);\n+  protected String requestHeader(HttpRequest request, String name) {\n+    return header(request, name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpContext context, String name) {\n+    HttpResponse response = extractResponse(context);\n+    if (response != null) {\n+      return header(response, name);\n+    }\n+    return null;\n+  }\n+\n+  private static String header(HttpMessage message, String name) {\n+    Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  private static HttpResponse extractResponse(HttpContext context) {\n+    Object responseObject = context.getAttribute(HttpCoreContext.HTTP_RESPONSE);\n+    return responseObject instanceof HttpResponse ? (HttpResponse) responseObject : null;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0MDg3Mg=="}, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 315, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}