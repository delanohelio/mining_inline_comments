{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTUyMDI0", "number": 481, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0NzozN1rOED_bUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1Njo0N1rOED_nxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjIwMzY5OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/agent-bootstrap.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0NzozN1rOGhVngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowODoxOVrOGikj6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDM3MA==", "bodyText": "Why are we doing this change? So much changed files to review without any actual gain.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r437610370", "createdAt": "2020-06-09T17:47:37Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/agent-bootstrap.gradle", "diffHunk": "@@ -3,7 +3,7 @@ plugins {\n   id \"com.github.johnrengelman.shadow\"\n }\n \n-apply from: \"${rootDir}/gradle/java.gradle\"\n+apply from: \"$rootDir/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MDExMg==", "bodyText": "And it also causes merge conflicts with ongoing work \ud83d\ude2d, but I'm not opposed to it as a general cleanup. It might be easier on these merge PRs to review commit-by-commit, then you can skip over commits like this that are just cosmetic.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r438560112", "createdAt": "2020-06-11T06:02:43Z", "author": {"login": "trask"}, "path": "agent-bootstrap/agent-bootstrap.gradle", "diffHunk": "@@ -3,7 +3,7 @@ plugins {\n   id \"com.github.johnrengelman.shadow\"\n }\n \n-apply from: \"${rootDir}/gradle/java.gradle\"\n+apply from: \"$rootDir/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDM3MA=="}, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2NDI1MQ==", "bodyText": "I even not sure this can be classified as \"useful cleanup\" :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r438564251", "createdAt": "2020-06-11T06:15:25Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/agent-bootstrap.gradle", "diffHunk": "@@ -3,7 +3,7 @@ plugins {\n   id \"com.github.johnrengelman.shadow\"\n }\n \n-apply from: \"${rootDir}/gradle/java.gradle\"\n+apply from: \"$rootDir/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDM3MA=="}, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzc4NA==", "bodyText": "sorry for the noise.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r438903784", "createdAt": "2020-06-11T16:08:19Z", "author": {"login": "tylerbenson"}, "path": "agent-bootstrap/agent-bootstrap.gradle", "diffHunk": "@@ -3,7 +3,7 @@ plugins {\n   id \"com.github.johnrengelman.shadow\"\n }\n \n-apply from: \"${rootDir}/gradle/java.gradle\"\n+apply from: \"$rootDir/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMDM3MA=="}, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjIzNTU3OnYy", "diffSide": "RIGHT", "path": "instrumentation/rabbitmq-amqp-2.7/src/main/java/io/opentelemetry/auto/instrumentation/rabbitmq/amqp/TracedDelegatingConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1Njo0N1rOGhV8Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo1ODo1NVrOGiPg8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNTY2Mg==", "bodyText": "Why is this needed? I think this deserves an explanation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r437615662", "createdAt": "2020-06-09T17:56:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/rabbitmq-amqp-2.7/src/main/java/io/opentelemetry/auto/instrumentation/rabbitmq/amqp/TracedDelegatingConsumer.java", "diffHunk": "@@ -90,14 +92,24 @@ public void handleDelivery(\n         spanBuilder.setNoParent();\n       }\n \n+      final long startTimeMillis = System.currentTimeMillis();\n       span =\n           spanBuilder\n               .setAttribute(\"message.size\", body == null ? 0 : body.length)\n               .setAttribute(\"span.origin.type\", delegate.getClass().getName())\n+              .setStartTimestamp(TimeUnit.MILLISECONDS.toNanos(startTimeMillis))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1ODk2MA==", "bodyText": "we re-use the span start time below, but there's no way to get the start time back from the span after we create it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/481#discussion_r438558960", "createdAt": "2020-06-11T05:58:55Z", "author": {"login": "trask"}, "path": "instrumentation/rabbitmq-amqp-2.7/src/main/java/io/opentelemetry/auto/instrumentation/rabbitmq/amqp/TracedDelegatingConsumer.java", "diffHunk": "@@ -90,14 +92,24 @@ public void handleDelivery(\n         spanBuilder.setNoParent();\n       }\n \n+      final long startTimeMillis = System.currentTimeMillis();\n       span =\n           spanBuilder\n               .setAttribute(\"message.size\", body == null ? 0 : body.length)\n               .setAttribute(\"span.origin.type\", delegate.getClass().getName())\n+              .setStartTimestamp(TimeUnit.MILLISECONDS.toNanos(startTimeMillis))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNTY2Mg=="}, "originalCommit": {"oid": "97b74ab8af2d89c33f4db8e6e9cf6483f0153635"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 486, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}