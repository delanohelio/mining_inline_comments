{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzODUxMjI1", "number": 1189, "title": "Reactor bugs", "bodyText": "Fixes #1138\nThe main difference in this PR is what context gets captured and propagated with Project Reactor operators. Before context was captured during pipeline assembly. This PR changes it to capture context during subscription to the pipeline. I believe this is the right way to do. Also tests confirm that :) Those which failed, now are green.\nSpring reactive WebClient integration was fixed in the similar way. NB! WebClient integration borrows most of its code from Spring Sleuth project. I don't know how to properly attribute that code to the original source, please advise. For now I just add it to javadoc.\nI still have weird issues with some version of Spring Boot, but I believe it will not affect the majority of this PR and its new approach to context capture. Therefore, please review and comment.\nAlso there is more work to do to polish tests and project structure. E.g. change reactor-3.1 modules into new structure. That will be a follow up work.", "createdAt": "2020-09-10T13:26:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189", "merged": true, "mergeCommit": {"oid": "fd07525744025634dc4b3fc2a0bab93c05907c7b"}, "closed": true, "closedAt": "2020-09-15T00:57:04Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHdJjNgH2gAyNDgzODUxMjI1OmMxNWUwMGQ5MTg3NjM2NGM1NTcxYTUxODBhMGZiY2FjODVjODVkMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJesSogFqTQ4OTc4MjM2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c15e00d91876364c5571a5180a0fbcac85c85d04", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c15e00d91876364c5571a5180a0fbcac85c85d04", "committedDate": "2020-09-10T09:12:23Z", "message": "Demonstrating bugs with Project Reactor and Reactor Netty support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d98938e836a5ccf5942107f33412ad907b3d3ee", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5d98938e836a5ccf5942107f33412ad907b3d3ee", "committedDate": "2020-09-10T09:12:23Z", "message": "Intermediate kinda working state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3faf38050e80a1a73c630c140c300e997a8f5268", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3faf38050e80a1a73c630c140c300e997a8f5268", "committedDate": "2020-09-10T11:36:15Z", "message": "Seems to work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97bc8a48bae861850646baeed0d3c504bce2ecee", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97bc8a48bae861850646baeed0d3c504bce2ecee", "committedDate": "2020-09-10T13:24:43Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTkyMTQx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-485992141", "createdAt": "2020-09-10T14:25:12Z", "commit": {"oid": "97bc8a48bae861850646baeed0d3c504bce2ecee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "259c56a383ae43b84699053d46cc960235b31797", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/259c56a383ae43b84699053d46cc960235b31797", "committedDate": "2020-09-10T16:40:58Z", "message": "Always use context active during subscription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc8d38185b024d3fe2858b46610e586697e57eb6", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc8d38185b024d3fe2858b46610e586697e57eb6", "committedDate": "2020-09-10T17:45:19Z", "message": "Fix muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6eecf8307a4ade93e8024d7281779fc815bf23", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe6eecf8307a4ade93e8024d7281779fc815bf23", "committedDate": "2020-09-10T18:28:28Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "094c83c1901a62f01955971355c38ffd98df4521", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/094c83c1901a62f01955971355c38ffd98df4521", "committedDate": "2020-09-11T05:56:06Z", "message": "Test fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTAzNTM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-486503539", "createdAt": "2020-09-11T06:22:34Z", "commit": {"oid": "094c83c1901a62f01955971355c38ffd98df4521"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1867995a1f4fb3d19325fa76bae6f265b290b089", "committedDate": "2020-09-11T07:21:38Z", "message": "Ignore failing test for now"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTQwOTYw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-486540960", "createdAt": "2020-09-11T07:33:01Z", "commit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzozMzowMVrOHQRqtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo0Mzo0MFrOHQR_UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw==", "bodyText": "I think this needs to return the same reference for reset to work", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486828727", "createdAt": "2020-09-11T07:33:01Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n+  public static void resetOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n+    return Operators.lift(new Lifter<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODk5OA==", "bodyText": "/cc @minwoox do you mind providing any thoughts on this instrumentation? I guess you've already experienced all the corner cases since LINE uses reactor a lot. It will affect Armeria users too if they start using OpenTelemetry :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486828998", "createdAt": "2020-09-11T07:33:39Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyOTgyOQ==", "bodyText": "Since we don't have @author anywhere else I would recommend not including it here too even for copied files.\nIdeally we fix spotless to allow us to have two copyright headers on a file. In the meantime, I took a NOTICE approach to referencing copied code which I think is the bare minimum legally (@author doesn't help at all legally)\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/logback/logback-1.0.0/library/NOTICE.txt", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486829829", "createdAt": "2020-09-11T07:35:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java", "diffHunk": "@@ -18,132 +18,65 @@\n \n import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import reactor.core.CoreSubscriber;\n-import reactor.core.Fuseable;\n-import reactor.core.Scannable;\n import reactor.util.context.Context;\n \n-public class TracingSubscriber<T>\n-    implements Subscription, CoreSubscriber<T>, Fuseable.QueueSubscription<T>, Scannable {\n-\n-  private final io.grpc.Context upstreamContext;\n-  private final CoreSubscriber<T> delegate;\n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link\n+ * Subscriber}\n+ *\n+ * @author Jose Montoya", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzMDc0MQ==", "bodyText": "I think with the AgentTestRunner fix we shouldn't need to copy logback.xml around", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486830741", "createdAt": "2020-09-11T07:37:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/netty/netty-4.1/src/test/resources/logback.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzMDg2OQ==", "bodyText": "And this logback.xml like many of ours is wrong :-D /cc @trask", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486830869", "createdAt": "2020-09-11T07:37:20Z", "author": {"login": "anuraaga"}, "path": "instrumentation/netty/netty-4.1/src/test/resources/logback.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+\n+  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n+    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n+      <Pattern>\n+        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n+      </Pattern>\n+    </layout>\n+  </appender>\n+\n+  <root level=\"WARN\">\n+    <appender-ref ref=\"console\"/>\n+  </root>\n+\n+  <logger name=\"io.opentelemetry.auto\" level=\"debug\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzMTM2Ng==", "bodyText": "Believe IntelliJ isn't set up correctly - https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/docs/contributing/intellij-setup.md", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486831366", "createdAt": "2020-09-11T07:38:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webflux-5.0/auto/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -34,6 +31,9 @@ import server.FooModel\n import server.SpringWebFluxTestApplication\n import server.TestController\n \n+import static io.opentelemetry.trace.Span.Kind.INTERNAL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNDAwMQ==", "bodyText": "Can you add permalinks to original of all copied classes?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486834001", "createdAt": "2020-09-11T07:43:40Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingSubscriber.java", "diffHunk": "@@ -18,132 +18,65 @@\n \n import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n+import org.reactivestreams.Subscriber;\n import org.reactivestreams.Subscription;\n import reactor.core.CoreSubscriber;\n-import reactor.core.Fuseable;\n-import reactor.core.Scannable;\n import reactor.util.context.Context;\n \n-public class TracingSubscriber<T>\n-    implements Subscription, CoreSubscriber<T>, Fuseable.QueueSubscription<T>, Scannable {\n-\n-  private final io.grpc.Context upstreamContext;\n-  private final CoreSubscriber<T> delegate;\n+/**\n+ * Based on Spring Sleuth's Reactor instrumentation. A trace representation of the {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7b781fcb5403a4973d75ee48052ec56d23ee1f", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df7b781fcb5403a4973d75ee48052ec56d23ee1f", "committedDate": "2020-09-11T08:38:15Z", "message": "Add attribution and links to borrowed code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NjYxMTMx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-486661131", "createdAt": "2020-09-11T09:43:14Z", "commit": {"oid": "df7b781fcb5403a4973d75ee48052ec56d23ee1f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo0MzoxNFrOHQXWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo0MzozMFrOHQXW_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMTczOQ==", "bodyText": "Yeah like private static final Function<? super Publisher<T>, ? extends Publisher<T>>  TRACING_LIFTER = Operators.lift(new Lifter<>()); and return TRACING_LIFTER;. I didn't look at the implementation of reset in detail but I can't conceive it's possible without it being the same reference.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486921739", "createdAt": "2020-09-11T09:43:14Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n+  public static void resetOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  private static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingLift() {\n+    return Operators.lift(new Lifter<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyODcyNw=="}, "originalCommit": {"oid": "1867995a1f4fb3d19325fa76bae6f265b290b089"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyMTk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Hooks.onEachOperator(tracingLift());\n          \n          \n            \n                Hooks.resetOnEachOperator(tracingLift());\n          \n      \n    \n    \n  \n\nCan you add a test for reset?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r486921983", "createdAt": "2020-09-11T09:43:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */\n+public class TracingOperator {\n+\n+  /**\n+   * Registers a hook that applies to every operator, propagating {@link Context} to downstream\n+   * callbacks to ensure spans in the {@link Context} are available throughout the lifetime of a\n+   * reactive stream. This should generally be called in a static initializer block in your\n+   * application.\n+   */\n+  public static void registerOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());\n+  }\n+\n+  /** Unregisters the hook registered by {@link #registerOnEachOperator()}. */\n+  public static void resetOnEachOperator() {\n+    Hooks.onEachOperator(tracingLift());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7b781fcb5403a4973d75ee48052ec56d23ee1f"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf47321cfe244095b58cb2a8c338b04a09d6394", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5cf47321cfe244095b58cb2a8c338b04a09d6394", "committedDate": "2020-09-11T12:19:23Z", "message": "Fix hook reset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7e6feedb1acef99360c99ae13befe6b49032df8b", "committedDate": "2020-09-11T12:26:06Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODIxODAz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-486821803", "createdAt": "2020-09-11T13:47:56Z", "commit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTg1Mzkx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-487185391", "createdAt": "2020-09-12T00:35:01Z", "commit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozNTowMVrOHQxG8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMToyNzowOFrOHQxfzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mzg1Ng==", "bodyText": "I don't think you need this file after #1194", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487343856", "createdAt": "2020-09-12T00:35:01Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-3.1/src/test/resources/logback.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+\n+  <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n+    <layout class=\"ch.qos.logback.classic.PatternLayout\">\n+      <Pattern>\n+        %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n+      </Pattern>\n+    </layout>\n+  </appender>\n+\n+  <root level=\"WARN\">\n+    <appender-ref ref=\"console\"/>\n+  </root>\n+\n+  <logger name=\"io.opentelemetry.auto\" level=\"debug\"/>\n+\n+</configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NDA4Mg==", "bodyText": "can you revert this change, in favor of #1194?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487344082", "createdAt": "2020-09-12T00:36:33Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/AgentTestRunner.java", "diffHunk": "@@ -104,7 +104,7 @@\n     INSTRUMENTATION = ByteBuddyAgent.getInstrumentation();\n \n     ((Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(Level.WARN);\n-    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry.auto\")).setLevel(Level.DEBUG);\n+    ((Logger) LoggerFactory.getLogger(\"io.opentelemetry.javaagent\")).setLevel(Level.DEBUG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA2MA==", "bodyText": "we don't use the @author tag anywhere else (in favor of git history/blame). maybe permalink(s) to the source file(s) in order to effectively cite the author via that repo's git history/blame?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author Based on Spring Sleuth's Reactor instrumentation.\n          \n          \n            \n             * @author Marcin Grzejszczak\n          \n          \n            \n             * Based on Spring Sleuth's Reactor instrumentation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487345060", "createdAt": "2020-09-12T00:43:41Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-webflux-5.0/library/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -20,51 +20,53 @@\n \n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import java.util.List;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n \n+/**\n+ * @author Based on Spring Sleuth's Reactor instrumentation.\n+ * @author Marcin Grzejszczak", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0NTA4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** @author Based on Spring Sleuth's Reactor instrumentation. */\n          \n          \n            \n            /** Based on Spring Sleuth's Reactor instrumentation. */", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487345088", "createdAt": "2020-09-12T00:43:58Z", "author": {"login": "trask"}, "path": "instrumentation-core/reactor-3.1/src/main/java/io/opentelemetry/instrumentation/reactor/TracingOperator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.reactor;\n+\n+import io.grpc.Context;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+\n+/** @author Based on Spring Sleuth's Reactor instrumentation. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM1MDIyMw==", "bodyText": "i'm getting this same failure in #1194 \ud83d\ude2d\nit's somehow due to fixing the logger name in AgentTestRunner, so if you revert that change you should be able to bring back this test, and i'll investigate as part of #1194", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r487350223", "createdAt": "2020-09-12T01:27:08Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-3.0/src/test/groovy/CassandraClientTest.groovy", "diffHunk": "@@ -128,10 +122,42 @@ class CassandraClientTest extends AgentTestRunner {\n     \"SELECT * FROM users where name = 'alice' ALLOW FILTERING\"                                         | \"async_test\"\n   }\n \n+  //TODO fix this test\n+  @Ignore(\"\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e6feedb1acef99360c99ae13befe6b49032df8b"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0e5a2e4c2e8edfa73f760e3ddea972d8e74de0", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be0e5a2e4c2e8edfa73f760e3ddea972d8e74de0", "committedDate": "2020-09-14T11:15:02Z", "message": "Merge remote-tracking branch 'upstream/master' into reactor-bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489536e466810c7586c2991acce19db9aded9500", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/489536e466810c7586c2991acce19db9aded9500", "committedDate": "2020-09-14T11:36:21Z", "message": "Revert \"Ignore failing test for now\"\n\nThis reverts commit 1867995a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/106b2c0a8c4a317d733a5095d0eeaaf35098f88d", "committedDate": "2020-09-14T11:43:08Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20396f810738bcc3fdf926f38fb7a47a1e2e28ba", "committedDate": "2020-09-14T17:17:21Z", "message": "Fixes #1103"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjI1NjQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-489625648", "createdAt": "2020-09-16T13:29:25Z", "commit": {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyOToyNVrOHSw50g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyOToyNVrOHSw50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzNzY1MA==", "bodyText": "This comment doesn't match the assertions below. Not sure that is intended or not", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r489437650", "createdAt": "2020-09-16T13:29:25Z", "author": {"login": "devinsba"}, "path": "instrumentation/reactor-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -242,117 +241,59 @@ class ReactorCoreTest extends AgentTestRunner {\n     }\n   }\n \n-  def \"Publisher chain spans have the correct parents from assembly time '#name'\"() {\n+  def \"Publisher chain spans have the correct parents from subscription time\"() {\n     when:\n-    runUnderTrace {\n-      // The \"add one\" operations in the publisher created here should be children of the publisher-parent\n-      Publisher<Integer> publisher = publisherSupplier()\n-\n-      def tracer = OpenTelemetry.getTracer(\"test\")\n-      def intermediate = tracer.spanBuilder(\"intermediate\").startSpan()\n-      // After this activation, the \"add two\" operations below should be children of this span\n-      def scope = tracer.withSpan(intermediate)\n-      try {\n-        if (publisher instanceof Mono) {\n-          return ((Mono) publisher).map(addTwo)\n-        } else if (publisher instanceof Flux) {\n-          return ((Flux) publisher).map(addTwo)\n-        }\n-        throw new IllegalStateException(\"Unknown publisher type\")\n-      } finally {\n-        intermediate.end()\n-        scope.close()\n-      }\n+    def mono = Mono.just(42)\n+      .map(addOne)\n+      .map(addTwo)\n+    TraceUtils.runUnderTrace(\"trace-parent\") {\n+      mono.block()\n     }\n \n     then:\n     assertTraces(1) {\n-      trace(0, (workItems * 2) + 3) {\n-        span(0) {\n-          operationName \"trace-parent\"\n-          parent()\n-          attributes {\n-          }\n-        }\n-\n-        basicSpan(it, 1, \"publisher-parent\", span(0))\n-        basicSpan(it, 2, \"intermediate\", span(1))\n-\n-        for (int i = 0; i < workItems; i++) {\n-          span(3 + i) {\n-            operationName \"add two\"\n-            childOf span(2)\n-            attributes {\n-            }\n-          }\n-        }\n-        for (int i = 0; i < workItems; i++) {\n-          span(3 + workItems + i) {\n-            operationName \"add one\"\n-            childOf span(1)\n-            attributes {\n-            }\n-          }\n-        }\n+      trace(0, 3) {\n+        basicSpan(it, 0, \"trace-parent\")\n+        basicSpan(it, 1, \"add one\", span(0))\n+        basicSpan(it, 2, \"add two\", span(0))\n       }\n     }\n \n-    where:\n-    name         | workItems | publisherSupplier\n-    \"basic mono\" | 1         | { -> Mono.just(1).map(addOne) }\n-    \"basic flux\" | 2         | { -> Flux.fromIterable([1, 2]).map(addOne) }\n   }\n \n-  def \"Publisher chain spans can have the parent removed at assembly time '#name'\"() {\n+  def \"Publisher chain spans have the correct parents from subscription time '#name'\"() {\n     when:\n     runUnderTrace {\n-      // The operations in the publisher created here all end up children of the publisher-parent\n+      // The \"add one\" operations in the publisher created here should be children of the publisher-parent\n       Publisher<Integer> publisher = publisherSupplier()\n \n-      // After this activation, all additions to the assembly will create new traces\n       def tracer = OpenTelemetry.getTracer(\"test\")\n-      def scope = tracer.withSpan(DefaultSpan.getInvalid())\n+      def intermediate = tracer.spanBuilder(\"intermediate\").startSpan()\n+      // After this activation, the \"add two\" operations below should be children of this span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzgyMzY3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#pullrequestreview-489782367", "createdAt": "2020-09-16T16:08:05Z", "commit": {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjowODowNVrOHS4Ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjowODowNVrOHS4Ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1NjE1OQ==", "bodyText": "I think this change was wrong. Now the modeling isn't correct:\nBEFORE:\nnetty handler\n-> spring controller\n---> traced method\n\nAFTER\nnetty handler\n-> spring controller\n-> traced method\n\nThe traced method ends up a child of the netty span instead of the spring controller span. This was the reason that I had captured the context at assembly time", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1189#discussion_r489556159", "createdAt": "2020-09-16T16:08:05Z", "author": {"login": "devinsba"}, "path": "instrumentation/spring/spring-webflux-5.0/auto/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -173,7 +172,7 @@ class SpringWebfluxTest extends AgentTestRunner {\n         }\n         span(2) {\n           operationName \"tracedMethod\"\n-          childOf span(1)\n+          childOf span(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20396f810738bcc3fdf926f38fb7a47a1e2e28ba"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}