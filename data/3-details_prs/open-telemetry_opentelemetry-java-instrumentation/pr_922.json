{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NzYyNDgw", "number": 922, "title": "Change the rest of decorators to tracers", "bodyText": "Continuation of #918\nFix #828", "createdAt": "2020-08-07T18:49:52Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922", "merged": true, "mergeCommit": {"oid": "09c597e8e00a6b5be127174976a7580b248f40f4"}, "closed": true, "closedAt": "2020-08-13T18:55:09Z", "author": {"login": "heyams"}, "timelineItems": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8a6qsgH2gAyNDY0NzYyNDgwOmIxYTE4ZWM3OThmNmQ0ZDUyM2MwMjBjZTI5NTAxNzIzZjQ4MTI0ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-ksBPgFqTQ2NzA0NDgwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1a18ec798f6d4d523c020ce29501723f48124d5", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1a18ec798f6d4d523c020ce29501723f48124d5", "committedDate": "2020-08-07T02:23:09Z", "message": "Change AwsSdkClientDecorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5fd4380b94681e38ce0f426fac5b63dfdf118ca", "committedDate": "2020-08-07T02:23:09Z", "message": "Change awsclient 1.11 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044c7cf66f4cda1f59f040eac685fa7b2b95b7da", "committedDate": "2020-08-07T02:23:09Z", "message": "Use startSpan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6365c0ea64c2b780f677c61c5ac61daeadaf0de7", "committedDate": "2020-08-07T02:23:09Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17dde6e21e2ad4bbdc99f6b005283c90412a1347", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dde6e21e2ad4bbdc99f6b005283c90412a1347", "committedDate": "2020-08-07T02:44:14Z", "message": "Fix a muzzle failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6cb517c1b68961d37dd39d667d30777cb218669", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f6cb517c1b68961d37dd39d667d30777cb218669", "committedDate": "2020-08-07T16:46:43Z", "message": "Change kubernetes client 7.0 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f263f1dbb16616e0318a7dcb2415ed97aaa1c3ce", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f263f1dbb16616e0318a7dcb2415ed97aaa1c3ce", "committedDate": "2020-08-07T17:08:45Z", "message": "Change play-ws decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cbc78cc8c6350999972edf6f39b31bbc360db04", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9cbc78cc8c6350999972edf6f39b31bbc360db04", "committedDate": "2020-08-07T17:26:52Z", "message": "Change apache httpasyncclient decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bbdaf2b851a05a93f02280b0bb27221242a88d6", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9bbdaf2b851a05a93f02280b0bb27221242a88d6", "committedDate": "2020-08-07T17:30:59Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1ddac5dd4ec8738b4bdf5d3e6db322898bf4720", "committedDate": "2020-08-07T17:33:31Z", "message": "Make onRequest protected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0367c2c48f2b6ddb356d271b999c161299431b90", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0367c2c48f2b6ddb356d271b999c161299431b90", "committedDate": "2020-08-07T17:34:16Z", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e56466aae53618612723a9953f1a7e033dd3816", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5e56466aae53618612723a9953f1a7e033dd3816", "committedDate": "2020-08-07T17:51:54Z", "message": "Change spring-webflux-5.0 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07dad81f600ec6c26a1ff45cb627f28b49dd3617", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/07dad81f600ec6c26a1ff45cb627f28b49dd3617", "committedDate": "2020-08-07T18:00:33Z", "message": "Change spring-web-3.1 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44256cc525ee0cbcb2c2e8f48bb257f7df51461", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b44256cc525ee0cbcb2c2e8f48bb257f7df51461", "committedDate": "2020-08-07T18:14:27Z", "message": "Change JaxRsClient decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5ba7e9337485a3d3de1a2df802a7d732842877b", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d5ba7e9337485a3d3de1a2df802a7d732842877b", "committedDate": "2020-08-07T18:25:25Z", "message": "Change jaxrsclient 1.1 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a20a4e012d07eae0a3b8d4bdc7268023f3c74e", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54a20a4e012d07eae0a3b8d4bdc7268023f3c74e", "committedDate": "2020-08-07T18:42:10Z", "message": "Change apachehttpclient 4.0 decorator to tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da1b02748d477dc90d0c0b4a4a2a4d1186ba8bde", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da1b02748d477dc90d0c0b4a4a2a4d1186ba8bde", "committedDate": "2020-08-07T19:17:55Z", "message": "Fix a compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e8325548c5f4b0c06b8fa64698a33078bae7ca", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d4e8325548c5f4b0c06b8fa64698a33078bae7ca", "committedDate": "2020-08-07T19:56:14Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16fcc63bcaab5d9311c986da3c6e6a5a6068273", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d16fcc63bcaab5d9311c986da3c6e6a5a6068273", "committedDate": "2020-08-07T22:22:53Z", "message": "Refactor awssdkclienttracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e75d9179acb7ec62ccb3ff1f3da2e77c27ac07ce", "committedDate": "2020-08-07T22:34:39Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aac4f9cce8627f94b7ef2e3ae0d4c81666000e0f", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aac4f9cce8627f94b7ef2e3ae0d4c81666000e0f", "committedDate": "2020-08-08T00:01:28Z", "message": "Fix test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36f4c33563dc92c251b00ee6a5383534685569f3", "committedDate": "2020-08-08T00:30:28Z", "message": "Fix ApacheHttpClientResponseHandlerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzE2Mjcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-463716273", "createdAt": "2020-08-08T04:08:15Z", "commit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDowOTowNVrOG9tT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNDoxODo1NlrOG9tWqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODY3Mw==", "bodyText": "I don't think scope can be null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358673", "createdAt": "2020-08-08T04:09:05Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-2.1/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_1/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODgzNg==", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358836", "createdAt": "2020-08-08T04:11:03Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -72,12 +57,14 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n-\n+        @Advice.Enter final Span span,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODg1Mg==", "bodyText": "i don't think scope can be null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358852", "createdAt": "2020-08-08T04:11:31Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -72,12 +57,14 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n-\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODg4OQ==", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358889", "createdAt": "2020-08-08T04:11:49Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-2.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODkwNg==", "bodyText": "i don't think scope can be null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358906", "createdAt": "2020-08-08T04:12:06Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-2.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n+      if (scope != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODkxOQ==", "bodyText": "can you switch this to new convention @Advice.Local(\"otelSpan\")?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358919", "createdAt": "2020-08-08T04:12:19Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-2.1/src/main/java/io/opentelemetry/auto/instrumentation/playws/v2_1/PlayWSClientInstrumentation.java", "diffHunk": "@@ -63,12 +53,15 @@ public static Span methodEnter(\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void methodExit(\n-        @Advice.Enter final Span clientSpan, @Advice.Thrown final Throwable throwable) {\n+        @Advice.Enter final Span span,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Local(\"otelScope\") Scope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1ODk2OQ==", "bodyText": "lost this comment", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467358969", "createdAt": "2020-08-08T04:13:19Z", "author": {"login": "trask"}, "path": "instrumentation-core/apache-httpclient-4.0/src/main/java/io/opentelemetry/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -69,14 +48,15 @@ public static void doMethodExit(\n       final SpanWithScope spanWithScope, final Object result, final Throwable throwable) {\n     try {\n       Span span = spanWithScope.getSpan();\n-\n       if (result instanceof HttpResponse) {\n-        DECORATE.onResponse(span, (HttpResponse) result);\n-      } // else they probably provided a ResponseHandler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTAwMQ==", "bodyText": "is this needed since only calls super?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359001", "createdAt": "2020-08-08T04:13:51Z", "author": {"login": "trask"}, "path": "instrumentation-core/apache-httpclient-4.0/src/main/java/io/opentelemetry/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,23 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onResponse(Span span, HttpResponse httpResponse) {\n+    return super.onResponse(span, httpResponse);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTA3Ng==", "bodyText": "in this case we want to pass tracer on, so that spring boot starter users can supply their own Tracer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new RestTemplateBeanPostProcessor();\n          \n          \n            \n                return new RestTemplateBeanPostProcessor(tracer);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359076", "createdAt": "2020-08-08T04:14:38Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateAutoConfiguration.java", "diffHunk": "@@ -43,6 +43,6 @@\n   @Bean\n   @Autowired\n   public RestTemplateBeanPostProcessor otelRestTemplateBeanPostProcessor(final Tracer tracer) {\n-    return new RestTemplateBeanPostProcessor(tracer);\n+    return new RestTemplateBeanPostProcessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTE0NQ==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  restTemplateInterceptors.add(0, new RestTemplateInterceptor());\n          \n          \n            \n                  restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359145", "createdAt": "2020-08-08T04:15:07Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -47,7 +42,7 @@ private void addRestTemplateInterceptorIfNotPresent(RestTemplate restTemplate) {\n     List<ClientHttpRequestInterceptor> restTemplateInterceptors = restTemplate.getInterceptors();\n     if (restTemplateInterceptors.stream()\n         .noneMatch(inteceptor -> inteceptor instanceof RestTemplateInterceptor)) {\n-      restTemplateInterceptors.add(0, new RestTemplateInterceptor(tracer));\n+      restTemplateInterceptors.add(0, new RestTemplateInterceptor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor();\n          \n          \n            \n              RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor(tracer);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359162", "createdAt": "2020-08-08T04:15:20Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessorTest.java", "diffHunk": "@@ -31,8 +31,7 @@\n class RestTemplateBeanPostProcessorTest {\n   @Mock Tracer tracer;\n \n-  RestTemplateBeanPostProcessor restTemplateBeanPostProcessor =\n-      new RestTemplateBeanPostProcessor(tracer);\n+  RestTemplateBeanPostProcessor restTemplateBeanPostProcessor = new RestTemplateBeanPostProcessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1OTQwMA==", "bodyText": "this can go up, before the scope, which helps us see it's all part of \"startSpan\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r467359400", "createdAt": "2020-08-08T04:18:56Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -49,32 +48,27 @@ public static void addFilter(\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    Span span = DECORATE.getOrCreateSpan(request, tracer);\n-    DECORATE.afterStart(span);\n+    Span span = TRACER.getOrCreateSpan(TRACER.spanNameForRequest(request), tracer);\n \n     try (Scope scope = tracer.withSpan(span)) {\n       ClientRequest mutatedRequest =\n           ClientRequest.from(request)\n-              .headers(httpHeaders -> DECORATE.inject(Context.current(), httpHeaders))\n+              .headers(httpHeaders -> TRACER.inject(Context.current(), httpHeaders))\n               .build();\n-      DECORATE.onRequest(span, mutatedRequest);\n+      TRACER.onRequest(span, mutatedRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36f4c33563dc92c251b00ee6a5383534685569f3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7059931e3e3d7761a7c770cdbab01b17b80445", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f7059931e3e3d7761a7c770cdbab01b17b80445", "committedDate": "2020-08-10T06:03:14Z", "message": "Merge remote-tracking branch 'upstream/master' into heyams-http-client-tracers-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0eb047911fb67b8ce8612e6673a4cef80679a0", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f0eb047911fb67b8ce8612e6673a4cef80679a0", "committedDate": "2020-08-10T06:15:09Z", "message": "Merge branch 'heyams-http-client-tracers-2' into heyams-http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922141085da8be56e895e7f35c9f226032a66fd8", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/922141085da8be56e895e7f35c9f226032a66fd8", "committedDate": "2020-08-10T19:12:48Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6e5bc9f3aa7a8cb86a683c66a600a9c5fb6d831e", "committedDate": "2020-08-10T20:45:24Z", "message": "Address feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369031cf05ad843e2dd9e374f522b155e96c97fb", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/369031cf05ad843e2dd9e374f522b155e96c97fb", "committedDate": "2020-08-10T20:51:35Z", "message": "Remove an overridden method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f8df4d296b08016ef03962bff0cc3b6f141dcd1", "committedDate": "2020-08-10T22:39:53Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1fcad70884bc22656543de2dd704d462cd5d69", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1c1fcad70884bc22656543de2dd704d462cd5d69", "committedDate": "2020-08-10T22:41:34Z", "message": "Fix nullpointerexception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327757e48651a8f15fe53064a3f61b9a222d95fa", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/327757e48651a8f15fe53064a3f61b9a222d95fa", "committedDate": "2020-08-10T23:35:50Z", "message": "Remove BaseTracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f843c158f5dbad5f2b8dca47dbc1e59a5c5dfe", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54f843c158f5dbad5f2b8dca47dbc1e59a5c5dfe", "committedDate": "2020-08-10T23:41:46Z", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f71c378fe6f632c2c5be553ac77e9ac856a279", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38f71c378fe6f632c2c5be553ac77e9ac856a279", "committedDate": "2020-08-10T23:57:11Z", "message": "Fix a compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df2c8a647cd0441bd5b18004c5346143f4e8fc5d", "committedDate": "2020-08-11T00:30:34Z", "message": "Remove local variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Njc0NzY4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-464674768", "createdAt": "2020-08-11T00:36:53Z", "commit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozNjo1M1rOG-kWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMTowMDoxMFrOG-kvDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MDUyNg==", "bodyText": "fyi #921", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468260526", "createdAt": "2020-08-11T00:36:53Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/httpclients/resttemplate/RestTemplateBeanPostProcessor.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n   private final Tracer tracer;\n \n-  public RestTemplateBeanPostProcessor(Tracer tracer) {\n+  public RestTemplateBeanPostProcessor(final Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MTgyMw==", "bodyText": "comment was lost here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.endExceptionally(clientSpan, getResponse(context), ex);\n          \n          \n            \n                  // end span before calling delegate\n          \n          \n            \n                  TRACER.endExceptionally(clientSpan, getResponse(context), ex);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468261823", "createdAt": "2020-08-11T00:41:05Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientInstrumentation.java", "diffHunk": "@@ -220,10 +213,7 @@ public void completed(final T result) {\n \n     @Override\n     public void failed(final Exception ex) {\n-      DECORATE.onResponse(clientSpan, getResponse(context));\n-      DECORATE.onError(clientSpan, ex);\n-      DECORATE.beforeFinish(clientSpan);\n-      clientSpan.end(); // end span before calling delegate\n+      TRACER.endExceptionally(clientSpan, getResponse(context), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MTkwMg==", "bodyText": "same\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  TRACER.end(clientSpan, getResponse(context));\n          \n          \n            \n                  // end span before calling delegate\n          \n          \n            \n                  TRACER.end(clientSpan, getResponse(context));", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468261902", "createdAt": "2020-08-11T00:41:23Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientInstrumentation.java", "diffHunk": "@@ -236,9 +226,7 @@ public void failed(final Exception ex) {\n \n     @Override\n     public void cancelled() {\n-      DECORATE.onResponse(clientSpan, getResponse(context));\n-      DECORATE.beforeFinish(clientSpan);\n-      clientSpan.end(); // end span before calling delegate\n+      TRACER.end(clientSpan, getResponse(context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzAxNg==", "bodyText": "i think move this to HttpClientTracer, looks like netty instrumentation calls it also (but we don't validate netty CONNECT span is CLIENT)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263016", "createdAt": "2020-08-11T00:45:37Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -78,8 +77,37 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.apache-httpasyncclient-4.0\";\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * name.\n+   */\n+  @Override\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).setSpanKind(Kind.CLIENT).startSpan();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HttpResponse response = (HttpResponse) result;\n          \n          \n            \n                    TRACER.onResponse(span, response);\n          \n          \n            \n                    TRACER.onResponse(span, (HttpResponse) result);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263353", "createdAt": "2020-08-11T00:46:47Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -69,14 +48,15 @@ public static void doMethodExit(\n       final SpanWithScope spanWithScope, final Object result, final Throwable throwable) {\n     try {\n       Span span = spanWithScope.getSpan();\n-\n       if (result instanceof HttpResponse) {\n-        DECORATE.onResponse(span, (HttpResponse) result);\n-      } // else they probably provided a ResponseHandler.\n-\n-      DECORATE.onError(span, throwable);\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+        HttpResponse response = (HttpResponse) result;\n+        TRACER.onResponse(span, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzgzNg==", "bodyText": "looks like this override is not needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onResponse(Span span, HttpResponse httpResponse) {\n          \n          \n            \n                return super.onResponse(span, httpResponse);\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468263836", "createdAt": "2020-08-11T00:48:49Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,23 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onResponse(Span span, HttpResponse httpResponse) {\n+    return super.onResponse(span, httpResponse);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjM2Ng==", "bodyText": "i think this can use startScope\nalso, this:\nWARNING: this might be a chain...so we only have to trace the first in the chain.\n\nshouldn't be needed once this item from #912 is done:\n\nadd ClientDecorator.CONTEXT_CLIENT_SPAN_KEY to the context inside startScope", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468266366", "createdAt": "2020-08-11T00:58:43Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Instrumentation.java", "diffHunk": "@@ -83,45 +81,42 @@ public JaxRsClientV1Instrumentation() {\n   public static class HandleAdvice {\n \n     @Advice.OnMethodEnter\n-    public static SpanWithScope onEnter(\n-        @Advice.Argument(0) final ClientRequest request, @Advice.This final ClientHandler thisObj) {\n+    public static void onEnter(\n+        @Advice.Argument(0) final ClientRequest request,\n+        @Advice.This final ClientHandler thisObj,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n \n       // WARNING: this might be a chain...so we only have to trace the first in the chain.\n       boolean isRootClientHandler = null == request.getProperties().get(CONTEXT_ATTRIBUTE);\n       if (isRootClientHandler) {\n-        Span span =\n-            TRACER\n-                .spanBuilder(DECORATE.spanNameForRequest(request))\n-                .setSpanKind(CLIENT)\n-                .startSpan();\n-        DECORATE.afterStart(span);\n-        DECORATE.onRequest(span, request);\n+        span = TRACER.startSpan(request);\n \n         Context context = withSpan(span, Context.current());\n         request.getProperties().put(CONTEXT_ATTRIBUTE, context);\n \n         OpenTelemetry.getPropagators()\n             .getHttpTextFormat()\n             .inject(context, request.getHeaders(), SETTER);\n-        return new SpanWithScope(span, withScopedContext(context));\n+        scope = withScopedContext(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2Njc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              protected Span onRequest(Span span, Request request) {\n          \n          \n            \n                return super.onRequest(span, request);\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r468266767", "createdAt": "2020-08-11T01:00:10Z", "author": {"login": "trask"}, "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/auto/instrumentation/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -53,4 +52,32 @@ protected String requestHeader(Request request, String name) {\n   protected String responseHeader(Response response, String name) {\n     return response.header(name);\n   }\n+\n+  @Override\n+  protected Setter<Request> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.kubernetes-client-7.0\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, Request request) {\n+    return super.onRequest(span, request);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e8105fd9b580d65e467067e71e7228d826dcaae", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e8105fd9b580d65e467067e71e7228d826dcaae", "committedDate": "2020-08-11T17:17:34Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac56cc3e0400cfda847a2cdb1b14c830a6374f01", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac56cc3e0400cfda847a2cdb1b14c830a6374f01", "committedDate": "2020-08-11T18:12:15Z", "message": "Add javadoc to explain why it is needed to override methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/67f6ad251c82f68aebf1279f498a8ebdc13d6e4c", "committedDate": "2020-08-11T18:24:36Z", "message": "Undo afterMarshalling and afterExecution in the tracer class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2655d28220ae7148983809c5cf47843e2e02fe4b", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2655d28220ae7148983809c5cf47843e2e02fe4b", "committedDate": "2020-08-11T20:13:51Z", "message": "Move spanName method to interceptor class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad5a786059ca5a5db62e2d1115422603170a4afb", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad5a786059ca5a5db62e2d1115422603170a4afb", "committedDate": "2020-08-12T02:08:58Z", "message": "Merge branch 'heya/http-client-tracers-2' into heya/http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dd3b97fb11513a5dd5a1fe05b1ae23dc88e55ae", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dd3b97fb11513a5dd5a1fe05b1ae23dc88e55ae", "committedDate": "2020-08-12T17:31:59Z", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ccef511e3143d2a82d6ee6fa1a7d8b5944766966", "committedDate": "2020-08-12T17:50:30Z", "message": "Fix compilation errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTQ0ODM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-466144834", "createdAt": "2020-08-12T17:54:22Z", "commit": {"oid": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo1NDoyMlrOG_sQdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODowOTo1OFrOG_sypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzODU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.SpringWebfluxHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.HttpHeadersInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter\"\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.SpringWebfluxHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.instrumentation.spring.webflux.client.WebClientTracingFilter\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469438582", "createdAt": "2020-08-12T17:54:22Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/src/main/java/io/opentelemetry/auto/instrumentation/spring/webflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -46,9 +46,9 @@ public WebClientFilterInstrumentation() {\n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.SpringWebfluxHttpClientDecorator\",\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter\",\n-      \"io.opentelemetry.instrumentation.spring.webflux.client.WebClientTracingFilter\"\n+      \"io.opentelemetry.instrumentation.springwebflux.client.SpringWebfluxHttpClientTracer\",\n+      \"io.opentelemetry.instrumentation.springwebflux.client.HttpHeadersInjectAdapter\",\n+      \"io.opentelemetry.instrumentation.springwebflux.client.WebClientTracingFilter\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0NzMzNA==", "bodyText": "these look unused", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469447334", "createdAt": "2020-08-12T18:09:58Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,28 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  @Override\n+  protected Span onRequest(Span span, ClientRequest clientRequest) {\n+    return super.onRequest(span, clientRequest);\n+  }\n+\n+  @Override\n+  protected String spanNameForRequest(ClientRequest clientRequest) {\n+    return super.spanNameForRequest(clientRequest);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccef511e3143d2a82d6ee6fa1a7d8b5944766966"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d2bcc7d071453e5336af03de6fe727142917cc", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/77d2bcc7d071453e5336af03de6fe727142917cc", "committedDate": "2020-08-12T18:24:19Z", "message": "Fix merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTcyMDY2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-466172066", "createdAt": "2020-08-12T18:32:56Z", "commit": {"oid": "77d2bcc7d071453e5336af03de6fe727142917cc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMjo1NlrOG_tldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMjo1NlrOG_tldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDM0MQ==", "bodyText": "we will get rid of this soon, you can accept heyams#1, or i can send that in as separate PR after your PR", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469460341", "createdAt": "2020-08-12T18:32:56Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,18 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";\n+  }\n+\n+  public Tracer getTracer() {\n+    return tracer;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d2bcc7d071453e5336af03de6fe727142917cc"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a54291fb698b42523890d1c8c2d07297d58a56", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/55a54291fb698b42523890d1c8c2d07297d58a56", "committedDate": "2020-08-13T00:31:09Z", "message": "Merge remote-tracking branch 'upstream/master' into heya/http-client-tracers-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/68622854118c408ae5ec24cc1a10764ef955ef7b", "committedDate": "2020-08-13T01:27:16Z", "message": "Fix test failures that wasn't actually run before, thanks to JUNIT 5 upgrade"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NDM5NDU0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-466439454", "createdAt": "2020-08-13T04:42:37Z", "commit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNDo0MjozN1rOG_7yEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNDo0NjozOFrOG_72Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5Mjk0Nw==", "bodyText": "Think we're not supposed to have this per #921 (though we can delete at the same time so no worries)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469692947", "createdAt": "2020-08-13T04:42:37Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-web-3.1/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java", "diffHunk": "@@ -33,26 +32,19 @@\n \n   private final Tracer tracer;\n \n-  public RestTemplateInterceptor(Tracer tracer) {\n+  public RestTemplateInterceptor(final Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ==", "bodyText": "Hmm - I'm sensing something wrong with our API if we have to skip it so many times (thought for broader discussion, not an issue with this PR)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469693171", "createdAt": "2020-08-13T04:43:37Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,18 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5Mzk1NA==", "bodyText": "The funny thing about protected methods is unless we make them final they may as well be public :P", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469693954", "createdAt": "2020-08-13T04:46:38Z", "author": {"login": "anuraaga"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientTracer.java", "diffHunk": "@@ -78,8 +77,38 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.apache-httpasyncclient-4.0\";\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * name.\n+   */\n+  @Override\n+  public Span startSpan(String spanName) {\n+    return tracer.spanBuilder(spanName).setSpanKind(Kind.CLIENT).startSpan();\n+  }\n+\n+  @Override\n+  public String spanNameForRequest(HttpRequest httpRequest) {\n+    return super.spanNameForRequest(httpRequest);\n+  }\n+\n+  /** This method is overridden to allow other classes in this package to call it. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NjU0ODU0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-466654854", "createdAt": "2020-08-13T10:56:30Z", "commit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDo1NjozMFrOHAGfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMToyODo0N1rOHAHaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2ODM1OA==", "bodyText": "But why to you return null if io.opentelemetry.instrumentation.spring.webflux.client.HttpHeadersInjectAdapter.SETTER was used before?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469868358", "createdAt": "2020-08-13T10:56:30Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/SpringWebfluxHttpClientTracer.java", "diffHunk": "@@ -71,4 +68,18 @@ protected String responseHeader(ClientResponse clientResponse, String name) {\n     List<String> headers = clientResponse.headers().header(name);\n     return !headers.isEmpty() ? headers.get(0) : null;\n   }\n+\n+  @Override\n+  protected Setter<ClientRequest> getSetter() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MzE3MQ=="}, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTA1OA==", "bodyText": "Where is this inject now?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469875058", "createdAt": "2020-08-13T11:10:42Z", "author": {"login": "iNikem"}, "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientHelper.java", "diffHunk": "@@ -16,42 +16,21 @@\n \n package io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0;\n \n-import static io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0.ApacheHttpClientDecorator.DECORATE;\n-import static io.opentelemetry.context.ContextUtils.withScopedContext;\n+import static io.opentelemetry.auto.instrumentation.apachehttpclient.v4_0.ApacheHttpClientTracer.TRACER;\n \n-import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.instrumentation.api.decorator.ClientDecorator;\n import io.opentelemetry.instrumentation.auto.api.CallDepthThreadLocalMap;\n import io.opentelemetry.instrumentation.auto.api.SpanWithScope;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import org.apache.http.HttpResponse;\n import org.apache.http.client.HttpClient;\n import org.apache.http.client.methods.HttpUriRequest;\n \n public class ApacheHttpClientHelper {\n \n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.spring-webflux-5.0\");\n-\n   public static SpanWithScope doMethodEnter(final HttpUriRequest request) {\n-    return doMethodEnter(request, TRACER);\n-  }\n-\n-  public static SpanWithScope doMethodEnter(final HttpUriRequest request, final Tracer tracer) {\n-    Span span = DECORATE.getOrCreateSpan(request, tracer);\n-\n-    DECORATE.afterStart(span);\n-    DECORATE.onRequest(span, request);\n-\n-    Context context = ClientDecorator.currentContextWith(span);\n-    if (span.getContext().isValid()) {\n-      DECORATE.inject(context, request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NTQ4Nw==", "bodyText": "This name is wrong", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469875487", "createdAt": "2020-08-13T11:11:44Z", "author": {"login": "iNikem"}, "path": "instrumentation/apache-httpclient/apache-httpclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpclient/v4_0/ApacheHttpClientTracer.java", "diffHunk": "@@ -59,8 +56,24 @@ protected String responseHeader(HttpResponse response, String name) {\n     return header(response, name);\n   }\n \n+  @Override\n+  protected Setter<HttpUriRequest> getSetter() {\n+    return SETTER;\n+  }\n+\n   private static String header(HttpMessage message, String name) {\n     Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.spring-webflux-5.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3NjY2MA==", "bodyText": "Still don't understand why do we do something extra to avoid it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469876660", "createdAt": "2020-08-13T11:14:21Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientTracer.java", "diffHunk": "@@ -64,20 +65,27 @@ public Span onRequest(final Span span, final Request<?> request) {\n     span.setAttribute(\"aws.operation\", awsOperation.getSimpleName());\n     span.setAttribute(\"aws.endpoint\", request.getEndpoint().toString());\n \n-    if (contextStore != null) {\n-      RequestMeta requestMeta = contextStore.get(originalRequest);\n-      if (requestMeta != null) {\n-        span.setAttribute(\"aws.bucket.name\", requestMeta.getBucketName());\n-        span.setAttribute(\"aws.queue.url\", requestMeta.getQueueUrl());\n-        span.setAttribute(\"aws.queue.name\", requestMeta.getQueueName());\n-        span.setAttribute(\"aws.stream.name\", requestMeta.getStreamName());\n-        span.setAttribute(\"aws.table.name\", requestMeta.getTableName());\n-      }\n+    if (requestMeta != null) {\n+      span.setAttribute(\"aws.bucket.name\", requestMeta.getBucketName());\n+      span.setAttribute(\"aws.queue.url\", requestMeta.getQueueUrl());\n+      span.setAttribute(\"aws.queue.name\", requestMeta.getQueueName());\n+      span.setAttribute(\"aws.stream.name\", requestMeta.getStreamName());\n+      span.setAttribute(\"aws.table.name\", requestMeta.getTableName());\n     }\n-\n     return span;\n   }\n \n+  /**\n+   * Override startScope not to inject context into the request since no need to propagate context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3ODgxMQ==", "bodyText": "There io.opentelemetry.auto.instrumentation.jaxrsclient.v2_0.InjectAdapter.SETTER, why do you return null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469878811", "createdAt": "2020-08-13T11:18:51Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v2_0/JaxRsClientTracer.java", "diffHunk": "@@ -54,4 +50,14 @@ protected String requestHeader(ClientRequestContext clientRequestContext, String\n   protected String responseHeader(ClientResponseContext clientResponseContext, String name) {\n     return clientResponseContext.getHeaderString(name);\n   }\n+\n+  @Override\n+  protected Setter<ClientRequestContext> getSetter() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MDI2OA==", "bodyText": "But you can make io.opentelemetry.auto.instrumentation.jaxrsclient.v1_1.InjectAdapter implements HttpTextFormat.Setter<ClientRequest>.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469880268", "createdAt": "2020-08-13T11:21:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Instrumentation.java", "diffHunk": "@@ -83,45 +81,42 @@ public JaxRsClientV1Instrumentation() {\n   public static class HandleAdvice {\n \n     @Advice.OnMethodEnter\n-    public static SpanWithScope onEnter(\n-        @Advice.Argument(0) final ClientRequest request, @Advice.This final ClientHandler thisObj) {\n+    public static void onEnter(\n+        @Advice.Argument(0) final ClientRequest request,\n+        @Advice.This final ClientHandler thisObj,\n+        @Advice.Local(\"otelSpan\") Span span,\n+        @Advice.Local(\"otelScope\") Scope scope) {\n \n       // WARNING: this might be a chain...so we only have to trace the first in the chain.\n       boolean isRootClientHandler = null == request.getProperties().get(CONTEXT_ATTRIBUTE);\n       if (isRootClientHandler) {\n-        Span span =\n-            TRACER\n-                .spanBuilder(DECORATE.spanNameForRequest(request))\n-                .setSpanKind(CLIENT)\n-                .startSpan();\n-        DECORATE.afterStart(span);\n-        DECORATE.onRequest(span, request);\n+        span = TRACER.startSpan(request);\n \n         Context context = withSpan(span, Context.current());\n         request.getProperties().put(CONTEXT_ATTRIBUTE, context);\n \n         OpenTelemetry.getPropagators()\n             .getHttpTextFormat()\n             .inject(context, request.getHeaders(), SETTER);\n-        return new SpanWithScope(span, withScopedContext(context));\n+        scope = withScopedContext(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NjM2Ng=="}, "originalCommit": {"oid": "df2c8a647cd0441bd5b18004c5346143f4e8fc5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MzQ2MQ==", "bodyText": "You don't need so much customisations here. You can use startSpan(Request) from the superclass. Override spanNameForRequest to get digest. You may need to override startSpan(Request) to add these two attributes from digest.\nThis also will remove the need to make onRequest public and to call it manually.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r469883461", "createdAt": "2020-08-13T11:28:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/auto/instrumentation/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -53,4 +52,33 @@ protected String requestHeader(Request request, String name) {\n   protected String responseHeader(Response response, String name) {\n     return response.header(name);\n   }\n+\n+  @Override\n+  protected Setter<Request> getSetter() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.kubernetes-client-7.0\";\n+  }\n+\n+  /** This method is overridden to allow other classes in this package to call it. */\n+  @Override\n+  protected Span onRequest(Span span, Request request) {\n+    return super.onRequest(span, request);\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable CLIENT span (operation) name based on a given\n+   * KubernetesRequestDigest.\n+   */\n+  public Span startSpan(KubernetesRequestDigest digest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68622854118c408ae5ec24cc1a10764ef955ef7b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5", "committedDate": "2020-08-13T16:20:46Z", "message": "Change JaxRsClient injectadpater to be HttpTextFormat.Setter<ClientRequest>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333e0b62325c84038b05b3ca09d57f09fa26691c", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/333e0b62325c84038b05b3ca09d57f09fa26691c", "committedDate": "2020-08-13T17:44:02Z", "message": "Update instrumentation name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "895758869c63de1220de9f7c0f814dfd5b8dc13d", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/895758869c63de1220de9f7c0f814dfd5b8dc13d", "committedDate": "2020-08-13T17:46:16Z", "message": "Fix test failures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5b81181de12fc589cbee56d34ee000528969de3", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5b81181de12fc589cbee56d34ee000528969de3", "committedDate": "2020-08-13T16:56:16Z", "message": "Update instrumentation name"}, "afterCommit": {"oid": "895758869c63de1220de9f7c0f814dfd5b8dc13d", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/895758869c63de1220de9f7c0f814dfd5b8dc13d", "committedDate": "2020-08-13T17:46:16Z", "message": "Fix test failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDAxOTgw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-467001980", "createdAt": "2020-08-13T17:54:23Z", "commit": {"oid": "6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1NDoyM1rOHAXIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzo1NDoyM1rOHAXIhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0MTA2MA==", "bodyText": "i think still need the scope != null here, until we do #912 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#discussion_r470141060", "createdAt": "2020-08-13T17:54:23Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Instrumentation.java", "diffHunk": "@@ -108,9 +96,7 @@ public static void onExit(\n         @Advice.Thrown final Throwable throwable,\n         @Advice.Local(\"otelSpan\") Span span,\n         @Advice.Local(\"otelScope\") Scope scope) {\n-      if (scope != null) {\n-        scope.close();\n-      }\n+      scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6702d6a729d94bde3d6e7daa78d5ce844c0bb5a5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a147cd28b16a2dc984961b72f72f62f5b2ba7aff", "author": {"user": {"login": "heyams", "name": "Helen Y."}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a147cd28b16a2dc984961b72f72f62f5b2ba7aff", "committedDate": "2020-08-13T17:59:33Z", "message": "Add scope null check back"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDQ0ODA5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/922#pullrequestreview-467044809", "createdAt": "2020-08-13T18:54:03Z", "commit": {"oid": "a147cd28b16a2dc984961b72f72f62f5b2ba7aff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2678, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}