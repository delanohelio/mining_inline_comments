{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDU3MDI1", "number": 756, "title": "Add instrumentation for Armeria (server)", "bodyText": "Why?\n\nArmeria is my go-to framework so I want it instrumented!\nI wanted an example of a instrumented a framework that provides detailed logging, including timings, in the framework itself (so use its timestamps). Realized I forgot to add to end, will update it\nI hadn't written an instrumentation from scratch. It's a good experience :)", "createdAt": "2020-07-22T11:26:03Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756", "merged": true, "mergeCommit": {"oid": "c3299fac307916be80338fe078058105c6019f2b"}, "closed": true, "closedAt": "2020-07-27T06:54:08Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3ZDl4AH2gAyNDU1MDU3MDI1OjBiY2VjMWM2NzlhZjUwNWU1OThiOWJhZWQ3NzYwN2E1MGIxMDIzMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4mgeHAFqTQ1NTMzMzM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0bcec1c679af505e598b9baed77607a50b102312", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0bcec1c679af505e598b9baed77607a50b102312", "committedDate": "2020-07-22T11:23:28Z", "message": "Add instrumentation for Armeria (server)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzQzNTI2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-453343526", "createdAt": "2020-07-22T13:57:20Z", "commit": {"oid": "0bcec1c679af505e598b9baed77607a50b102312"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/886be612d50090262c68e98e6df9e7350848c61a", "committedDate": "2020-07-22T14:32:26Z", "message": "Spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODAxNTEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-453801512", "createdAt": "2020-07-23T02:20:47Z", "commit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyMDo0N1rOG16R7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyMDo0N1rOG16R7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MjU3NQ==", "bodyText": "Curious if we can utilize ctx.log().serviceName()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459182575", "createdAt": "2020-07-23T02:20:47Z", "author": {"login": "trustin"}, "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpService} to trace inbound {@link HttpRequest}s. */\n+public class OpenTelemetryService extends SimpleDecoratingHttpService {\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the default {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator() {\n+    return service -> new OpenTelemetryService(service, new ArmeriaServerTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator(Tracer tracer) {\n+    return service -> new OpenTelemetryService(service, new ArmeriaServerTracer(tracer));\n+  }\n+\n+  private final ArmeriaServerTracer serverTracer;\n+\n+  private OpenTelemetryService(HttpService delegate, ArmeriaServerTracer serverTracer) {\n+    super(delegate);\n+    this.serverTracer = serverTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+    String route = route(ctx);\n+    String spanName = route != null ? route : \"HTTP \" + req.method().name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c5feae4eede08e295f1820d86fba077a7021f3c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c5feae4eede08e295f1820d86fba077a7021f3c", "committedDate": "2020-07-23T04:52:35Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into armeria-instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODM0OTY2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-453834966", "createdAt": "2020-07-23T04:54:07Z", "commit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1NDowOFrOG18Lwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1NDowOFrOG18Lwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMzc2Mg==", "bodyText": "So you mean the spanName should be /items/:itemsId?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459213762", "createdAt": "2020-07-23T04:54:08Z", "author": {"login": "minwoox"}, "path": "instrumentation/armeria-0.99/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v_0_99/AbstractArmeriaServerTest.groovy", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v_0_99\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpMethod\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.ServerBuilder\n+import com.linecorp.armeria.testing.junit4.server.ServerRule\n+import io.opentelemetry.auto.test.InstrumentationSpecification\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.junit.ClassRule\n+import spock.lang.Ignore\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {\n+\n+  abstract void configureServer(ServerBuilder sb)\n+\n+  @ClassRule\n+  @Shared\n+  ServerRule server = new ServerRule() {\n+    @Override\n+    protected void configure(ServerBuilder sb) throws Exception {\n+      sb.service(\"/exact\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/items/{itemsId}\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/httperror\", { ctx, req -> HttpResponse.of(HttpStatus.NOT_IMPLEMENTED) })\n+      sb.service(\"/exception\", { ctx, req -> throw new IllegalStateException(\"illegal\") })\n+\n+      configureServer(sb)\n+    }\n+  }\n+\n+  def client = WebClient.of(server.httpUri())\n+\n+  def \"HTTP #method #path\"() {\n+    when:\n+    def response = client.execute(HttpRequest.of(method, path)).aggregate().join()\n+\n+    then:\n+    response.status().code() == code\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName(spanName)\n+          spanKind SERVER\n+          errored code != 200\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" Long\n+            \"${SemanticAttributes.HTTP_URL.key()}\" \"${server.httpUri()}${path}\"\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" method.name()\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" code\n+\n+            if (path == \"/exception\") {\n+              \"error.type\" String\n+              \"error.msg\" String\n+              \"error.stack\" String\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    where:\n+    path          | spanName     | method          | code\n+    \"/exact\"      | \"/exact\"     | HttpMethod.GET  | 200\n+    // TODO(anuraaga): Seems to be an Armeria bug not to have :objectId here\n+    \"/items/1234\" | \"/items/:\"   | HttpMethod.POST | 200", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODM1NzU1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-453835755", "createdAt": "2020-07-23T04:57:21Z", "commit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1NzoyMVrOG18Omw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1NzoyMVrOG18Omw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDQ5MQ==", "bodyText": "IIRC it's working as expected, although not very nice: https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/ParameterizedPathMapping.java#L64-L70\nArmeria's PathMapping probably needs to provide a dedicated getter method for distributed tracing spans.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459214491", "createdAt": "2020-07-23T04:57:21Z", "author": {"login": "trustin"}, "path": "instrumentation/armeria-0.99/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v_0_99/AbstractArmeriaServerTest.groovy", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v_0_99\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpMethod\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.ServerBuilder\n+import com.linecorp.armeria.testing.junit4.server.ServerRule\n+import io.opentelemetry.auto.test.InstrumentationSpecification\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.junit.ClassRule\n+import spock.lang.Ignore\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {\n+\n+  abstract void configureServer(ServerBuilder sb)\n+\n+  @ClassRule\n+  @Shared\n+  ServerRule server = new ServerRule() {\n+    @Override\n+    protected void configure(ServerBuilder sb) throws Exception {\n+      sb.service(\"/exact\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/items/{itemsId}\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/httperror\", { ctx, req -> HttpResponse.of(HttpStatus.NOT_IMPLEMENTED) })\n+      sb.service(\"/exception\", { ctx, req -> throw new IllegalStateException(\"illegal\") })\n+\n+      configureServer(sb)\n+    }\n+  }\n+\n+  def client = WebClient.of(server.httpUri())\n+\n+  def \"HTTP #method #path\"() {\n+    when:\n+    def response = client.execute(HttpRequest.of(method, path)).aggregate().join()\n+\n+    then:\n+    response.status().code() == code\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName(spanName)\n+          spanKind SERVER\n+          errored code != 200\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" Long\n+            \"${SemanticAttributes.HTTP_URL.key()}\" \"${server.httpUri()}${path}\"\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" method.name()\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" code\n+\n+            if (path == \"/exception\") {\n+              \"error.type\" String\n+              \"error.msg\" String\n+              \"error.stack\" String\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    where:\n+    path          | spanName     | method          | code\n+    \"/exact\"      | \"/exact\"     | HttpMethod.GET  | 200\n+    // TODO(anuraaga): Seems to be an Armeria bug not to have :objectId here\n+    \"/items/1234\" | \"/items/:\"   | HttpMethod.POST | 200", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8", "committedDate": "2020-07-23T05:20:56Z", "message": "Use end timestamp too and fix auto test by not using ClassRule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODQxNjk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-453841694", "createdAt": "2020-07-23T05:21:28Z", "commit": {"oid": "0952b63b7db3aaa6e19ecea6eb2d96da7ab0e2f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyMToyOFrOG18jTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyMTo1MFrOG18jvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTc5MQ==", "bodyText": "Yeah", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459219791", "createdAt": "2020-07-23T05:21:28Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-0.99/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v_0_99/AbstractArmeriaServerTest.groovy", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v_0_99\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpMethod\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.ServerBuilder\n+import com.linecorp.armeria.testing.junit4.server.ServerRule\n+import io.opentelemetry.auto.test.InstrumentationSpecification\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.junit.ClassRule\n+import spock.lang.Ignore\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {\n+\n+  abstract void configureServer(ServerBuilder sb)\n+\n+  @ClassRule\n+  @Shared\n+  ServerRule server = new ServerRule() {\n+    @Override\n+    protected void configure(ServerBuilder sb) throws Exception {\n+      sb.service(\"/exact\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/items/{itemsId}\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/httperror\", { ctx, req -> HttpResponse.of(HttpStatus.NOT_IMPLEMENTED) })\n+      sb.service(\"/exception\", { ctx, req -> throw new IllegalStateException(\"illegal\") })\n+\n+      configureServer(sb)\n+    }\n+  }\n+\n+  def client = WebClient.of(server.httpUri())\n+\n+  def \"HTTP #method #path\"() {\n+    when:\n+    def response = client.execute(HttpRequest.of(method, path)).aggregate().join()\n+\n+    then:\n+    response.status().code() == code\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName(spanName)\n+          spanKind SERVER\n+          errored code != 200\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" Long\n+            \"${SemanticAttributes.HTTP_URL.key()}\" \"${server.httpUri()}${path}\"\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" method.name()\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" code\n+\n+            if (path == \"/exception\") {\n+              \"error.type\" String\n+              \"error.msg\" String\n+              \"error.stack\" String\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    where:\n+    path          | spanName     | method          | code\n+    \"/exact\"      | \"/exact\"     | HttpMethod.GET  | 200\n+    // TODO(anuraaga): Seems to be an Armeria bug not to have :objectId here\n+    \"/items/1234\" | \"/items/:\"   | HttpMethod.POST | 200", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMzc2Mg=="}, "originalCommit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTkwMQ==", "bodyText": "Having a method like that to give a human readable representation of the route would be nice.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459219901", "createdAt": "2020-07-23T05:21:50Z", "author": {"login": "anuraaga"}, "path": "instrumentation/armeria-0.99/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v_0_99/AbstractArmeriaServerTest.groovy", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v_0_99\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpMethod\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.ServerBuilder\n+import com.linecorp.armeria.testing.junit4.server.ServerRule\n+import io.opentelemetry.auto.test.InstrumentationSpecification\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.junit.ClassRule\n+import spock.lang.Ignore\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {\n+\n+  abstract void configureServer(ServerBuilder sb)\n+\n+  @ClassRule\n+  @Shared\n+  ServerRule server = new ServerRule() {\n+    @Override\n+    protected void configure(ServerBuilder sb) throws Exception {\n+      sb.service(\"/exact\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/items/{itemsId}\", { ctx, req -> HttpResponse.of(HttpStatus.OK) })\n+      sb.service(\"/httperror\", { ctx, req -> HttpResponse.of(HttpStatus.NOT_IMPLEMENTED) })\n+      sb.service(\"/exception\", { ctx, req -> throw new IllegalStateException(\"illegal\") })\n+\n+      configureServer(sb)\n+    }\n+  }\n+\n+  def client = WebClient.of(server.httpUri())\n+\n+  def \"HTTP #method #path\"() {\n+    when:\n+    def response = client.execute(HttpRequest.of(method, path)).aggregate().join()\n+\n+    then:\n+    response.status().code() == code\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName(spanName)\n+          spanKind SERVER\n+          errored code != 200\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" Long\n+            \"${SemanticAttributes.HTTP_URL.key()}\" \"${server.httpUri()}${path}\"\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" method.name()\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" code\n+\n+            if (path == \"/exception\") {\n+              \"error.type\" String\n+              \"error.msg\" String\n+              \"error.stack\" String\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    where:\n+    path          | spanName     | method          | code\n+    \"/exact\"      | \"/exact\"     | HttpMethod.GET  | 200\n+    // TODO(anuraaga): Seems to be an Armeria bug not to have :objectId here\n+    \"/items/1234\" | \"/items/:\"   | HttpMethod.POST | 200", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDQ5MQ=="}, "originalCommit": {"oid": "886be612d50090262c68e98e6df9e7350848c61a"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c82f98816d2e8584646e979581827c1cbdba2298", "committedDate": "2020-07-23T06:21:00Z", "message": "Reduce number of less useful lambdas and add reference to useful lambda."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjIxMjg1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-454621285", "createdAt": "2020-07-24T03:49:59Z", "commit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzo0OTo1OVrOG2iY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDoxMjowMFrOG2ioAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzOTcyNA==", "bodyText": "just checking, is this min version that the instrumentation supports?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459839724", "createdAt": "2020-07-24T03:49:59Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-0.99/auto/armeria-0.99-auto.gradle", "diffHunk": "@@ -0,0 +1,24 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+// TODO(anuraaga): Move into instrumentation.gradle\n+archivesBaseName = projectDir.parentFile.name\n+\n+muzzle {\n+  pass {\n+    group = \"com.linecorp.armeria\"\n+    module = \"armeria\"\n+    versions = \"[0.99.8,)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MDYyMg==", "bodyText": "this is intended to be version of the instrumentation, e.g. ${project.version}, but we haven't implemented yet\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Version.get(\"armeria\").artifactVersion();\n          \n          \n            \n                return null;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459840622", "createdAt": "2020-07-24T03:55:04Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.Version;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.armeria.v0_99.internal.ContextUtil;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+final class ArmeriaServerTracer\n+    extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {\n+\n+  ArmeriaServerTracer() {}\n+\n+  ArmeriaServerTracer(Tracer tracer) {\n+    super(tracer);\n+  }\n+\n+  @Override\n+  public Context getServerContext(RequestContext ctx) {\n+    return ContextUtil.getContext(ctx);\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.armeria-0.99\";\n+  }\n+\n+  @Override\n+  protected String getVersion() {\n+    return Version.get(\"armeria\").artifactVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MjMzMg==", "bodyText": "it looks like we aren't using the STORAGE parameter, e.g. no calls to getServerContext\nif that's the case, maybe good to be explicit about this (similar to AkkaHttpServerTracer)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {\n          \n          \n            \n                extends HttpServerTracer<HttpRequest, ServiceRequestContext, Void> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459842332", "createdAt": "2020-07-24T04:04:54Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/ArmeriaServerTracer.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.Version;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n+import io.opentelemetry.instrumentation.armeria.v0_99.internal.ContextUtil;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.URI;\n+\n+final class ArmeriaServerTracer\n+    extends HttpServerTracer<HttpRequest, ServiceRequestContext, RequestContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MzI1Ng==", "bodyText": "maybe wrap this in span.isRecording() and then don't need above condition/short-circuit?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459843256", "createdAt": "2020-07-24T04:10:15Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-0.99/library/src/main/java/io/opentelemetry/instrumentation/armeria/v0_99/server/OpenTelemetryService.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v0_99.server;\n+\n+import com.linecorp.armeria.common.HttpRequest;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.server.HttpService;\n+import com.linecorp.armeria.server.Route;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.SimpleDecoratingHttpService;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+\n+/** Decorates an {@link HttpService} to trace inbound {@link HttpRequest}s. */\n+public class OpenTelemetryService extends SimpleDecoratingHttpService {\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the default {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator() {\n+    return new Decorator(new ArmeriaServerTracer());\n+  }\n+\n+  /** Creates a new tracing {@link HttpService} decorator using the specified {@link Tracer}. */\n+  public static Function<? super HttpService, OpenTelemetryService> newDecorator(Tracer tracer) {\n+    return new Decorator(new ArmeriaServerTracer(tracer));\n+  }\n+\n+  private final ArmeriaServerTracer serverTracer;\n+\n+  private OpenTelemetryService(HttpService delegate, ArmeriaServerTracer serverTracer) {\n+    super(delegate);\n+    this.serverTracer = serverTracer;\n+  }\n+\n+  @Override\n+  public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exception {\n+    String route = route(ctx);\n+    String spanName = route != null ? route : \"HTTP \" + req.method().name();\n+\n+    // Always available in practice.\n+    long requestStartTimeMicros =\n+        ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME).requestStartTimeMicros();\n+    long requestStartTimeNanos = TimeUnit.MICROSECONDS.toNanos(requestStartTimeMicros);\n+    Span span = serverTracer.startSpan(req, ctx, spanName, requestStartTimeNanos);\n+\n+    // For non-recording spans, nothing special to do.\n+    if (!span.isRecording()) {\n+      try (Scope ignored = serverTracer.startScope(span, ctx)) {\n+        return unwrap().serve(ctx, req);\n+      }\n+    }\n+\n+    ctx.log()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MzU4NQ==", "bodyText": "did you try extending HttpServerTest?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r459843585", "createdAt": "2020-07-24T04:12:00Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-0.99/testing/src/main/groovy/io/opentelemetry/instrumentation/armeria/v_0_99/AbstractArmeriaServerTest.groovy", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.armeria.v_0_99\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpMethod\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.ServerBuilder\n+import com.linecorp.armeria.testing.junit4.server.ServerRule\n+import io.opentelemetry.auto.test.InstrumentationSpecification\n+import io.opentelemetry.auto.test.utils.TraceUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import spock.lang.Ignore\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+abstract class AbstractArmeriaServerTest extends InstrumentationSpecification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82f98816d2e8584646e979581827c1cbdba2298"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3bfbd74e82206ebe3fb467867f04e3e0a798cc", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf3bfbd74e82206ebe3fb467867f04e3e0a798cc", "committedDate": "2020-07-24T05:13:22Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into armeria-instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "914d52a1d323244002e88b5d48325d758d4b8b42", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/914d52a1d323244002e88b5d48325d758d4b8b42", "committedDate": "2020-07-24T07:14:52Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6", "committedDate": "2020-07-25T01:47:09Z", "message": "README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjYyODM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-455262834", "createdAt": "2020-07-25T05:27:38Z", "commit": {"oid": "2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToyNzozOVrOG3CnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNToyNzozOVrOG3CnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2Nzc2OA==", "bodyText": "is this a typo? 0.99.8 was min version in the muzzle range", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#discussion_r460367768", "createdAt": "2020-07-25T05:27:39Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -143,6 +143,7 @@ provide the path to a JAR file including an SPI implementation using the system\n | [Akka HTTP](https://doc.akka.io/docs/akka-http/current/index.html)                                                                    | 10.0+                          |\n | [Apache HttpAsyncClient](https://hc.apache.org/index.html)                                                                            | 4.0+                           |\n | [Apache HttpClient](https://hc.apache.org/index.html)                                                                                 | 2.0+                           |\n+| [Armeria](https://armeria.dev)                                                                                                        | 0.98+                          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8b32f8ea8cf77eb1e5f8c776b8df3d4f1e2af6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ee6f2d2c8e65b5085a46038bbb24e54fb74ed0a", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ee6f2d2c8e65b5085a46038bbb24e54fb74ed0a", "committedDate": "2020-07-26T03:59:16Z", "message": "Move package to v1_0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61661f3ac59f281edf0deb6411ef00d86e678330", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/61661f3ac59f281edf0deb6411ef00d86e678330", "committedDate": "2020-07-26T05:11:28Z", "message": "No storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzMzMzUw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/756#pullrequestreview-455333350", "createdAt": "2020-07-26T05:37:42Z", "commit": {"oid": "61661f3ac59f281edf0deb6411ef00d86e678330"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2825, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}