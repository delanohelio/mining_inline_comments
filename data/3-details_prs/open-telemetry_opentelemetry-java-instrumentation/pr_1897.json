{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzUyMzky", "number": 1897, "title": "Propagate context in Spring SimpleAsyncTaskExecutor", "bodyText": "Resolves #1889\nThere were three ways to implement that:\n\nAdd the class name to AbstractExecutorInstrumentation and instrument all public methods in both JavaExecutorInstrumentation and NonStandardExecutorInstrumentationModule;\nAdd a new type instrumentation to NonStandardExecutorInstrumentationModule and instrument the protected doExecute() method;\nAdd a completely new module that instruments (and tests!) the executor class.\n\nIn the end I've chosen the third option: because the SimpleAsyncTaskExecutor has some non-standard submitListenable methods, because there is a single internal doExecute method that can server as instrumentation point for everything, and because I can test it - executors module has no tests for non-java.util.concurrent executors.\nI think a separate module is the least bad solution, but I'm not 100%v convinced - I eagerly await your comments regarding the placement of this instrumentation \ud83d\ude04", "createdAt": "2020-12-14T10:48:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897", "merged": true, "mergeCommit": {"oid": "a7cad4b36fe494cbf73a986fc14575619c422a54"}, "closed": true, "closedAt": "2020-12-15T14:30:26Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmDTU9gH2gAyNTM5MzUyMzkyOjVhNTE5ODU4YWY0NThmM2Q1MTkxYjIwNmM5MDFlMmZmNjU3MGI1YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmYiXegH2gAyNTM5MzUyMzkyOjFjZThlNDBlMjgxZjMxMDBjNzBiYzNiYzU0N2FkYTlmMzM3ZGZiYWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5a519858af458f3d5191b206c901e2ff6570b5b5", "committedDate": "2020-12-14T10:37:11Z", "message": "Propagate context in Spring SimpleAsyncTaskExecutor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDg4NTA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#pullrequestreview-552088506", "createdAt": "2020-12-15T04:00:55Z", "commit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMDo1NVrOIF30og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMDo1NVrOIF30og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyODM4Ng==", "bodyText": "Since this is protected on a public class, it's effectively not an internal API so seems like a great instrumentation point.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543028386", "createdAt": "2020-12-15T04:00:55Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SimpleAsyncTaskExecutorInstrumentation.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.ExecutorInstrumentationUtils;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.RunnableWrapper;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class SimpleAsyncTaskExecutorInstrumentation implements TypeInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.core.task.SimpleAsyncTaskExecutor\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isProtected())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTExMzQ3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#pullrequestreview-552111347", "createdAt": "2020-12-15T05:13:27Z", "commit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToxMzoyN1rOIF5RGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToxMzoyN1rOIF5RGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MjA1OA==", "bodyText": "Spring 2.0 was released in October 2006\n\nhttps://en.wikipedia.org/wiki/Spring_Framework\n\ud83d\ude02\ud83d\ude02\ud83d\ude02", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543052058", "createdAt": "2020-12-15T05:13:27Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-core'\n+    versions = \"[2.0,]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTI3NDQz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#pullrequestreview-552127443", "createdAt": "2020-12-15T05:57:53Z", "commit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1Nzo1M1rOIF6PLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNTo1OTozOVrOIF6R2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2Nzk1MQ==", "bodyText": "Do we need this inverse check?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543067951", "createdAt": "2020-12-15T05:57:53Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/spring-core-2.0-javaagent.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'org.springframework'\n+    module = 'spring-core'\n+    versions = \"[2.0,]\"\n+    assertInverse = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA2ODYzMg==", "bodyText": "Is it spring-core or something specific for executors?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1897#discussion_r543068632", "createdAt": "2020-12-15T05:59:39Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-core-2.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/core/SpringCoreInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.core;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.api.concurrent.State;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringCoreInstrumentationModule extends InstrumentationModule {\n+  public SpringCoreInstrumentationModule() {\n+    super(\"spring-core\", \"spring-core-2.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a519858af458f3d5191b206c901e2ff6570b5b5"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ce8e40e281f3100c70bc3bc547ada9f337dfbad", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1ce8e40e281f3100c70bc3bc547ada9f337dfbad", "committedDate": "2020-12-15T11:21:37Z", "message": "Propagate context in Spring SimpleAsyncTaskExecutor: code review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1981, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}