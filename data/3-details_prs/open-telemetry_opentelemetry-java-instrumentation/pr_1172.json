{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NTcyNTI3", "number": 1172, "title": "Support injecting resources into classloader and use it in aws-sdk-2.\u2026", "bodyText": "\u20262 instrumentation.\nThis adds support for instrumentation to \"inject\" resource files into classloaders. It does this by intercepting the getResource method on ClassLoader and have it read from the injected files, which are stored into the bootstrap classloader when applying instrumentation.", "createdAt": "2020-09-04T10:53:49Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172", "merged": true, "mergeCommit": {"oid": "a9f0e21bfe023ffa13bfd299ed3b904a846338bd"}, "closed": true, "closedAt": "2020-09-15T08:38:20Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFi-jMgH2gAyNDc5NTcyNTI3OjVlZWQ3YmZhMTdkNTUyNWI2ODI5MmY2ZTYxZjMwMjI0YjlkOGNjYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJCKymgFqTQ4ODM3NTcyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5eed7bfa17d5525b68292f6e61f30224b9d8cca6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5eed7bfa17d5525b68292f6e61f30224b9d8cca6", "committedDate": "2020-09-04T10:51:57Z", "message": "Support injecting resources into classloader and use it in aws-sdk-2.2 instrumentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTQyMjYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#pullrequestreview-485542261", "createdAt": "2020-09-10T03:36:29Z", "commit": {"oid": "5eed7bfa17d5525b68292f6e61f30224b9d8cca6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzozNjoyOVrOHPhtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzozNjoyOVrOHPhtdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0Mjk5OQ==", "bodyText": "BytesUtil class and its toByteArray method both need to be public b/c the advice is inlined, so it's really in a different package", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#discussion_r486042999", "createdAt": "2020-09-10T03:36:29Z", "author": {"login": "trask"}, "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/instrumentation/auto/javaclassloader/ResourceInjectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.javaclassloader;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.bootstrap.HelperResources;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Instruments {@link ClassLoader} to have calls to get resources intercepted and check our map of\n+ * helper resources that is filled by instrumentation when they need helpers.\n+ */\n+@AutoService(Instrumenter.class)\n+public class ResourceInjectionInstrumentation extends Instrumenter.Default {\n+\n+  public ResourceInjectionInstrumentation() {\n+    super(\"class-loader\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.instrumentation.auto.javaclassloader.BytesUtil\",\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod().and(named(\"getResource\")).and(takesArguments(String.class)),\n+        ResourceInjectionInstrumentation.class.getName() + \"$GetResourceAdvice\");\n+\n+    transformers.put(\n+        isMethod().and(named(\"getResources\")).and(takesArguments(String.class)),\n+        ResourceInjectionInstrumentation.class.getName() + \"$GetResourcesAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class GetResourceAdvice {\n+    @Advice.OnMethodExit(onThrowable = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ClassLoader classLoader,\n+        @Advice.Argument(0) String name,\n+        @Advice.Return(readOnly = false) URL resourceUrl) {\n+      if (resourceUrl != null) {\n+        // Give their classloader precedence.\n+        return;\n+      }\n+\n+      resourceUrl = HelperResources.load(classLoader, name);\n+    }\n+  }\n+\n+  public static class GetResourcesAdvice {\n+    @Advice.OnMethodExit(onThrowable = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ClassLoader classLoader,\n+        @Advice.Argument(0) String name,\n+        @Advice.Return(readOnly = false) Enumeration<URL> resources) {\n+      URL helper = HelperResources.load(classLoader, name);\n+      if (helper == null) {\n+        return;\n+      }\n+\n+      if (!resources.hasMoreElements()) {\n+        resources = Collections.enumeration(Collections.singleton(helper));\n+        return;\n+      }\n+\n+      // TODO(anuraaga): Don't inline BytesUtil.toByteArray after understanding AccessError when\n+      // trying to use the class from bootstrap classloader.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eed7bfa17d5525b68292f6e61f30224b9d8cca6"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a48e1424bef9ce6ed18ccb6c98d531ccdd5a589b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a48e1424bef9ce6ed18ccb6c98d531ccdd5a589b", "committedDate": "2020-09-14T02:47:35Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into support-injecting-resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ec48cbc4394ca2cfd402084c8c8f98540db104b", "committedDate": "2020-09-14T03:47:25Z", "message": "Use URL for duplication check instead of reading content and inject URLs directly instead of reading to byte array first."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NDA5ODQ1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#pullrequestreview-487409845", "createdAt": "2020-09-14T04:36:55Z", "commit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozNjo1NVrOHRDmfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozNjo1NVrOHRDmfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0Njg0NA==", "bodyText": "Without a smoke test, I'm actually a little worried this won't get shaded", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#discussion_r487646844", "createdAt": "2020-09-14T04:36:55Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/auto/src/main/java/io/opentelemetry/instrumentation/auto/awssdk/v2_2/AwsClientInstrumentation.java", "diffHunk": "@@ -17,72 +17,46 @@\n package io.opentelemetry.instrumentation.auto.awssdk.v2_2;\n \n import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n-import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n-import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n-import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n-import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n \n import com.google.auto.service.AutoService;\n import io.opentelemetry.javaagent.tooling.Instrumenter;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Map;\n-import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n-import software.amazon.awssdk.core.client.builder.SdkClientBuilder;\n \n-/** AWS SDK v2 instrumentation */\n+/**\n+ * Injects resource file with reference to our {@link TracingExecutionInterceptor} to allow SDK's\n+ * service loading mechanism to pick it up.\n+ */\n @AutoService(Instrumenter.class)\n-public final class AwsClientInstrumentation extends AbstractAwsClientInstrumentation {\n+public class AwsClientInstrumentation extends AbstractAwsClientInstrumentation {\n+  @Override\n+  public String[] helperResourceNames() {\n+    return new String[] {\n+      \"software/amazon/awssdk/global/handlers/execution.interceptors\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTUzMDc0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#pullrequestreview-487553074", "createdAt": "2020-09-14T08:57:44Z", "commit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e7e36f118cf698d1b8d664e27f02a651fb3b36c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e7e36f118cf698d1b8d664e27f02a651fb3b36c", "committedDate": "2020-09-14T09:07:13Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into support-injecting-resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d408cb6da7057c62c8098632596c3f94c477d3c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0d408cb6da7057c62c8098632596c3f94c477d3c", "committedDate": "2020-09-15T05:04:05Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into support-injecting-resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzMwNjA1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#pullrequestreview-488330605", "createdAt": "2020-09-15T05:15:13Z", "commit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxNToxM1rOHRw_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNToxOToxOFrOHRxD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MDU3Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#discussion_r488390577", "createdAt": "2020-09-15T05:15:13Z", "author": {"login": "trask"}, "path": "javaagent-bootstrap/src/main/java/io/opentelemetry/javaagent/bootstrap/HelperResources.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.bootstrap;\n+\n+import static io.opentelemetry.instrumentation.auto.api.WeakMap.Provider.newWeakMap;\n+\n+import io.opentelemetry.instrumentation.auto.api.WeakMap;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * A holder of resources needed by instrumentation. We store them in the bootstrap classloader so\n+ * instrumentation can store from the agent classloader and apps can retrieve from the app\n+ * classloader.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM5MTY0Nw==", "bodyText": "do we have a use case for this? this doesn't seem very auto-instrumentation-y to me (backing off if app already has a particular resource present)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#discussion_r488391647", "createdAt": "2020-09-15T05:19:18Z", "author": {"login": "trask"}, "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/instrumentation/auto/javaclassloader/ResourceInjectionInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.javaclassloader;\n+\n+import static io.opentelemetry.javaagent.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.bootstrap.HelperResources;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Instruments {@link ClassLoader} to have calls to get resources intercepted and check our map of\n+ * helper resources that is filled by instrumentation when they need helpers.\n+ */\n+@AutoService(Instrumenter.class)\n+public class ResourceInjectionInstrumentation extends Instrumenter.Default {\n+\n+  public ResourceInjectionInstrumentation() {\n+    super(\"class-loader\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod().and(named(\"getResource\")).and(takesArguments(String.class)),\n+        ResourceInjectionInstrumentation.class.getName() + \"$GetResourceAdvice\");\n+\n+    transformers.put(\n+        isMethod().and(named(\"getResources\")).and(takesArguments(String.class)),\n+        ResourceInjectionInstrumentation.class.getName() + \"$GetResourcesAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class GetResourceAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.This ClassLoader classLoader,\n+        @Advice.Argument(0) String name,\n+        @Advice.Return(readOnly = false) URL resourceUrl) {\n+      if (resourceUrl != null) {\n+        // Give their classloader precedence.\n+        return;\n+      }\n+\n+      resourceUrl = HelperResources.load(classLoader, name);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec48cbc4394ca2cfd402084c8c8f98540db104b"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb2adccee415f8b42b25e506d6b88fb24d21405", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cfb2adccee415f8b42b25e506d6b88fb24d21405", "committedDate": "2020-09-15T06:47:27Z", "message": "Remove getResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mzc1NzI4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1172#pullrequestreview-488375728", "createdAt": "2020-09-15T06:54:09Z", "commit": {"oid": "cfb2adccee415f8b42b25e506d6b88fb24d21405"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2564, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}