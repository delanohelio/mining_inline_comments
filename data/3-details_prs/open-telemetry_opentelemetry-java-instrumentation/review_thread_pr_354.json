{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTI2MDY4", "number": 354, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozMTo1MlrOD21d8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozNToyOFrOD21kKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI1NzEyOnYy", "diffSide": "RIGHT", "path": "instrumentation/jetty-8.0/src/test/groovy/JettyTestInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozMTo1MlrOGMxz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozNzo0NVrOGMyDPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1MjIxOA==", "bodyText": "Was this causing failures, or just simplifying things?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/354#discussion_r416052218", "createdAt": "2020-04-27T18:31:52Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/jetty-8.0/src/test/groovy/JettyTestInstrumentation.java", "diffHunk": "@@ -26,21 +26,7 @@\n   @Override\n   public AgentBuilder instrument(final AgentBuilder agentBuilder) {\n     return agentBuilder\n-        // Jetty 8.0\n-        .type(named(\"org.eclipse.jetty.server.HttpConnection\"))\n-        .transform(\n-            new AgentBuilder.Transformer.ForAdvice()\n-                .advice(\n-                    named(\"handleRequest\"), HttpServerTestAdvice.ServerEntryAdvice.class.getName()))\n-        // Jetty 8.?\n-        .type(named(\"org.eclipse.jetty.server.AbstractHttpConnection\"))\n-        .transform(\n-            new AgentBuilder.Transformer.ForAdvice()\n-                .advice(\n-                    named(\"headerComplete\"),\n-                    HttpServerTestAdvice.ServerEntryAdvice.class.getName()))\n-        // Jetty 9\n-        .type(named(\"org.eclipse.jetty.server.HttpChannel\"))\n+        .type(named(\"org.eclipse.jetty.server.Server\"))\n         .transform(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704a23affc5d8ade3ec9737ec59bfae8be5c6ac9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjEyNQ==", "bodyText": "when i removed the conditional on creating TEST_SPAN spans, the existing jetty instrumentation ended up creating 2 TEST_SPAN spans, because it was also called under async context handler", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/354#discussion_r416056125", "createdAt": "2020-04-27T18:37:45Z", "author": {"login": "trask"}, "path": "instrumentation/jetty-8.0/src/test/groovy/JettyTestInstrumentation.java", "diffHunk": "@@ -26,21 +26,7 @@\n   @Override\n   public AgentBuilder instrument(final AgentBuilder agentBuilder) {\n     return agentBuilder\n-        // Jetty 8.0\n-        .type(named(\"org.eclipse.jetty.server.HttpConnection\"))\n-        .transform(\n-            new AgentBuilder.Transformer.ForAdvice()\n-                .advice(\n-                    named(\"handleRequest\"), HttpServerTestAdvice.ServerEntryAdvice.class.getName()))\n-        // Jetty 8.?\n-        .type(named(\"org.eclipse.jetty.server.AbstractHttpConnection\"))\n-        .transform(\n-            new AgentBuilder.Transformer.ForAdvice()\n-                .advice(\n-                    named(\"headerComplete\"),\n-                    HttpServerTestAdvice.ServerEntryAdvice.class.getName()))\n-        // Jetty 9\n-        .type(named(\"org.eclipse.jetty.server.HttpChannel\"))\n+        .type(named(\"org.eclipse.jetty.server.Server\"))\n         .transform(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1MjIxOA=="}, "originalCommit": {"oid": "704a23affc5d8ade3ec9737ec59bfae8be5c6ac9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI3MzA3OnYy", "diffSide": "RIGHT", "path": "gradle/instrumentation.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozNToyOFrOGMx9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDoxM1rOGMyJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NDU4Nw==", "bodyText": "Is this still needed if we call addByteBuddyRawSetting early enough?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/354#discussion_r416054587", "createdAt": "2020-04-27T18:35:28Z", "author": {"login": "tylerbenson"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -13,6 +13,10 @@ byteBuddy {\n \n apply from: \"${rootDir}/gradle/java.gradle\"\n \n+tasks.withType(Test) {\n+  forkEvery = 1\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704a23affc5d8ade3ec9737ec59bfae8be5c6ac9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzY3OA==", "bodyText": "unfortunately, ya, net.bytebuddy.raw solved the Cannot resolve bounds of unresolved type variable, but didn't solve the Cannot resolve type description that i tried to resolve initially in #349, and ended up i think with better solution in this PR without having to ignore any failures", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/354#discussion_r416057678", "createdAt": "2020-04-27T18:40:13Z", "author": {"login": "trask"}, "path": "gradle/instrumentation.gradle", "diffHunk": "@@ -13,6 +13,10 @@ byteBuddy {\n \n apply from: \"${rootDir}/gradle/java.gradle\"\n \n+tasks.withType(Test) {\n+  forkEvery = 1\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NDU4Nw=="}, "originalCommit": {"oid": "704a23affc5d8ade3ec9737ec59bfae8be5c6ac9"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 539, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}