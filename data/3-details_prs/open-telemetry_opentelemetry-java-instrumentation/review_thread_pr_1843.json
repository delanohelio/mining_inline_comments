{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTE5ODc3", "number": 1843, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowM1rOFCEOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozNzowNlrOFF6Wzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEwNjk2OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowM1rOIBB7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowM1rOIBB7MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyNQ==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537951025", "createdAt": "2020-12-08T01:00:03Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer\n+            .spanBuilder(String.format(\"BatchJob %s.%s.Chunk\", jobName, stepName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzExNDg5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMjo1MVrOIBB_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMjo1MVrOIBB_oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537952160", "createdAt": "2020-12-08T01:02:51Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.JobExecution;\n+\n+public class JobExecutionTracer extends BaseTracer {\n+  private static final JobExecutionTracer TRACER = new JobExecutionTracer();\n+\n+  public static JobExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(JobExecution jobExecution) {\n+    String jobName = jobExecution.getJobInstance().getJobName();\n+    Span span = startSpan(String.format(\"BatchJob %s\", jobName), INTERNAL);\n+    return Context.current().with(span);\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzExNzU3OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMzo1NFrOIBCBKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMzo1NFrOIBCBKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537952555", "createdAt": "2020-12-08T01:03:54Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.StepExecution;\n+\n+public class StepExecutionTracer extends BaseTracer {\n+  private static final StepExecutionTracer TRACER = new StepExecutionTracer();\n+\n+  public static StepExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(StepExecution stepExecution) {\n+    String jobName = stepExecution.getJobExecution().getJobInstance().getJobName();\n+    String stepName = stepExecution.getStepName();\n+    Span span = startSpan(String.format(\"BatchJob %s.%s\", jobName, stepName), INTERNAL);\n+    return Context.current().with(span);\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEzNDg0OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMDoxNlrOIBCKnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMDoxNlrOIBCKnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NDk3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Iterable<String> instrumentationNames, String suffix, boolean defaultEnabled) {\n          \n          \n            \n                  Iterable<String> instrumentationNames, String suffix, boolean defaultValue) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537954973", "createdAt": "2020-12-08T01:10:16Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -133,12 +133,17 @@ public boolean getBooleanProperty(String name, boolean defaultValue) {\n \n   public boolean isInstrumentationEnabled(\n       Iterable<String> instrumentationNames, boolean defaultEnabled) {\n+    return getInstrumentationBooleanProperty(instrumentationNames, \"enabled\", defaultEnabled);\n+  }\n+\n+  public boolean getInstrumentationBooleanProperty(\n+      Iterable<String> instrumentationNames, String suffix, boolean defaultEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEzNTg4OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMDo0M1rOIBCLNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMDo0M1rOIBCLNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955124", "createdAt": "2020-12-08T01:10:43Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer\n+            .spanBuilder(String.format(\"BatchJob %s.%s.Chunk\", jobName, stepName))\n+            .setSpanKind(INTERNAL);\n+    if (shouldCreateRootSpanForChunk()) {\n+      linkParentSpan(spanBuilder);\n+    }\n+    Span span = spanBuilder.startSpan();\n+    return Context.current().with(span);\n+  }\n+\n+  private void linkParentSpan(SpanBuilder spanBuilder) {\n+    spanBuilder.setNoParent();\n+\n+    SpanContext parentSpanContext = Span.current().getSpanContext();\n+    if (parentSpanContext.isValid()) {\n+      spanBuilder.addLink(parentSpanContext);\n+    }\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  public void endExceptionally(Context context, Throwable throwable) {\n+    endExceptionally(Span.fromContext(context), throwable);\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEzNzc3OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMToyN1rOIBCMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMToyN1rOIBCMUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTQxMA==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955410", "createdAt": "2020-12-08T01:11:27Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.JobExecution;\n+\n+public class JobExecutionTracer extends BaseTracer {\n+  private static final JobExecutionTracer TRACER = new JobExecutionTracer();\n+\n+  public static JobExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(JobExecution jobExecution) {\n+    String jobName = jobExecution.getJobInstance().getJobName();\n+    Span span = startSpan(String.format(\"BatchJob %s\", jobName), INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzEzODM4OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMTo0MFrOIBCMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxMTo0MFrOIBCMpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTQ5Mg==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955492", "createdAt": "2020-12-08T01:11:40Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.StepExecution;\n+\n+public class StepExecutionTracer extends BaseTracer {\n+  private static final StepExecutionTracer TRACER = new StepExecutionTracer();\n+\n+  public static StepExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(StepExecution stepExecution) {\n+    String jobName = stepExecution.getJobExecution().getJobInstance().getJobName();\n+    String stepName = stepExecution.getStepName();\n+    Span span = startSpan(String.format(\"BatchJob %s.%s\", jobName, stepName), INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzE0NTM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxNDoyMlrOIBCQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxNDoyMlrOIBCQgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NjQ4Mw==", "bodyText": "would looking for a spring batch class here be more specific?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537956483", "createdAt": "2020-12-08T01:14:22Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.chunk.StepBuilderInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"javax.batch.api.Batchlet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQyNTQ4OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyNjowM1rOIE1zIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1MDo1NlrOIFO7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjY1OQ==", "bodyText": "Either this name or method's content is misleading. Name says about any boolean property. Content still talks about enablement and contains quite specific logic.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541946659", "createdAt": "2020-12-13T15:26:03Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -133,17 +133,22 @@ public boolean getBooleanProperty(String name, boolean defaultValue) {\n \n   public boolean isInstrumentationEnabled(\n       Iterable<String> instrumentationNames, boolean defaultEnabled) {\n+    return getInstrumentationBooleanProperty(instrumentationNames, \"enabled\", defaultEnabled);\n+  }\n+\n+  public boolean getInstrumentationBooleanProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1ODUyMA==", "bodyText": "True - since a boolean property is always about enabling/disabling something, I changed it to isInstrumentationPropertyEnabled", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542358520", "createdAt": "2020-12-14T12:50:56Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -133,17 +133,22 @@ public boolean getBooleanProperty(String name, boolean defaultValue) {\n \n   public boolean isInstrumentationEnabled(\n       Iterable<String> instrumentationNames, boolean defaultEnabled) {\n+    return getInstrumentationBooleanProperty(instrumentationNames, \"enabled\", defaultEnabled);\n+  }\n+\n+  public boolean getInstrumentationBooleanProperty(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjY1OQ=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQyOTkwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyODo1MlrOIE11OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTo1NjoyOFrOIFNHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzE5Mw==", "bodyText": "Looking at #1874, I think this should be disabled by default.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947193", "createdAt": "2020-12-13T15:28:52Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.List;\n+\n+public final class SpringBatchInstrumentationConfig {\n+  private static final List<String> INSTRUMENTATION_NAMES =\n+      unmodifiableList(asList(\"spring-batch\", \"spring-batch-3.0\"));\n+\n+  public static List<String> instrumentationNames() {\n+    return INSTRUMENTATION_NAMES;\n+  }\n+\n+  public static boolean isTracingEnabled(String type) {\n+    return Config.get()\n+        .getInstrumentationBooleanProperty(instrumentationNames(), type + \".enabled\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMyODY0OQ==", "bodyText": "Hm, I think that right now the whole instrumentations should be treated as experimental and turned off by default.\n(And regarding the isTracingEnabled() method: honestly I'm not sure that they're needed at all, there's a good chance that I'll remove them in some later PR.)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542328649", "createdAt": "2020-12-14T11:56:28Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.List;\n+\n+public final class SpringBatchInstrumentationConfig {\n+  private static final List<String> INSTRUMENTATION_NAMES =\n+      unmodifiableList(asList(\"spring-batch\", \"spring-batch-3.0\"));\n+\n+  public static List<String> instrumentationNames() {\n+    return INSTRUMENTATION_NAMES;\n+  }\n+\n+  public static boolean isTracingEnabled(String type) {\n+    return Config.get()\n+        .getInstrumentationBooleanProperty(instrumentationNames(), type + \".enabled\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzE5Mw=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQzMTg5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyOTo1NlrOIE12Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1MjowMVrOIFO-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQxMQ==", "bodyText": "Should we check if jobExecutionListeners already contains TracingJobExecutionListener?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947411", "createdAt": "2020-12-13T15:29:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)\n+          JobExecutionListener[] jobExecutionListeners) {\n+    ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+        InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+    JobExecutionListener tracingListener = new TracingJobExecutionListener(executionContextStore);\n+    if (jobExecutionListeners == null) {\n+      jobExecutionListeners = new JobExecutionListener[] {tracingListener};\n+    } else {\n+      JobExecutionListener[] newListeners =\n+          new JobExecutionListener[jobExecutionListeners.length + 1];\n+      newListeners[0] = tracingListener;\n+      System.arraycopy(jobExecutionListeners, 0, newListeners, 1, jobExecutionListeners.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1OTE5NQ==", "bodyText": "see #1843 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542359195", "createdAt": "2020-12-14T12:52:01Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)\n+          JobExecutionListener[] jobExecutionListeners) {\n+    ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+        InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+    JobExecutionListener tracingListener = new TracingJobExecutionListener(executionContextStore);\n+    if (jobExecutionListeners == null) {\n+      jobExecutionListeners = new JobExecutionListener[] {tracingListener};\n+    } else {\n+      JobExecutionListener[] newListeners =\n+          new JobExecutionListener[jobExecutionListeners.length + 1];\n+      newListeners[0] = tracingListener;\n+      System.arraycopy(jobExecutionListeners, 0, newListeners, 1, jobExecutionListeners.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQxMQ=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQzMjYxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNTozMDozMFrOIE12aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo0MzoyNlrOIFOqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQ5Ng==", "bodyText": "Should be protect against double adding?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947496", "createdAt": "2020-12-13T15:30:30Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+          InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+      properties.addJobExecutionListener(new TracingJobExecutionListener(executionContextStore));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3OTc5Mw==", "bodyText": "Yeah looks like we may need some InstrumentationContext to keep track. Can easily call enhance twice on different jobs I think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542079793", "createdAt": "2020-12-14T03:01:50Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+          InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+      properties.addJobExecutionListener(new TracingJobExecutionListener(executionContextStore));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQ5Ng=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM1NDExMw==", "bodyText": "Fortunately spring puts all listeners in a set sooner or later, so it's enough to just implement equals()/hashCode()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542354113", "createdAt": "2020-12-14T12:43:26Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+          InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+      properties.addJobExecutionListener(new TracingJobExecutionListener(executionContextStore));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQ5Ng=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDQzNDIyOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNTozMToyN1rOIE13GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjoyNToyNFrOIFODpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzY3Mw==", "bodyText": "What if factory created by JavaConfig?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947673", "createdAt": "2020-12-13T15:31:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0NDEwMA==", "bodyText": "It still works - I just left that comment to signify that this instrumentation covers XML config use case.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542344100", "createdAt": "2020-12-14T12:25:24Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzY3Mw=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTUzNjg0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo1NTowN1rOIE9zjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDoxNDozOFrOIFSaXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NzgzNw==", "bodyText": "I don't know if we follow the pattern in every instrumentation, but I do like the nested class pattern for advice - being close to the type matcher shows easily what the signature of the instrumented method is.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542077837", "createdAt": "2020-12-14T02:55:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQxNTQ1NQ==", "bodyText": "I think at some point I had 2 type instrumentations using the same advice, but that is no longer the point - I'll move it into the type instrumentation class. Thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542415455", "createdAt": "2020-12-14T14:14:38Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NzgzNw=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNTU0ODM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzowMDoxN1rOIE95kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNDoyOToyNlrOIFTIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3OTM3Ng==", "bodyText": "What happens if we use public API instead of field? I think we should always make an attempt to instrument with public API to prevent the inevitable testLatestDeps failure that will come in the future. If there is a reason that it's impossible, we need to add comments on what makes it impossible when falling back to private fields.\nI guess here we can call listener() instead of adding to the field?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542079376", "createdAt": "2020-12-14T03:00:17Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQyNzI4MQ==", "bodyText": "Very good point, done.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542427281", "createdAt": "2020-12-14T14:29:26Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3OTM3Ng=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTg5NTE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMzoyNlrOIF33xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo1NDo0M1rOIGMByQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTE5MQ==", "bodyText": "Do you want to instrument enhance instead of the exit of the constructor?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543029191", "createdAt": "2020-12-15T04:03:26Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3MjMwNw==", "bodyText": "Hmm, I don't really have a hard preference, but enhance() still seems like a proper instrumentation point for this. Is there any advantage of instrumenting the constructor that I might not be aware of?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543272307", "createdAt": "2020-12-15T11:41:39Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTE5MQ=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzODAxNg==", "bodyText": "I think the main point was it seems like enhance can be called multiple times, so constructor makes it easier to prevent dedupe. Also not sure if we want our listener to be in the beginning or end - if end is good, then enhance is better. I think we are able to pick which one here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543338016", "createdAt": "2020-12-15T13:25:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTE5MQ=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1OTQzMw==", "bodyText": "Ordering is defined by the Ordered interface which all listeners in this PR implement - in general, we want them as soon as possible. It doesn't really matter when we add the listener to the job/step, its order property is much more significant.\nNo duplication of tracing listeners is guaranteed by equals() & hashCode() methods.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543359433", "createdAt": "2020-12-15T13:54:43Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTE5MQ=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTkwMDc2OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowNTo0M1rOIF36ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo0NDoxNlrOIGG0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTk1NQ==", "bodyText": "Do you think we can avoid the private field access by\n\nInstrument constructor exit to call setJobExecutionListeners(empty_array)\nInstrument setJobExecutionListeners to add our listener to the provided array\n\n?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543029955", "createdAt": "2020-12-15T04:05:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config\n+    return named(\"org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean\")\n+        // JSR-352 XML config\n+        .or(named(\"org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"getObject\").and(isPublic()).and(takesArguments(0)),\n+        this.getClass().getName() + \"$GetObjectAdvice\");\n+  }\n+\n+  public static class GetObjectAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3NDAzNw==", "bodyText": "Hmm, that's a good idea, I won't have to access the field this way.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543274037", "createdAt": "2020-12-15T11:44:16Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config\n+    return named(\"org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean\")\n+        // JSR-352 XML config\n+        .or(named(\"org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"getObject\").and(isPublic()).and(takesArguments(0)),\n+        this.getClass().getName() + \"$GetObjectAdvice\");\n+  }\n+\n+  public static class GetObjectAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTk1NQ=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMTkwMjgzOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowNjozOVrOIF376Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTozMToyNFrOIGGVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzMDI0OQ==", "bodyText": "Do we need these weird equals/hashCode methods?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543030249", "createdAt": "2020-12-15T04:06:39Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.StepExecution;\n+import org.springframework.batch.core.StepExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingStepExecutionListener implements StepExecutionListener, Ordered {\n+  private final ContextStore<StepExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingStepExecutionListener(\n+      ContextStore<StepExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeStep(StepExecution stepExecution) {\n+    Context context = tracer().startSpan(stepExecution);\n+    Scope scope = context.makeCurrent();\n+    executionContextStore.put(stepExecution, new ContextAndScope(context, scope));\n+  }\n+\n+  @Override\n+  public ExitStatus afterStep(StepExecution stepExecution) {\n+    ContextAndScope contextAndScope = executionContextStore.get(stepExecution);\n+    if (contextAndScope != null) {\n+      executionContextStore.put(stepExecution, null);\n+      contextAndScope.closeScope();\n+      tracer().end(contextAndScope.getContext());\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return HIGHEST_PRECEDENCE;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2NjA2NQ==", "bodyText": "They guarantee that only one instance of job/step listener will be present in the ordered set of listeners that spring-batch uses. I'll add a comment explaining this because this is a bit unobvious.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543266065", "createdAt": "2020-12-15T11:31:24Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.StepExecution;\n+import org.springframework.batch.core.StepExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingStepExecutionListener implements StepExecutionListener, Ordered {\n+  private final ContextStore<StepExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingStepExecutionListener(\n+      ContextStore<StepExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeStep(StepExecution stepExecution) {\n+    Context context = tracer().startSpan(stepExecution);\n+    Scope scope = context.makeCurrent();\n+    executionContextStore.put(stepExecution, new ContextAndScope(context, scope));\n+  }\n+\n+  @Override\n+  public ExitStatus afterStep(StepExecution stepExecution) {\n+    ContextAndScope contextAndScope = executionContextStore.get(stepExecution);\n+    if (contextAndScope != null) {\n+      executionContextStore.put(stepExecution, null);\n+      contextAndScope.closeScope();\n+      tracer().end(contextAndScope.getContext());\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return HIGHEST_PRECEDENCE;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzMDI0OQ=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjQ4MDQwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozMzowMVrOIF8xsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzowNjoxM1rOIGWJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwOTU1NA==", "bodyText": "Why? Enabling specific instrumentation is totally OK, no?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543109554", "createdAt": "2020-12-15T07:33:01Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"org.springframework.batch.core.jsr.launch.JsrJobOperator\");\n+  }\n+\n+  @Override\n+  protected Map<String, String> contextStore() {\n+    Map<String, String> context = new HashMap<>();\n+    String contextAndScope =\n+        \"io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope\";\n+    context.put(\"org.springframework.batch.core.JobExecution\", contextAndScope);\n+    context.put(\"org.springframework.batch.core.StepExecution\", contextAndScope);\n+    return context;\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    List<TypeInstrumentation> instrumentations = new ArrayList<>();\n+    if (isTracingEnabled(\"job\")) {\n+      instrumentations.add(new JobBuilderHelperInstrumentation());\n+      instrumentations.add(new JobFactoryBeanInstrumentation());\n+    }\n+    if (isTracingEnabled(\"step\")) {\n+      instrumentations.add(new StepBuilderHelperInstrumentation());\n+    }\n+    return instrumentations;\n+  }\n+\n+  protected boolean defaultEnabled() {\n+    // TODO: replace this with an experimental flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI2MjU1Mg==", "bodyText": "Hmm, I vaguely remembered that we're going to have a global experimental flag that enables all experimental features - I might be mistaken though, maybe I remember it wrong.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543262552", "createdAt": "2020-12-15T11:25:35Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"org.springframework.batch.core.jsr.launch.JsrJobOperator\");\n+  }\n+\n+  @Override\n+  protected Map<String, String> contextStore() {\n+    Map<String, String> context = new HashMap<>();\n+    String contextAndScope =\n+        \"io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope\";\n+    context.put(\"org.springframework.batch.core.JobExecution\", contextAndScope);\n+    context.put(\"org.springframework.batch.core.StepExecution\", contextAndScope);\n+    return context;\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    List<TypeInstrumentation> instrumentations = new ArrayList<>();\n+    if (isTracingEnabled(\"job\")) {\n+      instrumentations.add(new JobBuilderHelperInstrumentation());\n+      instrumentations.add(new JobFactoryBeanInstrumentation());\n+    }\n+    if (isTracingEnabled(\"step\")) {\n+      instrumentations.add(new StepBuilderHelperInstrumentation());\n+    }\n+    return instrumentations;\n+  }\n+\n+  protected boolean defaultEnabled() {\n+    // TODO: replace this with an experimental flag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwOTU1NA=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyNTEyOA==", "bodyText": "Indeed, we have this idea...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543525128", "createdAt": "2020-12-15T17:06:13Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"org.springframework.batch.core.jsr.launch.JsrJobOperator\");\n+  }\n+\n+  @Override\n+  protected Map<String, String> contextStore() {\n+    Map<String, String> context = new HashMap<>();\n+    String contextAndScope =\n+        \"io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope\";\n+    context.put(\"org.springframework.batch.core.JobExecution\", contextAndScope);\n+    context.put(\"org.springframework.batch.core.StepExecution\", contextAndScope);\n+    return context;\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    List<TypeInstrumentation> instrumentations = new ArrayList<>();\n+    if (isTracingEnabled(\"job\")) {\n+      instrumentations.add(new JobBuilderHelperInstrumentation());\n+      instrumentations.add(new JobFactoryBeanInstrumentation());\n+    }\n+    if (isTracingEnabled(\"step\")) {\n+      instrumentations.add(new StepBuilderHelperInstrumentation());\n+    }\n+    return instrumentations;\n+  }\n+\n+  protected boolean defaultEnabled() {\n+    // TODO: replace this with an experimental flag", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwOTU1NA=="}, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjQ4Nzc5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNTowNlrOIF815w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNTowNlrOIF815w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMDYzMQ==", "bodyText": "If equals compare classes, shouldn't we do getClass().hashCode() here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543110631", "createdAt": "2020-12-15T07:35:06Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingJobExecutionListener implements JobExecutionListener, Ordered {\n+  private final ContextStore<JobExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingJobExecutionListener(\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeJob(JobExecution jobExecution) {\n+    Context context = tracer().startSpan(jobExecution);\n+    Scope scope = context.makeCurrent();\n+    executionContextStore.put(jobExecution, new ContextAndScope(context, scope));\n+  }\n+\n+  @Override\n+  public void afterJob(JobExecution jobExecution) {\n+    ContextAndScope contextAndScope = executionContextStore.get(jobExecution);\n+    if (contextAndScope != null) {\n+      executionContextStore.put(jobExecution, null);\n+      contextAndScope.closeScope();\n+      tracer().end(contextAndScope.getContext());\n+    }\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return HIGHEST_PRECEDENCE;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    return o != null && getClass() == o.getClass();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzM5OTcwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjoyOTo1M1rOIGpcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjoyOTo1M1rOIGpcsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MTQ1Nw==", "bodyText": "took me a few min to understand this, worth a comment\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  jobFactory.setJobExecutionListeners(new Object[] {});\n          \n          \n            \n                  // this will trigger the advice below, which will make sure that the tracing listener is registered\n          \n          \n            \n                  // even if the application never calls setJobExecutionListeners() directly\n          \n          \n            \n                  jobFactory.setJobExecutionListeners(new Object[] {});", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543841457", "createdAt": "2020-12-16T02:29:53Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isArray;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // JSR-352 XML config\n+    return named(\"org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), this.getClass().getName() + \"$InitAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"setJobExecutionListeners\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, isArray())),\n+        this.getClass().getName() + \"$SetListenersAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class InitAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(@Advice.This JobFactoryBean jobFactory) {\n+      jobFactory.setJobExecutionListeners(new Object[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzQwNzYxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobParserJobFactoryBeanInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozMTo0MVrOIGph1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozMTo0MVrOIGph1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0Mjc3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});\n          \n          \n            \n                  // this will trigger the advice below, which will make sure that the tracing listener is registered\n          \n          \n            \n                  // even if the application never calls setJobExecutionListeners() directly\n          \n          \n            \n                  jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543842774", "createdAt": "2020-12-16T02:31:41Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobParserJobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isArray;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean;\n+\n+public class JobParserJobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config\n+    return named(\"org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), this.getClass().getName() + \"$InitAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"setJobExecutionListeners\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, isArray())),\n+        this.getClass().getName() + \"$SetListenersAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class InitAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(@Advice.This JobParserJobFactoryBean jobFactory) {\n+      jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzQxNDY5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozMzoxM1rOIGpmRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0MTowMlrOIG-4AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MzkxMA==", "bodyText": "is before/after always synchronous? if so, a comment about that will help future readers not worry about context leaking here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543843910", "createdAt": "2020-12-16T02:33:13Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingJobExecutionListener implements JobExecutionListener, Ordered {\n+  private final ContextStore<JobExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingJobExecutionListener(\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeJob(JobExecution jobExecution) {\n+    Context context = tracer().startSpan(jobExecution);\n+    Scope scope = context.makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5MjUxMw==", "bodyText": "I'm 99.99% sure that it's always synchronous -- I'll add the comment.\nAnd FYI: right now I'm testing all major spring batch features (wait for PRs \ud83d\ude04 ) so I'm definitely going to cover all multithreading/async scenarios.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r544192513", "createdAt": "2020-12-16T10:41:02Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingJobExecutionListener implements JobExecutionListener, Ordered {\n+  private final ContextStore<JobExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingJobExecutionListener(\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeJob(JobExecution jobExecution) {\n+    Context context = tracer().startSpan(jobExecution);\n+    Scope scope = context.makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MzkxMA=="}, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNzQzMzEwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozNzowNlrOIGpx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozNzowNlrOIGpx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0NjkxMA==", "bodyText": "same question about synchronous guarantee? for cautionary tale see \n  \n    \n      opentelemetry-java-instrumentation/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n    \n    \n        Lines 87 to 93\n      in\n      49c2a36\n    \n    \n    \n    \n\n        \n          \n           if (executionAttributes \n        \n\n        \n          \n               .getAttribute(SdkExecutionAttribute.CLIENT_TYPE) \n        \n\n        \n          \n               .equals(ClientType.SYNC)) { \n        \n\n        \n          \n             // We can only activate context for synchronous clients, which allows downstream \n        \n\n        \n          \n             // instrumentation like Apache to know about the SDK span. \n        \n\n        \n          \n             executionAttributes.putAttribute(SCOPE_ATTRIBUTE, otelContext.makeCurrent()); \n        \n\n        \n          \n           }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543846910", "createdAt": "2020-12-16T02:37:06Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.StepExecution;\n+import org.springframework.batch.core.StepExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingStepExecutionListener implements StepExecutionListener, Ordered {\n+  private final ContextStore<StepExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingStepExecutionListener(\n+      ContextStore<StepExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeStep(StepExecution stepExecution) {\n+    Context context = tracer().startSpan(stepExecution);\n+    Scope scope = context.makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4503, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}