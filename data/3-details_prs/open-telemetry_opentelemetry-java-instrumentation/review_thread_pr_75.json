{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDQzODk0", "number": 75, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1OTo1NFrODZootw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MTowOFrODZ-Ksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA2Nzc1OnYy", "diffSide": "LEFT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1OTo1NFrOFgInrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDo1OTo1NFrOFgInrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzOTk4Mw==", "bodyText": "Can you check your Intellij formatting settings?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369239983", "createdAt": "2020-01-21T20:59:54Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoInstrumentation.java", "diffHunk": "@@ -10,13 +18,6 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n-import io.opentelemetry.auto.tooling.Instrumenter;\n-import java.util.Map;\n-import net.bytebuddy.description.method.MethodDescription;\n-import net.bytebuddy.description.type.TypeDescription;\n-import net.bytebuddy.matcher.ElementMatcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA3MTgwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowMToyM1rOFgIqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowMToyM1rOFgIqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MDYwNQ==", "bodyText": "Can you check your Intellij formatting settings?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369240605", "createdAt": "2020-01-21T21:01:23Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -1,12 +1,12 @@\n package io.opentelemetry.auto.instrumentation.reactor.core;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import reactor.core.CoreSubscriber;\n \n+import static io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreDecorator.TRACER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA4MDI4OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDoxN1rOFgIvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDoxN1rOFgIvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MTg5Nw==", "bodyText": "getScope() is never null here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369241897", "createdAt": "2020-01-21T21:04:17Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -18,26 +18,26 @@\n public class FluxAndMonoSubscribeAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(\n+  public static SpanScopePair methodEnter(\n       @Advice.Argument(0) final CoreSubscriber subscriber, @Advice.This final Object thiz) {\n-    final AgentSpan span =\n+    final Span span =\n         subscriber\n             .currentContext()\n             .getOrDefault(ReactorCoreAdviceUtils.PUBLISHER_CONTEXT_KEY, null);\n     if (span != null) {\n-      return activateSpan(span, false);\n+      return new SpanScopePair(span, TRACER.withSpan(span));\n     }\n     return null;\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void methodExit(\n-      @Advice.Enter final AgentScope scope, @Advice.Thrown final Throwable throwable) {\n+      @Advice.Enter final SpanScopePair scope, @Advice.Thrown final Throwable throwable) {\n     if (throwable != null) {\n-      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.span(), throwable);\n+      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.getSpan(), throwable);\n     }\n-    if (scope != null) {\n-      scope.close();\n+    if (scope != null && scope.getScope() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA4MTg0OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDo0OVrOFgIwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTowNDo0OVrOFgIwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0MjE0OA==", "bodyText": "Can you check your Intellij formatting settings?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369242148", "createdAt": "2020-01-21T21:04:49Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "diffHunk": "@@ -12,18 +10,23 @@\n import reactor.core.publisher.Mono;\n import reactor.util.context.Context;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreDecorator.DECORATE;\n+import static reactor.core.publisher.Operators.lift;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjA5OTYxOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMTo0NlrOFgI7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjozNzoxN1rOFgansA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTExMA==", "bodyText": "Not needed with above change", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369245110", "createdAt": "2020-01-21T21:11:46Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreDecorator.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.opentelemetry.auto.instrumentation.reactor.core;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.api.SpanTypes;\n+import io.opentelemetry.auto.decorator.BaseDecorator;\n+import io.opentelemetry.trace.Tracer;\n+\n+public class ReactorCoreDecorator extends BaseDecorator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzNDg5Ng==", "bodyText": "The ReactorCoreDecoratorended up being needed anyway, since other parts of the code were referring to the Tracer and putting it in the decorator avoids muzzling problems.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369534896", "createdAt": "2020-01-22T12:37:17Z", "author": {"login": "prydin"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreDecorator.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package io.opentelemetry.auto.instrumentation.reactor.core;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.api.SpanTypes;\n+import io.opentelemetry.auto.decorator.BaseDecorator;\n+import io.opentelemetry.trace.Tracer;\n+\n+public class ReactorCoreDecorator extends BaseDecorator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTExMA=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEwMDYwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMjoxMlrOFgI8XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxMjoxMlrOFgI8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NTI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DECORATE.addThrowable(span, throwable);\n          \n          \n            \n                    BaseDecorator.addThrowable(span, throwable);\n          \n      \n    \n    \n  \n\nand then decorator is not needed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369245277", "createdAt": "2020-01-21T21:12:12Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/ReactorCoreAdviceUtils.java", "diffHunk": "@@ -39,16 +42,16 @@\n   }\n \n   public static void finishSpanIfPresent(final Context context, final Throwable throwable) {\n-    finishSpanIfPresent(context.getOrDefault(PUBLISHER_CONTEXT_KEY, (AgentSpan) null), throwable);\n+    finishSpanIfPresent(context.getOrDefault(PUBLISHER_CONTEXT_KEY, (Span) null), throwable);\n   }\n \n-  public static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+  public static void finishSpanIfPresent(final Span span, final Throwable throwable) {\n     if (span != null) {\n       if (throwable != null) {\n-        span.setError(true);\n-        span.addThrowable(throwable);\n+        span.setStatus(Status.UNKNOWN);\n+        DECORATE.addThrowable(span, throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEwNjg4OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNDo0NlrOFgJAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1NTo0MVrOFgnQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NjMxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369246314", "createdAt": "2020-01-21T21:14:46Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -24,13 +23,14 @@\n public class Servlet2Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n+  public static SpanScopePair onEnter(\n       @Advice.This final Object servlet,\n       @Advice.Argument(0) final ServletRequest request,\n       @Advice.Argument(value = 1, readOnly = false, typing = Assigner.Typing.DYNAMIC)\n           ServletResponse response) {\n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MTg5NQ==", "bodyText": "\u2b06\ufe0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369741895", "createdAt": "2020-01-22T18:55:41Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -24,13 +23,14 @@\n public class Servlet2Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n+  public static SpanScopePair onEnter(\n       @Advice.This final Object servlet,\n       @Advice.Argument(0) final ServletRequest request,\n       @Advice.Argument(value = 1, readOnly = false, typing = Assigner.Typing.DYNAMIC)\n           ServletResponse response) {\n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NjMxNA=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjExMzQzOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzoyMVrOFgJE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzoyMVrOFgJE4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzQ1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  System.out.println(\"---------------------- Span attr: \" + spanAttr);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247458", "createdAt": "2020-01-21T21:17:21Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjExNDE0OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzozOVrOFgJFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzozOVrOFgJFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.println(\"------------------- Request: \" + request);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247584", "createdAt": "2020-01-21T21:17:39Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);\n+      if (spanAttr instanceof Span) {\n         request.removeAttribute(SPAN_ATTRIBUTE);\n-        final AgentSpan span = (AgentSpan) spanAttr;\n+        final Span span = (Span) spanAttr;\n         // Override propagation headers by injecting attributes from the current span\n         // into the new request\n+        System.out.println(\"------------------- Request: \" + request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjExNDQ5OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzo0OFrOFgJFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxNzo0OFrOFgJFoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0NzY0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      System.out.println(\"------------ Injecting attributes\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369247648", "createdAt": "2020-01-21T21:17:48Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/AsyncContextInstrumentation.java", "diffHunk": "@@ -65,13 +70,18 @@ public static boolean enter(\n \n       final ServletRequest request = context.getRequest();\n       final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof AgentSpan) {\n+      System.out.println(\"---------------------- Span attr: \" + spanAttr);\n+      if (spanAttr instanceof Span) {\n         request.removeAttribute(SPAN_ATTRIBUTE);\n-        final AgentSpan span = (AgentSpan) spanAttr;\n+        final Span span = (Span) spanAttr;\n         // Override propagation headers by injecting attributes from the current span\n         // into the new request\n+        System.out.println(\"------------------- Request: \" + request);\n         if (request instanceof HttpServletRequest) {\n-          propagate().inject(span, (HttpServletRequest) request, SETTER);\n+          Servlet3Decorator.TRACER\n+              .getHttpTextFormat()\n+              .inject(span.getContext(), (HttpServletRequest) request, SETTER);\n+          System.out.println(\"------------ Injecting attributes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjExODU2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxOToyOFrOFgJIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToxOToyOFrOFgJIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0ODM3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369248378", "createdAt": "2020-01-21T21:19:28Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEyMTIzOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyMDozMFrOFgJKHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyMDozMFrOFgJKHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0ODc5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                new Exception().printStackTrace();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369248798", "createdAt": "2020-01-21T21:20:30Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();\n+    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof Span;\n \n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n     final boolean invalidRequest = !(request instanceof HttpServletRequest);\n     if (invalidRequest || (hasActiveTrace && hasServletTrace)) {\n       // Tracing might already be applied by the FilterChain.  If so ignore this.\n       return null;\n     }\n \n+    new Exception().printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEyMzkzOnYy", "diffSide": "LEFT", "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyMTozMFrOFgJLuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjoxNToyN1rOFgOyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0OTIwOQ==", "bodyText": "Accidentally removed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369249209", "createdAt": "2020-01-21T21:21:30Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();\n+    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof Span;\n \n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n     final boolean invalidRequest = !(request instanceof HttpServletRequest);\n     if (invalidRequest || (hasActiveTrace && hasServletTrace)) {\n       // Tracing might already be applied by the FilterChain.  If so ignore this.\n       return null;\n     }\n \n+    new Exception().printStackTrace();\n     final HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    final Span.Builder builder = TRACER.spanBuilder(\"servlet.request\");\n+    try {\n+      final SpanContext extractedContext =\n+          TRACER.getHttpTextFormat().extract((HttpServletRequest) request, GETTER);\n+      builder.setParent(extractedContext);\n+    } catch (final IllegalArgumentException e) {\n+      // Couldn't extract a context. We should treat this as a root span. '\n+      builder.setNoParent();\n+    }\n \n-    // For use by HttpServletResponseInstrumentation:\n-    InstrumentationContext.get(HttpServletResponse.class, HttpServletRequest.class)\n-        .put((HttpServletResponse) response, httpServletRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MDk4MA==", "bodyText": "Looks like a merging mistake.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369340980", "createdAt": "2020-01-22T02:15:27Z", "author": {"login": "prydin"}, "path": "java-agent/instrumentation/servlet/request-3/src/main/java/io/opentelemetry/auto/instrumentation/servlet3/Servlet3Advice.java", "diffHunk": "@@ -24,52 +22,54 @@\n public class Servlet3Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n-      @Advice.This final Object servlet,\n-      @Advice.Argument(0) final ServletRequest request,\n-      @Advice.Argument(1) final ServletResponse response) {\n+  public static SpanScopePair onEnter(\n+      @Advice.This final Object servlet, @Advice.Argument(0) final ServletRequest request) {\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();\n+    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof Span;\n \n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n     final boolean invalidRequest = !(request instanceof HttpServletRequest);\n     if (invalidRequest || (hasActiveTrace && hasServletTrace)) {\n       // Tracing might already be applied by the FilterChain.  If so ignore this.\n       return null;\n     }\n \n+    new Exception().printStackTrace();\n     final HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+    final Span.Builder builder = TRACER.spanBuilder(\"servlet.request\");\n+    try {\n+      final SpanContext extractedContext =\n+          TRACER.getHttpTextFormat().extract((HttpServletRequest) request, GETTER);\n+      builder.setParent(extractedContext);\n+    } catch (final IllegalArgumentException e) {\n+      // Couldn't extract a context. We should treat this as a root span. '\n+      builder.setNoParent();\n+    }\n \n-    // For use by HttpServletResponseInstrumentation:\n-    InstrumentationContext.get(HttpServletResponse.class, HttpServletRequest.class)\n-        .put((HttpServletResponse) response, httpServletRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI0OTIwOQ=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEzMjc5OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/filter/FilterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNDozOFrOFgJRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNDozOFrOFgJRBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MDU2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369250566", "createdAt": "2020-01-21T21:24:38Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/filter/FilterInstrumentation.java", "diffHunk": "@@ -59,30 +57,32 @@ public boolean defaultEnabled() {\n   public static class FilterAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope start(@Advice.This final Filter filter) {\n-      if (activeSpan() == null) {\n+    public static SpanScopePair start(@Advice.This final Filter filter) {\n+      if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEzNTAyOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/http/HttpServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNToyOVrOFgJSdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNToyOVrOFgJSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MDkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369250935", "createdAt": "2020-01-21T21:25:29Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/http/HttpServletInstrumentation.java", "diffHunk": "@@ -67,31 +65,33 @@ public boolean defaultEnabled() {\n   public static class HttpServletAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope start(@Advice.Origin final Method method) {\n+    public static SpanScopePair start(@Advice.Origin final Method method) {\n \n-      if (activeSpan() == null) {\n+      if (TRACER.getCurrentSpan() == null || !TRACER.getCurrentSpan().getContext().isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjEzOTY3OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNzowNlrOFgJVSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNzowNlrOFgJVSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTY1Nw==", "bodyText": "Check Intellij settings", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369251657", "createdAt": "2020-01-21T21:27:06Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -1,20 +1,24 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n+import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.decorator.HttpClientDecorator;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.net.URI;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n \n+import java.net.URI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE0MDYxOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNzoyNlrOFgJV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMToyNzoyNlrOFgJV2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1MTgwMA==", "bodyText": "Check Intellij settings", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369251800", "createdAt": "2020-01-21T21:27:26Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -1,22 +1,19 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.propagate;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import io.opentelemetry.auto.instrumentation.api.AgentTracer;\n import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import org.springframework.web.reactive.function.client.ExchangeFunction;\n import reactor.core.CoreSubscriber;\n import reactor.core.publisher.Mono;\n import reactor.util.context.Context;\n \n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.HttpHeadersInjectAdapter.SETTER;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE1NTcyOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozMjo0OFrOFgJfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjoyNjowMFrOFgO6vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDIwNw==", "bodyText": "Not needed if TRACER::getCurrentSpan is used below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369254207", "createdAt": "2020-01-21T21:32:48Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0MzE2NA==", "bodyText": "I was planning for that method to do more but ended up not needing it...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369343164", "createdAt": "2020-01-22T02:26:00Z", "author": {"login": "prydin"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDIwNw=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE1Njk3OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozMzoxMVrOFgJgBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozMzoxMVrOFgJgBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NDQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);\n          \n          \n            \n                    context.<Span>getOrEmpty(Span.class).orElseGet(TRACER::getCurrentSpan);\n          \n      \n    \n    \n  \n\nthen static method above is not needed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369254404", "createdAt": "2020-01-21T21:33:11Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan =\n+        context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE2NDQ1OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjowN1rOFgJksQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjowN1rOFgJksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  builder.setNoParent(); // TODO: Should we explicitly remove the parent here?\n          \n      \n    \n    \n  \n\nI don't think so, since this is a client request", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369255601", "createdAt": "2020-01-21T21:36:07Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -28,26 +25,33 @@ public TracingClientResponseMono(\n     this.exchangeFunction = exchangeFunction;\n   }\n \n+  private static Span getCurrentSpan() {\n+    return TRACER.getCurrentSpan();\n+  }\n+\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan =\n+        context.<Span>getOrEmpty(Span.class).orElseGet(TracingClientResponseMono::getCurrentSpan);\n \n-    final AgentSpan span;\n+    final Span.Builder builder = TRACER.spanBuilder(\"http.request\");\n     if (parentSpan != null) {\n-      span = startSpan(\"http.request\", parentSpan.context());\n+      builder.setParent(parentSpan);\n     } else {\n-      span = startSpan(\"http.request\");\n+      builder.setNoParent(); // TODO: Should we explicitly remove the parent here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE2NjQxOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjo0NlrOFgJl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozNjo0NlrOFgJl2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NTg5Ng==", "bodyText": "Check Intellij settings", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369255896", "createdAt": "2020-01-21T21:36:46Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -1,56 +1,60 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.noopSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.util.concurrent.atomic.AtomicReference;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n import org.reactivestreams.Subscription;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3NDQ4OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozOTo0NVrOFgJq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjozNTo0NVrOFgPCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzE3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257177", "createdAt": "2020-01-21T21:39:45Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NTE0NA==", "bodyText": "Yikes! Good catch!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369345144", "createdAt": "2020-01-22T02:35:45Z", "author": {"login": "prydin"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzE3Nw=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3NTA5OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTozOTo1OVrOFgJrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMTo1MVrOFgncrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257268", "createdAt": "2020-01-21T21:39:59Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NTA3MA==", "bodyText": "\u2b06\ufe0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369745070", "createdAt": "2020-01-22T19:01:51Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzI2OA=="}, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3NTY2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MDoxMlrOFgJrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MDoxMlrOFgJrkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1NzM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257362", "createdAt": "2020-01-21T21:40:12Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +64,51 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {\n \n       subscriber.onError(throwable);\n     }\n   }\n \n   @Override\n   public void onComplete() {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3ODYwOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MToxOVrOFgJtjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MToxOVrOFgJtjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1Nzg3MA==", "bodyText": "Yes, I believe this is the correct translation to mimic existing behavior", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369257870", "createdAt": "2020-01-21T21:41:19Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -1,56 +1,60 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.client;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.noopSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n-import java.util.concurrent.atomic.AtomicReference;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n import org.reactivestreams.Subscription;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n import reactor.core.CoreSubscriber;\n import reactor.util.context.Context;\n \n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.client.SpringWebfluxHttpClientDecorator.TRACER;\n+\n public class TracingClientResponseSubscriber implements CoreSubscriber<ClientResponse> {\n \n   private final CoreSubscriber<? super ClientResponse> subscriber;\n   private final ClientRequest clientRequest;\n   private final Context context;\n-  private final AtomicReference<AgentSpan> spanRef;\n-  private final AgentSpan parentSpan;\n+  private final AtomicReference<Span> spanRef;\n+  private final Span parentSpan;\n \n   public TracingClientResponseSubscriber(\n       final CoreSubscriber<? super ClientResponse> subscriber,\n       final ClientRequest clientRequest,\n       final Context context,\n-      final AgentSpan span,\n-      final AgentSpan parentSpan) {\n+      final Span span,\n+      final Span parentSpan) {\n     this.subscriber = subscriber;\n     this.clientRequest = clientRequest;\n     this.context = context;\n     spanRef = new AtomicReference<>(span);\n-    this.parentSpan = parentSpan == null ? noopSpan() : parentSpan;\n+    this.parentSpan =\n+        parentSpan == null\n+            ? DefaultSpan.getInvalid()\n+            : parentSpan; // TODO: Should we use DefaultSpan here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE3OTQ2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MTo0M1rOFgJuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MTo0M1rOFgJuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODA0MA==", "bodyText": "Check Intellij settings", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369258040", "createdAt": "2020-01-21T21:41:43Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -1,57 +1,56 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.server;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activeSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n import io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreAdviceUtils;\n-import java.util.function.Function;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import org.reactivestreams.Publisher;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.TRACER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE4MTA3OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MjoxOVrOFgJvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0MjoxOVrOFgJvVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1ODMyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (parentSpan != null && parentSpan.getContext().isValid()) {\n          \n          \n            \n                if (parentSpan.getContext().isValid()) {\n          \n      \n    \n    \n  \n\nTRACER.getCurrentSpan() never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369258324", "createdAt": "2020-01-21T21:42:19Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -1,57 +1,56 @@\n package io.opentelemetry.auto.instrumentation.springwebflux.server;\n \n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activateSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.activeSpan;\n-import static io.opentelemetry.auto.instrumentation.api.AgentTracer.startSpan;\n-import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n-\n-import io.opentelemetry.auto.instrumentation.api.AgentScope;\n-import io.opentelemetry.auto.instrumentation.api.AgentSpan;\n+import io.opentelemetry.auto.instrumentation.api.SpanScopePair;\n import io.opentelemetry.auto.instrumentation.reactor.core.ReactorCoreAdviceUtils;\n-import java.util.function.Function;\n+import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n import org.reactivestreams.Publisher;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n \n+import java.util.function.Function;\n+\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.springwebflux.server.SpringWebfluxHttpServerDecorator.TRACER;\n+\n /**\n  * This is 'top level' advice for Webflux instrumentation. This handles creating and finishing\n  * Webflux span.\n  */\n public class DispatcherHandlerAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n+  public static SpanScopePair methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n     // Unfortunately Netty EventLoop is not instrumented well enough to attribute all work to the\n     // right things so we have to store span in request itself. We also store parent (netty's) span\n     // so we could update resource name.\n-    final AgentSpan parentSpan = activeSpan();\n-    if (parentSpan != null) {\n+    final Span parentSpan = TRACER.getCurrentSpan();\n+    if (parentSpan != null && parentSpan.getContext().isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE5MDA3OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0NTo0MVrOFgJ04A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0NTo0MVrOFgJ04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1OTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (span != null && exception != null) {\n          \n          \n            \n                  if (span.getContext().isValid() && exception != null) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369259744", "createdAt": "2020-01-21T21:45:41Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,13 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n+      final Span span = TRACER.getCurrentSpan();\n       if (span != null && exception != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjE5OTc1OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0ODo1NlrOFgJ6tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0ODo1NlrOFgJ6tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTIzNw==", "bodyText": "Remove", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369261237", "createdAt": "2020-01-21T21:48:56Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -63,39 +62,45 @@ public HandlerAdapterInstrumentation() {\n   }\n \n   public static class ControllerAdvice {\n-\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope nameResourceAndStartSpan(\n+    public static SpanScopePair nameResourceAndStartSpan(\n         @Advice.Argument(0) final HttpServletRequest request,\n         @Advice.Argument(2) final Object handler) {\n       // Name the parent span based on the matching pattern\n       final Object parentSpan = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (parentSpan instanceof AgentSpan) {\n-        DECORATE.onRequest((AgentSpan) parentSpan, request);\n+      System.out.println(\"++++++++++++++++++++++++++++ Attribute names: \");\n+      for (final Enumeration<String> e = request.getAttributeNames(); e.hasMoreElements(); ) {\n+        final String s = e.nextElement();\n+        System.out.println(s + \" \" + request.getAttribute(s));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjIwMDc1OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0OToyNFrOFgJ7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo0OToyNFrOFgJ7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MTQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (TRACER.getCurrentSpan() == null) {\n          \n          \n            \n                  if (!TRACER.getCurrentSpan().isValid()) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369261430", "createdAt": "2020-01-21T21:49:24Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -63,39 +62,45 @@ public HandlerAdapterInstrumentation() {\n   }\n \n   public static class ControllerAdvice {\n-\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static AgentScope nameResourceAndStartSpan(\n+    public static SpanScopePair nameResourceAndStartSpan(\n         @Advice.Argument(0) final HttpServletRequest request,\n         @Advice.Argument(2) final Object handler) {\n       // Name the parent span based on the matching pattern\n       final Object parentSpan = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (parentSpan instanceof AgentSpan) {\n-        DECORATE.onRequest((AgentSpan) parentSpan, request);\n+      System.out.println(\"++++++++++++++++++++++++++++ Attribute names: \");\n+      for (final Enumeration<String> e = request.getAttributeNames(); e.hasMoreElements(); ) {\n+        final String s = e.nextElement();\n+        System.out.println(s + \" \" + request.getAttribute(s));\n+      }\n+      if (parentSpan instanceof Span) {\n+        DECORATE.onRequest((Span) parentSpan, request);\n       }\n \n-      if (activeSpan() == null) {\n+      if (TRACER.getCurrentSpan() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjIxNjc1OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NToxOVrOFgKFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NToxOVrOFgKFqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NDA0MQ==", "bodyText": "// We want to capture the stacktrace, but that doesn't mean it should be an error.\n// We rely on a decorator to set the error state based on response code. (5xx -> error)\nBaseDecorator.addThrowable(span, exception);\n\nThis will track the exception without calling setError", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369264041", "createdAt": "2020-01-21T21:55:19Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,13 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n+      final Span span = TRACER.getCurrentSpan();\n       if (span != null && exception != null) {\n         DECORATE.onError(span, exception);\n         // We want to capture the stacktrace, but that doesn't mean it should be an error.\n         // We rely on a decorator to set the error state based on response code. (5xx -> error)\n-        span.setError(false);\n+        // span.setError(false); // TODO: Is this needed? Doesn't seem to be a similar method in\n+        // OpenTelemetry!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a95f212c2fcf7b6f12f7bd4eced4b93ae325d0e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTA3NzM2OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1MjozOVrOFglYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1MjozOVrOFglYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMTIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (spanAndScope.getScope() != null) {\n          \n          \n            \n                if (spanAndScope != null) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369711211", "createdAt": "2020-01-22T17:52:39Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/reactor-core-3.1/src/main/java8/io/opentelemetry/auto/instrumentation/reactor/core/FluxAndMonoSubscribeAdvice.java", "diffHunk": "@@ -18,26 +18,26 @@\n public class FluxAndMonoSubscribeAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope methodEnter(\n+  public static SpanScopePair methodEnter(\n       @Advice.Argument(0) final CoreSubscriber subscriber, @Advice.This final Object thiz) {\n-    final AgentSpan span =\n+    final Span span =\n         subscriber\n             .currentContext()\n             .getOrDefault(ReactorCoreAdviceUtils.PUBLISHER_CONTEXT_KEY, null);\n     if (span != null) {\n-      return activateSpan(span, false);\n+      return new SpanScopePair(span, TRACER.withSpan(span));\n     }\n     return null;\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void methodExit(\n-      @Advice.Enter final AgentScope scope, @Advice.Thrown final Throwable throwable) {\n+      @Advice.Enter final SpanScopePair spanAndScope, @Advice.Thrown final Throwable throwable) {\n     if (throwable != null) {\n-      ReactorCoreAdviceUtils.finishSpanIfPresent(scope.span(), throwable);\n+      ReactorCoreAdviceUtils.finishSpanIfPresent(spanAndScope.getSpan(), throwable);\n     }\n-    if (scope != null) {\n-      scope.close();\n+    if (spanAndScope.getScope() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "848aee260a892dd1f15538abea4cbb391e956680"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI3NTQ5OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1OToxMVrOFgnXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxODo1OToxMVrOFgnXZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0MzcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  builder.setNoParent();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369743717", "createdAt": "2020-01-22T18:59:11Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseMono.java", "diffHunk": "@@ -31,23 +28,25 @@ public TracingClientResponseMono(\n   @Override\n   public void subscribe(final CoreSubscriber<? super ClientResponse> subscriber) {\n     final Context context = subscriber.currentContext();\n-    final AgentSpan parentSpan =\n-        context.<AgentSpan>getOrEmpty(AgentSpan.class).orElseGet(AgentTracer::activeSpan);\n+    final Span parentSpan = context.<Span>getOrEmpty(Span.class).orElseGet(TRACER::getCurrentSpan);\n \n-    final AgentSpan span;\n+    final Span.Builder builder = TRACER.spanBuilder(\"http.request\");\n     if (parentSpan != null) {\n-      span = startSpan(\"http.request\", parentSpan.context());\n+      builder.setParent(parentSpan);\n     } else {\n-      span = startSpan(\"http.request\");\n+      builder.setNoParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18832230cbc7d15f1afcb3315125e60132e6fda5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI4MTgxOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMToxNFrOFgnbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowMToxNFrOFgnbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NDc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        : parentSpan; // TODO: Should we use DefaultSpan here?\n          \n          \n            \n                        : parentSpan;\n          \n      \n    \n    \n  \n\nI think ok to remove this TODO", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369744785", "createdAt": "2020-01-22T19:01:14Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -18,39 +18,42 @@\n   private final CoreSubscriber<? super ClientResponse> subscriber;\n   private final ClientRequest clientRequest;\n   private final Context context;\n-  private final AtomicReference<AgentSpan> spanRef;\n-  private final AgentSpan parentSpan;\n+  private final AtomicReference<Span> spanRef;\n+  private final Span parentSpan;\n \n   public TracingClientResponseSubscriber(\n       final CoreSubscriber<? super ClientResponse> subscriber,\n       final ClientRequest clientRequest,\n       final Context context,\n-      final AgentSpan span,\n-      final AgentSpan parentSpan) {\n+      final Span span,\n+      final Span parentSpan) {\n     this.subscriber = subscriber;\n     this.clientRequest = clientRequest;\n     this.context = context;\n     spanRef = new AtomicReference<>(span);\n-    this.parentSpan = parentSpan == null ? noopSpan() : parentSpan;\n+    this.parentSpan =\n+        parentSpan == null\n+            ? DefaultSpan.getInvalid()\n+            : parentSpan; // TODO: Should we use DefaultSpan here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18832230cbc7d15f1afcb3315125e60132e6fda5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTI5MDU4OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowNDoxNlrOFgnhLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTowNDoxNlrOFgnhLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc0NjIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DECORATE.onError(span, exception);\n          \n      \n    \n    \n  \n\ncalling onError will setStatus(UNKNOWN)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369746220", "createdAt": "2020-01-22T19:04:16Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -92,12 +92,12 @@ private void muzzleCheck(final HandlerMethod method) {\n   public static class ErrorHandlerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static void nameResource(@Advice.Argument(3) final Exception exception) {\n-      final AgentSpan span = activeSpan();\n-      if (span != null && exception != null) {\n+      final Span span = TRACER.getCurrentSpan();\n+      if (span.getContext().isValid() && exception != null) {\n         DECORATE.onError(span, exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18832230cbc7d15f1afcb3315125e60132e6fda5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTU5NDQxOnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MDo0OVrOFgqh6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MDo0OVrOFgqh6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean hasActiveTrace = current != null && current.getContext().isValid();\n          \n          \n            \n                final boolean hasActiveTrace = current.getContext().isValid();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369795560", "createdAt": "2020-01-22T20:50:49Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/servlet/request-2/src/main/java/io/opentelemetry/auto/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -24,13 +23,14 @@\n public class Servlet2Advice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static AgentScope onEnter(\n+  public static SpanScopePair onEnter(\n       @Advice.This final Object servlet,\n       @Advice.Argument(0) final ServletRequest request,\n       @Advice.Argument(value = 1, readOnly = false, typing = Assigner.Typing.DYNAMIC)\n           ServletResponse response) {\n-    final boolean hasActiveTrace = activeSpan() != null;\n-    final boolean hasServletTrace = request.getAttribute(SPAN_ATTRIBUTE) instanceof AgentSpan;\n+    final Span current = TRACER.getCurrentSpan();\n+    final boolean hasActiveTrace = current != null && current.getContext().isValid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f09aa451c469da5a96c51dc3954f89aeb88867"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NTU5NTM4OnYy", "diffSide": "RIGHT", "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MTowOFrOFgqidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDo1MTowOFrOFgqidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc5NTcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (final Scope scope = TRACER.withSpan(span)) {\n          \n          \n            \n                try (final Scope scope = TRACER.withSpan(parentSpan)) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/75#discussion_r369795700", "createdAt": "2020-01-22T20:51:08Z", "author": {"login": "trask"}, "path": "java-agent/instrumentation/spring-webflux-5/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/client/TracingClientResponseSubscriber.java", "diffHunk": "@@ -60,51 +63,50 @@ public void cancel() {\n               DECORATE.onCancel(span);\n               DECORATE.beforeFinish(span);\n               subscription.cancel();\n-              span.finish();\n+              span.end();\n             }\n           });\n     }\n   }\n \n   @Override\n   public void onNext(final ClientResponse clientResponse) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onResponse(span, clientResponse);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n-\n+    try (final Scope scope = TRACER.withSpan(parentSpan)) {\n       subscriber.onNext(clientResponse);\n     }\n   }\n \n   @Override\n   public void onError(final Throwable throwable) {\n-    final AgentSpan span = spanRef.getAndSet(null);\n+    final Span span = spanRef.getAndSet(null);\n     if (span != null) {\n       DECORATE.onError(span, throwable);\n       DECORATE.beforeFinish(span);\n-      span.finish();\n+      span.end();\n     }\n \n-    try (final AgentScope scope = activateSpan(parentSpan, false)) {\n+    try (final Scope scope = TRACER.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f09aa451c469da5a96c51dc3954f89aeb88867"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 622, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}