{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTMzNDE2", "number": 742, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0OTo0OVrOEQ0xZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNTozMVrOERK5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc3Mjg1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0OTo0OVrOG1Mkcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0OTo0OVrOG1Mkcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzY1MA==", "bodyText": "i think inlining this var is nice\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String peerName = remoteConnection.getHostString();\n          \n          \n            \n                    setPeer(span, peerName, null);\n          \n          \n            \n                    setPeer(span, remoteConnection.getHostString(), null);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458433650", "createdAt": "2020-07-21T22:49:49Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -83,12 +83,8 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n         onPeerConnection(span, remoteAddress);\n       } else {\n         // Failed DNS lookup, the host string is the name.\n-        String hostString = remoteConnection.getHostString();\n-        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), hostString);\n-        String peerService = mapToPeer(hostString);\n-        if (peerService != null) {\n-          span.setAttribute(\"peer.service\", peerService);\n-        }\n+        String peerName = remoteConnection.getHostString();\n+        setPeer(span, peerName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc3OTUxOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1Mjo0NFrOG1MoWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1Mjo0NFrOG1MoWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDY1MA==", "bodyText": "i think remove this method and call setPeer(span, peerName, null) directly, and i think restructure setPeer below a bit to not to delegate to this method", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458434650", "createdAt": "2020-07-21T22:52:44Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc4MDc5OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1MzoyMlrOG1MpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo1MzoyMlrOG1MpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNDg1MA==", "bodyText": "can probably inline above vars here and still stay in a single line \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458434850", "createdAt": "2020-07-21T22:53:22Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYzNjQwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNzowM1rOG1UcIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNzowM1rOG1UcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MjU5Mw==", "bodyText": "Please use this form: SemanticAttributes.NET_PEER_NAME.set(span, peerName)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458562593", "createdAt": "2020-07-22T06:27:03Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }\n+\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerIp == null) {\n+      setPeer(span, peerName);\n+    } else {\n+      if (peerName != null && !peerName.equals(peerIp)) {\n+        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTYzODgzOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyNzo1OVrOG1UdnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODoyMTo1OVrOG1uv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2Mjk3Mg==", "bodyText": "Use if/else", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458562972", "createdAt": "2020-07-22T06:27:59Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }\n+\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerIp == null) {\n+      setPeer(span, peerName);\n+    } else {\n+      if (peerName != null && !peerName.equals(peerIp)) {\n+        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n+\n+      String peerService = mapToPeer(peerName);\n+      if (peerService == null) {\n+        peerService = mapToPeer(peerIp);\n+      }\n+      if (peerService != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk5MzYyMw==", "bodyText": "I changed it to use the conditional operator instead.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458993623", "createdAt": "2020-07-22T18:21:59Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +93,39 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    String peerName = remoteAddress.getHostName();\n+    String peerIp = remoteAddress.getHostAddress();\n+    setPeer(span, peerName, peerIp);\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n-    }\n+  private static void setPeer(final Span span, String peerName) {\n+    assert span != null;\n+    span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+    String peerService = mapToPeer(peerName);\n     if (peerService != null) {\n       span.setAttribute(\"peer.service\", peerService);\n     }\n-    return span;\n+  }\n+\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerIp == null) {\n+      setPeer(span, peerName);\n+    } else {\n+      if (peerName != null && !peerName.equals(peerIp)) {\n+        span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), peerName);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), peerIp);\n+\n+      String peerService = mapToPeer(peerName);\n+      if (peerService == null) {\n+        peerService = mapToPeer(peerIp);\n+      }\n+      if (peerService != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2Mjk3Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTY0MzY1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyOTo1OFrOG1Ugiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoyOTo1OFrOG1Ugiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MzcyMw==", "bodyText": "Please create BaseTracer, define setPeer method there and then delegate to BaseDecorator as here. Then we will have to change only one place when in the future we replace all decorators with tracers", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458563723", "createdAt": "2020-07-22T06:29:58Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -151,8 +151,7 @@ protected void onPeerConnection(final Span span, final InetSocketAddress remoteC\n \n   protected void onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     if (remoteAddress != null) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-      span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+      BaseDecorator.setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTY0ODU1OnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjozMTo1NVrOG1Ujgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1NTowNFrOG1x7ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg==", "bodyText": "Please put it back :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458564482", "createdAt": "2020-07-22T06:31:55Z", "author": {"login": "iNikem"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDcyOQ==", "bodyText": "Find Action removes 'this.' when I hit ctrl+s.  Will do.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458970729", "createdAt": "2020-07-22T17:43:30Z", "author": {"login": "heyams"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4OTc5OQ==", "bodyText": "I need to uncheck this box in order to revert: \"Remove unnecessary this to field or method\".  Should we update the contributing.md to turn this off completely?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r458989799", "createdAt": "2020-07-22T18:15:12Z", "author": {"login": "heyams"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNzUzMQ==", "bodyText": "good question. I'm ok either way on that particular save action. @iNikem do you want to turn off that save action, or did you only want to revert here since it was unrelated to this PR (no other changes to this file)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459037531", "createdAt": "2020-07-22T19:39:40Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzODM5MQ==", "bodyText": "I just really like this in constructors.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459038391", "createdAt": "2020-07-22T19:41:10Z", "author": {"login": "iNikem"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NTczOA==", "bodyText": "Opened #761 to remove it from the Save Actions", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459045738", "createdAt": "2020-07-22T19:55:04Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -98,7 +98,7 @@ public TraceContext getTraceContext() {\n     private final Context context;\n \n     OpenTelemetryTraceContext() {\n-      this.context = Context.current();\n+      context = Context.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NDQ4Mg=="}, "originalCommit": {"oid": "c19a3277d5b71908db6261c3708c08497bdf9646"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDM5ODcxOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNTozMVrOG1vOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODozNTozMVrOG1vOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwMTU1MQ==", "bodyText": "i think this reads a little clearer:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;\n          \n          \n            \n                if (peerService == null) {\n          \n          \n            \n                  peerService = mapToPeer(peerIp);\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/742#discussion_r459001551", "createdAt": "2020-07-22T18:35:31Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -97,20 +92,23 @@ public Span onPeerConnection(final Span span, final InetSocketAddress remoteConn\n \n   public Span onPeerConnection(final Span span, final InetAddress remoteAddress) {\n     assert span != null;\n-    String hostName = remoteAddress.getHostName();\n-    if (!hostName.equals(remoteAddress.getHostAddress())) {\n-      span.setAttribute(SemanticAttributes.NET_PEER_NAME.key(), remoteAddress.getHostName());\n-    }\n-    span.setAttribute(SemanticAttributes.NET_PEER_IP.key(), remoteAddress.getHostAddress());\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+    return span;\n+  }\n \n-    String peerService = mapToPeer(hostName);\n-    if (peerService == null) {\n-      peerService = mapToPeer(remoteAddress.getHostAddress());\n+  public static void setPeer(final Span span, String peerName, String peerIp) {\n+    assert span != null;\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n     }\n+    String peerService = mapToPeer(peerName);\n+    peerService = (peerService == null) ? mapToPeer(peerIp) : peerService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92f83fc6110599948562c3ef34db149a01603cf9"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 117, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}