{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzI0Mjcz", "number": 115, "title": "Experimental Jaeger integration", "bodyText": "Added Jaeger exporter.\n\n\nAdded a rudimentary exporter management framework. Currently, the only supported exporter is Jaeger over gRPC. Much more work is needed to support loading of arbitrary exporters.\n\n\nAdded a rudimentary configuration framework. The idea is to have a stacked approach for multiple sources of configuration. Currently, system properties are consulted first, then environment variables. The framework is built to allow for e.g. JSON or YAML configuration provider to be plugged in very easily.\n\n\nSystem properties and environment variables are automatically as follows: System property ota.jaeger.host is equivalent to environment variable OTA_JAEGER_HOST.  The ota/OTA prefix is an abbreviation of \"OpenTelemetry Auto agent\". We can change that as needed later.", "createdAt": "2020-01-31T18:54:03Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115", "merged": true, "mergeCommit": {"oid": "49e6309cf951da08549a3e08786750a5d712383a"}, "closed": true, "closedAt": "2020-02-01T20:22:26Z", "author": {"login": "prydin"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_wAt1gH2gAyMzY5NzI0MjczOjRiZGRmN2U1NGY5Mzg3NjgwZGMzM2RhYjA1OTg3NjcwMTI4ZDM0MGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAJUMUgFqTM1MTkwMTUyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4bddf7e54f9387680dc33dab05987670128d340e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4bddf7e54f9387680dc33dab05987670128d340e", "committedDate": "2020-01-31T14:28:23Z", "message": "Added simple exporter and config framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3adf03bcff0456b1f440ec1fd44992f0656b491", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3adf03bcff0456b1f440ec1fd44992f0656b491", "committedDate": "2020-01-31T18:42:43Z", "message": "First working version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/55faebd22cc54cb9fd460beaed95a9860d1f4b50", "committedDate": "2020-01-31T18:46:48Z", "message": "Updated README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzA5MTU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#pullrequestreview-351709159", "createdAt": "2020-01-31T18:58:24Z", "commit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo1ODoyNFrOFkUzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOToxNjo0NlrOFkVSAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzMzkzOA==", "bodyText": "thank you for adding a real README!!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373633938", "createdAt": "2020-01-31T18:58:24Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,41 @@\n-# opentelemetry-auto-instr-java\n-Auto-Instrumentation for Java (per OTEP 0001)\n+# OpenTelemetry Automatic Java Agent\n+\n+## Notice - Work in Progress!\n+*This project is still in the early phases of development and is not yet stable.* You are welcome to experiment with it, \n+but we strongly discourage any production use!\n+\n+## Introduction\n+This project uses a technique known as bytecode instrumentation to add tracing to a Java program.\n+Simply put, we provide an agent that can be attached to any Java program and dynamically adds code to enable tracing. \n+\n+## Using the agent\n+As mentioned above, this project is in a very early phase of development and not yet stable. \n+However, you can try it on your Java program by following these instructions.\n+\n+### Prerequisites\n+* Java 8 to Java 11 \n+* Gradle 6.0\n+* Jaeger 1.16\n+* Git (reasonably current version)\n+\n+### Downloading and building\n+```git clone https://github.com/open-telemetry/opentelemetry-auto-instr-java.git```\n+\n+```gradle assemble```\n+\n+### Running \n+The instrumentation agent is enabled using the -javaagent flag to the JVM. Configuration parameters are passed \n+as Java system properties (-D flags) or as environment variables. This is an example of how to run\n+the agent on a java program:\n+\n+```java -javaagent:$OTHOME/java-agent/build/libs/java-agent-0.1.0-SNAPSHOT.jar -Dota.exporter=jaeger -Dota.jaeger.host=localhost -Dota.jaeger.port=14250 -Dota.jaeger.service=shopping -jar myprogram.jar```\n+\n+#### Configuration parameters (subject to change!)\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+ota.jaeger.service | OTA_JAEGER_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n+\n+These parameter names are very likely to change over time, so please check back here when trying out a new version!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNDM1Nw==", "bodyText": "i like the ota abbreviation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373634357", "createdAt": "2020-01-31T18:59:21Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,41 @@\n-# opentelemetry-auto-instr-java\n-Auto-Instrumentation for Java (per OTEP 0001)\n+# OpenTelemetry Automatic Java Agent\n+\n+## Notice - Work in Progress!\n+*This project is still in the early phases of development and is not yet stable.* You are welcome to experiment with it, \n+but we strongly discourage any production use!\n+\n+## Introduction\n+This project uses a technique known as bytecode instrumentation to add tracing to a Java program.\n+Simply put, we provide an agent that can be attached to any Java program and dynamically adds code to enable tracing. \n+\n+## Using the agent\n+As mentioned above, this project is in a very early phase of development and not yet stable. \n+However, you can try it on your Java program by following these instructions.\n+\n+### Prerequisites\n+* Java 8 to Java 11 \n+* Gradle 6.0\n+* Jaeger 1.16\n+* Git (reasonably current version)\n+\n+### Downloading and building\n+```git clone https://github.com/open-telemetry/opentelemetry-auto-instr-java.git```\n+\n+```gradle assemble```\n+\n+### Running \n+The instrumentation agent is enabled using the -javaagent flag to the JVM. Configuration parameters are passed \n+as Java system properties (-D flags) or as environment variables. This is an example of how to run\n+the agent on a java program:\n+\n+```java -javaagent:$OTHOME/java-agent/build/libs/java-agent-0.1.0-SNAPSHOT.jar -Dota.exporter=jaeger -Dota.jaeger.host=localhost -Dota.jaeger.port=14250 -Dota.jaeger.service=shopping -jar myprogram.jar```\n+\n+#### Configuration parameters (subject to change!)\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+ota.jaeger.service | OTA_JAEGER_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n+\n+These parameter names are very likely to change over time, so please check back here when trying out a new version!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzMzkzOA=="}, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNTQ0Mw==", "bodyText": "check out io.opentelemetry.auto.api.Config in case there is overlap with this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373635443", "createdAt": "2020-01-31T19:01:57Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/config/AgentConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package io.opentelemetry.auto.config;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AgentConfig {\n+  private static ConfigProvider defaultProvider =\n+      new StackedConfigProvider(\n+          new SystemPropertyConfigProvider(), new EnvironmentConfigProvider());\n+\n+  public static ConfigProvider getDefault() {\n+    return defaultProvider;\n+  }\n+\n+  @VisibleForTesting\n+  protected static void setDefault(final ConfigProvider provider) {\n+    defaultProvider = provider;\n+  }\n+\n+  public static class EnvironmentConfigProvider implements ConfigProvider {\n+    @Override\n+    public String get(final String key) {\n+      return System.getenv(key.toUpperCase().replace(\".\", \"_\"));\n+    }\n+  }\n+\n+  public static class StackedConfigProvider implements ConfigProvider {\n+    private final List<ConfigProvider> children;\n+\n+    public StackedConfigProvider(final List<ConfigProvider> children) {\n+      this.children = children;\n+    }\n+\n+    public StackedConfigProvider(final ConfigProvider... providers) {\n+      this(Arrays.asList(providers));\n+    }\n+\n+    @Override\n+    public String get(final String key) {\n+      for (final ConfigProvider cp : children) {\n+        final String value = cp.get(key);\n+        if (value != null) {\n+          return value;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  public static class SystemPropertyConfigProvider implements ConfigProvider {\n+    @Override\n+    public String get(final String key) {\n+      return System.getProperty(key);\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNzM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (host == null) {\n          \n          \n            \n                if (ipStr == null) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373637376", "createdAt": "2020-01-31T19:06:41Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n+\n+  private static final String SERVICE = \"ota.jaeger.service\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final ConfigProvider config = AgentConfig.getDefault();\n+    final String host = config.get(HOST_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = config.get(PORT_CONFIG);\n+    if (host == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzODEwNg==", "bodyText": "i think clearer to isolate this try catch just around the parseInt", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373638106", "createdAt": "2020-01-31T19:08:25Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n+\n+  private static final String SERVICE = \"ota.jaeger.service\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final ConfigProvider config = AgentConfig.getDefault();\n+    final String host = config.get(HOST_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = config.get(PORT_CONFIG);\n+    if (host == null) {\n+      throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n+    }\n+    String service = config.get(SERVICE);\n+    if (service == null) {\n+      service = \"(unknown)\";\n+    }\n+    try {\n+      final int port = Integer.parseInt(ipStr);\n+      final ManagedChannel jaegerChannel =\n+          ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n+      return JaegerGrpcSpanExporter.newBuilder()\n+          .setServiceName(service)\n+          .setChannel(jaegerChannel)\n+          .setDeadline(30000)\n+          .build();\n+    } catch (final NumberFormatException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzODcyNw==", "bodyText": "check out io.opentelemetry.auto.api.ConfigTest in case there is overlap with this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373638727", "createdAt": "2020-01-31T19:09:55Z", "author": {"login": "trask"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/test/ConfigTest.groovy", "diffHunk": "@@ -0,0 +1,56 @@\n+package io.opentelemetry.auto.test\n+\n+import io.opentelemetry.auto.config.AgentConfig\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+\n+class ConfigTest extends AgentSpecification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzOTA3Mw==", "bodyText": "is this needed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373639073", "createdAt": "2020-01-31T19:10:46Z", "author": {"login": "trask"}, "path": "instrumentation/ratpack-1.4/ratpack-1.4.gradle", "diffHunk": "@@ -31,6 +31,14 @@ testSets {\n dependencies {\n   main_java8CompileOnly group: 'io.ratpack', name: 'ratpack-core', version: '1.4.0'\n \n+  main_java8CompileOnly(group: 'com.google.guava', name: 'guava') {\n+    version {\n+      // force to use ratpack's guava version, otherwise it uses later version brought in by :agent-tooling\n+      strictly '20.0'\n+    }\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0MTcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Java 8 to Java 11 \n          \n          \n            \n            * Java 8 for building (Java 7 to Java 13 are supported at runtime)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373641728", "createdAt": "2020-01-31T19:16:46Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -1,2 +1,41 @@\n-# opentelemetry-auto-instr-java\n-Auto-Instrumentation for Java (per OTEP 0001)\n+# OpenTelemetry Automatic Java Agent\n+\n+## Notice - Work in Progress!\n+*This project is still in the early phases of development and is not yet stable.* You are welcome to experiment with it, \n+but we strongly discourage any production use!\n+\n+## Introduction\n+This project uses a technique known as bytecode instrumentation to add tracing to a Java program.\n+Simply put, we provide an agent that can be attached to any Java program and dynamically adds code to enable tracing. \n+\n+## Using the agent\n+As mentioned above, this project is in a very early phase of development and not yet stable. \n+However, you can try it on your Java program by following these instructions.\n+\n+### Prerequisites\n+* Java 8 to Java 11 ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzQwNDk3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#pullrequestreview-351740497", "createdAt": "2020-01-31T19:53:46Z", "commit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo1Mzo0NlrOFkWQkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo1Mzo0NlrOFkWQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1Nzc0Ng==", "bodyText": "using the existing Config class, can this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final String exporter = config.get(EXPORTER);\n          \n          \n            \n                  final String exporter = Config.getSettingFromEnvironment(EXPORTER);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373657746", "createdAt": "2020-01-31T19:53:46Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -2,21 +2,46 @@\n \n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.api.Config;\n+import io.opentelemetry.auto.config.AgentConfig;\n+import io.opentelemetry.auto.config.ConfigProvider;\n import io.opentelemetry.auto.instrumentation.api.AgentTracer;\n+import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n+import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n+import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n import io.opentelemetry.trace.Tracer;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static final String EXPORTER = \"ota.exporter\";\n+\n   /** Register agent tracer if no agent tracer is already registered. */\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n+      // Try to create an exporter\n+      final ConfigProvider config = AgentConfig.getDefault();\n+      final String exporter = config.get(EXPORTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55faebd22cc54cb9fd460beaed95a9860d1f4b50"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f13397720754410279bfc9c45e25fa0606e40a16", "committedDate": "2020-01-31T22:04:12Z", "message": "Changes according to @trask suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODA3MjEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#pullrequestreview-351807212", "createdAt": "2020-01-31T22:10:23Z", "commit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjoxMDoyM1rOFkZUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjoxNDozOFrOFkZZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwNzkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String EXPORTER = \"exporter\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373707936", "createdAt": "2020-01-31T22:10:23Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -15,14 +13,14 @@\n \n @Slf4j\n public class TracerInstaller {\n-  private static final String EXPORTER = \"ota.exporter\";\n+  private static final String EXPORTER = \"exporter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTA2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                exporter = properties.getProperty(EXPORTER, null);\n          \n          \n            \n                exporter = properties.getProperty(EXPORTER, parent.exporter);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709063", "createdAt": "2020-01-31T22:13:55Z", "author": {"login": "trask"}, "path": "trace-api/src/main/java/io/opentelemetry/auto/api/Config.java", "diffHunk": "@@ -157,6 +163,8 @@\n \n   // Read order: Properties -> Parent\n   private Config(final Properties properties, final Config parent) {\n+    exporter = properties.getProperty(EXPORTER, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTEyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                serviceName = properties.getProperty(SERVICE, \"(unknown)\");\n          \n          \n            \n                serviceName = properties.getProperty(SERVICE, parent.serviceName);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709124", "createdAt": "2020-01-31T22:14:08Z", "author": {"login": "trask"}, "path": "trace-api/src/main/java/io/opentelemetry/auto/api/Config.java", "diffHunk": "@@ -157,6 +163,8 @@\n \n   // Read order: Properties -> Parent\n   private Config(final Properties properties, final Config parent) {\n+    exporter = properties.getProperty(EXPORTER, null);\n+    serviceName = properties.getProperty(SERVICE, \"(unknown)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcwOTI3MA==", "bodyText": "default value is already applied in Config", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373709270", "createdAt": "2020-01-31T22:14:38Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -2,45 +2,42 @@\n \n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n-import io.opentelemetry.auto.config.AgentConfig;\n-import io.opentelemetry.auto.config.ConfigProvider;\n+import io.opentelemetry.auto.api.Config;\n import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n import io.opentelemetry.sdk.trace.export.SpanExporter;\n \n public class JaegerExporterFactory implements SpanExporterFactory {\n \n-  private static final String HOST_CONFIG = \"ota.jaeger.host\";\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n \n-  private static final String PORT_CONFIG = \"ota.jaeger.port\";\n-\n-  private static final String SERVICE = \"ota.jaeger.service\";\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n \n   @Override\n   public SpanExporter newExporter() throws ExporterConfigException {\n-    final ConfigProvider config = AgentConfig.getDefault();\n-    final String host = config.get(HOST_CONFIG);\n+    final String host = Config.getSettingFromEnvironment(HOST_CONFIG, null);\n     if (host == null) {\n       throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n     }\n-    final String ipStr = config.get(PORT_CONFIG);\n-    if (host == null) {\n+    final String ipStr = Config.getSettingFromEnvironment(PORT_CONFIG, null);\n+    if (ipStr == null) {\n       throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n     }\n-    String service = config.get(SERVICE);\n+    String service = Config.get().getServiceName();\n     if (service == null) {\n       service = \"(unknown)\";\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f13397720754410279bfc9c45e25fa0606e40a16"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2a738b40781d1236bc17abcaadbe81f785c011", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac2a738b40781d1236bc17abcaadbe81f785c011", "committedDate": "2020-01-31T22:17:06Z", "message": "Update README.md\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a012028abcf20955562b292c8a759cea95ea3503", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a012028abcf20955562b292c8a759cea95ea3503", "committedDate": "2020-01-31T22:17:59Z", "message": "Update trace-api/src/main/java/io/opentelemetry/auto/api/Config.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1252494fbc0df6fe5967e9e0b6d61695a3ea03ab", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1252494fbc0df6fe5967e9e0b6d61695a3ea03ab", "committedDate": "2020-01-31T22:18:06Z", "message": "Update trace-api/src/main/java/io/opentelemetry/auto/api/Config.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13de69e1a696518485f34231025f591bafa4e412", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/13de69e1a696518485f34231025f591bafa4e412", "committedDate": "2020-01-31T22:18:14Z", "message": "Update agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java\n\nCo-Authored-By: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42186fc98a160a3771d8ffca0bcbd5512cadcb47", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42186fc98a160a3771d8ffca0bcbd5512cadcb47", "committedDate": "2020-01-31T22:18:42Z", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3bf8e700d5dca14f7d7fefcbb9f5ac7269a3c29", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3bf8e700d5dca14f7d7fefcbb9f5ac7269a3c29", "committedDate": "2020-01-31T22:50:50Z", "message": "Merge branch 'prydin-jaeger' of https://github.com/prydin/opentelemetry-auto-instr-java into prydin-jaeger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3553e53c69aedf19d69e8a752cd0d815cef676a6", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3553e53c69aedf19d69e8a752cd0d815cef676a6", "committedDate": "2020-01-31T23:30:35Z", "message": "Fixed prefix in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26445b6d5c173ad4e23d3cb79148caecaa8ff8a2", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/26445b6d5c173ad4e23d3cb79148caecaa8ff8a2", "committedDate": "2020-02-01T02:11:47Z", "message": "Adjusted tests for new property prefix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a91bae9bf7957c2098a2ed708e914f06f6e90b64", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a91bae9bf7957c2098a2ed708e914f06f6e90b64", "committedDate": "2020-02-01T12:50:37Z", "message": "Changes to README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTAwMTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#pullrequestreview-351900148", "createdAt": "2020-02-01T19:25:50Z", "commit": {"oid": "a91bae9bf7957c2098a2ed708e914f06f6e90b64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToyNTo1MFrOFkex8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToyNTo1MFrOFkex8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzM2MA==", "bodyText": "this isn't needed, default value is already applied in Config", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#discussion_r373797360", "createdAt": "2020-02-01T19:25:50Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/exporter/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.opentelemetry.auto.tooling.exporter;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.api.Config;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n+\n+  @Override\n+  public SpanExporter newExporter() throws ExporterConfigException {\n+    final String host = Config.getSettingFromEnvironment(HOST_CONFIG, null);\n+    if (host == null) {\n+      throw new ExporterConfigException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final String ipStr = Config.getSettingFromEnvironment(PORT_CONFIG, null);\n+    if (ipStr == null) {\n+      throw new ExporterConfigException(PORT_CONFIG + \" must be specified\");\n+    }\n+    String service = Config.get().getServiceName();\n+    if (service == null) {\n+      service = \"(unknown)\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bae9bf7957c2098a2ed708e914f06f6e90b64"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d77f95ada98f68e478f34dc23c897cadfc9480e", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d77f95ada98f68e478f34dc23c897cadfc9480e", "committedDate": "2020-02-01T19:55:55Z", "message": "Removed redundant null-checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTAxNTIx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/115#pullrequestreview-351901521", "createdAt": "2020-02-01T19:57:17Z", "commit": {"oid": "6d77f95ada98f68e478f34dc23c897cadfc9480e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3385, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}