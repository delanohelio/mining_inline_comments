{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NjU1MjQ1", "number": 1418, "title": "Add context root to the front of the route in the span name", "bodyText": "Resolves #1299\nThis PR does a few things, please see commit breakout:\n\nAdd application root to span name\n\nThis commit keeps track of the context path, and prepends it to the route, e.g. old span name was '/mycontroller', new span name is '/mycontext/mycontroller'. If there is no context path (app is deployed to root) then there is no change\n\n\nReduce duplicate context lookups\n\nSince the prior commit added extra context lookups, this commit consolidated them where there was already a context lookup being done\n\n\nUser servlet path as route\n\nPreviously, we had span names like ApplicationFilterChain.doFilter and HttpServlet.service. Now it uses request.getServletPath() for the span name instead.\n\n\nTest against jetty instrumentation\n\nThe jetty instrumentation occurs before getContextPath() and getServletPath() are available, so a few changes were needed to handle this better (see comments in this commit for alternative options)\n\n\n\nCurrently missing tests for non-root context path in\n\njaxrs-1.0\nwebflux", "createdAt": "2020-10-19T03:45:18Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418", "merged": true, "mergeCommit": {"oid": "f046e598c6dd7979c468743a6322420b6fef62eb"}, "closed": true, "closedAt": "2020-10-27T21:21:11Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVJu3lgBqjM5MTEzODY0NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWu9N2AH2gAyNTA1NjU1MjQ1OmY1YzcyOWRkMjFkMzkxNjQwYTUwYTNjNmFlMDg3Y2VmZjIzYThiZDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d99287079fa5c4982f7025cfc134799296f3173", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8d99287079fa5c4982f7025cfc134799296f3173", "committedDate": "2020-10-20T04:00:35Z", "message": "fix"}, "afterCommit": {"oid": "319453f241b7b1bd015c5672fc39089e7fb4189c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/319453f241b7b1bd015c5672fc39089e7fb4189c", "committedDate": "2020-10-22T22:29:40Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDUxMTI5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-516451129", "createdAt": "2020-10-26T03:36:33Z", "commit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzozNjozM1rOHn_9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzozNzoyNVrOHn_-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng==", "bodyText": "Isn't this too specific a use case to put in BaseTracer?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511704496", "createdAt": "2020-10-26T03:36:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDYzMw==", "bodyText": "Also is context the only way? I thought servlet has getServletPath and getRequestUri we'd be able to compute the context path based on it?\nhttps://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511704633", "createdAt": "2020-10-26T03:37:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, "originalCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9ac0afc7c67684ecd763595ad1c41b5d18639b96", "committedDate": "2020-10-25T19:14:59Z", "message": "Merge remote-tracking branch 'upstream/master' into add-application-root-to-span-name"}, "afterCommit": {"oid": "a153af513300d8d9fbc1f51be9fa8c1a52512b14", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a153af513300d8d9fbc1f51be9fa8c1a52512b14", "committedDate": "2020-10-26T04:14:41Z", "message": "Test against jetty instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739524177f3ec74e3f0860ed36ec3cd197916c47", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/739524177f3ec74e3f0860ed36ec3cd197916c47", "committedDate": "2020-10-26T04:47:01Z", "message": "Add application root to span name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa7b56a63b0df9ab62617c41d779e12f8e5af8c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8fa7b56a63b0df9ab62617c41d779e12f8e5af8c", "committedDate": "2020-10-26T04:47:20Z", "message": "Reduce duplicate context lookups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3496ed73d9732d9f83642b6f11e635c44d52a273", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3496ed73d9732d9f83642b6f11e635c44d52a273", "committedDate": "2020-10-26T04:48:40Z", "message": "Use servlet path as route"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8db6d34dd5fb172884da95f93ef49677b048a7c0", "committedDate": "2020-10-26T04:48:42Z", "message": "Test against jetty instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a153af513300d8d9fbc1f51be9fa8c1a52512b14", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a153af513300d8d9fbc1f51be9fa8c1a52512b14", "committedDate": "2020-10-26T04:14:41Z", "message": "Test against jetty instrumentation"}, "afterCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8db6d34dd5fb172884da95f93ef49677b048a7c0", "committedDate": "2020-10-26T04:48:42Z", "message": "Test against jetty instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDcyMDA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-516472006", "createdAt": "2020-10-26T05:12:57Z", "commit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToxMjo1N1rOHoBFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNToyMVrOHoBPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMjg5OQ==", "bodyText": "Perhaps we could have a servlet-utils with a static helper then - actually I had no idea webflux works with servlet since our instrumentation doesn't have a dependency on it! So it seems to make sense that we could have a package dedicated to helping out servlet implementations. Having it outside the main instrumentation API would make me a lot less anxious.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511722899", "createdAt": "2020-10-26T05:12:57Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, "originalCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ==", "bodyText": "I suspect we don't need this since we calculate the server span name correctly in the tracer IIUC. The fact that no tests changed means either this update isn't necessary or we're missing a test :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511723689", "createdAt": "2020-10-26T05:16:51Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzk5NA==", "bodyText": "Here also I suspect updateSpanName(serverSpan) isn't doing anything, and for the non-serverspan case we don't need the getApplicationRoot call", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511723994", "createdAt": "2020-10-26T05:18:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-common/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v2_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -32,14 +33,16 @@ public Span startSpan(Class<?> target, Method method) {\n     // We create span and immediately update its name\n     // We do that in order to reuse logic inside updateSpanNames method, which is used externally as\n     // well.\n-    Span span = tracer.spanBuilder(\"jax-rs.request\").startSpan();\n-    updateSpanNames(span, BaseTracer.getCurrentServerSpan(), target, method);\n+    Context context = Context.current();\n+    Span span = tracer.spanBuilder(\"jax-rs.request\").setParent(context).startSpan();\n+    updateSpanNames(context, span, BaseTracer.getCurrentServerSpan(context), target, method);\n     return span;\n   }\n \n-  public void updateSpanNames(Span span, Span serverSpan, Class<?> target, Method method) {\n-    // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n-    String pathBasedSpanName = getPathSpanName(target, method);\n+  public void updateSpanNames(\n+      Context context, Span span, Span serverSpan, Class<?> target, Method method) {\n+    String pathBasedSpanName =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTI1MQ==", "bodyText": "I think for webflux we can access the ServletHttpRequest directly with an instanceof for the ServerRequest\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java#L57", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725251", "createdAt": "2020-10-26T05:24:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/HandlerAdapterAdvice.java", "diffHunk": "@@ -51,7 +51,8 @@ public static SpanWithScope methodEnter(\n       PathPattern bestPattern =\n           exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (serverSpan != null && bestPattern != null) {\n-        serverSpan.updateName(bestPattern.getPatternString());\n+        serverSpan.updateName(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTMxMw==", "bodyText": "Let's just use the HttpServletRequest", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725313", "createdAt": "2020-10-26T05:24:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -31,12 +32,12 @@ public Span startSpan(ModelAndView mv) {\n     return span;\n   }\n \n-  public void onRequest(Span span, HttpServletRequest request) {\n+  public void onRequest(Context context, Span span, HttpServletRequest request) {\n     if (request != null) {\n       Object bestMatchingPattern =\n           request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (bestMatchingPattern != null) {\n-        span.updateName(bestMatchingPattern.toString());\n+        span.updateName(BaseTracer.getApplicationRoot(context) + bestMatchingPattern.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNTQ2Ng==", "bodyText": "That being said if my below suggestions make sense I may have been able to avoid the propagation requirement \ud83e\udd1e", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511725466", "createdAt": "2020-10-26T05:25:21Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, "originalCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6550ee71146fa12a08204e661109d883ba92047", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6550ee71146fa12a08204e661109d883ba92047", "committedDate": "2020-10-26T05:53:48Z", "message": "Access context path directly when possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a5bc6eb730c114d65a77f07876c5d109ba5e436a", "committedDate": "2020-10-26T06:02:15Z", "message": "Add JAX-RS context path test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDg3NjU4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-516487658", "createdAt": "2020-10-26T06:10:25Z", "commit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjoxMDoyNVrOHoB4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjoxMDoyNVrOHoB4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczNTg5Mw==", "bodyText": "I didn't see how to get context path directly here, but will look at it closer tomorrow", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511735893", "createdAt": "2020-10-26T06:10:25Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/RouteOnSuccessOrError.java", "diffHunk": "@@ -41,7 +41,8 @@ public void accept(HandlerFunction<?> handler, Throwable throwable) {\n \n           Span serverSpan = context.get(BaseTracer.CONTEXT_SERVER_SPAN_KEY);\n           if (serverSpan != null) {\n-            serverSpan.updateName(parseRoute(predicateString));\n+            serverSpan.updateName(\n+                BaseTracer.getApplicationRoot(context) + parseRoute(predicateString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTAwMTkx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-516500191", "createdAt": "2020-10-26T06:48:12Z", "commit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNjo0ODoxMlrOHoChCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzoxNjoxOFrOHoDDcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NjMxMg==", "bodyText": "\"Secondar api\" \ud83d\ude31\nIs this whole problem specific to servlets? Or for other HTTP Server spans as well? E.g. Ratpack or Ktor or I-dont-know-what-else?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511746312", "createdAt": "2020-10-26T06:48:12Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -30,6 +30,11 @@\n   public static final ContextKey<Span> CONTEXT_CLIENT_SPAN_KEY =\n       ContextKey.named(\"opentelemetry-trace-auto-client-span-key\");\n \n+  // Keeps track of the application root (e.g. servlet context path) that needs to be prepended", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcwNDQ5Ng=="}, "originalCommit": {"oid": "9ac0afc7c67684ecd763595ad1c41b5d18639b96"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0NzM1Mg==", "bodyText": "Why are you doing it in startScope and not in startSpan? Or even by overriding some getSpanName method?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511747352", "createdAt": "2020-10-26T06:51:32Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -23,6 +24,22 @@\n \n   private static final Logger log = LoggerFactory.getLogger(ServletHttpServerTracer.class);\n \n+  @Override\n+  public Scope startScope(Span span, HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MTAzOQ==", "bodyText": "How can this work? I see in JAX-RS 1.0 tests that we expect span name to be POST /test/hello/{name}. And now you just prepend application root to it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511751039", "createdAt": "2020-10-26T07:03:36Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);\n     }\n \n     return tracer.spanBuilder(spanName).startSpan();\n   }\n \n-  private void updateServerSpanName(Span span, String spanName) {\n+  private void updateServerSpanName(Context context, Span span, String spanName) {\n     if (!spanName.isEmpty()) {\n-      span.updateName(spanName);\n+      span.updateName(BaseTracer.getApplicationRoot(context) + spanName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjAwNw==", "bodyText": "Also I don't like this scattered non-obvious logic :( Several places which are very far from each other and not really related now have to implement the same rule for span name. If/when we change them again, it is certain we don't find all these places.\nAt the very least we should encapsulate this name rule and application root access into a separate class. E.g. ServletSpanName or something.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511752007", "createdAt": "2020-10-26T07:06:42Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);\n     }\n \n     return tracer.spanBuilder(spanName).startSpan();\n   }\n \n-  private void updateServerSpanName(Span span, String spanName) {\n+  private void updateServerSpanName(Context context, Span span, String spanName) {\n     if (!spanName.isEmpty()) {\n-      span.updateName(spanName);\n+      span.updateName(BaseTracer.getApplicationRoot(context) + spanName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1MjU2OQ==", "bodyText": "But you did not for JAX-RS 1.0 :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511752569", "createdAt": "2020-10-26T07:08:33Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs/jaxrs-1.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrs/v1_0/JaxRsAnnotationsTracer.java", "diffHunk": "@@ -26,23 +27,24 @@\n \n   public Span startSpan(Class<?> target, Method method) {\n     String pathBasedSpanName = getPathSpanName(target, method);\n-    Span serverSpan = BaseTracer.getCurrentServerSpan();\n+    Context context = Context.current();\n+    Span serverSpan = BaseTracer.getCurrentServerSpan(context);\n \n     // When jax-rs is the root, we want to name using the path, otherwise use the class/method.\n     String spanName;\n     if (serverSpan == null) {\n       spanName = pathBasedSpanName;\n     } else {\n       spanName = spanNameForMethod(target, method);\n-      updateServerSpanName(serverSpan, pathBasedSpanName);\n+      updateServerSpanName(context, serverSpan, pathBasedSpanName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyMzY4OQ=="}, "originalCommit": {"oid": "8db6d34dd5fb172884da95f93ef49677b048a7c0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc1NTEyMQ==", "bodyText": "This is essentially one more way to calculate span name. Why we don't use BaseTracer.getApplicationRoot here? We have similar but something different rule scattered across the code base.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r511755121", "createdAt": "2020-10-26T07:16:18Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringWebMvcTracer.java", "diffHunk": "@@ -36,7 +36,12 @@ public void onRequest(Span span, HttpServletRequest request) {\n       Object bestMatchingPattern =\n           request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n       if (bestMatchingPattern != null) {\n-        span.updateName(bestMatchingPattern.toString());\n+        String contextPath = request.getContextPath();\n+        if (contextPath != null && !contextPath.isEmpty() && !contextPath.equals(\"/\")) {\n+          span.updateName(contextPath + bestMatchingPattern.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5bc6eb730c114d65a77f07876c5d109ba5e436a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daed03fbb43f5f21d845548d8a383a8b4473a69c", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/daed03fbb43f5f21d845548d8a383a8b4473a69c", "committedDate": "2020-10-27T01:22:36Z", "message": "Fix JAX-RS 1.0 span names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95061912bbf61ccb334bfc58ddbf6979da9f6f08", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95061912bbf61ccb334bfc58ddbf6979da9f6f08", "committedDate": "2020-10-27T02:42:31Z", "message": "Remove application root dep from webflux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c21b46861451b952df98f745c77ec8a574a14a61", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c21b46861451b952df98f745c77ec8a574a14a61", "committedDate": "2020-10-27T03:23:10Z", "message": "Better design if we are keeping it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b42107843b67b3e6c0ee537a04af467667e9696", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8b42107843b67b3e6c0ee537a04af467667e9696", "committedDate": "2020-10-27T04:23:55Z", "message": "Thanks iNikem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4370108f6dfcc4e6df5019aea7a41fa6f12e42e0", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4370108f6dfcc4e6df5019aea7a41fa6f12e42e0", "committedDate": "2020-10-27T04:33:54Z", "message": "Revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e4cb33dae2d730b2e729e00ed3afb2d3dc0ad1", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d8e4cb33dae2d730b2e729e00ed3afb2d3dc0ad1", "committedDate": "2020-10-27T04:48:43Z", "message": "What it would look like using ServletContextPath everywhere"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e9561ec5749ad6a94370ebd80300da06bf204d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/90e9561ec5749ad6a94370ebd80300da06bf204d", "committedDate": "2020-10-27T05:04:25Z", "message": "Merge remote-tracking branch 'upstream/master' into add-application-root-to-span-name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6dccee64d3ae995c2439615a5824282de7349099", "committedDate": "2020-10-27T05:56:10Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzY5OTcy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-517369972", "createdAt": "2020-10-27T06:02:04Z", "commit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjowMjowNVrOHosihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjowMjozMVrOHosjJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDgyMg==", "bodyText": "ServletContextContextUtils? Just kidding :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512434822", "createdAt": "2020-10-27T06:02:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/ServletContextPath.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+\n+public class ServletContextPath {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDk4Mw==", "bodyText": "Let's add some class javadoc to explain what's going on, including why this needs to go in instrumentation-api", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512434983", "createdAt": "2020-10-27T06:02:31Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/ServletContextPath.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+\n+public class ServletContextPath {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNDgyMg=="}, "originalCommit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzczOTk2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#pullrequestreview-517373996", "createdAt": "2020-10-27T06:12:57Z", "commit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjoxMjo1N1rOHosurg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjozMDo0MlrOHotFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzNzkzNA==", "bodyText": "This javadoc is obsolete", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512437934", "createdAt": "2020-10-27T06:12:57Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/servlet/ServletContextPath.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.servlet;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.ContextKey;\n+\n+public class ServletContextPath {\n+\n+  // Keeps track of the servlet context path that needs to be prepended to the route when updating\n+  // the span name\n+  public static final ContextKey<String> CONTEXT_KEY =\n+      ContextKey.named(\"opentelemetry-servlet-context-path-key\");\n+\n+  /** Returns the servlet context path from the given context or <code>\"\"</code> if not found. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzI0Ng==", "bodyText": "Is this method used?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512443246", "createdAt": "2020-10-27T06:29:22Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-webflux-5.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/webflux/server/RouteOnSuccessOrError.java", "diffHunk": "@@ -69,4 +72,13 @@ private String parseRoute(String routerString) {\n                 .trim())\n         .replaceAll(\"\");\n   }\n+\n+  private static String getContextPath(ServerRequest serverRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzcxMw==", "bodyText": "Technically, this is a duplication with ServletContextPath.prepend", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1418#discussion_r512443713", "createdAt": "2020-10-27T06:30:42Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/servlet-2.2/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -107,4 +125,13 @@ protected String flavor(HttpServletRequest connection, HttpServletRequest reques\n   protected String requestHeader(HttpServletRequest httpServletRequest, String name) {\n     return httpServletRequest.getHeader(name);\n   }\n+\n+  private static String getSpanName(HttpServletRequest request) {\n+    String spanName = request.getServletPath();\n+    String contextPath = request.getContextPath();\n+    if (contextPath != null && !contextPath.isEmpty() && !contextPath.equals(\"/\")) {\n+      spanName = contextPath + spanName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dccee64d3ae995c2439615a5824282de7349099"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b59bdba10023a84b4605dd95b90919056c57468", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4b59bdba10023a84b4605dd95b90919056c57468", "committedDate": "2020-10-27T06:34:35Z", "message": "Remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088561ebf7e35cc4afd4261b26f1a6ae8091095a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/088561ebf7e35cc4afd4261b26f1a6ae8091095a", "committedDate": "2020-10-27T06:35:20Z", "message": "Remove outdated javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7add716affafee79de545b0b2ab86f753f363e4", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7add716affafee79de545b0b2ab86f753f363e4", "committedDate": "2020-10-27T19:34:01Z", "message": "Fix redirect test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e3a4b990449fb515e37a6e4d87a9aaee783eb05", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e3a4b990449fb515e37a6e4d87a9aaee783eb05", "committedDate": "2020-10-27T19:56:27Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5f1cde7dd135943b283b89c3df6966dc646324d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c5f1cde7dd135943b283b89c3df6966dc646324d", "committedDate": "2020-10-27T19:56:34Z", "message": "Merge remote-tracking branch 'upstream/master' into add-application-root-to-span-name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5c729dd21d391640a50a3c6ae087ceff23a8bd4", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5c729dd21d391640a50a3c6ae087ceff23a8bd4", "committedDate": "2020-10-27T20:26:04Z", "message": "Add javadoc for ServletContextPath"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2362, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}