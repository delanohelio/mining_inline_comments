{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDI5MjEw", "number": 840, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNzowN1rOETnYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMToxNFrOEUTk9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDAzNzAzOnYy", "diffSide": "RIGHT", "path": "buildSrc/build.gradle.kts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNzowN1rOG5crow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMTowMzoyOFrOG54w9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ==", "bodyText": "Package is certainly weird :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462891939", "createdAt": "2020-07-30T10:07:07Z", "author": {"login": "iNikem"}, "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -10,6 +10,10 @@ gradlePlugin {\n       id = \"muzzle\"\n       implementationClass = \"MuzzlePlugin\"\n     }\n+    create(\"auto-instrumentation-plugin\") {\n+      id = \"io.opentelemetry.auto.auto-instrumentation\"\n+      implementationClass = \"io.opentelemetry.auto.gradle.instrumentation.AutoInstrumentationPlugin\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2Mzk4OQ==", "bodyText": "Yeah - I did put about a minute into it but couldn't come up with a better package. Let me know if you have a suggestion so I can use it :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462963989", "createdAt": "2020-07-30T12:35:45Z", "author": {"login": "anuraaga"}, "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -10,6 +10,10 @@ gradlePlugin {\n       id = \"muzzle\"\n       implementationClass = \"MuzzlePlugin\"\n     }\n+    create(\"auto-instrumentation-plugin\") {\n+      id = \"io.opentelemetry.auto.auto-instrumentation\"\n+      implementationClass = \"io.opentelemetry.auto.gradle.instrumentation.AutoInstrumentationPlugin\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ=="}, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM1MjA1Mw==", "bodyText": "Tried a new name let me know :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463352053", "createdAt": "2020-07-31T01:03:28Z", "author": {"login": "anuraaga"}, "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -10,6 +10,10 @@ gradlePlugin {\n       id = \"muzzle\"\n       implementationClass = \"MuzzlePlugin\"\n     }\n+    create(\"auto-instrumentation-plugin\") {\n+      id = \"io.opentelemetry.auto.auto-instrumentation\"\n+      implementationClass = \"io.opentelemetry.auto.gradle.instrumentation.AutoInstrumentationPlugin\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ=="}, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDAzODc4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNzozN1rOG5cspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNzozN1rOG5cspw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MjE5OQ==", "bodyText": "This comment is not relevant here, is it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892199", "createdAt": "2020-07-30T10:07:37Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDA0Mjk4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowODo1N1rOG5cvVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozODo1NlrOG5hLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Mjg4NQ==", "bodyText": "Why exactly do we have 2 separate arrays that we merge anyway?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892885", "createdAt": "2020-07-30T10:08:57Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer\n+   * references bootstrap classes (e.g. AgentClassLoader).\n+   */\n+  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n+    \"io.opentelemetry.auto.common.exec\",\n+    \"io.opentelemetry.auto.slf4j\",\n+    \"io.opentelemetry.auto.config\",\n+    \"io.opentelemetry.auto.bootstrap\",\n+    \"io.opentelemetry.auto.instrumentation.api\",\n+    \"io.opentelemetry.auto.shaded\",\n+    \"io.opentelemetry.auto.typedspan\",\n+  };\n+\n+  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n+\n+  static {\n+    final String[] testBS = {\n+      \"io.opentelemetry.OpenTelemetry\", // OpenTelemetry API\n+      \"io.opentelemetry.common\", // OpenTelemetry API\n+      \"io.opentelemetry.context\", // OpenTelemetry API (context prop)\n+      \"io.opentelemetry.correlationcontext\", // OpenTelemetry API\n+      \"io.opentelemetry.internal\", // OpenTelemetry API\n+      \"io.opentelemetry.metrics\", // OpenTelemetry API\n+      \"io.opentelemetry.trace\", // OpenTelemetry API\n+      \"io.opentelemetry.contrib.auto.annotations\", // OpenTelemetry API Contrib\n+      \"io.grpc.Context\", // OpenTelemetry API dependency\n+      \"io.grpc.Deadline\", // OpenTelemetry API dependency\n+      \"io.grpc.PersistentHashArrayMappedTrie\", // OpenTelemetry API dependency\n+      \"io.grpc.ThreadLocalContextStorage\", // OpenTelemetry API dependency\n+      \"org.slf4j\",\n+      \"ch.qos.logback\",\n+      // Tomcat's servlet classes must be on boostrap\n+      // when running tomcat test\n+      \"javax.servlet.ServletContainerInitializer\",\n+      \"javax.servlet.ServletContext\"\n+    };\n+    TEST_BOOTSTRAP_PREFIXES =\n+        Arrays.copyOf(\n+            BOOTSTRAP_PACKAGE_PREFIXES_COPY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTYyNQ==", "bodyText": "I think it's so one can be pure copy-paste from the business logic.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462965625", "createdAt": "2020-07-30T12:38:56Z", "author": {"login": "anuraaga"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer\n+   * references bootstrap classes (e.g. AgentClassLoader).\n+   */\n+  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n+    \"io.opentelemetry.auto.common.exec\",\n+    \"io.opentelemetry.auto.slf4j\",\n+    \"io.opentelemetry.auto.config\",\n+    \"io.opentelemetry.auto.bootstrap\",\n+    \"io.opentelemetry.auto.instrumentation.api\",\n+    \"io.opentelemetry.auto.shaded\",\n+    \"io.opentelemetry.auto.typedspan\",\n+  };\n+\n+  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n+\n+  static {\n+    final String[] testBS = {\n+      \"io.opentelemetry.OpenTelemetry\", // OpenTelemetry API\n+      \"io.opentelemetry.common\", // OpenTelemetry API\n+      \"io.opentelemetry.context\", // OpenTelemetry API (context prop)\n+      \"io.opentelemetry.correlationcontext\", // OpenTelemetry API\n+      \"io.opentelemetry.internal\", // OpenTelemetry API\n+      \"io.opentelemetry.metrics\", // OpenTelemetry API\n+      \"io.opentelemetry.trace\", // OpenTelemetry API\n+      \"io.opentelemetry.contrib.auto.annotations\", // OpenTelemetry API Contrib\n+      \"io.grpc.Context\", // OpenTelemetry API dependency\n+      \"io.grpc.Deadline\", // OpenTelemetry API dependency\n+      \"io.grpc.PersistentHashArrayMappedTrie\", // OpenTelemetry API dependency\n+      \"io.grpc.ThreadLocalContextStorage\", // OpenTelemetry API dependency\n+      \"org.slf4j\",\n+      \"ch.qos.logback\",\n+      // Tomcat's servlet classes must be on boostrap\n+      // when running tomcat test\n+      \"javax.servlet.ServletContainerInitializer\",\n+      \"javax.servlet.ServletContext\"\n+    };\n+    TEST_BOOTSTRAP_PREFIXES =\n+        Arrays.copyOf(\n+            BOOTSTRAP_PACKAGE_PREFIXES_COPY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Mjg4NQ=="}, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDA0Mzg1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowOToxMVrOG5cv2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozOTozM1rOG5hM3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MzAxNw==", "bodyText": "Please write a javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462893017", "createdAt": "2020-07-30T10:09:11Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NTk4Mw==", "bodyText": "I added a bit, I'll add some more when moving more logic into here, this and instrumentation.gradle are serving the same layer so I may as well move everything into here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462965983", "createdAt": "2020-07-30T12:39:33Z", "author": {"login": "anuraaga"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MzAxNw=="}, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzgwMDkxOnYy", "diffSide": "RIGHT", "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoyODoyNVrOG6AWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoyNToxMlrOG6bKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA==", "bodyText": "@trask This started throwing an exception even though the assertions pass, any idea if this is a valid fix?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463476340", "createdAt": "2020-07-31T08:28:25Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4OTA3MA==", "bodyText": "It seems strange, that test named \"context classes are redefine safe\" is expected to throw an exception.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463489070", "createdAt": "2020-07-31T08:54:23Z", "author": {"login": "iNikem"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4NjYyNg==", "bodyText": "i don't think it's a valid fix \ud83d\ude04\ni tried it out, looks like jacoco instrumentation is getting applied to KeyClass and UntransformableKeyClass in your branch, which is causing the redefinition to fail, e.g.:\n  def \"context classes are redefine safe\"() {\n    when:\n    for (Field field : KeyClass.getDeclaredFields()) {\n      println field.getName()\n    }\n\nshows $jacocoData in your branch, but no jacoco field in master.\nit looks like those classes are supposed to be excluded from jacoco:\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/testing-common/testing-common.gradle#L13-L14\nso maybe your changes broke that exclusion somehow?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463886626", "createdAt": "2020-07-31T23:33:18Z", "author": {"login": "trask"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTI4NA==", "bodyText": "Thanks for the debugging! Yeah that must be it I see what needs to be fixed. For reference though, does this mean that this behavior is only guaranteed when there isn't another agent running? I wonder how many of our features have that restriction.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463915284", "createdAt": "2020-08-01T03:21:57Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTUzMA==", "bodyText": "Also I don't know why UntransformableKeyClass is not transformable that would be helpful if you know :) Is it a reference to the parent class that fills up the object? I didn't know there was a difference between subclasses of Object and other classes in that regard.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463915530", "createdAt": "2020-08-01T03:25:12Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA=="}, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI3NjAwOnYy", "diffSide": "RIGHT", "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyOToyNFrOG6fQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyOToyNFrOG6fQlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // NB: This test will fail if some other agent is also running that fills the class structure\n          \n          \n            \n              // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n          \n          \n            \n              // make sure jacoco exclusion is working.\n          \n          \n            \n              // NB: This test will fail if some other agent is also running that modifies the class structure\n          \n          \n            \n              // in a way that is incompatible with redefining the class back to its original bytecode.\n          \n          \n            \n              // A likely culprit is jacoco if you start seeing failure here due to a change make sure jacoco\n          \n          \n            \n              // exclusion is working.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982741", "createdAt": "2020-08-01T17:29:24Z", "author": {"login": "trask"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -175,6 +178,9 @@ class FieldBackedProviderTest extends AgentTestRunner {\n     new UntransformableKeyClass().incrementContextCount() == 1\n   }\n \n+  // NB: This test will fail if some other agent is also running that fills the class structure\n+  // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n+  // make sure jacoco exclusion is working.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395896946efa3328dc62881582311159c3e2302"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI3NzMyOnYy", "diffSide": "RIGHT", "path": "testing-common/src/test/java/context/ContextTestInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMToxNFrOG6fRKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMToxNFrOG6fRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n          \n          \n            \n               * meaning it has one field available for us to add context through redefinition. {@link\n          \n          \n            \n               * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n          \n          \n            \n               * thus has no available space for us to add context via redefinition.\n          \n          \n            \n               * A class which will not be transformed by our instrumentation due to {@link\n          \n          \n            \n               * FieldBackedProviderTest#shouldTransformClass(String, ClassLoader)}.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982890", "createdAt": "2020-08-01T17:31:14Z", "author": {"login": "trask"}, "path": "testing-common/src/test/java/context/ContextTestInstrumentation.java", "diffHunk": "@@ -194,7 +194,12 @@ public void putContextCount(final int value) {\n     }\n   }\n \n-  /** A class which cannot be transformed by our instrumentation. */\n+  /**\n+   * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n+   * meaning it has one field available for us to add context through redefinition. {@link\n+   * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n+   * thus has no available space for us to add context via redefinition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395896946efa3328dc62881582311159c3e2302"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 187, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}