{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzczNjQ1", "number": 1530, "title": "Activate SystemMetrics", "bodyText": "fix #1508", "createdAt": "2020-10-30T05:49:24Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530", "merged": true, "mergeCommit": {"oid": "70dcb931212239782bc4e97127eaf3d60a5f969e"}, "closed": true, "closedAt": "2020-11-05T21:02:02Z", "author": {"login": "malafeev"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXgNNYgH2gAyNTEyNzczNjQ1OmMxY2NmNzYzODdmOWE3MDNkM2RlMTI1Y2ViMzA1Y2M1ZDZhZjYxMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZbSQPgFqTUyMzkzMDE2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c1ccf76387f9a703d3de125ceb305cc5d6af6109", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1ccf76387f9a703d3de125ceb305cc5d6af6109", "committedDate": "2020-10-30T05:48:53Z", "message": "#1508 Activate SystemMetrics\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902ca0760d4a92b21d7542c8becddc56725e3a75", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/902ca0760d4a92b21d7542c8becddc56725e3a75", "committedDate": "2020-10-30T05:57:29Z", "message": "refactoring\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acbbe89a0dcf58180a286dab3970c624ad56cdf3", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/acbbe89a0dcf58180a286dab3970c624ad56cdf3", "committedDate": "2020-10-30T06:38:17Z", "message": "Merge branch 'master' into activate-system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fe1acfbe94b3e317994bc1db98645c3b5bc0aa29", "committedDate": "2020-10-30T07:41:05Z", "message": "fix formatting\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTgwMTE4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#pullrequestreview-522180118", "createdAt": "2020-11-03T04:12:00Z", "commit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxMjowMFrOHsfvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNDoxNjo1M1rOHsfyvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxOTM1MA==", "bodyText": "since only one Instrumentation class, don't need to break out abstract base class", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#discussion_r516419350", "createdAt": "2020-11-03T04:12:00Z", "author": {"login": "trask"}, "path": "instrumentation/oshi/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/oshi/AbstractOshiInstrumentation.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.oshi;\n+\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+\n+public abstract class AbstractOshiInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxOTQzMQ==", "bodyText": "I don't think u need helper class, can call SystemMetrics.registerObservers() directly from here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#discussion_r516419431", "createdAt": "2020-11-03T04:12:29Z", "author": {"login": "trask"}, "path": "instrumentation/oshi/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/oshi/OshiInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.oshi;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class OshiInstrumentation extends AbstractOshiInstrumentation {\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"oshi.SystemInfo\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"oshi.SystemInfo\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod().and(isPublic()).and(isStatic()).and(named(\"getCurrentPlatformEnum\")),\n+        OshiInstrumentation.class.getName() + \"$OshiInstrumentationAdvice\");\n+  }\n+\n+  public static class OshiInstrumentationAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      OshiInstrumentationHelper.registerObservers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyMDI4Ng==", "bodyText": "I'm ok with this approach for now, and we can log an issue to improve this in the future (ideally the agent wouldn't know about the instrumentation), @iNikem @anuraaga?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#discussion_r516420286", "createdAt": "2020-11-03T04:16:53Z", "author": {"login": "trask"}, "path": "javaagent/src/main/java/io/opentelemetry/javaagent/OpenTelemetryAgent.java", "diffHunk": "@@ -67,6 +67,17 @@ public static void agentmain(String agentArgs, Instrumentation inst) {\n       System.err.println(\"ERROR \" + thisClass.getName());\n       ex.printStackTrace();\n     }\n+\n+    try {\n+      // Call oshi.SystemInfo.getCurrentPlatformEnum() to activate SystemMetrics.\n+      // Oshi instrumentation will intercept this call and enable SystemMetrics.\n+      Class<?> oshiSystemInfoClass =\n+          ClassLoader.getSystemClassLoader().loadClass(\"oshi.SystemInfo\");\n+      Method getCurrentPlatformEnumMethod = oshiSystemInfoClass.getMethod(\"getCurrentPlatformEnum\");\n+      getCurrentPlatformEnumMethod.invoke(null);\n+    } catch (Throwable ex) {\n+      // OK\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5908597e7eb9cd6c5adf3aa65fc8397783e3cbd3", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5908597e7eb9cd6c5adf3aa65fc8397783e3cbd3", "committedDate": "2020-11-03T11:34:00Z", "message": "get rid of helper\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d257508ff2a97edff8baa0b3ceacc361229f3f", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8d257508ff2a97edff8baa0b3ceacc361229f3f", "committedDate": "2020-11-03T11:34:47Z", "message": "Merge branch 'master' into activate-system-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a570ae331a47f8d7672dff1857cd2cd489b788", "author": {"user": {"login": "malafeev", "name": "Sergei Malafeev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b6a570ae331a47f8d7672dff1857cd2cd489b788", "committedDate": "2020-11-04T02:14:57Z", "message": "get rid of AbstractOshiInstrumentation\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjA3Njc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#pullrequestreview-523607676", "createdAt": "2020-11-04T18:00:29Z", "commit": {"oid": "b6a570ae331a47f8d7672dff1857cd2cd489b788"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTMwMTY2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#pullrequestreview-523930166", "createdAt": "2020-11-05T05:12:39Z", "commit": {"oid": "b6a570ae331a47f8d7672dff1857cd2cd489b788"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNToxMjo0MFrOHtzypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNToxMjo0MFrOHtzypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc5NjUxNg==", "bodyText": "@trask Do we have any gotchas for using system classloader here? It'd be good to understand well if there are cases we don't support right now.\nFollowing up with the classloader callback approach sounds fine though.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1530#discussion_r517796516", "createdAt": "2020-11-05T05:12:40Z", "author": {"login": "anuraaga"}, "path": "javaagent/src/main/java/io/opentelemetry/javaagent/OpenTelemetryAgent.java", "diffHunk": "@@ -67,6 +67,17 @@ public static void agentmain(String agentArgs, Instrumentation inst) {\n       System.err.println(\"ERROR \" + thisClass.getName());\n       ex.printStackTrace();\n     }\n+\n+    try {\n+      // Call oshi.SystemInfo.getCurrentPlatformEnum() to activate SystemMetrics.\n+      // Oshi instrumentation will intercept this call and enable SystemMetrics.\n+      Class<?> oshiSystemInfoClass =\n+          ClassLoader.getSystemClassLoader().loadClass(\"oshi.SystemInfo\");\n+      Method getCurrentPlatformEnumMethod = oshiSystemInfoClass.getMethod(\"getCurrentPlatformEnum\");\n+      getCurrentPlatformEnumMethod.invoke(null);\n+    } catch (Throwable ex) {\n+      // OK\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyMDI4Ng=="}, "originalCommit": {"oid": "fe1acfbe94b3e317994bc1db98645c3b5bc0aa29"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2433, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}