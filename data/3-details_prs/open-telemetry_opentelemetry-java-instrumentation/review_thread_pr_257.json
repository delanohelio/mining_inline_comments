{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjM1NTIw", "number": 257, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0ODoxNVrODp9h_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0ODoxNVrODp9h_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzI2MzM0OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzo0ODoxNVrOF5dlug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToxMzo0MVrOF5jW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng==", "bodyText": "not sure why all these final crept into this PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395797946", "createdAt": "2020-03-20T17:48:15Z", "author": {"login": "jkwatson"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5OTExOA==", "bodyText": "because the (unnamed \ud83d\ude04) person who added those files initially didn't follow https://github.com/open-telemetry/opentelemetry-auto-instr-java/blob/master/CONTRIBUTING.md", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395799118", "createdAt": "2020-03-20T17:50:23Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng=="}, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NTMzNw==", "bodyText": "at some point, we need to reconcile the coding standards between otel-java and the auto-instrumentation code. over in otel-java we don't final all the things. Also, I don't see parameters being final in that doc anywhere. Am I missing it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395865337", "createdAt": "2020-03-20T20:06:07Z", "author": {"login": "jkwatson"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng=="}, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2ODY4Ng==", "bodyText": "it's part of the save actions plugin (see \"add final to ...\" in the screenshot)\nthis was inherited from DataDog repo, so just going with that for now. definitely agree with sync'ing coding standards with otel-java \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395868686", "createdAt": "2020-03-20T20:14:17Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng=="}, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg3ODE5Nw==", "bodyText": "I don't see \"add final to parameter\" in there.  I wonder if IDEA considered parameters as local variables?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395878197", "createdAt": "2020-03-20T20:37:21Z", "author": {"login": "jkwatson"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng=="}, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5MjQ0NQ==", "bodyText": "Yeah, looks like that \"save actions\" plugin treats them the same.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/257#discussion_r395892445", "createdAt": "2020-03-20T21:13:41Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedTracer.java", "diffHunk": "@@ -26,32 +26,32 @@\n   protected final Tracer tracer;\n \n   protected BaseTypedTracer() {\n-    tracer = OpenTelemetry.getTracerFactory().get(getInstrumentationName(), getVersion());\n+    tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n   protected abstract String getInstrumentationName();\n \n   protected abstract String getVersion();\n \n-  public final T startSpan(INSTANCE instance) {\n+  public final T startSpan(final INSTANCE instance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5Nzk0Ng=="}, "originalCommit": {"oid": "1b3234bea4e6f27f316d061c52590186358e6a39"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 529, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}