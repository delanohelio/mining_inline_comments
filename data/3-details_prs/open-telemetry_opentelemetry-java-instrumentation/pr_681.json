{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjU3MzU4", "number": 681, "title": "Lettuce and Cassandra migrated from deprecated Decarator to new Tracer", "bodyText": "", "createdAt": "2020-07-13T13:30:07Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681", "merged": true, "mergeCommit": {"oid": "23ae6980d55ac5335b8217ada1e6a78ba6f5f20f"}, "closed": true, "closedAt": "2020-07-15T10:37:23Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0hYBbgH2gAyNDQ4MjU3MzU4OmZjMTQxZTQ0ZGRlMTc0YTRhMzJiZTQyYTk2MmJiNGY2MzU1MGYwOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc05wwJgFqTQ0ODMzMDMxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fc141e44dde174a4a32be42a962bb4f63550f098", "committedDate": "2020-07-13T13:23:15Z", "message": "Lettuce and Cassandra migrated from deprecated Decarator to new Tracer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDIwMzM4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#pullrequestreview-447420338", "createdAt": "2020-07-13T16:41:54Z", "commit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MTo1NFrOGwwx_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzozNToxNVrOGwyu1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NDA2MA==", "bodyText": "swap arg order to match startSpan(String, CONNECTION, String)?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Span startSpan(CONNECTION connection, QUERY query, String originType) {\n          \n          \n            \n              public Span startSpan(QUERY query, CONNECTION connection, String originType) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453784060", "createdAt": "2020-07-13T16:41:54Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -40,37 +47,60 @@ public DatabaseClientTracer() {\n     tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n-  // TODO make abstract when implemented in all subclasses\n-  protected String getInstrumentationName() {\n-    return null;\n-  }\n-\n-  private String getVersion() {\n-    return null;\n-  }\n-\n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n-  }\n-\n   public Span startSpan(CONNECTION connection, QUERY query, String originType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NTMwOQ==", "bodyText": "remove?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //    final String spanName = command == null ? \"Redis Command\" : command.getType().name();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453795309", "createdAt": "2020-07-13T17:00:35Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -38,11 +36,9 @@\n   private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n \n   public static SpanWithScope beforeCommand(final RedisCommand<?, ?, ?> command) {\n-    final String spanName = command == null ? \"Redis Command\" : command.getType().name();\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(spanName).setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    return new SpanWithScope(span, currentContextWith(span));\n+    //    final String spanName = command == null ? \"Redis Command\" : command.getType().name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5NjA2Ng==", "bodyText": "can be pulled up into outer, e.g. if / else if / else", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453796066", "createdAt": "2020-07-13T17:01:47Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -52,45 +48,41 @@ public static void afterCommand(\n       final AsyncCommand<?, ?, ?> asyncCommand) {\n     final Span span = spanWithScope.getSpan();\n     if (throwable != null) {\n-      LettuceClientDecorator.DECORATE.onError(span, throwable);\n-      LettuceClientDecorator.DECORATE.beforeFinish(span);\n-      span.end();\n+      LettuceDatabaseClientTracer.TRACER.endExceptionally(span, throwable);\n     } else if (expectsResponse(command)) {\n       asyncCommand.handleAsync(\n           (value, ex) -> {\n-            if (ex instanceof CancellationException) {\n-              span.setAttribute(\"db.command.cancelled\", true);\n+            if (ex == null) {\n+              LettuceDatabaseClientTracer.TRACER.end(span);\n             } else {\n-              LettuceClientDecorator.DECORATE.onError(span, ex);\n+              if (ex instanceof CancellationException) {\n+                span.setAttribute(\"db.command.cancelled\", true);\n+                LettuceDatabaseClientTracer.TRACER.end(span);\n+              } else {\n+                LettuceDatabaseClientTracer.TRACER.endExceptionally(span, ex);\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxNDE5Mg==", "bodyText": "conditional not needed(?)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (scope != null) {\n          \n          \n            \n                  scope.close();\n          \n          \n            \n                }\n          \n          \n            \n                scope.close();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453814192", "createdAt": "2020-07-13T17:32:01Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_0/ConnectionFutureAdvice.java", "diffHunk": "@@ -16,41 +16,39 @@\n \n package io.opentelemetry.auto.instrumentation.lettuce.v5_0;\n \n-import static io.opentelemetry.trace.Span.Kind.CLIENT;\n-import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n+import static io.opentelemetry.auto.instrumentation.lettuce.v5_0.LettuceDatabaseClientTracer.TRACER;\n \n import io.lettuce.core.ConnectionFuture;\n import io.lettuce.core.RedisURI;\n-import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n \n public class ConnectionFutureAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope onEnter(@Advice.Argument(1) final RedisURI redisURI) {\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(\"CONNECT\").setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    LettuceClientDecorator.DECORATE.onConnection(span, redisURI);\n-    return new SpanWithScope(span, currentContextWith(span));\n+  public static void onEnter(\n+      @Advice.Argument(1) final RedisURI redisURI,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    span = TRACER.startSpan(\"CONNECT\", redisURI, null);\n+    scope = TRACER.startScope(span);\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void stopSpan(\n-      @Advice.Enter final SpanWithScope spanWithScope,\n       @Advice.Thrown final Throwable throwable,\n-      @Advice.Return final ConnectionFuture<?> connectionFuture) {\n-    final Span span = spanWithScope.getSpan();\n+      @Advice.Return final ConnectionFuture<?> connectionFuture,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope != null) {\n+      scope.close();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxNDM1Ng==", "bodyText": "conditional not needed(?)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (scope != null) {\n          \n          \n            \n                  scope.close();\n          \n          \n            \n                }\n          \n          \n            \n                scope.close();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453814356", "createdAt": "2020-07-13T17:32:17Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_0/LettuceAsyncCommandsAdvice.java", "diffHunk": "@@ -16,55 +16,48 @@\n \n package io.opentelemetry.auto.instrumentation.lettuce.v5_0;\n \n+import static io.opentelemetry.auto.instrumentation.lettuce.v5_0.LettuceDatabaseClientTracer.TRACER;\n import static io.opentelemetry.auto.instrumentation.lettuce.v5_0.LettuceInstrumentationUtil.expectsResponse;\n-import static io.opentelemetry.trace.Span.Kind.CLIENT;\n-import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n \n import io.lettuce.core.protocol.AsyncCommand;\n import io.lettuce.core.protocol.RedisCommand;\n-import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.Span;\n import net.bytebuddy.asm.Advice;\n \n public class LettuceAsyncCommandsAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope onEnter(@Advice.Argument(0) final RedisCommand command) {\n+  public static void onEnter(\n+      @Advice.Argument(0) final RedisCommand<?, ?, ?> command,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n \n-    final Span span =\n-        LettuceClientDecorator.TRACER\n-            .spanBuilder(LettuceInstrumentationUtil.getCommandName(command))\n-            .setSpanKind(CLIENT)\n-            .startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-\n-    return new SpanWithScope(span, currentContextWith(span));\n+    span = TRACER.startSpan(null, command, null);\n+    scope = TRACER.startScope(span);\n   }\n \n   @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n   public static void stopSpan(\n-      @Advice.Argument(0) final RedisCommand command,\n-      @Advice.Enter final SpanWithScope spanWithScope,\n+      @Advice.Argument(0) final RedisCommand<?, ?, ?> command,\n       @Advice.Thrown final Throwable throwable,\n-      @Advice.Return final AsyncCommand<?, ?, ?> asyncCommand) {\n+      @Advice.Return final AsyncCommand<?, ?, ?> asyncCommand,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    if (scope != null) {\n+      scope.close();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxNjAyMg==", "bodyText": "nice catch on this duplicatation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r453816022", "createdAt": "2020-07-13T17:35:15Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_0/rx/LettuceFluxTerminationRunnable.java", "diffHunk": "@@ -74,25 +73,18 @@ public void accept(final Signal signal) {\n \n   @Override\n   public void run() {\n-    if (span != null) {\n-      finishSpan(true, null);\n-    } else {\n-      LoggerFactory.getLogger(Flux.class)\n-          .error(\n-              \"Failed to finish this.span to indicate cancellation, LettuceFluxTerminationRunnable\"\n-                  + \" cannot find this.span because it probably wasn't started.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc141e44dde174a4a32be42a962bb4f63550f098"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faebddc59b15e7fe40fc26cd4757aa3b88a95649", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/faebddc59b15e7fe40fc26cd4757aa3b88a95649", "committedDate": "2020-07-13T18:07:38Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4cff94bf69b980eae3bf76a403c047cdd4b01910", "committedDate": "2020-07-13T18:29:53Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDk5MjM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#pullrequestreview-447499239", "createdAt": "2020-07-13T18:31:22Z", "commit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzA1NTI1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#pullrequestreview-447705525", "createdAt": "2020-07-14T00:36:34Z", "commit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDozNjozNFrOGw_qAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1NDoxOVrOGxAAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyNzc3Nw==", "bodyText": "Shouldn't spanName(query) be called in the overload that accepts a query, not here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454027777", "createdAt": "2020-07-14T00:36:34Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -40,37 +47,60 @@ public DatabaseClientTracer() {\n     tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n-  // TODO make abstract when implemented in all subclasses\n-  protected String getInstrumentationName() {\n-    return null;\n-  }\n-\n-  private String getVersion() {\n-    return null;\n-  }\n-\n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n-  }\n-\n   public Span startSpan(CONNECTION connection, QUERY query, String originType) {\n     String normalizedQuery = normalizeQuery(query);\n \n+    return startSpan(normalizedQuery, connection, originType);\n+  }\n+\n+  public Span startSpan(String spanName, CONNECTION connection, String originType) {\n     final Span span =\n         tracer\n-            .spanBuilder(spanName(normalizedQuery))\n+            .spanBuilder(spanName(spanName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyNzgyOQ==", "bodyText": "Shouldn't onStatement only be called in the overload that accepts a query, onStatement(span, normalizedQuery)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454027829", "createdAt": "2020-07-14T00:36:47Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -40,37 +47,60 @@ public DatabaseClientTracer() {\n     tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n-  // TODO make abstract when implemented in all subclasses\n-  protected String getInstrumentationName() {\n-    return null;\n-  }\n-\n-  private String getVersion() {\n-    return null;\n-  }\n-\n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n-  }\n-\n   public Span startSpan(CONNECTION connection, QUERY query, String originType) {\n     String normalizedQuery = normalizeQuery(query);\n \n+    return startSpan(normalizedQuery, connection, originType);\n+  }\n+\n+  public Span startSpan(String spanName, CONNECTION connection, String originType) {\n     final Span span =\n         tracer\n-            .spanBuilder(spanName(normalizedQuery))\n+            .spanBuilder(spanName(spanName))\n             .setSpanKind(CLIENT)\n             .setAttribute(SemanticAttributes.DB_TYPE.key(), dbType())\n             .setAttribute(\"span.origin.type\", originType)\n             .startSpan();\n \n-    onConnection(span, connection);\n-    onPeerConnection(span, connection);\n-    onStatement(span, normalizedQuery);\n+    if (connection != null) {\n+      onConnection(span, connection);\n+      onPeerConnection(span, connection);\n+    }\n+    onStatement(span, spanName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyODIxNQ==", "bodyText": "Just a note not necessarily this PR but I was confused by having both onConnection and onPeerConnection, I think a connection always has a peer. Based on the javadoc, maybe it's onConnectionAttempt and onConnectionComplete but not quite sure", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454028215", "createdAt": "2020-07-14T00:37:57Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -87,17 +117,14 @@ protected Span afterStart(final Span span) {\n   }\n \n   /** This should be called when the connection is being used, not when it's created. */\n-  public Span onConnection(final Span span, final CONNECTION connection) {\n-    assert span != null;\n-    if (connection != null) {\n-      span.setAttribute(SemanticAttributes.DB_USER.key(), dbUser(connection));\n-      span.setAttribute(SemanticAttributes.DB_INSTANCE.key(), dbInstance(connection));\n-      span.setAttribute(SemanticAttributes.DB_URL.key(), dbUrl(connection));\n-    }\n+  protected Span onConnection(final Span span, final CONNECTION connection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAyOTU3MA==", "bodyText": "Filed #688 since seems important", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454029570", "createdAt": "2020-07-14T00:42:17Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -84,6 +80,57 @@ public Span startSpan(\n     return span;\n   }\n \n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope startScope(Span span, STORAGE storage) {\n+    // TODO we could do this in one go, but TracingContextUtils.CONTEXT_SPAN_KEY is private\n+    Context serverSpanContext = Context.current().withValue(CONTEXT_SERVER_SPAN_KEY, span);\n+    Context newContext = withSpan(span, serverSpanContext);\n+    attachServerContext(newContext, storage);\n+    return withScopedContext(newContext);\n+  }\n+\n+  // TODO should end methods remove SPAN attribute from request as well?\n+  public void end(Span span, int responseStatus) {\n+    setStatus(span, responseStatus);\n+    span.end();\n+  }\n+\n+  /** Ends given span exceptionally with default response status code 500. */\n+  public void endExceptionally(Span span, Throwable throwable) {\n+    endExceptionally(span, throwable, 500);\n+  }\n+\n+  public void endExceptionally(Span span, Throwable throwable, int responseStatus) {\n+    if (responseStatus == 200) {\n+      // TODO I think this is wrong.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMDYxNg==", "bodyText": "I think we can be setting null here which is surprising, but same as previous code", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454030616", "createdAt": "2020-07-14T00:45:38Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientTracer.java", "diffHunk": "@@ -40,37 +47,60 @@ public DatabaseClientTracer() {\n     tracer = OpenTelemetry.getTracerProvider().get(getInstrumentationName(), getVersion());\n   }\n \n-  // TODO make abstract when implemented in all subclasses\n-  protected String getInstrumentationName() {\n-    return null;\n-  }\n-\n-  private String getVersion() {\n-    return null;\n-  }\n-\n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n-  }\n-\n   public Span startSpan(CONNECTION connection, QUERY query, String originType) {\n     String normalizedQuery = normalizeQuery(query);\n \n+    return startSpan(normalizedQuery, connection, originType);\n+  }\n+\n+  public Span startSpan(String spanName, CONNECTION connection, String originType) {\n     final Span span =\n         tracer\n-            .spanBuilder(spanName(normalizedQuery))\n+            .spanBuilder(spanName(spanName))\n             .setSpanKind(CLIENT)\n             .setAttribute(SemanticAttributes.DB_TYPE.key(), dbType())\n             .setAttribute(\"span.origin.type\", originType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMTMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(null, command, null);\n          \n          \n            \n                final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(/* connection= */ null, command, /* originType= */ null);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454031330", "createdAt": "2020-07-14T00:47:58Z", "author": {"login": "anuraaga"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -38,11 +36,8 @@\n   private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n \n   public static SpanWithScope beforeCommand(final RedisCommand<?, ?, ?> command) {\n-    final String spanName = command == null ? \"Redis Command\" : command.getType().name();\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(spanName).setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    return new SpanWithScope(span, currentContextWith(span));\n+    final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(null, command, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMTUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Span span = TRACER.startSpan(session, query, null);\n          \n          \n            \n                final Span span = TRACER.startSpan(session, query, /* originType= */ null);\n          \n      \n    \n    \n  \n\nThough using null origin seems to be a pattern, maybe can have an overload", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454031509", "createdAt": "2020-07-14T00:48:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/cassandra/cassandra-4.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v4_0/TracingCqlSession.java", "diffHunk": "@@ -232,36 +224,36 @@ public ResultSet execute(@NonNull String query) {\n   @NonNull\n   public CompletionStage<AsyncResultSet> executeAsync(@NonNull Statement<?> statement) {\n     final String query = getQuery(statement);\n-    final Span span = startSpan(query);\n \n-    try (final Scope scope = currentContextWith(span)) {\n+    final Span span = TRACER.startSpan(session, query, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjUyMg==", "bodyText": "So many optional parameters does make this API a bit suspicious - would be good to confirm we got the right abstraction here. I sort of wonder if it's possible for the instrumentation tracer to define the API expected for the instrumentation rather than leaking the base class API over here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454032522", "createdAt": "2020-07-14T00:51:20Z", "author": {"login": "anuraaga"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -38,11 +36,8 @@\n   private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n \n   public static SpanWithScope beforeCommand(final RedisCommand<?, ?, ?> command) {\n-    final String spanName = command == null ? \"Redis Command\" : command.getType().name();\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(spanName).setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    return new SpanWithScope(span, currentContextWith(span));\n+    final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(null, command, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMTMzMA=="}, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMzUxNQ==", "bodyText": "I think we do need to solve @trask's suggestion, probably by having methods with different names. It's super-confusing to see methods used in the same file with different ordering, looked like a bug at first.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454033515", "createdAt": "2020-07-14T00:54:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -52,45 +47,39 @@ public static void afterCommand(\n       final AsyncCommand<?, ?, ?> asyncCommand) {\n     final Span span = spanWithScope.getSpan();\n     if (throwable != null) {\n-      LettuceClientDecorator.DECORATE.onError(span, throwable);\n-      LettuceClientDecorator.DECORATE.beforeFinish(span);\n-      span.end();\n+      LettuceDatabaseClientTracer.TRACER.endExceptionally(span, throwable);\n     } else if (expectsResponse(command)) {\n       asyncCommand.handleAsync(\n           (value, ex) -> {\n-            if (ex instanceof CancellationException) {\n+            if (ex == null) {\n+              LettuceDatabaseClientTracer.TRACER.end(span);\n+            } else if (ex instanceof CancellationException) {\n               span.setAttribute(\"db.command.cancelled\", true);\n+              LettuceDatabaseClientTracer.TRACER.end(span);\n             } else {\n-              LettuceClientDecorator.DECORATE.onError(span, ex);\n+              LettuceDatabaseClientTracer.TRACER.endExceptionally(span, ex);\n             }\n-            LettuceClientDecorator.DECORATE.beforeFinish(span);\n-            span.end();\n             return null;\n           });\n     } else {\n       // No response is expected, so we must finish the span now.\n-      LettuceClientDecorator.DECORATE.beforeFinish(span);\n-      span.end();\n+      LettuceDatabaseClientTracer.TRACER.end(span);\n     }\n     spanWithScope.closeScope();\n-    // span may be finished by handleAsync call above.\n   }\n \n   public static SpanWithScope beforeConnect(final RedisURI redisURI) {\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(\"CONNECT\").setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    LettuceClientDecorator.DECORATE.onConnection(span, redisURI);\n-    return new SpanWithScope(span, currentContextWith(span));\n+    final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(\"CONNECT\", redisURI, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cffcfc4c0caab1b51e33d7e85683d41b011ceff8", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cffcfc4c0caab1b51e33d7e85683d41b011ceff8", "committedDate": "2020-07-14T10:22:24Z", "message": "Split a connection specific handling out of Lettuce database client tracers.\n\nThis eliminates the need of awkward method override in the common DatabaseClientTracer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fdb7456cd251f72eaec2bca6fa7bd0a15fbd4b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/57fdb7456cd251f72eaec2bca6fa7bd0a15fbd4b", "committedDate": "2020-07-14T11:17:02Z", "message": "Muzzle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1be7f17456eff82d150f468e5ec113c9eb0c6d5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c1be7f17456eff82d150f468e5ec113c9eb0c6d5", "committedDate": "2020-07-14T11:41:03Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDc4NjQw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#pullrequestreview-448078640", "createdAt": "2020-07-14T12:55:56Z", "commit": {"oid": "c1be7f17456eff82d150f468e5ec113c9eb0c6d5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo1NTo1NlrOGxSaVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo1NjozN1rOGxSb7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzNTA2Mw==", "bodyText": "Makes sense. Still recommend the \"param docs\" to make this a but clearer.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454335063", "createdAt": "2020-07-14T12:55:56Z", "author": {"login": "anuraaga"}, "path": "instrumentation/lettuce/lettuce-4.0/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v4_0/InstrumentationPoints.java", "diffHunk": "@@ -38,11 +36,8 @@\n   private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n \n   public static SpanWithScope beforeCommand(final RedisCommand<?, ?, ?> command) {\n-    final String spanName = command == null ? \"Redis Command\" : command.getType().name();\n-    final Span span =\n-        LettuceClientDecorator.TRACER.spanBuilder(spanName).setSpanKind(CLIENT).startSpan();\n-    LettuceClientDecorator.DECORATE.afterStart(span);\n-    return new SpanWithScope(span, currentContextWith(span));\n+    final Span span = LettuceDatabaseClientTracer.TRACER.startSpan(null, command, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMTMzMA=="}, "originalCommit": {"oid": "4cff94bf69b980eae3bf76a403c047cdd4b01910"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzNTQ3MA==", "bodyText": "Believe we don't want to add this to prevent conflict with other PR which will delete it right away", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#discussion_r454335470", "createdAt": "2020-07-14T12:56:37Z", "author": {"login": "anuraaga"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/TracingSession.java", "diffHunk": "@@ -81,78 +76,79 @@ public Session apply(final Session session) {\n   }\n \n   @Override\n-  public ResultSet execute(final String query) {\n-    final Span span = startSpan(query);\n-    try (final Scope scope = currentContextWith(span)) {\n+  @NonNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1be7f17456eff82d150f468e5ec113c9eb0c6d5"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzMwMzEz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/681#pullrequestreview-448330313", "createdAt": "2020-07-14T17:47:59Z", "commit": {"oid": "c1be7f17456eff82d150f468e5ec113c9eb0c6d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3102, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}