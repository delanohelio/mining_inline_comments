{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNDc4MDkw", "number": 1628, "title": "Autoinstrumentation for Struts2 actions", "bodyText": "This PR adds autoinstrumentation for Struts2 MVC framework. It does 2 things:\n\nCreate an internal span for Struts action invocations while catching exceptions properly (by default struts will catch all exceptions and report that a http call was successful, even if action handling exploded). Internal span has properly filled code.namespace and code.function.\nFor configuration with parameter values encoded in servlet path, update server span name with properly encoded variable names as specified in struts configuration.\n\nInstrumentation doesn't support Struts 1, which is EOL-ed long ago.", "createdAt": "2020-11-13T09:59:45Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628", "merged": true, "mergeCommit": {"oid": "3dbab606c7ef636aca158ae4f2ad98c7fcd7e80a"}, "closed": true, "closedAt": "2020-11-17T18:45:50Z", "author": {"login": "vovencij"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdavpTTgH2gAyNTIwNDc4MDkwOjIyMmM3N2Q5NzNlNjczMmY3YjhkNjk1MjkwYmE5OGUwZmQ0NDA5M2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddabLBgFqTUzMjQxNjYxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "222c77d973e6732f7b8d695290ba98e0fd44093d", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/222c77d973e6732f7b8d695290ba98e0fd44093d", "committedDate": "2020-11-09T07:29:55Z", "message": "Struts PoC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "148d25c1455a854df3dcb0105dfd9f647deaac0b", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/148d25c1455a854df3dcb0105dfd9f647deaac0b", "committedDate": "2020-11-09T13:47:18Z", "message": "Instrument ActionInvocation to get correct timings. Refactor to use latest o11y SDK and API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545968f91b3666866af523ab158c8ee51bddaac4", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/545968f91b3666866af523ab158c8ee51bddaac4", "committedDate": "2020-11-09T14:06:50Z", "message": "Fix license header."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a1d0f4a2c8c9d8d5c3a1bb3251eddb2bf9dc6e", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0a1d0f4a2c8c9d8d5c3a1bb3251eddb2bf9dc6e", "committedDate": "2020-11-09T16:34:23Z", "message": "Revert accidental Gradle configuration change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691ca980a22e18a72f2a957c071087191089c120", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/691ca980a22e18a72f2a957c071087191089c120", "committedDate": "2020-11-10T11:35:42Z", "message": "First passing test for struts instrumentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5925bdd73a39e2e38f630550d7dab2540839efe4", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5925bdd73a39e2e38f630550d7dab2540839efe4", "committedDate": "2020-11-10T13:11:21Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be529d7316bc01808df783846eec2c67df4025ec", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be529d7316bc01808df783846eec2c67df4025ec", "committedDate": "2020-11-11T10:56:08Z", "message": "Convert Struts test to HttpServerTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ffc22ef54d9ec2e2186590acb9571a9fa6c361", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/08ffc22ef54d9ec2e2186590acb9571a9fa6c361", "committedDate": "2020-11-11T13:32:47Z", "message": "Fix Spotless formatting issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bcdfa69cc926edd6e05c2d2fbc380bc8b7c29b8", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9bcdfa69cc926edd6e05c2d2fbc380bc8b7c29b8", "committedDate": "2020-11-11T19:14:00Z", "message": "Manage scope properly in Struts advice. Use existing handlerSpan method to assert struts handler span detection. Make Struts controller behave similarly with other HttpServerTest implementations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ba2ad1c4057b8d7d269b8594406f814fc8842a", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7ba2ad1c4057b8d7d269b8594406f814fc8842a", "committedDate": "2020-11-11T19:21:13Z", "message": "Rename method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b41daf36846d1185591ed99a1ae519cbf32a10", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84b41daf36846d1185591ed99a1ae519cbf32a10", "committedDate": "2020-11-13T08:30:19Z", "message": "Update server span name when path params are used."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f87c66efddcf6acd897ee678791aa84f5f49356", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7f87c66efddcf6acd897ee678791aa84f5f49356", "committedDate": "2020-11-13T08:33:24Z", "message": "Struts PoC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70fed543175562a882bbbfc18174847f431089cb", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/70fed543175562a882bbbfc18174847f431089cb", "committedDate": "2020-11-13T08:33:24Z", "message": "Instrument ActionInvocation to get correct timings. Refactor to use latest o11y SDK and API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908189069b16ed4f38dc237f38b3f1e594d01f87", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/908189069b16ed4f38dc237f38b3f1e594d01f87", "committedDate": "2020-11-13T08:33:24Z", "message": "Fix license header."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35751553fc705f9060ddc2908e5b328eb8198454", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/35751553fc705f9060ddc2908e5b328eb8198454", "committedDate": "2020-11-13T08:33:24Z", "message": "Revert accidental Gradle configuration change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7c0b0fb9b8d0676672d266040738e4329f18421", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7c0b0fb9b8d0676672d266040738e4329f18421", "committedDate": "2020-11-13T08:33:24Z", "message": "First passing test for struts instrumentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e270752d7ccbdd29be80cf35f2385f472ab701b1", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e270752d7ccbdd29be80cf35f2385f472ab701b1", "committedDate": "2020-11-13T08:33:24Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e888d3a8b26880ad33cd7a4007823e343b6fc4c2", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e888d3a8b26880ad33cd7a4007823e343b6fc4c2", "committedDate": "2020-11-13T08:33:24Z", "message": "Convert Struts test to HttpServerTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fae45d5e1a49b3c686ca1949b323a3442feff00", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5fae45d5e1a49b3c686ca1949b323a3442feff00", "committedDate": "2020-11-13T08:33:24Z", "message": "Fix Spotless formatting issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f209ddcad9b0c0bc10292e57afa3ce6fd234bdd", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3f209ddcad9b0c0bc10292e57afa3ce6fd234bdd", "committedDate": "2020-11-13T08:33:24Z", "message": "Manage scope properly in Struts advice. Use existing handlerSpan method to assert struts handler span detection. Make Struts controller behave similarly with other HttpServerTest implementations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f9392e59aa5aa21f0bea0293c0fdffd4703a55d", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2f9392e59aa5aa21f0bea0293c0fdffd4703a55d", "committedDate": "2020-11-13T08:33:24Z", "message": "Rename method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3d859350922774614b3ba7329e4c22d414de37", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de3d859350922774614b3ba7329e4c22d414de37", "committedDate": "2020-11-13T08:33:24Z", "message": "Update server span name when path params are used."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0abfad7b43c80c0ebf518cd5bd600339d9b67e", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad0abfad7b43c80c0ebf518cd5bd600339d9b67e", "committedDate": "2020-11-13T08:33:37Z", "message": "Merge remote-tracking branch 'origin/struts' into struts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca891a41f3cf5cfe90defdae2db10d04f73dddf", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ca891a41f3cf5cfe90defdae2db10d04f73dddf", "committedDate": "2020-11-13T11:38:29Z", "message": "Account for GStrings in asserted values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9342e7180444cab1b31d4dd543c7775ea414e1cb", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9342e7180444cab1b31d4dd543c7775ea414e1cb", "committedDate": "2020-11-13T13:19:54Z", "message": "Use Groovy friendly Assert."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351a3467d9f5c3e8033c82fb2001d060fa6c0ebe", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/351a3467d9f5c3e8033c82fb2001d060fa6c0ebe", "committedDate": "2020-11-13T14:30:47Z", "message": "Giving up on getting to work user-friendly assertion messages. Moving controller to a package, as ognl inside struts can't handle classes with no packagaes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09576c457199438fd466923774682631adf488bb", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/09576c457199438fd466923774682631adf488bb", "committedDate": "2020-11-13T19:11:34Z", "message": "Make codeNarc happy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef6377ab3566382358abd292b2df990be7ec1c95", "committedDate": "2020-11-13T19:54:49Z", "message": "Make spotless happy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDMwNTQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#pullrequestreview-530430548", "createdAt": "2020-11-13T21:35:12Z", "commit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozNToxMlrOHzAUYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0NToxN1rOHzAj9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NDY0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.auto.struts-2\";\n          \n          \n            \n                return \"io.opentelemetry.auto.struts-2.0\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523244642", "createdAt": "2020-11-13T21:35:12Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.struts-2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTE0Ng==", "bodyText": "also, can you send a separate PR adding struts to the main README? (separate PR so we can wait to update the README when we release the next version)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            include ':instrumentation:struts-2'\n          \n          \n            \n            include ':instrumentation:struts-2.0'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523245146", "createdAt": "2020-11-13T21:36:37Z", "author": {"login": "trask"}, "path": "settings.gradle", "diffHunk": "@@ -188,6 +188,7 @@ include ':instrumentation:spring:starters:otlp-exporter-starter'\n include ':instrumentation:spring:starters:zipkin-exporter-starter'\n include ':instrumentation:spymemcached-2.12'\n include ':instrumentation:twilio-6.6'\n+include ':instrumentation:struts-2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ==", "bodyText": "can you submit a PR to opentelemetry-java to add these to SemanticAttributes?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523246765", "createdAt": "2020-11-13T21:40:38Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NzU1NQ==", "bodyText": "is this the minimum version that this instrumentation works with? if so, then let's rename module to struts-2.3 instead of my suggestion below of struts-2.0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523247555", "createdAt": "2020-11-13T21:42:39Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/struts-2.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.struts\"\n+    module = \"struts2-core\"\n+    versions = \"[2.3.20,)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODYyOQ==", "bodyText": "based on recent discussion in #1579\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"struts-2\");\n          \n          \n            \n                super(\"struts\", \"struts-2.0\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523248629", "createdAt": "2020-11-13T21:45:17Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static java.util.Collections.singletonList;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+\n+@AutoService(InstrumentationModule.class)\n+public class Struts2InstrumentationModule extends InstrumentationModule {\n+\n+  public Struts2InstrumentationModule() {\n+    super(\"struts-2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNTU2Nzk3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#pullrequestreview-530556797", "createdAt": "2020-11-14T05:46:41Z", "commit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNTo0Njo0MVrOHzIofg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNTo0Njo0MVrOHzIofg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDg2Mg==", "bodyText": "It looks like struts has the concept of interceptors\nhttps://struts.apache.org/core-developers/interceptors.html\nIs it possible to define an interceptor and register it, instead of instrumenting the action invocation directly? While it wouldn't need to be in this PR, it would make it much easier to separate out library, nonagent instrumentation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523380862", "createdAt": "2020-11-14T05:46:41Z", "author": {"login": "anuraaga"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e223627a549a794e6633525c1bff3ba705d0c69", "committedDate": "2020-11-14T09:58:56Z", "message": "Rename struts-2 to struts-2.3. Move autoinstrumentation to javaagent sub-folder to accommodate for library."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzYwODE3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#pullrequestreview-530760817", "createdAt": "2020-11-15T02:02:37Z", "commit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTc5NzYy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#pullrequestreview-531179762", "createdAt": "2020-11-16T10:11:32Z", "commit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMTozMlrOHzyrzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzozNVrOHzzGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2OTgzOQ==", "bodyText": "We have recently switched to using tracer()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524069839", "createdAt": "2020-11-16T10:11:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This ActionInvocation actionInvocation,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    span = TRACER.startSpan(actionInvocation);\n+    scope = TRACER.startScope(span);\n+\n+    TRACER.updateServerSpanName(Java8BytecodeBridge.currentContext(), actionInvocation.getProxy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MTcxNg==", "bodyText": "You already have this as serverSpan local variable.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524071716", "createdAt": "2020-11-16T10:13:15Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MzIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    'code.function' { it == expectedMethodName(endpoint) }\n          \n          \n            \n                    'code.function' expectedMethodName(endpoint)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524073206", "createdAt": "2020-11-16T10:14:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/test/groovy/Struts2ActionSpanTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n+import io.opentelemetry.instrumentation.test.base.HttpServerTest\n+import io.opentelemetry.sdk.trace.data.SpanData\n+import javax.servlet.DispatcherType\n+import org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.DefaultServlet\n+import org.eclipse.jetty.servlet.ServletContextHandler\n+import org.eclipse.jetty.util.resource.FileResource\n+\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n+\n+class Struts2ActionSpanTest extends HttpServerTest<Server> {\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testExceptionBody() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testError() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testRedirect() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    return true\n+  }\n+\n+  String expectedServerSpanName(ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? getContextPath() + \"/path/{id}/param\" : endpoint.resolvePath(address).path\n+  }\n+\n+  String expectedHandlerName(ServerEndpoint serverEndpoint) {\n+    return \"GreetingAction.\" + expectedMethodName(serverEndpoint)\n+  }\n+\n+  String expectedMethodName(ServerEndpoint endpoint) {\n+    switch (endpoint) {\n+      case QUERY_PARAM: return \"query\"\n+      case EXCEPTION: return \"exception\"\n+      case PATH_PARAM: return \"pathParam\"\n+      default: return \"success\"\n+    }\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, int index, Object parent, String method, ServerEndpoint endpoint) {\n+    trace.span(index) {\n+      name expectedHandlerName(endpoint)\n+      kind Span.Kind.INTERNAL\n+      errored endpoint == EXCEPTION\n+      if (endpoint == EXCEPTION) {\n+        errorEvent(Exception, EXCEPTION.body)\n+      }\n+      attributes {\n+        'code.namespace' \"io.opentelemetry.struts.GreetingAction\"\n+        'code.function' { it == expectedMethodName(endpoint) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NTU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              compileOnly group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n          \n          \n            \n            \n          \n          \n            \n              testImplementation group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n          \n          \n            \n              library group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524075567", "createdAt": "2020-11-16T10:16:34Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/struts-2.3-javaagent.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.struts\"\n+    module = \"struts2-core\"\n+    versions = \"[2.3.20,)\"\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n+\n+  testImplementation group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjM2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            include ':instrumentation:twilio-6.6'\n          \n          \n            \n            include ':instrumentation:struts-2.3:javaagent'\n          \n          \n            \n            include ':instrumentation:struts-2.3:javaagent'\n          \n          \n            \n            include ':instrumentation:twilio-6.6'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524076369", "createdAt": "2020-11-16T10:17:19Z", "author": {"login": "iNikem"}, "path": "settings.gradle", "diffHunk": "@@ -188,6 +188,7 @@ include ':instrumentation:spring:starters:otlp-exporter-starter'\n include ':instrumentation:spring:starters:zipkin-exporter-starter'\n include ':instrumentation:spymemcached-2.12'\n include ':instrumentation:twilio-6.6'\n+include ':instrumentation:struts-2.3:javaagent'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjYwNg==", "bodyText": "Why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524076606", "createdAt": "2020-11-16T10:17:35Z", "author": {"login": "iNikem"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/asserts/AttributesAssert.groovy", "diffHunk": "@@ -41,7 +41,7 @@ class AttributesAssert {\n     } else if (value instanceof Closure) {\n       assert ((Closure) value).call(val)\n     } else {\n-      assert val == value\n+      assert value == val", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ae07c3e2caf216ea3992a1f4d2f70216f3005ee", "committedDate": "2020-11-17T08:58:32Z", "message": "Use tracer() instead of TRACER and other minor tweaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d74f0cffda169195904f9d5a2649c2c656b0f6", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c8d74f0cffda169195904f9d5a2649c2c656b0f6", "committedDate": "2020-11-17T09:03:21Z", "message": "Nicer way for asserting values returned from a method call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed95366fb14054f5c5fe433872dfcd26856cbef9", "author": {"user": {"login": "vovencij", "name": "Vladimir \u0160or"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed95366fb14054f5c5fe433872dfcd26856cbef9", "committedDate": "2020-11-17T10:24:36Z", "message": "Fix formatting."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDE2NjEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#pullrequestreview-532416610", "createdAt": "2020-11-17T14:28:15Z", "commit": {"oid": "ed95366fb14054f5c5fe433872dfcd26856cbef9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2222, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}