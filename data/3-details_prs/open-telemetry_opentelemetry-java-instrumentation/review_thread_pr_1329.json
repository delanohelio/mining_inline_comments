{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Mjk4Mjg0", "number": 1329, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyNToxNVrOEqlPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzowNDowOVrOEq_oow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDg1ODEzOnYy", "diffSide": "LEFT", "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyNToxNVrOHc3hVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzoxMTozMFrOHdhE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMTgyOQ==", "bodyText": "This is a regression, but I want to fix forward. Previously auto instrumentation got the address from the channel builder, but it seems weird to force that into library instrumentation too. gRPC does have a remote transport address attribute with some behavior difference between versions. Want to dig into that more as a followup instead of having to add address as a parameter to the interceptor's factories. How does that sound?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1329#discussion_r500031829", "createdAt": "2020-10-06T06:25:15Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -77,8 +85,6 @@ class GrpcTest extends AgentTestRunner {\n             \"${SemanticAttributes.RPC_SYSTEM.key()}\" \"grpc\"\n             \"${SemanticAttributes.RPC_SERVICE.key()}\" \"example.Greeter\"\n             \"${SemanticAttributes.RPC_METHOD.key()}\" \"SayHello\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29348d125853dd734d7e0894a5904b036d3c24d1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMjcwMA==", "bodyText": "No objection from me, let's create a tracking issue for this if @iNikem does not object.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1329#discussion_r500712700", "createdAt": "2020-10-07T03:11:30Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -77,8 +85,6 @@ class GrpcTest extends AgentTestRunner {\n             \"${SemanticAttributes.RPC_SYSTEM.key()}\" \"grpc\"\n             \"${SemanticAttributes.RPC_SERVICE.key()}\" \"example.Greeter\"\n             \"${SemanticAttributes.RPC_METHOD.key()}\" \"SayHello\"\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMTgyOQ=="}, "originalCommit": {"oid": "29348d125853dd734d7e0894a5904b036d3c24d1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTE4MTIyOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/testing/grpc-1.5-testing.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzowMzoxNlrOHdg84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzowMzoxNlrOHdg84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMDYyNg==", "bodyText": "are these dependencies needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'\n          \n          \n            \n            \n          \n          \n            \n              implementation deps.guava", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1329#discussion_r500710626", "createdAt": "2020-10-07T03:03:16Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/testing/grpc-1.5-testing.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+plugins {\n+  id \"java-library\"\n+  id \"com.google.protobuf\" version \"0.8.13\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def grpcVersion = '1.5.0'\n+\n+protobuf {\n+  protoc {\n+    // Download compiler rather than using locally installed version:\n+    artifact = 'com.google.protobuf:protoc:3.3.0'\n+  }\n+  plugins {\n+    grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" }\n+  }\n+  generateProtoTasks {\n+    all()*.plugins { grpc {} }\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(project(':instrumentation:grpc-1.5:library'))\n+\n+  api project(':testing-common')\n+\n+  api group: 'io.grpc', name: 'grpc-core', version: grpcVersion\n+  api group: 'io.grpc', name: 'grpc-protobuf', version: grpcVersion\n+  api group: 'io.grpc', name: 'grpc-stub', version: grpcVersion\n+\n+  implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'\n+\n+  implementation deps.guava\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10831c4902595b667d6e8262d99e381fe170bedb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTE4MjQzOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/testing/grpc-1.5-testing.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMzowNDowOVrOHdg9rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDowNTo1MlrOHdh1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMDgyOQ==", "bodyText": "it's amazing to me that this does not create a cyclic dependency\nthe test that uses GrpcHelper does look a bit suspicious (using the same method to verify the status as was used to map the status), maybe better to add an extra spock data column to those test for otelStatus?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1329#discussion_r500710829", "createdAt": "2020-10-07T03:04:09Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/testing/grpc-1.5-testing.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+plugins {\n+  id \"java-library\"\n+  id \"com.google.protobuf\" version \"0.8.13\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def grpcVersion = '1.5.0'\n+\n+protobuf {\n+  protoc {\n+    // Download compiler rather than using locally installed version:\n+    artifact = 'com.google.protobuf:protoc:3.3.0'\n+  }\n+  plugins {\n+    grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" }\n+  }\n+  generateProtoTasks {\n+    all()*.plugins { grpc {} }\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(project(':instrumentation:grpc-1.5:library'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10831c4902595b667d6e8262d99e381fe170bedb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcyNTI0Mw==", "bodyText": "Previously I was avoiding having to duplicate the statuscode mapping in the logic, its unit test, and here too. Now it's always one status though so no reason to use the helper :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1329#discussion_r500725243", "createdAt": "2020-10-07T04:05:52Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/testing/grpc-1.5-testing.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+plugins {\n+  id \"java-library\"\n+  id \"com.google.protobuf\" version \"0.8.13\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def grpcVersion = '1.5.0'\n+\n+protobuf {\n+  protoc {\n+    // Download compiler rather than using locally installed version:\n+    artifact = 'com.google.protobuf:protoc:3.3.0'\n+  }\n+  plugins {\n+    grpc { artifact = \"io.grpc:protoc-gen-grpc-java:${grpcVersion}\" }\n+  }\n+  generateProtoTasks {\n+    all()*.plugins { grpc {} }\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(project(':instrumentation:grpc-1.5:library'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxMDgyOQ=="}, "originalCommit": {"oid": "10831c4902595b667d6e8262d99e381fe170bedb"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4802, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}