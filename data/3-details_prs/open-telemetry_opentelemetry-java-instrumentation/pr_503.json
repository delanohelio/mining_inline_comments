{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTgzNDg4", "number": 503, "title": "Vert.x instrumentation improvements", "bodyText": "This PR adds two improvements into our support for Vert.x:\n\nUpdate Server span's name based on the Vert.x web route\nAdds context propagation support for Vert.x reactive AsyncResult", "createdAt": "2020-06-12T09:55:29Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503", "merged": true, "mergeCommit": {"oid": "c11835963fa1f2a46b53a1156026de6efb69a98f"}, "closed": true, "closedAt": "2020-06-13T20:18:31Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqM8v9gH2gAyNDMzNTgzNDg4OmFjMDVjYWEwMGY1OWRmNTQxNWU3MGJmYmFmNmU0ZmRjZjYxMDA0OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcq8zxKgFqTQzMDE2MTU0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ac05caa00f59df5415e70bfbaf6e4fdcf6100495", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ac05caa00f59df5415e70bfbaf6e4fdcf6100495", "committedDate": "2020-06-11T11:56:07Z", "message": "Support for Vert.x rx-java async tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f48b4dcbe0995a0faacaa290a5cf4e77f15e03b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f48b4dcbe0995a0faacaa290a5cf4e77f15e03b", "committedDate": "2020-06-11T14:22:42Z", "message": "Use Vert.x route for server span name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce56421683ee6593efab69c43492bfb74c2e28c", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ce56421683ee6593efab69c43492bfb74c2e28c", "committedDate": "2020-06-12T09:47:09Z", "message": "Move reactive Vert.x instrumentation into separate module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8681c1c585c1236135e209cbd17e9da022dc8695", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8681c1c585c1236135e209cbd17e9da022dc8695", "committedDate": "2020-06-12T09:52:04Z", "message": "Merge remote-tracking branch 'upstream/master' into vertx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9628685031d422f9d75efd82c9cc164458bd5990", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9628685031d422f9d75efd82c9cc164458bd5990", "committedDate": "2020-06-12T18:50:24Z", "message": "Test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1fa4c631366599ecf35172f0309ed3c3c0a4d4e5", "committedDate": "2020-06-12T19:25:49Z", "message": "Format fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDkxNzQy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#pullrequestreview-430091742", "createdAt": "2020-06-13T00:18:15Z", "commit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxODoxNVrOGjUWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjozMToyN1rOGjVQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjczNA==", "bodyText": "was this change needed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static URI address\n          \n          \n            \n              URI address", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439686734", "createdAt": "2020-06-13T00:18:15Z", "author": {"login": "trask"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "diffHunk": "@@ -63,7 +64,7 @@ abstract class HttpServerTest<SERVER> extends AgentTestRunner {\n   @Shared\n   int port\n   @Shared\n-  URI address\n+  static URI address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4ODMwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439688300", "createdAt": "2020-06-13T00:29:39Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4ODU0Nw==", "bodyText": "not needed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SneakyThrows", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439688547", "createdAt": "2020-06-13T00:31:21Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/test/groovy/server/VertxHttpServerTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package server\n+\n+import io.opentelemetry.auto.test.base.HttpServerTest\n+import io.vertx.core.AbstractVerticle\n+import io.vertx.core.DeploymentOptions\n+import io.vertx.core.Vertx\n+import io.vertx.core.VertxOptions\n+import io.vertx.core.json.JsonObject\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+import lombok.SneakyThrows\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+\n+class VertxHttpServerTest extends HttpServerTest<Vertx> {\n+  public static final String CONFIG_HTTP_SERVER_PORT = \"http.server.port\"\n+\n+  @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM1MQ==", "bodyText": "for better or worse(?), instrumentation typically catches Throwable", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697351", "createdAt": "2020-06-13T01:37:45Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465\n+        currentSpan.updateName(context.currentRoute().getPath());\n+      }\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzY2MQ==", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697661", "createdAt": "2020-06-13T01:41:47Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class RouteInstrumentation extends Instrumenter.Default {\n+\n+  public RouteInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzczMQ==", "bodyText": "this comment looks outdated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //We need both version as different versions of Vert.x use different versions of Netty", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697731", "createdAt": "2020-06-13T01:42:39Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "diffHunk": "@@ -1,35 +1,49 @@\n-// Set properties before any plugins get loaded\n ext {\n   minJavaVersionForTests = JavaVersion.VERSION_1_8\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n apply plugin: 'org.unbroken-dome.test-sets'\n \n+muzzle {\n+  pass {\n+    group = 'io.vertx'\n+    module = 'vertx-web'\n+    versions = \"[3.5.0,)\"\n+  }\n+}\n+\n testSets {\n   latestDepTest {\n     dirName = 'test'\n   }\n }\n \n-sourceCompatibility = 1.8\n-targetCompatibility = 1.8\n+//The first Vert.x version that uses rx-java 2\n+ext.vertxVersion = '3.5.0'\n \n dependencies {\n-//  compileOnly group: 'io.vertx', name: 'vertx-web', version: '3.5.0'\n+  compileOnly group: 'io.vertx', name: 'vertx-web', version: vertxVersion\n+  compileOnly group: 'io.vertx', name: 'vertx-rx-java2', version: vertxVersion\n \n+  testCompile project(':instrumentation:jdbc')\n+  //We need both version as different versions of Vert.x use different versions of Netty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5Nzc5NQ==", "bodyText": "see comment about muzzle failure \ud83d\udc4d\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                module = 'vertx-web'\n          \n          \n            \n                module = 'vertx-rx-java2'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697795", "createdAt": "2020-06-13T01:43:27Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "diffHunk": "@@ -1,35 +1,49 @@\n-// Set properties before any plugins get loaded\n ext {\n   minJavaVersionForTests = JavaVersion.VERSION_1_8\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n apply plugin: 'org.unbroken-dome.test-sets'\n \n+muzzle {\n+  pass {\n+    group = 'io.vertx'\n+    module = 'vertx-web'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzgzNA==", "bodyText": "not needed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SneakyThrows", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697834", "createdAt": "2020-06-13T01:44:17Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "diffHunk": "@@ -13,36 +13,37 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package server\n-\n import io.opentelemetry.auto.test.base.HttpServerTest\n-import io.vertx.core.AbstractVerticle\n import io.vertx.core.DeploymentOptions\n import io.vertx.core.Future\n import io.vertx.core.Vertx\n import io.vertx.core.VertxOptions\n import io.vertx.core.json.JsonObject\n-import io.vertx.ext.web.Router\n-\n+import io.vertx.reactivex.core.AbstractVerticle\n+import io.vertx.reactivex.ext.web.Router\n import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+import lombok.SneakyThrows\n \n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.ERROR\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.REDIRECT\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n \n-class VertxHttpServerTest extends HttpServerTest<Vertx> {\n+class VertxRxHttpServerTest extends HttpServerTest<Vertx> {\n   public static final String CONFIG_HTTP_SERVER_PORT = \"http.server.port\"\n \n+  @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODI4MQ==", "bodyText": "this is \"super\" weird \ud83d\ude02", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439698281", "createdAt": "2020-06-13T01:48:59Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "diffHunk": "@@ -52,30 +53,45 @@ class VertxHttpServerTest extends HttpServerTest<Vertx> {\n       future.complete(null)\n     }\n \n-    future.get()\n+    future.get(30, TimeUnit.SECONDS)\n     return server\n   }\n \n-  protected Class<io.vertx.reactivex.core.AbstractVerticle> verticle() {\n-    return VertxWebTestServer\n-  }\n-\n   @Override\n   void stopServer(Vertx server) {\n     server.close()\n   }\n \n   @Override\n   boolean testExceptionBody() {\n-    false\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n   }\n \n-  static class VertxWebTestServer extends AbstractVerticle {\n+  @Override\n+  String expectedOperationName(String method, ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? \"/path/:id/param\" : endpoint.getPath()\n+  }\n+\n+  protected Class<AbstractVerticle> verticle() {\n+    return VertxReactiveWebServer\n+  }\n+\n+  static class VertxReactiveWebServer extends AbstractVerticle {\n \n     @Override\n     void start(final Future<Void> startFuture) {\n       final int port = config().getInteger(CONFIG_HTTP_SERVER_PORT)\n-      final Router router = Router.router(vertx)\n+      final Router router = Router.router(super.@vertx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODU3OQ==", "bodyText": "keep these classes in the server package, to be consistent with vertx (non-rx) tests?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439698579", "createdAt": "2020-06-13T01:52:44Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxCircuitBreakerHttpServerTest.groovy", "diffHunk": "@@ -13,21 +13,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package server\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMDg4NA==", "bodyText": "I think this is a bug in our jdbc url parsing, it should be just test, I'll open an issue for this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439700884", "createdAt": "2020-06-13T02:23:17Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxReactivePropagationTest.groovy", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.opentelemetry.auto.instrumentation.api.MoreTags\n+import io.opentelemetry.auto.instrumentation.api.Tags\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.OkHttpUtils\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.vertx.reactivex.core.Vertx\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n+import static io.opentelemetry.auto.test.utils.TraceUtils.basicSpan\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+class VertxReactivePropagationTest extends AgentTestRunner {\n+  @Shared\n+  OkHttpClient client = OkHttpUtils.client()\n+\n+  @Shared\n+  int port\n+\n+  @Shared\n+  Vertx server\n+\n+  def setupSpec() {\n+    port = PortUtils.randomOpenPort()\n+    server = VertxReactiveWebServer.start(port)\n+  }\n+\n+  def cleanupSpec() {\n+    server.close()\n+  }\n+\n+  //Verifies that context is correctly propagated and sql query span has correct parent.\n+  //Tests io.opentelemetry.auto.instrumentation.vertx.reactive.VertxRxInstrumentation\n+  def \"should propagate context over vert.x rx-java framework\"() {\n+    setup:\n+    def url = \"http://localhost:$port/listProducts\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def response = client.newCall(request).execute()\n+\n+    expect:\n+    response.code() == SUCCESS.status\n+\n+    and:\n+    assertTraces(1) {\n+      trace(0, 4) {\n+        span(0) {\n+          operationName \"/listProducts\"\n+          spanKind SERVER\n+          errored false\n+          parent()\n+          tags {\n+            \"$MoreTags.NET_PEER_PORT\" Long\n+            \"$MoreTags.NET_PEER_IP\" { it == null || it == \"127.0.0.1\" } // Optional\n+            \"$Tags.HTTP_URL\" url\n+            \"$Tags.HTTP_METHOD\" \"GET\"\n+            \"$Tags.HTTP_STATUS\" 200\n+          }\n+        }\n+        basicSpan(it, 1, \"VertxReactiveWebServer.handleListProducts\", span(0))\n+        basicSpan(it, 2, \"VertxReactiveWebServer.listProducts\", span(1))\n+        span(3) {\n+          operationName \"SELECT id, name, price, weight FROM products\"\n+          spanKind CLIENT\n+          childOf span(2)\n+          errored false\n+          tags {\n+            \"$Tags.DB_TYPE\" \"sql\"\n+            \"$Tags.DB_INSTANCE\" \"test?shutdown=true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTAwNQ==", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701005", "createdAt": "2020-06-13T02:24:44Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/** This instrumentation allows span context propagation across Vert.x reactive executions. */\n+@AutoService(Instrumenter.class)\n+public class VertxRxInstrumentation extends Instrumenter.Default {\n+\n+  public VertxRxInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNw==", "bodyText": "we should start propagating the Context instead of propagating (only) the parent Span, but this applies to lots of places, I'll open an issue for it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701517", "createdAt": "2020-06-13T02:31:27Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/AsyncResultConsumerWrapper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.function.Consumer;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class AsyncResultConsumerWrapper implements Consumer<Handler<AsyncResult<?>>> {\n+  private final Consumer<Handler<AsyncResult<?>>> delegate;\n+  private final Span parentSpan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b1bcd80e1b5911a65d30ecbc40b8e49241751aa", "committedDate": "2020-06-13T13:50:27Z", "message": "Polish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab14e74e1693bfb74cdf61e7ec0d28adb566f7bf", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ab14e74e1693bfb74cdf61e7ec0d28adb566f7bf", "committedDate": "2020-06-13T17:33:52Z", "message": "Merge branch 'master' into vertx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTU2Njgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#pullrequestreview-430156681", "createdAt": "2020-06-13T18:19:47Z", "commit": {"oid": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxOTo0OFrOGjYuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxOTo0OFrOGjYuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1ODM5MQ==", "bodyText": "extra copyright header below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439758391", "createdAt": "2020-06-13T18:19:48Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/server/VertxRxCircuitBreakerHttpServerTest.groovy", "diffHunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27b2335d4b5f615e65a7e0038340d4095cbd5806", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/27b2335d4b5f615e65a7e0038340d4095cbd5806", "committedDate": "2020-06-13T19:21:48Z", "message": "Fix license header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80bcd08ea556d14b92908b256e16f7f968a4d8e3", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80bcd08ea556d14b92908b256e16f7f968a4d8e3", "committedDate": "2020-06-13T19:39:56Z", "message": "Add Vert.x to README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTYxNTQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#pullrequestreview-430161544", "createdAt": "2020-06-13T19:41:45Z", "commit": {"oid": "80bcd08ea556d14b92908b256e16f7f968a4d8e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3238, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}