{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMzU1NDMw", "number": 1627, "title": "Update to Gradle 6.7 and use new toolchains feature for testing on Ja\u2026", "bodyText": "\u2026va versions.\nAlso fixes compatibility with codeNarc and Java 14+\nFixes #891", "createdAt": "2020-11-13T05:50:16Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627", "merged": true, "mergeCommit": {"oid": "d435da4638aefc7cbaafdb860c6d22f84fd68799"}, "closed": true, "closedAt": "2020-11-16T08:29:37Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcAmbGgH2gAyNTIwMzU1NDMwOjQzNDNhY2FmYWYwOWEzM2VkMjM1MjY1MmUyOGFlN2RiZWVkMjJjYmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddAsQrgFqTUzMTA3NzE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4343acafaf09a33ed2352652e28ae7dbeed22cba", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4343acafaf09a33ed2352652e28ae7dbeed22cba", "committedDate": "2020-11-13T05:49:05Z", "message": "Update to Gradle 6.7 and use new toolchains feature for testing on Java versions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2174e7268f15c244f8df0a448fa52015f555b18", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2174e7268f15c244f8df0a448fa52015f555b18", "committedDate": "2020-11-13T05:52:02Z", "message": "Update docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NzUzMjYy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-529753262", "createdAt": "2020-11-13T05:53:16Z", "commit": {"oid": "b2174e7268f15c244f8df0a448fa52015f555b18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTo1MzoxNlrOHydPZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTo1MzoxNlrOHydPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2OTkyNQ==", "bodyText": "I added this like the -java repo has since it doesn't hurt. Here, the tradeoff of test vs build time is so high that it probably doesn't make sense to take advantage of \"build once, test many\" that we do there, and instead continue to matrix in GitHub resulting in \"build + test many\" which is fine.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r522669925", "createdAt": "2020-11-13T05:53:16Z", "author": {"login": "anuraaga"}, "path": "gradle/java.gradle", "diffHunk": "@@ -218,62 +190,18 @@ def isJavaVersionAllowed(JavaVersion version) {\n   return true\n }\n \n-/**\n- * For a given java home return the location of java executable\n- */\n-static String toExecutable(String javaHome) {\n-  return Objects.requireNonNull(javaHome) + \"/bin/java\"\n-}\n-\n-/**\n- * Returns java home for a given version or {@code null} if not found\n- */\n-String findJavaHome(JavaVersion version) {\n-  def javaHome = System.getenv(\"JAVA_${version.majorVersion}_HOME\")\n-  if (javaHome == null) {\n-    return null\n+[8, 15].findAll { isJavaVersionAllowed(JavaVersion.toVersion(it)) }.each {version ->\n+  def testJavaForVersion = tasks.register(\"testJava${version}\", Test) {\n+    javaLauncher = javaToolchains.launcherFor {\n+      languageVersion = JavaLanguageVersion.of(version)\n+    }\n   }\n-  def foundVersion = getJavaHomeVersion(javaHome)\n-  return version == foundVersion ? javaHome : null\n-}\n-\n-ext {\n-  findJavaHome = this.&findJavaHome\n-  toExecutable = this.&toExecutable\n-}\n-\n-def addTestRule(String testTaskName) {\n-  def prefix = testTaskName + \"Java\"\n-  tasks.addRule(\"Pattern: $prefix<Version>: Runs tests using given java version\") { String taskName ->\n-    if (taskName.startsWith(prefix)) {\n-      def requestedJavaVersion = JavaVersion.toVersion(taskName - prefix)\n-      def gradleJavaVersion = JavaVersion.current()\n-\n-      if (gradleJavaVersion != requestedJavaVersion) {\n-        def javaHomeForTests = findJavaHome(requestedJavaVersion)\n-        if (javaHomeForTests != null) {\n-\n-          tasks.withType(Test).all {\n-            executable = toExecutable(javaHomeForTests)\n-            enabled = isJavaVersionAllowed(requestedJavaVersion)\n-          }\n-        } else {\n-          throw new BuildCancelledException(\"Requested java version $requestedJavaVersion not found\")\n-        }\n-      }\n \n-      task(taskName) {\n-        if (project.tasks.findByName(testTaskName) != null) {\n-          dependsOn testTaskName\n-        }\n-      }\n-    }\n+  if (rootProject.findProperty('testAdditionalJavaVersions') == 'true') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2174e7268f15c244f8df0a448fa52015f555b18"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7c2aa84df9d20ac9b7b238e9ca2fd071c2b13e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea7c2aa84df9d20ac9b7b238e9ca2fd071c2b13e", "committedDate": "2020-11-13T05:54:09Z", "message": "Add back sum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c454de9c19e3ce86a551ec3a8410dd3e3d2f1b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b0c454de9c19e3ce86a551ec3a8410dd3e3d2f1b", "committedDate": "2020-11-13T06:03:11Z", "message": "Use GitHub test JDK for toolchain."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NzU2NDEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-529756410", "createdAt": "2020-11-13T06:04:04Z", "commit": {"oid": "b0c454de9c19e3ce86a551ec3a8410dd3e3d2f1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjowNDowNFrOHydZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjowNDowNFrOHydZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3MjQ3Nw==", "bodyText": "We're using -bin in -java per recommendation from Gradle team I believe", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r522672477", "createdAt": "2020-11-13T06:04:04Z", "author": {"login": "anuraaga"}, "path": "build.gradle", "diffHunk": "@@ -48,10 +48,6 @@ repositories {\n \n description = 'OpenTelemetry instrumentations for Java'\n \n-wrapper {\n-  distributionType = Wrapper.DistributionType.ALL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c454de9c19e3ce86a551ec3a8410dd3e3d2f1b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37cc5b10c839c9fd808aeacfbef905a02d26a28d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/37cc5b10c839c9fd808aeacfbef905a02d26a28d", "committedDate": "2020-11-13T06:11:14Z", "message": "Use maxJavaVersionForTests for default test version when set."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2738513322299de0007270c76be8ec3c954ac28b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2738513322299de0007270c76be8ec3c954ac28b", "committedDate": "2020-11-13T06:48:33Z", "message": "Fix RMI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODc4NTg4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-529878588", "createdAt": "2020-11-13T08:49:55Z", "commit": {"oid": "2738513322299de0007270c76be8ec3c954ac28b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo0OTo1NVrOHylqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1MDo1OFrOHylsWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwNzg5NA==", "bodyText": "I don't see where do we specify this property?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r522807894", "createdAt": "2020-11-13T08:49:55Z", "author": {"login": "iNikem"}, "path": "gradle/java.gradle", "diffHunk": "@@ -218,62 +190,18 @@ def isJavaVersionAllowed(JavaVersion version) {\n   return true\n }\n \n-/**\n- * For a given java home return the location of java executable\n- */\n-static String toExecutable(String javaHome) {\n-  return Objects.requireNonNull(javaHome) + \"/bin/java\"\n-}\n-\n-/**\n- * Returns java home for a given version or {@code null} if not found\n- */\n-String findJavaHome(JavaVersion version) {\n-  def javaHome = System.getenv(\"JAVA_${version.majorVersion}_HOME\")\n-  if (javaHome == null) {\n-    return null\n+[8, 15].findAll { isJavaVersionAllowed(JavaVersion.toVersion(it)) }.each {version ->\n+  def testJavaForVersion = tasks.register(\"testJava${version}\", Test) {\n+    javaLauncher = javaToolchains.launcherFor {\n+      languageVersion = JavaLanguageVersion.of(version)\n+    }\n   }\n-  def foundVersion = getJavaHomeVersion(javaHome)\n-  return version == foundVersion ? javaHome : null\n-}\n-\n-ext {\n-  findJavaHome = this.&findJavaHome\n-  toExecutable = this.&toExecutable\n-}\n-\n-def addTestRule(String testTaskName) {\n-  def prefix = testTaskName + \"Java\"\n-  tasks.addRule(\"Pattern: $prefix<Version>: Runs tests using given java version\") { String taskName ->\n-    if (taskName.startsWith(prefix)) {\n-      def requestedJavaVersion = JavaVersion.toVersion(taskName - prefix)\n-      def gradleJavaVersion = JavaVersion.current()\n-\n-      if (gradleJavaVersion != requestedJavaVersion) {\n-        def javaHomeForTests = findJavaHome(requestedJavaVersion)\n-        if (javaHomeForTests != null) {\n-\n-          tasks.withType(Test).all {\n-            executable = toExecutable(javaHomeForTests)\n-            enabled = isJavaVersionAllowed(requestedJavaVersion)\n-          }\n-        } else {\n-          throw new BuildCancelledException(\"Requested java version $requestedJavaVersion not found\")\n-        }\n-      }\n \n-      task(taskName) {\n-        if (project.tasks.findByName(testTaskName) != null) {\n-          dependsOn testTaskName\n-        }\n-      }\n-    }\n+  if (rootProject.findProperty('testAdditionalJavaVersions') == 'true') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2OTkyNQ=="}, "originalCommit": {"oid": "b2174e7268f15c244f8df0a448fa52015f555b18"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwODQxMQ==", "bodyText": "Can you add comment explaining this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r522808411", "createdAt": "2020-11-13T08:50:58Z", "author": {"login": "iNikem"}, "path": "gradle/java.gradle", "diffHunk": "@@ -297,6 +224,12 @@ tasks.withType(Test).configureEach {\n   testLogging {\n     exceptionFormat = 'full'\n   }\n+\n+  if (!isJavaVersionAllowed(JavaVersion.toVersion(11))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2738513322299de0007270c76be8ec3c954ac28b"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a313bf76a229d9e136af957141096beeec1a76e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1a313bf76a229d9e136af957141096beeec1a76e", "committedDate": "2020-11-14T05:38:14Z", "message": "Fix configs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNTU2NDky", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-530556492", "createdAt": "2020-11-14T05:38:33Z", "commit": {"oid": "2738513322299de0007270c76be8ec3c954ac28b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNTozODozNFrOHzIl_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNTozOToyNlrOHzImNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDIyMA==", "bodyText": "Thought it could be useful from command line but on second thought guess not so much.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523380220", "createdAt": "2020-11-14T05:38:34Z", "author": {"login": "anuraaga"}, "path": "gradle/java.gradle", "diffHunk": "@@ -218,62 +190,18 @@ def isJavaVersionAllowed(JavaVersion version) {\n   return true\n }\n \n-/**\n- * For a given java home return the location of java executable\n- */\n-static String toExecutable(String javaHome) {\n-  return Objects.requireNonNull(javaHome) + \"/bin/java\"\n-}\n-\n-/**\n- * Returns java home for a given version or {@code null} if not found\n- */\n-String findJavaHome(JavaVersion version) {\n-  def javaHome = System.getenv(\"JAVA_${version.majorVersion}_HOME\")\n-  if (javaHome == null) {\n-    return null\n+[8, 15].findAll { isJavaVersionAllowed(JavaVersion.toVersion(it)) }.each {version ->\n+  def testJavaForVersion = tasks.register(\"testJava${version}\", Test) {\n+    javaLauncher = javaToolchains.launcherFor {\n+      languageVersion = JavaLanguageVersion.of(version)\n+    }\n   }\n-  def foundVersion = getJavaHomeVersion(javaHome)\n-  return version == foundVersion ? javaHome : null\n-}\n-\n-ext {\n-  findJavaHome = this.&findJavaHome\n-  toExecutable = this.&toExecutable\n-}\n-\n-def addTestRule(String testTaskName) {\n-  def prefix = testTaskName + \"Java\"\n-  tasks.addRule(\"Pattern: $prefix<Version>: Runs tests using given java version\") { String taskName ->\n-    if (taskName.startsWith(prefix)) {\n-      def requestedJavaVersion = JavaVersion.toVersion(taskName - prefix)\n-      def gradleJavaVersion = JavaVersion.current()\n-\n-      if (gradleJavaVersion != requestedJavaVersion) {\n-        def javaHomeForTests = findJavaHome(requestedJavaVersion)\n-        if (javaHomeForTests != null) {\n-\n-          tasks.withType(Test).all {\n-            executable = toExecutable(javaHomeForTests)\n-            enabled = isJavaVersionAllowed(requestedJavaVersion)\n-          }\n-        } else {\n-          throw new BuildCancelledException(\"Requested java version $requestedJavaVersion not found\")\n-        }\n-      }\n \n-      task(taskName) {\n-        if (project.tasks.findByName(testTaskName) != null) {\n-          dependsOn testTaskName\n-        }\n-      }\n-    }\n+  if (rootProject.findProperty('testAdditionalJavaVersions') == 'true') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2OTkyNQ=="}, "originalCommit": {"oid": "b2174e7268f15c244f8df0a448fa52015f555b18"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDIyNA==", "bodyText": "Yeah - also made sure it only applies to test task which I guess is more appropriate.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523380224", "createdAt": "2020-11-14T05:38:46Z", "author": {"login": "anuraaga"}, "path": "gradle/java.gradle", "diffHunk": "@@ -297,6 +224,12 @@ tasks.withType(Test).configureEach {\n   testLogging {\n     exceptionFormat = 'full'\n   }\n+\n+  if (!isJavaVersionAllowed(JavaVersion.toVersion(11))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwODQxMQ=="}, "originalCommit": {"oid": "2738513322299de0007270c76be8ec3c954ac28b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDI3Ng==", "bodyText": "Noticed that since this approach doesn't override test tasks like the previous one did, some configs get more complicated. I think it's rare so it might be ok but I can go back to the approach of overriding test instead of defining new tasks if it makes more sense.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523380276", "createdAt": "2020-11-14T05:39:26Z", "author": {"login": "anuraaga"}, "path": "testing-common/testing-common.gradle", "diffHunk": "@@ -67,6 +67,8 @@ tasks.register(\"testDisabledFieldInjection\", Test) {\n   includes = [\"context/FieldBackedProviderFieldInjectionDisabledTest.class\"]\n }\n test.dependsOn(testDisabledFieldInjection)\n-test.forkEvery 1\n+tasks.withType(Test) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a313bf76a229d9e136af957141096beeec1a76e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c0a782fa0a9718bb5481a97257ebeab47d576f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f4c0a782fa0a9718bb5481a97257ebeab47d576f", "committedDate": "2020-11-14T08:12:14Z", "message": "Go back to rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93d9c15cc5903d164acca19d19593b9ca3bc7d7c", "committedDate": "2020-11-14T08:19:16Z", "message": "Extract variable for default Java version."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY0OTM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-530764935", "createdAt": "2020-11-15T04:01:03Z", "commit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDowMTowNFrOHzcWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoxMTozMVrOHzcZhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzk4Mg==", "bodyText": "no more JAVA_X_HOME, yay!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523703982", "createdAt": "2020-11-15T04:01:04Z", "author": {"login": "trask"}, "path": ".github/workflows/nightly.yaml", "diffHunk": "@@ -51,15 +51,13 @@ jobs:\n       fail-fast: false\n     steps:\n       - uses: actions/checkout@v2\n-      - name: Set up JDK ${{ matrix.java }} for running tests\n+      - id: setup-test-java\n+        name: Set up JDK ${{ matrix.java }} for running tests\n         uses: actions/setup-java@v1\n         with:\n           java-version: ${{ matrix.java }}\n-      - name: Set JDK ${{ matrix.java }} home\n-        run: echo JAVA_${{ matrix.java }}_HOME=${{ env.JAVA_HOME }} >> $GITHUB_ENV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNDEyMA==", "bodyText": "this is so cool", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523704120", "createdAt": "2020-11-15T04:03:06Z", "author": {"login": "trask"}, "path": "docs/contributing/running-tests.md", "diffHunk": "@@ -22,14 +22,9 @@ instrumented library.\n \n #### Executing tests with specific java version\n \n-In order to run tests on a specific java version, just execute `./gradlew\n-testJava7` (or `testJava11` etc). Then Gradle task\n-rule will kick in and do the following:\n-\n-- check, if Gradle already runs on a java with required version\n-- if not, look for an environment variable named `JAVA_N_HOME`, where `N` is the requested java version\n-- if Gradle could not found requested java version, then build will fail\n-- Gradle will now find all corresponding test tasks and configure them to use java executable of the requested version.\n+We run all tests on Java 11 by default, along with Java 8 and 15. To run on the later, use\n+`./gradlew testJava8` or `./gradlew testJava15`. If you don't have a JDK of these versions\n+installed, Gradle will automatically download it for you.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNDcwOQ==", "bodyText": "nice", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#discussion_r523704709", "createdAt": "2020-11-15T04:11:31Z", "author": {"login": "trask"}, "path": "gradle/java.gradle", "diffHunk": "@@ -218,28 +193,15 @@ def isJavaVersionAllowed(JavaVersion version) {\n   return true\n }\n \n-/**\n- * For a given java home return the location of java executable\n- */\n-static String toExecutable(String javaHome) {\n-  return Objects.requireNonNull(javaHome) + \"/bin/java\"\n-}\n-\n-/**\n- * Returns java home for a given version or {@code null} if not found\n- */\n-String findJavaHome(JavaVersion version) {\n-  def javaHome = System.getenv(\"JAVA_${version.majorVersion}_HOME\")\n-  if (javaHome == null) {\n-    return null\n+// We default to testing with Java 11 for most tests, but some tests don't support it, where we change\n+// the default test task's version so commands like `./gradlew check` can test all projects regardless\n+// of Java version.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMDc3MTg1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1627#pullrequestreview-531077185", "createdAt": "2020-11-16T08:29:23Z", "commit": {"oid": "93d9c15cc5903d164acca19d19593b9ca3bc7d7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2217, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}