{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjExNDk2", "number": 523, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMToyOVrOEGdd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxNzo1M1rOEGdmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjA5NzIwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/CallDepthThreadLocalMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMToyOVrOGlRYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMjo0M1rOGlSGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTI1Mg==", "bodyText": "i think this is not used?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441735252", "createdAt": "2020-06-17T18:11:29Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/CallDepthThreadLocalMap.java", "diffHunk": "@@ -31,24 +40,36 @@ protected ThreadLocalDepth computeValue(Class<?> type) {\n         }\n       };\n \n+  public static Depth getCallDepth(final Class<?> k) {\n+    return TLS.get(k).get();\n+  }\n+\n   public static int incrementCallDepth(final Class<?> k) {\n-    return TLS.get(k).get().increment();\n+    return TLS.get(k).get().getAndIncrement();\n+  }\n+\n+  public static int decrementCallDepth(final Class<?> k) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed22cc40b6d39770963d2b8421afeae556340b3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NzA4MA==", "bodyText": "I have added it mostly for symmetry and it is used from tests", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441747080", "createdAt": "2020-06-17T18:32:43Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/CallDepthThreadLocalMap.java", "diffHunk": "@@ -31,24 +40,36 @@ protected ThreadLocalDepth computeValue(Class<?> type) {\n         }\n       };\n \n+  public static Depth getCallDepth(final Class<?> k) {\n+    return TLS.get(k).get();\n+  }\n+\n   public static int incrementCallDepth(final Class<?> k) {\n-    return TLS.get(k).get().increment();\n+    return TLS.get(k).get().getAndIncrement();\n+  }\n+\n+  public static int decrementCallDepth(final Class<?> k) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNTI1Mg=="}, "originalCommit": {"oid": "2ed22cc40b6d39770963d2b8421afeae556340b3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjExNDU3OnYy", "diffSide": "RIGHT", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxNjoyNFrOGlRjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxNjoyNFrOGlRjng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczODE0Mg==", "bodyText": "move query lookup to overloaded JdbcTracer.startSpan(Statement), since that will be useful for manual instrumentation also?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n          \n          \n            \n                    span = TRACER.startSpan(statement);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441738142", "createdAt": "2020-06-17T18:16:24Z", "author": {"login": "trask"}, "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "diffHunk": "@@ -75,28 +76,31 @@ public PreparedStatementInstrumentation() {\n     public static void onEnter(\n         @Advice.This final PreparedStatement statement,\n         @Advice.Local(\"otelSpan\") Span span,\n-        @Advice.Local(\"otelScope\") Scope scope) {\n+        @Advice.Local(\"otelScope\") Scope scope,\n+        @Advice.Local(\"otelCallDepth\") Depth callDepth) {\n \n-      span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n-      if (span != null) {\n-        scope = TRACER.withSpan(span);\n+      callDepth = TRACER.getCallDepth();\n+      if (callDepth.getAndIncrement() == 0) {\n+        span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed22cc40b6d39770963d2b8421afeae556340b3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjExOTMzOnYy", "diffSide": "RIGHT", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxNzo1M1rOGlRmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxNzo1M1rOGlRmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczODkxMg==", "bodyText": "i like this, and the corresponding callDepth.decrementAndGet() == 0 in @OnMethodExit", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/523#discussion_r441738912", "createdAt": "2020-06-17T18:17:53Z", "author": {"login": "trask"}, "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/auto/instrumentation/jdbc/PreparedStatementInstrumentation.java", "diffHunk": "@@ -75,28 +76,31 @@ public PreparedStatementInstrumentation() {\n     public static void onEnter(\n         @Advice.This final PreparedStatement statement,\n         @Advice.Local(\"otelSpan\") Span span,\n-        @Advice.Local(\"otelScope\") Scope scope) {\n+        @Advice.Local(\"otelScope\") Scope scope,\n+        @Advice.Local(\"otelCallDepth\") Depth callDepth) {\n \n-      span = TRACER.startSpan(statement, JDBCMaps.preparedStatements.get(statement));\n-      if (span != null) {\n-        scope = TRACER.withSpan(span);\n+      callDepth = TRACER.getCallDepth();\n+      if (callDepth.getAndIncrement() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed22cc40b6d39770963d2b8421afeae556340b3"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 515, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}