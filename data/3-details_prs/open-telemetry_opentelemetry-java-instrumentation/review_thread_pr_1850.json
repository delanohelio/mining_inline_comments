{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NDAzNTc5", "number": 1850, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDozNDowNVrOFHA7rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDozNDowNVrOFHA7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyODk5NjMwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNDozNDowNVrOIISxaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDowNjowOFrOIIcqHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzA4MQ==", "bodyText": "What's the use case for this flag by the way? It seems like it'd be nice if we can decide one or the other is better and stick with it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1850#discussion_r545567081", "createdAt": "2020-12-18T04:34:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer.spanBuilder(\"BatchJob \" + jobName + \".\" + stepName + \".Chunk\").setSpanKind(INTERNAL);\n+    if (shouldCreateRootSpanForChunk()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37750308ddab684aba5c6fcaf49a3d84a215edf6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyOTA1NQ==", "bodyText": "That one's controversial, I know - Spring Batch jobs can get veeery large, like millions of spans in a trace. We are still in the middle of experimenting with how to treat traces like these, one option was to split them into many smaller traces. Personally, I don't think that having a separate trace for each chunk makes sense from a semantic perspective (since it's still a single job execution), but I added this here just to be able to experiment with this. It's highly probable that it'll get removed in one of the future PRs.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1850#discussion_r545729055", "createdAt": "2020-12-18T10:06:08Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer.spanBuilder(\"BatchJob \" + jobName + \".\" + stepName + \".Chunk\").setSpanKind(INTERNAL);\n+    if (shouldCreateRootSpanForChunk()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NzA4MQ=="}, "originalCommit": {"oid": "37750308ddab684aba5c6fcaf49a3d84a215edf6"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4509, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}