{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjAxNDUx", "number": 1262, "title": "Add Prometheus metric exporter", "bodyText": "Resolves #385", "createdAt": "2020-09-26T16:58:59Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262", "merged": true, "mergeCommit": {"oid": "3f5c644885c00828967e526083749506b28ae00f"}, "closed": true, "closedAt": "2020-10-09T19:06:52Z", "author": {"login": "pavolloffay"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdM1UFdAFqTQ5NzA0MDE2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQ5kVdAFqTUwNTg2MjAyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDQwMTYw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-497040160", "createdAt": "2020-09-27T00:49:12Z", "commit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo0OToxMlrOHYjmZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo1NTozMFrOHYjoOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTE0MA==", "bodyText": "Based on the link from your spec issue (https://github.com/prometheus/prometheus/wiki/Default-port-allocations), it sounds like we should update that wiki page and reserve a default value dedicated to OpenTelemetry.\nIf we aren't ready to do that yet, I'd suggest we make port a required configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495511140", "createdAt": "2020-09-27T00:49:12Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA==", "bodyText": "TracerInstaller is going to create an IntervalMetricReader based on this return value, and flush metrics to it every 60 seconds.\n[This could be why you aren't seeing metrics on your endpoint, although also the javaagent doesn't produce any metrics, so currently you need to use otel metric API manually in your app, and then the javaagent interop/bridge will capture and export those]\nOne option would be to add a MetricCollector SPI interface in javaagent-spi for pull-based metric \"exporters\", something like:\npublic interface MetricCollector {\n  // ExporterConfig is being deleted in #1254, replaced by `Properties`\n  // which will be nice here since this isn't exactly quite an \"exporter\"\n  void init(MetricProducer producer, ExporterConfig config);\n}\n\nand turn this class into a MetricCollector, and add something like findMetricCollector(exporterName) in TracerInstaller", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495511608", "createdAt": "2020-09-27T00:55:30Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzY4NjA5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-497368609", "createdAt": "2020-09-28T10:08:02Z", "commit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDowODowMlrOHY3C2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDowODowMlrOHY3C2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTcyMg==", "bodyText": "@trask @anuraaga why there is versions.opentelemetryOther and version.opentelemetry?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495829722", "createdAt": "2020-09-28T10:08:02Z", "author": {"login": "pavolloffay"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -43,6 +44,7 @@ ext {\n     opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry),\n     opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-otlp', version: versions.opentelemetry),\n     opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-zipkin', version: versions.opentelemetryOther),\n+    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-prometheus', version: versions.opentelemetry),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDQxNDMx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-498041431", "createdAt": "2020-09-29T03:38:10Z", "commit": {"oid": "f712e8c0db4e56b94a37a36df57b82059cb458d1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzozODoxMFrOHZXV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzozODoxMFrOHZXV0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1ODg2Nw==", "bodyText": "nice thing about javaagent is we don't have to close, though we do have to worry about creating non-daemon threads, can you check that? e.g. use the javaagent w/ prometheus exporter from a command-line app and make sure we don't prevent the app from exiting and the end of main\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // TODO close the server", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496358867", "createdAt": "2020-09-29T03:38:10Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -39,22 +37,18 @@\n   // The empty address equals to any address\n   private static final String DEFAULT_HOST = \"0.0.0.0\";\n \n-  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n-\n   @Override\n-  public MetricExporter fromConfig(ExporterConfig config) {\n-    PrometheusCollector.newBuilder()\n-        .setMetricProducer(meterSdkProvider.getMetricProducer())\n-        .buildAndRegister();\n+  public void init(MetricProducer producer, ExporterConfig config) {\n+\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n     try {\n       int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n       String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n       log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n-      HTTPServer server = new HTTPServer(host, port);\n-      return new PrometheusExporter(server);\n+      // TODO close the server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f712e8c0db4e56b94a37a36df57b82059cb458d1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MTQyMTM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-498142135", "createdAt": "2020-09-29T06:49:44Z", "commit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo0OTo0NVrOHZdP7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo1MjowN1rOHZdUiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA==", "bodyText": "Why is this Collector and not Exporter?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496455660", "createdAt": "2020-09-29T06:49:45Z", "author": {"login": "iNikem"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1Njg0MA==", "bodyText": "I think this method requires documentation to explain what is going on here. Just by reading it I don't understand what is a connection between PrometheusCollector that we built and registered and HTTPServer that we started later. How that server gets metrics?\nThe absence of javadoc on PrometheusCollector does not help it neither :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496456840", "createdAt": "2020-09-29T06:52:07Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricCollector;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricCollector.class)\n+public class PrometheusMetricCollector implements MetricCollector {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricCollector.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void init(MetricProducer producer, ExporterConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1f5a25887ec0f6296d880c4faf9c89866c8927c", "committedDate": "2020-09-28T09:21:41Z", "message": "Small changes\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}, "afterCommit": {"oid": "438cf34b2ead9407f2009ceeb02ff7ed8ed0cdf0", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/438cf34b2ead9407f2009ceeb02ff7ed8ed0cdf0", "committedDate": "2020-09-29T08:08:57Z", "message": "Add prometheus exporter\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NjczMzI5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-498673329", "createdAt": "2020-09-29T16:30:40Z", "commit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMDo0MFrOHZ3DdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMDo0MFrOHZ3DdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw==", "bodyText": "Instead of this undocumented naming convention what do you think about adding a String getExporterName() method to the MetricProducerCustomizer interface?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496878453", "createdAt": "2020-09-29T16:30:40Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Njc3NDQx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-498677441", "createdAt": "2020-09-29T16:35:34Z", "commit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNTozNFrOHZ3QZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNTozNFrOHZ3QZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTc2Ng==", "bodyText": "Just wondering: shouldn't these settings be prefixed with otel.exporter. or at least otel.?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496881766", "createdAt": "2020-09-29T16:35:34Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDI2OTIw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-500426920", "createdAt": "2020-10-01T14:47:21Z", "commit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDY5NzU2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-500469756", "createdAt": "2020-10-01T15:30:06Z", "commit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozMDowNlrOHbP74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozNjo1N1rOHbQPIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNDY5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n          \n          \n            \n             * PrometheusCollector}. The collector pulls metrics from the producer when the", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498334691", "createdAt": "2020-10-01T15:30:06Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNTYxMQ==", "bodyText": "Sorry, but I still not quite understand how HTTPServer and PrometheusCollector are connected :(", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498335611", "createdAt": "2020-10-01T15:31:16Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"otel.exporter.prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final String DEFAULT_PORT = \"9464\";\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void configure(MetricProducer producer, Properties config) {\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n+    try {\n+      String portStr = config.getProperty(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getProperty(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, portStr);\n+      new HTTPServer(host, Integer.parseInt(portStr), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzODg2Nw==", "bodyText": "I think we have two different issues here. One is how to select this or that exporter. Two, it is not obvious that the class name of MetricProducerCustomizer should start with the same string as MetricExporter. E.g. if we make MetricProducerCustomizer.getExporterName it will be confusing to me: \"why customizer of MetricProducers is connected to an exporter\"?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498338867", "createdAt": "2020-10-01T15:35:55Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzOTYxNw==", "bodyText": "What collector? I see MetricProducerCustomizer and MetricProducer in method body, what is collector? :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498339617", "createdAt": "2020-10-01T15:36:57Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -165,6 +191,14 @@ private static void installExporter(SpanExporterFactory spanExporterFactory, Pro\n     log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n   }\n \n+  private static void installCollector(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3feb6c8c20408b88c61ebda8518eae74f1a69e4c", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3feb6c8c20408b88c61ebda8518eae74f1a69e4c", "committedDate": "2020-10-09T07:00:47Z", "message": "Add prometheus exporter\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e841c3204f65dc0003aece16119f80184714d41", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e841c3204f65dc0003aece16119f80184714d41", "committedDate": "2020-10-02T06:37:14Z", "message": "comment\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}, "afterCommit": {"oid": "3feb6c8c20408b88c61ebda8518eae74f1a69e4c", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3feb6c8c20408b88c61ebda8518eae74f1a69e4c", "committedDate": "2020-10-09T07:00:47Z", "message": "Add prometheus exporter\n\nSigned-off-by: Pavol Loffay <ploffay@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a", "committedDate": "2020-10-09T07:02:45Z", "message": "rename\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NTMzNjg0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-505533684", "createdAt": "2020-10-09T10:02:08Z", "commit": {"oid": "9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDowMjowOFrOHfDWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDowMjowOFrOHfDWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMjgxMQ==", "bodyText": "Do you think configure is a better name than start as Trask proposed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r502322811", "createdAt": "2020-10-09T10:02:08Z", "author": {"login": "iNikem"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricServer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import java.util.Properties;\n+\n+/**\n+ * A {@link MetricServer} acts as the bootstrap for metric exporters that use {@link MetricProducer}\n+ * to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricServer} must be registered through the Java SPI framework.\n+ */\n+public interface MetricServer {\n+\n+  /**\n+   * Initialize the metric server that pull metric from the {@link MetricProducer}.\n+   *\n+   * @param producer The metric producer\n+   * @param config The configuration\n+   */\n+  void configure(MetricProducer producer, Properties config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f0313b764a2c622eed2727dc20a7c426d2cfdfc", "author": {"user": {"login": "pavolloffay", "name": "Pavol Loffay"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6f0313b764a2c622eed2727dc20a7c426d2cfdfc", "committedDate": "2020-10-09T17:15:23Z", "message": "Rename to start\n\nSigned-off-by: Pavol Loffay <p.loffay@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODYyMDI2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#pullrequestreview-505862026", "createdAt": "2020-10-09T17:24:18Z", "commit": {"oid": "6f0313b764a2c622eed2727dc20a7c426d2cfdfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2648, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}