{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxOTE3NTA3", "number": 876, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDowM1rOEUhcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDoxOVrOEUhcjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU0ODY3OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDowM1rOG6xb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDowM1rOG6xb0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4MDUzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(context.containsBean(\"customTestTracer\")).isEqualTo(true);\n          \n          \n            \n                          assertThat(context.containsBean(\"customTestTracer\")).isTrue();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/876#discussion_r464280531", "createdAt": "2020-08-03T08:54:03Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "diffHunk": "@@ -41,45 +40,39 @@ public Tracer customTestTracer() {\n   private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n \n   @Test\n-  public void should_NOT_initalize_otelTracer_if_tracer_bean_exists() {\n+  @DisplayName(\"when Application Context contains Tracer bean should NOT initalize otelTracer\")\n+  void customTracer() {\n     this.contextRunner\n         .withUserConfiguration(CustomTracerConfiguration.class)\n         .withConfiguration(AutoConfigurations.of(TracerAutoConfiguration.class))\n         .run(\n             (context) -> {\n-              assertTrue(\n-                  \"Application Context contains customTestTracer bean\",\n-                  context.containsBean(\"customTestTracer\"));\n-\n-              assertFalse(\n-                  \"Application Context DOES NOT contain the otelTracer bean defined in TracerAutoConfiguration\",\n-                  context.containsBean(\"otelTracer\"));\n+              assertThat(context.containsBean(\"customTestTracer\")).isEqualTo(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5d68ef9e3334dbec0e669ca572ea4592d11d97"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU0OTEyOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDoxMFrOG6xcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDoxMFrOG6xcFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4MDU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(context.containsBean(\"otelTracer\")).isEqualTo(false);\n          \n          \n            \n                          assertThat(context.containsBean(\"otelTracer\")).isFalse();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/876#discussion_r464280596", "createdAt": "2020-08-03T08:54:10Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "diffHunk": "@@ -41,45 +40,39 @@ public Tracer customTestTracer() {\n   private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n \n   @Test\n-  public void should_NOT_initalize_otelTracer_if_tracer_bean_exists() {\n+  @DisplayName(\"when Application Context contains Tracer bean should NOT initalize otelTracer\")\n+  void customTracer() {\n     this.contextRunner\n         .withUserConfiguration(CustomTracerConfiguration.class)\n         .withConfiguration(AutoConfigurations.of(TracerAutoConfiguration.class))\n         .run(\n             (context) -> {\n-              assertTrue(\n-                  \"Application Context contains customTestTracer bean\",\n-                  context.containsBean(\"customTestTracer\"));\n-\n-              assertFalse(\n-                  \"Application Context DOES NOT contain the otelTracer bean defined in TracerAutoConfiguration\",\n-                  context.containsBean(\"otelTracer\"));\n+              assertThat(context.containsBean(\"customTestTracer\")).isEqualTo(true);\n+              assertThat(context.containsBean(\"otelTracer\")).isEqualTo(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5d68ef9e3334dbec0e669ca572ea4592d11d97"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU0OTU2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDoxOVrOG6xcWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODo1NDoxOVrOG6xcWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4MDY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          assertThat(context.containsBean(\"otelTracer\")).isEqualTo(true);\n          \n          \n            \n                          assertThat(context.containsBean(\"otelTracer\")).isTrue();", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/876#discussion_r464280666", "createdAt": "2020-08-03T08:54:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfigurationTest.java", "diffHunk": "@@ -41,45 +40,39 @@ public Tracer customTestTracer() {\n   private final ApplicationContextRunner contextRunner = new ApplicationContextRunner();\n \n   @Test\n-  public void should_NOT_initalize_otelTracer_if_tracer_bean_exists() {\n+  @DisplayName(\"when Application Context contains Tracer bean should NOT initalize otelTracer\")\n+  void customTracer() {\n     this.contextRunner\n         .withUserConfiguration(CustomTracerConfiguration.class)\n         .withConfiguration(AutoConfigurations.of(TracerAutoConfiguration.class))\n         .run(\n             (context) -> {\n-              assertTrue(\n-                  \"Application Context contains customTestTracer bean\",\n-                  context.containsBean(\"customTestTracer\"));\n-\n-              assertFalse(\n-                  \"Application Context DOES NOT contain the otelTracer bean defined in TracerAutoConfiguration\",\n-                  context.containsBean(\"otelTracer\"));\n+              assertThat(context.containsBean(\"customTestTracer\")).isEqualTo(true);\n+              assertThat(context.containsBean(\"otelTracer\")).isEqualTo(false);\n             });\n   }\n \n   @Test\n-  public void should_contain_otelTracer_bean() {\n+  @DisplayName(\"when Application Context DOES NOT contain Tracer bean should initialize otelTracer\")\n+  void initalizeTracer() {\n     this.contextRunner\n         .withConfiguration(AutoConfigurations.of(TracerAutoConfiguration.class))\n         .run(\n             (context) -> {\n-              assertTrue(\n-                  \"Application Context contains otelTracer bean\",\n-                  context.containsBean(\"otelTracer\"));\n+              assertThat(context.containsBean(\"otelTracer\")).isEqualTo(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc5d68ef9e3334dbec0e669ca572ea4592d11d97"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 205, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}