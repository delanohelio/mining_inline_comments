{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NjM0MDYx", "number": 635, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMToxMzoxN1rOEL5FiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMToxMzoxN1rOEL5FiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTA1MDk2OnYy", "diffSide": "RIGHT", "path": "instrumentation/khttp-0.1/src/test/groovy/KHttpClientTest.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMToxMzoxN1rOGtr3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNDowOToyN1rOGtudPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NzczMA==", "bodyText": "i think this probably fine, even though khttp uses this for both connect and read timeouts\nlet's keep and if it causes issues we can bump", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/635#discussion_r450557730", "createdAt": "2020-07-07T01:13:17Z", "author": {"login": "trask"}, "path": "instrumentation/khttp-0.1/src/test/groovy/KHttpClientTest.groovy", "diffHunk": "@@ -22,7 +22,7 @@ class KHttpClientTest extends HttpClientTest {\n   @Override\n   int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n     // khttp applies the same timeout for both connect and read\n-    def timeoutSeconds = Math.max(CONNECT_TIMEOUT_MS, READ_TIMEOUT_MS) / 1000\n+    def timeoutSeconds = CONNECT_TIMEOUT_MS / 1000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90460cad3b3748adde92640b0fe1b124ca7d79c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTA3MA==", "bodyText": "@trask should I set  READ_TIMEOUT_MS only for KHttpClientTest? I mean define READ_TIMEOUT_MS only in KHttpClientTest ?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/635#discussion_r450575070", "createdAt": "2020-07-07T02:19:42Z", "author": {"login": "malafeev"}, "path": "instrumentation/khttp-0.1/src/test/groovy/KHttpClientTest.groovy", "diffHunk": "@@ -22,7 +22,7 @@ class KHttpClientTest extends HttpClientTest {\n   @Override\n   int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n     // khttp applies the same timeout for both connect and read\n-    def timeoutSeconds = Math.max(CONNECT_TIMEOUT_MS, READ_TIMEOUT_MS) / 1000\n+    def timeoutSeconds = CONNECT_TIMEOUT_MS / 1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NzczMA=="}, "originalCommit": {"oid": "e90460cad3b3748adde92640b0fe1b124ca7d79c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYwMDI1Mw==", "bodyText": "yeah, that's probably wise, and self-documenting, since khttp is a bit unusual", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/635#discussion_r450600253", "createdAt": "2020-07-07T04:09:27Z", "author": {"login": "trask"}, "path": "instrumentation/khttp-0.1/src/test/groovy/KHttpClientTest.groovy", "diffHunk": "@@ -22,7 +22,7 @@ class KHttpClientTest extends HttpClientTest {\n   @Override\n   int doRequest(String method, URI uri, Map<String, String> headers, Closure callback) {\n     // khttp applies the same timeout for both connect and read\n-    def timeoutSeconds = Math.max(CONNECT_TIMEOUT_MS, READ_TIMEOUT_MS) / 1000\n+    def timeoutSeconds = CONNECT_TIMEOUT_MS / 1000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1NzczMA=="}, "originalCommit": {"oid": "e90460cad3b3748adde92640b0fe1b124ca7d79c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 325, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}