{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzUzOTYy", "number": 389, "title": "Initial Propagators support.", "bodyText": "Initial support for specifying Propagators. Prototype for #320\nFollowing @trask advise, I'm calling this from TracerInstaller, although in theory Propagators can exist for other concerns (such as CorrelationContext). At the moment all propagators in Java are trace related though.\nUsers can specify a list of them, based on pre-cooked identifiers/propagators (API + contrib ones):\njava ... -Dota.propagators=b3 ...\njava ... -Dota.propagators=tracecontext ...\njava ... -Dota.propagators=b3,correlationcontext # eventually\nAlso, we need some tests for checking that actual propagation happens as expected, using different components (maybe add a test in the smoke-tests/ case?).", "createdAt": "2020-05-06T21:54:29Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389", "merged": true, "mergeCommit": {"oid": "009cc6ad1efeaf41403da452c343f159b3155c45"}, "closed": true, "closedAt": "2020-05-14T23:57:53Z", "author": {"login": "carlosalberto"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcevyUzgH2gAyNDE0MzUzOTYyOmQ5ODJiODlhM2UxZjdmMzlkOWMyZTM5Yjc2MWY0YzNmNDI1NzE0YjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchWQ2dAFqTQxMjI1NjQ3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d982b89a3e1f7f39d9c2e39b761f4c3f425714b1", "committedDate": "2020-05-06T21:44:19Z", "message": "Initial Propagators support."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjA2NzAw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#pullrequestreview-407206700", "createdAt": "2020-05-07T07:18:08Z", "commit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxODowOVrOGRxeTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoxODowOVrOGRxeTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTU0OA==", "bodyText": "Instead of Config.get().getPropagators() shouldn't you use propagatorList parameter?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r421289548", "createdAt": "2020-05-07T07:18:09Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.tooling;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class PropagatorsInitializer {\n+  private static final String TRACE_CONTEXT = \"tracecontext\";\n+  private static final String B3 = \"b3\";\n+\n+  private static final String SEPARATOR = \",\";\n+\n+  private static final Map<String, HttpTextFormat> TEXTMAP_PROPAGATORS = ImmutableMap.of(\n+        TRACE_CONTEXT, new HttpTraceContext(),\n+        B3, new B3Propagator()\n+  );\n+\n+  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  public static void initializePropagators(String propagatorList) {\n+    DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n+\n+    for (String propagatorId : Config.get().getPropagators().split(SEPARATOR)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjMwMDY1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#pullrequestreview-410230065", "createdAt": "2020-05-12T16:44:10Z", "commit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo0NDoxMFrOGUPn0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo0NjoxNlrOGUPs-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MDY1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                propagators = getSettingFromEnvironment(PROPAGATORS, null);\n          \n          \n            \n                propagators = getListSettingFromEnvironment(PROPAGATORS, null);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423880659", "createdAt": "2020-05-12T16:44:10Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -150,6 +152,7 @@\n   Config() {\n     propertiesFromConfigFile = loadConfigurationFile();\n \n+    propagators = getSettingFromEnvironment(PROPAGATORS, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MDcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Getter private final String propagators;\n          \n          \n            \n              @Getter private final List<String> propagators;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423880712", "createdAt": "2020-05-12T16:44:16Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -104,6 +105,7 @@\n \n   @Getter private final String exporterJar;\n   @Getter private final String serviceName;\n+  @Getter private final String propagators;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MTM4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                propagators = properties.getProperty(PROPAGATORS, parent.propagators);\n          \n          \n            \n                propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423881382", "createdAt": "2020-05-12T16:45:20Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -210,6 +213,7 @@\n   private Config(final Properties properties, final Config parent) {\n     exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n     serviceName = properties.getProperty(SERVICE, parent.serviceName);\n+    propagators = properties.getProperty(PROPAGATORS, parent.propagators);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4MTk3Nw==", "bodyText": "See my suggestions in Config", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r423881977", "createdAt": "2020-05-12T16:46:16Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.tooling;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class PropagatorsInitializer {\n+  private static final String TRACE_CONTEXT = \"tracecontext\";\n+  private static final String B3 = \"b3\";\n+\n+  private static final String SEPARATOR = \",\";\n+\n+  private static final Map<String, HttpTextFormat> TEXTMAP_PROPAGATORS = ImmutableMap.of(\n+        TRACE_CONTEXT, new HttpTraceContext(),\n+        B3, new B3Propagator()\n+  );\n+\n+  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  public static void initializePropagators(String propagatorList) {\n+    DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n+\n+    for (String propagatorId : Config.get().getPropagators().split(SEPARATOR)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTU0OA=="}, "originalCommit": {"oid": "d982b89a3e1f7f39d9c2e39b761f4c3f425714b1"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0dfd68a6eaa2bb3be27da608d2e71e6a78461484", "committedDate": "2020-05-14T14:27:10Z", "message": "Parse the propagators value from Config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db96cd436043a2b3df92f833a3cc3d3468fa85c9", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db96cd436043a2b3df92f833a3cc3d3468fa85c9", "committedDate": "2020-05-14T17:01:57Z", "message": "Merge branch 'master' into initial_propagators_support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMDg1MTYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#pullrequestreview-412085161", "createdAt": "2020-05-14T18:40:16Z", "commit": {"oid": "db96cd436043a2b3df92f833a3cc3d3468fa85c9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NDoyMlrOGVpofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo0NToxNVrOGVpqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTM5MQ==", "bodyText": "null check is not needed, Config.getListSettingFromEnvironment always returns non-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Config.get().getPropagators() != null) {\n          \n          \n            \n                  PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n          \n          \n            \n                }\n          \n          \n            \n                PropagatorsInitializer.initializePropagators(Config.get().getPropagators());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r425355391", "createdAt": "2020-05-14T18:44:22Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -48,6 +48,10 @@ public static synchronized void installAgentTracer() {\n     } else {\n       log.info(\"Tracing is disabled.\");\n     }\n+\n+    if (Config.get().getPropagators() != null) {\n+      PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db96cd436043a2b3df92f833a3cc3d3468fa85c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTkwOQ==", "bodyText": "null check is not needed, Config.getListSettingFromEnvironment always returns non-null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (propagators == null) {\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#discussion_r425355909", "createdAt": "2020-05-14T18:45:15Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.tooling;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.propagation.DefaultContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.contrib.trace.propagation.B3Propagator;\n+import io.opentelemetry.trace.propagation.HttpTraceContext;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class PropagatorsInitializer {\n+  private static final String TRACE_CONTEXT = \"tracecontext\";\n+  private static final String B3 = \"b3\";\n+\n+  private static final Map<String, HttpTextFormat> TEXTMAP_PROPAGATORS =\n+      ImmutableMap.of(\n+          TRACE_CONTEXT, new HttpTraceContext(),\n+          B3, new B3Propagator());\n+\n+  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  public static void initializePropagators(List<String> propagators) {\n+    if (propagators == null) {\n+      return;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db96cd436043a2b3df92f833a3cc3d3468fa85c9"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e01e4d7ab8e0e03f017993246f28c2233f921337", "author": {"user": {"login": "carlosalberto", "name": "Carlos Alberto Cortez"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e01e4d7ab8e0e03f017993246f28c2233f921337", "committedDate": "2020-05-14T23:05:40Z", "message": "Do not check for null, but size."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1302f3b6dd02e97f5fab83fef2df40356d0ce52a", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1302f3b6dd02e97f5fab83fef2df40356d0ce52a", "committedDate": "2020-05-14T23:40:18Z", "message": "Merge branch 'master' into initial_propagators_support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjU2NDc4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/389#pullrequestreview-412256478", "createdAt": "2020-05-14T23:41:54Z", "commit": {"oid": "e01e4d7ab8e0e03f017993246f28c2233f921337"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3151, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}