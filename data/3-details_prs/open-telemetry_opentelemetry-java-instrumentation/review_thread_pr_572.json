{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTU4NDMy", "number": 572, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowOTo1M1rOEIeWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjo1Nzo0NlrOEIomyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIxMzQ3OnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientResponseAdvice.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODowOTo1M1rOGodeqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNjo0MVrOGpP5GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTIxMQ==", "bodyText": "i think it makes sense to end the span here, at the beginning of onCompleted", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445079211", "createdAt": "2020-06-24T18:09:53Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientResponseAdvice.java", "diffHunk": "@@ -34,9 +35,12 @@\n   public static Scope onEnter(\n       @Advice.This final AsyncCompletionHandler<?> handler,\n       @Advice.Argument(0) final Response response) {\n+\n+    // TODO I think all this should happen on exit, not on enter.\n+    // After response was handled by user provided handler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0MDgwOA==", "bodyText": "My line of thought was the following: in comes a request, when a response is ready AsyncCompletionHandler will be called. I think we want to end the request processing span after that handler has completed its job. So that if it fails or takes long time, that would be recorded in the captured span. No?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445340808", "createdAt": "2020-06-25T06:46:31Z", "author": {"login": "iNikem"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientResponseAdvice.java", "diffHunk": "@@ -34,9 +35,12 @@\n   public static Scope onEnter(\n       @Advice.This final AsyncCompletionHandler<?> handler,\n       @Advice.Argument(0) final Response response) {\n+\n+    // TODO I think all this should happen on exit, not on enter.\n+    // After response was handled by user provided handler.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTIxMQ=="}, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTE3Ng==", "bodyText": "i think the CLIENT span timing and success are supposed to match the HTTP timing / success as closely as possible\ni don't see this called out in the spec, but there's some related discussion here: open-telemetry/opentelemetry-specification#591 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445905176", "createdAt": "2020-06-26T00:16:41Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientResponseAdvice.java", "diffHunk": "@@ -34,9 +35,12 @@\n   public static Scope onEnter(\n       @Advice.This final AsyncCompletionHandler<?> handler,\n       @Advice.Argument(0) final Response response) {\n+\n+    // TODO I think all this should happen on exit, not on enter.\n+    // After response was handled by user provided handler.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3OTIxMQ=="}, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzIxOTUzOnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientRequestAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxMTo0NlrOGodisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoxMTo0NlrOGodisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4MDI0Mw==", "bodyText": "it's the same, but i think clearer to capture currentContext before startSpan\ni think naming it parentContext might help also\nalso, i realized by moving this above startSpan, i think we can save a Context.current() lookup in span builder with\n.setParent(TracingContextUtil.getSpan(parentContext))", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445080243", "createdAt": "2020-06-24T18:11:46Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/client/ClientRequestAdvice.java", "diffHunk": "@@ -37,17 +38,18 @@\n   public static Scope onEnter(\n       @Advice.Argument(0) final Request request,\n       @Advice.Argument(1) final AsyncHandler<?> handler) {\n-    final Span parentSpan = TRACER.getCurrentSpan();\n     final Span span =\n         TRACER.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n     DECORATE.afterStart(span);\n     DECORATE.onRequest(span, request);\n \n-    final Context context = withSpan(span, Context.current());\n-    OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, SETTER);\n+    Context currentContext = Context.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzI0ODk1OnYy", "diffSide": "RIGHT", "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyMDo0MlrOGod2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyMDo0MlrOGod2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NTIxOQ==", "bodyText": "here also, i think clearer to capture context before startSpan and name it parentContext\nand save a Context.current() lookup in span builder with\n.setParent(TracingContextUtil.getSpan(parentContext))", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445085219", "createdAt": "2020-06-24T18:20:42Z", "author": {"login": "trask"}, "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/PlayWSClientInstrumentation.java", "diffHunk": "@@ -46,14 +46,20 @@ public static Span methodEnter(\n \n       DECORATE.afterStart(span);\n       DECORATE.onRequest(span, request);\n-      final Context context = withSpan(span, Context.current());\n-      OpenTelemetry.getPropagators().getHttpTextFormat().inject(context, request, SETTER);\n+\n+      Context currentContext = Context.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM4NzAyOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMTo1NFrOGofNww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMTo1NFrOGofNww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwNzY1MQ==", "bodyText": "i think we can save a Context.current() lookup here since we have it already now:\n.setParent(TracingContextUtil.getSpan(parentContext))", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445107651", "createdAt": "2020-06-24T19:01:54Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -32,34 +34,38 @@\n public class DispatcherHandlerAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n+  public static void methodEnter(\n+      @Advice.Argument(0) final ServerWebExchange exchange,\n+      @Advice.Local(\"otelScope\") Scope otelScope,\n+      @Advice.Local(\"otelContext\") Context otelContext) {\n     // Unfortunately Netty EventLoop is not instrumented well enough to attribute all work to the\n-    // right things so we have to store span in request itself. We also store parent (netty's) span\n-    // so we could update resource name.\n-    final Span parentSpan = TRACER.getCurrentSpan();\n-    if (parentSpan.getContext().isValid()) {\n-      exchange.getAttributes().put(AdviceUtils.PARENT_SPAN_ATTRIBUTE, parentSpan);\n-    }\n+    // right things so we have to store the context in request itself.\n+    // We also store parent (netty's) context so we could update resource name.\n+    Context currentContext = Context.current();\n+    exchange.getAttributes().put(AdviceUtils.PARENT_CONTEXT_ATTRIBUTE, currentContext);\n \n     final Span span = TRACER.spanBuilder(\"DispatcherHandler.handle\").startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM5MjMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMzo0MFrOGofRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowMzo0MFrOGofRMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwODUzMA==", "bodyText": "i think i like naming it parentContext here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445108530", "createdAt": "2020-06-24T19:03:40Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/DispatcherHandlerAdvice.java", "diffHunk": "@@ -32,34 +34,38 @@\n public class DispatcherHandlerAdvice {\n \n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope methodEnter(@Advice.Argument(0) final ServerWebExchange exchange) {\n+  public static void methodEnter(\n+      @Advice.Argument(0) final ServerWebExchange exchange,\n+      @Advice.Local(\"otelScope\") Scope otelScope,\n+      @Advice.Local(\"otelContext\") Context otelContext) {\n     // Unfortunately Netty EventLoop is not instrumented well enough to attribute all work to the\n-    // right things so we have to store span in request itself. We also store parent (netty's) span\n-    // so we could update resource name.\n-    final Span parentSpan = TRACER.getCurrentSpan();\n-    if (parentSpan.getContext().isValid()) {\n-      exchange.getAttributes().put(AdviceUtils.PARENT_SPAN_ATTRIBUTE, parentSpan);\n-    }\n+    // right things so we have to store the context in request itself.\n+    // We also store parent (netty's) context so we could update resource name.\n+    Context currentContext = Context.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQwMDY3OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/HandlerAdapterAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNjoxN1rOGofWdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTowNjoxN1rOGofWdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwOTg3Nw==", "bodyText": "\ud83d\udc4d created #575 to track this general issue", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445109877", "createdAt": "2020-06-24T19:06:17Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/src/main/java8/io/opentelemetry/auto/instrumentation/springwebflux/server/HandlerAdapterAdvice.java", "diffHunk": "@@ -55,12 +58,13 @@ public static SpanWithScope methodEnter(\n       spanWithScope = new SpanWithScope(span, currentContextWith(span));\n     }\n \n-    final Span parentSpan = exchange.getAttribute(AdviceUtils.PARENT_SPAN_ATTRIBUTE);\n+    final Context parentContext = exchange.getAttribute(AdviceUtils.PARENT_CONTEXT_ATTRIBUTE);\n     final PathPattern bestPattern =\n         exchange.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);\n-    if (parentSpan != null && bestPattern != null) {\n+    if (parentContext != null && bestPattern != null) {\n+      // TODO this is wrong span to update. We should update the outermost server span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDg5MzUyOnYy", "diffSide": "RIGHT", "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/AsyncHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjo1Nzo0NlrOGott2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjo1Nzo0NlrOGott2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0NTI0Mg==", "bodyText": "invocationContext maybe - I think this is meant to be the context that invoked the asynchronous call, it's technically not necessarily the parent of the span (in practice it might always be though)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/572#discussion_r445345242", "createdAt": "2020-06-25T06:57:46Z", "author": {"login": "anuraaga"}, "path": "instrumentation/play-ws/play-ws-1.0/src/main/java/io/opentelemetry/auto/instrumentation/playws/v1_0/AsyncHandlerWrapper.java", "diffHunk": "@@ -30,14 +30,14 @@\n public class AsyncHandlerWrapper implements AsyncHandler {\n   private final AsyncHandler delegate;\n   private final Span span;\n-  private final Span parentSpan;\n+  private final Context parentContext;\n \n   private final Response.ResponseBuilder builder = new Response.ResponseBuilder();\n \n-  public AsyncHandlerWrapper(final AsyncHandler delegate, final Span span) {\n+  public AsyncHandlerWrapper(final AsyncHandler delegate, final Span span, Context parentContext) {\n     this.delegate = delegate;\n     this.span = span;\n-    parentSpan = TRACER.getCurrentSpan();\n+    this.parentContext = parentContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9ebff2dfc87e57766a2ece90fac97dae678a6d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}