{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NTcxNzU1", "number": 159, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo0ODo0NFrODfXzDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMzoyN1rODfabXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjIyMzQ5OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo0ODo0NFrOFpCmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDozMDoxMVrOFpV5pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODQzMg==", "bodyText": "it doesn't look like this field is needed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378578432", "createdAt": "2020-02-12T23:48:44Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -1,37 +1,86 @@\n package io.opentelemetry.auto.tooling;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n-import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.jar.Manifest;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static ExporterClassLoader exporterLoader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934e259a5d45c8154c5e7f2b4f3b2b137254529"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NDc1Nw==", "bodyText": "Not it's not. Removed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378894757", "createdAt": "2020-02-13T14:30:11Z", "author": {"login": "prydin"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -1,37 +1,86 @@\n package io.opentelemetry.auto.tooling;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n-import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.jar.Manifest;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static ExporterClassLoader exporterLoader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODQzMg=="}, "originalCommit": {"oid": "4934e259a5d45c8154c5e7f2b4f3b2b137254529"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjIyNTg2OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MDowM1rOFpCnjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzo1MDowM1rOFpCnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3ODgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Manifest mf;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378578831", "createdAt": "2020-02-12T23:50:03Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -1,37 +1,86 @@\n package io.opentelemetry.auto.tooling;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n import io.opentelemetry.auto.tooling.exporter.ExporterConfigException;\n import io.opentelemetry.auto.tooling.exporter.ExporterRegistry;\n-import io.opentelemetry.auto.tooling.exporter.SpanExporterFactory;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n import io.opentelemetry.sdk.trace.export.SimpleSpansProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.ServiceLoader;\n+import java.util.jar.Manifest;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class TracerInstaller {\n+  private static ExporterClassLoader exporterLoader;\n \n   /** Register agent tracer if no agent tracer is already registered. */\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n \n       // Try to create an exporter\n-      final String exporter = Config.get().getExporter();\n-      if (exporter != null) {\n+      SpanExporter exporter = null;\n+      final String expName = Config.get().getExporter();\n+      if (expName != null) {\n         try {\n-          final SpanExporterFactory f = ExporterRegistry.getInstance().getFactory(exporter);\n-          OpenTelemetrySdk.getTracerFactory()\n-              .addSpanProcessor(SimpleSpansProcessor.newBuilder(f.newExporter()).build());\n-          log.info(\"Loaded span exporter: \" + exporter);\n+          final io.opentelemetry.auto.tooling.exporter.SpanExporterFactory f =\n+              ExporterRegistry.getInstance().getFactory(expName);\n+          exporter = f.newExporter();\n+          log.info(\"Loaded span exporter: \" + expName);\n         } catch (final ExporterConfigException e) {\n           log.warn(\"Error loading exporter. Spans will be dropped\", e);\n         }\n+      } else {\n+        final String exporterJar = Config.get().getExporterJar();\n+        if (exporterJar != null) {\n+          exporter = loadFromJar(exporterJar);\n+        }\n+      }\n+      if (exporter != null) {\n+        OpenTelemetrySdk.getTracerFactory()\n+            .addSpanProcessor(SimpleSpansProcessor.newBuilder(exporter).build());\n+        log.info(\"Installed span exporter: \" + exporter.getClass().getCanonicalName());\n       } else {\n         log.warn(\"No exporter is specified. Tracing will run but spans are dropped\");\n       }\n     } else {\n-      log.debug(\"Tracing is disabled.\");\n+      log.info(\"Tracing is disabled.\");\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  private static synchronized SpanExporter loadFromJar(final String exporterJar) {\n+    final URL url;\n+    try {\n+      url = new File(exporterJar).toURI().toURL();\n+    } catch (final MalformedURLException e) {\n+      log.warn(\"Filename could not be parsed: \" + exporterJar + \". Exporter is not installed\");\n+      return null;\n+    }\n+\n+    // Locate the name of the bootstrap class and try to load it\n+    final Manifest mf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934e259a5d45c8154c5e7f2b4f3b2b137254529"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDE3OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOToyMlrOFpGl9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOToyMlrOFpGl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0Mzk1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378643958", "createdAt": "2020-02-13T04:19:22Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDMxOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTozM1rOFpGmFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTozM1rOFpGmFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0Mzk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378643988", "createdAt": "2020-02-13T04:19:33Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public long getLong(final String key, final long defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Long.parseLong(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDQ1OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTo0MVrOFpGmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTo0MVrOFpGmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644009", "createdAt": "2020-02-13T04:19:41Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override\n+  @Override\n+  public int getInt(final String key, final int defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Integer.parseInt(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public long getLong(final String key, final long defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Long.parseLong(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override\n+  @Override\n+  public boolean getBoolean(final String key, final boolean defaultValue) {\n+    final String s = Config.getSettingFromEnvironment(prefix + \".\" + key, null);\n+    if (s == null) {\n+      return defaultValue;\n+    }\n+    return Boolean.parseBoolean(s); // TODO: Handle format errors gracefully?\n+  }\n+\n+  // @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDY0OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTo1NFrOFpGmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxOTo1NFrOFpGmUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644049", "createdAt": "2020-02-13T04:19:54Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override\n+  @Override\n+  public String getString(final String key, final String defaultValue) {\n+    return Config.getSettingFromEnvironment(prefix + \".\" + key, defaultValue);\n+  }\n+\n+  // @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDczOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMDowMlrOFpGmZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMDowMlrOFpGmZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // @Override", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644069", "createdAt": "2020-02-13T04:20:02Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/DefaultConfigProvider.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import io.opentelemetry.auto.config.Config;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+\n+public class DefaultConfigProvider implements ConfigProvider {\n+  private final String prefix;\n+\n+  public DefaultConfigProvider(final String prefix) {\n+    this.prefix = prefix;\n+  }\n+\n+  // @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MTg5OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ShadingRemapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMDo1N1rOFpGnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDozMTo0NVrOFpV9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDIzNw==", "bodyText": "\ud83d\udc4d I've never seen floorEntry() before, was wondering why TreeMap above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644237", "createdAt": "2020-02-13T04:20:57Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ShadingRemapper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import net.bytebuddy.jar.asm.commons.Remapper;\n+\n+public class ShadingRemapper extends Remapper {\n+  public static class Rule {\n+    private final String from;\n+    private final String to;\n+\n+    public Rule(String from, String to) {\n+      // Strip prefix added to prevent the build-time relocation from changing the names\n+      if (from.startsWith(\"#\")) {\n+        from = from.substring(1);\n+      }\n+      if (to.startsWith(\"#\")) {\n+        to = to.substring(1);\n+      }\n+      this.from = from.replace('.', '/');\n+      this.to = to.replace('.', '/');\n+    }\n+  }\n+\n+  public static Rule rule(final String from, final String to) {\n+    return new Rule(from, to);\n+  }\n+\n+  private final TreeMap<String, String> map = new TreeMap<>();\n+\n+  public ShadingRemapper(final Rule... rules) {\n+    for (final Rule rule : rules) {\n+      map.put(rule.from, rule.to);\n+    }\n+  }\n+\n+  @Override\n+  public String map(final String internalName) {\n+    final Map.Entry<String, String> e = map.floorEntry(internalName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg5NTc3Nw==", "bodyText": "Yeah, that's a great trick for checking if a string with a common prefix exists in a list. Probably a bit overkill for the small list we have now, but you never know if it's going to grow...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378895777", "createdAt": "2020-02-13T14:31:45Z", "author": {"login": "prydin"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ShadingRemapper.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package io.opentelemetry.auto.tooling;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import net.bytebuddy.jar.asm.commons.Remapper;\n+\n+public class ShadingRemapper extends Remapper {\n+  public static class Rule {\n+    private final String from;\n+    private final String to;\n+\n+    public Rule(String from, String to) {\n+      // Strip prefix added to prevent the build-time relocation from changing the names\n+      if (from.startsWith(\"#\")) {\n+        from = from.substring(1);\n+      }\n+      if (to.startsWith(\"#\")) {\n+        to = to.substring(1);\n+      }\n+      this.from = from.replace('.', '/');\n+      this.to = to.replace('.', '/');\n+    }\n+  }\n+\n+  public static Rule rule(final String from, final String to) {\n+    return new Rule(from, to);\n+  }\n+\n+  private final TreeMap<String, String> map = new TreeMap<>();\n+\n+  public ShadingRemapper(final Rule... rules) {\n+    for (final Rule rule : rules) {\n+      map.put(rule.from, rule.to);\n+    }\n+  }\n+\n+  @Override\n+  public String map(final String internalName) {\n+    final Map.Entry<String, String> e = map.floorEntry(internalName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDIzNw=="}, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1NDM2OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/tooling/ExporterLoaderTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMzoyN1rOFpGong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMzoyN1rOFpGong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDYzOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/159#discussion_r378644638", "createdAt": "2020-02-13T04:23:27Z", "author": {"login": "trask"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/tooling/ExporterLoaderTest.groovy", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.opentelemetry.auto.tooling\n+\n+\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import io.opentelemetry.sdk.OpenTelemetrySdk\n+\n+class ExporterLoaderTest extends AgentSpecification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2f7532728ed3131f29474662b58fafb277c7ec"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 570, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}