{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDUyNTQz", "number": 1528, "title": "Run muzzle once per instrumented library - introducing InstrumentationModule", "bodyText": "Implementation of this concept: #1274 (comment)\nPros:\n\nshared muzzle matcher, result for CL is cached on the first run, so it's effectively run once for module;\nsame with class loader matcher;\nand helper class injector.\n\nSpring MVC was chosen as the example because it's used in the smoke tests - this way you can see that modules work E2E.\nI intentionally made it possible to have both Instrumenters and InstrumentationModules to avoid giant monster PR - if you like this concept I'll replace all Instrumenters in batches.", "createdAt": "2020-10-29T17:47:02Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528", "merged": true, "mergeCommit": {"oid": "8629edd3463143de3ea3de23882db6ad8c6c5ac5"}, "closed": true, "closedAt": "2020-11-04T14:39:13Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXkEgiABqjM5NDA1MTM1Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY3RqGgBqjM5NTIzNDcyOTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc8d1e4dc97acdd6e56dce999aa49831781758e5", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc8d1e4dc97acdd6e56dce999aa49831781758e5", "committedDate": "2020-10-29T17:42:14Z", "message": "Run muzzle once per instrumented library - introducing InstrumentationModule"}, "afterCommit": {"oid": "54597eb823aaa7b3fdca34fd49d0a2acfd79d9d3", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/54597eb823aaa7b3fdca34fd49d0a2acfd79d9d3", "committedDate": "2020-10-30T10:18:48Z", "message": "Run muzzle once per instrumented library - introducing InstrumentationModule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTUwNDgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#pullrequestreview-522150482", "createdAt": "2020-11-03T02:02:39Z", "commit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTkyODg3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#pullrequestreview-522192887", "createdAt": "2020-11-03T05:10:24Z", "commit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMDoyNFrOHsgcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMzozM1rOHsgeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDkyOA==", "bodyText": "Now that it's not service loader, just wondering do these need to be public?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516430928", "createdAt": "2020-11-03T05:10:24Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -16,43 +15,26 @@\n import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n-import com.google.auto.service.AutoService;\n import io.opentelemetry.api.trace.Span;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n import io.opentelemetry.javaagent.instrumentation.api.SpanWithScope;\n-import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n-@AutoService(Instrumenter.class)\n-public final class HandlerAdapterInstrumentation extends Instrumenter.Default {\n-\n-  public HandlerAdapterInstrumentation() {\n-    super(\"spring-web\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.servlet.HandlerAdapter\");\n-  }\n+public final class HandlerAdapterInstrumentation implements TypeInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTU2MQ==", "bodyText": "The only unfortunate change is that these optimizations for expensive type matcher aren't next to the optimized type matcher anymore. I don't know if that means it's good to accept classloaderMatcher on typeinstrumentation as well or not, wonder what others think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1528#discussion_r516431561", "createdAt": "2020-11-03T05:13:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-webmvc-3.1/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/springwebmvc/SpringMvcInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Arrays;\n+import java.util.List;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class SpringMvcInstrumentationModule extends InstrumentationModule {\n+  public SpringMvcInstrumentationModule() {\n+    super(\"spring-mvc\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatchers.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f9fd82404de40da81b7b0ed9b807ba901df9687", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9f9fd82404de40da81b7b0ed9b807ba901df9687", "committedDate": "2020-11-03T10:51:12Z", "message": "Run muzzle once per instrumented library - introducing InstrumentationModule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654acad1cb077e5c933de002c924338e44924092", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/654acad1cb077e5c933de002c924338e44924092", "committedDate": "2020-11-03T10:51:12Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "744d9125e693e778ad9637467bb72a58e4168311", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/744d9125e693e778ad9637467bb72a58e4168311", "committedDate": "2020-11-03T10:51:12Z", "message": "Fix muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "committedDate": "2020-11-03T11:15:16Z", "message": "Apply code review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7cd2e640634d4531fb642391839d52f4c77c2ec", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7cd2e640634d4531fb642391839d52f4c77c2ec", "committedDate": "2020-10-30T11:14:50Z", "message": "Fix muzzle"}, "afterCommit": {"oid": "97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97e0fa90ca4c72b15b4567d61062b90f2187d9ec", "committedDate": "2020-11-03T11:15:16Z", "message": "Apply code review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2430, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}