{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTM2NTQz", "number": 195, "title": "Proof of Concept of \"Typed Spans\"", "bodyText": "Primary goal is to maintain a simple and semantic interface for the code using it. See TypedTracerDemonstration for example usage.\nIt's proposed that these would replace the current decorator hierarchy.", "createdAt": "2020-02-29T19:44:43Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195", "merged": true, "mergeCommit": {"oid": "f5c5e57020bff0211a0a57ed1309ff57f8ce68f4"}, "closed": true, "closedAt": "2020-03-13T01:33:50Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJJ47yAH2gAyMzgxOTM2NTQzOmM0MjVlMjIyYzU5MGU4NGUzZTU3ZWNhNDZiOTQ3ODAzMTJjMTQzNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXEmgOgFqTM5MTkxNTU0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c425e222c590e84e3e57eca46b94780312c14371", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c425e222c590e84e3e57eca46b94780312c14371", "committedDate": "2020-02-29T19:42:44Z", "message": "Proof of Concept of \"Typed Spans\"\n\n[skip ci]\n\nPrimary goal is to maintain a simple and semantic interface for the code using it. See `HttpClientTracerDemonstration` for example usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e7a42aacb399a14bb8cec1c5876bb233e3778b74", "committedDate": "2020-02-29T21:56:11Z", "message": "Add additional startSpan methods and restructure to allow tracer.extract at build time.\n\n[skip ci]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODIyMjM3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-366822237", "createdAt": "2020-02-29T21:58:39Z", "commit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTo1ODozOVrOFwLI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQyMTo1ODozOVrOFwLI8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODQ4MA==", "bodyText": "See here for example usage.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386058480", "createdAt": "2020-02-29T21:58:39Z", "author": {"login": "tylerbenson"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzE0NjIx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-367714621", "createdAt": "2020-03-03T05:42:48Z", "commit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTo0Mjo0OFrOFw4-hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjozMzoxN1rOFw5vkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwOTQ3Ng==", "bodyText": "I like end() taking either response or throwable, makes usage very clear \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386809476", "createdAt": "2020-03-03T05:42:48Z", "author": {"login": "trask"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      // make request\n+      String response = \"response instance\";\n+\n+      // span.onResponse(\"response instance\"); // implicitly called on end.\n+      span.end(response);\n+    } catch (Exception ex) {\n+      span.end(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxMjU3NA==", "bodyText": "Can onRequest() and onResponse() be protected so it's not confusing whether or not they need to be called?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386812574", "createdAt": "2020-03-03T05:55:38Z", "author": {"login": "trask"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/HttpClientTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.context.Scope;\n+\n+class HttpClientTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA==", "bodyText": "It would be nice if BaseTypedSpan didn't have these two end() methods, so that we could have some typed span hierarchies where they don't exist and it's super clear that you have to call either end(response) or end(throwable)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386814918", "createdAt": "2020-03-03T06:04:49Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+\n+import java.util.Map;\n+\n+// TODO: This should be moved into the API.\n+public class DelegatingSpan implements Span {\n+  protected final Span delegate;\n+\n+  public DelegatingSpan(Span delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, String value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, long value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, double value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, boolean value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, AttributeValue value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void addEvent(String name) {\n+    delegate.addEvent(name);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, long timestamp) {\n+    delegate.addEvent(name, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes) {\n+    delegate.addEvent(name, attributes);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes, long timestamp) {\n+    delegate.addEvent(name, attributes, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event) {\n+    delegate.addEvent(event);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event, long timestamp) {\n+    delegate.addEvent(event, timestamp);\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    delegate.setStatus(status);\n+  }\n+\n+  @Override\n+  public void updateName(String name) {\n+    delegate.updateName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.end();\n+  }\n+\n+  @Override\n+  public void end(EndSpanOptions endOptions) {\n+    delegate.end(endOptions);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNTg3OQ==", "bodyText": "What do you think about putting this method in the typed tracer?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386815879", "createdAt": "2020-03-03T06:09:05Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n+    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n+\n+  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n+    super(tracer, delegate);\n+  }\n+\n+  public T onRequest(REQUEST request) {\n+    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());\n+    return self();\n+  }\n+\n+  protected abstract HttpTextFormat.Setter<REQUEST> getSetter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTYzOQ==", "bodyText": "Eeek \ud83d\ude06", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386819639", "createdAt": "2020-03-03T06:23:58Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/tracer/ClientTypedTracer.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.opentelemetry.auto.typed.tracer;\n+\n+import io.opentelemetry.auto.typed.span.ClientTypedSpan;\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class ClientTypedTracer<\n+        T extends ClientTypedSpan<T, REQUEST, RESPONSE>, REQUEST, RESPONSE>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMjAzMw==", "bodyText": "Can this be moved to the tracer? (similar to how extraction is done in the HttpServerTypedTracer below)\nAdded benefit is then I don't think the tracer field in BaseTypedSpan would be needed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r386822033", "createdAt": "2020-03-03T06:33:17Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/HttpClientTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+public abstract class HttpClientTypedSpan<T extends HttpClientTypedSpan, REQUEST, RESPONSE>\n+    extends ClientTypedSpan<T, REQUEST, RESPONSE> {\n+\n+  public HttpClientTypedSpan(Tracer tracer, Span delegate) {\n+    super(tracer, delegate);\n+  }\n+\n+  public T onRequest(REQUEST request) {\n+    tracer.getHttpTextFormat().inject(getContext(), request, getSetter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff83219dee7febe10ef04bccd59a69331185880", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3ff83219dee7febe10ef04bccd59a69331185880", "committedDate": "2020-03-03T19:54:11Z", "message": "Move classes into a different package structure to enable less visibility.\n\nAnd move setter method to tracer."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d6f514f862242eda35f964e71681725b5b4609", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2d6f514f862242eda35f964e71681725b5b4609", "committedDate": "2020-03-03T20:01:21Z", "message": "Add deprecation warnings to unused end methods\n\n[skip ci]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjkwNDIz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-368290423", "createdAt": "2020-03-03T20:12:35Z", "commit": {"oid": "3ff83219dee7febe10ef04bccd59a69331185880"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMjozNVrOFxU5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyMToxMlrOFxVKaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2Njg0Ng==", "bodyText": "This doesn't look like it's used anymore", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387266846", "createdAt": "2020-03-03T20:12:35Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/base/BaseTypedSpan.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.opentelemetry.auto.typed.base;\n+\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class BaseTypedSpan<T extends BaseTypedSpan> extends DelegatingSpan {\n+\n+  public BaseTypedSpan(Span delegate) {\n+    super(delegate);\n+  }\n+\n+  public void end(Throwable throwable) {\n+    // add error details to the span.\n+    super.end();\n+  }\n+\n+  protected abstract T self();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff83219dee7febe10ef04bccd59a69331185880"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MTI3Mw==", "bodyText": "Oh, I found example where I'd seen this kind of thing before, Guava's ImmutableList:\n  /**\n   * Guaranteed to throw an exception and leave the list unmodified.\n   *\n   * @throws UnsupportedOperationException always\n   * @deprecated Unsupported operation.\n   */\n  @Deprecated\n  @Override\n  public final void add(int index, E element) {\n    throw new UnsupportedOperationException();\n  }\n\nI think it would be helpful to add this kind of override for end() and end(endOptions) methods in ClientTypedSpan and ServerTypedSpan to help avoid confusion of which end(...) method to call.\nMy extra comment above isn't showing down here, so copying it:\n\nAlthough API is not supposed to throw exceptions, and we're hoping these might someday be there, so maybe mark deprecated, but no-op instead of throw exception?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r387271273", "createdAt": "2020-03-03T20:21:12Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/span/DelegatingSpan.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.opentelemetry.auto.typed.span;\n+\n+import io.opentelemetry.trace.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+\n+import java.util.Map;\n+\n+// TODO: This should be moved into the API.\n+public class DelegatingSpan implements Span {\n+  protected final Span delegate;\n+\n+  public DelegatingSpan(Span delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, String value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, long value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, double value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, boolean value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(String key, AttributeValue value) {\n+    delegate.setAttribute(key, value);\n+  }\n+\n+  @Override\n+  public void addEvent(String name) {\n+    delegate.addEvent(name);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, long timestamp) {\n+    delegate.addEvent(name, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes) {\n+    delegate.addEvent(name, attributes);\n+  }\n+\n+  @Override\n+  public void addEvent(String name, Map<String, AttributeValue> attributes, long timestamp) {\n+    delegate.addEvent(name, attributes, timestamp);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event) {\n+    delegate.addEvent(event);\n+  }\n+\n+  @Override\n+  public void addEvent(Event event, long timestamp) {\n+    delegate.addEvent(event, timestamp);\n+  }\n+\n+  @Override\n+  public void setStatus(Status status) {\n+    delegate.setStatus(status);\n+  }\n+\n+  @Override\n+  public void updateName(String name) {\n+    delegate.updateName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.end();\n+  }\n+\n+  @Override\n+  public void end(EndSpanOptions endOptions) {\n+    delegate.end(endOptions);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxNDkxOA=="}, "originalCommit": {"oid": "e7a42aacb399a14bb8cec1c5876bb233e3778b74"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNzU4ODM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-373758839", "createdAt": "2020-03-12T17:27:36Z", "commit": {"oid": "3ff83219dee7febe10ef04bccd59a69331185880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyNzozNlrOF1oPvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoyNzozNlrOF1oPvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3ODIzNw==", "bodyText": "I would not provide this method and instead force the user to provide the request already in startSpan, so that all attributes are set on the builder and thus available to samplers (and onStart callbacks of SpanProcessors)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r391778237", "createdAt": "2020-03-12T17:27:36Z", "author": {"login": "Oberon00"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/typed/server/ServerTypedSpan.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package io.opentelemetry.auto.typed.server;\n+\n+import io.opentelemetry.auto.typed.base.BaseTypedSpan;\n+import io.opentelemetry.trace.Span;\n+\n+public abstract class ServerTypedSpan<T extends ServerTypedSpan, REQUEST, RESPONSE>\n+    extends BaseTypedSpan<T> {\n+\n+  public ServerTypedSpan(Span delegate) {\n+    super(delegate);\n+  }\n+\n+  protected abstract T onRequest(REQUEST request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff83219dee7febe10ef04bccd59a69331185880"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82f271a38e972f3b403cdf5edc4b3968dafb87a", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b82f271a38e972f3b403cdf5edc4b3968dafb87a", "committedDate": "2020-03-12T21:47:42Z", "message": "Remove nullable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49a6aa2c8e1b583297251e2a18244b73a05bb6e2", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/49a6aa2c8e1b583297251e2a18244b73a05bb6e2", "committedDate": "2020-03-12T22:17:26Z", "message": "Add headers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0873848dcafa32a5e70f957b2d84bc8f0e86c215", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0873848dcafa32a5e70f957b2d84bc8f0e86c215", "committedDate": "2020-03-12T22:35:17Z", "message": "Merge branch 'master' into tyler/POC-typed-tracers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTk2Njc5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-373996679", "createdAt": "2020-03-13T01:32:36Z", "commit": {"oid": "0873848dcafa32a5e70f957b2d84bc8f0e86c215"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTE1NTQz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#pullrequestreview-391915543", "createdAt": "2020-04-13T01:28:00Z", "commit": {"oid": "0873848dcafa32a5e70f957b2d84bc8f0e86c215"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMToyODowMVrOGEaXWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMToyODowMVrOGEaXWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3OTQ1MQ==", "bodyText": "suggestion: make a static class Request and Response as tracer.startSpan(\"request instance\"); looks very much like a normal start of a span with a pre-canned name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/195#discussion_r407279451", "createdAt": "2020-04-13T01:28:01Z", "author": {"login": "codefromthecrypt"}, "path": "agent-tooling/src/test/groovy/io/opentelemetry/auto/typed/TypedTracerDemonstration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.typed;\n+\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedSpan;\n+import io.opentelemetry.auto.typed.client.SampleHttpClientTypedTracer;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedSpan;\n+import io.opentelemetry.auto.typed.server.SampleHttpServerTypedTracer;\n+import io.opentelemetry.context.Scope;\n+\n+class TypedTracerDemonstration {\n+\n+  private void serverDemonstration() {\n+    SampleHttpServerTypedTracer tracer = new SampleHttpServerTypedTracer();\n+\n+    SampleHttpServerTypedSpan span = tracer.startSpan(\"request instance\");\n+    // span.onRequest(\"request instance\"); // implicitly called on start.\n+\n+    try (Scope scope = tracer.withSpan(span)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0873848dcafa32a5e70f957b2d84bc8f0e86c215"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3322, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}