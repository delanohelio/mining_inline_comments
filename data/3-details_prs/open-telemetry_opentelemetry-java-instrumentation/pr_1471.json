{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjIxODUx", "number": 1471, "title": "Wrappers for AWS lambda tracing", "bodyText": "Resolves #1469\nAdds:\n\nrequest streams handler (sibling to already existing request handler)\nwrappers for handlers, allowing tracing without code modifications\ntests", "createdAt": "2020-10-23T21:18:27Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471", "merged": true, "mergeCommit": {"oid": "3a81c52d2bdf17e08eea3561f0dee6ba938c8328"}, "closed": true, "closedAt": "2020-10-27T07:55:32Z", "author": {"login": "kubawach"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVdQ8eAH2gAyNTA5MjIxODUxOjRhZDAxZDlhZmQ5ZjAzZWE2NzQ1NzYyMTUwMTRhOWM2YjdkZjc0YTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWj03BgFqTUxNzQwODc1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ad01d9afd9f03ea674576215014a9c6b7df74a3", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4ad01d9afd9f03ea674576215014a9c6b7df74a3", "committedDate": "2020-10-23T21:15:24Z", "message": "wrappers for AWS lambda instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDgwNzY1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471#pullrequestreview-516480765", "createdAt": "2020-10-26T05:46:34Z", "commit": {"oid": "4ad01d9afd9f03ea674576215014a9c6b7df74a3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0NjozNVrOHoBh5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0ODozNlrOHoBjpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMDE0OQ==", "bodyText": "Thanks for handling the stream handlers :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471#discussion_r511730149", "createdAt": "2020-10-26T05:46:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestStreamHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A base class similar to {@link RequestStreamHandler} but will automatically trace invocations of\n+ * {@link #doHandleRequest(InputStream input, OutputStream output, Context)}.\n+ */\n+public abstract class TracingRequestStreamHandler implements RequestStreamHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad01d9afd9f03ea674576215014a9c6b7df74a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMDMwMg==", "bodyText": "I think we need to wrap OutputStream so the span is closed on OutputStream.close which could be asynchronous?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471#discussion_r511730302", "createdAt": "2020-10-26T05:47:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestStreamHandler;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A base class similar to {@link RequestStreamHandler} but will automatically trace invocations of\n+ * {@link #doHandleRequest(InputStream input, OutputStream output, Context)}.\n+ */\n+public abstract class TracingRequestStreamHandler implements RequestStreamHandler {\n+\n+  private final AwsLambdaTracer tracer;\n+\n+  /**\n+   * Creates a new {@link TracingRequestStreamHandler} which traces using the default {@link\n+   * Tracer}.\n+   */\n+  protected TracingRequestStreamHandler() {\n+    this.tracer = new AwsLambdaTracer();\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestStreamHandler} which traces using the specified {@link\n+   * Tracer}.\n+   */\n+  protected TracingRequestStreamHandler(Tracer tracer) {\n+    this.tracer = new AwsLambdaTracer(tracer);\n+  }\n+\n+  /**\n+   * Creates a new {@link TracingRequestStreamHandler} which traces using the specified {@link\n+   * AwsLambdaTracer}.\n+   */\n+  protected TracingRequestStreamHandler(AwsLambdaTracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public final void handleRequest(InputStream input, OutputStream output, Context context)\n+      throws IOException {\n+    Span span = tracer.startSpan(context, Kind.SERVER);\n+    Throwable error = null;\n+    try (Scope ignored = tracer.startScope(span)) {\n+      doHandleRequest(input, output, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad01d9afd9f03ea674576215014a9c6b7df74a3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMDU5OQ==", "bodyText": "I wonder if we should just make this static since the configuration is?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471#discussion_r511730599", "createdAt": "2020-10-26T05:48:36Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamWrapper.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import com.amazonaws.services.lambda.runtime.RequestStreamHandler;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Wrapper for {@link TracingRequestStreamHandler}. Allows for wrapping a regular lambda, enabling\n+ * single span tracing. Main lambda class should be configured as env property OTEL_LAMBDA_HANDLER\n+ * in package.ClassName::methodName format. Lambda class must implement {@link\n+ * RequestStreamHandler}.\n+ */\n+public class TracingRequestStreamWrapper extends TracingRequestStreamHandler {\n+\n+  private WrappedLambda wrappedLambda;\n+\n+  @Override\n+  protected void doHandleRequest(InputStream input, OutputStream output, Context context)\n+      throws IOException {\n+\n+    if (wrappedLambda == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad01d9afd9f03ea674576215014a9c6b7df74a3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9083eb25e4af459552a4b3af303a35528ec53dee", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9083eb25e4af459552a4b3af303a35528ec53dee", "committedDate": "2020-10-26T10:01:53Z", "message": "code review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4fe1be2462210361979ca6abb693a3dfb84e6d2", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a4fe1be2462210361979ca6abb693a3dfb84e6d2", "committedDate": "2020-10-26T12:13:54Z", "message": "code review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDA4NzU5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1471#pullrequestreview-517408759", "createdAt": "2020-10-27T07:27:59Z", "commit": {"oid": "a4fe1be2462210361979ca6abb693a3dfb84e6d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2397, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}