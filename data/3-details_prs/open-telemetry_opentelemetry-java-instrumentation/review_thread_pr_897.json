{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNDQxMjY1", "number": 897, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoxNToyM1rOEVhiUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozMzoyM1rOEVh6Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDA1MDExOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/servlet-3.0/src/test/groovy/TomcatServlet3Test.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoxNToyM1rOG8VJOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoxNToyM1rOG8VJOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxNDE2OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/897#discussion_r465914168", "createdAt": "2020-08-05T18:15:23Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/servlet-3.0/src/test/groovy/TomcatServlet3Test.groovy", "diffHunk": "@@ -125,22 +123,19 @@ abstract class TomcatServlet3Test extends AbstractServlet3Test<Tomcat, Context>\n     }\n \n     and:\n-    assertTraces(count * 2) {\n+    assertTraces(count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b4d46096f1eed570fcb8bc46f05e367e0e438f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDA1Mjc1OnYy", "diffSide": "RIGHT", "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoxNjoxN1rOG8VK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoxNjoxN1rOG8VK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxNDYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" { it == null || it == TEST_CLIENT_IP }\n          \n          \n            \n                    // Optional\n          \n          \n            \n                    // Optional\n          \n          \n            \n                    \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" { it == null || it == TEST_CLIENT_IP }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/897#discussion_r465914610", "createdAt": "2020-08-05T18:16:17Z", "author": {"login": "trask"}, "path": "testing-common/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "diffHunk": "@@ -479,7 +474,8 @@ abstract class HttpServerTest<SERVER> extends AgentTestRunner {\n       attributes {\n         \"${SemanticAttributes.NET_PEER_PORT.key()}\" { it == null || it instanceof Long }\n         \"${SemanticAttributes.NET_PEER_IP.key()}\" { it == null || it == \"127.0.0.1\" } // Optional\n-        \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" { it == null || it == TEST_CLIENT_IP } // Optional\n+        \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" { it == null || it == TEST_CLIENT_IP }\n+        // Optional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b4d46096f1eed570fcb8bc46f05e367e0e438f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDExMTAzOnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/HttpCodecFilterAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozMzoyM1rOG8VwOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODozNjowOVrOG8V2AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNDE1Mw==", "bodyText": "just curious, is this related to this PR, or a fix for #845?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/897#discussion_r465924153", "createdAt": "2020-08-05T18:33:23Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/HttpCodecFilterAdvice.java", "diffHunk": "@@ -43,6 +43,8 @@ public static void onExit(\n     HttpRequestPacket httpRequest = (HttpRequestPacket) httpHeader;\n     Span span = TRACER.startSpan(httpRequest, httpRequest, method);\n \n-    TRACER.startScope(span, ctx);\n+    // We don't actually want to attach new context to this thread, as actual request will continue\n+    // on some other thread. But we do want to attach that new context to FilterChainContext\n+    TRACER.startScope(span, ctx).close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b4d46096f1eed570fcb8bc46f05e367e0e438f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTYzMg==", "bodyText": "This test fail on me locally, so I fixed it. It probable is related to that...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/897#discussion_r465925632", "createdAt": "2020-08-05T18:36:09Z", "author": {"login": "iNikem"}, "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/HttpCodecFilterAdvice.java", "diffHunk": "@@ -43,6 +43,8 @@ public static void onExit(\n     HttpRequestPacket httpRequest = (HttpRequestPacket) httpHeader;\n     Span span = TRACER.startSpan(httpRequest, httpRequest, method);\n \n-    TRACER.startScope(span, ctx);\n+    // We don't actually want to attach new context to this thread, as actual request will continue\n+    // on some other thread. But we do want to attach that new context to FilterChainContext\n+    TRACER.startScope(span, ctx).close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNDE1Mw=="}, "originalCommit": {"oid": "e5b4d46096f1eed570fcb8bc46f05e367e0e438f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 225, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}