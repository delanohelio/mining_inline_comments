{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0Mzc1NDc0", "number": 1110, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0MTozNVrOEeA5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NTowMFrOEeA8BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA3MzU0OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0MTozNVrOHJeofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0MTozNVrOHJeofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTExNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n          \n          \n            \n            Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701116", "createdAt": "2020-08-29T23:41:35Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA3NDk2OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NDoxOVrOHJepHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NDoxOVrOHJepHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #opentelemetry.trace.web.enabled = True\n          \n          \n            \n            #opentelemetry.trace.httpclients.enabled = True\n          \n          \n            \n            #opentelemetry.trace.tracer.samplingProbablity=1\n          \n          \n            \n            #opentelemetry.trace.exporter.loggin.enabled=True\n          \n          \n            \n            #opentelemetry.trace.aspects.enabled=True\n          \n          \n            \n            #opentelemetry.trace.web.enabled=true\n          \n          \n            \n            #opentelemetry.trace.httpclients.enabled=true\n          \n          \n            \n            #opentelemetry.trace.tracer.samplingProbablity=1\n          \n          \n            \n            #opentelemetry.trace.exporter.loggin.enabled=true\n          \n          \n            \n            #opentelemetry.trace.aspects.enabled=true", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701278", "createdAt": "2020-08-29T23:44:19Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA3NTc4OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NTowNlrOHJepcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NTowNlrOHJepcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTM2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n          \n          \n            \n            Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry starter to create an internal span and set some additional events and attributes.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701363", "createdAt": "2020-08-29T23:45:06Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA3NjA2OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NTozM1rOHJepkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwMzoyNTo0OVrOHJfiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTM5Mw==", "bodyText": "is LoggingSpanExporter the default, or does user need to add dependency for it too?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].\n          \n          \n            \n            To generate a trace, run MainServiceApplication and TimeServiceApplication, and then send a request to `localhost:8080/message`. Shown below is the output of the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701393", "createdAt": "2020-08-29T23:45:33Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcxNTg0Mg==", "bodyText": "LoggingSpanExporter is the default exporter provided by the opentelemetry-spring-starter. Users won't need to add this dependency.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479715842", "createdAt": "2020-08-30T03:25:49Z", "author": {"login": "mabdinur"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTM5Mw=="}, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA3Njg1OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NzowM1rOHJep7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo0NzowM1rOHJep7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To configure the OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemtry Spring Starter dependency with one of the artifacts listed below:\n          \n          \n            \n            To configure OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemetry Spring Starter dependency with one of the artifacts listed below:", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701486", "createdAt": "2020-08-29T23:47:03Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].\n+\n+#### MainService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=15b72a8e85c842c5}, \n+parentSpanId=SpanId{spanId=57f0106dd1121b54}, name=HTTP GET, kind=CLIENT, attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410457933181, \n+endEpochNanos=1598409410925420912}, resolvedLinks=[], resolvedEvents=[], attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, totalAttributeCount=5, \n+totalRecordedEvents=0, status=Status{canonicalCode=OK, description=null}, name=HTTP GET, endEpochNanos=1598409410925420912, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=57f0106dd1121b54}, \n+parentSpanId=SpanId{spanId=0000000000000000}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, attributes={http.status_code=AttributeValueLong{longValue=200}, \n+sampling.probability=AttributeValueDouble{doubleValue=1.0}, net.peer.port=AttributeValueLong{longValue=57578}, \n+http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/message}, net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410399317331, endEpochNanos=1598409411045782693},\n+resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200}, sampling.probability=AttributeValueDouble{doubleValue=1.0},\n+net.peer.port=AttributeValueLong{longValue=57578}, http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/message},\n+net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, totalAttributeCount=9, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409411045782693, hasEnded=true\n+}\n+```\n+\n+#### TimeService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, \n+spanId=SpanId{spanId=f2d824704be8ab10}, parentSpanId=SpanId{spanId=b4ae77c523215f9d}, \n+name=time, kind=INTERNAL, attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, status=null, \n+totalRecordedEvents=1,totalRecordedLinks=0, startEpochNanos=1598409410738665807, endEpochNanos=1598409410740607921}, resolvedLinks=[], \n+resolvedEvents=[RawTimedEvent{name=TimeServiceController Entered, attributes={}, epochNanos=1598409410738760924, totalAttributeCount=0}], \n+attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, totalAttributeCount=1, totalRecordedEvents=1, \n+status=Status{canonicalCode=OK, description=null}, name=time, endEpochNanos=1598409410740607921, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=b4ae77c523215f9d}, \n+parentSpanId=SpanId{spanId=15b72a8e85c842c5}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, \n+attributes={http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=40174}, \n+http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/time}, net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410680549805, \n+endEpochNanos=1598409410921631068}, resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200},\n+net.peer.port=AttributeValueLong{longValue=40174}, http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/time}, \n+net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, totalAttributeCount=8, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409410921631068, hasEnded=true\n+}\n+\n+```\n+\n+\n+### Exporter Starters \n+\n+To configure the OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemtry Spring Starter dependency with one of the artifacts listed below:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA4MDYxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NDoxNVrOHJerpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NDoxNVrOHJerpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             2. Use the Zipkin [quick starter](https://zipkin.io/pages/quickstart) to download and run the zipkin exporter jar \n          \n          \n            \n             2. Use the Zipkin [quick starter](https://zipkin.io/pages/quickstart) to download and run the zipkin executable jar", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701925", "createdAt": "2020-08-29T23:54:15Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].\n+\n+#### MainService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=15b72a8e85c842c5}, \n+parentSpanId=SpanId{spanId=57f0106dd1121b54}, name=HTTP GET, kind=CLIENT, attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410457933181, \n+endEpochNanos=1598409410925420912}, resolvedLinks=[], resolvedEvents=[], attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, totalAttributeCount=5, \n+totalRecordedEvents=0, status=Status{canonicalCode=OK, description=null}, name=HTTP GET, endEpochNanos=1598409410925420912, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=57f0106dd1121b54}, \n+parentSpanId=SpanId{spanId=0000000000000000}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, attributes={http.status_code=AttributeValueLong{longValue=200}, \n+sampling.probability=AttributeValueDouble{doubleValue=1.0}, net.peer.port=AttributeValueLong{longValue=57578}, \n+http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/message}, net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410399317331, endEpochNanos=1598409411045782693},\n+resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200}, sampling.probability=AttributeValueDouble{doubleValue=1.0},\n+net.peer.port=AttributeValueLong{longValue=57578}, http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/message},\n+net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, totalAttributeCount=9, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409411045782693, hasEnded=true\n+}\n+```\n+\n+#### TimeService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, \n+spanId=SpanId{spanId=f2d824704be8ab10}, parentSpanId=SpanId{spanId=b4ae77c523215f9d}, \n+name=time, kind=INTERNAL, attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, status=null, \n+totalRecordedEvents=1,totalRecordedLinks=0, startEpochNanos=1598409410738665807, endEpochNanos=1598409410740607921}, resolvedLinks=[], \n+resolvedEvents=[RawTimedEvent{name=TimeServiceController Entered, attributes={}, epochNanos=1598409410738760924, totalAttributeCount=0}], \n+attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, totalAttributeCount=1, totalRecordedEvents=1, \n+status=Status{canonicalCode=OK, description=null}, name=time, endEpochNanos=1598409410740607921, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=b4ae77c523215f9d}, \n+parentSpanId=SpanId{spanId=15b72a8e85c842c5}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, \n+attributes={http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=40174}, \n+http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/time}, net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410680549805, \n+endEpochNanos=1598409410921631068}, resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200},\n+net.peer.port=AttributeValueLong{longValue=40174}, http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/time}, \n+net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, totalAttributeCount=8, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409410921631068, hasEnded=true\n+}\n+\n+```\n+\n+\n+### Exporter Starters \n+\n+To configure the OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemtry Spring Starter dependency with one of the artifacts listed below:\n+\n+#### Maven\n+```xml\n+\n+<!-- opentelemetry starter with zipkin -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-zipkin-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with jaeger -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-jaeger-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with otlp -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-otlp-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+```\n+\n+#### Gradle\n+```gradle\n+\n+//opentelemetry starter with zipkin configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-zipkin-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with jaeger configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-jaeger-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with otlp configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-otlp-exporter-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+#### Exporter Configuration Properties\n+\n+Add the following configurations to overwrite the default exporter values listed below.\n+\n+```\n+## Default tracer configurations\n+opentelemetry.trace.tracer.name=main_service\n+#opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default exporter configurations\n+#opentelemetry.trace.exporters.otlp.servicename=unknown\n+#opentelemetry.trace.exporters.otlp.endpoint=localhost:55680\n+#opentelemetry.trace.exporters.otlp.spantimeout=1s\n+#opentelemetry.trace.exporters.jaeger.servicename=unknown\n+#opentelemetry.trace.exporters.jaeger.endpoint=localhost:14250\n+#opentelemetry.trace.exporters.jaeger.spantimeout=1s\n+#opentelemetry.trace.exporters.zipkin.servicename=unknown\n+#opentelemetry.trace.exporters.zipkin.endpoint=http://localhost:9411/api/v2/spans\n+```\n+\n+### Sample Trace Zipkin\n+\n+To generate a trace using the zipkin exporter follow the steps below: \n+ 1. Replace `opentelemetry-spring-starter` with `opentelemetry-zipkin-starter` in your pom or gradle build file\n+ 2. Use the Zipkin [quick starter](https://zipkin.io/pages/quickstart) to download and run the zipkin exporter jar ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA4MDgwOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NDo0OVrOHJervg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NDo0OVrOHJervg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             4. Use your favorite browser to send a request to `localhost:8080/message`\n          \n          \n            \n             4. Use your favorite browser to send a request to `http://localhost:8080/message`", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701950", "createdAt": "2020-08-29T23:54:49Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].\n+\n+#### MainService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=15b72a8e85c842c5}, \n+parentSpanId=SpanId{spanId=57f0106dd1121b54}, name=HTTP GET, kind=CLIENT, attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410457933181, \n+endEpochNanos=1598409410925420912}, resolvedLinks=[], resolvedEvents=[], attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, totalAttributeCount=5, \n+totalRecordedEvents=0, status=Status{canonicalCode=OK, description=null}, name=HTTP GET, endEpochNanos=1598409410925420912, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=57f0106dd1121b54}, \n+parentSpanId=SpanId{spanId=0000000000000000}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, attributes={http.status_code=AttributeValueLong{longValue=200}, \n+sampling.probability=AttributeValueDouble{doubleValue=1.0}, net.peer.port=AttributeValueLong{longValue=57578}, \n+http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/message}, net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410399317331, endEpochNanos=1598409411045782693},\n+resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200}, sampling.probability=AttributeValueDouble{doubleValue=1.0},\n+net.peer.port=AttributeValueLong{longValue=57578}, http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/message},\n+net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, totalAttributeCount=9, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409411045782693, hasEnded=true\n+}\n+```\n+\n+#### TimeService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, \n+spanId=SpanId{spanId=f2d824704be8ab10}, parentSpanId=SpanId{spanId=b4ae77c523215f9d}, \n+name=time, kind=INTERNAL, attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, status=null, \n+totalRecordedEvents=1,totalRecordedLinks=0, startEpochNanos=1598409410738665807, endEpochNanos=1598409410740607921}, resolvedLinks=[], \n+resolvedEvents=[RawTimedEvent{name=TimeServiceController Entered, attributes={}, epochNanos=1598409410738760924, totalAttributeCount=0}], \n+attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, totalAttributeCount=1, totalRecordedEvents=1, \n+status=Status{canonicalCode=OK, description=null}, name=time, endEpochNanos=1598409410740607921, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=b4ae77c523215f9d}, \n+parentSpanId=SpanId{spanId=15b72a8e85c842c5}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, \n+attributes={http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=40174}, \n+http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/time}, net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410680549805, \n+endEpochNanos=1598409410921631068}, resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200},\n+net.peer.port=AttributeValueLong{longValue=40174}, http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/time}, \n+net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, totalAttributeCount=8, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409410921631068, hasEnded=true\n+}\n+\n+```\n+\n+\n+### Exporter Starters \n+\n+To configure the OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemtry Spring Starter dependency with one of the artifacts listed below:\n+\n+#### Maven\n+```xml\n+\n+<!-- opentelemetry starter with zipkin -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-zipkin-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with jaeger -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-jaeger-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with otlp -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-otlp-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+```\n+\n+#### Gradle\n+```gradle\n+\n+//opentelemetry starter with zipkin configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-zipkin-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with jaeger configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-jaeger-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with otlp configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-otlp-exporter-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+#### Exporter Configuration Properties\n+\n+Add the following configurations to overwrite the default exporter values listed below.\n+\n+```\n+## Default tracer configurations\n+opentelemetry.trace.tracer.name=main_service\n+#opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default exporter configurations\n+#opentelemetry.trace.exporters.otlp.servicename=unknown\n+#opentelemetry.trace.exporters.otlp.endpoint=localhost:55680\n+#opentelemetry.trace.exporters.otlp.spantimeout=1s\n+#opentelemetry.trace.exporters.jaeger.servicename=unknown\n+#opentelemetry.trace.exporters.jaeger.endpoint=localhost:14250\n+#opentelemetry.trace.exporters.jaeger.spantimeout=1s\n+#opentelemetry.trace.exporters.zipkin.servicename=unknown\n+#opentelemetry.trace.exporters.zipkin.endpoint=http://localhost:9411/api/v2/spans\n+```\n+\n+### Sample Trace Zipkin\n+\n+To generate a trace using the zipkin exporter follow the steps below: \n+ 1. Replace `opentelemetry-spring-starter` with `opentelemetry-zipkin-starter` in your pom or gradle build file\n+ 2. Use the Zipkin [quick starter](https://zipkin.io/pages/quickstart) to download and run the zipkin exporter jar \n+    - Ensure the zipkin endpoint matches the default value listed in your application properties\n+ 3. Run `MainServiceApplication.java` and `TimeServiceApplication.java`\n+ 4. Use your favorite browser to send a request to `localhost:8080/message`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTA4MTAxOnYy", "diffSide": "RIGHT", "path": "instrumentation/spring/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NTowMFrOHJer1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQyMzo1NTowMFrOHJer1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcwMTk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             5. Navigate to `localhost:9411` to see your trace\n          \n          \n            \n             5. Navigate to `http://localhost:9411` to see your trace", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1110#discussion_r479701972", "createdAt": "2020-08-29T23:55:00Z", "author": {"login": "trask"}, "path": "instrumentation/spring/README.md", "diffHunk": "@@ -592,7 +592,396 @@ To create a sample trace enter `localhost:8080/message` in a browser. This trace\n \n \n \n-## Auto Instrumentation: Spring Starters\n+## Auto Instrumentation using Spring Starters\n \n-<!-- TODO: Add Tutorial -->\n+In this tutorial we will create two SpringBoot applications (MainService and TimeService). We will use [opentelemetry-spring-starter](starters/spring-starter) to enable distributed tracing using OpenTelemetry and export spans using the default LoggingSpanExporter. We will also use the [opentelemetry-zipkin-exporter-starter](starters/zipkin-exporter-starter) to export traces to Zipkin.\n \n+### OpenTelemetry Spring Starter Dependencies\n+\n+Add the following dependencies to your build file.\n+\n+Replace `OPENTELEMETRY_VERSION` with the latest stable [release](https://search.maven.org/search?q=g:io.opentelemetry).\n+ - Minimum version: `0.8.0`\n+ - Note: You may need to include our bintray maven repository to your build file: `https://dl.bintray.com/open-telemetry/maven/`. As of August 2020 the latest opentelemetry-java-instrumentation artifacts are not published to maven-central. Please check the [releasing](https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/RELEASING.md) doc for updates to this process.\n+\n+#### Maven\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry.instrumentation</groupId>\n+   <artifactId>opentelemetry-spring-starter</artifactId>\n+   <version>OPENTELEMETRY_VERSION</version>\n+</dependency>\n+```\n+\n+#### Gradle\n+```gradle\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-spring-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+### Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `MainService` and the other `TimeService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies listed above.  and they will be dealing with time.\n+\n+### Main Service Application\n+\n+Configure the main class in your `MainService` project to match the file below. In this example `MainService` will be a client of `TimeService`. The RestController and RestTemplate Bean initialized in the file below will be auto-instrumented by the opentelemetry spring starter.\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+@SpringBootApplication\n+public class MainServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(MainServiceApplication.class, args);\n+  }\n+  \n+  @RestController\n+  @RequestMapping(value = \"/message\")\n+  public class MainServiceController {\n+     private static final String TIME_SERVICE_URL = \"http://localhost:8080/time\";\n+     \n+     @Autowired\n+     private RestTemplate restTemplate;\n+\n+     @GetMapping\n+     public String message() {\n+        return restTemplate.exchange(TIME_SERVICE_URL, HttpMethod.GET, null, String.class).getBody();\n+     }\n+    \n+    @Bean\n+    public RestTemplate restTemplate() {\n+  \t  return new RestTemplate();\n+    }\n+  }\n+}\n+```\n+\n+#### Application Configurations\n+\n+The following tracer configurations can be used to customize your instrumentation. Add the following values to your project's resource/application.properties file:\n+\n+```properties\n+\n+## TimeService will run on port 8080\n+## Setting the server port of MainService to 8081 will prevent conflicts\n+server.port=8081\n+\n+## Set Tracer name\n+opentelemetry.trace.tracer.name=time_service\n+opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default configurations\n+#opentelemetry.trace.web.enabled = True\n+#opentelemetry.trace.httpclients.enabled = True\n+#opentelemetry.trace.tracer.samplingProbablity=1\n+#opentelemetry.trace.exporter.loggin.enabled=True\n+#opentelemetry.trace.aspects.enabled=True\n+\n+```\n+\n+Check out [OpenTelemetry Spring Boot AutoConfigure](spring-boot-autoconfigure/README.md) to learn more.\n+\n+\n+\n+### TimeService\n+\n+Configure the main class in your `Time Service` project to match the file below. Here we use the Tracer bean provided by the OpenTelemetry to create an internal span and set some additional events and attributes. \n+\n+```java \n+\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@SpringBootApplication\n+public class TimeServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(TimeServiceApplication.class, args);\n+  }\n+\n+  @RestController\n+  @RequestMapping(value = \"/time\")\n+  public class TimeServiceController {\n+     @Autowired\n+     private Tracer tracer;\n+\n+     @GetMapping\n+     public String time() {\n+        withSpanMethod();\n+\n+        Span span = tracer.spanBuilder(\"time\").startSpan();\n+        try (Scope scope = tracer.withSpan(span)) {\n+           span.addEvent(\"TimeServiceController Entered\");\n+           span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+           return \"It's time to get a watch\";\n+        } finally {\n+           span.end();\n+        }\n+     }\n+     \n+     @WithSpan(kind=Span.Kind.SERVER)\n+     public void withSpanMethod() {}\n+  }\n+}\n+```\n+\n+\n+### Generating Trace - LoggingSpanExporter\n+\n+To generate a trace run MainServiceApplication and TimeServiceApplication and then send a request to `localhost:8080/message`. Shown below is the output of the the default span exporter - (LoggingSpanExporter)[https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/logging].\n+\n+#### MainService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=15b72a8e85c842c5}, \n+parentSpanId=SpanId{spanId=57f0106dd1121b54}, name=HTTP GET, kind=CLIENT, attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410457933181, \n+endEpochNanos=1598409410925420912}, resolvedLinks=[], resolvedEvents=[], attributes={net.peer.name=AttributeValueString{stringValue=localhost},\n+http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=8080}, \n+http.url=AttributeValueString{stringValue=http://localhost:8080/time}, http.method=AttributeValueString{stringValue=GET}}, totalAttributeCount=5, \n+totalRecordedEvents=0, status=Status{canonicalCode=OK, description=null}, name=HTTP GET, endEpochNanos=1598409410925420912, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=57f0106dd1121b54}, \n+parentSpanId=SpanId{spanId=0000000000000000}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, attributes={http.status_code=AttributeValueLong{longValue=200}, \n+sampling.probability=AttributeValueDouble{doubleValue=1.0}, net.peer.port=AttributeValueLong{longValue=57578}, \n+http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/message}, net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410399317331, endEpochNanos=1598409411045782693},\n+resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200}, sampling.probability=AttributeValueDouble{doubleValue=1.0},\n+net.peer.port=AttributeValueLong{longValue=57578}, http.user_agent=AttributeValueString{stringValue=PostmanRuntime/7.26.2}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/message},\n+net.peer.ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=0:0:0:0:0:0:0:1}}, totalAttributeCount=9, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409411045782693, hasEnded=true\n+}\n+```\n+\n+#### TimeService\n+\n+```java\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, \n+spanId=SpanId{spanId=f2d824704be8ab10}, parentSpanId=SpanId{spanId=b4ae77c523215f9d}, \n+name=time, kind=INTERNAL, attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, status=null, \n+totalRecordedEvents=1,totalRecordedLinks=0, startEpochNanos=1598409410738665807, endEpochNanos=1598409410740607921}, resolvedLinks=[], \n+resolvedEvents=[RawTimedEvent{name=TimeServiceController Entered, attributes={}, epochNanos=1598409410738760924, totalAttributeCount=0}], \n+attributes={what.am.i=AttributeValueString{stringValue=Tu es une legume}}, totalAttributeCount=1, totalRecordedEvents=1, \n+status=Status{canonicalCode=OK, description=null}, name=time, endEpochNanos=1598409410740607921, hasEnded=true\n+}\n+\n+SpanWrapper{\n+delegate=RecordEventsReadableSpan{traceId=TraceId{traceId=52d6edec17bbf842cf5032ebce2043f8}, spanId=SpanId{spanId=b4ae77c523215f9d}, \n+parentSpanId=SpanId{spanId=15b72a8e85c842c5}, name=WebMVCTracingFilter.doFilterInteral, kind=SERVER, \n+attributes={http.status_code=AttributeValueLong{longValue=200}, net.peer.port=AttributeValueLong{longValue=40174}, \n+http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, http.flavor=AttributeValueString{stringValue=HTTP/1.1}, \n+http.url=AttributeValueString{stringValue=/time}, net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, \n+http.method=AttributeValueString{stringValue=GET}, http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, \n+status=Status{canonicalCode=OK, description=null}, totalRecordedEvents=0, totalRecordedLinks=0, startEpochNanos=1598409410680549805, \n+endEpochNanos=1598409410921631068}, resolvedLinks=[], resolvedEvents=[], attributes={http.status_code=AttributeValueLong{longValue=200},\n+net.peer.port=AttributeValueLong{longValue=40174}, http.user_agent=AttributeValueString{stringValue=Java/11.0.8}, \n+http.flavor=AttributeValueString{stringValue=HTTP/1.1}, http.url=AttributeValueString{stringValue=/time}, \n+net.peer.ip=AttributeValueString{stringValue=127.0.0.1}, http.method=AttributeValueString{stringValue=GET}, \n+http.client_ip=AttributeValueString{stringValue=127.0.0.1}}, totalAttributeCount=8, totalRecordedEvents=0, \n+status=Status{canonicalCode=OK, description=null}, name=WebMVCTracingFilter.doFilterInteral, endEpochNanos=1598409410921631068, hasEnded=true\n+}\n+\n+```\n+\n+\n+### Exporter Starters \n+\n+To configure the OpenTelemetry tracing with the OTLP, Zipkin, or Jaeger span exporters replace the OpenTelemtry Spring Starter dependency with one of the artifacts listed below:\n+\n+#### Maven\n+```xml\n+\n+<!-- opentelemetry starter with zipkin -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-zipkin-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with jaeger -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-jaeger-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+\n+<!-- opentelemetry starter with otlp -->\n+<dependency>\n+\t<groupId>io.opentelemetry.instrumentation</groupId>\n+\t<artifactId>opentelemetry-otlp-exporter-starter</artifactId>\n+\t<version>OPENTELEMETRY_VERSION</version>\n+</dependency> \n+```\n+\n+#### Gradle\n+```gradle\n+\n+//opentelemetry starter with zipkin configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-zipkin-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with jaeger configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-jaeger-exporter-starter:OPENTELEMETRY_VERSION\"\n+\n+//opentelemetry starter with otlp configurations\n+implementation \"io.opentelemetry.instrumentation:opentelemetry-otlp-exporter-starter:OPENTELEMETRY_VERSION\"\n+```\n+\n+#### Exporter Configuration Properties\n+\n+Add the following configurations to overwrite the default exporter values listed below.\n+\n+```\n+## Default tracer configurations\n+opentelemetry.trace.tracer.name=main_service\n+#opentelemetry.trace.tracer.samplerProbability=1\n+\n+## Default exporter configurations\n+#opentelemetry.trace.exporters.otlp.servicename=unknown\n+#opentelemetry.trace.exporters.otlp.endpoint=localhost:55680\n+#opentelemetry.trace.exporters.otlp.spantimeout=1s\n+#opentelemetry.trace.exporters.jaeger.servicename=unknown\n+#opentelemetry.trace.exporters.jaeger.endpoint=localhost:14250\n+#opentelemetry.trace.exporters.jaeger.spantimeout=1s\n+#opentelemetry.trace.exporters.zipkin.servicename=unknown\n+#opentelemetry.trace.exporters.zipkin.endpoint=http://localhost:9411/api/v2/spans\n+```\n+\n+### Sample Trace Zipkin\n+\n+To generate a trace using the zipkin exporter follow the steps below: \n+ 1. Replace `opentelemetry-spring-starter` with `opentelemetry-zipkin-starter` in your pom or gradle build file\n+ 2. Use the Zipkin [quick starter](https://zipkin.io/pages/quickstart) to download and run the zipkin exporter jar \n+    - Ensure the zipkin endpoint matches the default value listed in your application properties\n+ 3. Run `MainServiceApplication.java` and `TimeServiceApplication.java`\n+ 4. Use your favorite browser to send a request to `localhost:8080/message`\n+ 5. Navigate to `localhost:9411` to see your trace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b5bc51817673f77c864b52b4255909a96343bf4"}, "originalPosition": 320}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4828, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}