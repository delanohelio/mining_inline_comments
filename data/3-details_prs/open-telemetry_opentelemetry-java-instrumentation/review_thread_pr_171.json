{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Nzk2MzE2", "number": 171, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1MTowN1rODg7nYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMDozOFrODh-uEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3NzYxOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1MTowN1rOFraThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMjo0OFrOFtBX0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDA3MA==", "bodyText": "what do you think about renaming \"dummy exporter\" to \"logging exporter\" throughout (doc & code)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064070", "createdAt": "2020-02-19T03:51:07Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMzk0OA==", "bodyText": "Changed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382713948", "createdAt": "2020-02-21T17:37:33Z", "author": {"login": "prydin"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDA3MA=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MjcyMQ==", "bodyText": "i'm not seeing this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382752721", "createdAt": "2020-02-21T19:02:48Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDA3MA=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU3OTQ4OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1Mjo0MFrOFraUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozNzoyMFrOFs_ABg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDM1OQ==", "bodyText": "let's confirm with @tedsuo on Thu that it is ok to link to vendor-specific exporters (e.g. i notice there's no link to vendor-specific exporters from opentelemetry-java repo)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064359", "createdAt": "2020-02-19T03:52:40Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter\n+The dummy exporter simply prints the name of the span along with its attributes to stdout. It is used manly\n+for testing and debugging. It takes a single configuration parameter.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.dummy.prefix | OTA_EXPORTER_DUMMY_PREFIX | A string that is printed in front of the span name and attributes.\n+\n+#### Jaeger exporter\n+A simple wrapper for the Jaeger exporter of opentelemetry-java. It currently only supports gRPC as its communications protocol.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.jaeger.host | OTA_EXPORTER_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.exporter.jaeger.port | OTA_EXPORTER_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n \n These parameter names are very likely to change over time, so please check back here when trying out a new version!\n \n Please report any bugs or unexpected behavior you may find.\n \n+#### Vendor-specific exporters\n+Exporters from observability and Application Performance Management vendors are currently under development. We will compile a list of vendor-specific exporters as they become available.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMzg2Mg==", "bodyText": "Removing this section until we know for sure.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382713862", "createdAt": "2020-02-21T17:37:20Z", "author": {"login": "prydin"}, "path": "README.md", "diffHunk": "@@ -31,15 +31,35 @@ java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n ### Configuration parameters (subject to change!)\n System property | Environment variable | Purpose\n --- | --- | ---\n-ota.exporter | OTA_EXPORTER | The name of the exporter. Currently only supports 'jaeger' for Jager over gRPC\n+ota.exporter.jar | OTA_EXPORTER_JAR | The path to an exporter JAR\n ota.service | OTA_SERVICE | The service name of this JVM instance. This is used as a label in Jaeger to distinguish between JVM instances in a multi-service environment.\n-ota.jaeger.host | OTA_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n-ota.jaeger.port | OTA_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n+\n+### Available exporters\n+Currently two exporters are available and bundled with this project. They area available under the ```exporter-adapters``` directory. \n+\n+#### Dummy Exporter\n+The dummy exporter simply prints the name of the span along with its attributes to stdout. It is used manly\n+for testing and debugging. It takes a single configuration parameter.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.dummy.prefix | OTA_EXPORTER_DUMMY_PREFIX | A string that is printed in front of the span name and attributes.\n+\n+#### Jaeger exporter\n+A simple wrapper for the Jaeger exporter of opentelemetry-java. It currently only supports gRPC as its communications protocol.\n+\n+System property | Environment variable | Purpose\n+--- | --- | ---\n+ota.exporter.jaeger.host | OTA_EXPORTER_JAEGER_HOST | The Jaeger host to connect to. Currently only gRPC is supported.\n+ota.exporter.jaeger.port | OTA_EXPORTER_JAEGER_PORT | The port to connect to on the Jaeger host. Currently only gRPC is supported\n \n These parameter names are very likely to change over time, so please check back here when trying out a new version!\n \n Please report any bugs or unexpected behavior you may find.\n \n+#### Vendor-specific exporters\n+Exporters from observability and Application Performance Management vendors are currently under development. We will compile a list of vendor-specific exporters as they become available.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDM1OQ=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU4MTkwOnYy", "diffSide": "LEFT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMzo1NDozOVrOFraWCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozNDozN1rOFs-7Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDcxNA==", "bodyText": "just want to check that things moved around in this file intentionally?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381064714", "createdAt": "2020-02-19T03:54:39Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -73,17 +68,16 @@\n   private static final boolean DEFAULT_HTTP_CLIENT_SPLIT_BY_DOMAIN = false;\n   private static final boolean DEFAULT_DB_CLIENT_HOST_SPLIT_BY_INSTANCE = false;\n   private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n-  public static final boolean DEFAULT_LOGS_INJECTION_ENABLED = false;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMjY0Mw==", "bodyText": "Sort of. Looks like the aftermath of a merge combined with opinionated auto formatting.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382712643", "createdAt": "2020-02-21T17:34:37Z", "author": {"login": "prydin"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -73,17 +68,16 @@\n   private static final boolean DEFAULT_HTTP_CLIENT_SPLIT_BY_DOMAIN = false;\n   private static final boolean DEFAULT_DB_CLIENT_HOST_SPLIT_BY_INSTANCE = false;\n   private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n-  public static final boolean DEFAULT_LOGS_INJECTION_ENABLED = false;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NDcxNA=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODU5MzU2OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ExporterClassLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDowMzoyM1rOFrac1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDowMzoyM1rOFrac1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NjQ1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381066455", "createdAt": "2020-02-19T04:03:23Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/ExporterClassLoader.java", "diffHunk": "@@ -37,6 +38,17 @@ public ExporterClassLoader(final URL[] urls, final ClassLoader parent) {\n     super(urls, parent);\n   }\n \n+  @Override\n+  public Enumeration<URL> getResources(final String name) throws IOException {\n+    // A small hack to prevent other exporters from being loaded by this classloader if they\n+    // should happen to appear on the classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYwMDExOnYy", "diffSide": "RIGHT", "path": "exporter-adapters/jaeger-adapter/src/main/java/io/opentelemetry/auto/exporters/jaeger/JaegerExporterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDowNzo0N1rOFragrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMzozNVrOFs-5kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NzQzOQ==", "bodyText": "why not use default deadline?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381067439", "createdAt": "2020-02-19T04:07:47Z", "author": {"login": "trask"}, "path": "exporter-adapters/jaeger-adapter/src/main/java/io/opentelemetry/auto/exporters/jaeger/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.opentelemetry.auto.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n+\n+  private static final String SERVICE_CONFIG = \"service\";\n+\n+  private static final int DEFAULT_PORT = 14250;\n+\n+  private static final String DEFAULT_SERVICE = \"(unknown service)\";\n+\n+  @Override\n+  public SpanExporter fromConfig(final ConfigProvider config) {\n+    final String host = config.getString(HOST_CONFIG, null);\n+    if (host == null) {\n+      throw new IllegalArgumentException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final int port = config.getInt(PORT_CONFIG, DEFAULT_PORT);\n+    final String service = config.getString(SERVICE_CONFIG, DEFAULT_SERVICE);\n+    final ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n+    return JaegerGrpcSpanExporter.newBuilder()\n+        .setServiceName(service)\n+        .setChannel(jaegerChannel)\n+        .setDeadline(30000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMjIxMQ==", "bodyText": "Ooops. Copy-paste mistake.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382712211", "createdAt": "2020-02-21T17:33:35Z", "author": {"login": "prydin"}, "path": "exporter-adapters/jaeger-adapter/src/main/java/io/opentelemetry/auto/exporters/jaeger/JaegerExporterFactory.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.opentelemetry.auto.exporters.jaeger;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.exportersupport.ConfigProvider;\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+\n+public class JaegerExporterFactory implements SpanExporterFactory {\n+  private static final String HOST_CONFIG = \"jaeger.host\";\n+\n+  private static final String PORT_CONFIG = \"jaeger.port\";\n+\n+  private static final String SERVICE_CONFIG = \"service\";\n+\n+  private static final int DEFAULT_PORT = 14250;\n+\n+  private static final String DEFAULT_SERVICE = \"(unknown service)\";\n+\n+  @Override\n+  public SpanExporter fromConfig(final ConfigProvider config) {\n+    final String host = config.getString(HOST_CONFIG, null);\n+    if (host == null) {\n+      throw new IllegalArgumentException(HOST_CONFIG + \" must be specified\");\n+    }\n+    final int port = config.getInt(PORT_CONFIG, DEFAULT_PORT);\n+    final String service = config.getString(SERVICE_CONFIG, DEFAULT_SERVICE);\n+    final ManagedChannel jaegerChannel =\n+        ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n+    return JaegerGrpcSpanExporter.newBuilder()\n+        .setServiceName(service)\n+        .setChannel(jaegerChannel)\n+        .setDeadline(30000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NzQzOQ=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYwMzA1OnYy", "diffSide": "RIGHT", "path": "exporter-adapters/src/test/groovy/io/opentelemetry/auto/exporteradapters/ExporterAdaptersTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxMDoxMVrOFraiig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxMDoxMVrOFraiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2NzkxNA==", "bodyText": "i'm personally a fan of longer variable names (and especially when there's no type name)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381067914", "createdAt": "2020-02-19T04:10:11Z", "author": {"login": "trask"}, "path": "exporter-adapters/src/test/groovy/io/opentelemetry/auto/exporteradapters/ExporterAdaptersTest.groovy", "diffHunk": "@@ -0,0 +1,34 @@\n+import io.opentelemetry.auto.exportersupport.SpanExporterFactory\n+import io.opentelemetry.auto.tooling.ExporterClassLoader\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+class ExporterAdaptersTest extends Specification {\n+  @Shared\n+  def projectVersion = System.getProperty(\"projectVersion\")\n+  def adapterRoot = System.getProperty(\"adapterRoot\")\n+\n+  def \"test exporter load\"() {\n+    setup:\n+    def file = new File(\"${adapterRoot}/${exporter}-adapter/build/libs/${exporter}-adapter-${projectVersion}-all.jar\")\n+    println \"Attempting to load ${file.toString()} for ${classname}\"\n+    assert file.exists(): \"${file.toString()} does not exist\"\n+    URL[] urls = [file.toURI().toURL()]\n+    def cl = new ExporterClassLoader(urls, this.getClass().getClassLoader())\n+    def sl = ServiceLoader.load(SpanExporterFactory, cl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYwNDc0OnYy", "diffSide": "RIGHT", "path": "smoke-tests/play/src/test/groovy/io/opentelemetry/smoketest/PlaySmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxMTozNlrOFrajmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxMTozNlrOFrajmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODE4Nw==", "bodyText": "nice!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068187", "createdAt": "2020-02-19T04:11:36Z", "author": {"login": "trask"}, "path": "smoke-tests/play/src/test/groovy/io/opentelemetry/smoketest/PlaySmokeTest.groovy", "diffHunk": "@@ -13,25 +16,36 @@ class PlaySmokeTest extends AbstractServerSmokeTest {\n     ProcessBuilder processBuilder =\n       new ProcessBuilder(\"${playDirectory}/bin/playBinary\")\n     processBuilder.directory(playDirectory)\n+\n     processBuilder.environment().put(\"JAVA_OPTS\",\n       defaultJavaProperties.join(\" \")\n+        + \" -Dota.exporter.jar=${exporterPath}\"\n+        + \" -Dota.exporter.dummy.prefix=LOGGED_SPAN\"\n         + \" -Dconfig.file=${workingDirectory}/conf/application.conf -Dhttp.port=${httpPort}\"\n         + \" -Dhttp.address=127.0.0.1\")\n     return processBuilder\n   }\n \n   def \"welcome endpoint #n th time\"() {\n     setup:\n+    def spanCounter = new SpanCounter([\n+      (PLAY_SPAN): 1,\n+      (AKKA_SPAN): 1,\n+    ], 10000)\n     String url = \"http://localhost:$httpPort/welcome?id=$n\"\n     def request = new Request.Builder().url(url).get().build()\n \n     when:\n+    spanCounter.run(logfile)\n     def response = client.newCall(request).execute()\n+    def spans = spanCounter.waitForResult()\n \n     then:\n     def responseBodyStr = response.body().string()\n     responseBodyStr == \"Welcome $n.\"\n     response.code() == 200\n+    spans[PLAY_SPAN] == 1\n+    spans[AKKA_SPAN] == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYwNjQwOnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxMjo1OFrOFrakmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowNzozOVrOFtBgug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODQ0Mw==", "bodyText": "was this exception not getting logged anywhere? maybe e.printStackTrace() instead?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068443", "createdAt": "2020-02-19T04:12:58Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "diffHunk": "@@ -17,7 +17,12 @@ abstract class AbstractServerSmokeTest extends AbstractSmokeTest {\n   protected OkHttpClient client = OkHttpUtils.client()\n \n   def setupSpec() {\n-    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    try {\n+      PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    } catch (e) {\n+      System.err.println(logfile.text)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMjA2Nw==", "bodyText": "The exception is re-thrown right after and handled correctly by the testing framework. The println is to show what went wrong in the child process. This is just to make debugging a bit easier.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382712067", "createdAt": "2020-02-21T17:33:16Z", "author": {"login": "prydin"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "diffHunk": "@@ -17,7 +17,12 @@ abstract class AbstractServerSmokeTest extends AbstractSmokeTest {\n   protected OkHttpClient client = OkHttpUtils.client()\n \n   def setupSpec() {\n-    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    try {\n+      PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    } catch (e) {\n+      System.err.println(logfile.text)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODQ0Mw=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTAwMg==", "bodyText": "oh, this dumps the full text from the log file to stderr before the exception is logged by testing framework? got it, that makes sense", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382755002", "createdAt": "2020-02-21T19:07:39Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractServerSmokeTest.groovy", "diffHunk": "@@ -17,7 +17,12 @@ abstract class AbstractServerSmokeTest extends AbstractSmokeTest {\n   protected OkHttpClient client = OkHttpUtils.client()\n \n   def setupSpec() {\n-    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    try {\n+      PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, serverProcess)\n+    } catch (e) {\n+      System.err.println(logfile.text)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODQ0Mw=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYwOTA5OnYy", "diffSide": "RIGHT", "path": "smoke-tests/wildfly/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxNTo0MVrOFramTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMjoxNFrOFs-3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODg3OQ==", "bodyText": "someday we'll pipe the spans over-the-wire to a listener (instead of piping them via-log-file). until then, this is good", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381068879", "createdAt": "2020-02-19T04:15:41Z", "author": {"login": "trask"}, "path": "smoke-tests/wildfly/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "diffHunk": "@@ -18,8 +18,13 @@ class WildflySmokeTest extends AbstractServerSmokeTest {\n     ProcessBuilder processBuilder =\n       new ProcessBuilder(\"${wildflyDirectory}/bin/standalone.sh\")\n     processBuilder.directory(wildflyDirectory)\n+\n+    // We're installing a span exporter to make sure it doesn't blow anything up, but we're not\n+    // checking the spans, since JBoss seems to redirect stdout to something we don't have (easy) access to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMTYwNA==", "bodyText": "Agreed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382711604", "createdAt": "2020-02-21T17:32:14Z", "author": {"login": "prydin"}, "path": "smoke-tests/wildfly/src/test/groovy/io/opentelemetry/smoketest/WildflySmokeTest.groovy", "diffHunk": "@@ -18,8 +18,13 @@ class WildflySmokeTest extends AbstractServerSmokeTest {\n     ProcessBuilder processBuilder =\n       new ProcessBuilder(\"${wildflyDirectory}/bin/standalone.sh\")\n     processBuilder.directory(wildflyDirectory)\n+\n+    // We're installing a span exporter to make sure it doesn't blow anything up, but we're not\n+    // checking the spans, since JBoss seems to redirect stdout to something we don't have (easy) access to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2ODg3OQ=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODYxMDYzOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDoxNjo0OFrOFranPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMjo1NlrOFs-4aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2OTExNg==", "bodyText": "i think keep the example using jaeger?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r381069116", "createdAt": "2020-02-19T04:16:48Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -21,7 +21,7 @@ as Java system properties (-D flags) or as environment variables. This is an exa\n \n ```\n java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n-     -Dota.exporter=jaeger \\\n+     -Dota.exporter.jar=exporter-adapters/dummy-exporter-adapter/build/libs/dummy-exporter-adapter-0.1.2-SNAPSHOT.jar \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMTkxNQ==", "bodyText": "I do, but the ota.exporter flag is gone and you have to point to the jar, since we no longer bundle the jaeger exporter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382711915", "createdAt": "2020-02-21T17:32:56Z", "author": {"login": "prydin"}, "path": "README.md", "diffHunk": "@@ -21,7 +21,7 @@ as Java system properties (-D flags) or as environment variables. This is an exa\n \n ```\n java -javaagent:/path/to/opentelemetry-auto-<version>.jar \\\n-     -Dota.exporter=jaeger \\\n+     -Dota.exporter.jar=exporter-adapters/dummy-exporter-adapter/build/libs/dummy-exporter-adapter-0.1.2-SNAPSHOT.jar \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2OTExNg=="}, "originalCommit": {"oid": "50bdc689a19b759c03ceff44406755e318c98108"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU3MjAzOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMDozOFrOFtBUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMDozOFrOFtBUFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTc2NQ==", "bodyText": "can you reduce moving things around in this PR? it will help with merge conflicts as i'm still merging from https://github.com/DataDog/dd-trace-java", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/171#discussion_r382751765", "createdAt": "2020-02-21T19:00:38Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -638,4 +595,31 @@ public static Config get(final Properties properties) {\n       return new Config(properties, INSTANCE);\n     }\n   }\n+\n+  public boolean isIntegrationEnabled(\n+      final SortedSet<String> integrationNames, final boolean defaultEnabled) {\n+    return integrationEnabled(integrationNames, defaultEnabled);\n+  }\n+\n+  private Set<Integer> getIntegerRangeSettingFromEnvironment(\n+      final String name, final Set<Integer> defaultValue) {\n+    final String value = getSettingFromEnvironment(name, null);\n+    try {\n+      return value == null ? defaultValue : parseIntegerRangeSet(value, name);\n+    } catch (final NumberFormatException e) {\n+      log.warn(\"Invalid configuration for \" + name, e);\n+      return defaultValue;\n+    }\n+  }\n+\n+  private Set<Integer> getPropertyIntegerRangeValue(\n+      final Properties properties, final String name, final Set<Integer> defaultValue) {\n+    final String value = properties.getProperty(name);\n+    try {\n+      return value == null ? defaultValue : parseIntegerRangeSet(value, name);\n+    } catch (final NumberFormatException e) {\n+      log.warn(\"Invalid configuration for \" + name, e);\n+      return defaultValue;\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d274543500dd145f0210967cc9ad8f033485282e"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 574, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}