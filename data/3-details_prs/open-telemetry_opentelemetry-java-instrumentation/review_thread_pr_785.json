{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTMwOTcx", "number": 785, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDozNzoyNlrOESFRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyODowOVrOES72zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk2MTc3OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/Constants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDozNzoyNlrOG3HSvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDozNzoyNlrOG3HSvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NDM1MA==", "bodyText": "i think rename to DbSystem, that way usages will be more descriptive, e.g. DbSystem.MYSQL", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460444350", "createdAt": "2020-07-25T20:37:26Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/Constants.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.jdbc;\n+\n+public final class Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk2OTgzOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo0OToxNVrOG3HWhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo0OToxNVrOG3HWhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTMxOQ==", "bodyText": "updateDbSystem --> toDbSystem (update... sounds like it has side effects)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445319", "createdAt": "2020-07-25T20:49:15Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +892,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String updateDbSystem(final String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3MDc1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1MDoyMlrOG3HW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1MDoyMlrOG3HW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTQyOQ==", "bodyText": "\ud83d\udc4d link to latest copy\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * see {@link <a\n          \n          \n            \n               * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}\n          \n          \n            \n               * see {@link <a\n          \n          \n            \n               * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445429", "createdAt": "2020-07-25T20:50:22Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +892,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/709293fe132709705f0e0dd4252992e87a6ec899/specification/trace/semantic_conventions/database.md\">specification</a>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3Mjg1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1Mzo1MVrOG3HX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1Mzo1MVrOG3HX6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTY3Mw==", "bodyText": "i think we really do want type here (and not system) in order to construct the \"short url\" (which we then use as db.connection_string).\nit looks like this method is only called from one place, so you could pass in the real type here, so you don't have to add another field to DbInfo/Builder", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445673", "createdAt": "2020-07-25T20:53:51Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -795,12 +802,12 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n \n   private static DBInfo withUrl(final DBInfo.Builder builder) {\n     DBInfo info = builder.build();\n-    String type = info.getType();\n-    if (type == null) {\n+    String system = info.getSystem();\n+    if (system == null) {\n       return builder.build();\n     }\n     StringBuilder url = new StringBuilder();\n-    url.append(type);\n+    url.append(system);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3NTE1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1Njo0NVrOG3HY9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMDo1Njo0NVrOG3HY9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NTk0Mw==", "bodyText": "link to spec at top here, and only document differences, e.g. the rows in table below with \"not on [database.md]\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460445943", "createdAt": "2020-07-25T20:56:45Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "diffHunk": "@@ -0,0 +1,42 @@\n+### Notes and well-known identifiers for `db.system`\n+\n+This is a non-exhaustive list of well-known identifiers to be specified for `db.system`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3ODA1OnYy", "diffSide": "RIGHT", "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/Elasticsearch53TransportClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMDo1N1rOG3HaWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMDo1N1rOG3HaWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjI5Nw==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446297", "createdAt": "2020-07-25T21:00:57Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/Elasticsearch53TransportClientTest.groovy", "diffHunk": "@@ -36,257 +37,257 @@ import static io.opentelemetry.trace.Span.Kind.CLIENT\n import static org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n \n class Elasticsearch53TransportClientTest extends AgentTestRunner {\n-  public static final long TIMEOUT = 10000; // 10 seconds\n+    public static final long TIMEOUT = 10000; // 10 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3ODMyOnYy", "diffSide": "RIGHT", "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/springdata/Elasticsearch53SpringRepositoryTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMToxOVrOG3Haew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMToxOVrOG3Haew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjMzMQ==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446331", "createdAt": "2020-07-25T21:01:19Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/springdata/Elasticsearch53SpringRepositoryTest.groovy", "diffHunk": "@@ -30,317 +30,317 @@ import static io.opentelemetry.trace.Span.Kind.CLIENT\n import static io.opentelemetry.trace.Span.Kind.INTERNAL\n \n class Elasticsearch53SpringRepositoryTest extends AgentTestRunner {\n-  // Setting up appContext & repo with @Shared doesn't allow\n-  // spring-data instrumentation to applied.\n-  // To change the timing without adding ugly checks everywhere -\n-  // use a dynamic proxy.  There's probably a more \"groovy\" way to do this.\n+    // Setting up appContext & repo with @Shared doesn't allow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3ODYwOnYy", "diffSide": "RIGHT", "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/springdata/Elasticsearch53SpringTemplateTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMTo0MFrOG3Hamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMTo0MFrOG3Hamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjM2Mw==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446363", "createdAt": "2020-07-25T21:01:40Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/test/groovy/springdata/Elasticsearch53SpringTemplateTest.groovy", "diffHunk": "@@ -43,290 +43,290 @@ import static io.opentelemetry.trace.Span.Kind.CLIENT\n import static org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING\n \n class Elasticsearch53SpringTemplateTest extends AgentTestRunner {\n-  public static final long TIMEOUT = 10000; // 10 seconds\n-\n-  // Some ES actions are not caused by clients and seem to just happen from time to time.\n-  // We will just ignore these actions in traces.\n-  // TODO: check if other ES tests need this protection and potentially pull this into global class\n-  public static final Set<String> IGNORED_ACTIONS = ImmutableSet.of(\"NodesStatsAction\", \"IndicesStatsAction\")\n-\n-  @Shared\n-  Node testNode\n-  @Shared\n-  File esWorkingDir\n-  @Shared\n-  String clusterName = UUID.randomUUID().toString()\n-\n-  @Shared\n-  ElasticsearchTemplate template\n-\n-  def setupSpec() {\n-\n-    esWorkingDir = File.createTempDir(\"test-es-working-dir-\", \"\")\n-    esWorkingDir.deleteOnExit()\n-    println \"ES work dir: $esWorkingDir\"\n-\n-    def settings = Settings.builder()\n-      .put(\"path.home\", esWorkingDir.path)\n-    // Since we use listeners to close spans this should make our span closing deterministic which is good for tests\n-      .put(\"thread_pool.listener.size\", 1)\n-      .put(\"transport.type\", \"netty3\")\n-      .put(\"http.type\", \"netty3\")\n-      .put(CLUSTER_NAME_SETTING.getKey(), clusterName)\n-      .build()\n-    testNode = new Node(new Environment(InternalSettingsPreparer.prepareSettings(settings)), [Netty3Plugin])\n-    testNode.start()\n-    runUnderTrace(\"setup\") {\n-      // this may potentially create multiple requests and therefore multiple spans, so we wrap this call\n-      // into a top level trace to get exactly one trace in the result.\n-      testNode.client().admin().cluster().prepareHealth().setWaitForYellowStatus().execute().actionGet(TIMEOUT)\n-    }\n-    TEST_WRITER.waitForTraces(1)\n-\n-    template = new ElasticsearchTemplate(testNode.client())\n-  }\n+    public static final long TIMEOUT = 10000; // 10 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3OTAwOnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceAsyncClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMjoyOFrOG3HazQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0ODowNVrOG3tEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQxMw==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446413", "createdAt": "2020-07-25T21:02:28Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceAsyncClientTest.groovy", "diffHunk": "@@ -43,459 +44,459 @@ import java.util.function.Function\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceAsyncClientTest extends AgentTestRunner {\n-  public static final String PEER_NAME = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  int port\n-  @Shared\n-  int incorrectPort\n-  @Shared\n-  String dbAddr\n-  @Shared\n-  String dbAddrNonExistent\n-  @Shared\n-  String dbUriNonExistent\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  @Shared\n-  Map<String, String> testHashMap = [\n-    firstname: \"John\",\n-    lastname : \"Doe\",\n-    age      : \"53\"\n-  ]\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisAsyncCommands<String, ?> asyncCommands\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    port = PortUtils.randomOpenPort()\n-    incorrectPort = PortUtils.randomOpenPort()\n-    dbAddr = PEER_NAME + \":\" + port + \"/\" + DB_INDEX\n-    dbAddrNonExistent = PEER_NAME + \":\" + incorrectPort + \"/\" + DB_INDEX\n-    dbUriNonExistent = \"redis://\" + dbAddrNonExistent\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_NAME)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    println \"Using redis: $redisServer.args\"\n-    redisServer.start()\n-    redisClient.setOptions(CLIENT_OPTIONS)\n-\n-    connection = redisClient.connect()\n-    asyncCommands = connection.async()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-\n-    // 1 set + 1 connect trace\n-    TEST_WRITER.waitForTraces(2)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisServer.stop()\n-  }\n-\n-  def \"connect using get on ConnectionFuture\"() {\n-    setup:\n-    RedisClient testConnectionClient = RedisClient.create(embeddedDbUri)\n-    testConnectionClient.setOptions(CLIENT_OPTIONS)\n-\n-    when:\n-    ConnectionFuture connectionFuture = testConnectionClient.connectAsync(StringCodec.UTF8,\n-      new RedisURI(PEER_NAME, port, 3, TimeUnit.SECONDS))\n-    StatefulConnection connection = connectionFuture.get()\n-\n-    then:\n-    connection != null\n-    assertTraces(1) {\n-      trace(0, 1) {\n-        span(0) {\n-          operationName \"CONNECT\"\n-          spanKind CLIENT\n-          errored false\n-          attributes {\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" PEER_NAME\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" PEER_IP\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n-            \"${SemanticAttributes.DB_TYPE.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"CONNECT\"\n-            \"db.redis.dbIndex\" 0\n-          }\n-        }\n-      }\n+    public static final String PEER_NAME = \"localhost\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzE5MQ==", "bodyText": "reformat doesn't seem to change anything.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461063191", "createdAt": "2020-07-27T17:48:05Z", "author": {"login": "heyams"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceAsyncClientTest.groovy", "diffHunk": "@@ -43,459 +44,459 @@ import java.util.function.Function\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceAsyncClientTest extends AgentTestRunner {\n-  public static final String PEER_NAME = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  int port\n-  @Shared\n-  int incorrectPort\n-  @Shared\n-  String dbAddr\n-  @Shared\n-  String dbAddrNonExistent\n-  @Shared\n-  String dbUriNonExistent\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  @Shared\n-  Map<String, String> testHashMap = [\n-    firstname: \"John\",\n-    lastname : \"Doe\",\n-    age      : \"53\"\n-  ]\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisAsyncCommands<String, ?> asyncCommands\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    port = PortUtils.randomOpenPort()\n-    incorrectPort = PortUtils.randomOpenPort()\n-    dbAddr = PEER_NAME + \":\" + port + \"/\" + DB_INDEX\n-    dbAddrNonExistent = PEER_NAME + \":\" + incorrectPort + \"/\" + DB_INDEX\n-    dbUriNonExistent = \"redis://\" + dbAddrNonExistent\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_NAME)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    println \"Using redis: $redisServer.args\"\n-    redisServer.start()\n-    redisClient.setOptions(CLIENT_OPTIONS)\n-\n-    connection = redisClient.connect()\n-    asyncCommands = connection.async()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-\n-    // 1 set + 1 connect trace\n-    TEST_WRITER.waitForTraces(2)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisServer.stop()\n-  }\n-\n-  def \"connect using get on ConnectionFuture\"() {\n-    setup:\n-    RedisClient testConnectionClient = RedisClient.create(embeddedDbUri)\n-    testConnectionClient.setOptions(CLIENT_OPTIONS)\n-\n-    when:\n-    ConnectionFuture connectionFuture = testConnectionClient.connectAsync(StringCodec.UTF8,\n-      new RedisURI(PEER_NAME, port, 3, TimeUnit.SECONDS))\n-    StatefulConnection connection = connectionFuture.get()\n-\n-    then:\n-    connection != null\n-    assertTraces(1) {\n-      trace(0, 1) {\n-        span(0) {\n-          operationName \"CONNECT\"\n-          spanKind CLIENT\n-          errored false\n-          attributes {\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" PEER_NAME\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" PEER_IP\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n-            \"${SemanticAttributes.DB_TYPE.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"CONNECT\"\n-            \"db.redis.dbIndex\" 0\n-          }\n-        }\n-      }\n+    public static final String PEER_NAME = \"localhost\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQxMw=="}, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3OTI1OnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceReactiveClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMjo0N1rOG3Ha7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0ODoxMVrOG3tERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQ0NQ==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446445", "createdAt": "2020-07-25T21:02:47Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceReactiveClientTest.groovy", "diffHunk": "@@ -33,394 +34,394 @@ import static io.opentelemetry.auto.test.utils.TraceUtils.runUnderTrace\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceReactiveClientTest extends AgentTestRunner {\n-  public static final String PEER_HOST = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisReactiveCommands<String, ?> reactiveCommands\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    int port = PortUtils.randomOpenPort()\n-    String dbAddr = PEER_HOST + \":\" + port + \"/\" + DB_INDEX\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_HOST)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    println \"Using redis: $redisServer.args\"\n-    redisServer.start()\n-    redisClient.setOptions(CLIENT_OPTIONS)\n-\n-    connection = redisClient.connect()\n-    reactiveCommands = connection.reactive()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-\n-    // 1 set + 1 connect trace\n-    TEST_WRITER.waitForTraces(2)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisClient.shutdown()\n-    redisServer.stop()\n-  }\n-\n-  def \"set command with subscribe on a defined consumer\"() {\n-    setup:\n-    def conds = new AsyncConditions()\n-    Consumer<String> consumer = new Consumer<String>() {\n-      @Override\n-      void accept(String res) {\n-        conds.evaluate {\n-          assert res == \"OK\"\n-        }\n-      }\n+    public static final String PEER_HOST = \"localhost\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzIzNw==", "bodyText": "reformat doesn't seem to change anything.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461063237", "createdAt": "2020-07-27T17:48:11Z", "author": {"login": "heyams"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceReactiveClientTest.groovy", "diffHunk": "@@ -33,394 +34,394 @@ import static io.opentelemetry.auto.test.utils.TraceUtils.runUnderTrace\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceReactiveClientTest extends AgentTestRunner {\n-  public static final String PEER_HOST = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisReactiveCommands<String, ?> reactiveCommands\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    int port = PortUtils.randomOpenPort()\n-    String dbAddr = PEER_HOST + \":\" + port + \"/\" + DB_INDEX\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_HOST)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    println \"Using redis: $redisServer.args\"\n-    redisServer.start()\n-    redisClient.setOptions(CLIENT_OPTIONS)\n-\n-    connection = redisClient.connect()\n-    reactiveCommands = connection.reactive()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-\n-    // 1 set + 1 connect trace\n-    TEST_WRITER.waitForTraces(2)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisClient.shutdown()\n-    redisServer.stop()\n-  }\n-\n-  def \"set command with subscribe on a defined consumer\"() {\n-    setup:\n-    def conds = new AsyncConditions()\n-    Consumer<String> consumer = new Consumer<String>() {\n-      @Override\n-      void accept(String res) {\n-        conds.evaluate {\n-          assert res == \"OK\"\n-        }\n-      }\n+    public static final String PEER_HOST = \"localhost\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQ0NQ=="}, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk3OTI5OnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceSyncClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTowMzowMFrOG3Ha8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0ODoxOVrOG3tEnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQ1MA==", "bodyText": "can you try reformatting this file in Intellij? i'm not sure why it's not using our .editorconfig", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460446450", "createdAt": "2020-07-25T21:03:00Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceSyncClientTest.groovy", "diffHunk": "@@ -30,320 +31,320 @@ import java.util.concurrent.CompletionException\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceSyncClientTest extends AgentTestRunner {\n-  public static final String PEER_NAME = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  int port\n-  @Shared\n-  int incorrectPort\n-  @Shared\n-  String dbAddr\n-  @Shared\n-  String dbAddrNonExistent\n-  @Shared\n-  String dbUriNonExistent\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  @Shared\n-  Map<String, String> testHashMap = [\n-    firstname: \"John\",\n-    lastname : \"Doe\",\n-    age      : \"53\"\n-  ]\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    port = PortUtils.randomOpenPort()\n-    incorrectPort = PortUtils.randomOpenPort()\n-    dbAddr = PEER_NAME + \":\" + port + \"/\" + DB_INDEX\n-    dbAddrNonExistent = PEER_NAME + \":\" + incorrectPort + \"/\" + DB_INDEX\n-    dbUriNonExistent = \"redis://\" + dbAddrNonExistent\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_NAME)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    redisServer.start()\n-    connection = redisClient.connect()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-    syncCommands.hmset(\"TESTHM\", testHashMap)\n-\n-    // 2 sets + 1 connect trace\n-    TEST_WRITER.waitForTraces(3)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisServer.stop()\n-  }\n-\n-  def \"connect\"() {\n-    setup:\n-    RedisClient testConnectionClient = RedisClient.create(embeddedDbUri)\n-    testConnectionClient.setOptions(CLIENT_OPTIONS)\n-\n-    when:\n-    StatefulConnection connection = testConnectionClient.connect()\n-\n-    then:\n-    assertTraces(1) {\n-      trace(0, 1) {\n-        span(0) {\n-          operationName \"CONNECT\"\n-          spanKind CLIENT\n-          errored false\n-          attributes {\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" PEER_NAME\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" PEER_IP\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n-            \"${SemanticAttributes.DB_TYPE.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"CONNECT\"\n-            \"db.redis.dbIndex\" 0\n-          }\n+    public static final String PEER_NAME = \"localhost\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzMyNQ==", "bodyText": "reformat doesn't seem to change anything.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461063325", "createdAt": "2020-07-27T17:48:19Z", "author": {"login": "heyams"}, "path": "instrumentation/lettuce/lettuce-5.0/src/test/groovy/LettuceSyncClientTest.groovy", "diffHunk": "@@ -30,320 +31,320 @@ import java.util.concurrent.CompletionException\n import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n class LettuceSyncClientTest extends AgentTestRunner {\n-  public static final String PEER_NAME = \"localhost\"\n-  public static final String PEER_IP = \"127.0.0.1\"\n-  public static final int DB_INDEX = 0\n-  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n-  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n-\n-  @Shared\n-  int port\n-  @Shared\n-  int incorrectPort\n-  @Shared\n-  String dbAddr\n-  @Shared\n-  String dbAddrNonExistent\n-  @Shared\n-  String dbUriNonExistent\n-  @Shared\n-  String embeddedDbUri\n-\n-  @Shared\n-  RedisServer redisServer\n-\n-  @Shared\n-  Map<String, String> testHashMap = [\n-    firstname: \"John\",\n-    lastname : \"Doe\",\n-    age      : \"53\"\n-  ]\n-\n-  RedisClient redisClient\n-  StatefulConnection connection\n-  RedisCommands<String, ?> syncCommands\n-\n-  def setupSpec() {\n-    port = PortUtils.randomOpenPort()\n-    incorrectPort = PortUtils.randomOpenPort()\n-    dbAddr = PEER_NAME + \":\" + port + \"/\" + DB_INDEX\n-    dbAddrNonExistent = PEER_NAME + \":\" + incorrectPort + \"/\" + DB_INDEX\n-    dbUriNonExistent = \"redis://\" + dbAddrNonExistent\n-    embeddedDbUri = \"redis://\" + dbAddr\n-\n-    redisServer = RedisServer.builder()\n-    // bind to localhost to avoid firewall popup\n-      .setting(\"bind \" + PEER_NAME)\n-    // set max memory to avoid problems in CI\n-      .setting(\"maxmemory 128M\")\n-      .port(port).build()\n-  }\n-\n-  def setup() {\n-    redisClient = RedisClient.create(embeddedDbUri)\n-\n-    redisServer.start()\n-    connection = redisClient.connect()\n-    syncCommands = connection.sync()\n-\n-    syncCommands.set(\"TESTKEY\", \"TESTVAL\")\n-    syncCommands.hmset(\"TESTHM\", testHashMap)\n-\n-    // 2 sets + 1 connect trace\n-    TEST_WRITER.waitForTraces(3)\n-    TEST_WRITER.clear()\n-  }\n-\n-  def cleanup() {\n-    connection.close()\n-    redisServer.stop()\n-  }\n-\n-  def \"connect\"() {\n-    setup:\n-    RedisClient testConnectionClient = RedisClient.create(embeddedDbUri)\n-    testConnectionClient.setOptions(CLIENT_OPTIONS)\n-\n-    when:\n-    StatefulConnection connection = testConnectionClient.connect()\n-\n-    then:\n-    assertTraces(1) {\n-      trace(0, 1) {\n-        span(0) {\n-          operationName \"CONNECT\"\n-          spanKind CLIENT\n-          errored false\n-          attributes {\n-            \"${SemanticAttributes.NET_PEER_NAME.key()}\" PEER_NAME\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" PEER_IP\n-            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n-            \"${SemanticAttributes.DB_TYPE.key()}\" \"redis\"\n-            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"CONNECT\"\n-            \"db.redis.dbIndex\" 0\n-          }\n+    public static final String PEER_NAME = \"localhost\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0NjQ1MA=="}, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzk5ODgyOnYy", "diffSide": "RIGHT", "path": "instrumentation/jedis/jedis-1.4/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v1_4/JedisInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozMTo1MlrOG3Hjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozMTo1MlrOG3Hjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0ODcxOA==", "bodyText": "this happens to match the constant, but is not really related to db_system (this is why I recommended to rename Constants to DbSystem above to make this more clear where to use it)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", Constants.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460448718", "createdAt": "2020-07-25T21:31:52Z", "author": {"login": "trask"}, "path": "instrumentation/jedis/jedis-1.4/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v1_4/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", Constants.REDIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDAwMTM2OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive-3.5/src/test/groovy/VertxReactivePropagationTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozNTozNVrOG3Hk5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozNTozNVrOG3Hk5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0ODk5Nw==", "bodyText": "this happens when Intellij wraps our end-of-line comments. usually i move the eol comment above the line, but in this case i don't think the comment is very helpful, so suggest we just delete it\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Optional", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460448997", "createdAt": "2020-07-25T21:35:35Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive-3.5/src/test/groovy/VertxReactivePropagationTest.groovy", "diffHunk": "@@ -68,7 +69,8 @@ class VertxReactivePropagationTest extends AgentTestRunner {\n           parent()\n           attributes {\n             \"${SemanticAttributes.NET_PEER_PORT.key()}\" Long\n-            \"${SemanticAttributes.NET_PEER_IP.key()}\" { it == null || it == \"127.0.0.1\" } // Optional\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" { it == null || it == \"127.0.0.1\" }\n+            // Optional", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDAwMjk0OnYy", "diffSide": "RIGHT", "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozODoyOFrOG3HlpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozODoyOFrOG3HlpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0OTE4OA==", "bodyText": "this happens to match the constant, but is not really related to db_system\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", Constants.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460449188", "createdAt": "2020-07-25T21:38:28Z", "author": {"login": "trask"}, "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", Constants.REDIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDAwMzE0OnYy", "diffSide": "RIGHT", "path": "instrumentation/rediscala-1.8/src/main/java/io/opentelemetry/auto/instrumentation/rediscala/RediscalaInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozODo1MFrOG3HlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTozODo1MFrOG3HlvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0OTIxMg==", "bodyText": "this happens to match the constant, but is not really related to db_system\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"rediscala\", Constants.REDIS);\n          \n          \n            \n                super(\"rediscala\", \"redis\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460449212", "createdAt": "2020-07-25T21:38:50Z", "author": {"login": "trask"}, "path": "instrumentation/rediscala-1.8/src/main/java/io/opentelemetry/auto/instrumentation/rediscala/RediscalaInstrumentation.java", "diffHunk": "@@ -49,7 +50,7 @@\n public final class RediscalaInstrumentation extends Instrumenter.Default {\n \n   public RediscalaInstrumentation() {\n-    super(\"rediscala\", \"redis\");\n+    super(\"rediscala\", Constants.REDIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDAxMTUyOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQyMTo1MjozMFrOG3Hpdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1NToxNlrOG3tUzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw==", "bodyText": "something like (see comment below), also probably still want typeParsers key to be type and not system\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String baseSystem = jdbcUrl.substring(0, typeLoc);\n          \n          \n            \n                baseSystem = updateDbSystem(baseSystem);\n          \n          \n            \n                String type = jdbcUrl.substring(0, typeLoc); \n          \n          \n            \n                String system = updateDbSystem(type);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r460450167", "createdAt": "2020-07-25T21:52:30Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -777,14 +783,15 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n       return DEFAULT;\n     }\n \n-    String baseType = jdbcUrl.substring(0, typeLoc);\n-    DBInfo.Builder parsedProps = DEFAULT.toBuilder().type(baseType);\n+    String baseSystem = jdbcUrl.substring(0, typeLoc);\n+    baseSystem = updateDbSystem(baseSystem);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NzE4OQ==", "bodyText": "typeParsers is using db.system as the key though.  I will show you offline.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461067189", "createdAt": "2020-07-27T17:54:51Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -777,14 +783,15 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n       return DEFAULT;\n     }\n \n-    String baseType = jdbcUrl.substring(0, typeLoc);\n-    DBInfo.Builder parsedProps = DEFAULT.toBuilder().type(baseType);\n+    String baseSystem = jdbcUrl.substring(0, typeLoc);\n+    baseSystem = updateDbSystem(baseSystem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw=="}, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NzQ2OA==", "bodyText": "can I rename it to dbSystemParsers?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461067468", "createdAt": "2020-07-27T17:55:16Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -777,14 +783,15 @@ public static DBInfo parse(String connectionUrl, final Properties props) {\n       return DEFAULT;\n     }\n \n-    String baseType = jdbcUrl.substring(0, typeLoc);\n-    DBInfo.Builder parsedProps = DEFAULT.toBuilder().type(baseType);\n+    String baseSystem = jdbcUrl.substring(0, typeLoc);\n+    baseSystem = updateDbSystem(baseSystem);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ1MDE2Nw=="}, "originalCommit": {"oid": "1e9be03d974acdd8feff39b3b12fab526ad0d308"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE5MDY0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozMTowNFrOG313qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozMTowNFrOG313qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNzQ2Nw==", "bodyText": "i think better not to compare driver type to db.system constant, e.g. if the spec could change the db.system constant, but that wouldn't change the driver type\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (type.equals(DbSystem.DB2) || type.equals(DbSystem.AS400)) {\n          \n          \n            \n                  if (type.equals(\"db2\") || type.equals(\"as400\")) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461207467", "createdAt": "2020-07-27T22:31:04Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -138,7 +138,7 @@\n       type = jdbcUrl.substring(0, hostIndex);\n \n       String[] split;\n-      if (type.equals(\"db2\") || type.equals(\"as400\")) {\n+      if (type.equals(DbSystem.DB2) || type.equals(DbSystem.AS400)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI1NDk4OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo1Nzo0NFrOG32d8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo1Nzo0NFrOG32d8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzI2Nw==", "bodyText": "i think this matches other parsing a bit better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  int typeLoc = jdbcUrl.indexOf(\":\"); // type\n          \n          \n            \n                  int subtypeLoc = jdbcUrl.indexOf(\":\", typeLoc + 1); // subtype\n          \n          \n            \n                  int hostLoc = jdbcUrl.indexOf(\"//\");\n          \n          \n            \n                  if (subtypeLoc != -1 && typeLoc != -1 && typeLoc < subtypeLoc && subtypeLoc < hostLoc) {\n          \n          \n            \n                    String subtype = jdbcUrl.substring(typeLoc + 1, subtypeLoc);\n          \n          \n            \n                  int protoLoc = jdbcUrl.indexOf(\"://\");\n          \n          \n            \n                  int typeEndLoc = jdbcUrl.indexOf(':');\n          \n          \n            \n                  if (protoLoc > typeEndLoc) {\n          \n          \n            \n                    String subtype = jdbcUrl.substring(typeEndLoc + 1, protoLoc);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461217267", "createdAt": "2020-07-27T22:57:44Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -367,13 +367,16 @@\n         builder.port(DEFAULT_PORT);\n       }\n \n-      if (jdbcUrl.startsWith(\"microsoft:\")) {\n-        jdbcUrl = jdbcUrl.substring(\"microsoft:\".length());\n-      } else if (jdbcUrl.startsWith(\"jtds:\")) {\n-        return JTDS_URL_LIKE.doParse(jdbcUrl, builder);\n+      int typeLoc = jdbcUrl.indexOf(\":\"); // type\n+      int subtypeLoc = jdbcUrl.indexOf(\":\", typeLoc + 1); // subtype\n+      int hostLoc = jdbcUrl.indexOf(\"//\");\n+      if (subtypeLoc != -1 && typeLoc != -1 && typeLoc < subtypeLoc && subtypeLoc < hostLoc) {\n+        String subtype = jdbcUrl.substring(typeLoc + 1, subtypeLoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI2NjE1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DbSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMjoyNlrOG32klQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMjoyNlrOG32klQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODk2NQ==", "bodyText": "Intellij flags this as unused, can be used in GeodeDecorator", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461218965", "createdAt": "2020-07-27T23:02:26Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DbSystem.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.bootstrap.instrumentation.jdbc;\n+\n+public final class DbSystem {\n+\n+  public static final String AS400 = \"as400\";\n+  public static final String CASSANDRA = \"cassandra\";\n+  public static final String COSMOSDB = \"cosmosdb\";\n+  public static final String COUCHBASE = \"couchbase\";\n+  public static final String COUCHDB = \"couchdb\";\n+  public static final String DB2 = \"db2\";\n+  public static final String DERBY = \"derby\";\n+  public static final String DYNAMODB = \"dynamodb\";\n+  public static final String GEODE = \"geode\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI2Nzk1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMzoxM1rOG32lqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMzoxM1rOG32lqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTI0MA==", "bodyText": "let's only include jdbc drivers here that we have parsing/tests for now\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.CASSANDRA: // Cassandra\n          \n          \n            \n                  case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n          \n          \n            \n                  case DbSystem.COUCHBASE: // Couchbase\n          \n          \n            \n                  case DbSystem.COUCHDB: // CouchDB", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219240", "createdAt": "2020-07-27T23:03:13Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI2ODUwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMzoyOVrOG32mCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMzoyOVrOG32mCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTMzOA==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.MONGODB: // MongoDB", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219338", "createdAt": "2020-07-27T23:03:29Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI3MDYwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNDoxN1rOG32nOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNDoxN1rOG32nOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTY0Mw==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.NEO4J: // Neo4j", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461219643", "createdAt": "2020-07-27T23:04:17Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI3NDk0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNjowN1rOG32pvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNjowN1rOG32pvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDI4Ng==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case DbSystem.REDIS: // Redis\n          \n          \n            \n                  case DbSystem.SAP: // SAP HANA\n          \n          \n            \n                  case DbSystem.SQLITE: // SQLite\n          \n          \n            \n                  case DbSystem.TERADATA: // Teradata", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461220286", "createdAt": "2020-07-27T23:06:07Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j\n+      case DbSystem.ORACLE: // Oracle Database\n+      case DbSystem.POSTGRESQL: // PostgreSQL\n+      case DbSystem.REDIS: // Redis\n+      case DbSystem.SAP: // SAP HANA\n+      case DbSystem.SQLITE: // SQLite\n+      case DbSystem.TERADATA: // Teradata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI3NjA0OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNjozNlrOG32qbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNjozNlrOG32qbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDQ2MQ==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  case \"apachehbase\": // Apache HBase\n          \n          \n            \n                    return DbSystem.HBASE;\n          \n          \n            \n                  case \"amazondynamodb\": // Amazon DynamoDB\n          \n          \n            \n                    return DbSystem.DYNAMODB;\n          \n          \n            \n                  case \"hive2\": // Apache Hive\n          \n          \n            \n                    return DbSystem.HIVE;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461220461", "createdAt": "2020-07-27T23:06:36Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/JDBCConnectionUrlParser.java", "diffHunk": "@@ -885,4 +885,45 @@ private static void populateStandardProperties(\n       }\n     }\n   }\n+\n+  /**\n+   * see {@link <a\n+   * href=\"https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\">specification</a>}\n+   */\n+  private static String toDbSystem(final String type) {\n+    switch (type) {\n+      case DbSystem.AS400: // IBM AS400 Database\n+      case DbSystem.CASSANDRA: // Cassandra\n+      case DbSystem.COSMOSDB: // Microsoft Azure Cosmos DB\n+      case DbSystem.COUCHBASE: // Couchbase\n+      case DbSystem.COUCHDB: // CouchDB\n+      case DbSystem.DB2: // IBM Db2\n+      case DbSystem.DERBY: // Apache Derby\n+      case DbSystem.H2: // H2 Database\n+      case DbSystem.HSQLDB: // Hyper SQL Database\n+      case DbSystem.MARIADB: // MariaDB\n+      case DbSystem.MONGODB: // MongoDB\n+      case DbSystem.MYSQL: // MySQL\n+      case DbSystem.NEO4J: // Neo4j\n+      case DbSystem.ORACLE: // Oracle Database\n+      case DbSystem.POSTGRESQL: // PostgreSQL\n+      case DbSystem.REDIS: // Redis\n+      case DbSystem.SAP: // SAP HANA\n+      case DbSystem.SQLITE: // SQLite\n+      case DbSystem.TERADATA: // Teradata\n+        return type;\n+      case \"apachehbase\": // Apache HBase\n+        return DbSystem.HBASE;\n+      case \"amazondynamodb\": // Amazon DynamoDB\n+        return DbSystem.DYNAMODB;\n+      case \"hive2\": // Apache Hive\n+        return DbSystem.HIVE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI3ODAzOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNzoyOFrOG32rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNzoyOFrOG32rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDc2Mw==", "bodyText": "unused for now\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `\"sap\"`               | SAP                       | not on [database.md]           |", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461220763", "createdAt": "2020-07-27T23:07:28Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "diffHunk": "@@ -0,0 +1,12 @@\n+`db.system`\n+\n+The latest specification for `db.system` is [database.md].\n+\n+[database.md]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\n+\n+| Value for `db.system` | Product name              | Note                           |\n+| :-------------------- | :------------------------ | :----------------------------- |\n+| `\"as400\"`             | IBM AS400 Database        | not on [database.md]           |\n+| `\"h2\"`                | H2 Database               | not on [database.md]           |\n+| `\"hsqldb\"`            | Hyper SQL Database        | not on [database.md]           |\n+| `\"sap\"`               | SAP                       | not on [database.md]           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI4MTQwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowODo1N1rOG32tjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowODo1N1rOG32tjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTI2MA==", "bodyText": "let's remove this and map it to db2\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `\"as400\"`             | IBM AS400 Database        | not on [database.md]           |", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461221260", "createdAt": "2020-07-27T23:08:57Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/README.md", "diffHunk": "@@ -0,0 +1,12 @@\n+`db.system`\n+\n+The latest specification for `db.system` is [database.md].\n+\n+[database.md]: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md\n+\n+| Value for `db.system` | Product name              | Note                           |\n+| :-------------------- | :------------------------ | :----------------------------- |\n+| `\"as400\"`             | IBM AS400 Database        | not on [database.md]           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72b73a12b2baa62754eaf25dbde053df84617043"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYyOTE0OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/CassandraClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjowMVrOG356yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjowMVrOG356yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzgwMg==", "bodyText": "since not really tied to DbSystem constant\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.CASSANDRA);\n          \n          \n            \n                super(\"cassandra\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461273802", "createdAt": "2020-07-28T02:06:01Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v3_0/CassandraClientInstrumentation.java", "diffHunk": "@@ -35,7 +36,7 @@\n public class CassandraClientInstrumentation extends Instrumenter.Default {\n \n   public CassandraClientInstrumentation() {\n-    super(\"cassandra\");\n+    super(DbSystem.CASSANDRA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYyOTkyOnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-4.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v4_0/CassandraClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjoyOFrOG357SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjoyOFrOG357SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MzkyOA==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.CASSANDRA);\n          \n          \n            \n                super(\"cassandra\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461273928", "createdAt": "2020-07-28T02:06:28Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-4.0/src/main/java/io/opentelemetry/auto/instrumentation/cassandra/v4_0/CassandraClientInstrumentation.java", "diffHunk": "@@ -33,7 +34,7 @@\n public class CassandraClientInstrumentation extends Instrumenter.Default {\n \n   public CassandraClientInstrumentation() {\n-    super(\"cassandra\");\n+    super(DbSystem.CASSANDRA);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzMDgxOnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseBucketInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjo1MFrOG357ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNjo1MFrOG357ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDA1MQ==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274051", "createdAt": "2020-07-28T02:06:50Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseBucketInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseBucketInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseBucketInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzMTE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseClusterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzowNFrOG358AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzowNFrOG358AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274112", "createdAt": "2020-07-28T02:07:04Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_0/CouchbaseClusterInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseClusterInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseClusterInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzMTgxOnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseCoreInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzoyNVrOG358Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzoyNVrOG358Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274202", "createdAt": "2020-07-28T02:07:25Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseCoreInstrumentation.java", "diffHunk": "@@ -40,7 +41,7 @@\n public class CouchbaseCoreInstrumentation extends Instrumenter.Default {\n \n   public CouchbaseCoreInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzMjE3OnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseNetworkInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzozN1rOG358jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowNzozN1rOG358jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(DbSystem.COUCHBASE);\n          \n          \n            \n                super(\"couchbase\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274253", "createdAt": "2020-07-28T02:07:37Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.6/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/v2_6/CouchbaseNetworkInstrumentation.java", "diffHunk": "@@ -43,7 +44,7 @@\n @AutoService(Instrumenter.class)\n public class CouchbaseNetworkInstrumentation extends Instrumenter.Default {\n   public CouchbaseNetworkInstrumentation() {\n-    super(\"couchbase\");\n+    super(DbSystem.COUCHBASE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzNjE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxMDowNFrOG35-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxMDowNFrOG35-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NDg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"jedis\", DbSystem.REDIS);\n          \n          \n            \n                super(\"jedis\", \"redis\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461274878", "createdAt": "2020-07-28T02:10:04Z", "author": {"login": "trask"}, "path": "instrumentation/jedis/jedis-3.0/src/main/java/io/opentelemetry/auto/instrumentation/jedis/v3_0/JedisInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n public final class JedisInstrumentation extends Instrumenter.Default {\n \n   public JedisInstrumentation() {\n-    super(\"jedis\", \"redis\");\n+    super(\"jedis\", DbSystem.REDIS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTYzNzg4OnYy", "diffSide": "RIGHT", "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxMDo1M1rOG35_7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjoxMDo1M1rOG35_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          .spanBuilder(DbSystem.REDIS)\n          \n          \n            \n                          .spanBuilder(\"REDIS\")", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461275118", "createdAt": "2020-07-28T02:10:53Z", "author": {"login": "trask"}, "path": "instrumentation/lettuce/lettuce-5.1/src/main/java/io/opentelemetry/auto/instrumentation/lettuce/v5_1/OpenTelemetryTracing.java", "diffHunk": "@@ -167,10 +169,10 @@ public OpenTelemetrySpan nextSpan(TraceContext traceContext) {\n       // the span starts.\n       spanBuilder =\n           TRACER\n-              .spanBuilder(\"REDIS\")\n+              .spanBuilder(DbSystem.REDIS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cb049d1af75c67ec00907e3668e3c0a4b37c85c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjkwNTA5OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyODowOVrOG4ZLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo0MjowOVrOG4Zqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ==", "bodyText": "This seems to be used in a lot of places.  Perhaps it should be created once somewhere and reused?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461785931", "createdAt": "2020-07-28T18:28:09Z", "author": {"login": "tylerbenson"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -18,26 +18,27 @@\n \n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.trace.attributes.StringAttributeSetter;\n \n /** @deprecated use {@link DatabaseClientTracer} instead. */\n @Deprecated\n public abstract class DatabaseClientDecorator<CONNECTION> extends ClientDecorator {\n \n-  protected abstract String dbType();\n+  protected abstract String dbSystem();\n \n   protected abstract String dbUser(CONNECTION connection);\n \n-  protected abstract String dbInstance(CONNECTION connection);\n+  protected abstract String dbName(CONNECTION connection);\n \n   // TODO make abstract after implementing in all subclasses\n-  protected String dbUrl(final CONNECTION connection) {\n+  protected String dbConnectionString(final CONNECTION connection) {\n     return null;\n   }\n \n   @Override\n   public Span afterStart(final Span span) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.DB_TYPE.key(), dbType());\n+    span.setAttribute(StringAttributeSetter.create(\"db.system\").key(), dbSystem());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80c55914a2fab04dd411b4d416d5b167e20b612a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4Nzc1MQ==", "bodyText": "oh, I see... that's a subject for a follow on PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461787751", "createdAt": "2020-07-28T18:31:20Z", "author": {"login": "tylerbenson"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -18,26 +18,27 @@\n \n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.trace.attributes.StringAttributeSetter;\n \n /** @deprecated use {@link DatabaseClientTracer} instead. */\n @Deprecated\n public abstract class DatabaseClientDecorator<CONNECTION> extends ClientDecorator {\n \n-  protected abstract String dbType();\n+  protected abstract String dbSystem();\n \n   protected abstract String dbUser(CONNECTION connection);\n \n-  protected abstract String dbInstance(CONNECTION connection);\n+  protected abstract String dbName(CONNECTION connection);\n \n   // TODO make abstract after implementing in all subclasses\n-  protected String dbUrl(final CONNECTION connection) {\n+  protected String dbConnectionString(final CONNECTION connection) {\n     return null;\n   }\n \n   @Override\n   public Span afterStart(final Span span) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.DB_TYPE.key(), dbType());\n+    span.setAttribute(StringAttributeSetter.create(\"db.system\").key(), dbSystem());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ=="}, "originalCommit": {"oid": "80c55914a2fab04dd411b4d416d5b167e20b612a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5MzkyNg==", "bodyText": "Yup, it will be replaced with SemanticAttributes.DB_SYSTEM.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/785#discussion_r461793926", "createdAt": "2020-07-28T18:42:09Z", "author": {"login": "heyams"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -18,26 +18,27 @@\n \n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import io.opentelemetry.trace.attributes.StringAttributeSetter;\n \n /** @deprecated use {@link DatabaseClientTracer} instead. */\n @Deprecated\n public abstract class DatabaseClientDecorator<CONNECTION> extends ClientDecorator {\n \n-  protected abstract String dbType();\n+  protected abstract String dbSystem();\n \n   protected abstract String dbUser(CONNECTION connection);\n \n-  protected abstract String dbInstance(CONNECTION connection);\n+  protected abstract String dbName(CONNECTION connection);\n \n   // TODO make abstract after implementing in all subclasses\n-  protected String dbUrl(final CONNECTION connection) {\n+  protected String dbConnectionString(final CONNECTION connection) {\n     return null;\n   }\n \n   @Override\n   public Span afterStart(final Span span) {\n     assert span != null;\n-    span.setAttribute(SemanticAttributes.DB_TYPE.key(), dbType());\n+    span.setAttribute(StringAttributeSetter.create(\"db.system\").key(), dbSystem());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NTkzMQ=="}, "originalCommit": {"oid": "80c55914a2fab04dd411b4d416d5b167e20b612a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 145, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}