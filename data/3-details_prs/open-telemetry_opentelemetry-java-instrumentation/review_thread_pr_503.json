{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTgzNDg4", "number": 503, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxODoxNVrOEFN4GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxOTo0OFrOEFRJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA1Njg5OnYy", "diffSide": "RIGHT", "path": "testing/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxODoxNVrOGjUWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoxODoxNVrOGjUWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4NjczNA==", "bodyText": "was this change needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static URI address\n          \n          \n            \n              URI address", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439686734", "createdAt": "2020-06-13T00:18:15Z", "author": {"login": "trask"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/base/HttpServerTest.groovy", "diffHunk": "@@ -63,7 +64,7 @@ abstract class HttpServerTest<SERVER> extends AgentTestRunner {\n   @Shared\n   int port\n   @Shared\n-  URI address\n+  static URI address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA2NzM2OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoyOTozOVrOGjUcbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDoyOTozOVrOGjUcbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4ODMwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439688300", "createdAt": "2020-06-13T00:29:39Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTA2OTA3OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx/src/test/groovy/server/VertxHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDozMToyMVrOGjUdYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMDozMToyMVrOGjUdYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4ODU0Nw==", "bodyText": "not needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SneakyThrows", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439688547", "createdAt": "2020-06-13T00:31:21Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/test/groovy/server/VertxHttpServerTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package server\n+\n+import io.opentelemetry.auto.test.base.HttpServerTest\n+import io.vertx.core.AbstractVerticle\n+import io.vertx.core.DeploymentOptions\n+import io.vertx.core.Vertx\n+import io.vertx.core.VertxOptions\n+import io.vertx.core.json.JsonObject\n+import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+import lombok.SneakyThrows\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+\n+class VertxHttpServerTest extends HttpServerTest<Vertx> {\n+  public static final String CONFIG_HTTP_SERVER_PORT = \"http.server.port\"\n+\n+  @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyNTcxOnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTozNzo0NVrOGjU_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1Njo0MlrOGjW_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM1MQ==", "bodyText": "for better or worse(?), instrumentation typically catches Throwable", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697351", "createdAt": "2020-06-13T01:37:45Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465\n+        currentSpan.updateName(context.currentRoute().getPath());\n+      }\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDE0MA==", "bodyText": "I think for worse :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439730140", "createdAt": "2020-06-13T10:56:42Z", "author": {"login": "iNikem"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RoutingContextHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/** This is used to wrap Vert.x Handlers to provide nice user-friendly SERVER span names */\n+@Slf4j\n+public final class RoutingContextHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> handler;\n+\n+  public RoutingContextHandlerWrapper(final Handler<RoutingContext> handler) {\n+    this.handler = handler;\n+  }\n+\n+  @Override\n+  public void handle(RoutingContext context) {\n+    try {\n+      Span currentSpan = TRACER.getCurrentSpan();\n+      if (currentSpan.getContext().isValid()) {\n+        // TODO should update only SERVER span using\n+        // https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/465\n+        currentSpan.updateName(context.currentRoute().getPath());\n+      }\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzM1MQ=="}, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyNzg2OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MTo0N1rOGjVA_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MTo0N1rOGjVA_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzY2MQ==", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697661", "createdAt": "2020-06-13T01:41:47Z", "author": {"login": "trask"}, "path": "instrumentation/vertx/src/main/java/io/opentelemetry/auto/instrumentation/vertx/RouteInstrumentation.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class RouteInstrumentation extends Instrumenter.Default {\n+\n+  public RouteInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyODI5OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MjozOVrOGjVBQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MjozOVrOGjVBQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzczMQ==", "bodyText": "this comment looks outdated\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //We need both version as different versions of Vert.x use different versions of Netty", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697731", "createdAt": "2020-06-13T01:42:39Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "diffHunk": "@@ -1,35 +1,49 @@\n-// Set properties before any plugins get loaded\n ext {\n   minJavaVersionForTests = JavaVersion.VERSION_1_8\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n apply plugin: 'org.unbroken-dome.test-sets'\n \n+muzzle {\n+  pass {\n+    group = 'io.vertx'\n+    module = 'vertx-web'\n+    versions = \"[3.5.0,)\"\n+  }\n+}\n+\n testSets {\n   latestDepTest {\n     dirName = 'test'\n   }\n }\n \n-sourceCompatibility = 1.8\n-targetCompatibility = 1.8\n+//The first Vert.x version that uses rx-java 2\n+ext.vertxVersion = '3.5.0'\n \n dependencies {\n-//  compileOnly group: 'io.vertx', name: 'vertx-web', version: '3.5.0'\n+  compileOnly group: 'io.vertx', name: 'vertx-web', version: vertxVersion\n+  compileOnly group: 'io.vertx', name: 'vertx-rx-java2', version: vertxVersion\n \n+  testCompile project(':instrumentation:jdbc')\n+  //We need both version as different versions of Vert.x use different versions of Netty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyODcxOnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MzoyN1rOGjVBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0MzoyN1rOGjVBgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5Nzc5NQ==", "bodyText": "see comment about muzzle failure \ud83d\udc4d\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                module = 'vertx-web'\n          \n          \n            \n                module = 'vertx-rx-java2'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697795", "createdAt": "2020-06-13T01:43:27Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/vertx-reactive.gradle", "diffHunk": "@@ -1,35 +1,49 @@\n-// Set properties before any plugins get loaded\n ext {\n   minJavaVersionForTests = JavaVersion.VERSION_1_8\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n apply plugin: 'org.unbroken-dome.test-sets'\n \n+muzzle {\n+  pass {\n+    group = 'io.vertx'\n+    module = 'vertx-web'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEyODk1OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0NDoxN1rOGjVBqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0NDoxN1rOGjVBqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzgzNA==", "bodyText": "not needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SneakyThrows", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439697834", "createdAt": "2020-06-13T01:44:17Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "diffHunk": "@@ -13,36 +13,37 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package server\n-\n import io.opentelemetry.auto.test.base.HttpServerTest\n-import io.vertx.core.AbstractVerticle\n import io.vertx.core.DeploymentOptions\n import io.vertx.core.Future\n import io.vertx.core.Vertx\n import io.vertx.core.VertxOptions\n import io.vertx.core.json.JsonObject\n-import io.vertx.ext.web.Router\n-\n+import io.vertx.reactivex.core.AbstractVerticle\n+import io.vertx.reactivex.ext.web.Router\n import java.util.concurrent.CompletableFuture\n+import java.util.concurrent.TimeUnit\n+import lombok.SneakyThrows\n \n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.ERROR\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.REDIRECT\n import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n \n-class VertxHttpServerTest extends HttpServerTest<Vertx> {\n+class VertxRxHttpServerTest extends HttpServerTest<Vertx> {\n   public static final String CONFIG_HTTP_SERVER_PORT = \"http.server.port\"\n \n+  @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEzMjE0OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo0ODo1OVrOGjVDaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDo1ODozN1rOGjXARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODI4MQ==", "bodyText": "this is \"super\" weird \ud83d\ude02", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439698281", "createdAt": "2020-06-13T01:48:59Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "diffHunk": "@@ -52,30 +53,45 @@ class VertxHttpServerTest extends HttpServerTest<Vertx> {\n       future.complete(null)\n     }\n \n-    future.get()\n+    future.get(30, TimeUnit.SECONDS)\n     return server\n   }\n \n-  protected Class<io.vertx.reactivex.core.AbstractVerticle> verticle() {\n-    return VertxWebTestServer\n-  }\n-\n   @Override\n   void stopServer(Vertx server) {\n     server.close()\n   }\n \n   @Override\n   boolean testExceptionBody() {\n-    false\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n   }\n \n-  static class VertxWebTestServer extends AbstractVerticle {\n+  @Override\n+  String expectedOperationName(String method, ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? \"/path/:id/param\" : endpoint.getPath()\n+  }\n+\n+  protected Class<AbstractVerticle> verticle() {\n+    return VertxReactiveWebServer\n+  }\n+\n+  static class VertxReactiveWebServer extends AbstractVerticle {\n \n     @Override\n     void start(final Future<Void> startFuture) {\n       final int port = config().getInteger(CONFIG_HTTP_SERVER_PORT)\n-      final Router router = Router.router(vertx)\n+      final Router router = Router.router(super.@vertx)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczMDI0NQ==", "bodyText": "Yeah, but needed to get io.vertx.reactivex.core.AbstractVerticle#vertx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439730245", "createdAt": "2020-06-13T10:58:37Z", "author": {"login": "iNikem"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxHttpServerTest.groovy", "diffHunk": "@@ -52,30 +53,45 @@ class VertxHttpServerTest extends HttpServerTest<Vertx> {\n       future.complete(null)\n     }\n \n-    future.get()\n+    future.get(30, TimeUnit.SECONDS)\n     return server\n   }\n \n-  protected Class<io.vertx.reactivex.core.AbstractVerticle> verticle() {\n-    return VertxWebTestServer\n-  }\n-\n   @Override\n   void stopServer(Vertx server) {\n     server.close()\n   }\n \n   @Override\n   boolean testExceptionBody() {\n-    false\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n   }\n \n-  static class VertxWebTestServer extends AbstractVerticle {\n+  @Override\n+  String expectedOperationName(String method, ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? \"/path/:id/param\" : endpoint.getPath()\n+  }\n+\n+  protected Class<AbstractVerticle> verticle() {\n+    return VertxReactiveWebServer\n+  }\n+\n+  static class VertxReactiveWebServer extends AbstractVerticle {\n \n     @Override\n     void start(final Future<Void> startFuture) {\n       final int port = config().getInteger(CONFIG_HTTP_SERVER_PORT)\n-      final Router router = Router.router(vertx)\n+      final Router router = Router.router(super.@vertx)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODI4MQ=="}, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTEzNDI1OnYy", "diffSide": "LEFT", "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxCircuitBreakerHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo1Mjo0NFrOGjVEkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMTo1Mjo0NFrOGjVEkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5ODU3OQ==", "bodyText": "keep these classes in the server package, to be consistent with vertx (non-rx) tests?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439698579", "createdAt": "2020-06-13T01:52:44Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxRxCircuitBreakerHttpServerTest.groovy", "diffHunk": "@@ -13,21 +13,21 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package server\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTE1MTEyOnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/test/groovy/VertxReactivePropagationTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjoyMzoxN1rOGjVNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjo0Mjo0OVrOGjVSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMDg4NA==", "bodyText": "I think this is a bug in our jdbc url parsing, it should be just test, I'll open an issue for this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439700884", "createdAt": "2020-06-13T02:23:17Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxReactivePropagationTest.groovy", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.opentelemetry.auto.instrumentation.api.MoreTags\n+import io.opentelemetry.auto.instrumentation.api.Tags\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.OkHttpUtils\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.vertx.reactivex.core.Vertx\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n+import static io.opentelemetry.auto.test.utils.TraceUtils.basicSpan\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+class VertxReactivePropagationTest extends AgentTestRunner {\n+  @Shared\n+  OkHttpClient client = OkHttpUtils.client()\n+\n+  @Shared\n+  int port\n+\n+  @Shared\n+  Vertx server\n+\n+  def setupSpec() {\n+    port = PortUtils.randomOpenPort()\n+    server = VertxReactiveWebServer.start(port)\n+  }\n+\n+  def cleanupSpec() {\n+    server.close()\n+  }\n+\n+  //Verifies that context is correctly propagated and sql query span has correct parent.\n+  //Tests io.opentelemetry.auto.instrumentation.vertx.reactive.VertxRxInstrumentation\n+  def \"should propagate context over vert.x rx-java framework\"() {\n+    setup:\n+    def url = \"http://localhost:$port/listProducts\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def response = client.newCall(request).execute()\n+\n+    expect:\n+    response.code() == SUCCESS.status\n+\n+    and:\n+    assertTraces(1) {\n+      trace(0, 4) {\n+        span(0) {\n+          operationName \"/listProducts\"\n+          spanKind SERVER\n+          errored false\n+          parent()\n+          tags {\n+            \"$MoreTags.NET_PEER_PORT\" Long\n+            \"$MoreTags.NET_PEER_IP\" { it == null || it == \"127.0.0.1\" } // Optional\n+            \"$Tags.HTTP_URL\" url\n+            \"$Tags.HTTP_METHOD\" \"GET\"\n+            \"$Tags.HTTP_STATUS\" 200\n+          }\n+        }\n+        basicSpan(it, 1, \"VertxReactiveWebServer.handleListProducts\", span(0))\n+        basicSpan(it, 2, \"VertxReactiveWebServer.listProducts\", span(1))\n+        span(3) {\n+          operationName \"SELECT id, name, price, weight FROM products\"\n+          spanKind CLIENT\n+          childOf span(2)\n+          errored false\n+          tags {\n+            \"$Tags.DB_TYPE\" \"sql\"\n+            \"$Tags.DB_INSTANCE\" \"test?shutdown=true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMjE2NA==", "bodyText": "opened #508", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439702164", "createdAt": "2020-06-13T02:42:49Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/VertxReactivePropagationTest.groovy", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import io.opentelemetry.auto.instrumentation.api.MoreTags\n+import io.opentelemetry.auto.instrumentation.api.Tags\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.OkHttpUtils\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.vertx.reactivex.core.Vertx\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.auto.test.base.HttpServerTest.ServerEndpoint.SUCCESS\n+import static io.opentelemetry.auto.test.utils.TraceUtils.basicSpan\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+import static io.opentelemetry.trace.Span.Kind.SERVER\n+\n+class VertxReactivePropagationTest extends AgentTestRunner {\n+  @Shared\n+  OkHttpClient client = OkHttpUtils.client()\n+\n+  @Shared\n+  int port\n+\n+  @Shared\n+  Vertx server\n+\n+  def setupSpec() {\n+    port = PortUtils.randomOpenPort()\n+    server = VertxReactiveWebServer.start(port)\n+  }\n+\n+  def cleanupSpec() {\n+    server.close()\n+  }\n+\n+  //Verifies that context is correctly propagated and sql query span has correct parent.\n+  //Tests io.opentelemetry.auto.instrumentation.vertx.reactive.VertxRxInstrumentation\n+  def \"should propagate context over vert.x rx-java framework\"() {\n+    setup:\n+    def url = \"http://localhost:$port/listProducts\"\n+    def request = new Request.Builder().url(url).get().build()\n+    def response = client.newCall(request).execute()\n+\n+    expect:\n+    response.code() == SUCCESS.status\n+\n+    and:\n+    assertTraces(1) {\n+      trace(0, 4) {\n+        span(0) {\n+          operationName \"/listProducts\"\n+          spanKind SERVER\n+          errored false\n+          parent()\n+          tags {\n+            \"$MoreTags.NET_PEER_PORT\" Long\n+            \"$MoreTags.NET_PEER_IP\" { it == null || it == \"127.0.0.1\" } // Optional\n+            \"$Tags.HTTP_URL\" url\n+            \"$Tags.HTTP_METHOD\" \"GET\"\n+            \"$Tags.HTTP_STATUS\" 200\n+          }\n+        }\n+        basicSpan(it, 1, \"VertxReactiveWebServer.handleListProducts\", span(0))\n+        basicSpan(it, 2, \"VertxReactiveWebServer.listProducts\", span(1))\n+        span(3) {\n+          operationName \"SELECT id, name, price, weight FROM products\"\n+          spanKind CLIENT\n+          childOf span(2)\n+          errored false\n+          tags {\n+            \"$Tags.DB_TYPE\" \"sql\"\n+            \"$Tags.DB_INSTANCE\" \"test?shutdown=true\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMDg4NA=="}, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTE1MTk4OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjoyNDo0NFrOGjVODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjoyNDo0NFrOGjVODQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTAwNQ==", "bodyText": "i don't think there's a need to provide vert.x alias\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"vertx\", \"vert.x\");\n          \n          \n            \n                super(\"vertx\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701005", "createdAt": "2020-06-13T02:24:44Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/VertxRxInstrumentation.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/** This instrumentation allows span context propagation across Vert.x reactive executions. */\n+@AutoService(Instrumenter.class)\n+public class VertxRxInstrumentation extends Instrumenter.Default {\n+\n+  public VertxRxInstrumentation() {\n+    super(\"vertx\", \"vert.x\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTE1NjA2OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/AsyncResultConsumerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjozMToyN1rOGjVQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwMjozODo0M1rOGjVRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNw==", "bodyText": "we should start propagating the Context instead of propagating (only) the parent Span, but this applies to lots of places, I'll open an issue for it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701517", "createdAt": "2020-06-13T02:31:27Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/AsyncResultConsumerWrapper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.function.Consumer;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class AsyncResultConsumerWrapper implements Consumer<Handler<AsyncResult<?>>> {\n+  private final Consumer<Handler<AsyncResult<?>>> delegate;\n+  private final Span parentSpan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTkwNw==", "bodyText": "opened #507", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439701907", "createdAt": "2020-06-13T02:38:43Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/main/java/io/opentelemetry/auto/instrumentation/vertx/reactive/AsyncResultConsumerWrapper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.vertx.reactive;\n+\n+import static io.opentelemetry.auto.instrumentation.vertx.reactive.VertxDecorator.TRACER;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import java.util.function.Consumer;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class AsyncResultConsumerWrapper implements Consumer<Handler<AsyncResult<?>>> {\n+  private final Consumer<Handler<AsyncResult<?>>> delegate;\n+  private final Span parentSpan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcwMTUxNw=="}, "originalCommit": {"oid": "1fa4c631366599ecf35172f0309ed3c3c0a4d4e5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTU5Mzc5OnYy", "diffSide": "RIGHT", "path": "instrumentation/vertx-reactive/src/test/groovy/server/VertxRxCircuitBreakerHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxOTo0OFrOGjYuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxODoxOTo0OFrOGjYuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1ODM5MQ==", "bodyText": "extra copyright header below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/503#discussion_r439758391", "createdAt": "2020-06-13T18:19:48Z", "author": {"login": "trask"}, "path": "instrumentation/vertx-reactive/src/test/groovy/server/VertxRxCircuitBreakerHttpServerTest.groovy", "diffHunk": "@@ -1,3 +1,19 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1bcd80e1b5911a65d30ecbc40b8e49241751aa"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 500, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}