{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzEwNzIz", "number": 1545, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0ODowM1rOE010rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDo0NjowOFrOE4eluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODQzMjQ3OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDo0ODowM1rOHsyPVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNToyOTo0M1rOHs0J7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw==", "bodyText": "W3CBaggagePropagator shouldn't be registered as part of TraceMultiPropagator, i.e. it should be added directly through addTextMapPropagator() ;)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516722517", "createdAt": "2020-11-03T14:48:03Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -49,7 +52,11 @@ public static void initializePropagators(List<String> propagators) {\n       //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n-              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(\n+                  TraceMultiPropagator.builder()\n+                      .addPropagator(HttpTraceContext.getInstance())\n+                      .addPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1Mjk0OA==", "bodyText": "ups", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516752948", "createdAt": "2020-11-03T15:28:35Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -49,7 +52,11 @@ public static void initializePropagators(List<String> propagators) {\n       //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n-              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(\n+                  TraceMultiPropagator.builder()\n+                      .addPropagator(HttpTraceContext.getInstance())\n+                      .addPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw=="}, "originalCommit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjc1MzkwMw==", "bodyText": "fixed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r516753903", "createdAt": "2020-11-03T15:29:43Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -49,7 +52,11 @@ public static void initializePropagators(List<String> propagators) {\n       //  https://github.com/open-telemetry/opentelemetry-java/issues/1742\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n-              .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(\n+                  TraceMultiPropagator.builder()\n+                      .addPropagator(HttpTraceContext.getInstance())\n+                      .addPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjcyMjUxNw=="}, "originalCommit": {"oid": "1ef59d88e1b3f1b8c8a0c41161c5b8ee8d56bd9b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODA0NDE5OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": false, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzoxNToxN1rOHuNmIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyMjoyN1rOHwe2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw==", "bodyText": "@carlosalberto\nW3CBaggagePropagator should be first one or last one?\nit doesn't matter for inject but for extract we return context from last propagator.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518219297", "createdAt": "2020-11-05T17:15:17Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MjU4OA==", "bodyText": "It does't matter for the default configuration case \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518262588", "createdAt": "2020-11-05T18:13:24Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NDUwMA==", "bodyText": "@carlosalberto does it matter the order we add W3CBaggagePropagator for the non-default configuration case?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518374500", "createdAt": "2020-11-05T21:20:00Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyNTc5OQ==", "bodyText": "@trask So Baggage propagators work just like the Trace ones (B3, TraceContext, etc), regarding the fact that, upon successful extraction, any previous value will be overridden (i.e. that last one wins).\nCurrently only the Jaeger propagator does Baggage extraction besides W3CBaggage, so the order may matter in such case, e.g. if the user explicitly specifies OTEL_PROPAGATORS=jaeger,baggage, then W3CBaggage will have higher priority, given the case that Baggage was propagated using both Jaeger and W3CBaggage formats.\nThen again, when users specify this, they should know what they are doing, IMHO \ud83d\ude09 (although maybe we should add a note in OTel Java regarding this, etc).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518425799", "createdAt": "2020-11-05T23:10:37Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1NDk1NQ==", "bodyText": "@carlosalberto do u know what we should do if the user specifies:\nOTEL_PROPAGATORS=jaeger,baggage,tracecontext\nShould we add both TraceMultiPropagator(jaeger,tracecontext) and W3BaggagePropagator? And if so, do u know whether we should add TraceMultiPropagator first or last?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518554955", "createdAt": "2020-11-06T06:54:23Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMzQxOQ==", "bodyText": "After thinking a little bit more about this, I think we should leave JaegerPropagator out of the TraceMultiPropagator given that it not only extracts SpanContext. For example, TraceMultiPropagator with \"tracecontext,jaeger\" will stop if trace-context succeeded, without giving JaegerPropagator a chance to extract any existing Baggage ;)\nIt would mean, given your example, that you would end up with Jaeger + Baggage + TraceContext (no TraceMultiPropagator needed here).\nOther than that, the order doesn't matter much - although W3CBaggagePropagator should probably come after JaegerPropagator, as it can have more complex/complete values that Jaeger baggage lacks, e.g. metadata.\n(We could split JaegerPropagator into a trace AND a baggage propagators but that slightly seems like an overkill)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518723419", "createdAt": "2020-11-06T12:34:58Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMzUzMA==", "bodyText": "@malafeev ^ ;)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r518723530", "createdAt": "2020-11-06T12:35:11Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2NDM5OA==", "bodyText": "so JaegerPropagator always should be added via addTextMapPropagator?\nAnd next example is valid?:\nDefaultContextPropagators.builder()\n    .addTextMapPropagator(JaegerPropagator.getInstance())\n    .addTextMapPropagator(W3CBaggagePropagator.getInstance()) \n    .addTextMapPropagator(TraceMultiPropagator.builder()\n        .addPropagator(HttpTraceContext.getInstance())\n        .addPropagator(AwsXRayPropagator.getInstance()).build())\n    ...\n\n?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r519864398", "createdAt": "2020-11-09T14:42:48Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzM0MQ==", "bodyText": "@malafeev  Yes ;) - and put a comment in the code on why we are doing it (i.e. Jaeger handles BOTH tracing and baggage, etc).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r519997341", "createdAt": "2020-11-09T17:39:49Z", "author": {"login": "carlosalberto"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM5NDAzOQ==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520394039", "createdAt": "2020-11-10T08:59:30Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODkyNw==", "bodyText": "@malafeev I think both users and developers will have a hard time understanding how otel.propagators works now :) Please document the final result both in PropagatorsInitializer.java and in README. The latter, for example, currently does very poor job explaining the difference between trace context propagators and baggage ones.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520548927", "createdAt": "2020-11-10T13:09:40Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4MDUzNg==", "bodyText": "@iNikem I added javadoc, is it clear enough?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520580536", "createdAt": "2020-11-10T13:57:10Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTIwNQ==", "bodyText": "Sorry, but no :) I will add comments to javadoc. And we still have to update README", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599205", "createdAt": "2020-11-10T14:22:27Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,6 +53,7 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxOTI5Nw=="}, "originalCommit": {"oid": "7fd80137204475a76219c0e588d90609ee85a927"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzY4Mzc1OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyMjo1NlrOHwe4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxOTowM1rOHwhk6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTU2OQ==", "bodyText": "Is it always added? Or only if baggage value is provided?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599569", "createdAt": "2020-11-10T14:22:56Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0MzgxNw==", "bodyText": "added can be ... only", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520643817", "createdAt": "2020-11-10T15:19:03Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTU2OQ=="}, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzY4NDY2OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyMzowOVrOHwe4qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToxOTowN1rOHwhlIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTcyMw==", "bodyText": "Is it always added? Or only if jaeger value is provided?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520599723", "createdAt": "2020-11-10T14:23:09Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0Mzg3NQ==", "bodyText": "added can be ... only", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520643875", "createdAt": "2020-11-10T15:19:07Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5OTcyMw=="}, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzcwOTI5OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODoxM1rOHwfIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyMjo1MlrOHwhwqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzY2MA==", "bodyText": "Above you say \"returns first successful extracted Context\", here you seem to say that later Baggage extraction can enrich the previous one. If context and baggage extractions behave differently in this regard, we have to say so explicitly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520603660", "createdAt": "2020-11-10T14:28:13Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context\n+   *       and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract any\n+   *       existing Baggage.\n+   *   <li>W3CBaggagePropagator comes after JaegerPropagator, as it can have more complex/complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0NjgyNA==", "bodyText": "updated.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r520646824", "createdAt": "2020-11-10T15:22:52Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,25 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator is added to DefaultContextPropagators to allow another propagator\n+   *       extract Context.\n+   *   <li>JaegerPropagator is added to DefaultContextPropagators because it extracts both Context\n+   *       and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract any\n+   *       existing Baggage.\n+   *   <li>W3CBaggagePropagator comes after JaegerPropagator, as it can have more complex/complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzY2MA=="}, "originalCommit": {"oid": "40764886b20751cab9bb4db3ee5e60a825f834f5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTM1NzM0OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozMzoxMVrOHyPLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMTozMzoxMVrOHyPLmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQzOTU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * extraction next rules applied:\n          \n          \n            \n               * extraction, these rules are applied:", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522439578", "createdAt": "2020-11-12T21:33:11Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjExNjgxOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1MjoxNFrOHyWcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTo1MjoxNFrOHyWcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU1ODQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n          \n          \n            \n               *       propagator extract Context.\n          \n          \n            \n               *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n          \n          \n            \n               *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n          \n          \n            \n               *       any existing Baggage.\n          \n          \n            \n               *   <li>W3CBaggagePropagator and JaegerPropagator are added outside of the multi-propagator so that they will always runs and extract baggage (note: JaegerPropagator extracts both baggage and context).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522558480", "createdAt": "2020-11-13T01:52:14Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -39,9 +42,26 @@\n           .put(JAEGER, JaegerPropagator.getInstance())\n           .put(OT_TRACER, OtTracerPropagator.getInstance())\n           .put(XRAY, AwsXRayPropagator.getInstance())\n+          .put(BAGGAGE, W3CBaggagePropagator.getInstance())\n           .build();\n \n-  /** Initialize OpenTelemetry global Propagators with propagator list, if any. */\n+  /**\n+   * Initialize OpenTelemetry global Propagators with propagator list, if any.\n+   *\n+   * <p>Because TraceMultiPropagator returns first successful extracted Context and stops further\n+   * extraction next rules applied:\n+   *\n+   * <ul>\n+   *   <li>W3CBaggagePropagator can be added to DefaultContextPropagators only to allow another\n+   *       propagator extract Context.\n+   *   <li>JaegerPropagator can be added to DefaultContextPropagators only because it extracts both\n+   *       Context and Baggage. Otherwise in TraceMultiPropagator it may not get a chance to extract\n+   *       any existing Baggage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjQxMjE4OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDoxNTowMlrOHyZNpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzoxNzoxM1rOHzChgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw==", "bodyText": "I don't see mention of supporting case-insensitivity in the spec, I would suggest leaving this out?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522603943", "createdAt": "2020-11-13T04:15:02Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk0NjIxNA==", "bodyText": "it was from beginning I suppose, didn't want change behavior", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522946214", "createdAt": "2020-11-13T13:22:17Z", "author": {"login": "malafeev"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw=="}, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MDc3MQ==", "bodyText": "ok, I created #1632 to track this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r523280771", "createdAt": "2020-11-13T23:17:13Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwMzk0Mw=="}, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjQxNTkyOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDoxNTo0NlrOHyZQCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDoxNTo0NlrOHyZQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDU1NA==", "bodyText": "doesn't seem important enough to log by default (default is info)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604554", "createdAt": "2020-11-13T04:15:46Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjQxNjc3OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDoxNTo1NVrOHyZQmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDoxNTo1NVrOHyZQmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYwNDY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");\n          \n          \n            \n                  log.debug(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522604698", "createdAt": "2020-11-13T04:15:55Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/PropagatorsInitializer.java", "diffHunk": "@@ -50,15 +70,31 @@ public static void initializePropagators(List<String> propagators) {\n       OpenTelemetry.setGlobalPropagators(\n           DefaultContextPropagators.builder()\n               .addTextMapPropagator(HttpTraceContext.getInstance())\n+              .addTextMapPropagator(W3CBaggagePropagator.getInstance())\n               .build());\n       return;\n     }\n \n     DefaultContextPropagators.Builder propagatorsBuilder = DefaultContextPropagators.builder();\n \n     List<TextMapPropagator> textPropagators = new ArrayList<>(propagators.size());\n-    for (String propagatorId : propagators) {\n-      TextMapPropagator textPropagator = TEXTMAP_PROPAGATORS.get(propagatorId.trim().toLowerCase());\n+    List<String> propagatorIds =\n+        propagators.stream()\n+            .map(propagator -> propagator.trim().toLowerCase())\n+            .collect(Collectors.toList());\n+\n+    if (propagatorIds.remove(JAEGER)) {\n+      // Jaeger handles both tracing and baggage\n+      propagatorsBuilder.addTextMapPropagator(JaegerPropagator.getInstance());\n+      log.info(\"Added \" + JaegerPropagator.getInstance() + \" propagator\");\n+    }\n+    if (propagatorIds.remove(BAGGAGE)) {\n+      propagatorsBuilder.addTextMapPropagator(W3CBaggagePropagator.getInstance());\n+      log.info(\"Added \" + W3CBaggagePropagator.getInstance() + \" propagator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjUwMjQwOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozNDowM1rOHyaJaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozNDowM1rOHyaJaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYxOTI0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext,baggage` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |\n          \n          \n            \n            | otel.propagators | OTEL_PROPAGATORS     | The propagators to be used. Use a comma-separated list for multiple propagators. Supported propagators are `tracecontext`, `baggage`, `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. Default is `tracecontext,baggage` (W3C). |", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522619243", "createdAt": "2020-11-13T04:34:03Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-If set to a comma-separated list of the values, the multi-propagator is used. The multi-propagator attempts\n-to extract the context from incoming requests using each of the configured propagator formats (in order),\n-stopping after the first successful context extraction. The multi-propagator injects the context into\n-outgoing requests using all the configured propagator formats.\n+If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n+and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n+to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n+The multi-propagator attempts to extract the context from incoming requests using each of the \n+configured propagator formats (in order), stopping after the first successful context extraction. \n+The multi-propagator injects the context into outgoing requests using all the configured propagator \n+formats.\n \n | System property  | Environment variable | Description                                                                                                     |\n |------------------|----------------------|-----------------------------------------------------------------------------------------------------------------|\n-| otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |\n+| otel.propagators | OTEL_PROPAGATORS     | Default is `tracecontext,baggage` (W3C). Other supported values are `b3`, `b3single`, `jaeger`, `ottracer`, and `xray`. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjUxODg2OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozNzozMVrOHyaUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDozNzozMVrOHyaUEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMTk3MA==", "bodyText": "I think this is going to be really confusing for users, suggest we just leave it out, and if anyone asks, refer them to the spec.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n          \n          \n            \n            and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n          \n          \n            \n            to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n          \n          \n            \n            The multi-propagator attempts to extract the context from incoming requests using each of the \n          \n          \n            \n            configured propagator formats (in order), stopping after the first successful context extraction. \n          \n          \n            \n            The multi-propagator injects the context into outgoing requests using all the configured propagator \n          \n          \n            \n            formats.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522621970", "createdAt": "2020-11-13T04:37:31Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-If set to a comma-separated list of the values, the multi-propagator is used. The multi-propagator attempts\n-to extract the context from incoming requests using each of the configured propagator formats (in order),\n-stopping after the first successful context extraction. The multi-propagator injects the context into\n-outgoing requests using all the configured propagator formats.\n+If set to a comma-separated list of the values, the multi-propagator is used. Special case is `baggage` \n+and `jaeger` propagators: they cannot be added to multi-propagator because they may not get a chance \n+to extract any existing Baggage, instead they can be added only to DefaultContextPropagators. \n+The multi-propagator attempts to extract the context from incoming requests using each of the \n+configured propagator formats (in order), stopping after the first successful context extraction. \n+The multi-propagator injects the context into outgoing requests using all the configured propagator \n+formats.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjU2ODkxOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDo0NjowOFrOHya2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDo0NjowOFrOHya2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzMDc4MQ==", "bodyText": "also change section title to \"Propagators\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The propagator controls which distributed tracing header format is used.\n          \n          \n            \n            The propagators determine which distributed tracing header formats are used, and which baggage propagation header formats are used.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1545#discussion_r522630781", "createdAt": "2020-11-13T04:46:08Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -150,14 +150,17 @@ attributes to stdout. It's mainly used for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c08df3206a36545cdf20a2134bf5b3cd41311ae7"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4519, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}