{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDE3Mzc3", "number": 634, "title": "Server spans", "bodyText": "With this PR all instrumentations that create SERVER spans use HttpServerTracer and its subclasses.\nSome subclasses of HttpServerDecorator still exist, but they are used in instrumentation which don't create SERVER spans at all. I have left them as they are, but propose to replace them with BaseDecorator.", "createdAt": "2020-07-05T14:47:51Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634", "merged": true, "mergeCommit": {"oid": "3a4470f8004fefed592a68e174809612fbd8267e"}, "closed": true, "closedAt": "2020-07-07T10:48:53Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcx8Aa2AH2gAyNDQ0NDE3Mzc3OmVhNmE0ODZmM2ZlYjQyOGMwZDNkMWEyZjI2N2RiY2FlMTY4MjNlNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyhosugH2gAyNDQ0NDE3Mzc3OmJlYjFiYTg5MjI4Y2Y1NTE0ZTlmOGQwMTdjOWNkN2U2YjY3ODE1MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea6a486f3feb428c0d3d1a2f267dbcae16823e56", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea6a486f3feb428c0d3d1a2f267dbcae16823e56", "committedDate": "2020-07-05T12:43:08Z", "message": "Milestone 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f6e51915faf23d171fee04ae02a7e5028c415b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/03f6e51915faf23d171fee04ae02a7e5028c415b", "committedDate": "2020-07-05T12:43:30Z", "message": "Netty 4.1 done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc701d53dc8641760f5730c9e32f0980aead64c5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc701d53dc8641760f5730c9e32f0980aead64c5", "committedDate": "2020-07-05T12:43:30Z", "message": "Netty 4.0 done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b03b5ee5efbf2314ababd0c246cbd195c8b613df", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b03b5ee5efbf2314ababd0c246cbd195c8b613df", "committedDate": "2020-07-05T12:43:30Z", "message": "Netty 3.8 done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc92ad77c46794b5fbe7cfc48cf40c5d888cb91", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0fc92ad77c46794b5fbe7cfc48cf40c5d888cb91", "committedDate": "2020-07-05T12:44:07Z", "message": "All tests pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5b40dc29ccec974bff316ed522be9d6c726d7b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a5b40dc29ccec974bff316ed522be9d6c726d7b", "committedDate": "2020-07-05T12:44:07Z", "message": "Test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6db0db86c2b32a29f4e37b0bb21f7bb87055198", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e6db0db86c2b32a29f4e37b0bb21f7bb87055198", "committedDate": "2020-07-05T14:42:45Z", "message": "Last proper server tracers done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf7819035bd4f62f3c891fce1a6a551337b7740", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2bf7819035bd4f62f3c891fce1a6a551337b7740", "committedDate": "2020-07-05T15:04:03Z", "message": "Format fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39d7338cca36cd7a6f01e655b140a6517add32ea", "committedDate": "2020-07-05T18:29:50Z", "message": "Tests fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzczMTA3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#pullrequestreview-442773107", "createdAt": "2020-07-06T04:53:42Z", "commit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo1Mzo0MlrOGtIxJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDo1Mzo0MlrOGtIxJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4Mjc1OQ==", "bodyText": "Do we need to check whether there is a current CONTEXT_SERVER_SPAN_KEY to prevent duplicate server spans here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r449982759", "createdAt": "2020-07-06T04:53:42Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -56,25 +59,31 @@ public HttpServerTracer() {\n \n   protected abstract String getVersion();\n \n-  public Span startSpan(REQUEST request, Method origin, String originType) {\n+  public Span startSpan(REQUEST request, CONNECTION connection, Method origin, String originType) {\n+    String spanName = spanNameForMethod(origin);\n+    return startSpan(request, connection, spanName, originType);\n+  }\n+\n+  public Span startSpan(\n+      REQUEST request, CONNECTION connection, String spanName, String originType) {\n     final Span.Builder builder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDMyMTE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#pullrequestreview-443432115", "createdAt": "2020-07-06T21:55:10Z", "commit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1NToxMFrOGtoVYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDo0NjoxNFrOGtrdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5OTkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".span\");\n          \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".context\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450499936", "createdAt": "2020-07-06T21:55:10Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_0/AttributeKeys.java", "diffHunk": "@@ -39,7 +40,7 @@\n   public static final AttributeKey<Span> PARENT_CONNECT_SPAN_ATTRIBUTE_KEY =\n       attributeKey(\"io.opentelemetry.auto.instrumentation.netty.v4_0.parent.connect.span\");\n \n-  public static final AttributeKey<Span> SERVER_ATTRIBUTE_KEY =\n+  public static final AttributeKey<Context> SERVER_ATTRIBUTE_KEY =\n       attributeKey(HttpServerTracingHandler.class.getName() + \".span\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyODE4Mw==", "bodyText": "i'm not opposed to this change, but curious your reason?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450528183", "createdAt": "2020-07-06T23:22:05Z", "author": {"login": "trask"}, "path": "instrumentation/akka-http-10.0/src/lagomTest/groovy/LagomTest.groovy", "diffHunk": "@@ -124,7 +123,7 @@ class LagomTest extends AgentTestRunner {\n     }\n   }\n \n-  String expectedOperationName(String method) {\n-    return method != null ? \"HTTP $method\" : HttpServerDecorator.DEFAULT_SPAN_NAME\n+  String expectedOperationName() {\n+    return \"akka.request\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMDQ2OQ==", "bodyText": "there's several of call sites that pass 500, maybe an overload that defaults to 500?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450530469", "createdAt": "2020-07-06T23:29:38Z", "author": {"login": "trask"}, "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerInstrumentation.java", "diffHunk": "@@ -149,16 +110,13 @@ public SyncWrapper(final Function1<HttpRequest, HttpResponse> userHandler) {\n \n     @Override\n     public HttpResponse apply(final HttpRequest request) {\n-      final SpanWithScope spanWithScope = WrapperHelper.createSpan(request);\n-      final Span span = spanWithScope.getSpan();\n-      try {\n+      Span span = TRACER.startSpan(request, request, \"akka.request\", null);\n+      try (Scope ignored = TRACER.startScope(span, request)) {\n         final HttpResponse response = userHandler.apply(request);\n-        spanWithScope.closeScope();\n-        WrapperHelper.finishSpan(span, response);\n+        TRACER.end(span, response.status().intValue());\n         return response;\n       } catch (final Throwable t) {\n-        spanWithScope.closeScope();\n-        WrapperHelper.finishSpan(span, t);\n+        TRACER.endExceptionally(span, t, 500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MTUzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns context stored to the given storage by {@link #attachServerSpanContext(Context,\n          \n          \n            \n               * STORAGE)}.\n          \n          \n            \n               * Returns context stored to the given request-response-loop storage by {@link #attachServerSpanContext(Context,\n          \n          \n            \n               * STORAGE)}.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450541533", "createdAt": "2020-07-07T00:08:50Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */\n+  protected abstract void attachServerSpanContext(Context context, STORAGE storage);\n \n   /**\n-   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   * Returns context stored to the given storage by {@link #attachServerSpanContext(Context,\n+   * STORAGE)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MjM2MQ==", "bodyText": "to self doc that it doesn't use storage\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n          \n          \n            \n            public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, Void> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542361", "createdAt": "2020-07-07T00:11:52Z", "author": {"login": "trask"}, "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Mjc0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}\n          \n          \n            \n              protected void attachServerSpanContext(Context context, Void storage) {}", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542748", "createdAt": "2020-07-07T00:13:21Z", "author": {"login": "trask"}, "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n+  public static final AkkaHttpServerTracer TRACER = new AkkaHttpServerTracer();\n \n   @Override\n   protected String method(final HttpRequest httpRequest) {\n     return httpRequest.method().value();\n   }\n \n+  @Override\n+  protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Mjc5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Context getServerSpanContext(HttpRequest httpRequest) {\n          \n          \n            \n              public Context getServerSpanContext(Void storage) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450542797", "createdAt": "2020-07-07T00:13:31Z", "author": {"login": "trask"}, "path": "instrumentation/akka-http-10.0/src/main/java/io/opentelemetry/auto/instrumentation/akkahttp/AkkaHttpServerTracer.java", "diffHunk": "@@ -17,25 +17,28 @@\n package io.opentelemetry.auto.instrumentation.akkahttp;\n \n import akka.http.scaladsl.model.HttpRequest;\n-import akka.http.scaladsl.model.HttpResponse;\n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerDecorator;\n-import io.opentelemetry.trace.Tracer;\n+import io.grpc.Context;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpServerTracer;\n+import io.opentelemetry.context.propagation.HttpTextFormat.Getter;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class AkkaHttpServerDecorator\n-    extends HttpServerDecorator<HttpRequest, HttpRequest, HttpResponse> {\n-  public static final AkkaHttpServerDecorator DECORATE = new AkkaHttpServerDecorator();\n-\n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracerProvider().get(\"io.opentelemetry.auto.akka-http-10.0\");\n+public class AkkaHttpServerTracer extends HttpServerTracer<HttpRequest, HttpRequest, HttpRequest> {\n+  public static final AkkaHttpServerTracer TRACER = new AkkaHttpServerTracer();\n \n   @Override\n   protected String method(final HttpRequest httpRequest) {\n     return httpRequest.method().value();\n   }\n \n+  @Override\n+  protected void attachServerSpanContext(Context context, HttpRequest httpRequest) {}\n+\n+  @Override\n+  public Context getServerSpanContext(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0NjAyMg==", "bodyText": "can merge inner try/catch into the outer try-with-resources (and i think same in v4_0 and v4_1 copies)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450546022", "createdAt": "2020-07-07T00:25:43Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/HttpServerRequestTracingHandler.java", "diffHunk": "@@ -48,43 +45,25 @@ public void messageReceived(final ChannelHandlerContext ctx, final MessageEvent\n         contextStore.putIfAbsent(ctx.getChannel(), ChannelTraceContext.Factory.INSTANCE);\n \n     if (!(msg.getMessage() instanceof HttpRequest)) {\n-      final Span span = channelTraceContext.getServerSpan();\n-      if (span == null) {\n-        ctx.sendUpstream(msg); // superclass does not throw\n+      Context serverSpanContext = TRACER.getServerSpanContext(channelTraceContext);\n+      if (serverSpanContext == null) {\n+        ctx.sendUpstream(msg);\n       } else {\n-        try (final Scope scope = TRACER.withSpan(span)) {\n-          ctx.sendUpstream(msg); // superclass does not throw\n+        try (final Scope ignored = ContextUtils.withScopedContext(serverSpanContext)) {\n+          ctx.sendUpstream(msg);\n         }\n       }\n       return;\n     }\n \n     final HttpRequest request = (HttpRequest) msg.getMessage();\n \n-    final Span.Builder spanBuilder =\n-        TRACER.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(SERVER);\n-    final SpanContext extractedContext = extract(request.headers(), GETTER);\n-    if (extractedContext.isValid()) {\n-      spanBuilder.setParent(extractedContext);\n-    } else {\n-      // explicitly setting \"no parent\" in case a span was propagated to this thread\n-      // by the java-concurrent instrumentation when the thread was started\n-      spanBuilder.setNoParent();\n-    }\n-    final Span span = spanBuilder.startSpan();\n-    try (final Scope scope = TRACER.withSpan(span)) {\n-      DECORATE.afterStart(span);\n-      DECORATE.onConnection(span, ctx.getChannel());\n-      DECORATE.onRequest(span, request);\n-\n-      channelTraceContext.setServerSpan(span);\n-\n+    Span span = TRACER.startSpan(request, ctx.getChannel(), \"netty.request\", null);\n+    try (final Scope ignored = TRACER.startScope(span, channelTraceContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0NzA3Mw==", "bodyText": "can be single-level try, e.g. (and same in v4_0 and v4_1 copies)\n    Span span = TracingContextUtils.getSpan(context);\n    try (final Scope ignored = ContextUtils.withScopedContext(context)) {\n      ctx.write(msg, prm);\n    } catch (final Throwable throwable) {\n      TRACER.endExceptionally(span, throwable, 500);\n      throw throwable;\n    }\n    TRACER.end(span, ((HttpResponse) msg).status().code());", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450547073", "createdAt": "2020-07-07T00:29:33Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/auto/instrumentation/netty/v3_8/server/HttpServerResponseTracingHandler.java", "diffHunk": "@@ -44,26 +45,21 @@ public void writeRequested(final ChannelHandlerContext ctx, final MessageEvent m\n     final ChannelTraceContext channelTraceContext =\n         contextStore.putIfAbsent(ctx.getChannel(), ChannelTraceContext.Factory.INSTANCE);\n \n-    final Span span = channelTraceContext.getServerSpan();\n-    if (span == null || !(msg.getMessage() instanceof HttpResponse)) {\n+    final Context context = TRACER.getServerSpanContext(channelTraceContext);\n+    if (context == null || !(msg.getMessage() instanceof HttpResponse)) {\n       ctx.sendDownstream(msg);\n       return;\n     }\n \n-    try (final Scope scope = TRACER.withSpan(span)) {\n-      final HttpResponse response = (HttpResponse) msg.getMessage();\n-\n+    try (final Scope ignored = ContextUtils.withScopedContext(context)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0Nzg0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".span\");\n          \n          \n            \n                  attributeKey(HttpServerTracingHandler.class.getName() + \".context\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450547846", "createdAt": "2020-07-07T00:32:35Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/AttributeKeys.java", "diffHunk": "@@ -44,10 +45,10 @@\n    * io.opentelemetry.auto.instrumentation.ratpack.server.TracingHandler, so if this changes, that\n    * must also change.\n    */\n-  // TODO understand and change to context\n-  public static final AttributeKey<Span> SERVER_ATTRIBUTE_KEY =\n+  public static final AttributeKey<Context> SERVER_ATTRIBUTE_KEY =\n       attributeKey(HttpServerTracingHandler.class.getName() + \".span\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0ODg1Mg==", "bodyText": "i think all these server helpers can go away", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450548852", "createdAt": "2020-07-07T00:36:59Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -69,7 +69,7 @@ public ChannelFutureListenerInstrumentation() {\n       packageName + \".client.HttpClientResponseTracingHandler\",\n       packageName + \".client.HttpClientTracingHandler\",\n       // server helpers\n-      packageName + \".server.NettyHttpServerDecorator\",\n+      packageName + \".server.NettyHttpServerTracer\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0OTAzOA==", "bodyText": "i think this is a good catch, it seems to me this instrumentation only applies to netty client, should we move it to the client subpackage?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450549038", "createdAt": "2020-07-07T00:37:44Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/auto/instrumentation/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n import com.google.auto.service.AutoService;\n import io.netty.channel.ChannelFuture;\n-import io.opentelemetry.auto.instrumentation.netty.v4_1.server.NettyHttpServerDecorator;\n+import io.opentelemetry.auto.instrumentation.netty.v4_1.client.NettyHttpClientDecorator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MDM2MQ==", "bodyText": "trying to differentiate more between the different storages\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Stores given context in the given storage in implementation specific way. */\n          \n          \n            \n              /** Stores given context in the request-response-loop storage in implementation specific way. */```", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450550361", "createdAt": "2020-07-07T00:43:14Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU1MTE0Mw==", "bodyText": "i found \"server span context\" a bit confusing. i got used to it by the end of reviewing the PR, but maybe just \"server context\"?\nand this method, being defined in HttpServerTracer could be just\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract void attachServerSpanContext(Context context, STORAGE storage);\n          \n          \n            \n              protected abstract void attachContext(Context context, STORAGE storage);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#discussion_r450551143", "createdAt": "2020-07-07T00:46:14Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -218,23 +234,24 @@ private void setStatus(Span span, int status) {\n     span.setStatus(HttpStatusConverter.statusFromHttpStatus(status));\n   }\n \n-  protected abstract Integer peerPort(REQUEST request);\n+  protected abstract Integer peerPort(CONNECTION connection);\n \n-  protected abstract String peerHostIP(REQUEST request);\n+  protected abstract String peerHostIP(CONNECTION connection);\n \n   protected abstract HttpTextFormat.Getter<REQUEST> getGetter();\n \n   protected abstract URI url(REQUEST request) throws URISyntaxException;\n \n   protected abstract String method(REQUEST request);\n \n-  /** Stores given context in the given request in implementation specific way. */\n-  protected abstract void attachContextToRequest(Context context, REQUEST request);\n+  /** Stores given context in the given storage in implementation specific way. */\n+  protected abstract void attachServerSpanContext(Context context, STORAGE storage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d7338cca36cd7a6f01e655b140a6517add32ea"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb260334037ad60fde5378ca2ce0dc32c4aee9dd", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb260334037ad60fde5378ca2ce0dc32c4aee9dd", "committedDate": "2020-07-07T07:07:49Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNjIwNzU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/634#pullrequestreview-443620757", "createdAt": "2020-07-07T07:15:29Z", "commit": {"oid": "bb260334037ad60fde5378ca2ce0dc32c4aee9dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beb1ba89228cf5514e9f8d017c9cd7e6b6781515", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/beb1ba89228cf5514e9f8d017c9cd7e6b6781515", "committedDate": "2020-07-07T08:33:37Z", "message": "Polish"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3047, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}