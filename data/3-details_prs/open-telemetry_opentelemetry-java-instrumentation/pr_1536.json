{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjcyNjY4", "number": 1536, "title": "AWS lambda instrumentation - HTTP context propagation", "bodyText": "Resolves #1535\nSketch of an idea - for streaming handler / wrapper only. If the idea holds, will provide also for instrumentation part and regular handler / wrapper (in applicable cases).", "createdAt": "2020-10-30T20:36:48Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536", "merged": true, "mergeCommit": {"oid": "09fda6e52a28a4a4aaa2a50a419c7fba1dbc14a4"}, "closed": true, "closedAt": "2020-11-09T13:59:34Z", "author": {"login": "kubawach"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYdaSvgFqTUyMTMzMjM2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABda0DUIgFqTUyNjIwODY4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzMyMzY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#pullrequestreview-521332369", "createdAt": "2020-11-02T05:00:42Z", "commit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowMDo0MlrOHr2VDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowNzoxOVrOHr2aMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MDk0Mg==", "bodyText": "This is unfortunate but seems to be the only way to support streams, oh well.\nFor non-streams, will we use the event types?\nhttps://github.com/aws/aws-lambda-java-libs/blob/master/aws-lambda-java-events/src/main/java/com/amazonaws/services/lambda/runtime/events/APIGatewayProxyRequestEvent.java", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515740942", "createdAt": "2020-11-02T05:00:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import java.io.InputStream;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private final Headers headers;\n+\n+  private ApiGatewayProxyRequest(Headers headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTI0OQ==", "bodyText": "Do you think it's possible to do this only if the propagator is configured?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515741249", "createdAt": "2020-11-02T05:02:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "diffHunk": "@@ -50,11 +51,16 @@ protected TracingRequestStreamHandler(AwsLambdaTracer tracer) {\n   }\n \n   @Override\n-  public final void handleRequest(InputStream input, OutputStream output, Context context)\n+  public void handleRequest(InputStream input, OutputStream output, Context context)\n       throws IOException {\n-    Span span = tracer.startSpan(context, Kind.SERVER);\n+\n+    InputStreamFactory streamFactory = InputStreamFactory.forStream(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjI1OQ==", "bodyText": "Though I wonder if supporting stream is actually important. Looking at this, it seems like the body is encoded into JSON anyways so there is no benefit in the stream handler - so maybe it's a reasonable and practical limitation for us to just detect that event type?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515742259", "createdAt": "2020-11-02T05:07:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import java.io.InputStream;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private final Headers headers;\n+\n+  private ApiGatewayProxyRequest(Headers headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MDk0Mg=="}, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/90009c342b4472dc510792b43c75b7c3c1f150a0", "committedDate": "2020-10-30T20:25:25Z", "message": "AWS lambda instrumentation - HTTP context propagation"}, "afterCommit": {"oid": "83df9538fc605a7c7d0546d774dd0c02f22cca69", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83df9538fc605a7c7d0546d774dd0c02f22cca69", "committedDate": "2020-11-02T16:11:27Z", "message": "AWS lambda instrumentation - HTTP context propagation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c10d92d5a8b128111a328000c9156e059f28afd", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c10d92d5a8b128111a328000c9156e059f28afd", "committedDate": "2020-11-03T16:49:11Z", "message": "code review, added tests for stream wrapper"}, "afterCommit": {"oid": "7df0bc081b4007b273876c67aec692b777efe345", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7df0bc081b4007b273876c67aec692b777efe345", "committedDate": "2020-11-03T22:12:56Z", "message": "code review, added tests for stream wrapper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7df0bc081b4007b273876c67aec692b777efe345", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7df0bc081b4007b273876c67aec692b777efe345", "committedDate": "2020-11-03T22:12:56Z", "message": "code review, added tests for stream wrapper"}, "afterCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/26001403facaef6cef2861d6ae40fad5a8456e27", "committedDate": "2020-11-03T22:20:08Z", "message": "code review, added tests for stream wrapper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDM1NjI2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#pullrequestreview-523035626", "createdAt": "2020-11-04T04:26:30Z", "commit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyNjozMFrOHtIthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyODowOVrOHtIvMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDY5NA==", "bodyText": "I don't think we need afterburner since we're not mapping to POJO, just reading the tree.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517090694", "createdAt": "2020-11-04T04:26:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "diffHunk": "@@ -17,8 +17,12 @@ apply from: \"$rootDir/gradle/instrumentation-library.gradle\"\n \n dependencies {\n   library group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.0.0'\n+  library group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-core', version: '1.5.2'\n+\n   compileOnly deps.opentelemetrySdk\n \n+  compile('com.fasterxml.jackson.core:jackson-databind:2.10.3', 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.10')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MTEyMA==", "bodyText": "IIUC, if the x-ray propagator is configured, fields wouldn't be empty but in that case we want to read the env var. Should we compare to its fields?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517091120", "createdAt": "2020-11-04T04:28:09Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import io.opentelemetry.api.OpenTelemetry;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.apache.commons.io.IOUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+abstract class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private static boolean noHttpPropagationNeeded() {\n+    return OpenTelemetry.getGlobalPropagators().getTextMapPropagator().fields().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ce39e147db3d282e3c6dee0dd84d0ab4e69d32c", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8ce39e147db3d282e3c6dee0dd84d0ab4e69d32c", "committedDate": "2020-11-04T11:36:23Z", "message": "code review - recpects XRay propagation, tests added"}, "afterCommit": {"oid": "ad12340a831fb02d910a90fab9176d301ac679e5", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad12340a831fb02d910a90fab9176d301ac679e5", "committedDate": "2020-11-04T12:50:37Z", "message": "code review - recpects XRay propagation, tests added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629a32288bcb3f54cb581c59b5d47e7c4d52e576", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/629a32288bcb3f54cb581c59b5d47e7c4d52e576", "committedDate": "2020-11-06T17:18:41Z", "message": "AWS lambda instrumentation - HTTP context propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a36b620547bf545c1758a963dd9f84506465e5", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b2a36b620547bf545c1758a963dd9f84506465e5", "committedDate": "2020-11-06T17:18:44Z", "message": "code review, added tests for stream wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf71391358f26f5ba21eeb23481c8876a343209d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf71391358f26f5ba21eeb23481c8876a343209d", "committedDate": "2020-11-06T17:18:44Z", "message": "code review - recpects XRay propagation, tests added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f308de1dbe74f1da7ae5b4c72f710a563eeade5a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f308de1dbe74f1da7ae5b4c72f710a563eeade5a", "committedDate": "2020-11-06T19:12:57Z", "message": "rebase to master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad12340a831fb02d910a90fab9176d301ac679e5", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad12340a831fb02d910a90fab9176d301ac679e5", "committedDate": "2020-11-04T12:50:37Z", "message": "code review - recpects XRay propagation, tests added"}, "afterCommit": {"oid": "f308de1dbe74f1da7ae5b4c72f710a563eeade5a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f308de1dbe74f1da7ae5b4c72f710a563eeade5a", "committedDate": "2020-11-06T19:12:57Z", "message": "rebase to master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTE3MTM3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#pullrequestreview-526117137", "createdAt": "2020-11-09T10:30:43Z", "commit": {"oid": "f308de1dbe74f1da7ae5b4c72f710a563eeade5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MjA4Njg0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#pullrequestreview-526208684", "createdAt": "2020-11-09T12:37:57Z", "commit": {"oid": "f308de1dbe74f1da7ae5b4c72f710a563eeade5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2439, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}