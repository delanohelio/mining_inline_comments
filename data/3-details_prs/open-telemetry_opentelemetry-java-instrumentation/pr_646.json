{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NzM5OTgx", "number": 646, "title": "Merge changes from dd-trace-java 0.57.0", "bodyText": "https://github.com/DataDog/dd-trace-java/releases/tag/v0.57.0", "createdAt": "2020-07-07T22:49:28Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646", "merged": true, "mergeCommit": {"oid": "145c6752c8baed5d0f5212711ec6ea3523930059"}, "closed": true, "closedAt": "2020-07-23T20:58:47Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyxLY4gFqTQ0NDM3MzM5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc314MkAFqTQ1NDQ5MDI3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzczMzky", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#pullrequestreview-444373392", "createdAt": "2020-07-08T02:38:29Z", "commit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjozODoyOVrOGuWCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjozODoyOVrOGuWCSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODcxMw==", "bodyText": "Aren't these so broad they'll result in false positives? I notice it's not a new change but noticed it now, especially since I had the same question about the clojure patterns, which also seem like they have a higher chance of colliding with a user class than seems safe.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451248713", "createdAt": "2020-07-08T02:38:29Z", "author": {"login": "anuraaga"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+        break;\n+      case 'b' - 'a':\n+        break;\n+      case 'c' - 'a':\n+        if (name.startsWith(\"com.\")) {\n+          if (name.startsWith(\"com.p6spy.\")\n+              || name.startsWith(\"com.dynatrace.\")\n+              || name.startsWith(\"com.jloadtrace.\")\n+              || name.startsWith(\"com.appdynamics.\")\n+              || name.startsWith(\"com.singularity.\")\n+              || name.startsWith(\"com.jinspired.\")\n+              || name.startsWith(\"com.intellij.rt.debugger.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"com.sun.\")) {\n+            return !name.startsWith(\"com.sun.messaging.\")\n+                && !name.startsWith(\"com.sun.jersey.api.client\");\n+          }\n+          if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n+            return true;\n+          }\n+        }\n+        if (name.startsWith(\"clojure.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'd' - 'a':\n+        break;\n+      case 'e' - 'a':\n+        break;\n+      case 'f' - 'a':\n+        break;\n+      case 'g' - 'a':\n+        break;\n+      case 'h' - 'a':\n+        break;\n+      case 'i' - 'a':\n+        if (name.startsWith(\"io.opentelemetry.auto.\")) {\n+          // FIXME: We should remove this once\n+          // https://github.com/raphw/byte-buddy/issues/558 is fixed\n+          if (name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n+              || name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n+            return false;\n+          }\n+          return true;\n+        }\n+        if (name.startsWith(\"io.micronaut.tracing.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'j' - 'a':\n+        if (name.startsWith(\"jdk.\")) {\n+          return true;\n+        }\n+        if (name.startsWith(\"java.\")) {\n+          // allow exception profiling instrumentation\n+          if (name.equals(\"java.lang.Throwable\")) {\n+            return false;\n+          }\n+          if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n+            return false;\n+          }\n+          if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n+            return false;\n+          }\n+          // Concurrent instrumentation modifies the structure of\n+          // Cleaner class incompatibly with java9+ modules.\n+          // Working around until a long-term fix for modules can be\n+          // put in place.\n+          return !name.startsWith(\"java.util.logging.\")\n+              || name.equals(\"java.util.logging.LogManager$Cleaner\");\n+        }\n+        break;\n+      case 'k' - 'a':\n+        break;\n+      case 'l' - 'a':\n+        break;\n+      case 'm' - 'a':\n+        break;\n+      case 'n' - 'a':\n+        if (name.startsWith(\"net.bytebuddy.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'o' - 'a':\n+        if (name.startsWith(\"org.\")) {\n+          if (name.startsWith(\"org.aspectj.\") || name.startsWith(\"org.jinspired.\")) {\n+            return true;\n+          }\n+          // groovy\n+          if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"org.codehaus.groovy.\")) {\n+            // We seem to instrument some classes in runtime\n+            return !name.startsWith(\"org.codehaus.groovy.runtime.\");\n+          }\n+        }\n+        break;\n+      case 'p' - 'a':\n+        break;\n+      case 'q' - 'a':\n+        break;\n+      case 'r' - 'a':\n+        break;\n+      case 's' - 'a':\n+        if (name.startsWith(\"sun.\")) {\n+          return !name.startsWith(\"sun.net.www.protocol.\")\n+              && !name.startsWith(\"sun.rmi.server\")\n+              && !name.startsWith(\"sun.rmi.transport\")\n+              && !name.equals(\"sun.net.www.http.HttpClient\");\n+        }\n+        break;\n+      default:\n     }\n \n-    if (name.startsWith(\"java.\")) {\n-      if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n-        return false;\n+    final int firstDollar = name.indexOf('$');\n+    if (firstDollar > -1) {\n+      // clojure class patterns\n+      if (name.startsWith(\"loader__\", firstDollar + 1)) {\n+        return true;\n       }\n-      if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n-        return false;\n-      }\n-      // Concurrent instrumentation modifies the structure of\n-      // Cleaner class incompatibly with java9+ modules.\n-      // Working around until a long-term fix for modules can be\n-      // put in place.\n-      if (name.startsWith(\"java.util.logging.\")\n-          && !name.equals(\"java.util.logging.LogManager$Cleaner\")) {\n-        return false;\n+      int dollar = firstDollar;\n+      while (dollar > -1) {\n+        if (name.startsWith(\"fn__\", dollar + 1) || name.startsWith(\"reify__\", dollar + 1)) {\n+          return true;\n+        }\n+        dollar = name.indexOf('$', dollar + 1);\n       }\n \n-      return true;\n-    }\n-\n-    if (name.startsWith(\"com.sun.\")) {\n-      if (name.startsWith(\"com.sun.messaging.\") || name.startsWith(\"com.sun.jersey.api.client\")) {\n-        return false;\n+      if (name.contains(\"$JaxbAccessor\")\n+          || name.contains(\"CGLIB$$\")\n+          || name.contains(\"$__sisu\")\n+          || name.contains(\"$$EnhancerByProxool$$\")\n+          || name.startsWith(\"org.springframework.core.$Proxy\")) {\n+        return true;\n       }\n-\n-      return true;\n     }\n-\n-    if (name.startsWith(\"sun.\")) {\n-      if (name.startsWith(\"sun.net.www.protocol.\")\n-          || name.startsWith(\"sun.rmi.server\")\n-          || name.startsWith(\"sun.rmi.transport\")\n-          || name.equals(\"sun.net.www.http.HttpClient\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"org.slf4j.\")) {\n-      if (name.equals(\"org.slf4j.MDC\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.contains(\"$JaxbAccessor\")\n-        || name.contains(\"CGLIB$$\")\n-        || name.contains(\"javassist\")\n-        || name.contains(\".asm.\")\n-        || name.contains(\"$__sisu\")\n-        || name.contains(\"$$EnhancerByProxool$$\")\n-        || name.startsWith(\"org.springframework.core.$Proxy\")) {\n-      return true;\n-    }\n-\n-    if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n-      return true;\n-    }\n-\n-    if (!skipAdditionalLibraryMatcher && additionalLibraryIgnoreMatcher.matches(target)) {\n+    if (name.contains(\"javassist\") || name.contains(\".asm.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDUwNTE3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#pullrequestreview-444450517", "createdAt": "2020-07-08T06:37:58Z", "commit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNzo1OFrOGuaFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNzo1OFrOGuaFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ==", "bodyText": "Can we have at least documentation for this code? Every engineer that will see it will ask \"WTH is going on here?!\". Can some benchmark results be added as well to demonstrate that this is indeed required?\nThe comment on the corresponding upstream PR is confusing \"This currently actually increases the startup time\".", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451315031", "createdAt": "2020-07-08T06:37:58Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/602efd249d4680a43de04510cd13a063199d7e77", "committedDate": "2020-07-07T22:14:21Z", "message": "Ignore micronaut tracing classes (DataDog/dd-trace-java#1652)"}, "afterCommit": {"oid": "feda54d7bc757c0463973fea896de569f44bb20d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/feda54d7bc757c0463973fea896de569f44bb20d", "committedDate": "2020-07-23T06:31:57Z", "message": "Handle null header values (DataDog/dd-trace-java#1650)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzgxMzEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#pullrequestreview-454381310", "createdAt": "2020-07-23T18:13:43Z", "commit": {"oid": "feda54d7bc757c0463973fea896de569f44bb20d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "106b59f11ee0e554e4b5f66c20ceee40c8e1be6e", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/106b59f11ee0e554e4b5f66c20ceee40c8e1be6e", "committedDate": "2020-07-23T20:34:12Z", "message": "Exclude clojure standard library and anonymous functions from class transformation (DataDog/dd-trace-java#1642)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1941528cbaf54603341dcf87ab635a19f1e658", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ad1941528cbaf54603341dcf87ab635a19f1e658", "committedDate": "2020-07-23T20:34:12Z", "message": "MDC ThreadLocal initValue should be modifiable for SLF4j's copy-on-write thread context map (DataDog/dd-trace-java#1645)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95492b739257e6be0da09c3d6fb53d32901f0e10", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95492b739257e6be0da09c3d6fb53d32901f0e10", "committedDate": "2020-07-23T20:34:12Z", "message": "Handle null header values (DataDog/dd-trace-java#1650)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "feda54d7bc757c0463973fea896de569f44bb20d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/feda54d7bc757c0463973fea896de569f44bb20d", "committedDate": "2020-07-23T06:31:57Z", "message": "Handle null header values (DataDog/dd-trace-java#1650)"}, "afterCommit": {"oid": "95492b739257e6be0da09c3d6fb53d32901f0e10", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/95492b739257e6be0da09c3d6fb53d32901f0e10", "committedDate": "2020-07-23T20:34:12Z", "message": "Handle null header values (DataDog/dd-trace-java#1650)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDkwMjc2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#pullrequestreview-454490276", "createdAt": "2020-07-23T20:58:16Z", "commit": {"oid": "95492b739257e6be0da09c3d6fb53d32901f0e10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3063, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}