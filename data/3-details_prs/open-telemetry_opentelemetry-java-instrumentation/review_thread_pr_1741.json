{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzUzNDMw", "number": 1741, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0NzozNVrOE8P61A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0MzoyOVrOE8cPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjEwODM2OnYy", "diffSide": "RIGHT", "path": "instrumentation/hibernate/hibernate-4.0/src/main/java/io/opentelemetry/javaagent/instrumentation/hibernate/v4_0/TransactionInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0NzozNVrOH4QqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo1Mzo1N1rOH4Q81Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NTI3OQ==", "bodyText": "Probably all these comments can be replaced by more verbose javadoc of the base method?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1741#discussion_r528755279", "createdAt": "2020-11-23T14:47:35Z", "author": {"login": "iNikem"}, "path": "instrumentation/hibernate/hibernate-4.0/src/main/java/io/opentelemetry/javaagent/instrumentation/hibernate/v4_0/TransactionInstrumentation.java", "diffHunk": "@@ -28,7 +28,7 @@\n final class TransactionInstrumentation implements TypeInstrumentation {\n \n   @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n     // Optimization for expensive typeMatcher.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b203235de053a88c22d2ed747ddf4d0c001b22da"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2MDAyMQ==", "bodyText": "Honestly I completely forgot about these comments. I'll remove them.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1741#discussion_r528760021", "createdAt": "2020-11-23T14:53:57Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/hibernate/hibernate-4.0/src/main/java/io/opentelemetry/javaagent/instrumentation/hibernate/v4_0/TransactionInstrumentation.java", "diffHunk": "@@ -28,7 +28,7 @@\n final class TransactionInstrumentation implements TypeInstrumentation {\n \n   @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n     // Optimization for expensive typeMatcher.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NTI3OQ=="}, "originalCommit": {"oid": "b203235de053a88c22d2ed747ddf4d0c001b22da"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyNjg0OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TypeInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0MzoyOVrOH4jxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMzoxNFrOH44yJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODQ1MQ==", "bodyText": "github is not letting me make this as a \"suggestion\":\n   * An optimization to short circuit matching in the case where the instrumented library is not\n   * even present on the class path.\n   *\n   * <p>Most applications have only a small subset of libraries on their class path, so this ends up\n   * being a very useful optimization.\n   *\n   * <p>Some background on type matcher performance:\n   *\n   * <p>Type matchers that only match against the type name are fast, e.g. {@link\n   * ElementMatchers#named(String)}.\n   *\n   * <p>All other type matchers require some level of bytecode inspection, e.g. {@link\n   * ElementMatchers#isAnnotatedWith(ElementMatcher)}.\n   *\n   * <p>Type matchers that need to inspect the super class hierarchy are even more expensive, e.g.\n   * {@link AgentElementMatchers#implementsInterface(ElementMatcher)}. This is because they require\n   * inspecting multiple super classes/interfaces as well (which may not even be loaded yet in which\n   * case their bytecode has to be read and inspected).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1741#discussion_r529068451", "createdAt": "2020-11-23T23:43:29Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TypeInstrumentation.java", "diffHunk": "@@ -19,13 +19,18 @@\n public interface TypeInstrumentation {\n   /**\n    * A type instrumentation can implement this method to optimize an expensive {@link\n-   * #typeMatcher()} - usually {@link AgentElementMatchers#implementsInterface(ElementMatcher)} or\n-   * {@link AgentElementMatchers#extendsClass(ElementMatcher)}. In that case it's useful to check\n-   * that the classloader contains the class/interface that is being extended.\n+   * #typeMatcher()} - usually one that uses {@link AgentElementMatchers}, e.g. {@link\n+   * AgentElementMatchers#implementsInterface(ElementMatcher)} or {@link\n+   * AgentElementMatchers#extendsClass(ElementMatcher)}. Type matchers that check annotation\n+   * presence or class inheritance are particularly expensive for classloaders that do not contain\n+   * the base class/interface/annotation. To make this check significantly less expensive this\n+   * method can be used to verify that the classloader contains the class/interface that is being\n+   * extended.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff3a6322dbf84c63e77567717bb8bee7e557d57f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMjY0Ng==", "bodyText": "This is great, thanks!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1741#discussion_r529412646", "createdAt": "2020-11-24T10:23:14Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TypeInstrumentation.java", "diffHunk": "@@ -19,13 +19,18 @@\n public interface TypeInstrumentation {\n   /**\n    * A type instrumentation can implement this method to optimize an expensive {@link\n-   * #typeMatcher()} - usually {@link AgentElementMatchers#implementsInterface(ElementMatcher)} or\n-   * {@link AgentElementMatchers#extendsClass(ElementMatcher)}. In that case it's useful to check\n-   * that the classloader contains the class/interface that is being extended.\n+   * #typeMatcher()} - usually one that uses {@link AgentElementMatchers}, e.g. {@link\n+   * AgentElementMatchers#implementsInterface(ElementMatcher)} or {@link\n+   * AgentElementMatchers#extendsClass(ElementMatcher)}. Type matchers that check annotation\n+   * presence or class inheritance are particularly expensive for classloaders that do not contain\n+   * the base class/interface/annotation. To make this check significantly less expensive this\n+   * method can be used to verify that the classloader contains the class/interface that is being\n+   * extended.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODQ1MQ=="}, "originalCommit": {"oid": "ff3a6322dbf84c63e77567717bb8bee7e557d57f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4429, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}