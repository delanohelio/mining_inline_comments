{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMzQzNzc2", "number": 1380, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Nzo1OFrOEtDbmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyMDoxMFrOEuDEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc3NTk0OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Nzo1OFrOHgoKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozMToyOVrOHhKd0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDU5Mw==", "bodyText": "I could get around without introducing this class. In the AgentInstaller I have set the package prefixes to the config (in the static block) and then used the config in the classloader instrumentation. We could also remove the SPI so vendors would set the packages in the config - I don't like this since it easily opens the config to the consumers.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r503974593", "createdAt": "2020-10-13T13:57:58Z", "author": {"login": "pavolloffay"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.config;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MDYyOQ==", "bodyText": "can this go in javaagent-bootstrap near HelperResources which serves somewhat similar purpose?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504370629", "createdAt": "2020-10-14T02:57:38Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.config;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDU5Mw=="}, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjYxMA==", "bodyText": "When the class is in javaagent-bootstrap (and added to helper class names in the classloader instrumentation) the set prefixes set by the AgentInstaller are always null - the agent installer has a different instance as the instrumentation.\nLoading the providers from the instrumentation fails at build time on the muzzle size limit.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504532610", "createdAt": "2020-10-14T09:25:10Z", "author": {"login": "pavolloffay"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.config;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDU5Mw=="}, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNjUyOA==", "bodyText": "I have moved it to internal package in the same module.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504536528", "createdAt": "2020-10-14T09:31:29Z", "author": {"login": "pavolloffay"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.config;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDU5Mw=="}, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTMxMDg1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo1ODowNFrOHhAWLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjo1ODowNFrOHhAWLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MDczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The\n          \n          \n            \n             * {@link BootstrapPackagePrefixesHolder} is an utility class that holds package prefixes. The", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504370734", "createdAt": "2020-10-14T02:58:04Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.config;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} in an utility class that holds package prefixes. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTMxNjY5OnYy", "diffSide": "RIGHT", "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/javaagent/instrumentation/javaclassloader/ClassLoaderInstrumentation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzowMToxM1rOHhAZog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDowNzowMFrOHhBcFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MTYxOA==", "bodyText": "Is Config not available here? If it is, we can just use a config property instead of a separate SPI?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504371618", "createdAt": "2020-10-14T03:01:13Z", "author": {"login": "anuraaga"}, "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/javaagent/instrumentation/javaclassloader/ClassLoaderInstrumentation.java", "diffHunk": "@@ -88,7 +89,7 @@ public ClassLoaderInstrumentation() {\n         return null;\n       }\n       try {\n-        for (String prefix : Constants.BOOTSTRAP_PACKAGE_PREFIXES) {\n+        for (String prefix : BootstrapPackagePrefixesHolder.getBootstrapPrefixes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODQzMA==", "bodyText": "See @pavolloffay's #1380 (comment)\n\nWe could also remove the SPI so vendors would set the packages in the config - I don't like this since it easily opens the config to the consumers.\n\nI think I agree, I think nice to encapsulate vendor extension points in SPI, even if we end up with lots of them(?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504388430", "createdAt": "2020-10-14T04:06:03Z", "author": {"login": "trask"}, "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/javaagent/instrumentation/javaclassloader/ClassLoaderInstrumentation.java", "diffHunk": "@@ -88,7 +89,7 @@ public ClassLoaderInstrumentation() {\n         return null;\n       }\n       try {\n-        for (String prefix : Constants.BOOTSTRAP_PACKAGE_PREFIXES) {\n+        for (String prefix : BootstrapPackagePrefixesHolder.getBootstrapPrefixes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MTYxOA=="}, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODYzMQ==", "bodyText": "Sorry for missing the comment! SGTM", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504388631", "createdAt": "2020-10-14T04:07:00Z", "author": {"login": "anuraaga"}, "path": "instrumentation/java-classloader/src/main/java/io/opentelemetry/javaagent/instrumentation/javaclassloader/ClassLoaderInstrumentation.java", "diffHunk": "@@ -88,7 +89,7 @@ public ClassLoaderInstrumentation() {\n         return null;\n       }\n       try {\n-        for (String prefix : Constants.BOOTSTRAP_PACKAGE_PREFIXES) {\n+        for (String prefix : BootstrapPackagePrefixesHolder.getBootstrapPrefixes()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3MTYxOA=="}, "originalCommit": {"oid": "e9c94f7a12b5984a41ae809dd085fd7b9a4b24d0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDY0MDcxOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozODoyOFrOHhM3PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozODoyOFrOHhM3PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NTgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return bootstrapPackages.toArray(new String[] {});\n          \n          \n            \n                return bootstrapPackages.toArray(new String[0]);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504575805", "createdAt": "2020-10-14T10:38:28Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/AgentInstaller.java", "diffHunk": "@@ -207,6 +211,23 @@ private static void addByteBuddyRawSetting() {\n     return matcher;\n   }\n \n+  private static String[] loadBootstrapPackagesPrefixes() {\n+    List<String> bootstrapPackages =\n+        new ArrayList<>(Arrays.asList(Constants.BOOTSTRAP_PACKAGE_PREFIXES));\n+    Iterable<BootstrapPackagesProvider> bootstrapPackagesProviders =\n+        SafeServiceLoader.load(\n+            BootstrapPackagesProvider.class, AgentInstaller.class.getClassLoader());\n+    for (BootstrapPackagesProvider provider : bootstrapPackagesProviders) {\n+      List<String> packagePrefixes = provider.getPackagePrefixes();\n+      log.debug(\n+          \"Loaded bootstrap package prefixes from {}: {}\",\n+          provider.getClass().getName(),\n+          packagePrefixes);\n+      bootstrapPackages.addAll(packagePrefixes);\n+    }\n+    return bootstrapPackages.toArray(new String[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d72f879f62bb7dacaf7b97356fb5e12eb834b62"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDY2NjkxOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0NjowMlrOHhNG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo0NjowMlrOHhNG8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3OTgyNw==", "bodyText": "Can you make this class more similar to Config/OpenTelemetrySdkAccess? I.e. volatile static field, internal... setter method name, checking that you can only set the value once.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504579827", "createdAt": "2020-10-14T10:46:02Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.internal;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} is an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {\n+\n+  private static String[] bootstrapPrefixes;\n+\n+  public static String[] getBootstrapPrefixes() {\n+    return bootstrapPrefixes;\n+  }\n+\n+  public static void setBootstrapPrefixes(String[] prefixes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d72f879f62bb7dacaf7b97356fb5e12eb834b62"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDcxMzM1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo1OToyNFrOHhNjCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDo1OToyNFrOHhNjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU4NzAxOQ==", "bodyText": "If it's supposed to be available in instrumentation-api consider using a List (and Collections.unmodifiableList() wrapper): arrays are mutable and can be easily changed by anybody.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r504587019", "createdAt": "2020-10-14T10:59:24Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.internal;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} is an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {\n+\n+  private static String[] bootstrapPrefixes;\n+\n+  public static String[] getBootstrapPrefixes() {\n+    return bootstrapPrefixes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d72f879f62bb7dacaf7b97356fb5e12eb834b62"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzIwMjYzOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyMDoxMFrOHiNOmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToyMDoxMFrOHiNOmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzMDM2Mw==", "bodyText": "Just a minor comment: how about internalSetBootstrapPackagePrefixes?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1380#discussion_r505630363", "createdAt": "2020-10-15T15:20:10Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/internal/BootstrapPackagePrefixesHolder.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.api.internal;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * {@link BootstrapPackagePrefixesHolder} is an utility class that holds package prefixes. The\n+ * classes from these packages are pushed to the bootstrap classloader.\n+ *\n+ * <p>The prefixes are loaded by {@code AgentInstaller} and consumed by classloader instrumentation.\n+ * The instrumentation does not have access to the installer, therefore this utility class is used\n+ * to share package prefixes.\n+ */\n+public class BootstrapPackagePrefixesHolder {\n+\n+  private static volatile List<String> BOOSTRAP_PACKAGE_PREFIXES;\n+\n+  public static List<String> getBoostrapPackagePrefixes() {\n+    return BOOSTRAP_PACKAGE_PREFIXES;\n+  }\n+\n+  public static void setBoostrapPackagePrefixes(List<String> prefixes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41848854588be64b148bd671607cfdf63f442092"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}