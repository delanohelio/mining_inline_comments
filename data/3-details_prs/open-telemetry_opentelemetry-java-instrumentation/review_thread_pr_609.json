{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzMxOTQ3", "number": 609, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1OTo0NFrOEJpamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMTo0MlrOEJ0dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUxMTkyOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1OTo0NFrOGqPwJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo1OTo0NFrOGqPwJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1MTQ2MQ==", "bodyText": "As far as I can tell, this mysterious class is being generated because of the switch on enum.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/609#discussion_r446951461", "createdAt": "2020-06-29T12:59:44Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "diffHunk": "@@ -58,6 +58,8 @@ public GrpcClientBuilderInstrumentation() {\n       packageName + \".TracingClientInterceptor$TracingClientCall\",\n       packageName + \".TracingClientInterceptor$TracingClientCallListener\",\n       \"io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper\",\n+      // Generated for enum switch.\n+      \"io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper$1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a93b3b7722dc4d5bbc25f34d00caaefc52f730a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzMyMTg3OnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/test/groovy/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelperTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMTo0MlrOGqhGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozMTo0MlrOGqhGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNTc3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/609#discussion_r447235776", "createdAt": "2020-06-29T20:31:42Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/test/groovy/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelperTest.groovy", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.grpc.common\n+\n+import io.grpc.Status\n+import spock.lang.Specification\n+\n+class GrpcHelperTest extends Specification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95296cd9ae0e7f1ba2ce541c91c76096604d401d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 309, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}