{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjE2NTky", "number": 573, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo0NjoxOFrOEIgThA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDozMFrOEIjJsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzUzMzQ4OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo0NjoxOFrOGogn6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo1NDoyMlrOGosUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ==", "bodyText": "currently at least, this method isn't needed (the only callers use the public overrides directly)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445130731", "createdAt": "2020-06-24T19:46:18Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -223,9 +230,15 @@ private void setStatus(Span span, int status) {\n \n   protected abstract String method(REQUEST request);\n \n-  protected void attachSpanToRequest(Span span, REQUEST request) {}\n+  /** Stores given context in the given request in implementation specific way. */\n+  protected void attachContextToRequest(Context context, REQUEST request) {}\n \n-  protected Span getAttachedSpan(REQUEST request) {\n+  /**\n+   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   *\n+   * <p>May be null.\n+   */\n+  protected Context getAttachedContext(REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjI2Mg==", "bodyText": "I am thinking about making this public and changing this and attachContextToRequest abstract methods here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322262", "createdAt": "2020-06-25T05:54:22Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -223,9 +230,15 @@ private void setStatus(Span span, int status) {\n \n   protected abstract String method(REQUEST request);\n \n-  protected void attachSpanToRequest(Span span, REQUEST request) {}\n+  /** Stores given context in the given request in implementation specific way. */\n+  protected void attachContextToRequest(Context context, REQUEST request) {}\n \n-  protected Span getAttachedSpan(REQUEST request) {\n+  /**\n+   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   *\n+   * <p>May be null.\n+   */\n+  protected Context getAttachedContext(REQUEST request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ=="}, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzUzNjAwOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo0NzowN1rOGogpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo1NDo0MFrOGosUeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ==", "bodyText": "what do u think of startScope?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445131131", "createdAt": "2020-06-24T19:47:07Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -172,8 +173,15 @@ public Span getCurrentSpan() {\n     return tracer.getCurrentSpan();\n   }\n \n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope newScope(Span span, REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjM2MA==", "bodyText": "Both looks fine to me, can rename if you wish.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322360", "createdAt": "2020-06-25T05:54:40Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -172,8 +173,15 @@ public Span getCurrentSpan() {\n     return tracer.getCurrentSpan();\n   }\n \n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope newScope(Span span, REQUEST request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ=="}, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzU4MzM4OnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDowMToyMVrOGohHAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo1NjoxM1rOGosWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ==", "bodyText": "not related to this PR, but how about below\nmaybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE protected to force access via tracers(?)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                  if (contextAttribute instanceof Context) {\n          \n          \n            \n                    request.removeAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                    TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n          \n          \n            \n                  }\n          \n          \n            \n                  Context context = TRACER.removeAttachedContext(request);\n          \n          \n            \n                  if (context != null) {\n          \n          \n            \n                    TRACER.end(getSpan(context), request.getResponse().getStatus());\n          \n          \n            \n                  }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445138691", "createdAt": "2020-06-24T20:01:21Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "diffHunk": "@@ -111,10 +113,10 @@ public static void methodExit(\n \n     @Override\n     public void onAfterService(final Request request) {\n-      final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof Span) {\n-        request.removeAttribute(SPAN_ATTRIBUTE);\n-        TRACER.end((Span) spanAttr, request.getResponse().getStatus());\n+      final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n+      if (contextAttribute instanceof Context) {\n+        request.removeAttribute(CONTEXT_ATTRIBUTE);\n+        TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMjg2Ng==", "bodyText": "Definitely. In my ideal vision even these methods will not be needed and tracer will expose more semantically meaningful methods if it cannot handle everything itself.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445322866", "createdAt": "2020-06-25T05:56:13Z", "author": {"login": "iNikem"}, "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "diffHunk": "@@ -111,10 +113,10 @@ public static void methodExit(\n \n     @Override\n     public void onAfterService(final Request request) {\n-      final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof Span) {\n-        request.removeAttribute(SPAN_ATTRIBUTE);\n-        TRACER.end((Span) spanAttr, request.getResponse().getStatus());\n+      final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n+      if (contextAttribute instanceof Context) {\n+        request.removeAttribute(CONTEXT_ATTRIBUTE);\n+        TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ=="}, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc4MTUyOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMzo1OVrOGojEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowMzo1OVrOGojEOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDc0NQ==", "bodyText": "this just got re-worked in DataDog/dd-trace-java#1595", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445170745", "createdAt": "2020-06-24T21:03:59Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3HttpServerTracer.java", "diffHunk": "@@ -73,22 +77,23 @@ public void onRequest(Span span, HttpServletRequest request) {\n    * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n    * chain.\n    */\n+  // TODO review this hacky-hacky", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzc5NTIyOnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowODo1MVrOGojNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTowODo1MVrOGojNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzAwMw==", "bodyText": "\"ServletContext\" sounds so much like something else, maybe:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Advice.Local(\"_originalServletContext\") Object originalServletContext,\n          \n          \n            \n                    @Advice.Local(\"_originalContext\") Object originalContext,", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445173003", "createdAt": "2020-06-24T21:08:51Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -87,12 +90,13 @@ public RequestDispatcherInstrumentation() {\n     public static SpanWithScope start(\n         @Advice.Origin(\"#m\") final String method,\n         @Advice.This final RequestDispatcher dispatcher,\n-        @Advice.Local(\"_originalServletSpan\") Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") Object originalServletContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzk3MjM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoxMzowOFrOGok5-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjozNTo1NlrOGotL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA==", "bodyText": "hm, good question, i think include and forward are synchronous, so thread-local context propagation should be enough", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445200890", "createdAt": "2020-06-24T22:13:08Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -125,28 +129,31 @@ public static SpanWithScope start(\n \n       // save the original servlet span before overwriting the request attribute, so that it can be\n       // restored on method exit\n-      originalServletSpan = request.getAttribute(SPAN_ATTRIBUTE);\n+      originalServletContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n       // this tells the dispatched servlet to use the current span as the parent for its work\n-      request.setAttribute(SPAN_ATTRIBUTE, span);\n+      Context newContext = withSpan(span, Context.current());\n+      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n \n-      return new SpanWithScope(span, currentContextWith(span));\n+      return new SpanWithScope(span, withScopedContext(newContext));\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void stop(\n         @Advice.Enter final SpanWithScope spanWithScope,\n-        @Advice.Local(\"_originalServletSpan\") final Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") final Object originalServletContext,\n         @Advice.Argument(0) final ServletRequest request,\n         @Advice.Thrown final Throwable throwable) {\n       if (spanWithScope == null) {\n         return;\n       }\n \n       // restore the original servlet span\n-      // since spanWithScope is non-null here, originalServletSpan must have been set with the prior\n+      // since spanWithScope is non-null here, originalServletContext must have been set with the\n+      // prior\n       // servlet span (as opposed to remaining unset)\n-      request.setAttribute(SPAN_ATTRIBUTE, originalServletSpan);\n+      // TODO review this logic. Seems like manual context management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzNjU2Ng==", "bodyText": "Made #579 to come back to this later.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445336566", "createdAt": "2020-06-25T06:35:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -125,28 +129,31 @@ public static SpanWithScope start(\n \n       // save the original servlet span before overwriting the request attribute, so that it can be\n       // restored on method exit\n-      originalServletSpan = request.getAttribute(SPAN_ATTRIBUTE);\n+      originalServletContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n       // this tells the dispatched servlet to use the current span as the parent for its work\n-      request.setAttribute(SPAN_ATTRIBUTE, span);\n+      Context newContext = withSpan(span, Context.current());\n+      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n \n-      return new SpanWithScope(span, currentContextWith(span));\n+      return new SpanWithScope(span, withScopedContext(newContext));\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void stop(\n         @Advice.Enter final SpanWithScope spanWithScope,\n-        @Advice.Local(\"_originalServletSpan\") final Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") final Object originalServletContext,\n         @Advice.Argument(0) final ServletRequest request,\n         @Advice.Thrown final Throwable throwable) {\n       if (spanWithScope == null) {\n         return;\n       }\n \n       // restore the original servlet span\n-      // since spanWithScope is non-null here, originalServletSpan must have been set with the prior\n+      // since spanWithScope is non-null here, originalServletContext must have been set with the\n+      // prior\n       // servlet span (as opposed to remaining unset)\n-      request.setAttribute(SPAN_ATTRIBUTE, originalServletSpan);\n+      // TODO review this logic. Seems like manual context management", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA=="}, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzk5OTg2OnYy", "diffSide": "LEFT", "path": "instrumentation/java-concurrent/akka-2.5-testing/akka-2.5-testing.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDozMFrOGolKig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo1OTo0NFrOGosasg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTEzMA==", "bodyText": "can u hold off on this scala-related cleanup? there's big changes coming shortly in DataDog/dd-trace-java#1625", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445205130", "createdAt": "2020-06-24T22:24:30Z", "author": {"login": "trask"}, "path": "instrumentation/java-concurrent/akka-2.5-testing/akka-2.5-testing.gradle", "diffHunk": "@@ -4,12 +4,8 @@ ext {\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n-apply from: \"$rootDir/gradle/test-with-scala.gradle\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMzk1NA==", "bodyText": "Yeah, that crept here semi-accidentally, because my builds failed for some mysterious reasons :( Will try to revert", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445323954", "createdAt": "2020-06-25T05:59:44Z", "author": {"login": "iNikem"}, "path": "instrumentation/java-concurrent/akka-2.5-testing/akka-2.5-testing.gradle", "diffHunk": "@@ -4,12 +4,8 @@ ext {\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n-apply from: \"$rootDir/gradle/test-with-scala.gradle\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTEzMA=="}, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 287, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}