{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjgxNjM3", "number": 1207, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMToyMVrOEj3i4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMzoyMlrOEj3qjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ1NjY1OnYy", "diffSide": "RIGHT", "path": "docs/semantic-conventions.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMToyMVrOHSeSfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMToyMVrOHSeSfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMjY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **[3]:** In case of Almeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),\n          \n          \n            \n            **[3]:** In case of Armeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489132668", "createdAt": "2020-09-16T03:01:21Z", "author": {"login": "trask"}, "path": "docs/semantic-conventions.md", "diffHunk": "@@ -0,0 +1,36 @@\n+# Semantic conventions\n+\n+This document describes which [OpenTelemetry Semantic Conventions](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/trace/semantic_conventions)\n+are implemented by Java autoinstrumentation and which ones are not.\n+\n+## Http Server\n+\n+| Attribute | Required | Implemented? |\n+|---|:---:|:---:|\n+| `http.method` | Y | + |\n+| `http.url` | N | + |\n+| `http.target` | N | - [1] |\n+| `http.host` | N | - [1] |\n+| `http.scheme` | N | - [1] |\n+| `http.status_code` | Y | + |\n+| `http.status_text` | N | - [2] |\n+| `http.flavor` | N | + [3] |\n+| `http.user_agent` | N | + |\n+| `http.request_content_length` | N | - |\n+| `http.request_content_length_uncompressed` | N | - |\n+| `http.response_content_length` | N | - |\n+| `http.response_content_length_uncompressed` | N | - |\n+| `http.server_name` | N | - |\n+| `http.route` | N | - |\n+| `http.client_ip` | N | + |\n+\n+**[1]:** As the majority of Java frameworks don't provide a standard way to obtain \"The full request\n+target as passed in a HTTP request line or equivalent.\", we don't set `http.target` semantic\n+attribute. As either it or `http.url` is required, we set the latter. This, in turn, makes setting\n+`http.schema` and `http.host` unnecessary duplication. Therefore, we do not set them as well.\n+\n+**[2]: TODO** After [this PR](https://github.com/open-telemetry/opentelemetry-specification/issues/950)\n+ is merged, remove this line. If it rejected, then implement this attribute.\n+\n+**[3]:** In case of Almeria, return values are [SessionProtocol](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/SessionProtocol.java),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ1ODgwOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMjo0OVrOHSeTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowMjo0OVrOHSeTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzMzAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"\n          \n          \n            \n              But in Java world there is no standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489133003", "createdAt": "2020-09-16T03:02:49Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -169,27 +165,30 @@ protected void onConnection(Span span, CONNECTION connection) {\n     }\n   }\n \n-  // TODO use semantic attributes\n   protected void onRequest(Span span, REQUEST request) {\n     SemanticAttributes.HTTP_METHOD.set(span, method(request));\n-    String userAgent = requestHeader(request, USER_AGENT);\n-    if (userAgent != null) {\n-      SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n-    }\n+    SemanticAttributes.HTTP_USER_AGENT.set(span, requestHeader(request, USER_AGENT));\n+\n+    setUrl(span, request);\n \n-    try {\n-      URI url = url(request);\n-      HttpUrlUtils.setHttpUrl(span, url);\n-      if (Config.get().isHttpServerTagQueryString()) {\n-        span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n-        span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n-      }\n-    } catch (Exception e) {\n-      log.debug(\"Error tagging url\", e);\n-    }\n     // TODO set resource name from URL.\n   }\n \n+  /*\n+  https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n+\n+  HTTP semantic convention recommends setting http.scheme, http.host, http.target attributes\n+  instead of http.url because it \"is usually not readily available on the server side but would have\n+  to be assembled in a cumbersome and sometimes lossy process from other information\".\n+\n+  But in Java world there is now standard way to access \"The full request target as passed in a HTTP request line or equivalent\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ2NTg1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowNzowNFrOHSeX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzowNzowNFrOHSeX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNDAzNg==", "bodyText": "I think warn is ok, but wouldn't be opposed to debug either", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489134036", "createdAt": "2020-09-16T03:07:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/servlet/src/main/java/io/opentelemetry/instrumentation/servlet/ServletHttpServerTracer.java", "diffHunk": "@@ -26,21 +26,30 @@\n import java.security.Principal;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class ServletHttpServerTracer<RESPONSE>\n     extends HttpServerTracer<HttpServletRequest, RESPONSE, HttpServletRequest, HttpServletRequest> {\n \n+  private static final Logger log = LoggerFactory.getLogger(ServletHttpServerTracer.class);\n+\n   @Override\n-  // TODO this violates convention\n-  protected URI url(HttpServletRequest httpServletRequest) throws URISyntaxException {\n-    return new URI(\n-        httpServletRequest.getScheme(),\n-        null,\n-        httpServletRequest.getServerName(),\n-        httpServletRequest.getServerPort(),\n-        httpServletRequest.getRequestURI(),\n-        httpServletRequest.getQueryString(),\n-        null);\n+  protected String url(HttpServletRequest httpServletRequest) {\n+    try {\n+      return new URI(\n+              httpServletRequest.getScheme(),\n+              null,\n+              httpServletRequest.getServerName(),\n+              httpServletRequest.getServerPort(),\n+              httpServletRequest.getRequestURI(),\n+              httpServletRequest.getQueryString(),\n+              null)\n+          .toString();\n+    } catch (URISyntaxException e) {\n+      log.warn(\"Failed to construct request URI\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ3NTM5OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/server/NettyHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMjo0M1rOHSedew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMjo0M1rOHSedew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTQ4Mw==", "bodyText": "check startsWith \"http://\" or startsWith \"https://\" to avoid edge case", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135483", "createdAt": "2020-09-16T03:12:43Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/server/NettyHttpServerTracer.java", "diffHunk": "@@ -60,10 +58,10 @@ public Context getServerContext(ChannelTraceContext channelTraceContext) {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ3NTk5OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/server/NettyHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMzowN1rOHSed4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMzowN1rOHSed4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTU4Ng==", "bodyText": "same comment", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135586", "createdAt": "2020-09-16T03:13:07Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.getUri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.getUri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.getUri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDQ3NjMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/server/NettyHttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMzoyMlrOHSeeHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzoxMzoyMlrOHSeeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEzNTY0NA==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1207#discussion_r489135644", "createdAt": "2020-09-16T03:13:22Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/server/NettyHttpServerTracer.java", "diffHunk": "@@ -70,10 +68,10 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected URI url(HttpRequest request) throws URISyntaxException {\n-    URI uri = new URI(request.uri());\n-    if ((uri.getHost() == null || uri.getHost().equals(\"\")) && request.headers().contains(HOST)) {\n-      return new URI(\"http://\" + request.headers().get(HOST) + request.uri());\n+  protected String url(HttpRequest request) {\n+    String uri = request.uri();\n+    if (!uri.startsWith(\"http\") && request.headers().contains(HOST)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63c8dcb2ed3ab4f575ee389cb5ee9f972beccab1"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4921, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}