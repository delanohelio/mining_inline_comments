{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDQwOTA1", "number": 215, "title": "Implemented Apache Geode/Gemfire instrumentation", "bodyText": "Instrumentation of basic the Geode cache API.", "createdAt": "2020-03-06T22:01:37Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215", "merged": true, "mergeCommit": {"oid": "e54ab56b3a105ba84a2d1222c0395fd55715e81d"}, "closed": true, "closedAt": "2020-03-10T18:18:37Z", "author": {"login": "prydin"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKhz04AH2gAyMzg1MDQwOTA1Ojg0ODk5NjdmMmZmMDRmODgzNjg2MGRhZTk5ZGJjYzA1ODhlZDQ4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMWrIqAFqTM3MjIwODExMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8489967f2ff04f8836860dae99dbcc0588ed4867", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8489967f2ff04f8836860dae99dbcc0588ed4867", "committedDate": "2020-03-05T02:08:48Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3c007a22b10bf71008d0a5bc171be2a1865b33", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2b3c007a22b10bf71008d0a5bc171be2a1865b33", "committedDate": "2020-03-05T02:09:07Z", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-auto-instr-java into prydin-geode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1b33ab9a40c00bbe3825c008f071512f5d4dcf", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a1b33ab9a40c00bbe3825c008f071512f5d4dcf", "committedDate": "2020-03-06T15:45:10Z", "message": "Working get/put instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044bd7add3389cb114d7f87069cbd11a8f35c204", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/044bd7add3389cb114d7f87069cbd11a8f35c204", "committedDate": "2020-03-06T15:45:39Z", "message": "Added gradle file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c50ef0e4ee11c02b11f4108ba656c29041e99eb", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5c50ef0e4ee11c02b11f4108ba656c29041e99eb", "committedDate": "2020-03-06T16:29:32Z", "message": "Working test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83518e8440bca855149a54aa046dd05c648dcee3", "committedDate": "2020-03-06T21:58:43Z", "message": "PR candidate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjkwMjY4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#pullrequestreview-370690268", "createdAt": "2020-03-06T23:45:44Z", "commit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMzo0NTo0NFrOFzKo_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNDoyNFrOFzK3zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjAyOQ==", "bodyText": "I think\n.and(takesArgument(0, named(\"java.lang.String\")))\n\nis good corresponding to @Advice.Argument(0) String below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389196029", "createdAt": "2020-03-06T23:45:44Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5NjU3NA==", "bodyText": "I think this should go before the try/finally, don't need to call reset if it's a nested invocation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389196574", "createdAt": "2020-03-06T23:48:26Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),\n+        GeodeInstrumentation.class.getName() + \"$QueryAdvice\");\n+    return map;\n+  }\n+\n+  public static class SimpleAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz, @Advice.Origin final Method method) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(SimpleAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE5OTgyMg==", "bodyText": "same here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r389199822", "createdAt": "2020-03-07T00:04:24Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.7/src/main/java/io/opentelemetry/auto/instrumentation/geode/GeodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.geode;\n+\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.DECORATE;\n+import static io.opentelemetry.auto.instrumentation.geode.GeodeDecorator.TRACER;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.hasInterface;\n+import static io.opentelemetry.trace.Span.Kind.CLIENT;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.nameStartsWith;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.bootstrap.CallDepthThreadLocalMap;\n+import io.opentelemetry.auto.instrumentation.api.SpanWithScope;\n+import io.opentelemetry.auto.instrumentation.api.Tags;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import io.opentelemetry.trace.Span;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.geode.cache.Region;\n+\n+@AutoService(Instrumenter.class)\n+public class GeodeInstrumentation extends Instrumenter.Default {\n+  public GeodeInstrumentation() {\n+    super(\"geode\", \"geode-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return hasInterface(named(\"org.apache.geode.cache.Region\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"io.opentelemetry.auto.decorator.BaseDecorator\",\n+      \"io.opentelemetry.auto.decorator.ClientDecorator\",\n+      \"io.opentelemetry.auto.decorator.DatabaseClientDecorator\",\n+      packageName + \".GeodeDecorator\",\n+      packageName + \".GeodeInstrumentation$SimpleAdvice\",\n+      packageName + \".GeodeInstrumentation$QueryAdvice\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> map = new HashMap<>(2);\n+    map.put(\n+        isMethod()\n+            .and(\n+                named(\"clear\")\n+                    .or(nameStartsWith(\"contains\"))\n+                    .or(named(\"create\"))\n+                    .or(named(\"destroy\"))\n+                    .or(named(\"entrySet\"))\n+                    .or(named(\"get\"))\n+                    .or(named(\"getAll\"))\n+                    .or(named(\"invalidate\"))\n+                    .or(nameStartsWith(\"keySet\"))\n+                    .or(nameStartsWith(\"put\"))\n+                    .or(nameStartsWith(\"remove\"))\n+                    .or(named(\"replace\"))),\n+        GeodeInstrumentation.class.getName() + \"$SimpleAdvice\");\n+    map.put(\n+        isMethod().and(named(\"existsValue\").or(named(\"query\")).or(named(\"selectValue\"))),\n+        GeodeInstrumentation.class.getName() + \"$QueryAdvice\");\n+    return map;\n+  }\n+\n+  public static class SimpleAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz, @Advice.Origin final Method method) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(SimpleAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }\n+        final Span span = spanWithScope.getSpan();\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.end();\n+        spanWithScope.closeScope();\n+      } finally {\n+        CallDepthThreadLocalMap.reset(SimpleAdvice.class);\n+      }\n+    }\n+  }\n+\n+  public static class QueryAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static SpanWithScope onEnter(\n+        @Advice.This final Region thiz,\n+        @Advice.Origin final Method method,\n+        @Advice.Argument(0) final String query) {\n+      if (CallDepthThreadLocalMap.incrementCallDepth(QueryAdvice.class) > 0) {\n+        return null;\n+      }\n+      final Span span = TRACER.spanBuilder(method.getName()).setSpanKind(CLIENT).startSpan();\n+      DECORATE.afterStart(span);\n+      span.setAttribute(Tags.DB_INSTANCE, thiz.getName());\n+      span.setAttribute(Tags.DB_STATEMENT, query);\n+      return new SpanWithScope(span, TRACER.withSpan(span));\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Enter final SpanWithScope spanWithScope, @Advice.Thrown final Throwable throwable) {\n+      try {\n+        if (spanWithScope == null) {\n+          return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83518e8440bca855149a54aa046dd05c648dcee3"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f219ae4fb3f768c50946e24a93da44e7a2abd2", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e4f219ae4fb3f768c50946e24a93da44e7a2abd2", "committedDate": "2020-03-10T00:40:31Z", "message": "Addressed code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30038101c9dd26d8c236f6a5f0fea030533447fa", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/30038101c9dd26d8c236f6a5f0fea030533447fa", "committedDate": "2020-03-10T00:53:52Z", "message": "Added back advice classes to helpers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "301e2aea37865eb4f523c2bac930e745f22a0673", "author": {"user": {"login": "prydin", "name": "Pontus Rydin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/301e2aea37865eb4f523c2bac930e745f22a0673", "committedDate": "2020-03-10T14:40:28Z", "message": "Fixed muzzle without listing advice classes as helpers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de31ad852c945f6bfc42ef4ed3a231299e788da6", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de31ad852c945f6bfc42ef4ed3a231299e788da6", "committedDate": "2020-03-10T16:45:27Z", "message": "Merge branch 'master' into prydin-geode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTYzNzA2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#pullrequestreview-372163706", "createdAt": "2020-03-10T17:21:04Z", "commit": {"oid": "de31ad852c945f6bfc42ef4ed3a231299e788da6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMTowNFrOF0ZHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyMTowNFrOF0ZHRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MTczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            apply from: \"${rootDir}/gradle/java.gradle\"\n          \n          \n            \n            apply from: \"${rootDir}/gradle/instrumentation.gradle\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#discussion_r390481735", "createdAt": "2020-03-10T17:21:04Z", "author": {"login": "trask"}, "path": "instrumentation/geode-1.4/geode-1.4.gradle", "diffHunk": "@@ -0,0 +1,29 @@\n+// Geode only supports Java 8+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de31ad852c945f6bfc42ef4ed3a231299e788da6"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7abbcbafabeea57654b12f5c82a151eb0f154b98", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7abbcbafabeea57654b12f5c82a151eb0f154b98", "committedDate": "2020-03-10T17:50:33Z", "message": "Update instrumentation/geode-1.4/geode-1.4.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjA4MTEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/215#pullrequestreview-372208112", "createdAt": "2020-03-10T18:18:12Z", "commit": {"oid": "7abbcbafabeea57654b12f5c82a151eb0f154b98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3331, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}