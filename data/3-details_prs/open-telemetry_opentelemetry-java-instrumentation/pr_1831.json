{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDIwNDE2", "number": 1831, "title": "Support faas.id & cloud.account.id attributes in AWS Lambda", "bodyText": "Resolves #1773 (this is the last thing that I wanted to support)\nIt probably needs to wait for the spec PR open-telemetry/opentelemetry-specification#1265 to get merged.", "createdAt": "2020-12-04T09:54:34Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831", "merged": true, "mergeCommit": {"oid": "49830c33a4bd95724dfbb865535b4b0f5191c585"}, "closed": true, "closedAt": "2020-12-08T13:06:57Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjsAtdgFqTU0NTc4OTE2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkIdBdgH2gAyNTMyNDIwNDE2OmVkOGRhNTA2MmIxNjM1NjNiZjE0NTU5ZGMxY2NkYzQ2NDBmM2NiZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Nzg5MTY4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831#pullrequestreview-545789168", "createdAt": "2020-12-07T02:15:58Z", "commit": {"oid": "fbff95b5b15a8aad8b2b9d5ebbe0413d41462b4a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMjoxNTo1OFrOIATN8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMjoyMDo0OVrOIATS6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE4NTc3Ng==", "bodyText": "I wonder if we can just set a boolean by checking with normal reflection and guard the call to the function, given Java doesn't link until call-time? I'm not aware of any advantage of method handles for guarding against different versions vs that (code is a bit simpler IMO) but maybe no one has ever told me them yet :P", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831#discussion_r537185776", "createdAt": "2020-12-07T02:15:58Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/AwsLambdaTracer.java", "diffHunk": "@@ -19,12 +21,30 @@\n import io.opentelemetry.api.trace.attributes.SemanticAttributes.FaasTriggerValues;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n import java.util.Collections;\n import java.util.Map;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n \n public class AwsLambdaTracer extends BaseTracer {\n \n   private static final String AWS_TRACE_HEADER_ENV_KEY = \"_X_AMZN_TRACE_ID\";\n+  private static final MethodHandle GET_FUNCTION_ARN;\n+\n+  static {\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbff95b5b15a8aad8b2b9d5ebbe0413d41462b4a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE4NzA0OA==", "bodyText": "Since account ID is constant, how about storing it into a lazy-inited field? We probably don't need to make it volatile since it'll converge eventually.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831#discussion_r537187048", "createdAt": "2020-12-07T02:20:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/AwsLambdaTracer.java", "diffHunk": "@@ -69,13 +89,37 @@ private SpanBuilder createSpan(Context context, Object input, Map<String, String\n   }\n \n   private void setAttributes(SpanBuilder span, Context context, Object input) {\n-    span.setAttribute(FAAS_EXECUTION, context.getAwsRequestId());\n+    setCommonAttributes(span, context);\n     if (input instanceof APIGatewayProxyRequestEvent) {\n       span.setAttribute(FAAS_TRIGGER, FaasTriggerValues.HTTP.getValue());\n       httpSpanAttributes.onRequest(span, (APIGatewayProxyRequestEvent) input);\n     }\n   }\n \n+  private void setCommonAttributes(SpanBuilder span, Context context) {\n+    span.setAttribute(FAAS_EXECUTION, context.getAwsRequestId());\n+    String arn = getFunctionArn(context);\n+    if (arn != null) {\n+      span.setAttribute(FAAS_ID, arn);\n+      String[] arnParts = arn.split(\":\");\n+      if (arnParts.length >= 5) {\n+        span.setAttribute(CLOUD_ACCOUNT_ID, arnParts[4]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbff95b5b15a8aad8b2b9d5ebbe0413d41462b4a"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8454e5c7fdd122dae18768852554070bfcbf61bb", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8454e5c7fdd122dae18768852554070bfcbf61bb", "committedDate": "2020-12-08T11:06:33Z", "message": "Support faas.id & cloud.account.id attributes in AWS Lambda"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45b262509f27ca6c62efe081f70b160d3ac577fc", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/45b262509f27ca6c62efe081f70b160d3ac577fc", "committedDate": "2020-12-08T11:06:33Z", "message": "Cache accountId"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f048fcb85c48a8855dbbcd6317ecc1fd9e6a216", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f048fcb85c48a8855dbbcd6317ecc1fd9e6a216", "committedDate": "2020-12-08T10:23:57Z", "message": "Cache accountId"}, "afterCommit": {"oid": "45b262509f27ca6c62efe081f70b160d3ac577fc", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/45b262509f27ca6c62efe081f70b160d3ac577fc", "committedDate": "2020-12-08T11:06:33Z", "message": "Cache accountId"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MTI0ODk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831#pullrequestreview-547124894", "createdAt": "2020-12-08T11:16:29Z", "commit": {"oid": "45b262509f27ca6c62efe081f70b160d3ac577fc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToxNjozMFrOIBUaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToxNjozMFrOIBUaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1Mzg3Ng==", "bodyText": "Since we're locking and volatile don't need to use AtomicReference, it just ends up being another volatile lookup inside it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1831#discussion_r538253876", "createdAt": "2020-12-08T11:16:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/AwsLambdaTracer.java", "diffHunk": "@@ -69,13 +92,55 @@ private SpanBuilder createSpan(Context context, Object input, Map<String, String\n   }\n \n   private void setAttributes(SpanBuilder span, Context context, Object input) {\n-    span.setAttribute(FAAS_EXECUTION, context.getAwsRequestId());\n+    setCommonAttributes(span, context);\n     if (input instanceof APIGatewayProxyRequestEvent) {\n       span.setAttribute(FAAS_TRIGGER, FaasTriggerValues.HTTP.getValue());\n       httpSpanAttributes.onRequest(span, (APIGatewayProxyRequestEvent) input);\n     }\n   }\n \n+  private void setCommonAttributes(SpanBuilder span, Context context) {\n+    span.setAttribute(FAAS_EXECUTION, context.getAwsRequestId());\n+    String arn = getFunctionArn(context);\n+    if (arn != null) {\n+      span.setAttribute(FAAS_ID, arn);\n+    }\n+    String accountId = getAccountId(arn);\n+    if (accountId != null) {\n+      span.setAttribute(CLOUD_ACCOUNT_ID, accountId);\n+    }\n+  }\n+\n+  @Nullable\n+  private String getFunctionArn(Context context) {\n+    if (GET_FUNCTION_ARN == null) {\n+      return null;\n+    }\n+    try {\n+      return (String) GET_FUNCTION_ARN.invoke(context);\n+    } catch (Throwable throwable) {\n+      return null;\n+    }\n+  }\n+\n+  @Nullable\n+  private String getAccountId(@Nullable String arn) {\n+    if (accountId == null) {\n+      synchronized (this) {\n+        if (accountId == null) {\n+          accountId = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b262509f27ca6c62efe081f70b160d3ac577fc"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8da5062b163563bf14559dc1ccdc4640f3cbf7", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ed8da5062b163563bf14559dc1ccdc4640f3cbf7", "committedDate": "2020-12-08T11:29:27Z", "message": "Cache accountId"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2131, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}