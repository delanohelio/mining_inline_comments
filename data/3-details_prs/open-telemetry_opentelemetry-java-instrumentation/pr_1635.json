{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwOTc2MTk3", "number": 1635, "title": "Prepare a single test bootstrap jar at top level.", "bodyText": "Currently there are only two types of bootstrap jars, one with servlet classes, one without, but we generate one for each project in the build. It seems harmless to have just one jar which includes the servlet classes too. Instead, we can exclude servlet-related classes from logback when creating a bootstrap jar and use the same one for all of them.\nFixes #981", "createdAt": "2020-11-14T08:02:17Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635", "merged": true, "mergeCommit": {"oid": "9ac34bce67836c02279eb5f64e756bb4a42be344"}, "closed": true, "closedAt": "2020-11-16T02:25:41Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcW489AH2gAyNTIwOTc2MTk3OjkxNTIwZjc1YzRhMGFmYTJiYjAyOThhNTcwYzNlNjVhNmYxNmYzZTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdc1jmVAH2gAyNTIwOTc2MTk3OjM0MjcxMjJjMDk4MTJiNGIwNWFhNTM0NjIwNTdlMjE5Y2RhMGZhNjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91520f75c4a0afa2bb0298a570c3e65a6f16f3e1", "committedDate": "2020-11-14T07:47:14Z", "message": "Prepare a single test bootstrap jar at top level."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzYyMDgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#pullrequestreview-530762081", "createdAt": "2020-11-15T02:39:19Z", "commit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwMjozOToxOVrOHzZvlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwMzo1NDoxMlrOHzcUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzY2MTIwNw==", "bodyText": "what does this line do?\ntask.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523661207", "createdAt": "2020-11-15T02:39:19Z", "author": {"login": "trask"}, "path": "buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java", "diffHunk": "@@ -29,106 +21,20 @@\n // TODO(anuraaga): Migrate more build logic into this plugin to avoid having two places for it.\n public class AutoInstrumentationPlugin implements Plugin<Project> {\n \n-  /**\n-   * An exact copy of {@code\n-   * io.opentelemetry.javaagent.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}. We can't reference it\n-   * directly since this file needs to be compiled before the other packages.\n-   */\n-  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n-    \"io.opentelemetry.javaagent.common.exec\",\n-    \"io.opentelemetry.javaagent.slf4j\",\n-    \"io.opentelemetry.javaagent.bootstrap\",\n-    \"io.opentelemetry.javaagent.shaded\",\n-    \"io.opentelemetry.javaagent.instrumentation.api\",\n-  };\n-\n-  // Aditional classes we need only for tests and aren't shared with the agent business logic.\n-  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n-\n-  static {\n-    String[] testBS = {\n-      \"io.opentelemetry.instrumentation.api\",\n-      \"io.opentelemetry.api\", // OpenTelemetry API\n-      \"io.opentelemetry.context\", // OpenTelemetry API\n-      \"org.slf4j\",\n-      \"ch.qos.logback\",\n-      // Tomcat's servlet classes must be on boostrap\n-      // when running tomcat test\n-      \"javax.servlet.ServletContainerInitializer\",\n-      \"javax.servlet.ServletContext\"\n-    };\n-    TEST_BOOTSTRAP_PREFIXES =\n-        Arrays.copyOf(\n-            BOOTSTRAP_PACKAGE_PREFIXES_COPY,\n-            BOOTSTRAP_PACKAGE_PREFIXES_COPY.length + testBS.length);\n-    System.arraycopy(\n-        testBS, 0, TEST_BOOTSTRAP_PREFIXES, BOOTSTRAP_PACKAGE_PREFIXES_COPY.length, testBS.length);\n-    for (int i = 0; i < TEST_BOOTSTRAP_PREFIXES.length; i++) {\n-      TEST_BOOTSTRAP_PREFIXES[i] = TEST_BOOTSTRAP_PREFIXES[i].replace('.', '/');\n-    }\n-  }\n-\n   @Override\n   public void apply(Project project) {\n     project.getPlugins().apply(JavaLibraryPlugin.class);\n-\n     project\n         .getTasks()\n         .withType(\n             Test.class,\n             task -> {\n-              TaskProvider<Jar> bootstrapJar =\n-                  project.getTasks().register(task.getName() + \"BootstrapJar\", Jar.class);\n-\n-              Configuration testClasspath =\n-                  project.getConfigurations().findByName(task.getName() + \"RuntimeClasspath\");\n-              if (testClasspath == null) {\n-                // Same classpath as default test task\n-                testClasspath =\n-                    project\n-                        .getConfigurations()\n-                        .findByName(JavaPlugin.TEST_RUNTIME_CLASSPATH_CONFIGURATION_NAME);\n-              }\n-\n-              String bootstrapJarName = task.getName() + \"-bootstrap.jar\";\n-\n-              Configuration testClasspath0 = testClasspath;\n-              bootstrapJar.configure(\n-                  jar -> {\n-                    jar.dependsOn(testClasspath0.getBuildDependencies());\n-                    jar.getArchiveFileName().set(bootstrapJarName);\n-                    jar.setIncludeEmptyDirs(false);\n-                    // Classpath is ordered in priority, but later writes into the JAR would take\n-                    // priority, so we exclude the later ones (we need this to make sure logback is\n-                    // picked up).\n-                    jar.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE);\n-                    jar.from(\n-                        project.files(\n-                            // Needs to be a Callable so it's executed lazily at runtime, instead of\n-                            // configuration time where the classpath may still be getting built up.\n-                            (Callable<?>)\n-                                () ->\n-                                    testClasspath0.resolve().stream()\n-                                        .filter(\n-                                            file ->\n-                                                !file.isDirectory()\n-                                                    && file.getName().endsWith(\".jar\"))\n-                                        .map(project::zipTree)\n-                                        .collect(toList())));\n-\n-                    jar.eachFile(\n-                        file -> {\n-                          if (!isBootstrapClass(file.getPath())) {\n-                            file.exclude();\n-                          }\n-                        });\n-                  });\n-\n-              task.dependsOn(bootstrapJar);\n-              task.getJvmArgumentProviders()\n-                  .add(\n-                      new InstrumentationTestArgs(\n-                          new File(project.getBuildDir(), \"libs/\" + bootstrapJarName)));\n+              task.dependsOn(\":testing-bootstrap:shadowJar\");\n+              File testingBootstrapJar =\n+                  new File(\n+                      project.getRootDir(), \"testing-bootstrap/build/libs/testing-bootstrap.jar\");\n+              task.getInputs().property(\"testing-bootstrap-jar\", testingBootstrapJar);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzE3NQ==", "bodyText": "does this PR close this TODO?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523703175", "createdAt": "2020-11-15T03:50:10Z", "author": {"login": "trask"}, "path": "buildSrc/src/main/java/io/opentelemetry/instrumentation/gradle/AutoInstrumentationPlugin.java", "diffHunk": "@@ -29,106 +21,20 @@\n // TODO(anuraaga): Migrate more build logic into this plugin to avoid having two places for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzM4Mg==", "bodyText": "oh, I know this problem(!)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              exclude {\n          \n          \n            \n                // Tomcat tests require these classes from servlet API on the bootstrap classpath. They should\n          \n          \n            \n                // be harmless for other tests. Note that we cannot include everything in javax.servlet because\n          \n          \n            \n                // we expect to instrument them in the app classloader.\n          \n          \n            \n                if (it.path.startsWith(\"javax/servlet\") && !it.name.startsWith(\"ServletContext\") && !it.name.startsWith(\"ServletContainerInitializer\")) {\n          \n          \n            \n                  return true\n          \n          \n            \n                }\n          \n          \n            \n                return false\n          \n          \n            \n              }\n          \n          \n            \n              // need to exclude these logback classes from the bootstrap jar, otherwise tomcat will find them\n          \n          \n            \n              // and try to load them from the bootstrap class loader, which will fail with NoClassDefFoundError\n          \n          \n            \n              // since their super classes are servlet classes which are not in the bootstrap class loader\n          \n          \n            \n              exclude \"ch/qos/logback/classic/servlet/LogbackServletContainerInitializer.class\"\n          \n          \n            \n              exclude \"ch/qos/logback/classic/servlet/LogbackServletContextListener.class\"\n          \n          \n            \n              exclude \"META-INF/services/javax.servlet.ServletContainerInitializer\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523703382", "createdAt": "2020-11-15T03:52:48Z", "author": {"login": "trask"}, "path": "testing-bootstrap/testing-bootstrap.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+plugins {\n+  id \"com.github.johnrengelman.shadow\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+// Depend on all libraries that are in the bootstrap classloader when running the agent. When\n+// running tests, we simulate this by adding the jar produced by this project to the bootstrap\n+// classpath.\n+\n+dependencies {\n+  implementation project(\":instrumentation-api\")\n+  implementation project(\":javaagent-bootstrap\")\n+\n+  implementation deps.opentelemetryApi\n+  implementation deps.opentelemetryContext\n+  implementation deps.slf4j\n+  implementation \"ch.qos.logback:logback-classic:${versions.logback}\"\n+  implementation \"javax.servlet:javax.servlet-api:3.1.0\"\n+}\n+\n+shadowJar {\n+  archiveFileName = \"testing-bootstrap.jar\"\n+\n+  exclude {\n+    // Tomcat tests require these classes from servlet API on the bootstrap classpath. They should\n+    // be harmless for other tests. Note that we cannot include everything in javax.servlet because\n+    // we expect to instrument them in the app classloader.\n+    if (it.path.startsWith(\"javax/servlet\") && !it.name.startsWith(\"ServletContext\") && !it.name.startsWith(\"ServletContainerInitializer\")) {\n+      return true\n+    }\n+    return false\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwMzQ2NQ==", "bodyText": "see below (edit: or above \ud83d\ude02)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              implementation \"javax.servlet:javax.servlet-api:3.1.0\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523703465", "createdAt": "2020-11-15T03:54:12Z", "author": {"login": "trask"}, "path": "testing-bootstrap/testing-bootstrap.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+plugins {\n+  id \"com.github.johnrengelman.shadow\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+// Depend on all libraries that are in the bootstrap classloader when running the agent. When\n+// running tests, we simulate this by adding the jar produced by this project to the bootstrap\n+// classpath.\n+\n+dependencies {\n+  implementation project(\":instrumentation-api\")\n+  implementation project(\":javaagent-bootstrap\")\n+\n+  implementation deps.opentelemetryApi\n+  implementation deps.opentelemetryContext\n+  implementation deps.slf4j\n+  implementation \"ch.qos.logback:logback-classic:${versions.logback}\"\n+  implementation \"javax.servlet:javax.servlet-api:3.1.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91520f75c4a0afa2bb0298a570c3e65a6f16f3e1"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c719a5da073d42b3c9300c8884a1039b7f4e4c97", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c719a5da073d42b3c9300c8884a1039b7f4e4c97", "committedDate": "2020-11-15T06:23:36Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java-instrumentation into single-test-bootstrap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06cc41985972216166e8dfd4a32e1e042ac6b211", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/06cc41985972216166e8dfd4a32e1e042ac6b211", "committedDate": "2020-11-15T06:28:25Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc356edd2009304a1b8b3d7e25a4afaa8d9c78e1", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc356edd2009304a1b8b3d7e25a4afaa8d9c78e1", "committedDate": "2020-11-15T06:28:35Z", "message": "Merge branch 'single-test-bootstrap' of github.com:anuraaga/opentelemetry-java-instrumentation into single-test-bootstrap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8179d3103e301190b568baee01a3d44773669f81", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8179d3103e301190b568baee01a3d44773669f81", "committedDate": "2020-11-15T06:34:19Z", "message": "Add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "committedDate": "2020-11-15T08:18:45Z", "message": "Use buildDir instead of build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f9af2a048cf5c45e751a3ca659c814908d5f98e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5f9af2a048cf5c45e751a3ca659c814908d5f98e", "committedDate": "2020-11-15T08:08:46Z", "message": "More logging"}, "afterCommit": {"oid": "2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e52ccc9c9d0cbd0671fdc5e30918deefd64db4f", "committedDate": "2020-11-15T08:18:45Z", "message": "Use buildDir instead of build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf4750399bd39f716e5c112ba83e926d57a5e89", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cdf4750399bd39f716e5c112ba83e926d57a5e89", "committedDate": "2020-11-15T09:52:16Z", "message": "Testing SDK also in bootstrap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzgyOTU0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#pullrequestreview-530782954", "createdAt": "2020-11-15T09:53:31Z", "commit": {"oid": "cdf4750399bd39f716e5c112ba83e926d57a5e89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTo1MzozMVrOHzeQ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwOTo1MzozMVrOHzeQ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzczNTI2NQ==", "bodyText": "@trask Interestingly none of the instrumentation tests failed with this off the bootstrap, but AgentTestRunner which verifies the test classpath explicitly did. Do you know if anything we've done here has removed the requirement for this to be on the bootstrap?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1635#discussion_r523735265", "createdAt": "2020-11-15T09:53:31Z", "author": {"login": "anuraaga"}, "path": "testing-bootstrap/testing-bootstrap.gradle", "diffHunk": "@@ -0,0 +1,31 @@\n+plugins {\n+  id \"com.github.johnrengelman.shadow\"\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+// Depend on all libraries that are in the bootstrap classloader when running the agent. When\n+// running tests, we simulate this by adding the jar produced by this project to the bootstrap\n+// classpath.\n+\n+dependencies {\n+  implementation project(\":instrumentation-api\")\n+  implementation project(\":javaagent-bootstrap\")\n+  implementation project(path: \":opentelemetry-sdk-shaded-for-testing\", configuration: \"shadow\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdf4750399bd39f716e5c112ba83e926d57a5e89"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3427122c09812b4b05aa53462057e219cda0fa67", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3427122c09812b4b05aa53462057e219cda0fa67", "committedDate": "2020-11-15T19:30:58Z", "message": "Remove sdk from testing bootstrap loader"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2229, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}