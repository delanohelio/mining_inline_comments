{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjAxNDUx", "number": 1262, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo0OToxMlrOEnyfhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDowMjowOFrOEr-_Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU3MTg5OnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo0OToxMlrOHYjmZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo0OToxMlrOHYjmZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTE0MA==", "bodyText": "Based on the link from your spec issue (https://github.com/prometheus/prometheus/wiki/Default-port-allocations), it sounds like we should update that wiki page and reserve a default value dedicated to OpenTelemetry.\nIf we aren't ready to do that yet, I'd suggest we make port a required configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495511140", "createdAt": "2020-09-27T00:49:12Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTU3NjEyOnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwMDo1NTozMFrOHYjoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzozMzoyNlrOHZXReA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA==", "bodyText": "TracerInstaller is going to create an IntervalMetricReader based on this return value, and flush metrics to it every 60 seconds.\n[This could be why you aren't seeing metrics on your endpoint, although also the javaagent doesn't produce any metrics, so currently you need to use otel metric API manually in your app, and then the javaagent interop/bridge will capture and export those]\nOne option would be to add a MetricCollector SPI interface in javaagent-spi for pull-based metric \"exporters\", something like:\npublic interface MetricCollector {\n  // ExporterConfig is being deleted in #1254, replaced by `Properties`\n  // which will be nice here since this isn't exactly quite an \"exporter\"\n  void init(MetricProducer producer, ExporterConfig config);\n}\n\nand turn this class into a MetricCollector, and add something like findMetricCollector(exporterName) in TracerInstaller", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495511608", "createdAt": "2020-09-27T00:55:30Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5NzkzOA==", "bodyText": "I have switch to this API, however I still don't get any metrics from my APP.\nAn alternative solution might be to implement adapter for MetricProducer in PrometheusMetricExporterFactory that would cache the metrics returned by the MetricExporter.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495597938", "createdAt": "2020-09-27T17:55:09Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2Njk4NQ==", "bodyText": "There is smth weird going on, I am not able to get metrics from the app to the agent.\nIn the debugger I see the metrics being collected (OpenTelemetrySdk.getMeterProvider().getMetricProducer().collectAllMetrics()) but the exporter or collector do not get any metrcics.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495766985", "createdAt": "2020-09-28T08:21:04Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MDI5OA==", "bodyText": "It seems that the app is using a different instance of OpenTelemetrySdk.getMeterProvider  than the agent.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495770298", "createdAt": "2020-09-28T08:26:47Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMDMwMw==", "bodyText": "My issue is that the opentelemetry-api-beta does no kick so the calls to the OTel API in the app are noop. Since I have included only the API.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495820303", "createdAt": "2020-09-28T09:51:32Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTI2OQ==", "bodyText": "Finally, I have managed to get this working. There are two things that I have learned by hard:\n\nthe app should use only the OTel API\nI had to rebase and use OTEL 0.9.0-SNAPSHOT API in the app.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495829269", "createdAt": "2020-09-28T10:07:08Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1Nzc1Mg==", "bodyText": "sorry about that \u2639\ufe0f\nI logged #1279 for the first item, and bumped priority for the second item #1043, though that issue will magically go away once we GA since we will support all GA OTel API versions", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496357752", "createdAt": "2020-09-29T03:33:26Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricExporterFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricExporterFactory;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricExporterFactory.class)\n+public class PrometheusMetricExporterFactory implements MetricExporterFactory {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricExporterFactory.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n+\n+  @Override\n+  public MetricExporter fromConfig(ExporterConfig config) {\n+    PrometheusCollector.newBuilder()\n+        .setMetricProducer(meterSdkProvider.getMetricProducer())\n+        .buildAndRegister();\n+    try {\n+      int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n+      HTTPServer server = new HTTPServer(host, port);\n+      return new PrometheusExporter(server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMTYwOA=="}, "originalCommit": {"oid": "a6695ea995ffb90b80b025fd588659407a1326b9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzkwNTA1OnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDowODowMlrOHY3C2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo0MDoyN1rOHY51vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTcyMg==", "bodyText": "@trask @anuraaga why there is versions.opentelemetryOther and version.opentelemetry?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495829722", "createdAt": "2020-09-28T10:08:02Z", "author": {"login": "pavolloffay"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -43,6 +44,7 @@ ext {\n     opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry),\n     opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-otlp', version: versions.opentelemetry),\n     opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-zipkin', version: versions.opentelemetryOther),\n+    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-prometheus', version: versions.opentelemetry),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNTg0MA==", "bodyText": "Jfrog has been well behaved recently but often some of the snapshot artifacts have different version suffixes. We've found there to be cases of three different suffixes for the same version. An annoyance when dealing with snapshots that will go away with GA so currently living with it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495835840", "createdAt": "2020-09-28T10:19:56Z", "author": {"login": "anuraaga"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -43,6 +44,7 @@ ext {\n     opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry),\n     opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-otlp', version: versions.opentelemetry),\n     opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-zipkin', version: versions.opentelemetryOther),\n+    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-prometheus', version: versions.opentelemetry),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTcyMg=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg0MDYxMw==", "bodyText": "Which one should I use?\nCurrently all point to the same versions\n    opentelemetry       : '0.9.0-20200925.025016-49',\n    opentelemetryOther  : '0.9.0-20200925.025016-49',\n    opentelemetryAnother: '0.9.0-20200925.025016-49',", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495840613", "createdAt": "2020-09-28T10:29:10Z", "author": {"login": "pavolloffay"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -43,6 +44,7 @@ ext {\n     opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry),\n     opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-otlp', version: versions.opentelemetry),\n     opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-zipkin', version: versions.opentelemetryOther),\n+    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-prometheus', version: versions.opentelemetry),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTcyMg=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NTUxNg==", "bodyText": "Does not matter, opentelemetry is fine if it works now", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r495875516", "createdAt": "2020-09-28T11:40:27Z", "author": {"login": "iNikem"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -43,6 +44,7 @@ ext {\n     opentelemetryJaeger         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-jaeger', version: versions.opentelemetry),\n     opentelemetryOtlp           : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-otlp', version: versions.opentelemetry),\n     opentelemetryZipkin         : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-zipkin', version: versions.opentelemetryOther),\n+    opentelemetryPrometheus     : dependencies.create(group: 'io.opentelemetry', name: 'opentelemetry-exporters-prometheus', version: versions.opentelemetry),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTcyMg=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzMyNzk2OnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMzozODoxMFrOHZXV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODowNzo1M1rOHZgOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1ODg2Nw==", "bodyText": "nice thing about javaagent is we don't have to close, though we do have to worry about creating non-daemon threads, can you check that? e.g. use the javaagent w/ prometheus exporter from a command-line app and make sure we don't prevent the app from exiting and the end of main\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // TODO close the server", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496358867", "createdAt": "2020-09-29T03:38:10Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -39,22 +37,18 @@\n   // The empty address equals to any address\n   private static final String DEFAULT_HOST = \"0.0.0.0\";\n \n-  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n-\n   @Override\n-  public MetricExporter fromConfig(ExporterConfig config) {\n-    PrometheusCollector.newBuilder()\n-        .setMetricProducer(meterSdkProvider.getMetricProducer())\n-        .buildAndRegister();\n+  public void init(MetricProducer producer, ExporterConfig config) {\n+\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n     try {\n       int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n       String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n       log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n-      HTTPServer server = new HTTPServer(host, port);\n-      return new PrometheusExporter(server);\n+      // TODO close the server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f712e8c0db4e56b94a37a36df57b82059cb458d1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUwNDMyMA==", "bodyText": "Good catch, there is a daemon param on the constructor.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496504320", "createdAt": "2020-09-29T08:07:53Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -39,22 +37,18 @@\n   // The empty address equals to any address\n   private static final String DEFAULT_HOST = \"0.0.0.0\";\n \n-  private final MeterSdkProvider meterSdkProvider = OpenTelemetrySdk.getMeterProvider();\n-\n   @Override\n-  public MetricExporter fromConfig(ExporterConfig config) {\n-    PrometheusCollector.newBuilder()\n-        .setMetricProducer(meterSdkProvider.getMetricProducer())\n-        .buildAndRegister();\n+  public void init(MetricProducer producer, ExporterConfig config) {\n+\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n     try {\n       int port = config.getInt(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n       String host = config.getString(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n       log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, port);\n-      HTTPServer server = new HTTPServer(host, port);\n-      return new PrometheusExporter(server);\n+      // TODO close the server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1ODg2Nw=="}, "originalCommit": {"oid": "f712e8c0db4e56b94a37a36df57b82059cb458d1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzkxMTk5OnYy", "diffSide": "RIGHT", "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo0OTo0NVrOHZdP7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMjozNFrOHZ3IWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA==", "bodyText": "Why is this Collector and not Exporter?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496455660", "createdAt": "2020-09-29T06:49:45Z", "author": {"login": "iNikem"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NzMwOA==", "bodyText": "The name was suggested by @trask. I think we can do better.\nI am more in favor of removing this interface and use #1273", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496467308", "createdAt": "2020-09-29T07:13:04Z", "author": {"login": "pavolloffay"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3MTAyOQ==", "bodyText": "You mean removing all individual SPIs and having one single SPI OpenTelemetrySdkCustomizer?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496471029", "createdAt": "2020-09-29T07:19:37Z", "author": {"login": "iNikem"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2OTg5MA==", "bodyText": "Not really, The #1273 does not seem feasible since the static class, we could pass all the telemetry objects but that does not seem right to me.\nI have renamed the class to\npublic interface MetricProducerCustomizer {\n\n  /**\n   * Initialize the metric collector.\n   *\n   * @param producer The metric producer\n   * @param config The configuration\n   */\n  void configure(MetricProducer producer, Properties config);\n}\n\nthe `configure` method matches the `TracerCustomizer`.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496569890", "createdAt": "2020-09-29T09:23:12Z", "author": {"login": "pavolloffay"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3OTcwNw==", "bodyText": "@iNikem MetricExporter is for push-based metric exporters, there isn't a corresponding SDK interface for pull-based exporters\nthe name MetricCollector makes sense to me because they call collectAllMetrics() on the MetricProducer, as opposed to customizing the MetricProducer\nbut I'm also good with MetricProducerCustomizer\nI think the important thing that we should only support one of these two configurations:\n\nA single MetricProducerCustomizer + zero MetricExporterFactory, or\nZero MetricProducerCustomizer + any number of MetricExporterFactory (whose exporters we wrap in a single IntervalMetricReader)\n\n(but this doesn't need to be in this PR, I created #1281 to track this)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496879707", "createdAt": "2020-09-29T16:32:34Z", "author": {"login": "trask"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricCollector.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+\n+/**\n+ * A {@link MetricCollector} acts as the bootstrap for metric exporters that use {@link\n+ * MetricProducer} to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricCollector} must be registered through the Java SPI framework.\n+ */\n+public interface MetricCollector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1NTY2MA=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzkxOTkzOnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo1MjowN1rOHZdUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoxMzoxMVrOHZd9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1Njg0MA==", "bodyText": "I think this method requires documentation to explain what is going on here. Just by reading it I don't understand what is a connection between PrometheusCollector that we built and registered and HTTPServer that we started later. How that server gets metrics?\nThe absence of javadoc on PrometheusCollector does not help it neither :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496456840", "createdAt": "2020-09-29T06:52:07Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricCollector;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricCollector.class)\n+public class PrometheusMetricCollector implements MetricCollector {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricCollector.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void init(MetricProducer producer, ExporterConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2NzM2Nw==", "bodyText": "+1 I will add some docs.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496467367", "createdAt": "2020-09-29T07:13:11Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricCollector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.ExporterConfig;\n+import io.opentelemetry.javaagent.spi.exporter.MetricCollector;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@AutoService(MetricCollector.class)\n+public class PrometheusMetricCollector implements MetricCollector {\n+  private static final Logger log = LoggerFactory.getLogger(PrometheusMetricCollector.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final int DEFAULT_PORT = 9464;\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void init(MetricProducer producer, ExporterConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1Njg0MA=="}, "originalCommit": {"oid": "a1f5a25887ec0f6296d880c4faf9c89866c8927c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU3ODQ2OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMDo0MFrOHZ3DdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDoxODoxMVrOHeNZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw==", "bodyText": "Instead of this undocumented naming convention what do you think about adding a String getExporterName() method to the MetricProducerCustomizer interface?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496878453", "createdAt": "2020-09-29T16:30:40Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTkwMQ==", "bodyText": "ya, this has come up for SpanExporterFactory and MetricExporterFactory also #1253 (comment) \ud83d\ude04\nI will create a tracking issue for this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496881901", "createdAt": "2020-09-29T16:35:47Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MzY4MA==", "bodyText": "#1287", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496883680", "createdAt": "2020-09-29T16:38:32Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzODg2Nw==", "bodyText": "I think we have two different issues here. One is how to select this or that exporter. Two, it is not obvious that the class name of MetricProducerCustomizer should start with the same string as MetricExporter. E.g. if we make MetricProducerCustomizer.getExporterName it will be confusing to me: \"why customizer of MetricProducers is connected to an exporter\"?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498338867", "createdAt": "2020-10-01T15:35:55Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4ODQxOA==", "bodyText": "@iNikem the metrics can use the pull and push model. The p8s metric exporter uses pull model. It pulls metrics from OTEL once the metric endpoint is hit.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498388418", "createdAt": "2020-10-01T16:56:16Z", "author": {"login": "pavolloffay"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM5ODI1OQ==", "bodyText": "But push model is supported by our Exporters API, they don't need any new SPI, right?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498398259", "createdAt": "2020-10-01T17:14:23Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjQ3Mg==", "bodyText": "@iNikem MetricExporter supports push model, but not pull model. Pull model has to use MetricProducer directly, e.g. https://github.com/open-telemetry/opentelemetry-java/blob/a08dd9fbe4a98f34aec3618475905fa55fece87e/examples/prometheus/src/main/java/io/opentelemetry/example/PrometheusExample.java#L46-L48", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498406472", "createdAt": "2020-10-01T17:29:20Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODUyMA==", "bodyText": "E.g. if we make MetricProducerCustomizer.getExporterName it will be confusing to me: \"why customizer of MetricProducers is connected to an exporter\"?\n\nThis is maybe a reason to rename MetricProducerCustomizer. The question is what to rename it to?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498408520", "createdAt": "2020-10-01T17:33:10Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwOTE4MA==", "bodyText": "Some options:\n\nMetricConsumer\nMetricCollector\nMetricEndpoint", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498409180", "createdAt": "2020-10-01T17:34:19Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYzNzgzMA==", "bodyText": "Maybe we could unify these interfaces and just simply add MetricProducer to the current interface? If null is returned it would not install the exporter to the SDK.\npublic interface MetricExporterFactory {\n  MetricExporter fromConfig(MetricProducer, Properties);\n}\nOr it could return Optional", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498637830", "createdAt": "2020-10-02T06:33:52Z", "author": {"login": "pavolloffay"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE3NzY1Ng==", "bodyText": "there's some benefit to having different factories for push and pull cases, since we can support multiple push factories, but only a single pull factory (and not both): #1281 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r499177656", "createdAt": "2020-10-03T20:03:04Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzODk2OQ==", "bodyText": "@pavolloffay @iNikem @anuraaga I think we just need a name for MetricProducerCustomizer and then good to merge.\nWhat do you think of:\npublic interface MetricExporterInitializer {\n  void start(MetricProducer, Properties);\n}\n\nThough maybe that's too close to MetricExporterFactory, and people might use MetricExporterInitializer accidentally when it would be better to use MetricExporterFactory (which can support multiple exporters, and can be configured using IntervalMetricReader).\nAnother option is to go all-in on the one use case we have so far (exposing a metric server):\npublic interface MetricServer {\n  void start(MetricProducer, Properties);\n}\n\nI'm struggling to come up with a name that's both general and not confusing, so would probably opt for the narrower and less confusing MetricServer. (credit to @iNikem for this name btw)\nThoughts?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r501438969", "createdAt": "2020-10-08T04:18:11Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -99,6 +108,23 @@ private static MetricExporterFactory findMetricExporterFactory(String exporterNa\n     return null;\n   }\n \n+  private static MetricProducerCustomizer findMetricCollector(String exporterName) {\n+    ServiceLoader<MetricProducerCustomizer> serviceLoader =\n+        ServiceLoader.load(MetricProducerCustomizer.class, TracerInstaller.class.getClassLoader());\n+\n+    for (MetricProducerCustomizer metricProducerCustomizer : serviceLoader) {\n+      if (metricProducerCustomizer\n+          .getClass()\n+          .getSimpleName()\n+          .replace(\"_\", \"\")\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODQ1Mw=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU5OTYzOnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNTozNFrOHZ3QZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMToyNFrOHbNQNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTc2Ng==", "bodyText": "Just wondering: shouldn't these settings be prefixed with otel.exporter. or at least otel.?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496881766", "createdAt": "2020-09-29T16:35:34Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NTEwNw==", "bodyText": "oh ya, this just changed in #1254, ExporterConfig used to automagically add the prefix", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r496885107", "createdAt": "2020-09-29T16:40:39Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTc2Ng=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4NjU1Mg==", "bodyText": "@pavolloffay can you check this? then I think good to merge!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r497986552", "createdAt": "2020-10-01T05:09:13Z", "author": {"login": "trask"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTc2Ng=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MDc0MQ==", "bodyText": "sorry for the delay I have updated it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498290741", "createdAt": "2020-10-01T14:31:24Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTc2Ng=="}, "originalCommit": {"oid": "16af2556fdc96397ceb92c300cdc87929bb0cab7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTgxNTY4OnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozMDowNlrOHbP74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozMDowNlrOHbP74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNDY5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n          \n          \n            \n             * PrometheusCollector}. The collector pulls metrics from the producer when the", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498334691", "createdAt": "2020-10-01T15:30:06Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTgyMTUzOnYy", "diffSide": "RIGHT", "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozMToxNlrOHbP_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo1NDowNVrOHbTJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNTYxMQ==", "bodyText": "Sorry, but I still not quite understand how HTTPServer and PrometheusCollector are connected :(", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498335611", "createdAt": "2020-10-01T15:31:16Z", "author": {"login": "iNikem"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"otel.exporter.prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final String DEFAULT_PORT = \"9464\";\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void configure(MetricProducer producer, Properties config) {\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n+    try {\n+      String portStr = config.getProperty(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getProperty(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, portStr);\n+      new HTTPServer(host, Integer.parseInt(portStr), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4NzIyMg==", "bodyText": "Added a comment", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498387222", "createdAt": "2020-10-01T16:54:05Z", "author": {"login": "pavolloffay"}, "path": "javaagent-exporters/prometheus/src/main/java/io/opentelemetry/javaagent/exporters/prometheus/PrometheusMetricProducerCustomizer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.exporters.prometheus;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.exporters.prometheus.PrometheusCollector;\n+import io.opentelemetry.javaagent.spi.exporter.MetricProducerCustomizer;\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import io.prometheus.client.exporter.HTTPServer;\n+import java.io.IOException;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PrometheusMetricProducerCustomizer} registers {@link MetricProducer} to the ${@link\n+ * PrometheusMetricProducerCustomizer}. The collector pulls metrics from the producer when the\n+ * Prometheus server scraps metric endpoint.\n+ */\n+@AutoService(MetricProducerCustomizer.class)\n+public class PrometheusMetricProducerCustomizer implements MetricProducerCustomizer {\n+  private static final Logger log =\n+      LoggerFactory.getLogger(PrometheusMetricProducerCustomizer.class);\n+\n+  private static final String EXPORTER_NAME = \"otel.exporter.prometheus\";\n+  private static final String PORT_CONF_PROP_NAME = EXPORTER_NAME + \".port\";\n+  private static final String HOST_CONF_PROP_NAME = EXPORTER_NAME + \".host\";\n+  private static final String DEFAULT_PORT = \"9464\";\n+  // The empty address equals to any address\n+  private static final String DEFAULT_HOST = \"0.0.0.0\";\n+\n+  @Override\n+  public void configure(MetricProducer producer, Properties config) {\n+    PrometheusCollector.newBuilder().setMetricProducer(producer).buildAndRegister();\n+    try {\n+      String portStr = config.getProperty(PORT_CONF_PROP_NAME, DEFAULT_PORT);\n+      String host = config.getProperty(HOST_CONF_PROP_NAME, DEFAULT_HOST);\n+      log.info(\"Creating Prometheus exporter on host: '{}' and port: '{}'\", host, portStr);\n+      new HTTPServer(host, Integer.parseInt(portStr), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNTYxMQ=="}, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTg0NjYxOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTozNjo1N1rOHbQPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo1MjozNFrOHbTF0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzOTYxNw==", "bodyText": "What collector? I see MetricProducerCustomizer and MetricProducer in method body, what is collector? :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498339617", "createdAt": "2020-10-01T15:36:57Z", "author": {"login": "iNikem"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -165,6 +191,14 @@ private static void installExporter(SpanExporterFactory spanExporterFactory, Pro\n     log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n   }\n \n+  private static void installCollector(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4NjM4Ng==", "bodyText": "This is a leftover from the previous naming. I will rename it to match the new name.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r498386386", "createdAt": "2020-10-01T16:52:34Z", "author": {"login": "pavolloffay"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -165,6 +191,14 @@ private static void installExporter(SpanExporterFactory spanExporterFactory, Pro\n     log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n   }\n \n+  private static void installCollector(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzOTYxNw=="}, "originalCommit": {"oid": "e4868abaa7f74547dd7a63970eb97e35f681670a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTU2MjMwOnYy", "diffSide": "RIGHT", "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDowMjowOFrOHfDWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzowODo0NVrOHfSIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMjgxMQ==", "bodyText": "Do you think configure is a better name than start as Trask proposed?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r502322811", "createdAt": "2020-10-09T10:02:08Z", "author": {"login": "iNikem"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricServer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import java.util.Properties;\n+\n+/**\n+ * A {@link MetricServer} acts as the bootstrap for metric exporters that use {@link MetricProducer}\n+ * to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricServer} must be registered through the Java SPI framework.\n+ */\n+public interface MetricServer {\n+\n+  /**\n+   * Initialize the metric server that pull metric from the {@link MetricProducer}.\n+   *\n+   * @param producer The metric producer\n+   * @param config The configuration\n+   */\n+  void configure(MetricProducer producer, Properties config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NDg2OA==", "bodyText": "my bad I didn't pay attention. Either one if fine with me, I will rename it to start.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1262#discussion_r502564868", "createdAt": "2020-10-09T17:08:45Z", "author": {"login": "pavolloffay"}, "path": "javaagent-spi/src/main/java/io/opentelemetry/javaagent/spi/exporter/MetricServer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.spi.exporter;\n+\n+import io.opentelemetry.sdk.metrics.export.MetricProducer;\n+import java.util.Properties;\n+\n+/**\n+ * A {@link MetricServer} acts as the bootstrap for metric exporters that use {@link MetricProducer}\n+ * to consume the metrics.\n+ *\n+ * <p>Implementation of {@link MetricServer} must be registered through the Java SPI framework.\n+ */\n+public interface MetricServer {\n+\n+  /**\n+   * Initialize the metric server that pull metric from the {@link MetricProducer}.\n+   *\n+   * @param producer The metric producer\n+   * @param config The configuration\n+   */\n+  void configure(MetricProducer producer, Properties config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMjgxMQ=="}, "originalCommit": {"oid": "9fd49434eea5d7f4e9ab01f83c9c66e7dd3eaf2a"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}