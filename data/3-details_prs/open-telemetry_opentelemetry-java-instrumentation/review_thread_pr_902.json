{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzA0MDQ2", "number": 902, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1Nzo0MVrOEVo1wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoxMDo1OVrOEWZ5qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTI0NjczOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1Nzo0MVrOG8ggvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1Nzo0MVrOG8ggvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String message = t.getMessage();\n          \n          \n            \n                span.addEvent(message);\n          \n          \n            \n                span.setAttribute(\"error\", true);\n          \n          \n            \n                span.setStatus(Status.UNKNOWN);\n          \n          \n            \n                span.recordException(t);\n          \n          \n            \n                span.setStatus(Status.INTERNAL);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466100414", "createdAt": "2020-08-06T01:57:41Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed\n+ * by the Spring container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    String message = t.getMessage();\n+    span.addEvent(message);\n+    span.setAttribute(\"error\", true);\n+    span.setStatus(Status.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2b230140e0394a01d0009b98b3ce77a5cd138b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTU5NTE1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMTozMFrOG8jsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMTozMFrOG8jsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjYxNg==", "bodyText": "It should be className.methodName", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152616", "createdAt": "2020-08-06T05:21:30Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(final ProceedingJoinPoint pjp) {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      spanName = method.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTU5NjQ4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMjoyNFrOG8jteQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMjoyNFrOG8jteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjgyNQ==", "bodyText": "WithSpan now supports kind attribute as well for setting span kind. Do you want to support this as well?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466152825", "createdAt": "2020-08-06T05:22:24Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc5be6ec6deac77ac6629ff440ff6edba21b3b8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg2NzE5OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMDoyM1rOG9Mh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMDoyM1rOG9Mh2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTU5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configures {@link WithSpanAspect} to trace spring beans. */\n          \n          \n            \n            /** Configures {@link WithSpanAspect} to trace bean methods annotated with {@link WithSpan}. */", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821592", "createdAt": "2020-08-07T05:00:23Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/** Configures {@link WithSpanAspect} to trace spring beans. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg2NzM0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMDozM1rOG9Mh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMDozM1rOG9Mh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTYxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Configuration for enabling aspects. */\n          \n          \n            \n            /** Configuration for enabling tracing aspects. */", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821617", "createdAt": "2020-08-07T05:00:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/TraceAspectProperties.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/** Configuration for enabling aspects. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg2ODY1OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMToyMlrOG9MiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowMjowNVrOG9dUlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTgyNQ==", "bodyText": "Statics before non-statics", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821825", "createdAt": "2020-08-07T05:01:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5NjcyNw==", "bodyText": "I removed the logger", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467096727", "createdAt": "2020-08-07T15:02:05Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTgyNQ=="}, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg2OTAwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMTozNlrOG9Mi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODoyODowNlrOG9jyfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTg3Nw==", "bodyText": "Don't think we need final in the arguments", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821877", "createdAt": "2020-08-07T05:01:36Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMjY4Nw==", "bodyText": "ya our convention here is not clear, i opened #921 to clarify and sync up our codebase to match our desired convention", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467202687", "createdAt": "2020-08-07T18:28:06Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTg3Nw=="}, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTg2OTMxOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMTo0OVrOG9MjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTowMTo0OVrOG9MjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMTkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(getSpanName(pjp));", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466821926", "createdAt": "2020-08-07T05:01:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();\n+    logger.info(getSpanName(pjp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk4MzAzOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNDo0NFrOG9Nk6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNDo0NFrOG9Nk6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzODc2Mw==", "bodyText": "You should take kind from WithSpan annotation, if that is present.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r466838763", "createdAt": "2020-08-07T06:04:44Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  private static final Logger logger = LoggerFactory.getLogger(WithSpanAspect.class);\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(final ProceedingJoinPoint pjp) throws Throwable {\n+    Span span = tracer.spanBuilder(getSpanName(pjp)).setSpanKind(Kind.INTERNAL).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1287187549e16f88c7b7ced32edebb80b270bf0b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODMzOTgyOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozMTo1NFrOG9j5UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozMTo1NFrOG9j5UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNDQzMg==", "bodyText": "i think these two lines will read better inlined into the catch block", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467204432", "createdAt": "2020-08-07T18:31:54Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link\n+ * io.opentelemetry.trace.Span}.\n+ *\n+ * <p>Ensure methods annotated with {@link WithSpan} are implemented on beans managed by the Spring\n+ * container.\n+ */\n+@Aspect\n+public class WithSpanAspect {\n+\n+  private final Tracer tracer;\n+\n+  public WithSpanAspect(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Around(\"@annotation(io.opentelemetry.extensions.auto.annotations.WithSpan)\")\n+  public Object traceMethod(ProceedingJoinPoint pjp) throws Throwable {\n+    MethodSignature signature = (MethodSignature) pjp.getSignature();\n+    Method method = signature.getMethod();\n+    WithSpan withSpan = method.getAnnotation(WithSpan.class);\n+\n+    Span span =\n+        tracer.spanBuilder(getSpanName(withSpan, method)).setSpanKind(withSpan.kind()).startSpan();\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return pjp.proceed();\n+    } catch (Throwable t) {\n+      errorHandler(span, t);\n+      throw t;\n+    } finally {\n+      span.end();\n+    }\n+  }\n+\n+  private String getSpanName(WithSpan withSpan, Method method) {\n+    String spanName = withSpan.value();\n+    if (spanName.isEmpty()) {\n+      return method.getDeclaringClass().getSimpleName() + \".\" + method.getName();\n+    }\n+    return spanName;\n+  }\n+\n+  private void errorHandler(Span span, Throwable t) {\n+    span.recordException(t);\n+    span.setStatus(Status.INTERNAL);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM0NDUwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozMzo0OFrOG9j8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozMzo0OFrOG9j8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNTIwMQ==", "bodyText": "nice tests \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467205201", "createdAt": "2020-08-07T18:33:48Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODM1MjU4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODozNjo0OFrOG9kBag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMzoyMTowNFrOG9tE5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg==", "bodyText": "based on discussion in #846, does this make sense?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              api deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              api deps.opentelemetryLogging\n          \n          \n            \n              api deps.opentelemetrySdk\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              compileOnly deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              compileOnly deps.opentelemetrySdk", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467206506", "createdAt": "2020-08-07T18:36:48Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MDcxMw==", "bodyText": "For the starter I'd like to provide all the opentelemetry dependencies required to instrument a spring application. Users can create their own custom starters and supply their own implementation of the opentelemetry-sdk and opentelemetryApiAutoAnnotations using opentelemetry-spring-boot-autoconfigure project. Here's that gradle file:\n\nhttps://github.com/mabdinur/opentelemetry-java-instrumentation/blob/add_with_span_spring_aop/instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle.\n\nHere's a pull request that documents this behavior:\nhttps://github.com/mabdinur/opentelemetry-java-instrumentation/pull/14/files", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467280713", "createdAt": "2020-08-07T21:30:34Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg=="}, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjYwNg==", "bodyText": "What would make sense is removing the opentelemetrySdk dependency since this is provided by the default logger (opentelemetryLogging). I'm not sure if this change would reduce readability.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              api deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              api deps.opentelemetryLogging\n          \n          \n            \n              api deps.opentelemetrySdk\n          \n          \n            \n              api deps.opentelemetryApiAutoAnnotations\n          \n          \n            \n              api deps.opentelemetryApi\n          \n          \n            \n              api deps.opentelemetryLogging", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467282606", "createdAt": "2020-08-07T21:33:06Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg=="}, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NjkzOQ==", "bodyText": "Yeah that discussion wasn't about starter :) I think it should have out-of-the-box deps. Could even add otlp by default, reconfigure would be similar to the process for reconfiguring logging to use log4j instead of logback (exclude and add dependency)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467346939", "createdAt": "2020-08-08T01:52:02Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg=="}, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM1NDg1Mg==", "bodyText": "Could even add otlp by default, reconfigure would be similar to the process for reconfiguring logging to use log4j instead of logback (exclude and add dependency)\n\nI like this idea. I opened #923 to track/discuss.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467354852", "createdAt": "2020-08-08T03:21:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/starters/spring-starter/spring-starter.gradle", "diffHunk": "@@ -11,7 +11,9 @@ sourceCompatibility = '8'\n \n dependencies { \n   api group: \"org.springframework.boot\", name: \"spring-boot-starter\", version: versions.springboot\n+  api group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springboot\n   api project(':instrumentation-core:spring:spring-boot-autoconfigure')\n+  api deps.opentelemetryApiAutoAnnotations\n   api deps.opentelemetryApi\n   api deps.opentelemetryLogging\n   api deps.opentelemetrySdk", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwNjUwNg=="}, "originalCommit": {"oid": "706570ba8eb0abe13105f8efddcbd997045fca40"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI3MDA4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMTo1MzoyMVrOG9smdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjowMzoyMFrOG9sqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NzA2MQ==", "bodyText": "Can you add a test with a constructor? We document that it works so should test it (not sure if it would, since usually constructors happen before becoming a bean). If it doesn't work let's update the javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467347061", "createdAt": "2020-08-08T01:53:21Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {\n+  static class WithSpanTester {\n+    @WithSpan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODA0NQ==", "bodyText": "I will update the java docs. This spring aspect won't work on a constructor. It only proxies beans after initialization", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467348045", "createdAt": "2020-08-08T02:03:20Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/test/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspectTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.reflect.MethodSignature;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.aop.aspectj.annotation.AspectJProxyFactory;\n+\n+/** Spring AOP Test for {@link WithSpanAspect} */\n+@ExtendWith(MockitoExtension.class)\n+public class WithSpanAspectTest {\n+  static class WithSpanTester {\n+    @WithSpan", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0NzA2MQ=="}, "originalCommit": {"oid": "12a9b3f78c2c1d714f0a42b766d460daa0335ecd"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTI4NDkwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoxMDo1OVrOG9stiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMjoxMDo1OVrOG9stiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM0ODg3Mw==", "bodyText": "Ah sorry I meant this doc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/902#discussion_r467348873", "createdAt": "2020-08-08T02:10:59Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/aspects/WithSpanAspect.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.aspects;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.extensions.auto.annotations.WithSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.lang.reflect.Method;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.reflect.MethodSignature;\n+\n+/**\n+ * Uses Spring-AOP to wrap methods and constructors marked by {@link WithSpan} in a {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51e4e638b7ee30b95ad19187930bd53b4c641b7f"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 231, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}