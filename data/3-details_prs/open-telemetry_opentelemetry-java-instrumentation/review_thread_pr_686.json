{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTMzODU5", "number": 686, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozNDo1OFrOEOBtTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozNDo1OFrOEOBtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTQzNTAwOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjozNDo1OFrOGw9Drg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1OTo1OVrOGxXwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4NTE5OA==", "bodyText": "There's a throwable != null check in DECORATE.onError(). This if statement seems redundant.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/686#discussion_r453985198", "createdAt": "2020-07-13T22:34:58Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -52,29 +49,21 @@ public static void addFilter(\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    final Span span =\n-        tracer.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n+    final Span span = DECORATE.getOrCreateSpan(request, tracer);\n     DECORATE.afterStart(span);\n \n     try (final Scope scope = TRACER.withSpan(span)) {\n       final ClientRequest mutatedRequest =\n           ClientRequest.from(request)\n-              .headers(\n-                  httpHeaders ->\n-                      OpenTelemetry.getPropagators()\n-                          .getHttpTextFormat()\n-                          .inject(Context.current(), httpHeaders, SETTER))\n+              .headers(httpHeaders -> DECORATE.inject(Context.current(), httpHeaders))\n               .build();\n       DECORATE.onRequest(span, mutatedRequest);\n \n       return next.exchange(mutatedRequest)\n           .doOnSuccessOrError(\n               (clientResponse, throwable) -> {\n-                if (throwable != null) {\n-                  DECORATE.onError(span, throwable);\n-                } else {\n-                  DECORATE.onResponse(span, clientResponse);\n-                }\n+                DECORATE.onError(span, throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3f1238102288c1716a8f55f8ff8611afd347bbb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MzAwNg==", "bodyText": "I think we have some deep checks like that but would prefer code to read better, rather than be minimum LoC - I'm thinking some day such a deep null check will be gone.\nHere, it doesn't really sound right to call onError when it's not an error, so having the if check makes this code more readable than without it IMO (and if I understood him correctly, @iNikem too :) )", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/686#discussion_r454173006", "createdAt": "2020-07-14T07:55:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -52,29 +49,21 @@ public static void addFilter(\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    final Span span =\n-        tracer.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n+    final Span span = DECORATE.getOrCreateSpan(request, tracer);\n     DECORATE.afterStart(span);\n \n     try (final Scope scope = TRACER.withSpan(span)) {\n       final ClientRequest mutatedRequest =\n           ClientRequest.from(request)\n-              .headers(\n-                  httpHeaders ->\n-                      OpenTelemetry.getPropagators()\n-                          .getHttpTextFormat()\n-                          .inject(Context.current(), httpHeaders, SETTER))\n+              .headers(httpHeaders -> DECORATE.inject(Context.current(), httpHeaders))\n               .build();\n       DECORATE.onRequest(span, mutatedRequest);\n \n       return next.exchange(mutatedRequest)\n           .doOnSuccessOrError(\n               (clientResponse, throwable) -> {\n-                if (throwable != null) {\n-                  DECORATE.onError(span, throwable);\n-                } else {\n-                  DECORATE.onResponse(span, clientResponse);\n-                }\n+                DECORATE.onError(span, throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4NTE5OA=="}, "originalCommit": {"oid": "c3f1238102288c1716a8f55f8ff8611afd347bbb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMjY1Mw==", "bodyText": "Decorators usually have null checks inside methods. New Tracers usually has them outside.\nBut in this particular case, you have to decide either call this method or that method. Calling onError always assuming/hoping that it is a no-op if throwable is null does not seem write to me.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/686#discussion_r454422653", "createdAt": "2020-07-14T14:59:59Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -52,29 +49,21 @@ public static void addFilter(\n \n   @Override\n   public Mono<ClientResponse> filter(final ClientRequest request, final ExchangeFunction next) {\n-    final Span span =\n-        tracer.spanBuilder(DECORATE.spanNameForRequest(request)).setSpanKind(CLIENT).startSpan();\n+    final Span span = DECORATE.getOrCreateSpan(request, tracer);\n     DECORATE.afterStart(span);\n \n     try (final Scope scope = TRACER.withSpan(span)) {\n       final ClientRequest mutatedRequest =\n           ClientRequest.from(request)\n-              .headers(\n-                  httpHeaders ->\n-                      OpenTelemetry.getPropagators()\n-                          .getHttpTextFormat()\n-                          .inject(Context.current(), httpHeaders, SETTER))\n+              .headers(httpHeaders -> DECORATE.inject(Context.current(), httpHeaders))\n               .build();\n       DECORATE.onRequest(span, mutatedRequest);\n \n       return next.exchange(mutatedRequest)\n           .doOnSuccessOrError(\n               (clientResponse, throwable) -> {\n-                if (throwable != null) {\n-                  DECORATE.onError(span, throwable);\n-                } else {\n-                  DECORATE.onResponse(span, clientResponse);\n-                }\n+                DECORATE.onError(span, throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk4NTE5OA=="}, "originalCommit": {"oid": "c3f1238102288c1716a8f55f8ff8611afd347bbb"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 382, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}