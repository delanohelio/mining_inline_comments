{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjE2NTky", "number": 573, "title": "Propagate full Context while processing http server requests", "bodyText": "Partially addresses #507. Complement to #572", "createdAt": "2020-06-24T13:42:45Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573", "merged": true, "mergeCommit": {"oid": "bfd7f4428d9cea98fecb68f6ea5151c74d3ab9ed"}, "closed": true, "closedAt": "2020-06-26T17:13:13Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcub_gWAH2gAyNDM5MjE2NTkyOmUxZDFhOTdmZDNlMTU5MDgwMmNkMjIzY2Y5MDJmNjkzOGI0YTgyN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvENJPAH2gAyNDM5MjE2NTkyOmQyYjAxNGEzYjMxYmUwYzFiYWQ4NTRlYmExNDM0ZDY4ODM2NjZmNzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "committedDate": "2020-06-24T15:43:24Z", "message": "Propagate full Context while processing http server requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1848b32d4b0266d3dca4a796c1b1e90c76fb9a72", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1848b32d4b0266d3dca4a796c1b1e90c76fb9a72", "committedDate": "2020-06-24T13:41:24Z", "message": "Propagate full Context while processing http server requests"}, "afterCommit": {"oid": "e1d1a97fd3e1590802cd223cf902f6938b4a827f", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e1d1a97fd3e1590802cd223cf902f6938b4a827f", "committedDate": "2020-06-24T15:43:24Z", "message": "Propagate full Context while processing http server requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/967d0935f5c9ad0007539b8fd1bf35e411bbca45", "committedDate": "2020-06-24T18:00:38Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTU0Mzk5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#pullrequestreview-436954399", "createdAt": "2020-06-24T19:46:18Z", "commit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo0NjoxOFrOGogn6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDozMFrOGolKig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMDczMQ==", "bodyText": "currently at least, this method isn't needed (the only callers use the public overrides directly)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445130731", "createdAt": "2020-06-24T19:46:18Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -223,9 +230,15 @@ private void setStatus(Span span, int status) {\n \n   protected abstract String method(REQUEST request);\n \n-  protected void attachSpanToRequest(Span span, REQUEST request) {}\n+  /** Stores given context in the given request in implementation specific way. */\n+  protected void attachContextToRequest(Context context, REQUEST request) {}\n \n-  protected Span getAttachedSpan(REQUEST request) {\n+  /**\n+   * Returns context stored to given request by {@link #attachContextToRequest(Context, REQUEST)}.\n+   *\n+   * <p>May be null.\n+   */\n+  protected Context getAttachedContext(REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzMTEzMQ==", "bodyText": "what do u think of startScope?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445131131", "createdAt": "2020-06-24T19:47:07Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/HttpServerTracer.java", "diffHunk": "@@ -172,8 +173,15 @@ public Span getCurrentSpan() {\n     return tracer.getCurrentSpan();\n   }\n \n-  public Scope withSpan(Span span) {\n-    return tracer.withSpan(span);\n+  /**\n+   * Creates new scoped context with the given span.\n+   *\n+   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n+   */\n+  public Scope newScope(Span span, REQUEST request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzODY5MQ==", "bodyText": "not related to this PR, but how about below\nmaybe at some point we could make HttpServerTracer.CONTEXT_ATTRIBUTE protected to force access via tracers(?)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                  if (contextAttribute instanceof Context) {\n          \n          \n            \n                    request.removeAttribute(CONTEXT_ATTRIBUTE);\n          \n          \n            \n                    TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n          \n          \n            \n                  }\n          \n          \n            \n                  Context context = TRACER.removeAttachedContext(request);\n          \n          \n            \n                  if (context != null) {\n          \n          \n            \n                    TRACER.end(getSpan(context), request.getResponse().getStatus());\n          \n          \n            \n                  }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445138691", "createdAt": "2020-06-24T20:01:21Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-2.0/src/main/java/io/opentelemetry/auto/instrumentation/grizzly/GrizzlyHttpHandlerInstrumentation.java", "diffHunk": "@@ -111,10 +113,10 @@ public static void methodExit(\n \n     @Override\n     public void onAfterService(final Request request) {\n-      final Object spanAttr = request.getAttribute(SPAN_ATTRIBUTE);\n-      if (spanAttr instanceof Span) {\n-        request.removeAttribute(SPAN_ATTRIBUTE);\n-        TRACER.end((Span) spanAttr, request.getResponse().getStatus());\n+      final Object contextAttribute = request.getAttribute(CONTEXT_ATTRIBUTE);\n+      if (contextAttribute instanceof Context) {\n+        request.removeAttribute(CONTEXT_ATTRIBUTE);\n+        TRACER.end(getSpan((Context) contextAttribute), request.getResponse().getStatus());\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MDc0NQ==", "bodyText": "this just got re-worked in DataDog/dd-trace-java#1595", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445170745", "createdAt": "2020-06-24T21:03:59Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/request-3.0/src/main/java/io/opentelemetry/auto/instrumentation/servlet/v3_0/Servlet3HttpServerTracer.java", "diffHunk": "@@ -73,22 +77,23 @@ public void onRequest(Span span, HttpServletRequest request) {\n    * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n    * chain.\n    */\n+  // TODO review this hacky-hacky", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3MzAwMw==", "bodyText": "\"ServletContext\" sounds so much like something else, maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Advice.Local(\"_originalServletContext\") Object originalServletContext,\n          \n          \n            \n                    @Advice.Local(\"_originalContext\") Object originalContext,", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445173003", "createdAt": "2020-06-24T21:08:51Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -87,12 +90,13 @@ public RequestDispatcherInstrumentation() {\n     public static SpanWithScope start(\n         @Advice.Origin(\"#m\") final String method,\n         @Advice.This final RequestDispatcher dispatcher,\n-        @Advice.Local(\"_originalServletSpan\") Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") Object originalServletContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDg5MA==", "bodyText": "hm, good question, i think include and forward are synchronous, so thread-local context propagation should be enough", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445200890", "createdAt": "2020-06-24T22:13:08Z", "author": {"login": "trask"}, "path": "instrumentation/servlet/src/main/java/io/opentelemetry/auto/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -125,28 +129,31 @@ public static SpanWithScope start(\n \n       // save the original servlet span before overwriting the request attribute, so that it can be\n       // restored on method exit\n-      originalServletSpan = request.getAttribute(SPAN_ATTRIBUTE);\n+      originalServletContext = request.getAttribute(CONTEXT_ATTRIBUTE);\n \n       // this tells the dispatched servlet to use the current span as the parent for its work\n-      request.setAttribute(SPAN_ATTRIBUTE, span);\n+      Context newContext = withSpan(span, Context.current());\n+      request.setAttribute(CONTEXT_ATTRIBUTE, newContext);\n \n-      return new SpanWithScope(span, currentContextWith(span));\n+      return new SpanWithScope(span, withScopedContext(newContext));\n     }\n \n     @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n     public static void stop(\n         @Advice.Enter final SpanWithScope spanWithScope,\n-        @Advice.Local(\"_originalServletSpan\") final Object originalServletSpan,\n+        @Advice.Local(\"_originalServletContext\") final Object originalServletContext,\n         @Advice.Argument(0) final ServletRequest request,\n         @Advice.Thrown final Throwable throwable) {\n       if (spanWithScope == null) {\n         return;\n       }\n \n       // restore the original servlet span\n-      // since spanWithScope is non-null here, originalServletSpan must have been set with the prior\n+      // since spanWithScope is non-null here, originalServletContext must have been set with the\n+      // prior\n       // servlet span (as opposed to remaining unset)\n-      request.setAttribute(SPAN_ATTRIBUTE, originalServletSpan);\n+      // TODO review this logic. Seems like manual context management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTEzMA==", "bodyText": "can u hold off on this scala-related cleanup? there's big changes coming shortly in DataDog/dd-trace-java#1625", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#discussion_r445205130", "createdAt": "2020-06-24T22:24:30Z", "author": {"login": "trask"}, "path": "instrumentation/java-concurrent/akka-2.5-testing/akka-2.5-testing.gradle", "diffHunk": "@@ -4,12 +4,8 @@ ext {\n }\n \n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n-apply from: \"$rootDir/gradle/test-with-scala.gradle\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967d0935f5c9ad0007539b8fd1bf35e411bbca45"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5c1d7d047f2ed915556f6486e7db6d8f0829821", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b5c1d7d047f2ed915556f6486e7db6d8f0829821", "committedDate": "2020-06-25T06:36:20Z", "message": "Polish and revert scala test related changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf", "committedDate": "2020-06-25T06:59:42Z", "message": "Merge branch 'master' into request-context-propagation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTAyNDg2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/573#pullrequestreview-437902486", "createdAt": "2020-06-25T22:29:12Z", "commit": {"oid": "abec5d5f5b2a8c7412968f8b2d40adace5ed7dbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e2b6077c26e07b2c98e8d8837003d91daa0259", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e2e2b6077c26e07b2c98e8d8837003d91daa0259", "committedDate": "2020-06-26T14:12:17Z", "message": "Merge remote-tracking branch 'upstream/master' into request-context-propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2b014a3b31be0c1bad854eba1434d6883666f77", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2b014a3b31be0c1bad854eba1434d6883666f77", "committedDate": "2020-06-26T14:34:30Z", "message": "Format"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2999, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}