{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTM3MDU1", "number": 516, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODowMDoyNFrOEFVpDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODoxNzo1MVrOEFVtJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMyOTA5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODowMDoyNFrOGjeieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODowMDoyNFrOGjeieQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1MzY4OQ==", "bodyText": "\"OpenTelemetry exporter\" sounds ambiguous to me, leaves me wondering \"which OpenTelemetry exporter?\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [OpenTelemetry exporter](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp)\n          \n          \n            \n            [OTLP exporter](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/516#discussion_r439853689", "createdAt": "2020-06-14T18:00:24Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -4,28 +4,37 @@\n \n This project provides a Java agent JAR that can be attached to any Java 7+\n application and dynamically injects bytecode to capture telemetry from a\n-number of popular libraries and frameworks. The telemetry data can exported\n-in a variety of formats each provided as their own independent JAR. In\n-addition, the agent and exporter can be configured via command line arguments\n+number of popular libraries and frameworks. \n+The telemetry data can be exported in a variety of formats. \n+In addition, the agent and exporter can be configured via command line arguments\n or environment variables. The net result is the ability to gather telemetry\n data from a Java application without code changes.\n \n ## Getting Started\n \n-Download the [latest\n-release](https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases)\n-of the Java agent and available exporters.\n+[ ![Download](https://api.bintray.com/packages/open-telemetry/maven/opentelemetry-java-instrumentation/images/download.svg) ](https://bintray.com/open-telemetry/maven/opentelemetry-java-instrumentation/_latestVersion)\n+\n+The easiest way to start is to download \"all-in\" package, which includes instrumentation agent,\n+instrumentations for all supported libraries and all available data exporters.\n+This provides completely automatic out of the box experience.\n+TODO add here screenshot from Bintray download list.\n \n The instrumentation agent is enabled using the `-javaagent` flag to the JVM.\n-Configuration parameters are passed as Java system properties (`-D` flags) or\n-as environment variables. Both the Java agent and exporter configuration must\n-be defined before the application JAR. For example:\n+```\n+java -javaagent:path/to/opentelemetry-auto-<version>-all.jar \\\n+     -jar myapp.jar\n+```\n+By default OpenTelemetry Java agent uses \n+[OpenTelemetry exporter](https://github.com/open-telemetry/opentelemetry-java/tree/master/exporters/otlp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240f54bc78724ee79ea337d9d1a11c8c6d086674"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMzMTI4OnYy", "diffSide": "LEFT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODowMzo0MVrOGjejfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODowMzo0MVrOGjejfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1Mzk1MQ==", "bodyText": "\ud83c\udf89", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/516#discussion_r439853951", "createdAt": "2020-06-14T18:03:41Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -227,9 +240,6 @@ High-level roadmap:\n       [opentelemetry-specification#522](https://github.com/open-telemetry/opentelemetry-specification/issues/522))\n   * See issues with label\n     [specification](https://github.com/open-telemetry/opentelemetry-java-instrumentation/labels/specification)\n-* Simpler exporter configuration\n-  * See issue\n-    [#370](https://github.com/open-telemetry/opentelemetry-java-instrumentation/issues/370)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240f54bc78724ee79ea337d9d1a11c8c6d086674"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMzNzMyOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODoxMzozOVrOGjemtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNTo0MTozN1rOGjj1Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1NDc3Mg==", "bodyText": "This seems a bit complicated. Can we provide a direct link to download the -all package?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/516#discussion_r439854772", "createdAt": "2020-06-14T18:13:39Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -4,28 +4,37 @@\n \n This project provides a Java agent JAR that can be attached to any Java 7+\n application and dynamically injects bytecode to capture telemetry from a\n-number of popular libraries and frameworks. The telemetry data can exported\n-in a variety of formats each provided as their own independent JAR. In\n-addition, the agent and exporter can be configured via command line arguments\n+number of popular libraries and frameworks. \n+The telemetry data can be exported in a variety of formats. \n+In addition, the agent and exporter can be configured via command line arguments\n or environment variables. The net result is the ability to gather telemetry\n data from a Java application without code changes.\n \n ## Getting Started\n \n-Download the [latest\n-release](https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases)\n-of the Java agent and available exporters.\n+[ ![Download](https://api.bintray.com/packages/open-telemetry/maven/opentelemetry-java-instrumentation/images/download.svg) ](https://bintray.com/open-telemetry/maven/opentelemetry-java-instrumentation/_latestVersion)\n+\n+The easiest way to start is to download \"all-in\" package, which includes instrumentation agent,\n+instrumentations for all supported libraries and all available data exporters.\n+This provides completely automatic out of the box experience.\n+TODO add here screenshot from Bintray download list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240f54bc78724ee79ea337d9d1a11c8c6d086674"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk0MDM2Mw==", "bodyText": "The best I can do now is https://www.jfrog.com/confluence/display/BT/Managing+Uploaded+Content#ManagingUploadedContent-CreatingandEditingaDownloadList. Have a link in documentation to the latest version's screen and there is \"Download list\" which has our -all artefact. I asked JFrog if we can have direct link to the latest version of a specific file.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/516#discussion_r439940363", "createdAt": "2020-06-15T05:41:37Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -4,28 +4,37 @@\n \n This project provides a Java agent JAR that can be attached to any Java 7+\n application and dynamically injects bytecode to capture telemetry from a\n-number of popular libraries and frameworks. The telemetry data can exported\n-in a variety of formats each provided as their own independent JAR. In\n-addition, the agent and exporter can be configured via command line arguments\n+number of popular libraries and frameworks. \n+The telemetry data can be exported in a variety of formats. \n+In addition, the agent and exporter can be configured via command line arguments\n or environment variables. The net result is the ability to gather telemetry\n data from a Java application without code changes.\n \n ## Getting Started\n \n-Download the [latest\n-release](https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases)\n-of the Java agent and available exporters.\n+[ ![Download](https://api.bintray.com/packages/open-telemetry/maven/opentelemetry-java-instrumentation/images/download.svg) ](https://bintray.com/open-telemetry/maven/opentelemetry-java-instrumentation/_latestVersion)\n+\n+The easiest way to start is to download \"all-in\" package, which includes instrumentation agent,\n+instrumentations for all supported libraries and all available data exporters.\n+This provides completely automatic out of the box experience.\n+TODO add here screenshot from Bintray download list.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1NDc3Mg=="}, "originalCommit": {"oid": "240f54bc78724ee79ea337d9d1a11c8c6d086674"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDMzOTU3OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODoxNzo1MVrOGjen1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxODoxNzo1MVrOGjen1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg1NTA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `AgentClassLoader`. Including OpenTelemetry SDK and data exporters.\n          \n          \n            \n            `AgentClassLoader`. Including OpenTelemetry SDK (and the built-in exporters when using the `-all` artifact).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/516#discussion_r439855060", "createdAt": "2020-06-14T18:17:51Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -71,7 +71,7 @@ following \"clusters\" of classes:\n \n - `auto-tooling-and-instrumentation.isolated/` - contains `agent-tooling`\n module and `instrumentation` submodules, loaded and isolated inside\n-`AgentClassLoader`. Including OpenTelemetry SDK.\n+`AgentClassLoader`. Including OpenTelemetry SDK and data exporters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240f54bc78724ee79ea337d9d1a11c8c6d086674"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 513, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}