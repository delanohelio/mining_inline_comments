{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTYwOTQ1", "number": 1557, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTo0MjoxMFrOE1889A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjowMDo0NlrOE19K-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDA4NjI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTo0MjoxMFrOHug1vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMDowMzo0MFrOHunp1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Not Using AutoService to hook up this instrumentation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518534589", "createdAt": "2020-11-06T05:42:10Z", "author": {"login": "trask"}, "path": "instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java", "diffHunk": "@@ -52,39 +56,32 @@ public TraceConfigInstrumentation() {\n         tracedMethods.removeAll(entry.getValue());\n       }\n     }\n+\n+    typeInstrumentations =\n+        classMethodsToTrace.entrySet().stream()\n+            .filter(e -> !e.getValue().isEmpty())\n+            .map(e -> new TracerClassInstrumentation(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList());\n   }\n \n   @Override\n-  public AgentBuilder instrument(AgentBuilder agentBuilder) {\n-    if (classMethodsToTrace.isEmpty()) {\n-      return agentBuilder;\n-    }\n-\n-    for (Map.Entry<String, Set<String>> entry : classMethodsToTrace.entrySet()) {\n-      TracerClassInstrumentation tracerConfigClass =\n-          new TracerClassInstrumentation(entry.getKey(), entry.getValue());\n-      agentBuilder = tracerConfigClass.instrument(agentBuilder);\n-    }\n-    return agentBuilder;\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TraceAnnotationTracer\",\n+    };\n   }\n \n   @Override\n-  public int getOrder() {\n-    return 0;\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return typeInstrumentations;\n   }\n \n   // Not Using AutoService to hook up this instrumentation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33825a4bb01c05503219f0182e00d8e33ab20175"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NjIzMA==", "bodyText": "\ud83e\udd85 \ud83d\udc41\ufe0f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518646230", "createdAt": "2020-11-06T10:03:40Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/external-annotations/src/main/java/io/opentelemetry/javaagent/instrumentation/traceannotation/TraceConfigInstrumentationModule.java", "diffHunk": "@@ -52,39 +56,32 @@ public TraceConfigInstrumentation() {\n         tracedMethods.removeAll(entry.getValue());\n       }\n     }\n+\n+    typeInstrumentations =\n+        classMethodsToTrace.entrySet().stream()\n+            .filter(e -> !e.getValue().isEmpty())\n+            .map(e -> new TracerClassInstrumentation(e.getKey(), e.getValue()))\n+            .collect(Collectors.toList());\n   }\n \n   @Override\n-  public AgentBuilder instrument(AgentBuilder agentBuilder) {\n-    if (classMethodsToTrace.isEmpty()) {\n-      return agentBuilder;\n-    }\n-\n-    for (Map.Entry<String, Set<String>> entry : classMethodsToTrace.entrySet()) {\n-      TracerClassInstrumentation tracerConfigClass =\n-          new TracerClassInstrumentation(entry.getKey(), entry.getValue());\n-      agentBuilder = tracerConfigClass.instrument(agentBuilder);\n-    }\n-    return agentBuilder;\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TraceAnnotationTracer\",\n+    };\n   }\n \n   @Override\n-  public int getOrder() {\n-    return 0;\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return typeInstrumentations;\n   }\n \n   // Not Using AutoService to hook up this instrumentation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzNDU4OQ=="}, "originalCommit": {"oid": "33825a4bb01c05503219f0182e00d8e33ab20175"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDEyMTk5OnYy", "diffSide": "LEFT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjowMDo0MlrOHuhJvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjowMDo0MlrOHuhJvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTcwOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518539708", "createdAt": "2020-11-06T06:00:42Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -107,15 +98,6 @@ public static void assertInstrumentationMuzzled(\n     // run helper injector on all instrumenters\n     if (assertPass) {\n       for (Object instrumenter : loadAllInstrumenters(agentClassLoader)) {\n-        if (instrumenter.getClass().getName().endsWith(\"TraceConfigInstrumentation\")) {\n-          // TraceConfigInstrumentation doesn't do muzzle checks\n-          // check on TracerClassInstrumentation instead\n-          instrumenter =\n-              agentClassLoader\n-                  .loadClass(instrumenter.getClass().getName() + \"$TracerClassInstrumentation\")\n-                  .getDeclaredConstructor()\n-                  .newInstance();\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33825a4bb01c05503219f0182e00d8e33ab20175"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDEyMjE3OnYy", "diffSide": "LEFT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjowMDo0NlrOHuhJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjowMDo0NlrOHuhJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzOTczNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1557#discussion_r518539734", "createdAt": "2020-11-06T06:00:46Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/MuzzleGradlePluginUtil.java", "diffHunk": "@@ -50,15 +50,6 @@ public static void assertInstrumentationMuzzled(\n       throws Exception {\n     // muzzle validate all instrumenters\n     for (Object instrumenter : loadAllInstrumenters(agentClassLoader)) {\n-      if (instrumenter.getClass().getName().endsWith(\"TraceConfigInstrumentation\")) {\n-        // TraceConfigInstrumentation doesn't do muzzle checks\n-        // check on TracerClassInstrumentation instead\n-        instrumenter =\n-            agentClassLoader\n-                .loadClass(instrumenter.getClass().getName() + \"$TracerClassInstrumentation\")\n-                .getDeclaredConstructor()\n-                .newInstance();\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33825a4bb01c05503219f0182e00d8e33ab20175"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}