{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTQ2MzU3", "number": 830, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODowNToxNVrOEUJRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo1MzoxMFrOEU2C1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTU4ODQ4OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODowNToxNVrOG6RXrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzowMzoyNFrOG7LahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTE4Mw==", "bodyText": "I vaguely remember, that otel-java has their javadoc published somewhere. We can reference that.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/830#discussion_r463755183", "createdAt": "2020-07-31T18:05:15Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -105,9 +105,12 @@ attributes to stdout. It is used mainly for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-| System property  | Environment variable | Purpose                                                                                 |\n-|------------------|----------------------|-----------------------------------------------------------------------------------------|\n-| otel.propagators | OTEL_PROPAGATORS     | Default is \"tracecontext\" (W3C). Other supported values are \"b3\", \"b3single\", \"jaeger\". |\n+If this is set to a comma-delimited list of the values, the multi-propagator will be used.\n+[TODO link to specification that explains multi-propagator behavior, see [tracking issue](https://github.com/open-telemetry/opentelemetry-specification/issues/496) for now]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3cf054923bc524e1063170682c4600094c45557"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcwNjE4MQ==", "bodyText": "I found the javadoc, but then decided just to include brief explanation here inline", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/830#discussion_r464706181", "createdAt": "2020-08-03T23:03:24Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -105,9 +105,12 @@ attributes to stdout. It is used mainly for testing and debugging.\n \n The propagator controls which distributed tracing header format is used.\n \n-| System property  | Environment variable | Purpose                                                                                 |\n-|------------------|----------------------|-----------------------------------------------------------------------------------------|\n-| otel.propagators | OTEL_PROPAGATORS     | Default is \"tracecontext\" (W3C). Other supported values are \"b3\", \"b3single\", \"jaeger\". |\n+If this is set to a comma-delimited list of the values, the multi-propagator will be used.\n+[TODO link to specification that explains multi-propagator behavior, see [tracking issue](https://github.com/open-telemetry/opentelemetry-specification/issues/496) for now]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTE4Mw=="}, "originalCommit": {"oid": "a3cf054923bc524e1063170682c4600094c45557"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjkyNDM2OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNDo1MzoxMFrOG7RB6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNTowODo0MFrOG7RSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5ODE4Nw==", "bodyText": "Maybe just reference the javadoc of that class?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/830#discussion_r464798187", "createdAt": "2020-08-04T04:53:10Z", "author": {"login": "iNikem"}, "path": "README.md", "diffHunk": "@@ -96,27 +96,31 @@ to the OpenTelemetry Resource ([see below](#opentelemetry-resource)), e.g. `OTEL\n The logging exporter simply prints the name of the span along with its\n attributes to stdout. It is used mainly for testing and debugging.\n \n-| System property             | Environment variable        | Purpose                                                                      |\n-|-----------------------------|-----------------------------|------------------------------------------------------------------------------|\n-| ota.exporter=logging        | OTA_EXPORTER=logging        | To select logging exporter                                                   |\n-| ota.exporter.logging.prefix | OTA_EXPORTER_LOGGING_PREFIX | An optional string that is printed in front of the span name and attributes. |\n+| System property              | Environment variable         | Purpose                                                                      |\n+|------------------------------|------------------------------|------------------------------------------------------------------------------|\n+| otel.exporter=logging        | OTEL_EXPORTER=logging        | To select logging exporter                                                   |\n+| otel.exporter.logging.prefix | OTEL_EXPORTER_LOGGING_PREFIX | An optional string that is printed in front of the span name and attributes. |\n \n #### Propagator\n \n The propagator controls which distributed tracing header format is used.\n \n-| System property | Environment variable | Purpose                                                                                 |\n-|-----------------|----------------------|-----------------------------------------------------------------------------------------|\n-| ota.propagators | OTA_PROPAGATORS      | Default is \"tracecontext\" (W3C). Other supported values are \"b3\", \"b3single\", \"jaeger\". |\n+If this is set to a comma-delimited list of the values, the multi-propagator will be used.\n+The multi-propagator will try to extract the context from incoming requests using each of the configured propagator formats (in order), stopping after the first successful context extraction.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5a1864e10ec8d9852ba451a9cf49e2f56641e26"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMjMzNw==", "bodyText": "I thought the text description was nice, and doesn't scare away Ops folks who are not java developers \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/830#discussion_r464802337", "createdAt": "2020-08-04T05:08:40Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -96,27 +96,31 @@ to the OpenTelemetry Resource ([see below](#opentelemetry-resource)), e.g. `OTEL\n The logging exporter simply prints the name of the span along with its\n attributes to stdout. It is used mainly for testing and debugging.\n \n-| System property             | Environment variable        | Purpose                                                                      |\n-|-----------------------------|-----------------------------|------------------------------------------------------------------------------|\n-| ota.exporter=logging        | OTA_EXPORTER=logging        | To select logging exporter                                                   |\n-| ota.exporter.logging.prefix | OTA_EXPORTER_LOGGING_PREFIX | An optional string that is printed in front of the span name and attributes. |\n+| System property              | Environment variable         | Purpose                                                                      |\n+|------------------------------|------------------------------|------------------------------------------------------------------------------|\n+| otel.exporter=logging        | OTEL_EXPORTER=logging        | To select logging exporter                                                   |\n+| otel.exporter.logging.prefix | OTEL_EXPORTER_LOGGING_PREFIX | An optional string that is printed in front of the span name and attributes. |\n \n #### Propagator\n \n The propagator controls which distributed tracing header format is used.\n \n-| System property | Environment variable | Purpose                                                                                 |\n-|-----------------|----------------------|-----------------------------------------------------------------------------------------|\n-| ota.propagators | OTA_PROPAGATORS      | Default is \"tracecontext\" (W3C). Other supported values are \"b3\", \"b3single\", \"jaeger\". |\n+If this is set to a comma-delimited list of the values, the multi-propagator will be used.\n+The multi-propagator will try to extract the context from incoming requests using each of the configured propagator formats (in order), stopping after the first successful context extraction.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc5ODE4Nw=="}, "originalCommit": {"oid": "a5a1864e10ec8d9852ba451a9cf49e2f56641e26"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 179, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}