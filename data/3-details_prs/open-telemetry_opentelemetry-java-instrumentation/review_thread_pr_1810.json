{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5OTA4NDkw", "number": 1810, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxMDoyNlrOE--jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxMzozNFrOE--m9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDcyMDk0OnYy", "diffSide": "RIGHT", "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/server/ArmeriaServerTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxMDoyNlrOH8aveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTowNTozNFrOH87nxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNDc0NA==", "bodyText": "Why this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533114744", "createdAt": "2020-12-01T07:10:26Z", "author": {"login": "iNikem"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/server/ArmeriaServerTracer.java", "diffHunk": "@@ -19,7 +19,8 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n public class ArmeriaServerTracer\n-    extends HttpServerTracer<HttpRequest, RequestLog, ServiceRequestContext, Void> {\n+    extends HttpServerTracer<\n+        HttpRequest, RequestLog, ServiceRequestContext, ServiceRequestContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMTA1MQ==", "bodyText": "NullAway made me do it. It wouldn't let me pass null STORAGE to HttpClientTracer.startSpan(), without marking the STORAGE parameter as truly @Nullable which then would cascade to lots of other places. So instead I changed this, and just passed the (non-null) ServiceRequestContext twice.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533121051", "createdAt": "2020-12-01T07:25:51Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/server/ArmeriaServerTracer.java", "diffHunk": "@@ -19,7 +19,8 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n public class ArmeriaServerTracer\n-    extends HttpServerTracer<HttpRequest, RequestLog, ServiceRequestContext, Void> {\n+    extends HttpServerTracer<\n+        HttpRequest, RequestLog, ServiceRequestContext, ServiceRequestContext> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNDc0NA=="}, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzMzM3Nw==", "bodyText": "hm, I was going to try with @Nullable Void, but now can't repro at all, so reverting the change and let's see what CI says..", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533133377", "createdAt": "2020-12-01T07:53:42Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/server/ArmeriaServerTracer.java", "diffHunk": "@@ -19,7 +19,8 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n public class ArmeriaServerTracer\n-    extends HttpServerTracer<HttpRequest, RequestLog, ServiceRequestContext, Void> {\n+    extends HttpServerTracer<\n+        HttpRequest, RequestLog, ServiceRequestContext, ServiceRequestContext> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNDc0NA=="}, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1MzQ0NA==", "bodyText": "wow, it passed, thx for asking this \ud83d\udc4d\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533653444", "createdAt": "2020-12-01T19:05:34Z", "author": {"login": "trask"}, "path": "instrumentation/armeria-1.0/library/src/main/java/io/opentelemetry/instrumentation/armeria/v1_0/server/ArmeriaServerTracer.java", "diffHunk": "@@ -19,7 +19,8 @@\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n public class ArmeriaServerTracer\n-    extends HttpServerTracer<HttpRequest, RequestLog, ServiceRequestContext, Void> {\n+    extends HttpServerTracer<\n+        HttpRequest, RequestLog, ServiceRequestContext, ServiceRequestContext> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNDc0NA=="}, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDcyOTUwOnYy", "diffSide": "LEFT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoxMzozNFrOH8a0fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzoyMzo0MlrOH8bEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjAyOQ==", "bodyText": "I don't understand where this happens now. We have to active new context somewhere, haven't we?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533116029", "createdAt": "2020-12-01T07:13:34Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -58,67 +69,51 @@ public Context startSpan(\n     onRequest(span, request);\n     onConnectionAndRequest(span, connection, request);\n \n-    return parentContext.with(span);\n-  }\n+    Context context = parentContext.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n+    attachServerContext(context, storage);\n \n-  /**\n-   * Creates new scoped context, based on the current context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage) {\n-    return startScope(span, storage, Context.current());\n-  }\n-\n-  /**\n-   * Creates new scoped context, based on the given context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage, Context context) {\n-    // TODO we could do this in one go, but TracingContextUtils.CONTEXT_SPAN_KEY is private\n-    Context newContext = context.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n-    attachServerContext(newContext, storage);\n-    return newContext.makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODEwMw==", "bodyText": "A, I see, every instrumentation now does that itself.\nI have one problem with this and with the removal of startScope: inconsistency. Now instrumentations which use HttpServerTracer and those which use e.g. HttpClientTracer are different. They used to follow the same pattern: startSpan+startScope, now they are going to be different. Maybe it is worth leaving startScope method here with just context.makeCurrent() to preserve uniformity?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533118103", "createdAt": "2020-12-01T07:18:42Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -58,67 +69,51 @@ public Context startSpan(\n     onRequest(span, request);\n     onConnectionAndRequest(span, connection, request);\n \n-    return parentContext.with(span);\n-  }\n+    Context context = parentContext.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n+    attachServerContext(context, storage);\n \n-  /**\n-   * Creates new scoped context, based on the current context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage) {\n-    return startScope(span, storage, Context.current());\n-  }\n-\n-  /**\n-   * Creates new scoped context, based on the given context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage, Context context) {\n-    // TODO we could do this in one go, but TracingContextUtils.CONTEXT_SPAN_KEY is private\n-    Context newContext = context.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n-    attachServerContext(newContext, storage);\n-    return newContext.makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjAyOQ=="}, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMDE0MQ==", "bodyText": "#1811 \ud83d\ude01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1810#discussion_r533120141", "createdAt": "2020-12-01T07:23:42Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -58,67 +69,51 @@ public Context startSpan(\n     onRequest(span, request);\n     onConnectionAndRequest(span, connection, request);\n \n-    return parentContext.with(span);\n-  }\n+    Context context = parentContext.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n+    attachServerContext(context, storage);\n \n-  /**\n-   * Creates new scoped context, based on the current context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage) {\n-    return startScope(span, storage, Context.current());\n-  }\n-\n-  /**\n-   * Creates new scoped context, based on the given context, with the given span.\n-   *\n-   * <p>Attaches new context to the request to avoid creating duplicate server spans.\n-   */\n-  public Scope startScope(Span span, STORAGE storage, Context context) {\n-    // TODO we could do this in one go, but TracingContextUtils.CONTEXT_SPAN_KEY is private\n-    Context newContext = context.with(CONTEXT_SERVER_SPAN_KEY, span).with(span);\n-    attachServerContext(newContext, storage);\n-    return newContext.makeCurrent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExNjAyOQ=="}, "originalCommit": {"oid": "dcc9a2e73dd5405e9c9638c96b95c356654a6ed9"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4467, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}