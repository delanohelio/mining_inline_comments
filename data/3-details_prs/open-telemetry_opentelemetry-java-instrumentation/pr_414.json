{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODU1Nzc1", "number": 414, "title": "Add @WithSpan Annotation documentation and update the README", "bodyText": "Move build and configure to top as getting started section\nAdd manual instrumentation section\nDocument @WithSpan annotation\nMove developer specific information to CONTRIBUTING.md\nCleanup formatting and use consistent spacing", "createdAt": "2020-05-19T03:34:48Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414", "merged": true, "mergeCommit": {"oid": "abcaa7acc64fddea3bbe15756a12951ecfd75e35"}, "closed": true, "closedAt": "2020-05-19T04:03:40Z", "author": {"login": "flands"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcir7zogH2gAyNDE5ODU1Nzc1OmEwZGMxNmQ1MWY4YTlhZjVkYWFjYjg2ZDIzNzY5ZTc5YTM1NWQ4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcitDQ4AFqTQxNDA5ODk2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836", "author": {"user": {"login": "flands", "name": "Steve Flanders"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a0dc16d51f8a9af5daacb86d23769e79a355d836", "committedDate": "2020-05-19T03:30:45Z", "message": "Update the README\n\n* Move build and configure to top as getting started section\n* Add manual instrumentation section\n* Document `@WithSpan` annotation\n* Move developer specific information to CONTRIBUTING.md\n* Cleanup formatting and use consistent spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDg0NTcz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#pullrequestreview-414084573", "createdAt": "2020-05-19T03:56:28Z", "commit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzo1NjoyOFrOGXO_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMzo1NjoyOFrOGXO_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAxNTk0Nw==", "bodyText": "\ud83d\ude04\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#discussion_r427015947", "createdAt": "2020-05-19T03:56:28Z", "author": {"login": "trask"}, "path": "README.md", "diffHunk": "@@ -58,105 +117,75 @@ to capture telemetry from a number of popular libraries and frameworks.\n | [Spymemcached](https://github.com/couchbase/spymemcached)                                                                             | 2.12+                          |\n | [Twilio](https://github.com/twilio/twilio-java)                                                                                       | 6.6+                           |\n \n-### Download and run\n-\n-#### Release builds\n-\n-Download the [latest release](https://github.com/open-telemetry/opentelemetry-auto-instr-java/releases).\n-\n-The instrumentation agent is enabled using the -javaagent flag to the JVM. Configuration parameters are passed \n-as Java system properties (-D flags) or as environment variables. This is an example:\n-\n-```\n-java -javaagent:path/to/opentelemetry-auto-<version>.jar \\\n-     -Dota.exporter.jar=path/to/opentelemetry-auto-exporters-jaeger-<version>.jar \\\n-     -Dota.exporter.jaeger.endpoint=localhost:14250 \\\n-     -Dota.exporter.jaeger.service.name=shopping \\\n-     -jar myapp.jar\n-```\n+### Disabled instrumentations\n \n-#### Snapshot builds\n+Some instrumentations can produce too many spans and make traces very noisy.\n+For this reason the following instrumentations are disabled by default:\n+- `jdbc-datasource` which creates spans whenever `java.sql.DataSource#getConnection` method is called.\n+- `servlet-filter` which creates spans around Servlet Filter methods.\n+- `servlet-service` which creates spans around Servlet methods.\n+ \n+To enable them, add `ota.integration.<name>.enabled` system property:\n+`-Dota.integration.jdbc-datasource.enabled=true`\n \n-For developers testing code changes before a release is complete,\n-there are snapshot builds of the `master` branch. When a PR is\n-merged to `master`, a circleci build is kicked off as a github\n-action which shows up as a github check on the git commit on `master`\n-branch, i.e. a green checkmark. Clicking on the green checkmark you\n-can view the `build_test_deploy` workflow and the `build` job shows\n-the artifacts hosted on circleci. The artifacts will be named like:\n+#### Grizzly instrumentation\n \n-```\n-libs/exporter-support-<version>-SNAPSHOT.jar\n-libs/opentelemetry-auto-<version>-SNAPSHOT.jar\n-libs/opentelemetry-auto-exporters-jaeger-<version>-SNAPSHOT.jar\n-libs/opentelemetry-auto-exporters-logging-<version>-SNAPSHOT.jar\n-libs/opentelemetry-auto-exporters-otlp-<version>-SNAPSHOT.jar\n-```\n+Whenever you use\n+[Grizzly](https://javaee.github.io/grizzly/httpserverframework.html) for\n+Servlet-based applications, you get better experience from Servlet-specific\n+support. As these two instrumentations conflict with each other, more generic\n+instrumentation for Grizzly http server is disabled by default. If needed,\n+you can enable it by add the following system property:\n+`-Dota.integration.grizzly.enabled=true`\n \n-### Configuration parameters (subject to change!)\n-| System property  | Environment variable | Purpose                                           |\n-|------------------|----------------------|---------------------------------------------------|\n-| ota.exporter.jar | OTA_EXPORTER_JAR     | Path to the exporter fat-jar that you want to use |\n+## Manually instrumenting\n \n-### Available exporters\n-There are three exporters available under\n-[releases](https://github.com/open-telemetry/opentelemetry-auto-instr-java/releases).\n+You can use the OpenTelemetry `getTracer` or the `@WithSpan` annotation to\n+manually instrument your Java application.\n \n-#### Jaeger exporter\n-A simple wrapper for the Jaeger exporter of opentelemetry-java. It currently only supports gRPC as its communications protocol.\n+### Configure the OpenTelemetry getTracer\n \n-| System property                  | Environment variable             | Purpose                                                              |\n-|----------------------------------|----------------------------------|----------------------------------------------------------------------|\n-| ota.exporter.jaeger.endpoint     | OTA_EXPORTER_JAEGER_ENDPOINT     | The Jaeger endpoint to connect to. Currently only gRPC is supported. |\n-| ota.exporter.jaeger.service.name | OTA_EXPORTER_JAEGER_SERVICE_NAME | The service name of this JVM instance                                |\n+OpenTelemetry offers a tracer to easily enable custom instrumentation\n+throughout your application. See the [OpenTelemetry Java\n+QuickStart](https://github.com/open-telemetry/opentelemetry-java/blob/master/QUICKSTART.md#tracing)\n+for an example of how to configure it.\n \n-#### OTLP exporter\n-A simple wrapper for the OTLP exporter of opentelemetry-java.\n+### Configure a WithSpan annotation\n \n-| System property                  | Environment variable             | Purpose                                                              |\n-|----------------------------------|----------------------------------|----------------------------------------------------------------------|\n-| ota.exporter.otlp.endpoint       | OTA_EXPORTER_OTLP_ENDPOINT       | The OTLP endpoint to connect to.                                     |\n+If you want to configure custom instrumentation and don't want to use the\n+OpenTelemetry `getTracer` and API directly, configure a `@WithSpan`\n+annotation. Add the trace annotation to your application's code:\n \n-#### Logging Exporter\n-The logging exporter simply prints the name of the span along with its attributes to stdout. It is used manly\n-for testing and debugging.\n+```java\n+import io.opentelemetry.contrib.auto.annotations.WithSpan;\n \n-| System property             | Environment variable        | Purpose                                                                      |\n-|-----------------------------|-----------------------------|------------------------------------------------------------------------------|\n-| ota.exporter.logging.prefix | OTA_EXPORTER_LOGGING_PREFIX | An optional string that is printed in front of the span name and attributes. |\n+public class MyClass {\n+  @WithSpan\n+  public void MyLogic() {\n+      <...>\n+  }\n+}\n+```\n \n-These parameter names are very likely to change over time, so please check back here when trying out a new version!\n+Each time the application invokes the annotated method, it creates a span\n+that denote its duration and provides any thrown exceptions.\n \n-Please report any bugs or unexpected behavior you may find.\n+#### Configuration\n \n-## Disabled instrumentations\n-Some instrumentations can produce too many spans and make traces very noisy.\n-For this reason the following instrumentations are disabled by default:\n-- `jdbc-datasource` which creates spans whenever `java.sql.DataSource#getConnection` method is called.\n-- `servlet-filter` which creates spans around Servlet Filter methods.\n-- `servlet-service` which creates spans around Servlet methods.\n- \n-To enable them, add `ota.integration.<name>.enabled` system property:\n-`-Dota.integration.jdbc-datasource.enabled=true`\n+The `@WithSpan` annotation requires code changes to implement. You can\n+disable the annotation at runtime via the exclude configuration or\n+environment variables:\n \n-### Grizzly instrumentation\n-Whenever you use [Grizzly](https://javaee.github.io/grizzly/httpserverframework.html)\n-for Servlet-based applications, you get better experience from Servlet-specific support.\n-As these two instrumentations conflict with each other, more generic instrumentation for Grizzly\n-http server is disabled by default.\n-If needed, you can enable it by add the following system property:\n-`-Dota.integration.grizzly.enabled=true`\n+| System property                  | Environment variable             | Purpose                                                              |\n+|----------------------------------|----------------------------------|----------------------------------------------------------------------|\n+| trace.classes.exclude            | TRACE_CLASSES_EXCLUDE            | Exclude classes with the `@WithSpan` annotation                      |\n+| trace.methods.exclude            | TRACE_METHODS_EXCLUDE            | Exclude methods with the `@WithSpan` annotation                      |\n \n ## Troubleshooting\n \n To turn on the agent's internal debug logging:\n \n `-Dio.opentelemetry.auto.slf4j.simpleLogger.defaultLogLevel=debug`\n \n-## Building from source\n-\n-Build using Java 8:\n-\n-```gradle assemble```\n-\n-and then you can find the java agent artifact at `java-agent/build/lib/opentelemetry-auto-<version>.jar`.\n+Note these logs are extremely verbose. Enable debug logging only when needed.\n+Debug logging negatively impacts the performance of your application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "originalPosition": 225}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDk4Njgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#pullrequestreview-414098681", "createdAt": "2020-05-19T04:47:50Z", "commit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0Nzo1MFrOGXPtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0Nzo1MFrOGXPtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNzc1Mg==", "bodyText": "@flands I very like the suggestion of Dan Allen from https://www.youtube.com/watch?v=r6RXRi5pBXg about \"Write one sentence per line\". It makes diffs and merges easier and don't change rendered layout in any way.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#discussion_r427027752", "createdAt": "2020-05-19T04:47:50Z", "author": {"login": "iNikem"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,107 +1,174 @@\n ## Contributing\n \n-Pull requests for bug fixes are welcome, but before submitting new features or changes to current functionality [open an issue](https://github.com/open-telemetry/opentelemetry-auto-instr-java/issues/new)\n-and discuss your ideas or propose the changes you wish to make. After a resolution is reached a PR can be submitted for review.\n+Pull requests for bug fixes are welcome, but before submitting new features\n+or changes to current functionality [open an\n+issue](https://github.com/open-telemetry/opentelemetry-auto-instr-java/issues/new)\n+and discuss your ideas or propose the changes you wish to make. After a\n+resolution is reached a PR can be submitted for review.\n \n-In order to build and test this whole repository you need JDK 11+.\n-Some instrumentations and tests may put constraints on which java versions they support.\n-See [Executing tests with specific java version](#Executing tests with specific java version) below.\n+In order to build and test this whole repository you need JDK 11+. Some", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MDk4OTYw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#pullrequestreview-414098960", "createdAt": "2020-05-19T04:48:47Z", "commit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0ODo0N1rOGXPt_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNDo0ODo0N1rOGXPt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAyNzk2Ng==", "bodyText": "You need java 11 to build current repo", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/414#discussion_r427027966", "createdAt": "2020-05-19T04:48:47Z", "author": {"login": "iNikem"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -1,107 +1,174 @@\n ## Contributing\n \n-Pull requests for bug fixes are welcome, but before submitting new features or changes to current functionality [open an issue](https://github.com/open-telemetry/opentelemetry-auto-instr-java/issues/new)\n-and discuss your ideas or propose the changes you wish to make. After a resolution is reached a PR can be submitted for review.\n+Pull requests for bug fixes are welcome, but before submitting new features\n+or changes to current functionality [open an\n+issue](https://github.com/open-telemetry/opentelemetry-auto-instr-java/issues/new)\n+and discuss your ideas or propose the changes you wish to make. After a\n+resolution is reached a PR can be submitted for review.\n \n-In order to build and test this whole repository you need JDK 11+.\n-Some instrumentations and tests may put constraints on which java versions they support.\n-See [Executing tests with specific java version](#Executing tests with specific java version) below.\n+In order to build and test this whole repository you need JDK 11+. Some\n+instrumentations and tests may put constraints on which java versions they\n+support. See [Executing tests with specific java version](#Executing tests\n+with specific java version) below.\n \n ### Plugin structure\n-OpenTelemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+OpenTelemetry Auto Instrumentation java agent's jar can logically be divided\n+into 3 parts.\n \n #### `java-agent` module\n-This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n-which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n-This class is loaded during application startup by application classloader. \n-Its sole responsibility is to push agent's classes into JVM's bootstrap classloader \n-and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` (now in the bootstrap class loader) class from there.\n+\n+This module consists of single class\n+`io.opentelemetry.auto.bootstrap.AgentBootstrap` which implements [Java\n+instrumentation\n+agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader.\n+Its sole responsibility is to push agent's classes into JVM's bootstrap\n+classloader and immediately delegate to\n+`io.opentelemetry.auto.bootstrap.Agent` (now in the bootstrap class loader)\n+class from there.\n \n #### `agent-bootstrap` module\n-This module contains support classes for actual instrumentations to be loaded later and separately. \n-These classes should be available from all possible classloaders in the running application. \n-For this reason `java-agent` puts all these classes into JVM's bootstrap classloader.\n-For the same reason this module should be as small as possible and have as few dependencies as possible. \n-Otherwise, there is a risk of accidentally exposing this classes to the actual application.\n+\n+This module contains support classes for actual instrumentations to be loaded\n+later and separately. These classes should be available from all possible\n+classloaders in the running application. For this reason `java-agent` puts\n+all these classes into JVM's bootstrap classloader. For the same reason this\n+module should be as small as possible and have as few dependencies as\n+possible. Otherwise, there is a risk of accidentally exposing this classes to\n+the actual application.\n \n #### `agent-tooling` module and `instrumentation` submodules\n-Contains everything necessary to make instrumentation machinery work, \n-including integration with [ByteBuddy](https://bytebuddy.net/) and actual library-specific instrumentations. \n-As these classes depend on many classes from different libraries, \n-it is paramount to hide all these classes from the host application. \n-This is achieved in the following way:\n-* When `java-agent` module builds the final agent, it moves all classes from `instrumentation` submodules \n-and `agent-tooling` module into a separate folder inside final jar file, called `auto-tooling-and-instrumentation.isolated`. \n-In addition, the extension of all class files is changed from `class` to `classdata`. \n-This ensures that general classloaders cannot find nor load these classes.\n-* When `io.opentelemetry.auto.bootstrap.Agent` starts up, \n-it creates an instance of `io.opentelemetry.auto.bootstrap.AgentClassLoader`, \n-loads an `io.opentelemetry.auto.tooling.AgentInstaller` from that `AgentClassLoader` \n-and then passes control on to the `AgentInstaller` (now in the `AgentClassLoader`). The `AgentInstaller` then installs all of the instrumentations with the help of ByteBuddy.\n-\n-The complicated process above ensures that the majority of auto-instrumentation agent's classes\n-are totally isolated from application classes, \n-and an instrumented class from arbitrary classloader in JVM can still access helper classes from bootstrap classloader.\n+\n+Contains everything necessary to make instrumentation machinery work,\n+including integration with [ByteBuddy](https://bytebuddy.net/) and actual\n+library-specific instrumentations. As these classes depend on many classes\n+from different libraries, it is paramount to hide all these classes from the\n+host application. This is achieved in the following way:\n+\n+- When `java-agent` module builds the final agent, it moves all classes from\n+`instrumentation` submodules and `agent-tooling` module into a separate\n+folder inside final jar file, called\n+`auto-tooling-and-instrumentation.isolated`. In addition, the extension of\n+all class files is changed from `class` to `classdata`. This ensures that\n+general classloaders cannot find nor load these classes.\n+- When `io.opentelemetry.auto.bootstrap.Agent` starts up, it creates an\n+instance of `io.opentelemetry.auto.bootstrap.AgentClassLoader`, loads an\n+`io.opentelemetry.auto.tooling.AgentInstaller` from that `AgentClassLoader`\n+and then passes control on to the `AgentInstaller` (now in the\n+`AgentClassLoader`). The `AgentInstaller` then installs all of the\n+instrumentations with the help of ByteBuddy.\n+\n+The complicated process above ensures that the majority of\n+auto-instrumentation agent's classes are totally isolated from application\n+classes, and an instrumented class from arbitrary classloader in JVM can\n+still access helper classes from bootstrap classloader.\n \n #### Agent jar structure\n-If you now look inside `java-agent/build/libs/opentelemetry-auto-<version>.jar`, \n-you will see the following \"clusters\" of classes:\n-* `auto-tooling-and-instrumentation.isolated/` - contains `agent-tooling` module and \n-`instrumentation` submodules, loaded and isolated inside `AgentClassLoader`. \n-Including OpenTelemetry SDK.\n-* `io/opentelemetry/auto/bootstrap/` - contains `agent-bootstrap` module and available in\n-bootstrap classloader.\n-* `io/opentelemetry/auto/shaded/` - contains OpenTelemetry API and its dependencies. \n-Shaded during creation of `java-agent` jar file by Shadow Gradle plugin.\n+\n+If you now look inside\n+`java-agent/build/libs/opentelemetry-auto-<version>.jar`, you will see the\n+following \"clusters\" of classes:\n+\n+- `auto-tooling-and-instrumentation.isolated/` - contains `agent-tooling`\n+module and `instrumentation` submodules, loaded and isolated inside\n+`AgentClassLoader`. Including OpenTelemetry SDK.\n+- `io/opentelemetry/auto/bootstrap/` - contains `agent-bootstrap` module and\n+available in bootstrap classloader.\n+- `io/opentelemetry/auto/shaded/` - contains OpenTelemetry API and its\n+dependencies. Shaded during creation of `java-agent` jar file by Shadow\n+Gradle plugin.\n+\n+### Building\n+\n+#### Snapshot builds\n+\n+For developers testing code changes before a release is complete, there are\n+snapshot builds of the `master` branch. When a PR is merged to `master`, a\n+circleci build is kicked off as a github action which shows up as a github\n+check on the git commit on `master` branch, i.e. a green checkmark. Clicking\n+on the green checkmark you can view the `build_test_deploy` workflow and the\n+`build` job shows the artifacts hosted on circleci. The artifacts will be\n+named like:\n+\n+```\n+libs/exporter-support-<version>-SNAPSHOT.jar\n+libs/opentelemetry-auto-<version>-SNAPSHOT.jar\n+libs/opentelemetry-auto-exporters-jaeger-<version>-SNAPSHOT.jar\n+libs/opentelemetry-auto-exporters-logging-<version>-SNAPSHOT.jar\n+libs/opentelemetry-auto-exporters-otlp-<version>-SNAPSHOT.jar\n+```\n+\n+#### Building from source\n+\n+Build using Java 8:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0dc16d51f8a9af5daacb86d23769e79a355d836"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3169, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}