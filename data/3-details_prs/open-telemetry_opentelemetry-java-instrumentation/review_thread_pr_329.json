{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NDg2MjA2", "number": 329, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MDoyNFrODyq4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NjoxOFrODys5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDU3ODY4OnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/HttpBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MDoyNFrOGG2p5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMDo1MDoyNFrOGG2p5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0MDEwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n          \n      \n    \n    \n  \n\nIs this accidental duplicate?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409840100", "createdAt": "2020-04-16T20:50:24Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/HttpBenchmark.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import io.opentelemetry.benchmark.classes.HttpClass;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.util.component.AbstractLifeCycle;\n+import org.openjdk.jmh.annotations.*;\n+\n+public class HttpBenchmark {\n+\n+  @State(Scope.Benchmark)\n+  public static class BenchmarkState {\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      try {\n+        jettyServer = new HttpClass().buildJettyServer();\n+        jettyServer.start();\n+        // Make sure it's actually running\n+        while (!AbstractLifeCycle.STARTED.equals(jettyServer.getState())) {\n+          Thread.sleep(500);\n+        }\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @TearDown(Level.Trial)\n+    public void doTearDown() {\n+      try {\n+        jettyServer.stop();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      } finally {\n+        jettyServer.destroy();\n+      }\n+    }\n+\n+    HttpClass http = new HttpClass();\n+    Server jettyServer;\n+  }\n+\n+  @Benchmark\n+  public void testMakingRequest(BenchmarkState state) {\n+    state.http.executeRequest();\n+  }\n+\n+  @Fork(\n+      jvmArgsAppend = {\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",\n+        \"-javaagent:/path/to/opentelemetry-auto-instr-java/java-agent/build/libs/opentelemetry-auto.jar\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDg4NjY3OnYy", "diffSide": "RIGHT", "path": "benchmark/benchmark.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozNjoyNFrOGG5lXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozNjoyNFrOGG5lXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4ODA5Mw==", "bodyText": "This is cool, I hadn't seen custom profiler before.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409888093", "createdAt": "2020-04-16T22:36:24Z", "author": {"login": "trask"}, "path": "benchmark/benchmark.gradle", "diffHunk": "@@ -25,6 +30,7 @@ jmh {\n \n //  profilers = ['stack:lines=5;detailLine=true;period=5;excludePackages=true']\n   // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]\n+  profilers = ['io.opentelemetry.benchmark.UsedMemoryProfiler', 'gc']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDg5NDE4OnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozOToxN1rOGG5pnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjozOToxN1rOGG5pnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTE4Mw==", "bodyText": "Can you use Intellij settings from https://github.com/open-telemetry/opentelemetry-auto-instr-java/blob/master/CONTRIBUTING.md#intellij-idea?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889183", "createdAt": "2020-04-16T22:39:17Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDg5OTM4OnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0MTozMlrOGG5szA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzozODowM1rOGHOVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTk5Ng==", "bodyText": "The special character (middot?) worries me a little, but I should really stop being afraid of unicode, so let's keep it \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409889996", "createdAt": "2020-04-16T22:41:32Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import org.openjdk.jmh.profile.*;\n+import org.openjdk.jmh.results.*;\n+\n+public class UsedMemoryProfiler implements InternalProfiler {\n+  private long totalHeapBefore;\n+  private long usedHeapBefore;\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Used memory heap profiler\";\n+  }\n+\n+  @Override\n+  public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n+    System.gc();\n+    System.runFinalization();\n+\n+    totalHeapBefore = Runtime.getRuntime().totalMemory();\n+    usedHeapBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+  }\n+\n+  @Override\n+  public Collection<? extends Result> afterIteration(\n+      BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n+\n+    long totalHeap = Runtime.getRuntime().totalMemory();\n+    long usedHeap = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+\n+    Collection<ScalarResult> results = new ArrayList<>();\n+    results.add(\n+        new ScalarResult(\"\u00b7heap.total.before\", totalHeapBefore, \"bytes\", AggregationPolicy.AVG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyNzk3OQ==", "bodyText": "I added it only because I saw it being used in JMH profiler's output, but I am not a huge fan of it either. Actually I think it is going to be cleaner without it. Also, I removed the \"change\" ones, since they might be confusing (they are just taken by subtracting two measurements, gc profiler is much cleaner in this regards)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r410227979", "createdAt": "2020-04-17T13:38:03Z", "author": {"login": "pmm-sumo"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/UsedMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import org.openjdk.jmh.*;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+import org.openjdk.jmh.profile.*;\n+import org.openjdk.jmh.results.*;\n+\n+public class UsedMemoryProfiler implements InternalProfiler {\n+  private long totalHeapBefore;\n+  private long usedHeapBefore;\n+\n+  @Override\n+  public String getDescription() {\n+    return \"Used memory heap profiler\";\n+  }\n+\n+  @Override\n+  public void beforeIteration(BenchmarkParams benchmarkParams, IterationParams iterationParams) {\n+    System.gc();\n+    System.runFinalization();\n+\n+    totalHeapBefore = Runtime.getRuntime().totalMemory();\n+    usedHeapBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+  }\n+\n+  @Override\n+  public Collection<? extends Result> afterIteration(\n+      BenchmarkParams benchmarkParams, IterationParams iterationParams, IterationResult result) {\n+\n+    long totalHeap = Runtime.getRuntime().totalMemory();\n+    long usedHeap = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+\n+    Collection<ScalarResult> results = new ArrayList<>();\n+    results.add(\n+        new ScalarResult(\"\u00b7heap.total.before\", totalHeapBefore, \"bytes\", AggregationPolicy.AVG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg4OTk5Ng=="}, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkwNDkzOnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0Mzo1MlrOGG5wHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzo1MzowNVrOGHO6Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MDg0NQ==", "bodyText": "Should we bubble up the exception instead of catch/log? Would it fail the test? (is that good?)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409890845", "createdAt": "2020-04-16T22:43:52Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }\n+  }\n+\n+  private HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n+\n+  public void executeRequest() {\n+    String url = \"http://localhost:\" + port + contextPath;\n+\n+    try {\n+      HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(url));\n+      request.setThrowExceptionOnExecuteError(false);\n+      request.execute();\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzQ3OA==", "bodyText": "I think it's going to be cleaner if we go the bubble up path", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r410237478", "createdAt": "2020-04-17T13:53:05Z", "author": {"login": "pmm-sumo"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }\n+  }\n+\n+  private HttpRequestFactory requestFactory = new NetHttpTransport().createRequestFactory();\n+\n+  public void executeRequest() {\n+    String url = \"http://localhost:\" + port + contextPath;\n+\n+    try {\n+      HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(url));\n+      request.setThrowExceptionOnExecuteError(false);\n+      request.execute();\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MDg0NQ=="}, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkwODM1OnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NToyOVrOGG5yOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NToyOVrOGG5yOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public void init(final ServletConfig config) throws ServletException {\n          \n          \n            \n                  super.init(config);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891385", "createdAt": "2020-04-16T22:45:29Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkxMDY2OnYy", "diffSide": "RIGHT", "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NjoxOFrOGG5zig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo0NjoxOFrOGG5zig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5MTcyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n          \n          \n            \n                    throws ServletException, IOException {\n          \n          \n            \n                  doGet(req, resp);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nLooks like this can be removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/329#discussion_r409891722", "createdAt": "2020-04-16T22:46:18Z", "author": {"login": "trask"}, "path": "benchmark/src/jmh/java/io/opentelemetry/benchmark/classes/HttpClass.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.benchmark.classes;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpRequest;\n+import com.google.api.client.http.HttpRequestFactory;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+\n+public class HttpClass {\n+  private String contextPath = \"/path\";\n+  private Integer port = 18888;\n+\n+  public Server buildJettyServer() {\n+    System.setProperty(\"org.eclipse.jetty.util.log.class\", \"org.eclipse.jetty.util.log.StdErrLog\");\n+    System.setProperty(\"org.eclipse.jetty.LEVEL\", \"WARN\");\n+\n+    Server jettyServer = new Server(new InetSocketAddress(\"localhost\", port));\n+    ServletContextHandler servletContext = new ServletContextHandler();\n+\n+    servletContext.addServlet(HttpClassServlet.class, contextPath);\n+    jettyServer.setHandler(servletContext);\n+    return jettyServer;\n+  }\n+\n+  @WebServlet\n+  public static class HttpClassServlet extends HttpServlet {\n+    @Override\n+    public void init(final ServletConfig config) throws ServletException {\n+      super.init(config);\n+    }\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      try {\n+        Thread.sleep(10);\n+      } catch (Exception e) {\n+      }\n+      resp.setContentType(\"application/json\");\n+      resp.setStatus(HttpServletResponse.SC_OK);\n+      resp.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n+        throws ServletException, IOException {\n+      doGet(req, resp);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "623be2af263ce74e31d1d39c3c575f483c16003f"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 532, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}