{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTAxMjk5", "number": 380, "title": "Add documentation about java agent structure and related classloaders", "bodyText": "I tried to summarise my understanding about the structure of auto-instr agent and how different classloaders play along. Please read carefully if my understanding is correct.", "createdAt": "2020-05-05T13:01:34Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380", "merged": true, "mergeCommit": {"oid": "67766fd13b91347dcc5ccdc27590e5433f2e67c2"}, "closed": true, "closedAt": "2020-05-06T17:28:36Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceTrlqgH2gAyNDEzNTAxMjk5OjQyOTExODYxMmJhMWRhMzJhYzZlZTFhMGQ2NTg5NWU0NDY3M2Q1YWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcesIEngFqTQwNjgzMjcxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/429118612ba1da32ac6ee1a0d65895e44673d5ab", "committedDate": "2020-05-05T12:59:37Z", "message": "Add documentation about java agent structure and related classloaders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mjg5NzU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#pullrequestreview-406289757", "createdAt": "2020-05-06T03:55:33Z", "commit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMzo1NTozM1rOGRDOoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDowMzo0N1rOGRDVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMTg3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n          \n          \n            \n            OpenTelemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420531873", "createdAt": "2020-05-06T03:55:33Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMjAzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n          \n          \n            \n            Its sole responsibility is to push agent's classes into JVM's bootstrap classloader", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420532032", "createdAt": "2020-05-06T03:56:16Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMjMzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.\n          \n          \n            \n            and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` (now in the bootstrap class loader) class from there.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420532336", "createdAt": "2020-05-06T03:57:53Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n+and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMzAxMw==", "bodyText": "not totally sure about this suggestion\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * When `io.opentelemetry.auto.bootstrap.Agent` starts instrumentation agent, \n          \n          \n            \n            * When `io.opentelemetry.auto.bootstrap.Agent` starts up,", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420533013", "createdAt": "2020-05-06T04:01:01Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n+and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.\n+\n+#### `agent-bootstrap` module\n+This module contains support classes for actual instrumentations to be loaded later and separately. \n+These classes should be available from all possible classloaders in the running application. \n+For this reason `java-agent` puts all these classes into JVM's bootstrap classloader.\n+For the same reason this module should be as small as possible and have as few dependencies as possible. \n+Otherwise, there is a risk of accidentally exposing this classes to the actual application.\n+\n+#### `agent-tooling` module and `instrumentation` submodules\n+Contains everything necessary to make instrumentation machinery work, \n+including integration with [ByteBuddy](https://bytebuddy.net/) and actual library-specific instrumentations. \n+As these classes depend on many classes from different libraries, \n+it is paramount to hide all these classes from the host application. \n+This is achieved in the following way:\n+* When `java-agent` module builds the final agent, it moves all classes from `instrumentation` submodules \n+and `agent-tooling` module into a separate folder inside final jar file, called `auto-tooling-and-instrumentation.isolated`. \n+In addition, the extension of all class files is changed from `class` to `classdata`. \n+This ensures that general classloaders cannot find nor load these classes.\n+* When `io.opentelemetry.auto.bootstrap.Agent` starts instrumentation agent, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMzM4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and lets it install all instrumentations with the help of ByteBuddy.\n          \n          \n            \n            and then passes control on to the `AgentInstaller` (now in the `AgentClassLoader`). The `AgentInstaller` then installs all of the instrumentations with the help of ByteBuddy.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420533386", "createdAt": "2020-05-06T04:02:47Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n+and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.\n+\n+#### `agent-bootstrap` module\n+This module contains support classes for actual instrumentations to be loaded later and separately. \n+These classes should be available from all possible classloaders in the running application. \n+For this reason `java-agent` puts all these classes into JVM's bootstrap classloader.\n+For the same reason this module should be as small as possible and have as few dependencies as possible. \n+Otherwise, there is a risk of accidentally exposing this classes to the actual application.\n+\n+#### `agent-tooling` module and `instrumentation` submodules\n+Contains everything necessary to make instrumentation machinery work, \n+including integration with [ByteBuddy](https://bytebuddy.net/) and actual library-specific instrumentations. \n+As these classes depend on many classes from different libraries, \n+it is paramount to hide all these classes from the host application. \n+This is achieved in the following way:\n+* When `java-agent` module builds the final agent, it moves all classes from `instrumentation` submodules \n+and `agent-tooling` module into a separate folder inside final jar file, called `auto-tooling-and-instrumentation.isolated`. \n+In addition, the extension of all class files is changed from `class` to `classdata`. \n+This ensures that general classloaders cannot find nor load these classes.\n+* When `io.opentelemetry.auto.bootstrap.Agent` starts instrumentation agent, \n+it creates an instance of `io.opentelemetry.auto.bootstrap.AgentClassLoader`, \n+loads an `io.opentelemetry.auto.tooling.AgentInstaller` from that `AgentClassLoader` \n+and lets it install all instrumentations with the help of ByteBuddy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMzUwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Including Open Telemetry SDK.\n          \n          \n            \n            Including OpenTelemetry SDK.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420533501", "createdAt": "2020-05-06T04:03:23Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n+and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.\n+\n+#### `agent-bootstrap` module\n+This module contains support classes for actual instrumentations to be loaded later and separately. \n+These classes should be available from all possible classloaders in the running application. \n+For this reason `java-agent` puts all these classes into JVM's bootstrap classloader.\n+For the same reason this module should be as small as possible and have as few dependencies as possible. \n+Otherwise, there is a risk of accidentally exposing this classes to the actual application.\n+\n+#### `agent-tooling` module and `instrumentation` submodules\n+Contains everything necessary to make instrumentation machinery work, \n+including integration with [ByteBuddy](https://bytebuddy.net/) and actual library-specific instrumentations. \n+As these classes depend on many classes from different libraries, \n+it is paramount to hide all these classes from the host application. \n+This is achieved in the following way:\n+* When `java-agent` module builds the final agent, it moves all classes from `instrumentation` submodules \n+and `agent-tooling` module into a separate folder inside final jar file, called `auto-tooling-and-instrumentation.isolated`. \n+In addition, the extension of all class files is changed from `class` to `classdata`. \n+This ensures that general classloaders cannot find nor load these classes.\n+* When `io.opentelemetry.auto.bootstrap.Agent` starts instrumentation agent, \n+it creates an instance of `io.opentelemetry.auto.bootstrap.AgentClassLoader`, \n+loads an `io.opentelemetry.auto.tooling.AgentInstaller` from that `AgentClassLoader` \n+and lets it install all instrumentations with the help of ByteBuddy.\n+\n+The complicated process above ensures that the majority of auto-instrumentation agent's classes\n+are totally isolated from application classes, \n+and an instrumented class from arbitrary classloader in JVM can still access helper classes from bootstrap classloader.\n+\n+#### Agent jar structure\n+If you now look inside `java-agent/build/libs/opentelemetry-auto-<version>.jar`, \n+you will see the following \"clusters\" of classes:\n+* `auto-tooling-and-instrumentation.isolated/` - contains `agent-tooling` module and \n+`instrumentation` submodules, loaded and isolated inside `AgentClassLoader`. \n+Including Open Telemetry SDK.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUzMzU4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `io/opentelemetry/auto/shaded/` - contains Open Telemetry API and its dependencies. \n          \n          \n            \n            * `io/opentelemetry/auto/shaded/` - contains OpenTelemetry API and its dependencies.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#discussion_r420533584", "createdAt": "2020-05-06T04:03:47Z", "author": {"login": "trask"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -8,6 +8,53 @@ In order to fully build and test this whole repository you need the following:\n * Java 8 should be set as default: `java -version` should give you version 8.\n * Defined environment variables `JAVA_8_HOME` and `JAVA_9_HOME` which point to the corresponding java homes. \n \n+### Plugin structure\n+Open Telemetry Auto Instrumentation java agent's jar can logically be divided into 3 parts.\n+\n+#### `java-agent` module\n+This module consists of single class `io.opentelemetry.auto.bootstrap.AgentBootstrap` \n+which implements [Java instrumentation agent](https://docs.oracle.com/javase/7/docs/api/java/lang/instrument/package-summary.html).\n+This class is loaded during application startup by application classloader. \n+His sole responsibility is to push agent's classes into JVM's bootstrap classloader \n+and immediately delegate to `io.opentelemetry.auto.bootstrap.Agent` class from there.\n+\n+#### `agent-bootstrap` module\n+This module contains support classes for actual instrumentations to be loaded later and separately. \n+These classes should be available from all possible classloaders in the running application. \n+For this reason `java-agent` puts all these classes into JVM's bootstrap classloader.\n+For the same reason this module should be as small as possible and have as few dependencies as possible. \n+Otherwise, there is a risk of accidentally exposing this classes to the actual application.\n+\n+#### `agent-tooling` module and `instrumentation` submodules\n+Contains everything necessary to make instrumentation machinery work, \n+including integration with [ByteBuddy](https://bytebuddy.net/) and actual library-specific instrumentations. \n+As these classes depend on many classes from different libraries, \n+it is paramount to hide all these classes from the host application. \n+This is achieved in the following way:\n+* When `java-agent` module builds the final agent, it moves all classes from `instrumentation` submodules \n+and `agent-tooling` module into a separate folder inside final jar file, called `auto-tooling-and-instrumentation.isolated`. \n+In addition, the extension of all class files is changed from `class` to `classdata`. \n+This ensures that general classloaders cannot find nor load these classes.\n+* When `io.opentelemetry.auto.bootstrap.Agent` starts instrumentation agent, \n+it creates an instance of `io.opentelemetry.auto.bootstrap.AgentClassLoader`, \n+loads an `io.opentelemetry.auto.tooling.AgentInstaller` from that `AgentClassLoader` \n+and lets it install all instrumentations with the help of ByteBuddy.\n+\n+The complicated process above ensures that the majority of auto-instrumentation agent's classes\n+are totally isolated from application classes, \n+and an instrumented class from arbitrary classloader in JVM can still access helper classes from bootstrap classloader.\n+\n+#### Agent jar structure\n+If you now look inside `java-agent/build/libs/opentelemetry-auto-<version>.jar`, \n+you will see the following \"clusters\" of classes:\n+* `auto-tooling-and-instrumentation.isolated/` - contains `agent-tooling` module and \n+`instrumentation` submodules, loaded and isolated inside `AgentClassLoader`. \n+Including Open Telemetry SDK.\n+* `io/opentelemetry/auto/bootstrap/` - contains `agent-bootstrap` module and available in\n+bootstrap classloader.\n+* `io/opentelemetry/auto/shaded/` - contains Open Telemetry API and its dependencies. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429118612ba1da32ac6ee1a0d65895e44673d5ab"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb0a2e58a5109afdb4a126a509c33f5253ea4c7", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5fb0a2e58a5109afdb4a126a509c33f5253ea4c7", "committedDate": "2020-05-06T04:39:32Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b835d45694e63f5802e44ca490cecf0551a9fb", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/83b835d45694e63f5802e44ca490cecf0551a9fb", "committedDate": "2020-05-06T16:49:19Z", "message": "Merge branch 'master' into documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODMyNzE0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/380#pullrequestreview-406832714", "createdAt": "2020-05-06T17:28:27Z", "commit": {"oid": "83b835d45694e63f5802e44ca490cecf0551a9fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3144, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}