{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTI0MjA2", "number": 1656, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0MDo1OFrOE59KvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0MDo1OFrOE59KvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjA2NDYwOnYy", "diffSide": "LEFT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/ReferenceMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0MDo1OFrOH0uxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1Nzo1MlrOH1LLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1NDMxMQ==", "bodyText": "I think that the previous ordering made slightly more sense: methods were ordered by their usage, top to bottom. How about renaming the checkMatch(Reference, TypeDescription) method to checkThirdPartyTypeMatch (or something similar) without reordering them?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1656#discussion_r525054311", "createdAt": "2020-11-17T10:40:58Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/ReferenceMatcher.java", "diffHunk": "@@ -143,50 +143,6 @@ private boolean doesMatch(ClassLoader loader) {\n     }\n   }\n \n-  // for helper classes we make sure that all abstract methods from super classes and interfaces are\n-  // implemented\n-  private List<Mismatch> checkHelperClassMatch(Reference helperClass, TypePool typePool) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f5a0a99839abf1d0dfa9dab66eeb1d3ff1d26e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxOTgyMQ==", "bodyText": "\ud83d\udc4d that's better", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1656#discussion_r525519821", "createdAt": "2020-11-17T20:57:52Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/matcher/ReferenceMatcher.java", "diffHunk": "@@ -143,50 +143,6 @@ private boolean doesMatch(ClassLoader loader) {\n     }\n   }\n \n-  // for helper classes we make sure that all abstract methods from super classes and interfaces are\n-  // implemented\n-  private List<Mismatch> checkHelperClassMatch(Reference helperClass, TypePool typePool) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1NDMxMQ=="}, "originalCommit": {"oid": "51f5a0a99839abf1d0dfa9dab66eeb1d3ff1d26e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4605, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}