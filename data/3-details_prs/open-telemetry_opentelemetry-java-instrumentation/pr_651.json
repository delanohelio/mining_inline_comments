{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NjI4MTk5", "number": 651, "title": "Kubernetes java client instrumenting", "bodyText": "this pull adds tracing support for kubernetes java client https://github.com/kubernetes-client/java", "createdAt": "2020-07-09T05:32:35Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651", "merged": true, "mergeCommit": {"oid": "ce14b394f751f47769ff1364bc7667ce85d35bac"}, "closed": true, "closedAt": "2020-07-10T18:24:40Z", "author": {"login": "yue9944882"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczIPU2AH2gAyNDQ2NjI4MTk5OjRhYmE5M2Y4ZjI5NjJjYjc5OTc2ZjAzNjhkZjUyMmY0MzMwMjQ4ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczkJNuAFqTQ0NjQyNzQzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4aba93f8f2962cb79976f0368df522f4330248de", "committedDate": "2020-07-09T05:32:12Z", "message": "kubernetes java client support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDEwNzI3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#pullrequestreview-445410727", "createdAt": "2020-07-09T08:45:01Z", "commit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo0NTowMVrOGvHmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1MTozMlrOGvH2IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MDgxMw==", "bodyText": "We usually don't have these tags here. Please remove.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452060813", "createdAt": "2020-07-09T08:45:01Z", "author": {"login": "iNikem"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MTE2OQ==", "bodyText": "Please add class loader matcher as well. There are plenty of examples in other instrumenters.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452061169", "createdAt": "2020-07-09T08:45:35Z", "author": {"login": "iNikem"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $\n+ */\n+@AutoService(Instrumenter.class)\n+public class KubernetesClientInstrumentation extends Instrumenter.Default {\n+\n+  public KubernetesClientInstrumentation() {\n+    super(\"kubernetes\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2MjQ3OA==", "bodyText": "Can you modify incoming parameter interceptors and add a new one there? I don't know this API, so don't have any hard preferences :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452062478", "createdAt": "2020-07-09T08:47:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.matcher.ElementMatchers;\n+import okhttp3.Interceptor;\n+\n+/**\n+ * @author zuoxiu.jm\n+ * @version : KubernetesClientInstrumentation.java, v 0.1 2020\u5e7407\u670808\u65e5 4:35 PM zuoxiu.jm Exp $\n+ */\n+@AutoService(Instrumenter.class)\n+public class KubernetesClientInstrumentation extends Instrumenter.Default {\n+\n+  public KubernetesClientInstrumentation() {\n+    super(\"kubernetes\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.kubernetes.client.openapi.ApiClient\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".KubernetesClientDecorator\",\n+      packageName + \".TracingInterceptor\",\n+      packageName + \".KubernetesRequestDigest\",\n+      packageName + \".KubernetesResource\",\n+      packageName + \".KubernetesVerb\",\n+      packageName + \".ParseKubernetesResourceException\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        ElementMatchers.isMethod()\n+            .and(named(\"initHttpClient\"))\n+            .and(ElementMatchers.takesArguments(1))\n+            .and(ElementMatchers.takesArgument(0, named(\"java.util.List\"))),\n+        KubernetesClientInstrumentation.class.getName() + \"$KubernetesAdvice\");\n+  }\n+\n+  public static class KubernetesAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void addTracingInterceptor(\n+        @Advice.This ApiClient apiClient,\n+        @Advice.Argument(0) final List<Interceptor> interceptors) {\n+\n+      for (final Interceptor interceptor : interceptors) {\n+        if (interceptor instanceof TracingInterceptor) {\n+          return;\n+        }\n+      }\n+\n+      apiClient.setHttpClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NDgwMQ==", "bodyText": "Does Kubernetes client depend on okhttp? This compileOnly here essentially assumes that whenever this instrumentation is applied, there will be okhttp present in that JVM as well. Is it true?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452064801", "createdAt": "2020-07-09T08:51:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/kubernetes/kubernetes.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"io.kubernetes\"\n+    module = \"client-java-api\"\n+    versions = \"[7.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly(group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.0.0')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MzE0NzEy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#pullrequestreview-445314712", "createdAt": "2020-07-09T06:12:42Z", "commit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNjoxMjo0MlrOGvDAcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODo1Njo0MFrOGvICrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NTUyMw==", "bodyText": "Does it make sense to reuse our normal okhttp decorator?\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/okhttp/okhttp-3.0/src/main/java/io/opentelemetry/auto/instrumentation/okhttp/v3_0/OkHttpClientDecorator.java#L26\nIt's currently not that much code but could grow into more and more duplication", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451985523", "createdAt": "2020-07-09T06:12:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesClientDecorator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n+import io.opentelemetry.trace.Tracer;\n+import java.net.URI;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+public class KubernetesClientDecorator extends HttpClientDecorator<Request, Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE1OA==", "bodyText": "Make everything except the instrumentation and interceptor package private", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451986158", "createdAt": "2020-07-09T06:14:33Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4Njg5NA==", "bodyText": "commons lang is leaked in but is not one of our standard libraries, either use guava or just inline the checks since it's not much code here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451986894", "createdAt": "2020-07-09T06:16:15Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzEyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n          \n          \n            \n                  if (urlPath.startsWith(\"/api/v1\")) {\n          \n      \n    \n    \n  \n\nDoesn't seem like it can be null but if it can do an explicit null check instead probably in isResourceRequest", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451987123", "createdAt": "2020-07-09T06:16:53Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NzQyOQ==", "bodyText": "Use concatenation of StringBuilder instead of String.format", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451987429", "createdAt": "2020-07-09T06:17:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n+        digest.resourceMeta = KubernetesResource.parseCoreResource(urlPath);\n+      } else {\n+        digest.resourceMeta = KubernetesResource.parseRegularResource(urlPath);\n+      }\n+      digest.verb =\n+          KubernetesVerb.of(\n+              request.method(),\n+              hasNamePathParameter(digest.resourceMeta),\n+              hasWatchParameter(request));\n+      return digest;\n+    } catch (ParseKubernetesResourceException e) {\n+      return nonResource(urlPath);\n+    }\n+  }\n+\n+  private static KubernetesRequestDigest nonResource(String urlPath) {\n+    KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, true);\n+    return digest;\n+  }\n+\n+  public static boolean isResourceRequest(String urlPath) {\n+    return RESOURCE_URL_PATH_PATTERN.matcher(urlPath).matches();\n+  }\n+\n+  private static boolean hasWatchParameter(Request request) {\n+    return !StringUtils.isEmpty(request.url().queryParameter(\"watch\"));\n+  }\n+\n+  private static boolean hasNamePathParameter(KubernetesResource resource) {\n+    return !StringUtils.isEmpty(resource.getName());\n+  }\n+\n+  private final String urlPath;\n+  private final boolean isNonResourceRequest;\n+\n+  private KubernetesResource resourceMeta;\n+  private KubernetesVerb verb;\n+\n+  public String getUrlPath() {\n+    return urlPath;\n+  }\n+\n+  public boolean isNonResourceRequest() {\n+    return isNonResourceRequest;\n+  }\n+\n+  public KubernetesResource getResourceMeta() {\n+    return resourceMeta;\n+  }\n+\n+  public KubernetesVerb getVerb() {\n+    return verb;\n+  }\n+\n+  @Override\n+  public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4ODc5MA==", "bodyText": "Pass these into constructor and make final as well", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r451988790", "createdAt": "2020-07-09T06:21:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesRequestDigest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Pattern;\n+import okhttp3.Request;\n+import org.apache.commons.lang.StringUtils;\n+\n+public class KubernetesRequestDigest {\n+\n+  public static final Pattern RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\"^/(api|apis)(/\\\\S+)?/v\\\\d\\\\w*/\\\\S+\");\n+\n+  private KubernetesRequestDigest(String urlPath, boolean isNonResourceRequest) {\n+    this.urlPath = urlPath;\n+    this.isNonResourceRequest = isNonResourceRequest;\n+  }\n+\n+  public static KubernetesRequestDigest parse(Request request) {\n+    String urlPath = request.url().encodedPath();\n+    if (!isResourceRequest(urlPath)) {\n+      return nonResource(urlPath);\n+    }\n+    try {\n+      KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, false);\n+      if (StringUtils.startsWith(urlPath, \"/api/v1\")) {\n+        digest.resourceMeta = KubernetesResource.parseCoreResource(urlPath);\n+      } else {\n+        digest.resourceMeta = KubernetesResource.parseRegularResource(urlPath);\n+      }\n+      digest.verb =\n+          KubernetesVerb.of(\n+              request.method(),\n+              hasNamePathParameter(digest.resourceMeta),\n+              hasWatchParameter(request));\n+      return digest;\n+    } catch (ParseKubernetesResourceException e) {\n+      return nonResource(urlPath);\n+    }\n+  }\n+\n+  private static KubernetesRequestDigest nonResource(String urlPath) {\n+    KubernetesRequestDigest digest = new KubernetesRequestDigest(urlPath, true);\n+    return digest;\n+  }\n+\n+  public static boolean isResourceRequest(String urlPath) {\n+    return RESOURCE_URL_PATH_PATTERN.matcher(urlPath).matches();\n+  }\n+\n+  private static boolean hasWatchParameter(Request request) {\n+    return !StringUtils.isEmpty(request.url().queryParameter(\"watch\"));\n+  }\n+\n+  private static boolean hasNamePathParameter(KubernetesResource resource) {\n+    return !StringUtils.isEmpty(resource.getName());\n+  }\n+\n+  private final String urlPath;\n+  private final boolean isNonResourceRequest;\n+\n+  private KubernetesResource resourceMeta;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODAxNA==", "bodyText": "Make final and pass in through constructor", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#discussion_r452068014", "createdAt": "2020-07-09T08:56:40Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes/src/main/java/io/opentelemetry/auto/instrumentation/kubernetes/KubernetesResource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.kubernetes;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class KubernetesResource {\n+\n+  public static final Pattern CORE_RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\n+          \"^/api/v1(/namespaces/(?<namespace>[\\\\w-]+))?/(?<resource>[\\\\w-]+)(/(?<name>[\\\\w-]+))?(/(?<subresource>[\\\\w-]+))?\");\n+\n+  public static final Pattern REGULAR_RESOURCE_URL_PATH_PATTERN =\n+      Pattern.compile(\n+          \"^/apis/(?<group>\\\\S+?)/(?<version>\\\\S+?)(/namespaces/(?<namespace>[\\\\w-]+))?/(?<resource>[\\\\w-]+)(/(?<name>[\\\\w-]+))?(/(?<subresource>[\\\\w-]+))?\");\n+\n+  public static KubernetesResource parseCoreResource(String urlPath)\n+      throws ParseKubernetesResourceException {\n+    Matcher matcher = CORE_RESOURCE_URL_PATH_PATTERN.matcher(urlPath);\n+    if (!matcher.matches()) {\n+      throw new ParseKubernetesResourceException();\n+    }\n+    KubernetesResource resource = new KubernetesResource();\n+    resource.apiGroup = \"\";\n+    resource.apiVersion = \"v1\";\n+    resource.resource = matcher.group(\"resource\");\n+    resource.subResource = matcher.group(\"subresource\");\n+    resource.namespace = matcher.group(\"namespace\");\n+    resource.name = matcher.group(\"name\");\n+    return resource;\n+  }\n+\n+  public static KubernetesResource parseRegularResource(String urlPath)\n+      throws ParseKubernetesResourceException {\n+    Matcher matcher = REGULAR_RESOURCE_URL_PATH_PATTERN.matcher(urlPath);\n+    if (!matcher.matches()) {\n+      throw new ParseKubernetesResourceException();\n+    }\n+    KubernetesResource resource = new KubernetesResource();\n+    resource.apiGroup = matcher.group(\"group\");\n+    resource.apiVersion = matcher.group(\"version\");\n+    resource.resource = matcher.group(\"resource\");\n+    resource.subResource = matcher.group(\"subresource\");\n+    resource.namespace = matcher.group(\"namespace\");\n+    resource.name = matcher.group(\"name\");\n+    return resource;\n+  }\n+\n+  private String apiGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aba93f8f2962cb79976f0368df522f4330248de"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef76bbdf31bdd269b06f4e142a241e25919da45e", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef76bbdf31bdd269b06f4e142a241e25919da45e", "committedDate": "2020-07-09T10:25:44Z", "message": "addressing review comments"}, "afterCommit": {"oid": "130e543597467090fe7b428a3626896919b33e1e", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/130e543597467090fe7b428a3626896919b33e1e", "committedDate": "2020-07-09T10:40:21Z", "message": "addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "130e543597467090fe7b428a3626896919b33e1e", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/130e543597467090fe7b428a3626896919b33e1e", "committedDate": "2020-07-09T10:40:21Z", "message": "addressing review comments"}, "afterCommit": {"oid": "56637a031023bbb417734ee96885091e3ac53536", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56637a031023bbb417734ee96885091e3ac53536", "committedDate": "2020-07-09T17:01:25Z", "message": "addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56637a031023bbb417734ee96885091e3ac53536", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/56637a031023bbb417734ee96885091e3ac53536", "committedDate": "2020-07-09T17:01:25Z", "message": "addressing review comments"}, "afterCommit": {"oid": "dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "committedDate": "2020-07-10T06:21:41Z", "message": "addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dc6a4b6c809bb73a7a502d182c3e276466fe96a4", "committedDate": "2020-07-10T06:21:41Z", "message": "addressing review comments"}, "afterCommit": {"oid": "75da85520c53b58d5e6c94ad655193714d096eac", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/75da85520c53b58d5e6c94ad655193714d096eac", "committedDate": "2020-07-10T06:54:18Z", "message": "addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995db0becbc0b915212ec6b95998a152aa97c44f", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/995db0becbc0b915212ec6b95998a152aa97c44f", "committedDate": "2020-07-10T13:10:17Z", "message": "addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75da85520c53b58d5e6c94ad655193714d096eac", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/75da85520c53b58d5e6c94ad655193714d096eac", "committedDate": "2020-07-10T06:54:18Z", "message": "addressing review comments"}, "afterCommit": {"oid": "995db0becbc0b915212ec6b95998a152aa97c44f", "author": {"user": {"login": "yue9944882", "name": "Min Kim"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/995db0becbc0b915212ec6b95998a152aa97c44f", "committedDate": "2020-07-10T13:10:17Z", "message": "addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDI3NDM2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/651#pullrequestreview-446427436", "createdAt": "2020-07-10T14:02:52Z", "commit": {"oid": "995db0becbc0b915212ec6b95998a152aa97c44f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3074, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}