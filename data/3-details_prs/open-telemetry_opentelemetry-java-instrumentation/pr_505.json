{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODQyNjg2", "number": 505, "title": "First section of the tutorial 1/3", "bodyText": "This pull request contains the first section of my proposed tutorial.\nSections 2 and 3 will be added in subsequent pull requests.\nIn total this readme will be around 900 lines. I decided to split it across multiple pull requests to improve the review process :)", "createdAt": "2020-06-12T19:10:47Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505", "merged": true, "mergeCommit": {"oid": "98775816ada80c09c50745b17764c914e1816283"}, "closed": true, "closedAt": "2020-06-16T01:58:33Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqnqtdgH2gAyNDMzODQyNjg2OmI4ZjhhMWI0OTdhNjVlYjI5OTdmNzI5ZTE4NTlmMWRlZGUyNWVkNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrqed5gH2gAyNDMzODQyNjg2OjI5N2Y5MjgzNDI4MzJiMDc1NDczY2FkZGNjZDI0NzBkNzFjNTk2M2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b8f8a1b497a65eb2997f729e1859f1dede25ed50", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b8f8a1b497a65eb2997f729e1859f1dede25ed50", "committedDate": "2020-06-12T19:03:51Z", "message": "First section of the tutorial 1/3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/eb6fb4950d54ced866b91be25eb858d4ae48b308", "committedDate": "2020-06-12T21:23:10Z", "message": "Update README.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDY4MzY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#pullrequestreview-430068369", "createdAt": "2020-06-12T22:29:33Z", "commit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjoyOTozM1rOGjTH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMzoxMDozNVrOGjTq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NjY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n          \n          \n            \n            In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-instrumentation-spring package which can improve this process.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439666652", "createdAt": "2020-06-12T22:29:33Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NzQ0Ng==", "bodyText": "replace tabs with spaces everywhere, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<groupId>io.opentelemetry</groupId>\n          \n          \n            \n                <groupId>io.opentelemetry</groupId>", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439667446", "createdAt": "2020-06-12T22:32:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2Nzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n          \n          \n            \n            To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration class. In section 3 we will use an annotation to set up this configuration.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439667872", "createdAt": "2020-06-12T22:34:40Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2ODE4OA==", "bodyText": "is \\\\TODO: accidental?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439668188", "createdAt": "2020-06-12T22:35:58Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MjE3Ng==", "bodyText": "if you indent these blocks at least 3 spaces, it will indent it visually, and more importantly, it will won't split up the ordered list into multiple ordered lists in the generated markdown, which is especially good for screen readers \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439672176", "createdAt": "2020-06-12T22:54:10Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MjQ5Mw==", "bodyText": "the second one will overwrite the first one since they have the same name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439672493", "createdAt": "2020-06-12T22:55:42Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MjY1Ng==", "bodyText": "no need for cryptic abbreviation \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static String SS_URL = \"http://localhost:8081/time\";\n          \n          \n            \n              private static String SECOND_SERVICE_URL = \"http://localhost:8081/time\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439672656", "createdAt": "2020-06-12T22:56:27Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MjkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n          \n          \n            \n            HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, we used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439672917", "createdAt": "2020-06-12T22:57:38Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MzI4OQ==", "bodyText": "this is often declared static and initialized inline", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439673289", "createdAt": "2020-06-12T22:59:20Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3NDA5MQ==", "bodyText": "I think this API has changed (probably worth re-checking all of the code against 0.5.0)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Span currentSpan = tracer.getCurrentSpan();\n          \n          \n            \n                textFormat.inject(currentSpan.getContext(), headers, setter);\n          \n          \n            \n                textFormat.inject(Context.current(), headers, setter);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439674091", "createdAt": "2020-06-12T23:02:56Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;\n+\n+  public HttpUtils(Tracer tracer) {\n+    textFormat = tracer.getHttpTextFormat();\n+    setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+      @Override\n+      public void put(HttpHeaders headers, String key, String value) {\n+        headers.set(key, value);\n+      }\n+    };\n+  }\n+\n+  public String callEndpoint(String url) throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+\n+    Span currentSpan = tracer.getCurrentSpan();\n+    textFormat.inject(currentSpan.getContext(), headers, setter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3NDQxOQ==", "bodyText": "it's not clear the reason for having a scope here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439674419", "createdAt": "2020-06-12T23:04:37Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;\n+\n+  public HttpUtils(Tracer tracer) {\n+    textFormat = tracer.getHttpTextFormat();\n+    setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+      @Override\n+      public void put(HttpHeaders headers, String key, String value) {\n+        headers.set(key, value);\n+      }\n+    };\n+  }\n+\n+  public String callEndpoint(String url) throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+\n+    Span currentSpan = tracer.getCurrentSpan();\n+    textFormat.inject(currentSpan.getContext(), headers, setter);\n+\n+    HttpEntity<String> entity = new HttpEntity<String>(headers);\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    ResponseEntity<String> response =\n+        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);\n+\n+    return response.getBody();\n+  }\n+}\n+```\n+### SecondService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+  \n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(SecondServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for SecondService\n+5. Start a span to wrap the SecondServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @GetMapping\n+  public String callSecondTracedMethod() {\n+    Span span = tracer.spanBuilder(\"time\").startSpan();\n+    span.addEvent(\"SecondServiceController Entered\");\n+    span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"It's time to get a watch\";\n+    } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3NDgyMw==", "bodyText": "i'm not sure, i think the url is not correct, and the suggestion to remove the word sample is just to avoid confusion with sampling\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/time` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:\n          \n          \n            \n            Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. To send a request enter the following in a browser of your choice:", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439674823", "createdAt": "2020-06-12T23:06:23Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;\n+\n+  public HttpUtils(Tracer tracer) {\n+    textFormat = tracer.getHttpTextFormat();\n+    setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+      @Override\n+      public void put(HttpHeaders headers, String key, String value) {\n+        headers.set(key, value);\n+      }\n+    };\n+  }\n+\n+  public String callEndpoint(String url) throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+\n+    Span currentSpan = tracer.getCurrentSpan();\n+    textFormat.inject(currentSpan.getContext(), headers, setter);\n+\n+    HttpEntity<String> entity = new HttpEntity<String>(headers);\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    ResponseEntity<String> response =\n+        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);\n+\n+    return response.getBody();\n+  }\n+}\n+```\n+### SecondService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+  \n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(SecondServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for SecondService\n+5. Start a span to wrap the SecondServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @GetMapping\n+  public String callSecondTracedMethod() {\n+    Span span = tracer.spanBuilder(\"time\").startSpan();\n+    span.addEvent(\"SecondServiceController Entered\");\n+    span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"It's time to get a watch\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+### Run FirstService and SecondService\n+\n+***To view your distributed traces ensure either LogExporter or Jaeger is configured in the OtelConfig.java file*** \n+\n+To view traces on the Jaeger UI, deploy a Jaeger Exporter on localhost by running the command in terminal:\n+\n+`docker run --rm -it --network=host jaegertracing/all-in-one` \n+\n+After running Jaeger locally, navigate to the url below. Make sure to refresh the UI to view the exported traces from the two web services:\n+\n+`http://localhost:16686`\n+ \n+Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/time` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3NTI1MA==", "bodyText": "i'm not sure, i think the url is not correct\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `http://localhost:8080/time`\n          \n          \n            \n            `http://localhost:8080/message`", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439675250", "createdAt": "2020-06-12T23:08:38Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;\n+\n+  public HttpUtils(Tracer tracer) {\n+    textFormat = tracer.getHttpTextFormat();\n+    setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+      @Override\n+      public void put(HttpHeaders headers, String key, String value) {\n+        headers.set(key, value);\n+      }\n+    };\n+  }\n+\n+  public String callEndpoint(String url) throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+\n+    Span currentSpan = tracer.getCurrentSpan();\n+    textFormat.inject(currentSpan.getContext(), headers, setter);\n+\n+    HttpEntity<String> entity = new HttpEntity<String>(headers);\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    ResponseEntity<String> response =\n+        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);\n+\n+    return response.getBody();\n+  }\n+}\n+```\n+### SecondService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+  \n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(SecondServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for SecondService\n+5. Start a span to wrap the SecondServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @GetMapping\n+  public String callSecondTracedMethod() {\n+    Span span = tracer.spanBuilder(\"time\").startSpan();\n+    span.addEvent(\"SecondServiceController Entered\");\n+    span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"It's time to get a watch\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+### Run FirstService and SecondService\n+\n+***To view your distributed traces ensure either LogExporter or Jaeger is configured in the OtelConfig.java file*** \n+\n+To view traces on the Jaeger UI, deploy a Jaeger Exporter on localhost by running the command in terminal:\n+\n+`docker run --rm -it --network=host jaegertracing/all-in-one` \n+\n+After running Jaeger locally, navigate to the url below. Make sure to refresh the UI to view the exported traces from the two web services:\n+\n+`http://localhost:16686`\n+ \n+Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/time` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:\n+\n+`http://localhost:8080/time`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3NTYyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SS_URL. ***\n          \n          \n            \n            ***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SECOND_SERVICE_URL. ***", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r439675624", "createdAt": "2020-06-12T23:10:35Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,344 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-contrib-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-api</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-sdk</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\t\n+<dependency>\n+    <groupId>io.grpc</groupId>\n+    <artifactId>grpc-context</artifactId>\n+    <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-logging</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+\t<groupId>io.opentelemetry</groupId>\n+\t<artifactId>opentelemetry-exporters-jaeger</artifactId>\n+\t<version>0.5.0</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-protobuf</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+<dependency>\n+\t<groupId>io.grpc</groupId>\n+\t<artifactId>grpc-netty</artifactId>\n+\t<version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration file. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+  private static tracerName = \"foo\"; \\\\TODO:\n+  @Bean\n+  public Tracer otelTracer() throws Exception {\n+    final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+    \n+    return tracer;\n+  }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+        .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+            .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+            .build())\n+        .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+     \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(FirstServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @Autowired\n+  HttpUtils httpUtils;\n+\n+  private static String SS_URL = \"http://localhost:8081/time\";\n+\n+  @GetMapping\n+  public String firstTracedMethod() {\n+    Span span = tracer.spanBuilder(\"message\").startSpan();\n+    span.addEvent(\"Controller Entered\");\n+    span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"Second Service says: \" + httpUtils.callEndpoint(SS_URL);\n+    } catch (Exception e) {\n+      span.setAttribute(\"error\", e.toString());\n+      span.setAttribute(\"error\", true);\n+      return \"ERROR: I can't tell the time\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, I used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+  @Autowired\n+  private Tracer tracer;\n+\n+  private HttpTextFormat<SpanContext> textFormat;\n+  private HttpTextFormat.Setter<HttpHeaders> setter;\n+\n+  public HttpUtils(Tracer tracer) {\n+    textFormat = tracer.getHttpTextFormat();\n+    setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+      @Override\n+      public void put(HttpHeaders headers, String key, String value) {\n+        headers.set(key, value);\n+      }\n+    };\n+  }\n+\n+  public String callEndpoint(String url) throws Exception {\n+    HttpHeaders headers = new HttpHeaders();\n+\n+    Span currentSpan = tracer.getCurrentSpan();\n+    textFormat.inject(currentSpan.getContext(), headers, setter);\n+\n+    HttpEntity<String> entity = new HttpEntity<String>(headers);\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    ResponseEntity<String> response =\n+        restTemplate.exchange(url, HttpMethod.GET, entity, String.class);\n+\n+    return response.getBody();\n+  }\n+}\n+```\n+### SecondService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+  \n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+  public static void main(String[] args) throws IOException {\n+    SpringApplication.run(SecondServiceApplication.class, args);\n+  }\n+}\n+```\n+\n+4. Create a RestController for SecondService\n+5. Start a span to wrap the SecondServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+  @Autowired\n+  private Tracer tracer;\n+\n+  @GetMapping\n+  public String callSecondTracedMethod() {\n+    Span span = tracer.spanBuilder(\"time\").startSpan();\n+    span.addEvent(\"SecondServiceController Entered\");\n+    span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+\n+    try (Scope scope = tracer.withSpan(span)) {\n+      return \"It's time to get a watch\";\n+    } finally {\n+      span.end();\n+    }\n+  }\n+}\n+```\n+\n+### Run FirstService and SecondService\n+\n+***To view your distributed traces ensure either LogExporter or Jaeger is configured in the OtelConfig.java file*** \n+\n+To view traces on the Jaeger UI, deploy a Jaeger Exporter on localhost by running the command in terminal:\n+\n+`docker run --rm -it --network=host jaegertracing/all-in-one` \n+\n+After running Jaeger locally, navigate to the url below. Make sure to refresh the UI to view the exported traces from the two web services:\n+\n+`http://localhost:16686`\n+ \n+Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/time` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:\n+\n+`http://localhost:8080/time`\n+\n+***Note: The default port for the Apache Tomcat is 8080. On localhost both FirstService and SecondService services will attempt to run on this port raising an error. To avoid this add `server.port=8081` to the resources/application.properties file. Ensure the port specified corresponds to port referenced by FirstServiceController.SS_URL. ***", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6fb4950d54ced866b91be25eb858d4ae48b308"}, "originalPosition": 345}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eed0d09b53b9df337d37a3fa12d38560c948809", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8eed0d09b53b9df337d37a3fa12d38560c948809", "committedDate": "2020-06-14T19:31:39Z", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd83e3f488c9373d71d17fed6cf29a8bf63f6462", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cd83e3f488c9373d71d17fed6cf29a8bf63f6462", "committedDate": "2020-06-15T13:58:16Z", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ef70ad8fa9d37e02491838629fd5fcab2367cf0", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6ef70ad8fa9d37e02491838629fd5fcab2367cf0", "committedDate": "2020-06-15T14:00:01Z", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdffbcc99e98c83f5a69c20975bc95610b05787a", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fdffbcc99e98c83f5a69c20975bc95610b05787a", "committedDate": "2020-06-15T14:03:49Z", "message": "Update instrumentation-core/spring/README.md\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f80cfe1483c243215e26bfbe6f8f87746b7db3aa", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f80cfe1483c243215e26bfbe6f8f87746b7db3aa", "committedDate": "2020-06-15T14:36:58Z", "message": "trask changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c11c07dd18c05f6dc14e22e8034058a9d8d689", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/80c11c07dd18c05f6dc14e22e8034058a9d8d689", "committedDate": "2020-06-15T14:45:10Z", "message": "line space and general clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3602717f2019c37197aac7553adfa0be99e2d40", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3602717f2019c37197aac7553adfa0be99e2d40", "committedDate": "2020-06-15T14:49:07Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODI1NDky", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#pullrequestreview-430825492", "createdAt": "2020-06-15T16:55:04Z", "commit": {"oid": "e3602717f2019c37197aac7553adfa0be99e2d40"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NTowNFrOGj6r6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzowMToxN1rOGj66Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDg1Ng==", "bodyText": "and move to the top of the class is common for static fields\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private HttpTextFormat.Setter<HttpHeaders> setter = new HttpTextFormat.Setter<HttpHeaders>() {\n          \n          \n            \n               private static final HttpTextFormat.Setter<HttpHeaders> setter = new HttpTextFormat.Setter<HttpHeaders>() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r440314856", "createdAt": "2020-06-15T16:55:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,345 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-instrumentation-spring package. This section will equip you with new tools to streamline the setup and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-instrumentation-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-api</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-sdk</artifactId>\n+   <version>0.5.0</version>\n+</dependency>   \n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-context</artifactId>\n+   <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-exporters-logging</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-protobuf</artifactId>\n+   <version>1.27.2</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-netty</artifactId>\n+   <version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration class. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+   private static tracerName = \"fooTracer\"; \n+   @Bean\n+   public Tracer otelTracer() throws Exception {\n+      final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+      SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+      \n+      return tracer;\n+   }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+            .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+                  .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+                  .build())\n+            .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+       \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String secondServiceUrl = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+      Span span = tracer.spanBuilder(\"message\").startSpan();\n+      span.addEvent(\"Controller Entered\");\n+      span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+      try (Scope scope = tracer.withSpan(span)) {\n+         return \"Second Service says: \" + httpUtils.callEndpoint(secondServiceUrl);\n+      } catch (Exception e) {\n+         span.addEvent(e.toString());\n+         span.setAttribute(\"error\", true);\n+         return \"ERROR: I can't tell the time\";\n+      } finally {\n+         span.end();\n+      }\n+   }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, we used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.grpc.Context;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   private HttpTextFormat<SpanContext> textFormat;\n+   private HttpTextFormat.Setter<HttpHeaders> setter = new HttpTextFormat.Setter<HttpHeaders>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3602717f2019c37197aac7553adfa0be99e2d40"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxODU1NQ==", "bodyText": "It's not clear to me what the part I removed below is for, so I suggest either removing or clarifying that it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:\n          \n          \n            \n            \n          \n          \n            \n            `http://localhost:8081/time`\n          \n          \n            \n            Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#discussion_r440318555", "createdAt": "2020-06-15T17:01:17Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/README.md", "diffHunk": "@@ -2,11 +2,345 @@\n <!-- ReadMe is in progress -->\n <!-- TO DO: Add sections for starter guide -->\n \n-\n This package streamlines the manual instrumentation process of OpenTelemetry for [Spring](https://spring.io/projects/spring-framework) and [Spring Boot](https://spring.io/projects/spring-boot) applications. It will enable you to add traces to requests and database calls with minimal changes to application code. This package will not fully automate your OpenTelemetry instrumentation, instead, it will provide you with better tools to instrument your own code. \n \n-The first section will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n+The [first section](#manual-instrumentation-with-java-sdk) will walk you through span creation and propagation using the OpenTelemetry Java API and [Spring's RestTemplate Http Web Client](https://spring.io/guides/gs/consuming-rest/). This approach will use the \"vanilla\" OpenTelemetry API to make explicit tracing calls within an application's controller. \n \n The second section will build on the first. It will walk you through implementing spring-web handler and interceptor interfaces to create traces with minimal changes to existing application code. Using the OpenTelemetry API, this approach involves copy and pasting files and a significant amount of manual configurations. \n \n-The third section will walk you through the annotations and configurations defined in the opentelemetry-contrib-spring package. This section will equip you with new tools to streamline the set up and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.  \n+The third section will walk you through the annotations and configurations defined in the opentelemetry-instrumentation-spring package. This section will equip you with new tools to streamline the setup and instrumentation of OpenTelemetry on Spring and Spring Boot applications. With these tools you will be able to setup distributed tracing with little to no changes to existing configurations and easily customize traces with minor additions to application code.\n+\n+In this guide we will be using a running example. In section one and two, we will create two spring web services using Spring Boot. We will then trace the requests between these services using two different approaches. Finally, in section three we will explore tools in the opentelemetry-instrumentation-spring package which can improve this process.\n+\n+# Manual Instrumentation Guide\n+\n+## Create two Spring Projects\n+\n+Using the [spring project initializer](https://start.spring.io/), we will create two spring projects.  Name one project `FirstService` and the other `SecondService`. Make sure to select maven, Spring Boot 2.3, Java, and add the spring-web dependency. After downloading the two projects include the OpenTelemetry dependencies and configuration listed below. \n+\n+## Setup for Manual Instrumentation\n+\n+Add the dependencies below to enable OpenTelemetry in `FirstService` and `SecondService`. The Jaeger and LoggingExporter packages are recommended for exporting traces but are not required. As of May 2020, Jaeger, Zipkin, OTLP, and Logging exporters are supported by opentelemetry-java. Feel free to use whatever exporter you are most comfortable with. \n+\n+### Maven\n+ \n+#### OpenTelemetry\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-api</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-sdk</artifactId>\n+   <version>0.5.0</version>\n+</dependency>   \n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-context</artifactId>\n+   <version>1.24.0</version>\n+</dependency>\n+\n+```\n+\n+#### LoggingExporter\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-exporters-logging</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+```\n+\n+#### JaegerExporter\n+```xml\n+<dependency>\n+   <groupId>io.opentelemetry</groupId>\n+   <artifactId>opentelemetry-exporters-jaeger</artifactId>\n+   <version>0.5.0</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-protobuf</artifactId>\n+   <version>1.27.2</version>\n+</dependency>\n+<dependency>\n+   <groupId>io.grpc</groupId>\n+   <artifactId>grpc-netty</artifactId>\n+   <version>1.27.2</version>\n+</dependency>\n+```\n+\n+### Gradle\n+ \n+#### OpenTelemetry\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-api:0.5.0\"\n+compile \"io.opentelemetry:opentelemetry-sdk:0.5.0\"\n+compile \"io.grpc:grpc-context:1.24.0\"\n+```\n+\n+#### LoggingExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+```\n+\n+#### JaegerExporter\n+```gradle\n+compile \"io.opentelemetry:opentelemetry-exporters-jaeger:0.5.0\"\n+compile \"io.grpc:grpc-protobuf:1.27.2\"\n+compile \"io.grpc:grpc-netty:1.27.2\"\n+```\n+\n+### Tracer Configuration\n+\n+To enable tracing in your OpenTelemetry project configure a Tracer Bean. This bean will be auto wired to controllers to create and propagate spans. This can be seen in the `Tracer otelTracer()` method below. If you plan to use a trace exporter remember to also include it in this configuration class. In section 3 we will use an annotation to set up this configuration.\n+\n+A sample OpenTelemetry configuration using LoggingExporter is shown below: \n+\n+```java\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.exporters.jaeger.JaegerGrpcSpanExporter;\n+import io.opentelemetry.exporters.logging.*;\n+\n+@Configuration\n+public class OtelConfig {\n+   private static tracerName = \"fooTracer\"; \n+   @Bean\n+   public Tracer otelTracer() throws Exception {\n+      final Tracer tracer = OpenTelemetry.getTracer(tracerName);\n+\n+      SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n+      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+      \n+      return tracer;\n+   }\n+}\n+```\n+\n+\n+The file above configures an OpenTelemetry tracer and a span processor. The span processor builds a log exporter which will output spans to the console. Similarly, one could add another exporter, such as the `JaegerExporter`, to visualize traces on a different back-end. Similar to how the `LoggingExporter` is configured, a Jaeger configuration can be added to the `OtelConfig` class above. \n+\n+Sample configuration for a Jaeger Exporter:\n+\n+```java\n+\n+SpanProcessor jaegerProcessor = SimpleSpanProcessor\n+            .newBuilder(JaegerGrpcSpanExporter.newBuilder().setServiceName(tracerName)\n+                  .setChannel(ManagedChannelBuilder.forAddress(\"localhost\", 14250).usePlaintext().build())\n+                  .build())\n+            .build();\n+OpenTelemetrySdk.getTracerProvider().addSpanProcessor(jaegerProcessor);\n+```\n+       \n+### Project Background\n+\n+Here we will create rest controllers for `FirstService` and `SecondService`.\n+`FirstService` will send a GET request to `SecondService` to retrieve the current time. After this request is resolved, `FirstService` then will append a message to time and return a string to the client. \n+\n+## Manual Instrumentation with Java SDK\n+\n+### Add OpenTelemetry to FirstService and SecondService\n+\n+Required dependencies and configurations for FirstService and SecondService projects can be found [here](#setup-for-manual-instrumentation).\n+\n+### FirstService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+```java\n+@SpringBootApplication\n+public class FirstServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(FirstServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+4. Create a RestController for FirstService\n+5. Create a span to wrap the FirstServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+import HttpUtils;\n+\n+@RestController\n+@RequestMapping(value = \"/message\")\n+public class FirstServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @Autowired\n+   HttpUtils httpUtils;\n+\n+   private static String secondServiceUrl = \"http://localhost:8081/time\";\n+\n+   @GetMapping\n+   public String firstTracedMethod() {\n+      Span span = tracer.spanBuilder(\"message\").startSpan();\n+      span.addEvent(\"Controller Entered\");\n+      span.setAttribute(\"what.are.you\", \"Je suis attribute\");\n+\n+      try (Scope scope = tracer.withSpan(span)) {\n+         return \"Second Service says: \" + httpUtils.callEndpoint(secondServiceUrl);\n+      } catch (Exception e) {\n+         span.addEvent(e.toString());\n+         span.setAttribute(\"error\", true);\n+         return \"ERROR: I can't tell the time\";\n+      } finally {\n+         span.end();\n+      }\n+   }\n+}\n+```\n+\n+6. Configure `HttpUtils.callEndpoint` to inject span context into request. This is key to propagate the trace to the SecondService\n+\n+HttpUtils is a helper class that injects the current span context into outgoing requests. This involves adding the tracer id and the trace-state to a request header. For this example, we used `RestTemplate` to send requests from `FirstService` to `SecondService`. A similar approach can be used with popular Java Web Clients such as [okhttp](https://square.github.io/okhttp/) and [apache http client](https://www.tutorialspoint.com/apache_httpclient/apache_httpclient_quick_guide.htm). The key to this implementation is to override the put method in `HttpTextFormat.Setter<?>` to handle your request format. `HttpTextFormat.inject` will use this setter to set `traceparent` and `tracestate` headers in your requests. These values will be used to propagate your span context to external services.\n+\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.client.RestTemplate;\n+\n+import io.grpc.Context;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+\n+@Component\n+public class HttpUtils {\n+\n+   @Autowired\n+   private Tracer tracer;\n+\n+   private HttpTextFormat<SpanContext> textFormat;\n+   private HttpTextFormat.Setter<HttpHeaders> setter = new HttpTextFormat.Setter<HttpHeaders>() {\n+         @Override\n+         public void set(HttpHeaders headers, String key, String value) {\n+            headers.set(key, value);\n+         }\n+      };\n+\n+   public HttpUtils(Tracer tracer) {\n+      textFormat = tracer.getHttpTextFormat();\n+   }\n+\n+   public String callEndpoint(String url) throws Exception {\n+      HttpHeaders headers = new HttpHeaders();\n+\n+      textFormat.inject(Context.current(), headers, setter);\n+\n+      HttpEntity<String> entity = new HttpEntity<String>(headers);\n+      RestTemplate restTemplate = new RestTemplate();\n+\n+      ResponseEntity<String> response =\n+            restTemplate.exchange(url, HttpMethod.GET, entity, String.class);\n+\n+      return response.getBody();\n+   }\n+}\n+```\n+### SecondService\n+\n+1. Ensure OpenTelemetry dependencies are included\n+2. Ensure an OpenTelemetry Tracer is configured\n+3. Ensure a Spring Boot main class was created by the Spring initializer\n+\n+\n+```java\n+import java.io.IOException;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class SecondServiceApplication {\n+\n+   public static void main(String[] args) throws IOException {\n+      SpringApplication.run(SecondServiceApplication.class, args);\n+   }\n+}\n+```\n+\n+4. Create a RestController for SecondService\n+5. Start a span to wrap the SecondServiceController\n+\n+```java\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+\n+@RestController\n+@RequestMapping(value = \"/time\")\n+public class SecondServiceController {\n+   @Autowired\n+   private Tracer tracer;\n+\n+   @GetMapping\n+   public String callSecondTracedMethod() {\n+      Span span = tracer.spanBuilder(\"time\").startSpan();\n+      span.addEvent(\"SecondServiceController Entered\");\n+      span.setAttribute(\"what.am.i\", \"Tu es une legume\");\n+\n+      try{\n+         return \"It's time to get a watch\";\n+      } finally {\n+         span.end();\n+      }\n+   }\n+}\n+```\n+\n+### Run FirstService and SecondService\n+\n+***To view your distributed traces ensure either LogExporter or Jaeger is configured in the OtelConfig.java file*** \n+\n+To view traces on the Jaeger UI, deploy a Jaeger Exporter on localhost by running the command in terminal:\n+\n+`docker run --rm -it --network=host jaegertracing/all-in-one` \n+\n+After running Jaeger locally, navigate to the url below. Make sure to refresh the UI to view the exported traces from the two web services:\n+\n+`http://localhost:16686`\n+\n+Run FirstService and SecondService from command line or using an IDE. The end point of interest for FirstService is `http://localhost:8080/message` and  `http://localhost:8081/time` for SecondService. Entering `localhost:8080/message` in a browser should call FirstService and then SecondService, creating a trace. To send a sample request enter the following in a browser of your choice:\n+\n+`http://localhost:8081/time`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3602717f2019c37197aac7553adfa0be99e2d40"}, "originalPosition": 344}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e34ab7a674aea5f08517a3142c35295349e06a", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/96e34ab7a674aea5f08517a3142c35295349e06a", "committedDate": "2020-06-15T21:04:43Z", "message": "some more clean ups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1bdedec1b7c6f64ec7c6ad837f2432141d0a8bf", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a1bdedec1b7c6f64ec7c6ad837f2432141d0a8bf", "committedDate": "2020-06-15T21:43:28Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDc0Njgz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/505#pullrequestreview-431074683", "createdAt": "2020-06-16T00:13:10Z", "commit": {"oid": "a1bdedec1b7c6f64ec7c6ad837f2432141d0a8bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297f928342832b075473caddccd2470d71c5963d", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/297f928342832b075473caddccd2470d71c5963d", "committedDate": "2020-06-16T00:54:07Z", "message": "Merge branch 'master' into master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3243, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}