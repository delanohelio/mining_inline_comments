{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODQwOTI5", "number": 1650, "title": "AWS lambda tracing - http propagation for non-stream handler / wrapper", "bodyText": "Resolved #1649\n\nHTTP context propagation for non-stream wrappers / handlers\nadditional tests\nslight refactoring", "createdAt": "2020-11-16T18:13:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650", "merged": true, "mergeCommit": {"oid": "7e8d549347053d806927a89144c96c0e0931748c"}, "closed": true, "closedAt": "2020-11-24T11:42:07Z", "author": {"login": "kubawach"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddVwtdgBqjQwMDQzMjg1NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfoPMQgFqTUzNzQwODAxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bd9527bab78f1c9e2c4331fe3da712fd462ec56", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8bd9527bab78f1c9e2c4331fe3da712fd462ec56", "committedDate": "2020-11-16T18:12:21Z", "message": "AWS lambda tracing - http propagation for non-stream handler / wrapper"}, "afterCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9625ad33396952c0509544f07d3fc3e01919e6d", "committedDate": "2020-11-17T09:02:04Z", "message": "AWS lambda tracing - http propagation for non-stream handler / wrapper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTUyNDY2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-532152466", "createdAt": "2020-11-17T09:06:25Z", "commit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTowNjoyNVrOH0q6vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMToxMFrOH0rGjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTE2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (values != null && !values.isEmpty() ? values.get(0) : null);\n          \n          \n            \n                    return (values != null && !values.isEmpty()) ? values.get(0) : null;\n          \n      \n    \n    \n  \n\nI think", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524991165", "createdAt": "2020-11-17T09:06:25Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +45,16 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =\n+      (entry -> {\n+        List<String> values = entry.getValue();\n+        return (values != null && !values.isEmpty() ? values.get(0) : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MTY0MA==", "bodyText": "Consider defining a method and using a method reference", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524991640", "createdAt": "2020-11-17T09:07:11Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +45,16 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static final Function<Map.Entry<String, List<String>>, String> EXTRACTOR =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjIwOA==", "bodyText": "e -> e.getKey() == null ? null\n:O:O:O\nWow", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992208", "createdAt": "2020-11-17T09:08:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java", "diffHunk": "@@ -5,35 +5,28 @@\n \n package io.opentelemetry.instrumentation.awslambda.v1_0;\n \n-import com.amazonaws.serverless.proxy.model.Headers;\n import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n \n public class ParentContextExtractor {\n \n-  static Context fromHttpHeaders(Headers headers) {\n-\n+  static Context fromHttpHeaders(Map<String, String> headers) {\n     return OpenTelemetry.getGlobalPropagators()\n         .getTextMapPropagator()\n-        .extract(io.opentelemetry.context.Context.current(), headers, HeadersGetter.INSTANCE);\n+        .extract(\n+            io.opentelemetry.context.Context.current(), lowercaseMap(headers), MapGetter.INSTANCE);\n   }\n \n-  private static class HeadersGetter implements TextMapPropagator.Getter<Headers> {\n-\n-    private static final HeadersGetter INSTANCE = new HeadersGetter();\n-\n-    @Override\n-    public Iterable<String> keys(Headers map) {\n-      return map.keySet();\n-    }\n-\n-    @Override\n-    public String get(Headers headers, String s) {\n-      return headers.getFirst(s);\n-    }\n+  private static Map<String, String> lowercaseMap(Map<String, String> source) {\n+    return source.entrySet().stream()\n+        .collect(\n+            Collectors.toMap(\n+                e -> e.getKey() == null ? null : e.getKey().toLowerCase(), Entry::getValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjUzMg==", "bodyText": "What do you think about .filter(e -> e.getKey() != null)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992532", "createdAt": "2020-11-17T09:08:35Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java", "diffHunk": "@@ -5,35 +5,28 @@\n \n package io.opentelemetry.instrumentation.awslambda.v1_0;\n \n-import com.amazonaws.serverless.proxy.model.Headers;\n import io.opentelemetry.api.OpenTelemetry;\n import io.opentelemetry.context.Context;\n import io.opentelemetry.context.propagation.TextMapPropagator;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n \n public class ParentContextExtractor {\n \n-  static Context fromHttpHeaders(Headers headers) {\n-\n+  static Context fromHttpHeaders(Map<String, String> headers) {\n     return OpenTelemetry.getGlobalPropagators()\n         .getTextMapPropagator()\n-        .extract(io.opentelemetry.context.Context.current(), headers, HeadersGetter.INSTANCE);\n+        .extract(\n+            io.opentelemetry.context.Context.current(), lowercaseMap(headers), MapGetter.INSTANCE);\n   }\n \n-  private static class HeadersGetter implements TextMapPropagator.Getter<Headers> {\n-\n-    private static final HeadersGetter INSTANCE = new HeadersGetter();\n-\n-    @Override\n-    public Iterable<String> keys(Headers map) {\n-      return map.keySet();\n-    }\n-\n-    @Override\n-    public String get(Headers headers, String s) {\n-      return headers.getFirst(s);\n-    }\n+  private static Map<String, String> lowercaseMap(Map<String, String> source) {\n+    return source.entrySet().stream()\n+        .collect(\n+            Collectors.toMap(\n+                e -> e.getKey() == null ? null : e.getKey().toLowerCase(), Entry::getValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjIwOA=="}, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MjkwMg==", "bodyText": "It would be nice to store the lowercased as a constant", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524992902", "createdAt": "2020-11-17T09:09:12Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ParentContextExtractor.java", "diffHunk": "@@ -43,7 +36,7 @@ static Context fromXRayHeader(String parentHeader) {\n         .getTextMapPropagator()\n         .extract(\n             Context.current(),\n-            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY, parentHeader),\n+            Collections.singletonMap(AWS_TRACE_HEADER_PROPAGATOR_KEY.toLowerCase(), parentHeader),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5MzUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              // one of the methods has last param context ?\n          \n          \n            \n                              // only one of the methods has last param context ?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524993514", "createdAt": "2020-11-17T09:10:06Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -106,12 +107,19 @@ Method getRequestTargetMethod() {\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // one of the methods has last param context ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDE4OA==", "bodyText": "This logic has gotten pretty mysterious - would it be possible to add some example method signatures to the javadoc to explain it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r524994188", "createdAt": "2020-11-17T09:11:10Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -106,12 +107,19 @@ Method getRequestTargetMethod() {\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // one of the methods has last param context ?\n+                  if (firstCtx ^ secondCtx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9625ad33396952c0509544f07d3fc3e01919e6d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMjY4NjU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-532268657", "createdAt": "2020-11-17T11:28:35Z", "commit": {"oid": "8130bccc32b481c8b60eba343840fe5e7bf15ba6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyODozNVrOH0wg6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyODozNVrOH0wg6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4Mjg1Ng==", "bodyText": "How about\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<String> values = entry.getValue();\n          \n          \n            \n                return (nullOrEmpty(values) ? null : values.get(0));\n          \n          \n            \n                return entry.getValue().stream()\n          \n          \n            \n                    .findFirst()\n          \n          \n            \n                    .orElse(null);\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r525082856", "createdAt": "2020-11-17T11:28:35Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -42,9 +44,20 @@ static ApiGatewayProxyRequest forStream(final InputStream source) throws IOExcep\n     return new CopiedApiGatewayProxyRequest(source);\n   }\n \n+  private static boolean nullOrEmpty(List<String> values) {\n+    return ((values == null) || values.isEmpty());\n+  }\n+\n+  private static String extractFirstValue(Map.Entry<String, List<String>> entry) {\n+    List<String> values = entry.getValue();\n+    return (nullOrEmpty(values) ? null : values.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8130bccc32b481c8b60eba343840fe5e7bf15ba6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "967bb912307900a2cb9eb9af92822537db4feeac", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/967bb912307900a2cb9eb9af92822537db4feeac", "committedDate": "2020-11-20T08:18:06Z", "message": "AWS lambda tracing - http propagation for non-stream handler / wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9dbcf18fa71a9bf407e3ced361fa6795f80c5756", "committedDate": "2020-11-20T08:18:11Z", "message": "code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daccae84bc6037426d830ea8aa8204076b90877f", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/daccae84bc6037426d830ea8aa8204076b90877f", "committedDate": "2020-11-20T08:20:53Z", "message": "null-handling improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mzc5NTIw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-535379520", "createdAt": "2020-11-20T12:17:33Z", "commit": {"oid": "aebcca3bf8c2705c9e1a60e13b91b931604bfc53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDMxNjM5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-535431639", "createdAt": "2020-11-20T13:36:02Z", "commit": {"oid": "aebcca3bf8c2705c9e1a60e13b91b931604bfc53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "committedDate": "2020-11-20T14:29:33Z", "message": "rebase to newest master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aebcca3bf8c2705c9e1a60e13b91b931604bfc53", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/aebcca3bf8c2705c9e1a60e13b91b931604bfc53", "committedDate": "2020-11-19T18:03:37Z", "message": "null-handling improvements"}, "afterCommit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ecb2c67232a4112ea4d3e14c77675d6c22f17e23", "committedDate": "2020-11-20T14:29:33Z", "message": "rebase to newest master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTU3ODQ2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-535557846", "createdAt": "2020-11-20T16:03:02Z", "commit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowMzowM1rOH3V0vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowMzowM1rOH3V0vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTI5NA==", "bodyText": "I'm definitely not a fan of using an O as a type parameter. It looks way too much like a 0.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527791294", "createdAt": "2020-11-20T16:03:03Z", "author": {"login": "jkwatson"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestWrapperBase.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.services.lambda.runtime.Context;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Base abstract wrapper for {@link TracingRequestHandler}. Provides: - delegation to a lambda via\n+ * env property OTEL_LAMBDA_HANDLER in package.ClassName::methodName format\n+ */\n+abstract class TracingRequestWrapperBase<I, O> extends TracingRequestHandler<I, O> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTU5NjIy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-535559622", "createdAt": "2020-11-20T16:05:08Z", "commit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowNTowOFrOH3V56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjowNTowOFrOH3V56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MjYxOQ==", "bodyText": "personally I'd avoid using rarely used boolean operators like this. I had to look up that this was an xor. It makes the code harder to read.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#discussion_r527792619", "createdAt": "2020-11-20T16:05:08Z", "author": {"login": "jkwatson"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/WrappedLambda.java", "diffHunk": "@@ -92,24 +92,38 @@ Method getRequestTargetMethod() {\n        - Context can be omitted\n        - Select the method with the largest number of parameters.\n        - If two or more methods have the same number of parameters, AWS Lambda selects the method that has the Context as the last parameter.\n+       - Non-Bridge methods are preferred\n        - If none or all of these methods have the Context parameter, then the behavior is undefined.\n+\n+       Examples:\n+       - handleA(String, String, Integer), handleB(String, Context) - handleA is selected (number of parameters)\n+       - handleA(String, String, Integer), handleB(String, String, Context) - handleB is selected (has Context as the last parameter)\n+       - generic method handleG(T, U, Context), implementation (T, U - String) handleA(String, String, Context), bridge method handleB(Object, Object, Context) - handleA is selected (non-bridge)\n     */\n     List<Method> methods = Arrays.asList(targetClass.getMethods());\n     Optional<Method> firstOptional =\n         methods.stream()\n             .filter((Method m) -> m.getName().equals(targetMethodName))\n             .sorted(\n                 (Method a, Method b) -> {\n-                  // sort descending (reverse of default ascending)\n+                  // larger number of params wins\n                   if (a.getParameterCount() != b.getParameterCount()) {\n                     return b.getParameterCount() - a.getParameterCount();\n                   }\n-                  if (isLastParameterContext(a.getParameters())) {\n-                    return -1;\n-                  } else if (isLastParameterContext(b.getParameters())) {\n-                    return 1;\n+                  boolean firstCtx = isLastParameterContext(a.getParameters());\n+                  boolean secondCtx = isLastParameterContext(b.getParameters());\n+                  // only one of the methods has last param context ?\n+                  if (firstCtx ^ secondCtx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecb2c67232a4112ea4d3e14c77675d6c22f17e23"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597df75f686763a1ca10a4660475e82d0c50df78", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/597df75f686763a1ca10a4660475e82d0c50df78", "committedDate": "2020-11-23T17:16:28Z", "message": "code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b45d4cfa3c0c83cbf55c5d7ba3a36838818784d2", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b45d4cfa3c0c83cbf55c5d7ba3a36838818784d2", "committedDate": "2020-11-23T20:39:37Z", "message": "less dependencies, lower coupling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDA4MDEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1650#pullrequestreview-537408010", "createdAt": "2020-11-24T11:41:41Z", "commit": {"oid": "b45d4cfa3c0c83cbf55c5d7ba3a36838818784d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2261, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}