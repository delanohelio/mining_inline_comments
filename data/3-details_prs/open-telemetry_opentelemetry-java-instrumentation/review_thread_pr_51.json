{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzAyOTU1", "number": 51, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1MzoxMVrODXsb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMjoyOVrODXsh9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTcxODk1OnYy", "diffSide": "LEFT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTracerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMzo1MzoxMVrOFdIZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo1MDoxMFrOFdJRnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MDUyMA==", "bodyText": "Do you know if OpenTelemetry handles this edge case already?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366090520", "createdAt": "2020-01-13T23:53:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTracerImpl.java", "diffHunk": "@@ -283,55 +269,54 @@ public boolean equals(final Object obj) {\n     @Override\n     public <C> void inject(final AgentSpan span, final C carrier, final Setter<C> setter) {\n       assert span instanceof AgentSpanImpl;\n-      tracer.inject(\n-          ((AgentSpanImpl) span).getSpan().context(),\n-          new AgentPropagationImpl.Injector<>(carrier, setter));\n+      tracer\n+          .getHttpTextFormat()\n+          .inject(\n+              ((AgentSpanImpl) span).getSpan().getContext(),\n+              carrier,\n+              new AgentPropagationImpl.Injector<>(setter));\n     }\n \n-    private final class Injector<C> implements TextMapInject {\n-      private final C carrier;\n+    private final class Injector<C> implements HttpTextFormat.Setter<C> {\n       private final Setter<C> setter;\n \n-      private Injector(final C carrier, final Setter<C> setter) {\n-        this.carrier = carrier;\n+      private Injector(final Setter<C> setter) {\n         this.setter = setter;\n       }\n \n       @Override\n-      public void put(final String key, final String value) {\n+      public void put(final C carrier, final String key, final String value) {\n         setter.set(carrier, key, value);\n       }\n     }\n \n     @Override\n     public <C> AgentSpan.Context extract(final C carrier, final Getter<C> getter) {\n-      return new AgentContextImpl(tracer.extract(new Extractor(carrier, getter)));\n+      SpanContext extract;\n+      try {\n+        extract = tracer.getHttpTextFormat().extract(carrier, new Extractor<>(getter));\n+      } catch (final IllegalArgumentException e) {\n+        extract = null;\n+      }\n+      return new AgentContextImpl(extract);\n     }\n   }\n \n-  private static final class Extractor<C> implements TextMapExtract {\n-    private final Map<String, String> extracted;\n-\n-    private Extractor(final C carrier, final Getter<C> getter) {\n-      extracted = new HashMap<>();\n-      for (final String key : getter.keys(carrier)) {\n-        // extracted header value\n-        String s = getter.get(carrier, key);\n-        // in case of multiple values in the header, need to parse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5379c7af84ee5b03a6548dec895e8e72581e67e1"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDk4OQ==", "bodyText": "I don't think so, but I'm not sure that it should? (e.g. Tracestate header value is comma-separated key-value pairs)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366104989", "createdAt": "2020-01-14T00:50:10Z", "author": {"login": "trask"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentTracerImpl.java", "diffHunk": "@@ -283,55 +269,54 @@ public boolean equals(final Object obj) {\n     @Override\n     public <C> void inject(final AgentSpan span, final C carrier, final Setter<C> setter) {\n       assert span instanceof AgentSpanImpl;\n-      tracer.inject(\n-          ((AgentSpanImpl) span).getSpan().context(),\n-          new AgentPropagationImpl.Injector<>(carrier, setter));\n+      tracer\n+          .getHttpTextFormat()\n+          .inject(\n+              ((AgentSpanImpl) span).getSpan().getContext(),\n+              carrier,\n+              new AgentPropagationImpl.Injector<>(setter));\n     }\n \n-    private final class Injector<C> implements TextMapInject {\n-      private final C carrier;\n+    private final class Injector<C> implements HttpTextFormat.Setter<C> {\n       private final Setter<C> setter;\n \n-      private Injector(final C carrier, final Setter<C> setter) {\n-        this.carrier = carrier;\n+      private Injector(final Setter<C> setter) {\n         this.setter = setter;\n       }\n \n       @Override\n-      public void put(final String key, final String value) {\n+      public void put(final C carrier, final String key, final String value) {\n         setter.set(carrier, key, value);\n       }\n     }\n \n     @Override\n     public <C> AgentSpan.Context extract(final C carrier, final Getter<C> getter) {\n-      return new AgentContextImpl(tracer.extract(new Extractor(carrier, getter)));\n+      SpanContext extract;\n+      try {\n+        extract = tracer.getHttpTextFormat().extract(carrier, new Extractor<>(getter));\n+      } catch (final IllegalArgumentException e) {\n+        extract = null;\n+      }\n+      return new AgentContextImpl(extract);\n     }\n   }\n \n-  private static final class Extractor<C> implements TextMapExtract {\n-    private final Map<String, String> extracted;\n-\n-    private Extractor(final C carrier, final Getter<C> getter) {\n-      extracted = new HashMap<>();\n-      for (final String key : getter.keys(carrier)) {\n-        // extracted header value\n-        String s = getter.get(carrier, key);\n-        // in case of multiple values in the header, need to parse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MDUyMA=="}, "originalCommit": {"oid": "5379c7af84ee5b03a6548dec895e8e72581e67e1"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTczNDI5OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMjoyOVrOFdIimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo1MDoxOFrOFdJRvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjk1NQ==", "bodyText": "This is going to cause some weirdness... I couldn't think of a better solution though.  Ideas?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366092955", "createdAt": "2020-01-14T00:02:29Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -63,11 +63,10 @@ public void onJaxRsSpan(\n     }\n   }\n \n-  private void updateParent(AgentSpan span, final String resourceName) {\n+  private void updateParent(final AgentSpan span, final String resourceName) {\n     if (span == null) {\n       return;\n     }\n-    span = span.getLocalRootSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95dcce5b0db205322da24c809c0fa1716f65c27"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNTAyMA==", "bodyText": "I couldn't think of anything better either. I just added this to #50 so we can come back to it later.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/51#discussion_r366105020", "createdAt": "2020-01-14T00:50:18Z", "author": {"login": "trask"}, "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsDecorator.java", "diffHunk": "@@ -63,11 +63,10 @@ public void onJaxRsSpan(\n     }\n   }\n \n-  private void updateParent(AgentSpan span, final String resourceName) {\n+  private void updateParent(final AgentSpan span, final String resourceName) {\n     if (span == null) {\n       return;\n     }\n-    span = span.getLocalRootSpan();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5Mjk1NQ=="}, "originalCommit": {"oid": "d95dcce5b0db205322da24c809c0fa1716f65c27"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 602, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}