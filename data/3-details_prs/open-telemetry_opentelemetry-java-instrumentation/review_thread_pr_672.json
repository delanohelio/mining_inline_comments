{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTMwNDMx", "number": 672, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxODoxNjo1MFrOENnuKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMTo1MTozMlrOENqFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzE3NzM3OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxODoxNjo1MFrOGwWHPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoxNjo0NlrOGwcuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzEzNQ==", "bodyText": "is this needed since also in allprojects block below?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453347135", "createdAt": "2020-07-12T18:16:50Z", "author": {"login": "trask"}, "path": "build.gradle", "diffHunk": "@@ -16,6 +16,13 @@ plugins {\n   id \"com.github.spotbugs\" version \"4.0.1\"\n }\n \n+idea {\n+    module {\n+        downloadJavadoc = false\n+        downloadSources = false\n+    }\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NTQ0MQ==", "bodyText": "Actually no need, I'll remove it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453455441", "createdAt": "2020-07-13T06:16:46Z", "author": {"login": "donbeave"}, "path": "build.gradle", "diffHunk": "@@ -16,6 +16,13 @@ plugins {\n   id \"com.github.spotbugs\" version \"4.0.1\"\n }\n \n+idea {\n+    module {\n+        downloadJavadoc = false\n+        downloadSources = false\n+    }\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM0NzEzNQ=="}, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzU1ODY2OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMTo0NzoyOVrOGwZC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0NTo1MFrOGwdSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NTE5Ng==", "bodyText": "requireNonNull shouldn't be used with return statements, it's really for validating parameters. I understand it's to replace the usage of @lombok.NonNull but I think we can just delete it here, especially since they're all private methods. Best would be for us to consistently add @Nullable and enable NullAway (not for this PR).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453395196", "createdAt": "2020-07-13T01:47:29Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -329,15 +329,13 @@ public static String getSettingFromEnvironment(final String name, final String d\n    * Calls {@link #getSettingFromEnvironment(String, String)} and converts the result to a list by\n    * splitting on `,`.\n    */\n-  @NonNull\n   private static List<String> getListSettingFromEnvironment(\n       final String name, final String defaultValue) {\n-    return parseList(getSettingFromEnvironment(name, defaultValue));\n+    return Objects.requireNonNull(parseList(getSettingFromEnvironment(name, defaultValue)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDc2OA==", "bodyText": "Agree, I'll remove them.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453464768", "createdAt": "2020-07-13T06:45:50Z", "author": {"login": "donbeave"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -329,15 +329,13 @@ public static String getSettingFromEnvironment(final String name, final String d\n    * Calls {@link #getSettingFromEnvironment(String, String)} and converts the result to a list by\n    * splitting on `,`.\n    */\n-  @NonNull\n   private static List<String> getListSettingFromEnvironment(\n       final String name, final String defaultValue) {\n-    return parseList(getSettingFromEnvironment(name, defaultValue));\n+    return Objects.requireNonNull(parseList(getSettingFromEnvironment(name, defaultValue)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NTE5Ng=="}, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzU1OTIxOnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMTo0Nzo1NVrOGwZDVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0ODoxNFrOGwdVTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NTI4Nw==", "bodyText": "This is ok, though also rare to validate parameters for a private method.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453395287", "createdAt": "2020-07-13T01:47:55Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -401,7 +397,8 @@ private static String propertyNameToSystemPropertyName(final String setting) {\n    * @throws NumberFormatException\n    */\n   private static <T> T valueOf(\n-      final String value, @NonNull final Class<T> tClass, final T defaultValue) {\n+      final String value, final Class<T> tClass, final T defaultValue) {\n+    Objects.requireNonNull(tClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NTQyMg==", "bodyText": "I'll remove it, if dig into public methods which use this variable, they already have Objects.requireNonNull validation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453465422", "createdAt": "2020-07-13T06:48:14Z", "author": {"login": "donbeave"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/config/Config.java", "diffHunk": "@@ -401,7 +397,8 @@ private static String propertyNameToSystemPropertyName(final String setting) {\n    * @throws NumberFormatException\n    */\n   private static <T> T valueOf(\n-      final String value, @NonNull final Class<T> tClass, final T defaultValue) {\n+      final String value, final Class<T> tClass, final T defaultValue) {\n+    Objects.requireNonNull(tClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NTI4Nw=="}, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzU2NDE1OnYy", "diffSide": "RIGHT", "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DBInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMTo1MTozMlrOGwZGOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo0MTowNVrOGwerng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NjAyNQ==", "bodyText": "Use !(o instanceof DbInfo) pattern throughout", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453396025", "createdAt": "2020-07-13T01:51:32Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DBInfo.java", "diffHunk": "@@ -32,5 +31,139 @@\n   private final String host;\n   private final Integer port;\n \n-  public static class Builder {}\n+  public DBInfo(String type, String subtype, String shortUrl, String user, String instance, String db, String host,\n+                Integer port) {\n+    this.type = type;\n+    this.subtype = subtype;\n+    this.shortUrl = shortUrl;\n+    this.user = user;\n+    this.instance = instance;\n+    this.db = db;\n+    this.host = host;\n+    this.port = port;\n+  }\n+\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public String getSubtype() {\n+    return subtype;\n+  }\n+\n+  public String getShortUrl() {\n+    return shortUrl;\n+  }\n+\n+  public String getUser() {\n+    return user;\n+  }\n+\n+  public String getInstance() {\n+    return instance;\n+  }\n+\n+  public String getDb() {\n+    return db;\n+  }\n+\n+  public String getHost() {\n+    return host;\n+  }\n+\n+  public Integer getPort() {\n+    return port;\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder()\n+            .type(type)\n+            .subtype(subtype)\n+            .shortUrl(shortUrl)\n+            .user(user)\n+            .instance(instance)\n+            .db(db)\n+            .host(host)\n+            .port(port);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4NzUxOA==", "bodyText": "Fixed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/672#discussion_r453487518", "createdAt": "2020-07-13T08:41:05Z", "author": {"login": "donbeave"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/jdbc/DBInfo.java", "diffHunk": "@@ -32,5 +31,139 @@\n   private final String host;\n   private final Integer port;\n \n-  public static class Builder {}\n+  public DBInfo(String type, String subtype, String shortUrl, String user, String instance, String db, String host,\n+                Integer port) {\n+    this.type = type;\n+    this.subtype = subtype;\n+    this.shortUrl = shortUrl;\n+    this.user = user;\n+    this.instance = instance;\n+    this.db = db;\n+    this.host = host;\n+    this.port = port;\n+  }\n+\n+  public String getType() {\n+    return type;\n+  }\n+\n+  public String getSubtype() {\n+    return subtype;\n+  }\n+\n+  public String getShortUrl() {\n+    return shortUrl;\n+  }\n+\n+  public String getUser() {\n+    return user;\n+  }\n+\n+  public String getInstance() {\n+    return instance;\n+  }\n+\n+  public String getDb() {\n+    return db;\n+  }\n+\n+  public String getHost() {\n+    return host;\n+  }\n+\n+  public Integer getPort() {\n+    return port;\n+  }\n+\n+  public Builder toBuilder() {\n+    return new Builder()\n+            .type(type)\n+            .subtype(subtype)\n+            .shortUrl(shortUrl)\n+            .user(user)\n+            .instance(instance)\n+            .db(db)\n+            .host(host)\n+            .port(port);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5NjAyNQ=="}, "originalCommit": {"oid": "dfe4906f8cfd0c88bb2802b89e02c5b972dd0abe"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 373, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}