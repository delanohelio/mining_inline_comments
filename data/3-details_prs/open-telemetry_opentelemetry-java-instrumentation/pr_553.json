{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDc0OTc0", "number": 553, "title": "Merge changes from dd-trace-java 0.55.0", "bodyText": "https://github.com/DataDog/dd-trace-java/releases/tag/v0.55.0", "createdAt": "2020-06-20T23:54:14Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553", "merged": true, "mergeCommit": {"oid": "83753d6ed0fd5a745ba0800fe3adffc547af2ba7"}, "closed": true, "closedAt": "2020-06-23T21:26:27Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctRLwVABqjM0NjUxMDUyODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuMDLkABqjM0NzQ4MTQyNjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbcc91c76ea78db8e4f3cbe8848319061032c374", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dbcc91c76ea78db8e4f3cbe8848319061032c374", "committedDate": "2020-06-20T23:53:08Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}, "afterCommit": {"oid": "93718f9771be83753268619d016ba24c732b8000", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93718f9771be83753268619d016ba24c732b8000", "committedDate": "2020-06-21T00:32:28Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93718f9771be83753268619d016ba24c732b8000", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93718f9771be83753268619d016ba24c732b8000", "committedDate": "2020-06-21T00:32:28Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}, "afterCommit": {"oid": "c04c02bc1a70f387d6b0897d478258a605d4b757", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c04c02bc1a70f387d6b0897d478258a605d4b757", "committedDate": "2020-06-21T00:39:02Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ca1204760dfd010a2ec669a6a71bc871e3c166d", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5ca1204760dfd010a2ec669a6a71bc871e3c166d", "committedDate": "2020-06-21T00:53:17Z", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)"}, "afterCommit": {"oid": "d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "committedDate": "2020-06-21T00:56:01Z", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d6fbc9f8844be8ccd0dea7c18280cae15f68431f", "committedDate": "2020-06-21T00:56:01Z", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)"}, "afterCommit": {"oid": "17dadfc637687f8ac3715b64861f9927f3facbb2", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dadfc637687f8ac3715b64861f9927f3facbb2", "committedDate": "2020-06-21T00:56:59Z", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17dadfc637687f8ac3715b64861f9927f3facbb2", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/17dadfc637687f8ac3715b64861f9927f3facbb2", "committedDate": "2020-06-21T00:56:59Z", "message": "fixup! Circleci config cleanup (DataDog/dd-trace-java#1564)"}, "afterCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/802cfd24ded0eae871ebe80284f86931c9426ae3", "committedDate": "2020-06-21T01:05:03Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDc5MzM2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-434479336", "createdAt": "2020-06-21T08:03:45Z", "commit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwODowMzo0NlrOGmqY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwODozOTowOFrOGmqkZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzU5Mw==", "bodyText": "I think it is better idea to put such common properties into project source code: https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443193593", "createdAt": "2020-06-21T08:03:46Z", "author": {"login": "iNikem"}, "path": ".circleci/config.yml", "diffHunk": "@@ -13,7 +13,11 @@ cache_keys: &cache_keys\n     # Rev the version when the cache gets too big\n     - trace-java-v1-{{ .Branch }}-{{ .Revision }}\n     - trace-java-v1-{{ .Branch }}\n-    # - dd-trace-java-v1-\n+\n+parameters:\n+  gradle_flags:\n+    type: string\n+    default: \"--build-cache --parallel --stacktrace --no-daemon\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5MzgxMA==", "bodyText": "our default java is 11, so running test will use java11, not 8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443193810", "createdAt": "2020-06-21T08:06:29Z", "author": {"login": "iNikem"}, "path": ".circleci/config.yml", "diffHunk": "@@ -239,40 +209,39 @@ jobs:\n \n \n workflows:\n-  version: 2\n   build_test_deploy:\n     jobs:\n       - build:\n           filters:\n             tags:\n               only: /.*/\n-      - test_7:\n-          requires:\n-            - build\n-          filters:\n-            tags:\n-              only: /.*/\n-      - test_8:\n-          requires:\n-            - build\n-          filters:\n-            tags:\n-              only: /.*/\n-      - test_latest:\n+\n+      - default_test_job:\n           requires:\n             - build\n+          prefixTestTask: true\n+          name: test_<< matrix.testTask >>\n+          matrix:\n+            parameters:\n+              testTask: [\"7\", \"11\", \"14\"]\n           filters:\n             tags:\n               only: /.*/\n-      - test_11:\n+\n+      - default_test_job:\n           requires:\n             - build\n+          name: test_8\n+          testTask: test jacocoTestReport jacocoTestCoverageVerification", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDA3Mg==", "bodyText": "Field shadowing is a bad thing", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194072", "createdAt": "2020-06-21T08:10:19Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -88,25 +97,71 @@ public static void addThrowable(final Span span, final Throwable throwable) {\n    * reference. Anonymous classes are named based on their parent.\n    */\n   public String spanNameForMethod(final Method method) {\n-    return spanNameForClass(method.getDeclaringClass()) + \".\" + method.getName();\n+    return spanNameForMethod(method.getDeclaringClass(), method);\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   *\n+   * @param method the method to get the name from, nullable\n+   * @return the span name from the class and method\n+   */\n+  public String spanNameForMethod(final Class<?> clazz, final Method method) {\n+    return spanNameForMethod(clazz, null == method ? null : method.getName());\n+  }\n+\n+  /**\n+   * This method is used to generate an acceptable span (operation) name based on a given method\n+   * reference. Anonymous classes are named based on their parent.\n+   *\n+   * @param methodName the name of the method to get the name from, nullable\n+   * @return the span name from the class and method\n+   */\n+  public String spanNameForMethod(final Class<?> clazz, final String methodName) {\n+    ClassName cn = CLASS_NAMES.get(clazz);\n+    return null == methodName ? cn.getName() : cn.getMethodName(methodName);\n   }\n \n   /**\n    * This method is used to generate an acceptable span (operation) name based on a given class\n    * reference. Anonymous classes are named based on their parent.\n    */\n-  public String spanNameForClass(final Class clazz) {\n-    if (!clazz.isAnonymousClass()) {\n-      return clazz.getSimpleName();\n+  public String spanNameForClass(final Class<?> clazz) {\n+    String simpleName = clazz.getSimpleName();\n+    return simpleName.isEmpty() ? CLASS_NAMES.get(clazz).getName() : simpleName;\n+  }\n+\n+  private static class ClassName {\n+    private final String name;\n+    private final ConcurrentHashMap<String, String> methodNames = new ConcurrentHashMap<>(1);\n+\n+    private ClassName(String name) {\n+      this.name = name;\n     }\n-    String className = clazz.getName();\n-    if (clazz.getPackage() != null) {\n-      final String pkgName = clazz.getPackage().getName();\n-      if (!pkgName.isEmpty()) {\n-        className = clazz.getName().replace(pkgName, \"\").substring(1);\n+\n+    public String getName() {\n+      return name;\n+    }\n+\n+    public String getMethodName(String name) {\n+      String methodName = methodNames.get(name);\n+      if (null == methodName) {\n+        methodName = this.name + \".\" + name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDE0Mw==", "bodyText": "So much changes in this class, new methods, but no changed/new tests?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194143", "createdAt": "2020-06-21T08:11:21Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/instrumentation/decorator/BaseDecorator.java", "diffHunk": "@@ -29,10 +29,19 @@\n import java.lang.reflect.Method;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutionException;\n \n public abstract class BaseDecorator {\n \n+  private static final ClassValue<ClassName> CLASS_NAMES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDM0MQ==", "bodyText": "throw UnsupportedOperationException?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194341", "createdAt": "2020-06-21T08:14:14Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -167,4 +143,67 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>The caller MUST call hasNext() before calling next().\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      Iterator<TypeDescription.Generic> it = null;\n+      try {\n+        it = typeDefinition.getInterfaces().iterator();\n+      } catch (Exception e) {\n+        logException(typeDefinition, e);\n+      }\n+      this.it = it;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (null != it && it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;\n+        } catch (Exception e) {\n+          logException(typeDefinition, e);\n+          return false;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public TypeDefinition next() {\n+      return next;\n+    }\n+\n+    @Override\n+    public void remove() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDcyOA==", "bodyText": "I think this need explanation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194728", "createdAt": "2020-06-21T08:18:13Z", "author": {"login": "iNikem"}, "path": "build.gradle", "diffHunk": "@@ -55,3 +55,14 @@ allprojects {\n     jvmArgs \"-XX:ErrorFile=/tmp/hs_err_pid%p.log\"\n   }\n }\n+\n+task writeMuzzleTasksToFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NDc3Mg==", "bodyText": "headers names are wrong", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443194772", "createdAt": "2020-06-21T08:18:51Z", "author": {"login": "iNikem"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpClientRedirectInstrumentation.java", "diffHunk": "@@ -73,12 +73,23 @@ private static void onAfterExecute(\n       if (redirect == null) {\n         return;\n       }\n-\n-      for (final Header header : original.getAllHeaders()) {\n-        final String name = header.getName().toLowerCase();\n-        if (name.equals(\"traceparent\")) {\n-          if (!redirect.containsHeader(header.getName())) {\n-            redirect.setHeader(header.getName(), header.getValue());\n+      // Apache HttpClient 4.0.1+ copies headers from original to redirect only\n+      // if redirect headers are empty. Because we add headers\n+      // \"x-datadog-\" and \"x-b3-\" to redirect: it means redirect headers never", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTU3Nw==", "bodyText": "Maybe instead of creating a whole new module just for one test, put it with all others but guard with spock.lang.Requires check for current java version?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195577", "createdAt": "2020-06-21T08:28:40Z", "author": {"login": "iNikem"}, "path": "instrumentation/java-concurrent/java-completablefuture/java-completablefuture.gradle", "diffHunk": "@@ -0,0 +1,6 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTg0MA==", "bodyText": "Does not look right to me. Passing span name as statement?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195840", "createdAt": "2020-06-21T08:31:25Z", "author": {"login": "iNikem"}, "path": "instrumentation/rediscala-1.8/src/main/java/io/opentelemetry/auto/instrumentation/rediscala/RediscalaInstrumentation.java", "diffHunk": "@@ -83,10 +83,10 @@ public RediscalaInstrumentation() {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static SpanWithScope onEnter(@Advice.Argument(0) final RedisCommand cmd) {\n-      final Span span =\n-          TRACER.spanBuilder(cmd.getClass().getName()).setSpanKind(CLIENT).startSpan();\n+      String statement = DECORATE.spanNameForClass(cmd.getClass());\n+      final Span span = TRACER.spanBuilder(statement).setSpanKind(CLIENT).startSpan();\n       DECORATE.afterStart(span);\n-      DECORATE.onStatement(span, cmd.getClass().getName());\n+      DECORATE.onStatement(span, statement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NTk3Ng==", "bodyText": "Old name was better :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443195976", "createdAt": "2020-06-21T08:33:06Z", "author": {"login": "iNikem"}, "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -71,24 +73,26 @@ public static void agentmain(final String agentArgs, final Instrumentation inst)\n       startMethod.invoke(null, inst, bootstrapURL);\n     } catch (final Throwable ex) {\n       // Don't rethrow.  We don't have a log manager here, so just print.\n+      System.err.println(\"ERROR \" + thisClass.getName());\n       ex.printStackTrace();\n     }\n   }\n \n   private static synchronized URL installBootstrapJar(final Instrumentation inst)\n       throws IOException, URISyntaxException {\n-    URL bootstrapURL = null;\n+    URL ddJavaAgentJarURL = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjAwMA==", "bodyText": "Why is this better than AgentBootstrap.class?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443196000", "createdAt": "2020-06-21T08:33:30Z", "author": {"login": "iNikem"}, "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -55,6 +56,7 @@\n  * </ul>\n  */\n public class AgentBootstrap {\n+  private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE5NjUxOA==", "bodyText": "I don't understand what this test does and how it is related to changes in AgentBootstrap. Extra documentation maybe?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443196518", "createdAt": "2020-06-21T08:39:08Z", "author": {"login": "iNikem"}, "path": "java-agent/src/test/groovy/io/opentelemetry/auto/AgentLoadedIntoBootstrapTest.groovy", "diffHunk": "@@ -31,4 +33,23 @@ class AgentLoadedIntoBootstrapTest extends Specification {\n       , [:]\n       , true) == 0\n   }\n+\n+  def \"AgentBootstrap is loaded not from dd-java-agent.jar\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjQzODYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-435243861", "createdAt": "2020-06-22T20:20:06Z", "commit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Mjk1NjQ0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-435295644", "createdAt": "2020-06-22T21:44:34Z", "commit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo0NDozNVrOGnSD8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMTo0NDozNVrOGnSD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg0MzU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();\n          \n          \n            \n              private static final Class<?> thisClass = AgentBootstrap.class;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443843569", "createdAt": "2020-06-22T21:44:35Z", "author": {"login": "lpriima"}, "path": "java-agent/src/main/java/io/opentelemetry/auto/bootstrap/AgentBootstrap.java", "diffHunk": "@@ -55,6 +56,7 @@\n  * </ul>\n  */\n public class AgentBootstrap {\n+  private static final Class<?> thisClass = MethodHandles.lookup().lookupClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzExMDcw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-435311070", "createdAt": "2020-06-22T22:16:05Z", "commit": {"oid": "802cfd24ded0eae871ebe80284f86931c9426ae3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzM5NjQ5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-435339649", "createdAt": "2020-06-22T23:24:57Z", "commit": {"oid": "b05d97710a8be44dccb52c4a62445f4c1e972038"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyNDo1N1rOGnUJMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzoyNDo1N1rOGnUJMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NzY4Mw==", "bodyText": "Created #559 for this TODO", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#discussion_r443877683", "createdAt": "2020-06-22T23:24:57Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpClientRedirectInstrumentation.java", "diffHunk": "@@ -73,12 +73,24 @@ private static void onAfterExecute(\n       if (redirect == null) {\n         return;\n       }\n-\n-      for (final Header header : original.getAllHeaders()) {\n-        final String name = header.getName().toLowerCase();\n-        if (name.equals(\"traceparent\")) {\n-          if (!redirect.containsHeader(header.getName())) {\n-            redirect.setHeader(header.getName(), header.getValue());\n+      // TODO this only handles W3C headers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b05d97710a8be44dccb52c4a62445f4c1e972038"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d70ab527e142cf0e460fa2609783c9ee660ae923", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d70ab527e142cf0e460fa2609783c9ee660ae923", "committedDate": "2020-06-23T06:22:38Z", "message": "fixup! Add some tests for Java CompletableFuture (DataDog/dd-trace-java#1546)"}, "afterCommit": {"oid": "f5446ade085fc47cb5dbd713511c31be9603013f", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5446ade085fc47cb5dbd713511c31be9603013f", "committedDate": "2020-06-23T06:28:17Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTIwNDM3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/553#pullrequestreview-436120437", "createdAt": "2020-06-23T20:13:59Z", "commit": {"oid": "f5446ade085fc47cb5dbd713511c31be9603013f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c14dcab238902ef710c32231b690d5d4ccee3c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/88c14dcab238902ef710c32231b690d5d4ccee3c", "committedDate": "2020-06-23T21:08:44Z", "message": "Add some tests for Java CompletableFuture (DataDog/dd-trace-java#1546)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da15d0de641a738fde0c6bd0b9491b0695a1e7f9", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/da15d0de641a738fde0c6bd0b9491b0695a1e7f9", "committedDate": "2020-06-23T21:08:44Z", "message": "ApacheHttpClientRedirectInstrumentation copy headers from original request to redirect if original redirect headers were empty (DataDog/dd-trace-java#1539)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459c291bca96241e17a64c8f282ba766d93f17f8", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/459c291bca96241e17a64c8f282ba766d93f17f8", "committedDate": "2020-06-23T21:08:44Z", "message": "Allow the mock http server get assigned a transient port (DataDog/dd-trace-java#1540)\n\nThis change should eradicate the spurious test failures due to port conflicts - at least for the profiling smoke tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74cd2fdd3d839b89f4d02747170aa065ff20b8b8", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74cd2fdd3d839b89f4d02747170aa065ff20b8b8", "committedDate": "2020-06-23T21:08:44Z", "message": "Split muzzle across multiple executors (DataDog/dd-trace-java#1549)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07c64f15e1f03ea88379d4edb6d354e78cbf259b", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/07c64f15e1f03ea88379d4edb6d354e78cbf259b", "committedDate": "2020-06-23T21:08:44Z", "message": "Update play-2.6 instrumentation to support Play version 2.8.x (DataDog/dd-trace-java#1521)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbf870c2e2d233f7750552efec3342ebc8dbf5d", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbbf870c2e2d233f7750552efec3342ebc8dbf5d", "committedDate": "2020-06-23T21:08:44Z", "message": "Fix future cancelation (DataDog/dd-trace-java#1555)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a25298556224237a6f7a808d9b741f5401212e28", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a25298556224237a6f7a808d9b741f5401212e28", "committedDate": "2020-06-23T21:08:44Z", "message": "Cache span names derived from class and method names (DataDog/dd-trace-java#1562)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbbbda4a8099c65600564f89938fa42baacb3dc", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3dbbbda4a8099c65600564f89938fa42baacb3dc", "committedDate": "2020-06-23T21:08:45Z", "message": "Disable agent if we may append wrong jar to bootclasspath (DataDog/dd-trace-java#1561)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf04b0b157262e2d5bf0646a2aad7756f5802cf", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cbf04b0b157262e2d5bf0646a2aad7756f5802cf", "committedDate": "2020-06-23T21:08:45Z", "message": "Circleci config cleanup (DataDog/dd-trace-java#1564)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d668b07ae686973668270ce0a0ef5544f16c339f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d668b07ae686973668270ce0a0ef5544f16c339f", "committedDate": "2020-06-23T21:08:45Z", "message": "Create context store map at most once (DataDog/dd-trace-java#1570)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f628f02de6300a5e8b32ddf3d26661c0c1c3a0b9", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f628f02de6300a5e8b32ddf3d26661c0c1c3a0b9", "committedDate": "2020-06-23T21:08:45Z", "message": "Do not attempt to instrument websocket upgrade handlers (DataDog/dd-trace-java#1567)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c072bcd1fad562cf74c328b09423cfcb2b789a83", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c072bcd1fad562cf74c328b09423cfcb2b789a83", "committedDate": "2020-06-23T21:08:45Z", "message": "Avoid creating new strings prior to jar lookup (DataDog/dd-trace-java#1580)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7a3626edbd4b7bb9b8e5e19351d11e76a11d88", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc7a3626edbd4b7bb9b8e5e19351d11e76a11d88", "committedDate": "2020-06-23T21:08:45Z", "message": "Iterate type interfaces without materialising a list during super type matching (DataDog/dd-trace-java#1578)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fad25116513b5bcdfd3969050cf04ee34ac8f81", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0fad25116513b5bcdfd3969050cf04ee34ac8f81", "committedDate": "2020-06-23T21:08:45Z", "message": "Introduce matcher for membership of a set of names (DataDog/dd-trace-java#1583)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af04f792f8fd7f5070d1de3f02ad45032ceefb3", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2af04f792f8fd7f5070d1de3f02ad45032ceefb3", "committedDate": "2020-06-23T21:08:45Z", "message": "BaseDecorator shouldn't rely on $ in class names (DataDog/dd-trace-java#1585)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e836f1c72e5ca77e4397f3429b6a681dd685634", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e836f1c72e5ca77e4397f3429b6a681dd685634", "committedDate": "2020-06-23T21:08:45Z", "message": "Replace remaining named disjunctions with namedOneOf or namedNoneOf (DataDog/dd-trace-java#1584)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "committedDate": "2020-06-23T21:08:46Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5446ade085fc47cb5dbd713511c31be9603013f", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5446ade085fc47cb5dbd713511c31be9603013f", "committedDate": "2020-06-23T06:28:17Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}, "afterCommit": {"oid": "84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/84d4e2498983c6a7d6c7a5fa855d25033baf0f23", "committedDate": "2020-06-23T21:08:46Z", "message": "Upgradle gradle to 6.5 (DataDog/dd-trace-java#1589)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2979, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}