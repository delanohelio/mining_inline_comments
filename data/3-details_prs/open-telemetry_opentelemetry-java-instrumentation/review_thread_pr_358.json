{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjEyMDg1", "number": 358, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowMToyOVrOD3sfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowMToyOVrOD3sfbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzI3MjEyOnYy", "diffSide": "RIGHT", "path": "smoke-tests/java9-modules/java9-modules.gradle", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjowMToyOVrOGOF79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1ODoyMFrOGOIQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ==", "bodyText": "@iNikem I can't build with Java 8 anymore, can we make building this module optional? Or should we update CONTRIBUTING doc to require Java 11?\n* Where:\nBuild file 'C:\\git\\opentelemetry-auto-instr-java\\smoke-tests\\java9-modules\\java9-modules.gradle' line: 17\n\n* What went wrong:\nA problem occurred evaluating project ':smoke-tests:java9-modules'.\n> path may not be null or empty string. path='null'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417430519", "createdAt": "2020-04-29T16:01:29Z", "author": {"login": "trask"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzNDMwMA==", "bodyText": "This fails because you don't have JAVA_9_HOME env variable pointing to java 9 installation. Can you try as a workaround define it in your env with any value? Don't need to have actual java9 installed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417434300", "createdAt": "2020-04-29T16:07:03Z", "author": {"login": "iNikem"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ=="}, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0NTY1MA==", "bodyText": "This is what I get:\n$ export JAVA_9_HOME=xyz\n\n$ ./gradlew :smoke-tests:java9-modules:build\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nA problem occurred evaluating project ':smoke-tests:java9-modules'.\n> A problem occurred starting process 'command 'xyz/bin/java''\n\n$ export JAVA_9_HOME=/c/dev/java/zulu-11\n\n$ ./gradlew :smoke-tests:java9-modules:build\n\nFAILURE: Build failed with an exception.\n\n* Where:\nBuild file 'C:\\git\\opentelemetry-auto-instr-java\\smoke-tests\\java9-modules\\java9-modules.gradle' line: 17\n\n* What went wrong:\nA problem occurred evaluating project ':smoke-tests:java9-modules'.\n> path may not be null or empty string. path='null'\n\n$ export JAVA_9_HOME=/c/dev/java/zulu-9\n\n$ ./gradlew :smoke-tests:java9-modules:build\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.\nUse '--warning-mode all' to show the individual deprecation warnings.\nSee https://docs.gradle.org/6.3/userguide/command_line_interface.html#sec:command_line_warnings\n\nBUILD SUCCESSFUL in 8s\n241 actionable tasks: 241 up-to-date", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417445650", "createdAt": "2020-04-29T16:23:46Z", "author": {"login": "trask"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ=="}, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2MzA5Mg==", "bodyText": "Correct, this is indeed as it was \"intended\" by my change. Not ideal, but works for now, I think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417463092", "createdAt": "2020-04-29T16:50:29Z", "author": {"login": "iNikem"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ=="}, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTA5NA==", "bodyText": "Ok, can you update CONTRIBUTING.md?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417465094", "createdAt": "2020-04-29T16:53:24Z", "author": {"login": "trask"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ=="}, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2ODUyNQ==", "bodyText": "Yes, will do", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/358#discussion_r417468525", "createdAt": "2020-04-29T16:58:20Z", "author": {"login": "iNikem"}, "path": "smoke-tests/java9-modules/java9-modules.gradle", "diffHunk": "@@ -12,60 +12,22 @@ jar {\n   }\n }\n \n-// If the current JDK version (the one running gradle) is < 9, we need to find a version >= 9\n-// to compile this project.  java.gradle creates a map of java executables \n-// called \"javaExecutableVersionCache\" pulled from the environment.\n-// This loops over the cache to find a usable jdk.\n-// Since this project is the only one that requires a version above Java 8\n-// it's special cased here instead of putting a generic version matcher in java.gradle\n-if (JavaVersion.VERSION_1_9.compareTo(JavaVersion.current()) > 0) {\n-  def targetJavaHome\n+compileMain_java9Java {\n+  options.fork = true\n+  options.forkOptions.javaHome = file(findJavaHome(JavaVersion.VERSION_1_9))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQzMDUxOQ=="}, "originalCommit": {"oid": "5f771488628868246149ee6d08244fd18c3b073f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}