{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTY1MzY0", "number": 1601, "title": "Add support for Reactor Netty's HttpClient", "bodyText": "Newly added test fails without this instrumentation.\n@mateuszrzeszutek should I re-do this as InstrumentationModule? Can I somehow avoid duplicating all Netty's helper classes?", "createdAt": "2020-11-09T18:47:23Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601", "merged": true, "mergeCommit": {"oid": "f0a4049b52add1414b725109a99de6573f8e1f6c"}, "closed": true, "closedAt": "2020-11-16T10:07:51Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda5T6IAH2gAyNTE3OTY1MzY0OmQ3NjdiODgwZDI5YTM2ZjA1N2U3NThkNTkxNjg2NzIzMzAyZTYyNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcCp-DAH2gAyNTE3OTY1MzY0OjU5MGE2OGZiMjhhZjBkZGRiYjUwOTQ4OTFiOWM1ZTM4NTUxZDY5Mzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d767b880d29a36f057e758d591686723302e6244", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d767b880d29a36f057e758d591686723302e6244", "committedDate": "2020-11-09T18:45:36Z", "message": "Add support for Reactor Netty's HttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00daa7c6baf6e06d6676d6027e74442debcba5b", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a00daa7c6baf6e06d6676d6027e74442debcba5b", "committedDate": "2020-11-09T21:03:38Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MTIxNzQ1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-527121745", "createdAt": "2020-11-10T11:46:26Z", "commit": {"oid": "a00daa7c6baf6e06d6676d6027e74442debcba5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NjoyN1rOHwY45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo0NjoyN1rOHwY45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMTQ3Ng==", "bodyText": "You basically just need to move typeMatcher() and transformers() into the new TypeInstrumentation implementation:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @AutoService(Instrumenter.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentation() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                return singletonMap(\n          \n          \n            \n                    isStatic().and(named(\"create\")),\n          \n          \n            \n                    ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n            @AutoService(InstrumentationModule.class)\n          \n          \n            \n            public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n          \n          \n            \n            \n          \n          \n            \n              public ReactorHttpClientInstrumentationModule() {\n          \n          \n            \n                super(\"reactor-httpclient\");\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              @Override\n          \n          \n            \n              public String[] helperClassNames() {\n          \n          \n            \n                return new String[] {\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n          \n          \n            \n                  ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n          \n          \n            \n                  // these below a transitive dependencies of AttributeKeys from above\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n          \n          \n            \n                  \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n          \n          \n            \n                };\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              @Override\n          \n          \n            \n              public List<TypeInstrumentation> typeInstrumentations() {\n          \n          \n            \n                return singletonList(new HttpClientInstrumentation());\n          \n          \n            \n              }\n          \n          \n            \n              \n          \n          \n            \n              private static final class HttpClientInstrumentation implements TypeInstrumentation {\n          \n          \n            \n                @Override\n          \n          \n            \n                public ElementMatcher<TypeDescription> typeMatcher() {\n          \n          \n            \n                  return named(\"reactor.netty.http.client.HttpClient\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n          \n          \n            \n                  return singletonMap(\n          \n          \n            \n                      isStatic().and(named(\"create\")),\n          \n          \n            \n                      ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n          \n          \n            \n                }\n          \n          \n            \n              }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520501476", "createdAt": "2020-11-10T11:46:27Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.Instrumenter;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"reactor-httpclient\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isStatic().and(named(\"create\")),\n+        ReactorHttpClientInstrumentation.class.getName() + \"$CreateAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorHttpClientInstrumentation.class.getName() + \"$MapConnect\",\n+      ReactorHttpClientInstrumentation.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00daa7c6baf6e06d6676d6027e74442debcba5b"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f09a0f924f5552fb1d52c8298aa7e183abfa728", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0f09a0f924f5552fb1d52c8298aa7e183abfa728", "committedDate": "2020-11-10T12:34:21Z", "message": "Update instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentation.java\n\nCo-authored-by: Mateusz Rzeszutek <mrzeszutek@splunk.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/38a30cf0f79c8117238af05c646eb1280ec86106", "committedDate": "2020-11-10T12:44:05Z", "message": "Convert to InstrumentationModule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjAwMTE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-527200115", "createdAt": "2020-11-10T13:29:09Z", "commit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoyOTowOVrOHwciMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozMjozMVrOHwcqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MTIwMQ==", "bodyText": "How about naming it ReactorNettyInstrumentationModule? And using the following instrumentation names: \"reactor-netty\", \"reactor-netty-0.9\" (naming in accordance with our discussion in #1579)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520561201", "createdAt": "2020-11-10T13:29:09Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorHttpClientInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorHttpClientInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorHttpClientInstrumentationModule() {\n+    super(\"reactor-httpclient\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2MzMxMw==", "bodyText": "Really minor suggestion:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                pool.submit(job)\n          \n          \n            \n                4.times {\n          \n          \n            \n                  pool.submit(job)\n          \n          \n            \n                }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r520563313", "createdAt": "2020-11-10T13:32:31Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/reactor-netty-0.9/src/test/groovy/HttpClientTest.groovy", "diffHunk": "@@ -38,26 +40,34 @@ class ReactorNettyTest extends AgentTestRunner {\n     return resp.status().code()\n   }\n \n-  def \"two basic GET requests #url\"() {\n-    when:\n-    runUnderTrace(\"parent\") {\n-      doRequest()\n-    }\n-    runUnderTrace(\"parent\") {\n-      doRequest()\n+  def \"concurrent requests\"() {\n+    def latch = new CountDownLatch(1)\n+    def job = {\n+      latch.await()\n+      runUnderTrace(\"parent\") {\n+        doRequest()\n+      }\n     }\n \n+    def pool = Executors.newFixedThreadPool(4)\n+\n+    when:\n+    pool.submit(job)\n+    pool.submit(job)\n+    pool.submit(job)\n+    pool.submit(job)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a30cf0f79c8117238af05c646eb1280ec86106"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33cd6413b2489b69bf624c9d5e00e9e0ed6e651d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/33cd6413b2489b69bf624c9d5e00e9e0ed6e651d", "committedDate": "2020-11-11T13:55:26Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/08d6bdb8e657f29e41e2dba2950a580380cf4ae4", "committedDate": "2020-11-11T14:18:01Z", "message": "Rename module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjQ0OTI1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-528244925", "createdAt": "2020-11-11T14:55:21Z", "commit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Nzg4NzQ4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-528788748", "createdAt": "2020-11-12T06:46:59Z", "commit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0Njo1OVrOHxslRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzowMTozMVrOHxs5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MjcwOQ==", "bodyText": "other multi-word modules squish them together for package name, e.g.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n          \n          \n            \n            package io.opentelemetry.javaagent.instrumentation.reactornetty;", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521872709", "createdAt": "2020-11-12T06:46:59Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MzQyNA==", "bodyText": "decrement even if throwable != null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521873424", "createdAt": "2020-11-12T06:49:07Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3Nzc3Nw==", "bodyText": "is this attribute name shared with any other instrumentation? if not, maybe name it reactor_netty_otel_context?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521877777", "createdAt": "2020-11-12T07:01:31Z", "author": {"login": "trask"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {\n+\n+  public ReactorNettyInstrumentationModule() {\n+    super(\"reactor-netty\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      ReactorNettyInstrumentationModule.class.getName() + \"$MapConnect\",\n+      ReactorNettyInstrumentationModule.class.getName() + \"$OnRequest\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys$1\",\n+      // these below a transitive dependencies of AttributeKeys from above\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyHttpClientTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.NettyResponseInjectAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.client.HttpClientTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyHttpServerTracer\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.NettyRequestExtractAdapter\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerRequestTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerResponseTracingHandler\",\n+      \"io.opentelemetry.javaagent.instrumentation.netty.v4_1.server.HttpServerTracingHandler\"\n+    };\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    return singletonList(new HttpClientInstrumentation());\n+  }\n+\n+  private static final class HttpClientInstrumentation implements TypeInstrumentation {\n+    @Override\n+    public ElementMatcher<TypeDescription> typeMatcher() {\n+      return named(\"reactor.netty.http.client.HttpClient\");\n+    }\n+\n+    @Override\n+    public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+      return singletonMap(\n+          isStatic().and(named(\"create\")),\n+          ReactorNettyInstrumentationModule.class.getName() + \"$CreateAdvice\");\n+    }\n+  }\n+\n+  public static class CreateAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter() {\n+      CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void stopSpan(\n+        @Advice.Thrown Throwable throwable, @Advice.Return(readOnly = false) HttpClient client) {\n+\n+      if (throwable == null && CallDepthThreadLocalMap.decrementCallDepth(HttpClient.class) == 0) {\n+        client = client.doOnRequest(new OnRequest()).mapConnect(new MapConnect());\n+      }\n+    }\n+  }\n+\n+  public static class MapConnect\n+      implements BiFunction<Mono<? extends Connection>, Bootstrap, Mono<? extends Connection>> {\n+    @Override\n+    public Mono<? extends Connection> apply(Mono<? extends Connection> m, Bootstrap b) {\n+      return m.subscriberContext(s -> s.put(\"otel_context\", Context.current()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4ODA2MjE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-528806215", "createdAt": "2020-11-12T07:24:49Z", "commit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyNDo0OVrOHxtbSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNzoyNDo0OVrOHxtbSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg4NjUzOQ==", "bodyText": "Can we add at least a small comment on what this instrumentation does? Especially since it doesn't seem to be about creating spans, but only context propagation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#discussion_r521886539", "createdAt": "2020-11-12T07:24:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/reactor-netty-0.9/src/main/java/io/opentelemetry/javaagent/instrumentation/reactor_netty/ReactorNettyInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.reactor_netty;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import io.netty.bootstrap.Bootstrap;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.javaagent.instrumentation.api.CallDepthThreadLocalMap;\n+import io.opentelemetry.javaagent.instrumentation.netty.v4_1.AttributeKeys;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import reactor.core.publisher.Mono;\n+import reactor.netty.Connection;\n+import reactor.netty.http.client.HttpClient;\n+import reactor.netty.http.client.HttpClientRequest;\n+\n+@AutoService(InstrumentationModule.class)\n+public final class ReactorNettyInstrumentationModule extends InstrumentationModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d6bdb8e657f29e41e2dba2950a580380cf4ae4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89abd194593ca1c8902eae398c26376f6718cd40", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/89abd194593ca1c8902eae398c26376f6718cd40", "committedDate": "2020-11-12T16:51:07Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQzMTk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1601#pullrequestreview-529643194", "createdAt": "2020-11-13T01:46:01Z", "commit": {"oid": "89abd194593ca1c8902eae398c26376f6718cd40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590a68fb28af0dddbb5094891b9c5e38551d6937", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/590a68fb28af0dddbb5094891b9c5e38551d6937", "committedDate": "2020-11-13T08:12:46Z", "message": "Format"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2197, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}