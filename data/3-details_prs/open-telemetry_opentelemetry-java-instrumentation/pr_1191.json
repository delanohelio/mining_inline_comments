{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MzIwMzUz", "number": 1191, "title": "Enhance AWS DynamoDB instrumentation", "bodyText": "Resolves #1181\n\nenhanced DynamoDB instrumentation for AWS SDK 2.2 (added DB attributed)\nadded tests to cover DynamoDB requests separately\na bit of refactoring", "createdAt": "2020-09-10T20:55:44Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191", "merged": true, "mergeCommit": {"oid": "e8b54885c46687032bd6f3456847e085b64af032"}, "closed": true, "closedAt": "2020-09-18T07:48:57Z", "author": {"login": "kubawach"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHwzHlgBqjM3NTQ5MDMyNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJzuGeABqjM3Nzg5MTc4Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f280cc2860cc579c145efc962f7a34ae97d59f7f", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f280cc2860cc579c145efc962f7a34ae97d59f7f", "committedDate": "2020-09-10T20:55:00Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "committedDate": "2020-09-11T08:05:51Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b4f9300cba92ffcea219ba9b0b280978ca0e4cfc", "committedDate": "2020-09-11T08:05:51Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "committedDate": "2020-09-11T09:40:28Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fa02b6eebf6f025eef6e016c1cd0a2065a34cfaf", "committedDate": "2020-09-11T09:40:28Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "564ff3d6fcaba26c33801a571da691e85d4c3abd", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/564ff3d6fcaba26c33801a571da691e85d4c3abd", "committedDate": "2020-09-11T20:49:21Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "564ff3d6fcaba26c33801a571da691e85d4c3abd", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/564ff3d6fcaba26c33801a571da691e85d4c3abd", "committedDate": "2020-09-11T20:49:21Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "03d962f5d9d4c87bdba43e22b37b51838fd6413e", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/03d962f5d9d4c87bdba43e22b37b51838fd6413e", "committedDate": "2020-09-11T21:18:55Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03d962f5d9d4c87bdba43e22b37b51838fd6413e", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/03d962f5d9d4c87bdba43e22b37b51838fd6413e", "committedDate": "2020-09-11T21:18:55Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "7abefe076c48af332040d15952249994fd61a270", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7abefe076c48af332040d15952249994fd61a270", "committedDate": "2020-09-11T21:49:06Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7abefe076c48af332040d15952249994fd61a270", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7abefe076c48af332040d15952249994fd61a270", "committedDate": "2020-09-11T21:49:06Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "679a294a6e759439c7e6a9de386a32029ff0f4c1", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/679a294a6e759439c7e6a9de386a32029ff0f4c1", "committedDate": "2020-09-11T22:10:58Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "679a294a6e759439c7e6a9de386a32029ff0f4c1", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/679a294a6e759439c7e6a9de386a32029ff0f4c1", "committedDate": "2020-09-11T22:10:58Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "72cedb57a358a045e2852fdef019f474253fb80f", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72cedb57a358a045e2852fdef019f474253fb80f", "committedDate": "2020-09-14T06:31:33Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72cedb57a358a045e2852fdef019f474253fb80f", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/72cedb57a358a045e2852fdef019f474253fb80f", "committedDate": "2020-09-14T06:31:33Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "f5cf635bac6809a155af495dddbddeea0a5c791d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5cf635bac6809a155af495dddbddeea0a5c791d", "committedDate": "2020-09-14T07:14:24Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5cf635bac6809a155af495dddbddeea0a5c791d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f5cf635bac6809a155af495dddbddeea0a5c791d", "committedDate": "2020-09-14T07:14:24Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "82390835b5158c0a3918176ea0e24309a7302677", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/82390835b5158c0a3918176ea0e24309a7302677", "committedDate": "2020-09-14T12:07:04Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82390835b5158c0a3918176ea0e24309a7302677", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/82390835b5158c0a3918176ea0e24309a7302677", "committedDate": "2020-09-14T12:07:04Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef807b89bbe7f86620706826af6442303ad85d9a", "committedDate": "2020-09-14T12:28:30Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzAyOTMw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-487702930", "createdAt": "2020-09-14T12:30:24Z", "commit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjozMDoyNFrOHRRcJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo1NjoyM1rOHRScZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg==", "bodyText": "Why this was extracted from AwsSdkClientTracer?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487873572", "createdAt": "2020-09-14T12:30:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/SpanFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public class SpanFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTM0Nw==", "bodyText": "I don't see how this test differs from the previous one", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487875347", "createdAt": "2020-09-14T12:33:21Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ==", "bodyText": "can we get db.user?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487885995", "createdAt": "2020-09-14T12:50:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def assertDynamoDbRequest(service, operation, path, method, requestId) {\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"$service.$operation\"\n+          spanKind CLIENT\n+          errored false\n+          parent()\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" server.address.port\n+            \"${SemanticAttributes.HTTP_URL.key()}\" { it.startsWith(\"${server.address}${path}\") }\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" \"$method\"\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" 200\n+            \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" { it.startsWith(\"aws-sdk-java/\") }\n+            \"aws.service\" \"$service\"\n+            \"aws.operation\" \"${operation}\"\n+            \"aws.agent\" \"java-aws-sdk\"\n+            \"aws.requestId\" \"$requestId\"\n+            \"aws.table.name\" \"sometable\"\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"dynamodb\"\n+            \"${SemanticAttributes.DB_NAME.key()}\" \"sometable\"\n+            \"${SemanticAttributes.DB_OPERATION.key()}\" \"${operation}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4Njc3Mg==", "bodyText": "Can we set https://github.com/open-telemetry/opentelemetry-specification/blob/bc272ab52869df2145065d55300d721ff008e34b/specification/trace/semantic_conventions/span-general.md#nettransport-attribute ?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487886772", "createdAt": "2020-09-14T12:51:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def assertDynamoDbRequest(service, operation, path, method, requestId) {\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"$service.$operation\"\n+          spanKind CLIENT\n+          errored false\n+          parent()\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" server.address.port\n+            \"${SemanticAttributes.HTTP_URL.key()}\" { it.startsWith(\"${server.address}${path}\") }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4OTUwNw==", "bodyText": "IF you want to rename it, this AwsSdkHttpClientTracer will be better name. It follows the general (loose) guideline of class name being <Library>HttpClientTracer extends HttpClientTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487889507", "createdAt": "2020-09-14T12:55:37Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/HttpAwsSdkClientTracer.java", "diffHunk": "@@ -18,20 +18,17 @@\n \n import io.opentelemetry.context.propagation.TextMapPropagator.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n-import io.opentelemetry.trace.DefaultSpan;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Span.Kind;\n-import io.opentelemetry.trace.Tracer;\n-import io.opentelemetry.trace.TracingContextUtils;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n import java.net.URI;\n import software.amazon.awssdk.http.SdkHttpHeaders;\n import software.amazon.awssdk.http.SdkHttpRequest;\n import software.amazon.awssdk.http.SdkHttpResponse;\n \n-final class AwsSdkClientTracer\n+final class HttpAwsSdkClientTracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDAyMw==", "bodyText": "@anuraaga do you (at AWS I mean) have plans for formalising AWS SDK semantic convention in Otel spec?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r487890023", "createdAt": "2020-09-14T12:56:23Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n \n   TracingExecutionInterceptor(Kind kind) {\n-    this.kind = kind;\n+    this.spanFactory = new SpanFactory(kind);\n+  }\n+\n+  private Optional<SdkRequestDecorator> decorator(ExecutionAttributes executionAttributes) {\n+    RequestType type = getTypeFromAttributes(executionAttributes);\n+    return Optional.ofNullable(decoratorsMap.get(type));\n+  }\n+\n+  private RequestType getTypeFromAttributes(ExecutionAttributes executionAttributes) {\n+    return executionAttributes.getAttribute(REQUEST_TYPE_ATTRIBUTE);\n   }\n \n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer());\n+    Span span = spanFactory.forExecutionAttributes(executionAttributes);\n     executionAttributes.putAttribute(SPAN_ATTRIBUTE, span);\n+    ofSdkRequest(context.request())\n+        .ifPresent(rt -> executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, rt));\n   }\n \n   @Override\n   public void afterMarshalling(\n       Context.AfterMarshalling context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n       TRACER.onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n+      decorator(executionAttributes)\n+          .ifPresent(dec -> dec.decorate(span, context.request(), executionAttributes));\n+      decorateWithGenericRequestData(span, context.request());\n+      decorateWithExAttributesData(span, executionAttributes);\n     }\n   }\n \n+  private void decorateWithGenericRequestData(Span span, SdkRequest request) {\n+\n+    ofSdkRequest(request)\n+        .ifPresent(\n+            type -> {\n+              for (String field : type.getFields()) {\n+                request\n+                    .getValueForField(field, String.class)\n+                    .ifPresent(val -> span.setAttribute(fieldToAttribute.get(field), val));\n+              }\n+            });\n+  }\n+\n+  private void decorateWithExAttributesData(Span span, ExecutionAttributes attributes) {\n+\n+    String awsServiceName = attributes.getAttribute(SdkExecutionAttribute.SERVICE_NAME);\n+    String awsOperation = attributes.getAttribute(SdkExecutionAttribute.OPERATION_NAME);\n+\n+    span.setAttribute(\"aws.agent\", COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ef807b89bbe7f86620706826af6442303ad85d9a", "committedDate": "2020-09-14T12:28:30Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "committedDate": "2020-09-14T15:13:01Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mjc4NjA1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-488278605", "createdAt": "2020-09-15T02:26:50Z", "commit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjoyNjo1MFrOHRuLCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0NDoxN1rOHRueEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDMyOQ==", "bodyText": "Yeah I've started writing a markdown doc for it but need to finish it \ud83d\ude05 This one in particular should probably be deleted since it overlaps with the InstrumentationLibraryInfo but that's for a separate PR", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488344329", "createdAt": "2020-09-15T02:26:50Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n \n   TracingExecutionInterceptor(Kind kind) {\n-    this.kind = kind;\n+    this.spanFactory = new SpanFactory(kind);\n+  }\n+\n+  private Optional<SdkRequestDecorator> decorator(ExecutionAttributes executionAttributes) {\n+    RequestType type = getTypeFromAttributes(executionAttributes);\n+    return Optional.ofNullable(decoratorsMap.get(type));\n+  }\n+\n+  private RequestType getTypeFromAttributes(ExecutionAttributes executionAttributes) {\n+    return executionAttributes.getAttribute(REQUEST_TYPE_ATTRIBUTE);\n   }\n \n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer());\n+    Span span = spanFactory.forExecutionAttributes(executionAttributes);\n     executionAttributes.putAttribute(SPAN_ATTRIBUTE, span);\n+    ofSdkRequest(context.request())\n+        .ifPresent(rt -> executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, rt));\n   }\n \n   @Override\n   public void afterMarshalling(\n       Context.AfterMarshalling context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n       TRACER.onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n+      decorator(executionAttributes)\n+          .ifPresent(dec -> dec.decorate(span, context.request(), executionAttributes));\n+      decorateWithGenericRequestData(span, context.request());\n+      decorateWithExAttributesData(span, executionAttributes);\n     }\n   }\n \n+  private void decorateWithGenericRequestData(Span span, SdkRequest request) {\n+\n+    ofSdkRequest(request)\n+        .ifPresent(\n+            type -> {\n+              for (String field : type.getFields()) {\n+                request\n+                    .getValueForField(field, String.class)\n+                    .ifPresent(val -> span.setAttribute(fieldToAttribute.get(field), val));\n+              }\n+            });\n+  }\n+\n+  private void decorateWithExAttributesData(Span span, ExecutionAttributes attributes) {\n+\n+    String awsServiceName = attributes.getAttribute(SdkExecutionAttribute.SERVICE_NAME);\n+    String awsOperation = attributes.getAttribute(SdkExecutionAttribute.OPERATION_NAME);\n+\n+    span.setAttribute(\"aws.agent\", COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5MDAyMw=="}, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NTkxNQ==", "bodyText": "Let's just return the nullable value instead of Optional, we don't really use that pattern in this or the Java SDK repo. It could be a good time to add a dependency on checker framework annotations which we haven't done here yet for @Nullable", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488345915", "createdAt": "2020-09-15T02:32:44Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n \n   TracingExecutionInterceptor(Kind kind) {\n-    this.kind = kind;\n+    this.spanFactory = new SpanFactory(kind);\n+  }\n+\n+  private Optional<SdkRequestDecorator> decorator(ExecutionAttributes executionAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjMzNw==", "bodyText": "Let's make the constant-type things static", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346337", "createdAt": "2020-09-15T02:34:08Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NjM2Nw==", "bodyText": "unmodifiableMap for both", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346367", "createdAt": "2020-09-15T02:34:16Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,121 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n-  private final Kind kind;\n+  private final SpanFactory spanFactory;\n+\n+  private final Map<RequestType, SdkRequestDecorator> decoratorsMap = mapDecorators();\n+  private final Map<String, String> fieldToAttribute = mapFieldToAttribute();\n+\n+  private Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0Njc4MQ==", "bodyText": "I sort of agree that extracting this class doesn't seem to have huge bang for buck and makes this instrumentation significantly different from many of our other tracers. But it's ok too. Let's make sure all the new classes are package private instead of public", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488346781", "createdAt": "2020-09-15T02:35:37Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/SpanFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public class SpanFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MzU3Mg=="}, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0Nzg3Nw==", "bodyText": "Ditto", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488347877", "createdAt": "2020-09-15T02:39:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/db/DbRequestDecorator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2.db;\n+\n+import static java.util.Optional.ofNullable;\n+\n+import io.opentelemetry.instrumentation.awssdk.v2_2.SdkRequestDecorator;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public final class DbRequestDecorator implements SdkRequestDecorator {\n+\n+  @Override\n+  public void decorate(Span span, SdkRequest sdkRequest, ExecutionAttributes attributes) {\n+\n+    span.setAttribute(SemanticAttributes.DB_SYSTEM.key(), \"dynamodb\");\n+    // decorate with TableName as db.name (DynamoDB equivalent - not for batch)\n+    sdkRequest\n+        .getValueForField(\"TableName\", String.class)\n+        .ifPresent(val -> span.setAttribute(SemanticAttributes.DB_NAME.key(), val));\n+\n+    operation(attributes)\n+        .ifPresent(\n+            operation -> span.setAttribute(SemanticAttributes.DB_OPERATION.key(), operation));\n+  }\n+\n+  private Optional<String> operation(ExecutionAttributes attributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0OTIwMw==", "bodyText": "The access key ID is an ID of the key itself, but not of the IAM role which is closer to what a user is in a MySQL DB. While it could be mapped to a user by resolving the key ID through IAM API or something, I think in general the key ID isn't really useful for tracing and would leave it out.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r488349203", "createdAt": "2020-09-15T02:44:17Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/testing/src/main/groovy/io/opentelemetry/instrumentation/awssdk/v2_2/AbstractAws2ClientTest.groovy", "diffHunk": "@@ -73,6 +80,106 @@ abstract class AbstractAws2ClientTest extends InstrumentationSpecification {\n \n   abstract void configureSdkClient(SdkClientBuilder builder)\n \n+  def \"send DynamoDB #operation request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    response.class.simpleName.startsWith(operation)\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def \"send DynamoDB #operation async request with builder #builder.class.getName() mocked response\"() {\n+    setup:\n+    configureSdkClient(builder)\n+    def client = builder\n+      .endpointOverride(server.address)\n+      .region(Region.AP_NORTHEAST_1)\n+      .credentialsProvider(CREDENTIALS_PROVIDER)\n+      .build()\n+    responseBody.set(\"\")\n+    def response = call.call(client)\n+\n+    if (response instanceof Future) {\n+      response = response.get()\n+    }\n+\n+    expect:\n+    response != null\n+    assertDynamoDbRequest(service, operation, path, method, requestId)\n+\n+    where:\n+    [service, operation, method, path, requestId, builder, call] << dynamoDbRequestDataTable()\n+  }\n+\n+  def assertDynamoDbRequest(service, operation, path, method, requestId) {\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"$service.$operation\"\n+          spanKind CLIENT\n+          errored false\n+          parent()\n+          attributes {\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" server.address.port\n+            \"${SemanticAttributes.HTTP_URL.key()}\" { it.startsWith(\"${server.address}${path}\") }\n+            \"${SemanticAttributes.HTTP_METHOD.key()}\" \"$method\"\n+            \"${SemanticAttributes.HTTP_STATUS_CODE.key()}\" 200\n+            \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" { it.startsWith(\"aws-sdk-java/\") }\n+            \"aws.service\" \"$service\"\n+            \"aws.operation\" \"${operation}\"\n+            \"aws.agent\" \"java-aws-sdk\"\n+            \"aws.requestId\" \"$requestId\"\n+            \"aws.table.name\" \"sometable\"\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"dynamodb\"\n+            \"${SemanticAttributes.DB_NAME.key()}\" \"sometable\"\n+            \"${SemanticAttributes.DB_OPERATION.key()}\" \"${operation}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTk5NQ=="}, "originalCommit": {"oid": "ef807b89bbe7f86620706826af6442303ad85d9a"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e9cff39e5828ec1cfc75481c40bce1cfaf0f08c8", "committedDate": "2020-09-14T15:13:01Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "3b4b1723d058b0116f68e1e3f02cf489840b5455", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b4b1723d058b0116f68e1e3f02cf489840b5455", "committedDate": "2020-09-15T10:16:26Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b4b1723d058b0116f68e1e3f02cf489840b5455", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3b4b1723d058b0116f68e1e3f02cf489840b5455", "committedDate": "2020-09-15T10:16:26Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "7c3642f82998bcf71fe4a7018bd5484850fce85a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c3642f82998bcf71fe4a7018bd5484850fce85a", "committedDate": "2020-09-15T10:16:53Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c3642f82998bcf71fe4a7018bd5484850fce85a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7c3642f82998bcf71fe4a7018bd5484850fce85a", "committedDate": "2020-09-15T10:16:53Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "46768a004bcdb4ffb837f2989b9a17d54f31490c", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/46768a004bcdb4ffb837f2989b9a17d54f31490c", "committedDate": "2020-09-15T10:32:04Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46768a004bcdb4ffb837f2989b9a17d54f31490c", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/46768a004bcdb4ffb837f2989b9a17d54f31490c", "committedDate": "2020-09-15T10:32:04Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "7ad864318dd44a9802817c77c70366e06eb0879d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7ad864318dd44a9802817c77c70366e06eb0879d", "committedDate": "2020-09-15T11:01:05Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ad864318dd44a9802817c77c70366e06eb0879d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7ad864318dd44a9802817c77c70366e06eb0879d", "committedDate": "2020-09-15T11:01:05Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "2d04b13a39289b52c47deef777ff5b8701acbf13", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2d04b13a39289b52c47deef777ff5b8701acbf13", "committedDate": "2020-09-15T11:39:26Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d04b13a39289b52c47deef777ff5b8701acbf13", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2d04b13a39289b52c47deef777ff5b8701acbf13", "committedDate": "2020-09-15T11:39:26Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "2a77061f4266b8da42311b9e4e398a7c2db389ad", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a77061f4266b8da42311b9e4e398a7c2db389ad", "committedDate": "2020-09-15T12:07:36Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a77061f4266b8da42311b9e4e398a7c2db389ad", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a77061f4266b8da42311b9e4e398a7c2db389ad", "committedDate": "2020-09-15T12:07:36Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "4473f2afcbb3ac39fdea84787dd824c37a063332", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4473f2afcbb3ac39fdea84787dd824c37a063332", "committedDate": "2020-09-15T12:41:41Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4473f2afcbb3ac39fdea84787dd824c37a063332", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4473f2afcbb3ac39fdea84787dd824c37a063332", "committedDate": "2020-09-15T12:41:41Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "committedDate": "2020-09-15T13:59:30Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f16cb9b0ea0f8b81c315d335b7a518a480bb92cf", "committedDate": "2020-09-15T13:59:30Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "committedDate": "2020-09-15T14:16:42Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1b9d1634ef7af2aa6086b429cccc4ee7341af2a", "committedDate": "2020-09-15T14:16:42Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "d5d39d10dac1283938b2315da0944069108321d7", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d5d39d10dac1283938b2315da0944069108321d7", "committedDate": "2020-09-15T19:15:29Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5d39d10dac1283938b2315da0944069108321d7", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d5d39d10dac1283938b2315da0944069108321d7", "committedDate": "2020-09-15T19:15:29Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "committedDate": "2020-09-16T08:34:34Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDUwMDE3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-489450017", "createdAt": "2020-09-16T09:37:55Z", "commit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozNzo1NVrOHSosQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozODo1NlrOHSouhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzEwNg==", "bodyText": "This comment currently does not make sense here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489303106", "createdAt": "2020-09-16T09:37:55Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java", "diffHunk": "@@ -35,101 +42,131 @@\n   static final ExecutionAttribute<Span> SPAN_ATTRIBUTE =\n       new ExecutionAttribute<>(\"io.opentelemetry.auto.Span\");\n \n+  static final ExecutionAttribute<RequestType> REQUEST_TYPE_ATTRIBUTE =\n+      new ExecutionAttribute<>(\"io.opentelemetry.auto.aws.RequestType\");\n+\n   static final String COMPONENT_NAME = \"java-aws-sdk\";\n \n+  private static final Map<RequestType, SdkRequestDecorator> TYPE_TO_DECORATOR = mapDecorators();\n+  private static final Map<String, String> FIELD_TO_ATTRIBUTE = mapFieldToAttribute();\n+\n+  private static Map<RequestType, SdkRequestDecorator> mapDecorators() {\n+    Map<RequestType, SdkRequestDecorator> result = new EnumMap<>(RequestType.class);\n+    result.put(RequestType.DynamoDB, new DbRequestDecorator());\n+    return result;\n+  }\n+\n+  private static Map<String, String> mapFieldToAttribute() {\n+    Map<String, String> result = new HashMap<>();\n+    result.put(\"QueueUrl\", \"aws.queue.url\");\n+    result.put(\"Bucket\", \"aws.bucket.name\");\n+    result.put(\"QueueName\", \"aws.queue.name\");\n+    result.put(\"StreamName\", \"aws.stream.name\");\n+    result.put(\"TableName\", \"aws.table.name\");\n+    return result;\n+  }\n+\n   private final Kind kind;\n \n   TracingExecutionInterceptor(Kind kind) {\n     this.kind = kind;\n   }\n \n+  @Nullable\n+  private SdkRequestDecorator decorator(ExecutionAttributes executionAttributes) {\n+    RequestType type = getTypeFromAttributes(executionAttributes);\n+    return TYPE_TO_DECORATOR.get(type);\n+  }\n+\n+  private RequestType getTypeFromAttributes(ExecutionAttributes executionAttributes) {\n+    return executionAttributes.getAttribute(REQUEST_TYPE_ATTRIBUTE);\n+  }\n+\n   @Override\n   public void beforeExecution(\n       Context.BeforeExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer());\n+    Span span = TRACER.getOrCreateSpan(spanName(executionAttributes), AwsSdk.tracer(), kind);\n     executionAttributes.putAttribute(SPAN_ATTRIBUTE, span);\n+    ofSdkRequest(context.request())\n+        .ifPresent(rt -> executionAttributes.putAttribute(REQUEST_TYPE_ATTRIBUTE, rt));\n   }\n \n   @Override\n   public void afterMarshalling(\n       Context.AfterMarshalling context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n       TRACER.onRequest(span, context.httpRequest());\n-      onSdkRequest(span, context.request());\n-      onAttributes(span, executionAttributes);\n+      SdkRequestDecorator decorator = decorator(executionAttributes);\n+      if (decorator != null) {\n+        decorator.decorate(span, context.request(), executionAttributes);\n+      }\n+      decorateWithGenericRequestData(span, context.request());\n+      decorateWithExAttributesData(span, executionAttributes);\n     }\n   }\n \n+  private void decorateWithGenericRequestData(Span span, SdkRequest request) {\n+\n+    ofSdkRequest(request)\n+        .ifPresent(\n+            type -> {\n+              for (String field : type.getFields()) {\n+                request\n+                    .getValueForField(field, String.class)\n+                    .ifPresent(val -> span.setAttribute(FIELD_TO_ATTRIBUTE.get(field), val));\n+              }\n+            });\n+  }\n+\n+  private void decorateWithExAttributesData(Span span, ExecutionAttributes attributes) {\n+\n+    String awsServiceName = attributes.getAttribute(SdkExecutionAttribute.SERVICE_NAME);\n+    String awsOperation = attributes.getAttribute(SdkExecutionAttribute.OPERATION_NAME);\n+\n+    span.setAttribute(\"aws.agent\", COMPONENT_NAME);\n+    span.setAttribute(\"aws.service\", awsServiceName);\n+    span.setAttribute(\"aws.operation\", awsOperation);\n+  }\n+\n   @Override\n   public void afterExecution(\n       Context.AfterExecution context, ExecutionAttributes executionAttributes) {\n-    Span span = executionAttributes.getAttribute(SPAN_ATTRIBUTE);\n+    Span span = getSpanFromAttributes(executionAttributes);\n     if (span != null) {\n-      executionAttributes.putAttribute(SPAN_ATTRIBUTE, null);\n+      clearAttributes(executionAttributes);\n       TRACER.afterExecution(span, context.httpRequest());\n       onSdkResponse(span, context.response());\n       TRACER.end(span, context.httpResponse());\n     }\n   }\n \n+  // Not overriding the super.  Should call both with each type of response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMzY4NA==", "bodyText": "SemanticAttributes.DB_SYSTEM.set(span, \"dynamodb\") makes it easier to find non-semantic attributes in the future", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489303684", "createdAt": "2020-09-16T09:38:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/db/DbRequestDecorator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2.db;\n+\n+import io.opentelemetry.instrumentation.awssdk.v2_2.SdkRequestDecorator;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.interceptor.ExecutionAttributes;\n+import software.amazon.awssdk.core.interceptor.SdkExecutionAttribute;\n+\n+public final class DbRequestDecorator implements SdkRequestDecorator {\n+\n+  @Override\n+  public void decorate(Span span, SdkRequest sdkRequest, ExecutionAttributes attributes) {\n+\n+    span.setAttribute(SemanticAttributes.DB_SYSTEM.key(), \"dynamodb\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NDc0NDY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-489474469", "createdAt": "2020-09-16T10:09:34Z", "commit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowOTozNFrOHSp3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDowOTo0M1rOHSp33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMjM4Mg==", "bodyText": "Let's switch to Nullable here too", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489322382", "createdAt": "2020-09-16T10:09:34Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+public enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  private RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {\n+    return fields;\n+  }\n+\n+  public static Optional<RequestType> ofSdkRequest(SdkRequest request) {\n+    // exact request class should be 1st level child of request type\n+    String typeName =\n+        (request.getClass().getSuperclass() == null\n+                ? request.getClass()\n+                : request.getClass().getSuperclass())\n+            .getSimpleName();\n+    for (RequestType type : values()) {\n+      if (type.requestClass.equals(typeName)) {\n+        return Optional.of(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMjQ2Mg==", "bodyText": "Can you make all the new classes package-private instead of public?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r489322462", "createdAt": "2020-09-16T10:09:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import java.util.Optional;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+public enum RequestType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/63ed3a3974f0bbc2a3209a49cc495c8a3342604d", "committedDate": "2020-09-16T08:34:34Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "committedDate": "2020-09-16T12:34:43Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzQ2ODUz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-490346853", "createdAt": "2020-09-17T08:11:26Z", "commit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoxMToyNlrOHTWh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoxMToyNlrOHTWh1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NDEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static RequestType ofSdkRequest(SdkRequest request) {\n          \n          \n            \n              static RequestType ofSdkRequest(SdkRequest request) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r490054100", "createdAt": "2020-09-17T08:11:26Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {\n+    return fields;\n+  }\n+\n+  @Nullable\n+  public static RequestType ofSdkRequest(SdkRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzQ3ODc3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#pullrequestreview-490347877", "createdAt": "2020-09-17T08:12:44Z", "commit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoxMjo0NFrOHTWk7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODoxMjo0NFrOHTWk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA1NDg5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public String[] getFields() {\n          \n          \n            \n              String[] getFields() {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1191#discussion_r490054892", "createdAt": "2020-09-17T08:12:44Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/RequestType.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.awssdk.v2_2;\n+\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import software.amazon.awssdk.core.SdkRequest;\n+\n+enum RequestType {\n+  S3(\"S3Request\", \"Bucket\"),\n+  SQS(\"SqsRequest\", \"QueueUrl\", \"QueueName\"),\n+  Kinesis(\"KinesisRequest\", \"StreamName\"),\n+  DynamoDB(\"DynamoDbRequest\", \"TableName\");\n+\n+  private final String requestClass;\n+  private final String[] fields;\n+\n+  RequestType(String requestClass, String... fields) {\n+    this.requestClass = requestClass;\n+    this.fields = fields;\n+  }\n+\n+  public String[] getFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/93bc5b39a9462c6f555488bcb67ee530fe48ba9d", "committedDate": "2020-09-16T12:34:43Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "4425f036b95420f4b64453faa7ed947c63d7fa01", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4425f036b95420f4b64453faa7ed947c63d7fa01", "committedDate": "2020-09-17T08:17:18Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4425f036b95420f4b64453faa7ed947c63d7fa01", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4425f036b95420f4b64453faa7ed947c63d7fa01", "committedDate": "2020-09-17T08:17:18Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "b3853b07fd77518815a98045d420eba2d7d4eb3c", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3853b07fd77518815a98045d420eba2d7d4eb3c", "committedDate": "2020-09-17T09:02:40Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e896083fc53f45c801e2a0a6c29d4e113bbb741", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e896083fc53f45c801e2a0a6c29d4e113bbb741", "committedDate": "2020-09-17T16:37:57Z", "message": "Enhance AWS DynamoDB instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3853b07fd77518815a98045d420eba2d7d4eb3c", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b3853b07fd77518815a98045d420eba2d7d4eb3c", "committedDate": "2020-09-17T09:02:40Z", "message": "Enhance AWS DynamoDB instrumentation"}, "afterCommit": {"oid": "1e896083fc53f45c801e2a0a6c29d4e113bbb741", "author": {"user": {"login": "kubawach", "name": "Jakub Wach"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1e896083fc53f45c801e2a0a6c29d4e113bbb741", "committedDate": "2020-09-17T16:37:57Z", "message": "Enhance AWS DynamoDB instrumentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2579, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}