{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NjAxODQ5", "number": 1442, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyMTo0MlrOEwmZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyMTo0MlrOEwmZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzk2MjE2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/jaxrs-client-2.0-resteasy-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrsclient/v2_0/ResteasyClientConnectionErrorInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyMTo0MlrOHmQ_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNToyMTo0MlrOHmQ_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg4NjM2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * all requests through single point. Both sync ADN async! This allows for easy instrumentation and\n          \n          \n            \n             * all requests through single point. Both sync AND async! This allows for easy instrumentation and", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1442#discussion_r509886365", "createdAt": "2020-10-22T05:21:42Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/jaxrs-client-2.0-resteasy-2.0/src/main/java/io/opentelemetry/javaagent/instrumentation/jaxrsclient/v2_0/ResteasyClientConnectionErrorInstrumentation.java", "diffHunk": "@@ -5,30 +5,32 @@\n \n package io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0;\n \n-import static io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0.JaxRsClientTracer.TRACER;\n+import static io.opentelemetry.javaagent.instrumentation.jaxrsclient.v2_0.ResteasyClientTracer.TRACER;\n import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n import static net.bytebuddy.matcher.ElementMatchers.named;\n-import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n \n import com.google.auto.service.AutoService;\n+import io.opentelemetry.context.Scope;\n import io.opentelemetry.javaagent.tooling.Instrumenter;\n import io.opentelemetry.trace.Span;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n+import javax.ws.rs.core.Response;\n import net.bytebuddy.asm.Advice;\n import net.bytebuddy.description.method.MethodDescription;\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n-import org.jboss.resteasy.client.jaxrs.internal.ClientConfiguration;\n+import org.jboss.resteasy.client.jaxrs.internal.ClientInvocation;\n \n /**\n- * JAX-RS Client API doesn't define a good point where we can handle connection failures, so we must\n- * handle these errors at the implementation level.\n+ * Unlike other supported JAX-RS Client implementations, Resteasy's one is very simple and passes\n+ * all requests through single point. Both sync ADN async! This allows for easy instrumentation and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6788213e200a1b39e7feeb10c65813c9aa9d91d"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4721, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}