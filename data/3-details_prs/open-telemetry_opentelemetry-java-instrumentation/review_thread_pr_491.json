{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDc0NDY0", "number": 491, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOEEaEGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNDoxMVrOEEd9VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDU2NzkzOnYy", "diffSide": "LEFT", "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractSmokeTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOGiAsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowODo0OVrOGiAsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNjA4OA==", "bodyText": "good catch", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438316088", "createdAt": "2020-06-10T18:08:49Z", "author": {"login": "trask"}, "path": "smoke-tests/src/main/groovy/io/opentelemetry/smoketest/AbstractSmokeTest.groovy", "diffHunk": "@@ -21,10 +21,6 @@ import spock.lang.Specification\n \n abstract class AbstractSmokeTest extends Specification {\n \n-  public static final API_KEY = \"some-api-key\"\n-  public static final PROFILING_START_DELAY_SECONDS = 1\n-  public static final int PROFILING_RECORDING_UPLOAD_PERIOD_SECONDS = 5\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTE0MzgzOnYy", "diffSide": "RIGHT", "path": "auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToxMjowNlrOGiGfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNToyMzoyNVrOGiO6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMTA2OA==", "bodyText": "oh, nice, I didn't realize there was a default port for OTLP", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438411068", "createdAt": "2020-06-10T21:12:06Z", "author": {"login": "trask"}, "path": "auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n   @Override\n   public MetricExporter fromConfig(final Config config) {\n-    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"\");\n+    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"localhost:55680\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0OTEzMg==", "bodyText": "Took that from Otel collector.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438549132", "createdAt": "2020-06-11T05:23:25Z", "author": {"login": "iNikem"}, "path": "auto-exporters/otlp/src/main/java/io/opentelemetry/auto/exporters/otlp/OtlpMetricExporterFactory.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n   @Override\n   public MetricExporter fromConfig(final Config config) {\n-    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"\");\n+    final String otlpEndpoint = config.getString(OTLP_ENDPOINT, \"localhost:55680\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMTA2OA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTE3MzE5OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToyMjoyOFrOGiGxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo1NjoyMVrOGiPdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA==", "bodyText": "this seems a little fragile, and we only have smoke tests for the logging exporter at this point, maybe add a comment to each of the SpanExporterFactory classes about this dependency on their names?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438415754", "createdAt": "2020-06-10T21:22:28Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0OTYxOA==", "bodyText": "Yeah, I didn't like it neither. But I could not come up with any other way to identify implementations of SpanExporterFactory.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438549618", "createdAt": "2020-06-11T05:25:15Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MzE4OA==", "bodyText": "Maybe it makes sense to open an issue in otel-java to add some id/name method to SpanExporterFactory?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438553188", "createdAt": "2020-06-11T05:38:51Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NTUxOA==", "bodyText": "Yes, I like that, I forgot that SpanExporterFactory is basically just for auto-instrumentation anyways, so no reason not to add stuff in there that we need \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438555518", "createdAt": "2020-06-11T05:47:12Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1ODExMw==", "bodyText": "Then I will leave this as it is now for now and open an issue in otel-java. After that is done, will update this condition here in a future PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438558113", "createdAt": "2020-06-11T05:56:21Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -54,7 +60,33 @@ public static synchronized void installAgentTracer() {\n     PropagatorsInitializer.initializePropagators(Config.get().getPropagators());\n   }\n \n-  @VisibleForTesting\n+  private static synchronized void installExporters(final String exporterName) {\n+    final SpanExporterFactory spanExporterFactory = findSpanExporterFactory(exporterName);\n+    if (spanExporterFactory != null) {\n+      final DefaultExporterConfig config = new DefaultExporterConfig(\"exporter\");\n+      installExporter(spanExporterFactory, config);\n+    } else {\n+      log.warn(\"No {} span exporter found\", exporterName);\n+      log.warn(\"No valid span exporter found. Tracing will run but spans are dropped\");\n+    }\n+  }\n+\n+  private static SpanExporterFactory findSpanExporterFactory(String exporterName) {\n+    final ServiceLoader<SpanExporterFactory> serviceLoader =\n+        ServiceLoader.load(SpanExporterFactory.class, TracerInstaller.class.getClassLoader());\n+\n+    for (SpanExporterFactory spanExporterFactory : serviceLoader) {\n+      if (spanExporterFactory\n+          .getClass()\n+          .getSimpleName()\n+          .toLowerCase()\n+          .startsWith(exporterName.toLowerCase())) {\n+        return spanExporterFactory;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNTc1NA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTE3NjYzOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToyMzo0NFrOGiGzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToyMzo0NFrOGiGzrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxNjMwMQ==", "bodyText": "exporter can't be null here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (exporter != null) {\n          \n          \n            \n                      installExporters(exporter);\n          \n          \n            \n                    } else {\n          \n          \n            \n                      log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n          \n          \n            \n                    }\n          \n          \n            \n                    installExporters(exporter);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438416301", "createdAt": "2020-06-10T21:23:44Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -36,16 +35,23 @@\n @Slf4j\n public class TracerInstaller {\n   /** Register agent tracer if no agent tracer is already registered. */\n+  @SuppressWarnings(\"unused\")\n   public static synchronized void installAgentTracer() {\n     if (Config.get().isTraceEnabled()) {\n \n       configure();\n-      // Try to create an exporter\n+      // Try to create an exporter from external jar file\n       final String exporterJar = Config.get().getExporterJar();\n       if (exporterJar != null) {\n         installExportersFromJar(exporterJar);\n       } else {\n-        log.warn(\"No exporter is specified. Tracing will run but spans are dropped\");\n+        // Try to create embedded exporter\n+        final String exporter = Config.get().getExporter();\n+        if (exporter != null) {\n+          installExporters(exporter);\n+        } else {\n+          log.warn(\"No exporter is enabled. Tracing will run but spans are dropped\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTIwNTk3OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTozNDoxMVrOGiHGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTo1ODo1NVrOGiPg7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA==", "bodyText": "this will be confusing for zipkin and jaeger users\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else {\n          \n          \n            \n                  log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438421028", "createdAt": "2020-06-10T21:34:11Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MDU1Nw==", "bodyText": "What is the plan for metric exporters and their configuration? If I want to send spans to Zipkin and metrics to Prometheus, how should I configure my agent?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438550557", "createdAt": "2020-06-11T05:28:56Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjYwNg==", "bodyText": "Good question. Can you open an issue to track this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438556606", "createdAt": "2020-06-11T05:51:07Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1ODk1OA==", "bodyText": "#496", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/491#discussion_r438558958", "createdAt": "2020-06-11T05:58:55Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/TracerInstaller.java", "diffHunk": "@@ -70,33 +102,46 @@ private static synchronized void installExportersFromJar(final String exporterJa\n \n     final SpanExporterFactory spanExporterFactory =\n         getExporterFactory(SpanExporterFactory.class, exporterLoader);\n+\n     if (spanExporterFactory != null) {\n-      final SpanExporter spanExporter = spanExporterFactory.fromConfig(config);\n-      BatchSpanProcessor spanProcessor =\n-          BatchSpanProcessor.newBuilder(spanExporter)\n-              .readEnvironmentVariables()\n-              .readSystemProperties()\n-              .build();\n-      OpenTelemetrySdk.getTracerProvider().addSpanProcessor(spanProcessor);\n-      log.info(\"Installed span exporter: \" + spanExporter.getClass().getName());\n+      installExporter(spanExporterFactory, config);\n     } else {\n-      log.warn(\"No matching providers in jar \" + exporterJar);\n+      log.warn(\"No span exporter found in {}\", exporterJar);\n       log.warn(\"No valid exporter found. Tracing will run but spans are dropped\");\n     }\n \n     final MetricExporterFactory metricExporterFactory =\n         getExporterFactory(MetricExporterFactory.class, exporterLoader);\n     if (metricExporterFactory != null) {\n-      final MetricExporter metricExporter = metricExporterFactory.fromConfig(config);\n-      IntervalMetricReader.builder()\n-          .setMetricExporter(metricExporter)\n-          .setMetricProducers(\n-              Collections.singleton(OpenTelemetrySdk.getMeterProvider().getMetricProducer()))\n-          .build();\n-      log.info(\"Installed metric exporter: \" + metricExporter.getClass().getName());\n+      installExporter(metricExporterFactory, config);\n+    } else {\n+      log.warn(\"No metric exporter found in {}. All metrics are dropped\", exporterJar);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQyMTAyOA=="}, "originalCommit": {"oid": "6c74e2cd14b0a835057ce6f81cc9f8ab4f898868"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 493, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}