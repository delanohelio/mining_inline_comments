{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDAwMzU0", "number": 583, "title": "Merge changes from dd-trace-java 0.56.0", "bodyText": "https://github.com/DataDog/dd-trace-java/releases/tag/v0.56.0\nThere are a couple of file format commits at the end, so you may want to filter on the commits when reviewing to avoid those (I just discovered how to do this recently):", "createdAt": "2020-06-26T06:07:49Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583", "merged": true, "mergeCommit": {"oid": "c46623034a5a86f439432c88bc09883cbd55b6c2"}, "closed": true, "closedAt": "2020-06-30T19:26:57Z", "author": {"login": "trask"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcu9SiFgFqTQzODAzODY5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwZxXwABqjM0OTkwNDk4MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDM4Njk3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#pullrequestreview-438038697", "createdAt": "2020-06-26T06:17:47Z", "commit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjoxNzo0N1rOGpU-Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjozMDoxNFrOGpVNgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4ODQyMg==", "bodyText": "Realize it's the same as the previous pattern so optional update, we should probably set this to an unmodifaibleSet in the constructor instead of passing a mutable object around?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445988422", "createdAt": "2020-06-26T06:17:47Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;\n+  private final Set<String> packages = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA==", "bodyText": "Just curious, is it possible for this class to be accessed from multiple threads? I wonder how many, if there are a lot of copies of this buffer, it's unfortunate they all get stuck in memory after classloading is done sort of lean towards not using a threadlocal for it, string seems pretty small.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445989574", "createdAt": "2020-06-26T06:21:46Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDUyNg==", "bodyText": "Intended?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445990526", "createdAt": "2020-06-26T06:24:50Z", "author": {"login": "anuraaga"}, "path": "benchmark-integration/jetty-perftest/jetty-perftest.gradle", "diffHunk": "@@ -10,6 +10,6 @@ jar {\n   manifest {\n     attributes(\n       \"Main-Class\": \"io.opentelemetry.perftest.jetty.JettyPerftest\"\n-    )\n+      )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDY3NA==", "bodyText": "Yay", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445990674", "createdAt": "2020-06-26T06:25:14Z", "author": {"login": "anuraaga"}, "path": "gradle.properties", "diffHunk": "@@ -1 +1,4 @@\n+org.gradle.parallel=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MjMyMw==", "bodyText": "This is because this is a performance optimization, not for correctness, I'm presuming", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r445992323", "createdAt": "2020-06-26T06:30:14Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);\n+      JarEntry entry = bootstrapJarFile.getJarEntry(classFileName);\n+      if (null != entry) {\n+        pair = Pair.of(filename, entry);\n+        // this mechanism intentionally does not ensure visibility of this write, because it doesn't", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDkzODE1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#pullrequestreview-438493815", "createdAt": "2020-06-26T18:02:55Z", "commit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowMjo1NlrOGpp-_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyODozMlrOGpqsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ==", "bodyText": "If I understand correctly, all these changes to this class are performance optimisations, no? Is there any benchmark or, even better, a real use-case, which demonstrate the benefit of this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446332669", "createdAt": "2020-06-26T18:02:56Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ==", "bodyText": "Don't understand, what does this test do exactly?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446333471", "createdAt": "2020-06-26T18:04:44Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/test/groovy/io/opentelemetry/auto/bootstrap/InternalJarURLHandlerTest.groovy", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.bootstrap\n+\n+import io.opentelemetry.auto.bootstrap.InternalJarURLHandler\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import spock.lang.Shared\n+\n+class InternalJarURLHandlerTest extends AgentSpecification {\n+\n+  @Shared\n+  URL testJarLocation = new File(\"src/test/resources/classloader-test-jar/testjar-jdk8\").toURI().toURL()\n+\n+\n+  def \"test extract packages\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    expect:\n+    packages == handler.getPackages()\n+\n+    where:\n+    dir      | packages\n+    \"parent\" | ['a', 'a.b', 'a.b.c'].toSet()\n+    \"child\"  | ['x', 'x.y', 'x.y.z'].toSet()\n+  }\n+\n+  def \"test get URL\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    byte[] data = new byte[128]\n+    int read = connection.getInputStream().read(data)\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+\n+  def \"test read class twice\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzgzNA==", "bodyText": "Why do you want to test several non-existent paths here? Why 1 is not enough?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446333834", "createdAt": "2020-06-26T18:05:35Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/test/groovy/io/opentelemetry/auto/bootstrap/InternalJarURLHandlerTest.groovy", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.bootstrap\n+\n+import io.opentelemetry.auto.bootstrap.InternalJarURLHandler\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import spock.lang.Shared\n+\n+class InternalJarURLHandlerTest extends AgentSpecification {\n+\n+  @Shared\n+  URL testJarLocation = new File(\"src/test/resources/classloader-test-jar/testjar-jdk8\").toURI().toURL()\n+\n+\n+  def \"test extract packages\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    expect:\n+    packages == handler.getPackages()\n+\n+    where:\n+    dir      | packages\n+    \"parent\" | ['a', 'a.b', 'a.b.c'].toSet()\n+    \"child\"  | ['x', 'x.y', 'x.y.z'].toSet()\n+  }\n+\n+  def \"test get URL\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    byte[] data = new byte[128]\n+    int read = connection.getInputStream().read(data)\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+\n+  def \"test read class twice\"() {\n+    // guards against caching the stream\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    InputStream is = connection.getInputStream()\n+    is.close()\n+    connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    is = connection.getInputStream()\n+    byte[] data = new byte[128]\n+    int read = is.read(data)\n+\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+  def \"handle not found\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    handler.openConnection(new File(file).toURI().toURL())\n+    then:\n+    // not going to specify (and thereby constrain) the sub type because it doesn't matter\n+    thrown IOException\n+\n+    // permuted\n+    where:\n+    dir      | file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNDMxMA==", "bodyText": "I would love to see some explanations, why these class loaders in particular are listed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446334310", "createdAt": "2020-06-26T18:06:35Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -116,7 +116,11 @@ public boolean matches(final T target) {\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")) {\n+                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng==", "bodyText": "What is the motivation of this optimisation?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446335146", "createdAt": "2020-06-26T18:08:25Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -293,4 +300,19 @@ private static boolean matchesPrimitive(String longName, String shortName) {\n     }\n     return null;\n   }\n+\n+  private static List<Mismatch> lazyAdd(List<Mismatch> mismatches, Mismatch mismatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg==", "bodyText": "By committing this file you leave a developer without any way to configure his own pre-commit hooks. I think this is a very bad idea.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446336652", "createdAt": "2020-06-26T18:11:36Z", "author": {"login": "iNikem"}, "path": ".githooks/pre-commit", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash\n+# http://redsymbol.net/articles/unofficial-bash-strict-mode/\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+if ! ./gradlew spotlessCheck; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzAxNw==", "bodyText": "Why extract this to a field? It is still used only inside one method, no?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337017", "createdAt": "2020-06-26T18:12:14Z", "author": {"login": "iNikem"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/AgentClassLoader.java", "diffHunk": "@@ -36,11 +36,14 @@\n \n   private static final String AGENT_INITIALIZER_JAR = System.getProperty(\"ota.initializer.jar\", \"\");\n \n+  protected final InternalJarURLHandler internalJarURLHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzI0Nw==", "bodyText": "btw, why do we have/need this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337247", "createdAt": "2020-06-26T18:12:46Z", "author": {"login": "iNikem"}, "path": "gradle.properties", "diffHunk": "@@ -1 +1,4 @@\n+org.gradle.parallel=true\n+org.gradle.caching=true\n+\n org.gradle.jvmargs=-XX:MaxMetaspaceSize=1g", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzU2Ng==", "bodyText": "which one?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337566", "createdAt": "2020-06-26T18:13:23Z", "author": {"login": "iNikem"}, "path": "gradle/spotless.gradle", "diffHunk": "@@ -2,16 +2,36 @@ apply plugin: 'com.diffplug.gradle.spotless'\n \n spotless {\n   java {\n+    googleJavaFormat()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n     target 'src/**/*.java'\n   }\n   groovy {\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|class)'\n   }\n   scala {\n+    scalafmt()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n   kotlin {\n+    // ktfmt() // Requires newer version of java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzc3Ng==", "bodyText": "Does not work above but works here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446337776", "createdAt": "2020-06-26T18:13:50Z", "author": {"login": "iNikem"}, "path": "gradle/spotless.gradle", "diffHunk": "@@ -2,16 +2,36 @@ apply plugin: 'com.diffplug.gradle.spotless'\n \n spotless {\n   java {\n+    googleJavaFormat()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n     target 'src/**/*.java'\n   }\n   groovy {\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|class)'\n   }\n   scala {\n+    scalafmt()\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n   kotlin {\n+    // ktfmt() // Requires newer version of java\n+    ktlint().userData(['indent_size': '2', 'continuation_indent_size': '2'])\n     licenseHeaderFile rootProject.file('gradle/enforcement/spotless.license.java'), '(package|import|public)'\n   }\n+  groovyGradle {\n+    greclipse().configFile(rootProject.rootDir.path + '/gradle/enforcement/spotless-groovy.properties')\n+  }\n+  kotlinGradle {\n+    ktfmt()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzOTg1OQ==", "bodyText": "These are generated files and should be excluded from format check.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446339859", "createdAt": "2020-06-26T18:18:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/jdbc/jdbc.gradle", "diffHunk": "@@ -21,9 +21,6 @@ javacc {\n   }\n }\n \n-tasks.withType(com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat).configureEach {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MDU4Mw==", "bodyText": "This attribute is certainly not from semantic convention. Why should we want this into Otel?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446340583", "createdAt": "2020-06-26T18:19:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/auto/instrumentation/kafkaclients/KafkaProducerInstrumentation.java", "diffHunk": "@@ -93,6 +93,11 @@ public static SpanWithScope onEnter(\n \n       callback = new ProducerCallback(callback, span);\n \n+      boolean isTombstone = record.value() == null && !record.headers().iterator().hasNext();\n+      if (isTombstone) {\n+        span.setAttribute(\"tombstone\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MTc4Nw==", "bodyText": "Not sure new format is better :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446341787", "createdAt": "2020-06-26T18:22:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring-webmvc-3.1/spring-webmvc-3.1.gradle", "diffHunk": "@@ -5,7 +5,11 @@ muzzle {\n     group = 'org.springframework'\n     module = 'spring-webmvc'\n     versions = \"[3.1.0.RELEASE,]\"\n-    skipVersions += ['1.2.1', '1.2.2', '1.2.3', '1.2.4'] // broken releases... missing dependencies\n+    skipVersions += [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0Mjc1MA==", "bodyText": "This will benefit from documentation. This is a good place to document how different instrumentation coordinate with each other and for what purpose.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446342750", "createdAt": "2020-06-26T18:25:02Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/auto/instrumentation/springwebmvc/WebApplicationContextInstrumentation.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.instrumentation.springwebmvc;\n+\n+import static io.opentelemetry.auto.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.extendsClass;\n+import static io.opentelemetry.auto.tooling.bytebuddy.matcher.AgentElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+\n+@AutoService(Instrumenter.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw==", "bodyText": "Why this change?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446344273", "createdAt": "2020-06-26T18:28:32Z", "author": {"login": "iNikem"}, "path": "java-agent/java-agent.gradle", "diffHunk": "@@ -22,14 +22,14 @@ jar {\n       \"Premain-Class\": \"io.opentelemetry.auto.bootstrap.AgentBootstrap\",\n       \"Can-Redefine-Classes\": true,\n       \"Can-Retransform-Classes\": true,\n-    )\n+      )\n   }\n }\n \n CopySpec isolateSpec(Collection<Task> sourceTasks) {\n   return copySpec {\n     from(sourceTasks.collect { zipTree(it.archiveFile) }) {\n-      into 'auto-tooling-and-instrumentation.isolated'\n+      into 'inst'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzI5NTY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#pullrequestreview-438729569", "createdAt": "2020-06-27T22:54:57Z", "commit": {"oid": "942318647304dc9a091d36286097b273a543fab0"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMjo1NDo1N1rOGp419g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDoyMToyMVrOGp5OvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NjExOA==", "bodyText": "@iNikem did u notice this file is under .githooks/pre-commit and not .git/hooks/pre-commit? does that change your opinion on this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446576118", "createdAt": "2020-06-27T22:54:57Z", "author": {"login": "trask"}, "path": ".githooks/pre-commit", "diffHunk": "@@ -0,0 +1,14 @@\n+#!/bin/bash\n+# http://redsymbol.net/articles/unofficial-bash-strict-mode/\n+set -euo pipefail\n+IFS=$'\\n\\t'\n+\n+if ! ./gradlew spotlessCheck; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNjY1Mg=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3NjI3Nw==", "bodyText": "see DataDog/dd-trace-java#1598", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446576277", "createdAt": "2020-06-27T22:56:45Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -16,53 +16,80 @@\n \n package io.opentelemetry.auto.bootstrap;\n \n+import io.opentelemetry.auto.bootstrap.instrumentation.api.Pair;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n-import java.nio.file.NoSuchFileException;\n import java.security.Permission;\n import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public class InternalJarURLHandler extends URLStreamHandler {\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n-  private JarFile bootstrapJarFile;\n+\n+  private static final WeakReference<Pair<String, JarEntry>> NULL = new WeakReference<>(null);\n+\n+  private final String name;\n+  private final FileNotInInternalJar notFound;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjY2OQ=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDMxOQ==", "bodyText": "it will come here from any thread that triggers class loading for AgentClassLoader, so likely not too many different threads, as the various instrumentation classes will only be loaded the first time they are used\nwe could do ThreadLocal<WeakReference<StringBuilder>>, but that wouldn't get it out of the ThreadLocal map, which is also nice to reduce collisions\nso maybe WeakReference<ThreadLocal<StringBuilder>>?\n(i'm also ok with no change here)\n@richardstartin wdyt?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446580319", "createdAt": "2020-06-27T23:53:53Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MDM2Ng==", "bodyText": "i updated the comment to explain a bit more", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446580366", "createdAt": "2020-06-27T23:54:36Z", "author": {"login": "trask"}, "path": "agent-bootstrap/src/test/groovy/io/opentelemetry/auto/bootstrap/InternalJarURLHandlerTest.groovy", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package datadog.trace.bootstrap\n+\n+import io.opentelemetry.auto.bootstrap.InternalJarURLHandler\n+import io.opentelemetry.auto.util.test.AgentSpecification\n+import spock.lang.Shared\n+\n+class InternalJarURLHandlerTest extends AgentSpecification {\n+\n+  @Shared\n+  URL testJarLocation = new File(\"src/test/resources/classloader-test-jar/testjar-jdk8\").toURI().toURL()\n+\n+\n+  def \"test extract packages\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    expect:\n+    packages == handler.getPackages()\n+\n+    where:\n+    dir      | packages\n+    \"parent\" | ['a', 'a.b', 'a.b.c'].toSet()\n+    \"child\"  | ['x', 'x.y', 'x.y.z'].toSet()\n+  }\n+\n+  def \"test get URL\"() {\n+    setup:\n+    InternalJarURLHandler handler = new InternalJarURLHandler(dir, testJarLocation)\n+    when:\n+    URLConnection connection = handler.openConnection(new URL('file://' + file))\n+    assert connection != null\n+    byte[] data = new byte[128]\n+    int read = connection.getInputStream().read(data)\n+    then:\n+    read > 0\n+\n+    where:\n+    dir      | file\n+    \"parent\" | '/a/A.class'\n+    \"parent\" | '/a/b/B.class'\n+    \"parent\" | '/a/b/c/C.class'\n+    \"child\"  | '/x/X.class'\n+    \"child\"  | '/x/y/Y.class'\n+    \"child\"  | '/x/y/z/Z.class'\n+  }\n+\n+\n+  def \"test read class twice\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMzQ3MQ=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTE3Mg==", "bodyText": "added comment", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581172", "createdAt": "2020-06-28T00:05:00Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -293,4 +300,19 @@ private static boolean matchesPrimitive(String longName, String shortName) {\n     }\n     return null;\n   }\n+\n+  private static List<Mismatch> lazyAdd(List<Mismatch> mismatches, Mismatch mismatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNTE0Ng=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTY2NA==", "bodyText": "good question, created #590 to remove", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581664", "createdAt": "2020-06-28T00:10:27Z", "author": {"login": "trask"}, "path": "gradle.properties", "diffHunk": "@@ -1 +1,4 @@\n+org.gradle.parallel=true\n+org.gradle.caching=true\n+\n org.gradle.jvmargs=-XX:MaxMetaspaceSize=1g", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzNzI0Nw=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MTkxMw==", "bodyText": "spotless appears to be smarter and excludes files under build/generated, so this isn't needed anymore", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446581913", "createdAt": "2020-06-28T00:14:11Z", "author": {"login": "trask"}, "path": "instrumentation/jdbc/jdbc.gradle", "diffHunk": "@@ -21,9 +21,6 @@ javacc {\n   }\n }\n \n-tasks.withType(com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat).configureEach {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzOTg1OQ=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4MjQ2MA==", "bodyText": "i added comment\nalso, the original PRs are all linked in the corresponding commit messages", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446582460", "createdAt": "2020-06-28T00:21:21Z", "author": {"login": "trask"}, "path": "java-agent/java-agent.gradle", "diffHunk": "@@ -22,14 +22,14 @@ jar {\n       \"Premain-Class\": \"io.opentelemetry.auto.bootstrap.AgentBootstrap\",\n       \"Can-Redefine-Classes\": true,\n       \"Can-Retransform-Classes\": true,\n-    )\n+      )\n   }\n }\n \n CopySpec isolateSpec(Collection<Task> sourceTasks) {\n   return copySpec {\n     from(sourceTasks.collect { zipTree(it.archiveFile) }) {\n-      into 'auto-tooling-and-instrumentation.isolated'\n+      into 'inst'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDI3Mw=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM4MTk4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#pullrequestreview-438738198", "createdAt": "2020-06-28T02:41:17Z", "commit": {"oid": "21a0133dfd3c4562ab5744bb574fcc974bf240e2"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjo0MToxN1rOGp5y0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjo0MToxN1rOGp5y0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MTY5Ng==", "bodyText": "I sort of lean towards not using the threadlocal optimization for these small strings and let it all be garbage that can be collected, over the complexity of weak references, since I suspect this is a tiny part of the optimization in the attached PR.\nBut if we're only leaking a few hundred bytes it's not so bad either.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#discussion_r446591696", "createdAt": "2020-06-28T02:41:17Z", "author": {"login": "anuraaga"}, "path": "agent-bootstrap/src/main/java/io/opentelemetry/auto/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -75,12 +102,32 @@ protected URLConnection openConnection(final URL url) throws IOException {\n       // nullInputStream() is not available until Java 11\n       return new InternalJarURLConnection(url, new ByteArrayInputStream(new byte[0]));\n     }\n-    final JarEntry entry = filenameToEntry.get(filename);\n-    if (null != entry) {\n-      return new InternalJarURLConnection(url, bootstrapJarFile.getInputStream(entry));\n+    // believe it or not, we're going to get called twice for this,\n+    // and the key will be a new object each time.\n+    Pair<String, JarEntry> pair = cache.get();\n+    if (null == pair || !filename.equals(pair.getLeft())) {\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4OTU3NA=="}, "originalCommit": {"oid": "d446f389332bd616d5f97612e1e68385851f8bf4"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffe97779db1680aff12564139738feb35c679723", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ffe97779db1680aff12564139738feb35c679723", "committedDate": "2020-06-29T05:07:44Z", "message": "Add comment"}, "afterCommit": {"oid": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "committedDate": "2020-06-29T05:55:53Z", "message": "Add comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2c92d1ba3677448d7f3c81ed9c181bb2633e63f5", "committedDate": "2020-06-29T05:55:53Z", "message": "Add comment"}, "afterCommit": {"oid": "9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c0cb20ef66cb32eceeedf0c1b4547f2b4c03a0c", "committedDate": "2020-06-29T05:58:04Z", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTYwNTk4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/583#pullrequestreview-438960598", "createdAt": "2020-06-29T07:47:25Z", "commit": {"oid": "40d52c9d624d3b30527cb831f04f303055f34412"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40d52c9d624d3b30527cb831f04f303055f34412", "author": {"user": {"login": "trask", "name": "Trask Stalnaker"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/40d52c9d624d3b30527cb831f04f303055f34412", "committedDate": "2020-06-29T07:19:19Z", "message": "fixup! Do not eagerly load classfiles at startup (DataDog/dd-trace-java#1606)"}, "afterCommit": {"oid": "0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "committedDate": "2020-06-29T16:31:08Z", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6d04a48ca1d71bd41b284d305d29602ec03b9e1e", "committedDate": "2020-06-30T18:13:20Z", "message": "Shorten jar names (prefixes of runtime classnames) (DataDog/dd-trace-java#1592)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd9744accf0f57e7c6fa58355eedc790e228449", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/abd9744accf0f57e7c6fa58355eedc790e228449", "committedDate": "2020-06-30T18:13:20Z", "message": "Route classloads to classloader by package (DataDog/dd-trace-java#1598)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa000d92ce4f3fff4273513d9d7923ea871bae5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dfa000d92ce4f3fff4273513d9d7923ea871bae5", "committedDate": "2020-06-30T18:13:20Z", "message": "Do not eagerly load classfiles at startup (DataDog/dd-trace-java#1606)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45dc02d9649bddd18342fd1141b676fc301474a7", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/45dc02d9649bddd18342fd1141b676fc301474a7", "committedDate": "2020-06-30T18:13:20Z", "message": "Fix Spring handler mapping affecting character encoding (DataDog/dd-trace-java#1595)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d2e6c62a8de64e12c4b1ae275964f7d5ee188eac", "committedDate": "2020-06-30T18:13:21Z", "message": "Enable build cache (DataDog/dd-trace-java#1607)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab03e058024a2a94eba372cd101d9ca630d0c3d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cab03e058024a2a94eba372cd101d9ca630d0c3d", "committedDate": "2020-06-30T18:13:21Z", "message": "Remove anonymous class from spring webmvc-3.1 (DataDog/dd-trace-java#1611)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6b0ee86c99897bafd1b16f2d22967ae2fcdb5e5e", "committedDate": "2020-06-30T18:13:21Z", "message": "Exclude JDK class references at build time, reduce allocation in ReferenceMatcher (DataDog/dd-trace-java#1613)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1aa4bf9bcb42a82ae284922095675ff6911020", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/de1aa4bf9bcb42a82ae284922095675ff6911020", "committedDate": "2020-06-30T18:13:21Z", "message": "Remove noisy logging in InternalJarURLHandler (DataDog/dd-trace-java#1609)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b558c5022925dcbfe71cba756f37ce4de5507b64", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b558c5022925dcbfe71cba756f37ce4de5507b64", "committedDate": "2020-06-30T18:13:22Z", "message": "Add missing classloader matchers for expensive matchers (DataDog/dd-trace-java#1617)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4a943c8411127c4b3bf702e6e4d1ee3f5377f8a7", "committedDate": "2020-06-30T18:15:48Z", "message": "Use Spotless for formatting (DataDog/dd-trace-java#1619)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9e28828cb5d4769562af7a0e77ce91a0ca43dea0", "committedDate": "2020-06-30T18:15:50Z", "message": "Handle kafka tombstones (DataDog/dd-trace-java#1622)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "committedDate": "2020-06-30T18:15:50Z", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0982ce3fa8b2c3e7d0a6f174d37d4693cc6363a9", "committedDate": "2020-06-29T16:31:08Z", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)"}, "afterCommit": {"oid": "91ad9965d3f7d2bd21e59beff4662431b390c5d6", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/91ad9965d3f7d2bd21e59beff4662431b390c5d6", "committedDate": "2020-06-30T18:15:50Z", "message": "Make build fail on spotless differences (DataDog/dd-trace-java#1627)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3005, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}