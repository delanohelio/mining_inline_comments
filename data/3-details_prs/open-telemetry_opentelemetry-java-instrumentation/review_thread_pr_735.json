{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjA5Nzg3", "number": 735, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0OTo0NFrOEQDVxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozOTowOFrOEQZV7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjY3Mzk2OnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODo0OTo0NFrOG0Al4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowMjo1MVrOG0iN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4ODgzNQ==", "bodyText": "Blargh, wish trace ID was a string! /cc @jkwatson", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457188835", "createdAt": "2020-07-20T08:49:44Z", "author": {"login": "anuraaga"}, "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.log4j.v2_13_2;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+@AutoService(ContextDataProvider.class)\n+public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Span currentSpan = TracingContextUtils.getCurrentSpan();\n+    if (currentSpan == null || !currentSpan.getContext().isValid()) {\n+      return Collections.emptyMap();\n+    }\n+\n+    Map<String, String> contextData = new HashMap<>();\n+    SpanContext spanContext = currentSpan.getContext();\n+    contextData.put(\"traceId\", spanContext.getTraceId().toLowerBase16());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c50516bfb07d6689ae4078dc4e6bba18656abb1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczOTcyOA==", "bodyText": "yes yes yes. me, too", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457739728", "createdAt": "2020-07-20T23:02:51Z", "author": {"login": "jkwatson"}, "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.log4j.v2_13_2;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+@AutoService(ContextDataProvider.class)\n+public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Span currentSpan = TracingContextUtils.getCurrentSpan();\n+    if (currentSpan == null || !currentSpan.getContext().isValid()) {\n+      return Collections.emptyMap();\n+    }\n+\n+    Map<String, String> contextData = new HashMap<>();\n+    SpanContext spanContext = currentSpan.getContext();\n+    contextData.put(\"traceId\", spanContext.getTraceId().toLowerBase16());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE4ODgzNQ=="}, "originalCommit": {"oid": "5c50516bfb07d6689ae4078dc4e6bba18656abb1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkwNTY0OnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoyNFrOG0CnfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoyNFrOG0CnfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjAxMg==", "bodyText": "getCurrentSpan never returns null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457222012", "createdAt": "2020-07-20T09:33:24Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.13.2/library/src/main/java/io/opentelemetry/instrumentation/log4j/v2_13_2/OpenTelemetryContextDataProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.log4j.v2_13_2;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.util.ContextDataProvider;\n+\n+@AutoService(ContextDataProvider.class)\n+public class OpenTelemetryContextDataProvider implements ContextDataProvider {\n+  @Override\n+  public Map<String, String> supplyContextData() {\n+    Span currentSpan = TracingContextUtils.getCurrentSpan();\n+    if (currentSpan == null || !currentSpan.getContext().isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkxMjc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/src/test/resources/log4j2-test.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNDozOVrOG0CrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1MDowMFrOG0DW_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjk2Ng==", "bodyText": "Do you want to demonstrate the usage of context data?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457222966", "createdAt": "2020-07-20T09:34:39Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.13.2/library/src/test/resources/log4j2-test.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\" packages=\"com.example.appender\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzNDE3Mg==", "bodyText": "Good idea", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457234172", "createdAt": "2020-07-20T09:50:00Z", "author": {"login": "anuraaga"}, "path": "instrumentation/log4j/log4j-2.13.2/library/src/test/resources/log4j2-test.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\" packages=\"com.example.appender\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMjk2Ng=="}, "originalCommit": {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkxNDkwOnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/log4j-2.13.2-library.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNTowMFrOG0CsXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo0OTo0N1rOG0DWPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMzI2MQ==", "bodyText": "Add README with at least some documentation?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457223261", "createdAt": "2020-07-20T09:35:00Z", "author": {"login": "iNikem"}, "path": "instrumentation/log4j/log4j-2.13.2/library/log4j-2.13.2-library.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+ext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMzk4Mw==", "bodyText": "Yup added", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457233983", "createdAt": "2020-07-20T09:49:47Z", "author": {"login": "anuraaga"}, "path": "instrumentation/log4j/log4j-2.13.2/library/log4j-2.13.2-library.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+ext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMzI2MQ=="}, "originalCommit": {"oid": "b454f9fc449ce4ea8033eacdf1d4d49851eb20ce"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3ODU4OnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozODo1OVrOG0hsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozODo1OVrOG0hsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>0.6.0-SNAPSHOT</version>\n          \n          \n            \n                <version>0.7.0-SNAPSHOT</version>", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457731072", "createdAt": "2020-07-20T22:38:59Z", "author": {"login": "trask"}, "path": "instrumentation/log4j/log4j-2.13.2/library/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Log4j 2 Integration\n+\n+This module integrates instrumentation with Log4j 2 by injecting the trace ID and span ID from a\n+mounted span into Log4j's [context data](https://logging.apache.org/log4j/2.x/manual/thread-context.html).\n+\n+To use it, just add the module to your application's runtime classpath.\n+\n+**Maven**\n+\n+```xml\n+<dependencies>\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-log4j-2.13.2</artifactId>\n+    <version>0.6.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e32b9ef0c391ccb1e27d16f2d14c54abb6c7df"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3ODg1OnYy", "diffSide": "RIGHT", "path": "instrumentation/log4j/log4j-2.13.2/library/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozOTowOFrOG0hsMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozOTowOFrOG0hsMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-log4j-2.13.2:0.6.0-SNAPSHOT\")\n          \n          \n            \n              runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-log4j-2.13.2:0.7.0-SNAPSHOT\")", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/735#discussion_r457731120", "createdAt": "2020-07-20T22:39:08Z", "author": {"login": "trask"}, "path": "instrumentation/log4j/log4j-2.13.2/library/README.md", "diffHunk": "@@ -0,0 +1,52 @@\n+# Log4j 2 Integration\n+\n+This module integrates instrumentation with Log4j 2 by injecting the trace ID and span ID from a\n+mounted span into Log4j's [context data](https://logging.apache.org/log4j/2.x/manual/thread-context.html).\n+\n+To use it, just add the module to your application's runtime classpath.\n+\n+**Maven**\n+\n+```xml\n+<dependencies>\n+  <dependency>\n+    <groupId>io.opentelemetry.instrumentation</groupId>\n+    <artifactId>opentelemetry-log4j-2.13.2</artifactId>\n+    <version>0.6.0-SNAPSHOT</version>\n+    <scope>runtime</scope>\n+  </dependency>\n+</dependencies>\n+```\n+\n+**Gradle**\n+\n+```kotlin\n+dependencies {\n+  runtimeOnly(\"io.opentelemetry.instrumentation:opentelemetry-log4j-2.13.2:0.6.0-SNAPSHOT\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2e32b9ef0c391ccb1e27d16f2d14c54abb6c7df"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}