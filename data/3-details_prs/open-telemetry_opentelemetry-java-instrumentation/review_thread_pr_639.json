{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0ODI5MDc0", "number": 639, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1Njo0MlrOEMtr9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxNzo0NVrOEN6bdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzY2OTAxOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0-core/spring-webflux-5.0-core.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1Njo0MlrOGu_AfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1Njo0MlrOGu_AfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTk5Nw==", "bodyText": "i don't think this is needed, it should be configured already in $rootDir/gradle/java.gradle using minJavaVersionForTests from above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sourceCompatibility = '8'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r451919997", "createdAt": "2020-07-09T01:56:42Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0-core/spring-webflux-5.0-core.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.instrumentation.spring.webflux'\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf93ad70081d83ff2034f7aab3aea118de39874d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzY5OTQzOnYy", "diffSide": "LEFT", "path": "instrumentation/spring-webflux-5.0/spring-webflux-5.0.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjoxNDo0NVrOGu_TLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjoxNDo0NVrOGu_TLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNDc4MQ==", "bodyText": "i think it makes sense to keep these, since these classes are used directly in this module (even though they also come in as transitive dependencies now)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r451924781", "createdAt": "2020-07-09T02:14:45Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/spring-webflux-5.0.gradle", "diffHunk": "@@ -30,8 +30,7 @@ testSets {\n }\n \n dependencies {\n-  compileOnly group: 'org.springframework', name: 'spring-webflux', version: '5.0.0.RELEASE'\n-  compileOnly group: 'io.projectreactor.ipc', name: 'reactor-netty', version: '0.7.0.RELEASE'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf93ad70081d83ff2034f7aab3aea118de39874d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzcwMzU5OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webflux-5.0/spring-webflux-5.0.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjoxNzoxMVrOGu_VmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMjoxNzoxMVrOGu_VmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNTQwMA==", "bodyText": "check out #644 for how to shade this, so the agent and manual instrumentation don't conflict", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r451925400", "createdAt": "2020-07-09T02:17:11Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webflux-5.0/spring-webflux-5.0.gradle", "diffHunk": "@@ -30,8 +30,7 @@ testSets {\n }\n \n dependencies {\n-  compileOnly group: 'org.springframework', name: 'spring-webflux', version: '5.0.0.RELEASE'\n-  compileOnly group: 'io.projectreactor.ipc', name: 'reactor-netty', version: '0.7.0.RELEASE'\n+  implementation project(':instrumentation-core:spring:spring-webflux-5.0-core')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf93ad70081d83ff2034f7aab3aea118de39874d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE0MTU4OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMDoyN1rOGwOdoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMDoyN1rOGwOdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTc5Mw==", "bodyText": "I suggest removing the no-arg constructor and passing TRACER in to the constructor below", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453221793", "createdAt": "2020-07-11T18:30:27Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -34,14 +35,24 @@\n \n public class WebClientTracingFilter implements ExchangeFilterFunction {\n \n+  private final Tracer tracer;\n+\n+  public WebClientTracingFilter() {\n+    this.tracer = TRACER;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd15f6264da3b8a7ecb1f50370ef5ea735fc89"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE1MTU0OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODo0NTowMlrOGwOiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODo0NTowMlrOGwOiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMzAwNw==", "bodyText": "can be private or at least package-private", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453223007", "createdAt": "2020-07-11T18:45:02Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -34,14 +35,24 @@\n \n public class WebClientTracingFilter implements ExchangeFilterFunction {\n \n+  private final Tracer tracer;\n+\n+  public WebClientTracingFilter() {\n+    this.tracer = TRACER;\n+  }\n+\n+  public WebClientTracingFilter(Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd15f6264da3b8a7ecb1f50370ef5ea735fc89"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE1MjMxOnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODo0NjowOVrOGwOiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODo0NjowOVrOGwOiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMzEwNQ==", "bodyText": "I think add an overload that takes a Tracer arg for users who want to provide their own Tracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453223105", "createdAt": "2020-07-11T18:46:09Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -34,14 +35,24 @@\n \n public class WebClientTracingFilter implements ExchangeFilterFunction {\n \n+  private final Tracer tracer;\n+\n+  public WebClientTracingFilter() {\n+    this.tracer = TRACER;\n+  }\n+\n+  public WebClientTracingFilter(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n   public static void addFilter(final List<ExchangeFilterFunction> exchangeFilterFunctions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21dd15f6264da3b8a7ecb1f50370ef5ea735fc89"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDI0MjQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxNzo0NVrOGwyFug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyOTozMVrOGwyh3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNTQ5OA==", "bodyText": "not familiar w/ the tracer provider and the value passed in get. Is it something we can inject instead? i.e., Tracer should prob be produced as a bean.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453805498", "createdAt": "2020-07-13T17:17:45Z", "author": {"login": "saturnism"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -14,21 +14,18 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.auto.instrumentation.springwebflux.client;\n+package io.opentelemetry.instrumentation.springwebflux.client;\n \n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.net.URI;\n import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n \n-@Slf4j\n-public class SpringWebfluxHttpClientDecorator\n-    extends HttpClientDecorator<ClientRequest, ClientResponse> {\n+class SpringWebfluxHttpClientDecorator extends HttpClientDecorator<ClientRequest, ClientResponse> {\n \n   public static final Tracer TRACER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e07d8bfe8a302c8a3f1dd813d8564dd42cae4c3f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwODcxNQ==", "bodyText": "Nice to meet you here, Ray! :)\n@mabdinur you have done this injection for HttpServerTracer, remember? Please do the same for this decorator too. Just add one more constructor here which takes an instance of Tracer.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453808715", "createdAt": "2020-07-13T17:22:54Z", "author": {"login": "iNikem"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -14,21 +14,18 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.auto.instrumentation.springwebflux.client;\n+package io.opentelemetry.instrumentation.springwebflux.client;\n \n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.net.URI;\n import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n \n-@Slf4j\n-public class SpringWebfluxHttpClientDecorator\n-    extends HttpClientDecorator<ClientRequest, ClientResponse> {\n+class SpringWebfluxHttpClientDecorator extends HttpClientDecorator<ClientRequest, ClientResponse> {\n \n   public static final Tracer TRACER =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNTQ5OA=="}, "originalCommit": {"oid": "e07d8bfe8a302c8a3f1dd813d8564dd42cae4c3f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMjcwMQ==", "bodyText": "I was tried to minimize the changes to the instrumentation code because  I wanted to push out small pull requests and to avoid introducing regressions. @nikita I will open another pull request to clean up the injection", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/639#discussion_r453812701", "createdAt": "2020-07-13T17:29:31Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/springwebflux/client/SpringWebfluxHttpClientDecorator.java", "diffHunk": "@@ -14,21 +14,18 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.auto.instrumentation.springwebflux.client;\n+package io.opentelemetry.instrumentation.springwebflux.client;\n \n import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.auto.bootstrap.instrumentation.decorator.HttpClientDecorator;\n import io.opentelemetry.trace.Span;\n import io.opentelemetry.trace.Tracer;\n import java.net.URI;\n import java.util.List;\n-import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.reactive.function.client.ClientRequest;\n import org.springframework.web.reactive.function.client.ClientResponse;\n \n-@Slf4j\n-public class SpringWebfluxHttpClientDecorator\n-    extends HttpClientDecorator<ClientRequest, ClientResponse> {\n+class SpringWebfluxHttpClientDecorator extends HttpClientDecorator<ClientRequest, ClientResponse> {\n \n   public static final Tracer TRACER =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNTQ5OA=="}, "originalCommit": {"oid": "e07d8bfe8a302c8a3f1dd813d8564dd42cae4c3f"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 329, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}