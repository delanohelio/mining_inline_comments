{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDg1Mjg5", "number": 1236, "title": "Convert all remaining database client decorators to tracers", "bodyText": "", "createdAt": "2020-09-22T17:19:46Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236", "merged": true, "mergeCommit": {"oid": "85e2db8d351c95f74d36c518b0db95ae2f97095c"}, "closed": true, "closedAt": "2020-09-23T17:11:31Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLXco5AH2gAyNDkxMDg1Mjg5OjdlNzg2OWNjNzlhYTk1OTg5ZTk3YjI0N2Y2MmE2YmI4MDkzODc0YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLvxEOAFqTQ5NDg3MzM4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e7869cc79aa95989e97b247f62a6bb8093874b5", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7e7869cc79aa95989e97b247f62a6bb8093874b5", "committedDate": "2020-09-22T12:49:30Z", "message": "Geode tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c547c37483535c5b68a6ba1f910ed1799e0aff1", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0c547c37483535c5b68a6ba1f910ed1799e0aff1", "committedDate": "2020-09-22T12:49:30Z", "message": "Memcache tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4801d04d6bfc9be3077522778b04c330ae0a71d7", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4801d04d6bfc9be3077522778b04c330ae0a71d7", "committedDate": "2020-09-22T12:49:30Z", "message": "Jedis tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d2ff5992070bc6e18576dcbf4a2f99964dfebc", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c3d2ff5992070bc6e18576dcbf4a2f99964dfebc", "committedDate": "2020-09-22T12:49:30Z", "message": "Rediscala tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d5a64dc722a002e697eaea006e74e73b143d31", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50d5a64dc722a002e697eaea006e74e73b143d31", "committedDate": "2020-09-22T12:49:30Z", "message": "ElasticsearchTransport tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5c631aee2403fc724369f710cae78f0270f39d", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8f5c631aee2403fc724369f710cae78f0270f39d", "committedDate": "2020-09-22T12:49:30Z", "message": "ElasticsearchRest tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0429c21ed5c0db394152dc4fde61e634a9d7852f", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0429c21ed5c0db394152dc4fde61e634a9d7852f", "committedDate": "2020-09-22T13:50:07Z", "message": "Clean up HibernateDecorator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50", "committedDate": "2020-09-22T17:17:07Z", "message": "Couchbase tracer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODEzOTQ1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#pullrequestreview-493813945", "createdAt": "2020-09-22T20:18:19Z", "commit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "state": "COMMENTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoxODoxOVrOHWK0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTowNzoxNlrOHWMasg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwNzk4MA==", "bodyText": "JaxRsAnnotationsTracer.startScope() can be deleted", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493007980", "createdAt": "2020-09-22T20:18:19Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -61,6 +62,10 @@ public Span startSpan(String spanName, Kind kind) {\n     return tracer.spanBuilder(spanName).setSpanKind(kind).startSpan();\n   }\n \n+  public Scope startScope(Span span) {\n+    return tracer.withSpan(span);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMDQ5Mg==", "bodyText": "ok to change, or we can file issue", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493010492", "createdAt": "2020-09-22T20:23:05Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/instrumentation/auto/couchbase/v2_0/CouchbaseClientTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.couchbase.v2_0;\n+\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.auto.api.jdbc.DbSystem;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+public class CouchbaseClientTracer extends DatabaseClientTracer<String, Method> {\n+  public static final CouchbaseClientTracer TRACER = new CouchbaseClientTracer();\n+\n+  @Override\n+  protected String normalizeQuery(Method method) {\n+    Class<?> declaringClass = method.getDeclaringClass();\n+    String className =\n+        declaringClass.getSimpleName().replace(\"CouchbaseAsync\", \"\").replace(\"DefaultAsync\", \"\");\n+    return className + \".\" + method.getName();\n+  }\n+\n+  @Override\n+  protected String dbSystem(String o) {\n+    return DbSystem.COUCHBASE;\n+  }\n+\n+  @Override\n+  protected String dbUser(String o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbName(String o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected InetSocketAddress peerAddress(String o) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    // TODO this preserves old behaviour, but is confusing\n+    return \"io.opentelemetry.auto.rxjava-1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMDYyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CouchbaseClientTracer extends DatabaseClientTracer<String, Method> {\n          \n          \n            \n            public class CouchbaseClientTracer extends DatabaseClientTracer<Void, Method> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493010627", "createdAt": "2020-09-22T20:23:20Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/instrumentation/auto/couchbase/v2_0/CouchbaseClientTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.couchbase.v2_0;\n+\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.auto.api.jdbc.DbSystem;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+public class CouchbaseClientTracer extends DatabaseClientTracer<String, Method> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMTE0Mg==", "bodyText": "o --> connection (and below)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493011142", "createdAt": "2020-09-22T20:24:17Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase/couchbase-2.0/src/main/java/io/opentelemetry/instrumentation/auto/couchbase/v2_0/CouchbaseClientTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.couchbase.v2_0;\n+\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.auto.api.jdbc.DbSystem;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+\n+public class CouchbaseClientTracer extends DatabaseClientTracer<String, Method> {\n+  public static final CouchbaseClientTracer TRACER = new CouchbaseClientTracer();\n+\n+  @Override\n+  protected String normalizeQuery(Method method) {\n+    Class<?> declaringClass = method.getDeclaringClass();\n+    String className =\n+        declaringClass.getSimpleName().replace(\"CouchbaseAsync\", \"\").replace(\"DefaultAsync\", \"\");\n+    return className + \".\" + method.getName();\n+  }\n+\n+  @Override\n+  protected String dbSystem(String o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzc2Nw==", "bodyText": "I think span should end before calling the listener (who knows what user is going to do in listener)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493013767", "createdAt": "2020-09-22T20:29:02Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-5.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/v5_0/RestResponseListener.java", "diffHunk": "@@ -35,26 +35,22 @@ public RestResponseListener(ResponseListener listener, Span span) {\n   @Override\n   public void onSuccess(Response response) {\n     if (response.getHost() != null) {\n-      DECORATE.onResponse(span, response);\n+      TRACER.onResponse(span, response);\n     }\n \n     try {\n       listener.onSuccess(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMzkxMg==", "bodyText": "same as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493013912", "createdAt": "2020-09-22T20:29:15Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-5.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/v5_0/RestResponseListener.java", "diffHunk": "@@ -35,26 +35,22 @@ public RestResponseListener(ResponseListener listener, Span span) {\n   @Override\n   public void onSuccess(Response response) {\n     if (response.getHost() != null) {\n-      DECORATE.onResponse(span, response);\n+      TRACER.onResponse(span, response);\n     }\n \n     try {\n       listener.onSuccess(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);\n     }\n   }\n \n   @Override\n   public void onFailure(Exception e) {\n-    DECORATE.onError(span, e);\n-\n     try {\n       listener.onFailure(e);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNDEyNg==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493014126", "createdAt": "2020-09-22T20:29:40Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-6.4/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/v6_4/RestResponseListener.java", "diffHunk": "@@ -35,26 +35,22 @@ public RestResponseListener(ResponseListener listener, Span span) {\n   @Override\n   public void onSuccess(Response response) {\n     if (response.getHost() != null) {\n-      DECORATE.onResponse(span, response);\n+      TRACER.onResponse(span, response);\n     }\n \n     try {\n       listener.onSuccess(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxNDE3NA==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493014174", "createdAt": "2020-09-22T20:29:46Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-6.4/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/v6_4/RestResponseListener.java", "diffHunk": "@@ -35,26 +35,22 @@ public RestResponseListener(ResponseListener listener, Span span) {\n   @Override\n   public void onSuccess(Response response) {\n     if (response.getHost() != null) {\n-      DECORATE.onResponse(span, response);\n+      TRACER.onResponse(span, response);\n     }\n \n     try {\n       listener.onSuccess(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);\n     }\n   }\n \n   @Override\n   public void onFailure(Exception e) {\n-    DECORATE.onError(span, e);\n-\n     try {\n       listener.onFailure(e);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxODQ5Mw==", "bodyText": "this is currently creating nested CLIENT spans, probably we should have database spans also use BaseTracer.CONTEXT_CLIENT_SPAN_KEY and suppress the nested http client span", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493018493", "createdAt": "2020-09-22T20:37:44Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-5.0/src/latestDepTest/groovy/Elasticsearch6RestClientTest.groovy", "diffHunk": "@@ -96,14 +95,15 @@ class Elasticsearch6RestClientTest extends AgentTestRunner {\n       trace(0, 2) {\n         span(0) {\n           operationName \"GET _cluster/health\"\n-          spanKind INTERNAL\n+          spanKind CLIENT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxODk2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ElasticsearchRestClientTracer extends DatabaseClientTracer<String, String> {\n          \n          \n            \n            public class ElasticsearchRestClientTracer extends DatabaseClientTracer<Void, String> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493018965", "createdAt": "2020-09-22T20:38:40Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-common/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/ElasticsearchRestClientTracer.java", "diffHunk": "@@ -16,46 +16,62 @@\n \n package io.opentelemetry.instrumentation.auto.elasticsearch.rest;\n \n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.instrumentation.api.decorator.DatabaseClientDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.api.tracer.utils.NetPeerUtils;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetSocketAddress;\n import org.elasticsearch.client.Response;\n \n-public class ElasticsearchRestClientDecorator extends DatabaseClientDecorator {\n-  public static final ElasticsearchRestClientDecorator DECORATE =\n-      new ElasticsearchRestClientDecorator();\n+public class ElasticsearchRestClientTracer extends DatabaseClientTracer<String, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxOTEzNg==", "bodyText": "s --> connection (and below)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493019136", "createdAt": "2020-09-22T20:38:58Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-rest-common/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/rest/ElasticsearchRestClientTracer.java", "diffHunk": "@@ -16,46 +16,62 @@\n \n package io.opentelemetry.instrumentation.auto.elasticsearch.rest;\n \n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.instrumentation.api.decorator.DatabaseClientDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.api.tracer.utils.NetPeerUtils;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetSocketAddress;\n import org.elasticsearch.client.Response;\n \n-public class ElasticsearchRestClientDecorator extends DatabaseClientDecorator {\n-  public static final ElasticsearchRestClientDecorator DECORATE =\n-      new ElasticsearchRestClientDecorator();\n+public class ElasticsearchRestClientTracer extends DatabaseClientTracer<String, String> {\n+  public static final ElasticsearchRestClientTracer TRACER = new ElasticsearchRestClientTracer();\n \n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracer(\"io.opentelemetry.auto.elasticsearch\");\n+  public Span onRequest(Span span, String method, String endpoint) {\n+    span.setAttribute(SemanticAttributes.HTTP_METHOD.key(), method);\n+    span.setAttribute(SemanticAttributes.HTTP_URL.key(), endpoint);\n+    return span;\n+  }\n+\n+  public Span onResponse(Span span, Response response) {\n+    if (response != null && response.getHost() != null) {\n+      NetPeerUtils.setNetPeer(span, response.getHost().getHostName(), null);\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), response.getHost().getPort());\n+    }\n+    return span;\n+  }\n+\n+  @Override\n+  protected void onStatement(Span span, String statement) {\n+    SemanticAttributes.DB_OPERATION.set(span, statement);\n+  }\n \n   @Override\n-  protected String dbSystem() {\n+  protected String normalizeQuery(String query) {\n+    return query;\n+  }\n+\n+  @Override\n+  protected String dbSystem(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxOTYwOQ==", "bodyText": "i think end span before callback", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493019609", "createdAt": "2020-09-22T20:39:52Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v5_0/TransportActionListener.java", "diffHunk": "@@ -121,19 +121,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDM0Ng==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493020346", "createdAt": "2020-09-22T20:41:10Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v5_0/TransportActionListener.java", "diffHunk": "@@ -121,19 +121,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);\n     }\n   }\n \n   @Override\n   public void onFailure(Exception e) {\n-    DECORATE.onError(span, e);\n-\n     try {\n       listener.onFailure(e);\n     } finally {\n-      span.end();\n+      TRACER.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDYxMg==", "bodyText": "before callback", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493020612", "createdAt": "2020-09-22T20:41:37Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v5_3/TransportActionListener.java", "diffHunk": "@@ -122,20 +122,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMDY3OA==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493020678", "createdAt": "2020-09-22T20:41:44Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-5.3/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v5_3/TransportActionListener.java", "diffHunk": "@@ -122,20 +122,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);\n     }\n   }\n \n   @Override\n   public void onFailure(Exception e) {\n-    DECORATE.onError(span, e);\n-\n     try {\n       listener.onFailure(e);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMTk3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                extends DatabaseClientTracer<String, Action<?, ?, ?>> {\n          \n          \n            \n                extends DatabaseClientTracer<Void, Action<?, ?, ?>> {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493021970", "createdAt": "2020-09-22T20:44:08Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-common/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/ElasticsearchTransportClientTracer.java", "diffHunk": "@@ -16,36 +16,55 @@\n \n package io.opentelemetry.instrumentation.auto.elasticsearch.transport;\n \n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.instrumentation.api.decorator.DatabaseClientDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetSocketAddress;\n+import org.elasticsearch.action.Action;\n \n-public class ElasticsearchTransportClientDecorator extends DatabaseClientDecorator {\n-  public static final ElasticsearchTransportClientDecorator DECORATE =\n-      new ElasticsearchTransportClientDecorator();\n+public class ElasticsearchTransportClientTracer\n+    extends DatabaseClientTracer<String, Action<?, ?, ?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMjA3Mw==", "bodyText": "s --> connection (and below)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493022073", "createdAt": "2020-09-22T20:44:20Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-common/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/ElasticsearchTransportClientTracer.java", "diffHunk": "@@ -16,36 +16,55 @@\n \n package io.opentelemetry.instrumentation.auto.elasticsearch.transport;\n \n-import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.instrumentation.api.decorator.DatabaseClientDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetSocketAddress;\n+import org.elasticsearch.action.Action;\n \n-public class ElasticsearchTransportClientDecorator extends DatabaseClientDecorator {\n-  public static final ElasticsearchTransportClientDecorator DECORATE =\n-      new ElasticsearchTransportClientDecorator();\n+public class ElasticsearchTransportClientTracer\n+    extends DatabaseClientTracer<String, Action<?, ?, ?>> {\n+  public static final ElasticsearchTransportClientTracer TRACER =\n+      new ElasticsearchTransportClientTracer();\n \n-  public static final Tracer TRACER =\n-      OpenTelemetry.getTracer(\"io.opentelemetry.auto.elasticsearch\");\n+  public Span onRequest(Span span, Class action, Class request) {\n+    span.setAttribute(\"elasticsearch.action\", action.getSimpleName());\n+    span.setAttribute(\"elasticsearch.request\", request.getSimpleName());\n+    return span;\n+  }\n \n   @Override\n-  protected String dbSystem() {\n+  protected String normalizeQuery(Action<?, ?, ?> query) {\n+    return query.getClass().getSimpleName();\n+  }\n+\n+  @Override\n+  protected String dbSystem(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMjQxMg==", "bodyText": "before callback", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493022412", "createdAt": "2020-09-22T20:44:57Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-6.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v6_0/TransportActionListener.java", "diffHunk": "@@ -128,20 +128,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyMjU3OQ==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493022579", "createdAt": "2020-09-22T20:45:15Z", "author": {"login": "trask"}, "path": "instrumentation/elasticsearch/elasticsearch-transport-6.0/src/main/java/io/opentelemetry/instrumentation/auto/elasticsearch/transport/v6_0/TransportActionListener.java", "diffHunk": "@@ -128,20 +128,16 @@ public void onResponse(T response) {\n     try {\n       listener.onResponse(response);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.end(span);\n     }\n   }\n \n   @Override\n   public void onFailure(Exception e) {\n-    DECORATE.onError(span, e);\n-\n     try {\n       listener.onFailure(e);\n     } finally {\n-      DECORATE.beforeFinish(span);\n-      span.end();\n+      TRACER.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNDQ5OQ==", "bodyText": "ok to change", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493024499", "createdAt": "2020-09-22T20:48:40Z", "author": {"login": "trask"}, "path": "instrumentation/hystrix-1.4/src/main/java/io/opentelemetry/instrumentation/auto/hystrix/HystrixTracer.java", "diffHunk": "@@ -18,18 +18,24 @@\n \n import com.netflix.hystrix.HystrixInvokableInfo;\n import io.opentelemetry.instrumentation.api.config.Config;\n-import io.opentelemetry.instrumentation.api.decorator.BaseDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.trace.Span;\n \n-public class HystrixDecorator extends BaseDecorator {\n-  public static final HystrixDecorator DECORATE = new HystrixDecorator();\n+public class HystrixTracer extends BaseTracer {\n+  public static final HystrixTracer TRACER = new HystrixTracer();\n \n   private final boolean extraTags;\n \n-  private HystrixDecorator() {\n+  private HystrixTracer() {\n     extraTags = Config.get().isHystrixTagsEnabled();\n   }\n \n+  @Override\n+  protected String getInstrumentationName() {\n+    // TODO this preserves old behaviour, but is confusing\n+    return \"io.opentelemetry.auto.rxjava-1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAyNjQ0NQ==", "bodyText": "looks like these can stay private?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493026445", "createdAt": "2020-09-22T20:52:20Z", "author": {"login": "trask"}, "path": "instrumentation/rxjava-1.0/src/main/java/io/opentelemetry/instrumentation/auto/rxjava/TracedOnSubscribe.java", "diffHunk": "@@ -16,56 +16,44 @@\n \n package io.opentelemetry.instrumentation.auto.rxjava;\n \n-import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n-\n-import io.opentelemetry.OpenTelemetry;\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.instrumentation.api.decorator.BaseDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import rx.Observable;\n import rx.Subscriber;\n import rx.__OpenTelemetryTracingUtil;\n \n public class TracedOnSubscribe<T> implements Observable.OnSubscribe<T> {\n-  private static final Tracer TRACER = OpenTelemetry.getTracer(\"io.opentelemetry.auto.rxjava-1.0\");\n-\n-  private final Observable.OnSubscribe<?> delegate;\n-  private final String operationName;\n-  private final Span parentSpan;\n-  private final BaseDecorator decorator;\n-  private final Span.Kind spanKind;\n+  protected final Observable.OnSubscribe<?> delegate;\n+  protected final String operationName;\n+  protected final Context parentContext;\n+  protected final BaseTracer tracer;\n+  protected final Span.Kind spanKind;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMjQ4Nw==", "bodyText": "i think good to prefer not creating unnecessary scopes\nthough it would require a BaseTracer.startSpan overload that takes a parent Context (or Span)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493032487", "createdAt": "2020-09-22T21:03:55Z", "author": {"login": "trask"}, "path": "instrumentation/rxjava-1.0/src/main/java/io/opentelemetry/instrumentation/auto/rxjava/TracedOnSubscribe.java", "diffHunk": "@@ -16,56 +16,44 @@\n \n package io.opentelemetry.instrumentation.auto.rxjava;\n \n-import static io.opentelemetry.trace.TracingContextUtils.currentContextWith;\n-\n-import io.opentelemetry.OpenTelemetry;\n+import io.grpc.Context;\n+import io.opentelemetry.context.ContextUtils;\n import io.opentelemetry.context.Scope;\n-import io.opentelemetry.instrumentation.api.decorator.BaseDecorator;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n import io.opentelemetry.trace.Span;\n-import io.opentelemetry.trace.Tracer;\n import rx.Observable;\n import rx.Subscriber;\n import rx.__OpenTelemetryTracingUtil;\n \n public class TracedOnSubscribe<T> implements Observable.OnSubscribe<T> {\n-  private static final Tracer TRACER = OpenTelemetry.getTracer(\"io.opentelemetry.auto.rxjava-1.0\");\n-\n-  private final Observable.OnSubscribe<?> delegate;\n-  private final String operationName;\n-  private final Span parentSpan;\n-  private final BaseDecorator decorator;\n-  private final Span.Kind spanKind;\n+  protected final Observable.OnSubscribe<?> delegate;\n+  protected final String operationName;\n+  protected final Context parentContext;\n+  protected final BaseTracer tracer;\n+  protected final Span.Kind spanKind;\n \n   public TracedOnSubscribe(\n-      Observable originalObservable,\n-      String operationName,\n-      BaseDecorator decorator,\n-      Span.Kind spanKind) {\n+      Observable originalObservable, String operationName, BaseTracer tracer, Span.Kind spanKind) {\n     delegate = __OpenTelemetryTracingUtil.extractOnSubscribe(originalObservable);\n     this.operationName = operationName;\n-    this.decorator = decorator;\n+    this.tracer = tracer;\n     this.spanKind = spanKind;\n \n-    parentSpan = TRACER.getCurrentSpan();\n+    parentContext = Context.current();\n   }\n \n   @Override\n   public void call(Subscriber<? super T> subscriber) {\n-    // span finished by TracedSubscriber\n-    Span.Builder spanBuilder = TRACER.spanBuilder(operationName).setSpanKind(spanKind);\n-    if (parentSpan != null) {\n-      spanBuilder.setParent(parentSpan);\n-    }\n-    Span span = spanBuilder.startSpan();\n-\n-    afterStart(span);\n-\n-    try (Scope scope = currentContextWith(span)) {\n-      delegate.call(new TracedSubscriber(span, subscriber, decorator));\n+    try (Scope ignored = ContextUtils.withScopedContext(parentContext)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzMzY2NQ==", "bodyText": "before callback?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493033665", "createdAt": "2020-09-22T21:06:17Z", "author": {"login": "trask"}, "path": "instrumentation/rxjava-1.0/src/main/java/io/opentelemetry/instrumentation/auto/rxjava/TracedSubscriber.java", "diffHunk": "@@ -92,15 +92,12 @@ public void onCompleted() {\n   public void onError(Throwable e) {\n     Span span = spanRef.getAndSet(null);\n     if (span != null) {\n-      try (Scope scope = currentContextWith(span)) {\n-        decorator.onError(span, e);\n+      try (Scope ignored = currentContextWith(span)) {\n         delegate.onError(e);\n+        tracer.endExceptionally(span, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzNDE2Mg==", "bodyText": "and remove this?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#discussion_r493034162", "createdAt": "2020-09-22T21:07:16Z", "author": {"login": "trask"}, "path": "instrumentation/rxjava-1.0/src/main/java/io/opentelemetry/instrumentation/auto/rxjava/TracedSubscriber.java", "diffHunk": "@@ -92,15 +92,12 @@ public void onCompleted() {\n   public void onError(Throwable e) {\n     Span span = spanRef.getAndSet(null);\n     if (span != null) {\n-      try (Scope scope = currentContextWith(span)) {\n-        decorator.onError(span, e);\n+      try (Scope ignored = currentContextWith(span)) {\n         delegate.onError(e);\n+        tracer.endExceptionally(span, e);\n       } catch (Throwable e2) {\n-        decorator.onError(span, e2);\n+        tracer.endExceptionally(span, e2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDI3OTIw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#pullrequestreview-494427920", "createdAt": "2020-09-23T08:36:34Z", "commit": {"oid": "5602c3a9f7a4ecac630b2886c7b973fa9ba5fe50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb57c8381f103d4591e5c736467f801e7a582238", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cb57c8381f103d4591e5c736467f801e7a582238", "committedDate": "2020-09-23T12:23:27Z", "message": "Polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODczMzgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1236#pullrequestreview-494873382", "createdAt": "2020-09-23T17:09:32Z", "commit": {"oid": "cb57c8381f103d4591e5c736467f801e7a582238"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2626, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}