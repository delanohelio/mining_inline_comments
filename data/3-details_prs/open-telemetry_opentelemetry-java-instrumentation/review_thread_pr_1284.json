{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NjM2NjM2", "number": 1284, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNzo0NVrOEoksnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozOTo0M1rOEovgHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTc5NzQzOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDoxNzo0NVrOHZvi3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDozMDo1MlrOHaM7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTQyMw==", "bodyText": "I realize this is just copied, but maybe remove TODO, it seems to be an implementation of the spec with no todos from what I can tell.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r496755423", "createdAt": "2020-09-29T14:17:45Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "diffHunk": "@@ -111,32 +112,43 @@ protected void onError(Span span, Throwable throwable) {\n     }\n   }\n \n-  protected void onPeerConnection(Span span, CONNECTION connection) {\n+  protected void setNetSemanticConvention(Span span, CONNECTION connection) {\n     NetPeerUtils.setNetPeer(span, peerAddress(connection));\n   }\n \n   protected void onStatement(Span span, String statement) {\n     span.setAttribute(SemanticAttributes.DB_STATEMENT, statement);\n   }\n \n-  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be\n-  // populated using the same value as db.name\" (c) spec\n-  protected String spanName(String query) {\n-    return query == null ? DB_QUERY : query;\n-  }\n-\n-  protected abstract String normalizeQuery(QUERY query);\n+  protected abstract @NonNull String normalizeQuery(QUERY query);\n \n-  protected abstract String dbSystem(CONNECTION connection);\n+  protected abstract @NonNull String dbSystem(CONNECTION connection);\n \n-  protected abstract String dbUser(CONNECTION connection);\n+  protected String dbUser(CONNECTION connection) {\n+    return null;\n+  }\n \n-  protected abstract String dbName(CONNECTION connection);\n+  protected String dbName(CONNECTION connection) {\n+    return null;\n+  }\n \n-  // TODO make abstract after implementing in all subclasses\n   protected String dbConnectionString(CONNECTION connection) {\n     return null;\n   }\n \n   protected abstract InetSocketAddress peerAddress(CONNECTION connection);\n+\n+  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNjgxMQ==", "bodyText": "O yes, I have fixed this TODO in this PR. Will remove", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497236811", "createdAt": "2020-09-30T04:30:52Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "diffHunk": "@@ -111,32 +112,43 @@ protected void onError(Span span, Throwable throwable) {\n     }\n   }\n \n-  protected void onPeerConnection(Span span, CONNECTION connection) {\n+  protected void setNetSemanticConvention(Span span, CONNECTION connection) {\n     NetPeerUtils.setNetPeer(span, peerAddress(connection));\n   }\n \n   protected void onStatement(Span span, String statement) {\n     span.setAttribute(SemanticAttributes.DB_STATEMENT, statement);\n   }\n \n-  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be\n-  // populated using the same value as db.name\" (c) spec\n-  protected String spanName(String query) {\n-    return query == null ? DB_QUERY : query;\n-  }\n-\n-  protected abstract String normalizeQuery(QUERY query);\n+  protected abstract @NonNull String normalizeQuery(QUERY query);\n \n-  protected abstract String dbSystem(CONNECTION connection);\n+  protected abstract @NonNull String dbSystem(CONNECTION connection);\n \n-  protected abstract String dbUser(CONNECTION connection);\n+  protected String dbUser(CONNECTION connection) {\n+    return null;\n+  }\n \n-  protected abstract String dbName(CONNECTION connection);\n+  protected String dbName(CONNECTION connection) {\n+    return null;\n+  }\n \n-  // TODO make abstract after implementing in all subclasses\n   protected String dbConnectionString(CONNECTION connection) {\n     return null;\n   }\n \n   protected abstract InetSocketAddress peerAddress(CONNECTION connection);\n+\n+  // TODO: \"When it's impossible to get any meaningful representation of the span name, it can be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NTQyMw=="}, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTU2NzY2OnYy", "diffSide": "RIGHT", "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDozOTo0M1rOHaAgKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozMTo0N1rOHbIIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA==", "bodyText": "I don't think @NonNull is needed in these cases since there aren't any callers of these methods who rely on this behavior (of overriding their @Nullable parents).\nMy preference is to only use @NonNull annotation where it's really needed (which is not often).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497033258", "createdAt": "2020-09-29T20:39:43Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -34,23 +36,24 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n+  protected @NonNull String normalizeQuery(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzIzNjQwMQ==", "bodyText": "I added it here to be sure that no subclass return null.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497236401", "createdAt": "2020-09-30T04:29:09Z", "author": {"login": "iNikem"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -34,23 +36,24 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n+  protected @NonNull String normalizeQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk4MzQ0OA==", "bodyText": "If a subclass returns null, would it lead to a NullPointerException? If not, I'd suggest we don't need the @NonNull annotation on the return type", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r497983448", "createdAt": "2020-10-01T04:56:10Z", "author": {"login": "trask"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -34,23 +36,24 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n+  protected @NonNull String normalizeQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwNjc1MQ==", "bodyText": "Removed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1284#discussion_r498206751", "createdAt": "2020-10-01T12:31:47Z", "author": {"login": "iNikem"}, "path": "instrumentation/cassandra/cassandra-3.0/src/main/java/io/opentelemetry/instrumentation/auto/cassandra/v3_0/CassandraDatabaseClientTracer.java", "diffHunk": "@@ -34,23 +36,24 @@ protected String getInstrumentationName() {\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n+  protected @NonNull String normalizeQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAzMzI1OA=="}, "originalCommit": {"oid": "844c2ac2828458827e73f129735b01f2f85bdfa8"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}