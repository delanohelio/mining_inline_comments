{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NzM5OTgx", "number": 646, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjozODoyOVrOEMTuxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNzo1OFrOEMWb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzQxNjM2OnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjozODoyOVrOGuWCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozODoxMFrOG2SrHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODcxMw==", "bodyText": "Aren't these so broad they'll result in false positives? I notice it's not a new change but noticed it now, especially since I had the same question about the clojure patterns, which also seem like they have a higher chance of colliding with a user class than seems safe.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451248713", "createdAt": "2020-07-08T02:38:29Z", "author": {"login": "anuraaga"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+        break;\n+      case 'b' - 'a':\n+        break;\n+      case 'c' - 'a':\n+        if (name.startsWith(\"com.\")) {\n+          if (name.startsWith(\"com.p6spy.\")\n+              || name.startsWith(\"com.dynatrace.\")\n+              || name.startsWith(\"com.jloadtrace.\")\n+              || name.startsWith(\"com.appdynamics.\")\n+              || name.startsWith(\"com.singularity.\")\n+              || name.startsWith(\"com.jinspired.\")\n+              || name.startsWith(\"com.intellij.rt.debugger.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"com.sun.\")) {\n+            return !name.startsWith(\"com.sun.messaging.\")\n+                && !name.startsWith(\"com.sun.jersey.api.client\");\n+          }\n+          if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n+            return true;\n+          }\n+        }\n+        if (name.startsWith(\"clojure.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'd' - 'a':\n+        break;\n+      case 'e' - 'a':\n+        break;\n+      case 'f' - 'a':\n+        break;\n+      case 'g' - 'a':\n+        break;\n+      case 'h' - 'a':\n+        break;\n+      case 'i' - 'a':\n+        if (name.startsWith(\"io.opentelemetry.auto.\")) {\n+          // FIXME: We should remove this once\n+          // https://github.com/raphw/byte-buddy/issues/558 is fixed\n+          if (name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n+              || name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n+            return false;\n+          }\n+          return true;\n+        }\n+        if (name.startsWith(\"io.micronaut.tracing.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'j' - 'a':\n+        if (name.startsWith(\"jdk.\")) {\n+          return true;\n+        }\n+        if (name.startsWith(\"java.\")) {\n+          // allow exception profiling instrumentation\n+          if (name.equals(\"java.lang.Throwable\")) {\n+            return false;\n+          }\n+          if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n+            return false;\n+          }\n+          if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n+            return false;\n+          }\n+          // Concurrent instrumentation modifies the structure of\n+          // Cleaner class incompatibly with java9+ modules.\n+          // Working around until a long-term fix for modules can be\n+          // put in place.\n+          return !name.startsWith(\"java.util.logging.\")\n+              || name.equals(\"java.util.logging.LogManager$Cleaner\");\n+        }\n+        break;\n+      case 'k' - 'a':\n+        break;\n+      case 'l' - 'a':\n+        break;\n+      case 'm' - 'a':\n+        break;\n+      case 'n' - 'a':\n+        if (name.startsWith(\"net.bytebuddy.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'o' - 'a':\n+        if (name.startsWith(\"org.\")) {\n+          if (name.startsWith(\"org.aspectj.\") || name.startsWith(\"org.jinspired.\")) {\n+            return true;\n+          }\n+          // groovy\n+          if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"org.codehaus.groovy.\")) {\n+            // We seem to instrument some classes in runtime\n+            return !name.startsWith(\"org.codehaus.groovy.runtime.\");\n+          }\n+        }\n+        break;\n+      case 'p' - 'a':\n+        break;\n+      case 'q' - 'a':\n+        break;\n+      case 'r' - 'a':\n+        break;\n+      case 's' - 'a':\n+        if (name.startsWith(\"sun.\")) {\n+          return !name.startsWith(\"sun.net.www.protocol.\")\n+              && !name.startsWith(\"sun.rmi.server\")\n+              && !name.startsWith(\"sun.rmi.transport\")\n+              && !name.equals(\"sun.net.www.http.HttpClient\");\n+        }\n+        break;\n+      default:\n     }\n \n-    if (name.startsWith(\"java.\")) {\n-      if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n-        return false;\n+    final int firstDollar = name.indexOf('$');\n+    if (firstDollar > -1) {\n+      // clojure class patterns\n+      if (name.startsWith(\"loader__\", firstDollar + 1)) {\n+        return true;\n       }\n-      if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n-        return false;\n-      }\n-      // Concurrent instrumentation modifies the structure of\n-      // Cleaner class incompatibly with java9+ modules.\n-      // Working around until a long-term fix for modules can be\n-      // put in place.\n-      if (name.startsWith(\"java.util.logging.\")\n-          && !name.equals(\"java.util.logging.LogManager$Cleaner\")) {\n-        return false;\n+      int dollar = firstDollar;\n+      while (dollar > -1) {\n+        if (name.startsWith(\"fn__\", dollar + 1) || name.startsWith(\"reify__\", dollar + 1)) {\n+          return true;\n+        }\n+        dollar = name.indexOf('$', dollar + 1);\n       }\n \n-      return true;\n-    }\n-\n-    if (name.startsWith(\"com.sun.\")) {\n-      if (name.startsWith(\"com.sun.messaging.\") || name.startsWith(\"com.sun.jersey.api.client\")) {\n-        return false;\n+      if (name.contains(\"$JaxbAccessor\")\n+          || name.contains(\"CGLIB$$\")\n+          || name.contains(\"$__sisu\")\n+          || name.contains(\"$$EnhancerByProxool$$\")\n+          || name.startsWith(\"org.springframework.core.$Proxy\")) {\n+        return true;\n       }\n-\n-      return true;\n     }\n-\n-    if (name.startsWith(\"sun.\")) {\n-      if (name.startsWith(\"sun.net.www.protocol.\")\n-          || name.startsWith(\"sun.rmi.server\")\n-          || name.startsWith(\"sun.rmi.transport\")\n-          || name.equals(\"sun.net.www.http.HttpClient\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"org.slf4j.\")) {\n-      if (name.equals(\"org.slf4j.MDC\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.contains(\"$JaxbAccessor\")\n-        || name.contains(\"CGLIB$$\")\n-        || name.contains(\"javassist\")\n-        || name.contains(\".asm.\")\n-        || name.contains(\"$__sisu\")\n-        || name.contains(\"$$EnhancerByProxool$$\")\n-        || name.startsWith(\"org.springframework.core.$Proxy\")) {\n-      return true;\n-    }\n-\n-    if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n-      return true;\n-    }\n-\n-    if (!skipAdditionalLibraryMatcher && additionalLibraryIgnoreMatcher.matches(target)) {\n+    if (name.contains(\"javassist\") || name.contains(\".asm.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1NzIwMg==", "bodyText": "Possibly, but they aren't new, they just moved.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451757202", "createdAt": "2020-07-08T18:51:17Z", "author": {"login": "richardstartin"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+        break;\n+      case 'b' - 'a':\n+        break;\n+      case 'c' - 'a':\n+        if (name.startsWith(\"com.\")) {\n+          if (name.startsWith(\"com.p6spy.\")\n+              || name.startsWith(\"com.dynatrace.\")\n+              || name.startsWith(\"com.jloadtrace.\")\n+              || name.startsWith(\"com.appdynamics.\")\n+              || name.startsWith(\"com.singularity.\")\n+              || name.startsWith(\"com.jinspired.\")\n+              || name.startsWith(\"com.intellij.rt.debugger.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"com.sun.\")) {\n+            return !name.startsWith(\"com.sun.messaging.\")\n+                && !name.startsWith(\"com.sun.jersey.api.client\");\n+          }\n+          if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n+            return true;\n+          }\n+        }\n+        if (name.startsWith(\"clojure.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'd' - 'a':\n+        break;\n+      case 'e' - 'a':\n+        break;\n+      case 'f' - 'a':\n+        break;\n+      case 'g' - 'a':\n+        break;\n+      case 'h' - 'a':\n+        break;\n+      case 'i' - 'a':\n+        if (name.startsWith(\"io.opentelemetry.auto.\")) {\n+          // FIXME: We should remove this once\n+          // https://github.com/raphw/byte-buddy/issues/558 is fixed\n+          if (name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n+              || name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n+            return false;\n+          }\n+          return true;\n+        }\n+        if (name.startsWith(\"io.micronaut.tracing.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'j' - 'a':\n+        if (name.startsWith(\"jdk.\")) {\n+          return true;\n+        }\n+        if (name.startsWith(\"java.\")) {\n+          // allow exception profiling instrumentation\n+          if (name.equals(\"java.lang.Throwable\")) {\n+            return false;\n+          }\n+          if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n+            return false;\n+          }\n+          if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n+            return false;\n+          }\n+          // Concurrent instrumentation modifies the structure of\n+          // Cleaner class incompatibly with java9+ modules.\n+          // Working around until a long-term fix for modules can be\n+          // put in place.\n+          return !name.startsWith(\"java.util.logging.\")\n+              || name.equals(\"java.util.logging.LogManager$Cleaner\");\n+        }\n+        break;\n+      case 'k' - 'a':\n+        break;\n+      case 'l' - 'a':\n+        break;\n+      case 'm' - 'a':\n+        break;\n+      case 'n' - 'a':\n+        if (name.startsWith(\"net.bytebuddy.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'o' - 'a':\n+        if (name.startsWith(\"org.\")) {\n+          if (name.startsWith(\"org.aspectj.\") || name.startsWith(\"org.jinspired.\")) {\n+            return true;\n+          }\n+          // groovy\n+          if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"org.codehaus.groovy.\")) {\n+            // We seem to instrument some classes in runtime\n+            return !name.startsWith(\"org.codehaus.groovy.runtime.\");\n+          }\n+        }\n+        break;\n+      case 'p' - 'a':\n+        break;\n+      case 'q' - 'a':\n+        break;\n+      case 'r' - 'a':\n+        break;\n+      case 's' - 'a':\n+        if (name.startsWith(\"sun.\")) {\n+          return !name.startsWith(\"sun.net.www.protocol.\")\n+              && !name.startsWith(\"sun.rmi.server\")\n+              && !name.startsWith(\"sun.rmi.transport\")\n+              && !name.equals(\"sun.net.www.http.HttpClient\");\n+        }\n+        break;\n+      default:\n     }\n \n-    if (name.startsWith(\"java.\")) {\n-      if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n-        return false;\n+    final int firstDollar = name.indexOf('$');\n+    if (firstDollar > -1) {\n+      // clojure class patterns\n+      if (name.startsWith(\"loader__\", firstDollar + 1)) {\n+        return true;\n       }\n-      if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n-        return false;\n-      }\n-      // Concurrent instrumentation modifies the structure of\n-      // Cleaner class incompatibly with java9+ modules.\n-      // Working around until a long-term fix for modules can be\n-      // put in place.\n-      if (name.startsWith(\"java.util.logging.\")\n-          && !name.equals(\"java.util.logging.LogManager$Cleaner\")) {\n-        return false;\n+      int dollar = firstDollar;\n+      while (dollar > -1) {\n+        if (name.startsWith(\"fn__\", dollar + 1) || name.startsWith(\"reify__\", dollar + 1)) {\n+          return true;\n+        }\n+        dollar = name.indexOf('$', dollar + 1);\n       }\n \n-      return true;\n-    }\n-\n-    if (name.startsWith(\"com.sun.\")) {\n-      if (name.startsWith(\"com.sun.messaging.\") || name.startsWith(\"com.sun.jersey.api.client\")) {\n-        return false;\n+      if (name.contains(\"$JaxbAccessor\")\n+          || name.contains(\"CGLIB$$\")\n+          || name.contains(\"$__sisu\")\n+          || name.contains(\"$$EnhancerByProxool$$\")\n+          || name.startsWith(\"org.springframework.core.$Proxy\")) {\n+        return true;\n       }\n-\n-      return true;\n     }\n-\n-    if (name.startsWith(\"sun.\")) {\n-      if (name.startsWith(\"sun.net.www.protocol.\")\n-          || name.startsWith(\"sun.rmi.server\")\n-          || name.startsWith(\"sun.rmi.transport\")\n-          || name.equals(\"sun.net.www.http.HttpClient\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"org.slf4j.\")) {\n-      if (name.equals(\"org.slf4j.MDC\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.contains(\"$JaxbAccessor\")\n-        || name.contains(\"CGLIB$$\")\n-        || name.contains(\"javassist\")\n-        || name.contains(\".asm.\")\n-        || name.contains(\"$__sisu\")\n-        || name.contains(\"$$EnhancerByProxool$$\")\n-        || name.startsWith(\"org.springframework.core.$Proxy\")) {\n-      return true;\n-    }\n-\n-    if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n-      return true;\n-    }\n-\n-    if (!skipAdditionalLibraryMatcher && additionalLibraryIgnoreMatcher.matches(target)) {\n+    if (name.contains(\"javassist\") || name.contains(\".asm.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODcxMw=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MjIzNw==", "bodyText": "Opened #769 to review all global ignores", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r459582237", "createdAt": "2020-07-23T16:38:10Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+        break;\n+      case 'b' - 'a':\n+        break;\n+      case 'c' - 'a':\n+        if (name.startsWith(\"com.\")) {\n+          if (name.startsWith(\"com.p6spy.\")\n+              || name.startsWith(\"com.dynatrace.\")\n+              || name.startsWith(\"com.jloadtrace.\")\n+              || name.startsWith(\"com.appdynamics.\")\n+              || name.startsWith(\"com.singularity.\")\n+              || name.startsWith(\"com.jinspired.\")\n+              || name.startsWith(\"com.intellij.rt.debugger.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"com.sun.\")) {\n+            return !name.startsWith(\"com.sun.messaging.\")\n+                && !name.startsWith(\"com.sun.jersey.api.client\");\n+          }\n+          if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n+            return true;\n+          }\n+        }\n+        if (name.startsWith(\"clojure.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'd' - 'a':\n+        break;\n+      case 'e' - 'a':\n+        break;\n+      case 'f' - 'a':\n+        break;\n+      case 'g' - 'a':\n+        break;\n+      case 'h' - 'a':\n+        break;\n+      case 'i' - 'a':\n+        if (name.startsWith(\"io.opentelemetry.auto.\")) {\n+          // FIXME: We should remove this once\n+          // https://github.com/raphw/byte-buddy/issues/558 is fixed\n+          if (name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n+              || name.equals(\n+                  \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n+            return false;\n+          }\n+          return true;\n+        }\n+        if (name.startsWith(\"io.micronaut.tracing.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'j' - 'a':\n+        if (name.startsWith(\"jdk.\")) {\n+          return true;\n+        }\n+        if (name.startsWith(\"java.\")) {\n+          // allow exception profiling instrumentation\n+          if (name.equals(\"java.lang.Throwable\")) {\n+            return false;\n+          }\n+          if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n+            return false;\n+          }\n+          if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n+            return false;\n+          }\n+          // Concurrent instrumentation modifies the structure of\n+          // Cleaner class incompatibly with java9+ modules.\n+          // Working around until a long-term fix for modules can be\n+          // put in place.\n+          return !name.startsWith(\"java.util.logging.\")\n+              || name.equals(\"java.util.logging.LogManager$Cleaner\");\n+        }\n+        break;\n+      case 'k' - 'a':\n+        break;\n+      case 'l' - 'a':\n+        break;\n+      case 'm' - 'a':\n+        break;\n+      case 'n' - 'a':\n+        if (name.startsWith(\"net.bytebuddy.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'o' - 'a':\n+        if (name.startsWith(\"org.\")) {\n+          if (name.startsWith(\"org.aspectj.\") || name.startsWith(\"org.jinspired.\")) {\n+            return true;\n+          }\n+          // groovy\n+          if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"org.codehaus.groovy.\")) {\n+            // We seem to instrument some classes in runtime\n+            return !name.startsWith(\"org.codehaus.groovy.runtime.\");\n+          }\n+        }\n+        break;\n+      case 'p' - 'a':\n+        break;\n+      case 'q' - 'a':\n+        break;\n+      case 'r' - 'a':\n+        break;\n+      case 's' - 'a':\n+        if (name.startsWith(\"sun.\")) {\n+          return !name.startsWith(\"sun.net.www.protocol.\")\n+              && !name.startsWith(\"sun.rmi.server\")\n+              && !name.startsWith(\"sun.rmi.transport\")\n+              && !name.equals(\"sun.net.www.http.HttpClient\");\n+        }\n+        break;\n+      default:\n     }\n \n-    if (name.startsWith(\"java.\")) {\n-      if (name.equals(\"java.net.URL\") || name.equals(\"java.net.HttpURLConnection\")) {\n-        return false;\n+    final int firstDollar = name.indexOf('$');\n+    if (firstDollar > -1) {\n+      // clojure class patterns\n+      if (name.startsWith(\"loader__\", firstDollar + 1)) {\n+        return true;\n       }\n-      if (name.startsWith(\"java.rmi.\") || name.startsWith(\"java.util.concurrent.\")) {\n-        return false;\n-      }\n-      // Concurrent instrumentation modifies the structure of\n-      // Cleaner class incompatibly with java9+ modules.\n-      // Working around until a long-term fix for modules can be\n-      // put in place.\n-      if (name.startsWith(\"java.util.logging.\")\n-          && !name.equals(\"java.util.logging.LogManager$Cleaner\")) {\n-        return false;\n+      int dollar = firstDollar;\n+      while (dollar > -1) {\n+        if (name.startsWith(\"fn__\", dollar + 1) || name.startsWith(\"reify__\", dollar + 1)) {\n+          return true;\n+        }\n+        dollar = name.indexOf('$', dollar + 1);\n       }\n \n-      return true;\n-    }\n-\n-    if (name.startsWith(\"com.sun.\")) {\n-      if (name.startsWith(\"com.sun.messaging.\") || name.startsWith(\"com.sun.jersey.api.client\")) {\n-        return false;\n+      if (name.contains(\"$JaxbAccessor\")\n+          || name.contains(\"CGLIB$$\")\n+          || name.contains(\"$__sisu\")\n+          || name.contains(\"$$EnhancerByProxool$$\")\n+          || name.startsWith(\"org.springframework.core.$Proxy\")) {\n+        return true;\n       }\n-\n-      return true;\n     }\n-\n-    if (name.startsWith(\"sun.\")) {\n-      if (name.startsWith(\"sun.net.www.protocol.\")\n-          || name.startsWith(\"sun.rmi.server\")\n-          || name.startsWith(\"sun.rmi.transport\")\n-          || name.equals(\"sun.net.www.http.HttpClient\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"org.slf4j.\")) {\n-      if (name.equals(\"org.slf4j.MDC\")) {\n-        return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    if (name.contains(\"$JaxbAccessor\")\n-        || name.contains(\"CGLIB$$\")\n-        || name.contains(\"javassist\")\n-        || name.contains(\".asm.\")\n-        || name.contains(\"$__sisu\")\n-        || name.contains(\"$$EnhancerByProxool$$\")\n-        || name.startsWith(\"org.springframework.core.$Proxy\")) {\n-      return true;\n-    }\n-\n-    if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n-      return true;\n-    }\n-\n-    if (!skipAdditionalLibraryMatcher && additionalLibraryIgnoreMatcher.matches(target)) {\n+    if (name.contains(\"javassist\") || name.contains(\".asm.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0ODcxMw=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzg1OTgxOnYy", "diffSide": "RIGHT", "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozNzo1OFrOGuaFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo1MDowNVrOG1-I9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ==", "bodyText": "Can we have at least documentation for this code? Every engineer that will see it will ask \"WTH is going on here?!\". Can some benchmark results be added as well to demonstrate that this is indeed required?\nThe comment on the corresponding upstream PR is confusing \"This currently actually increases the startup time\".", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451315031", "createdAt": "2020-07-08T06:37:58Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MjkxNg==", "bodyText": "Heh yeah was confused by that too but assumed it's a typo or something.\nI would suggest a bar where for these sort of unreadable changes for performance we add in the comment the actual performance gain found in JMH.\n// Speeds up startup on clojure apps 5x without affecting others.\nFWIW if the comment said 10%, we probably shouldn't accept it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451452916", "createdAt": "2020-07-08T10:50:44Z", "author": {"login": "anuraaga"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyMjA2OQ==", "bodyText": "Agreed, this code looks horrendous, hence the comment below (possibly understatement) but it gets called for every loaded class and we have real reports that our instrumentation stresses clojure start up quite a lot because clojure apps load so many classes. This translated to over 25% improvement in a clojure application, which led to a meaningful outcome. I would be tempted not to take the change unless you have a clojure userbase.\nThe top comment on the PR related to a matcher which could identify and exclude any clojure class, which actually led to regressions in startup and was removed in favour of this - I'll change it now. There's another comment on the PR about how it would be nice to implement this matcher with longest common prefix matches against a trie, rather than a hack like this, but there wasn't really time to do it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451722069", "createdAt": "2020-07-08T17:48:31Z", "author": {"login": "richardstartin"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcyNjkxMw==", "bodyText": "@trask what do you think about excluding this change? IMO it is a big trade-off of complexity vs performance and ideally we should do such trade-offs only with some evidence attached to these changes. So that future developers would be able to reproduce results and think of better solutions.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451726913", "createdAt": "2020-07-08T17:56:29Z", "author": {"login": "iNikem"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTczNzEwOA==", "bodyText": "startup overhead is a big pain point, so I'm in favor of anything that helps, even if it's only 10%. i agree we need some benchmarks, and we can definitely add more of this explanation directly in the code. let's pause on this PR and i'll get back to you", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r451737108", "createdAt": "2020-07-08T18:14:45Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0NTgxNQ==", "bodyText": "I wrote a benchmark #768, but it wasn't clojure specific, so didn't show any improvement with this change. In any case, I removed this change, but will keep it in mind as we look at startup performance more in the future.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/646#discussion_r459245815", "createdAt": "2020-07-23T06:50:05Z", "author": {"login": "trask"}, "path": "agent-tooling/src/main/java/io/opentelemetry/auto/tooling/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -63,110 +63,154 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"io.opentelemetry.auto.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"io.opentelemetry.auto.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxNTAzMQ=="}, "originalCommit": {"oid": "602efd249d4680a43de04510cd13a063199d7e77"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 344, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}