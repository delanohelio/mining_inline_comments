{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDY2NDE4", "number": 1618, "title": "Use Kotlin context element in agent instrumentation", "bodyText": "Follow-on to #1617\n@johnbley @iNikem mentioned he would chat with you about the approach of using context element, including the notion that makeCurrent in kotlin code is illegal and shouldn't really be supported by us. Figured having this in front of your eyes will help the discussion :)\nFixes #1411", "createdAt": "2020-11-11T09:22:49Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618", "merged": true, "mergeCommit": {"oid": "822be11dbcdbdb6f683c9571f1a76df9d40eaeab"}, "closed": true, "closedAt": "2020-11-25T09:45:02Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbakpYgFqTUyODAwNDEzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf7AbKgFqTUzODMwNzMzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDA0MTM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#pullrequestreview-528004135", "createdAt": "2020-11-11T09:30:45Z", "commit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozMDo0NVrOHxFPXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozMDo0NVrOHxFPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw==", "bodyText": "These changes are the key to the proposal. My theory is span.makeCurrent is illegal code - the only reason it works here is because the agent is present, but if the agent was not present, resumed coroutines could see completely unrelated contexts, which is a disaster. The idea is that our agent is here to enable tracing, not to allow illegal code. How to \"codify\" that it's illegal is a tricky point though but something we will want to think about. Current idea is that https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/testing/src/main/java/io/opentelemetry/sdk/testing/context/StrictContextStorage.java#L99 can also check the stacktrace to see if it is being called from a coroutine, and not from the context element. Dunno if it'll work but if it does, I think we end up in a nice place :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521228127", "createdAt": "2020-11-11T09:30:45Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kotlin-coroutines/javaagent/src/test/kotlin/KotlinCoroutineTests.kt", "diffHunk": "@@ -145,35 +147,35 @@ class KotlinCoroutineTests(private val dispatcher: CoroutineDispatcher) {\n   suspend fun a(iter: Long) {\n     var span = tracer.spanBuilder(\"a\").startSpan()\n     span.setAttribute(\"iter\", iter)\n-    var scope = span.makeCurrent()\n-    delay(10)\n-    a2(iter)\n-    scope.close()\n+    withContext(span.asContextElement()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Njg1MjU3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#pullrequestreview-528685257", "createdAt": "2020-11-12T02:13:32Z", "commit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjoxMzozM1rOHxmiOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzowMDo1MVrOHxnXSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3MzYyNg==", "bodyText": "is @NotNull useful here (and below)?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521773626", "createdAt": "2020-11-12T02:13:33Z", "author": {"login": "trask"}, "path": "instrumentation/kotlin-coroutines/library/src/main/java/io/opentelemetry/instrumentation/kotlincoroutines/ContextElement.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package io.opentelemetry.instrumentation.kotlincoroutines;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import kotlin.coroutines.CoroutineContext;\n+import kotlin.jvm.functions.Function2;\n+import kotlinx.coroutines.ThreadContextElement;\n+\n+public class ContextElement implements ThreadContextElement<Scope> {\n+\n+  static final CoroutineContext.Key<ContextElement> KEY =\n+      new CoroutineContext.Key<ContextElement>() {};\n+\n+  private final Context context;\n+\n+  public ContextElement(Context context) {\n+    this.context = context;\n+  }\n+\n+  Context getContext() {\n+    return context;\n+  }\n+\n+  @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc3NjY1Ng==", "bodyText": "just because this is weird/surprising\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return ContextElement(Java8BytecodeBridge.currentContext().with(this))\n          \n          \n            \n              // Java8BytecodeBridge is needed in order to support Kotlin which generally targets Java 6 bytecode\n          \n          \n            \n              return ContextElement(Java8BytecodeBridge.currentContext().with(this))", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521776656", "createdAt": "2020-11-12T02:24:13Z", "author": {"login": "trask"}, "path": "instrumentation/kotlin-coroutines/library/src/main/kotlin/io/opentelemetry/instrumentation/kotlincoroutines/ContextExtensions.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.kotlincoroutines\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge\n+import kotlin.coroutines.CoroutineContext\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Context] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Context.asContextElement(): CoroutineContext {\n+  return ContextElement(this)\n+}\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Span] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Span.asContextElement(): CoroutineContext {\n+  return ContextElement(Java8BytecodeBridge.currentContext().with(this))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc4NzIxMQ==", "bodyText": "I can see the confusion of this particular test, since it's a javaagent test, but also uses the library instrumentation directly.\ndo you think we need the nested spans to validate launchConcurrentSuspendFunctions? if not, we could remove a2 and b2 and not create any nested scopes at all, and not need to use the library instrumentation in the test.\nif you think the nested scopes is a good test showing interop, maybe we can move it out into a separate test class ...InteropTest.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521787211", "createdAt": "2020-11-12T03:00:51Z", "author": {"login": "trask"}, "path": "instrumentation/kotlin-coroutines/javaagent/src/test/kotlin/KotlinCoroutineTests.kt", "diffHunk": "@@ -145,35 +147,35 @@ class KotlinCoroutineTests(private val dispatcher: CoroutineDispatcher) {\n   suspend fun a(iter: Long) {\n     var span = tracer.spanBuilder(\"a\").startSpan()\n     span.setAttribute(\"iter\", iter)\n-    var scope = span.makeCurrent()\n-    delay(10)\n-    a2(iter)\n-    scope.close()\n+    withContext(span.asContextElement()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyODEyNw=="}, "originalCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NzI1MTk0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#pullrequestreview-528725194", "createdAt": "2020-11-12T03:28:22Z", "commit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyODoyMlrOHxoJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzoyODoyMlrOHxoJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc5OTk5Nw==", "bodyText": "By the way, I'm wondering whether these should be in the SDK instead of instrumentation. Mainly since I was imagining adding to the javadoc for makeCurrent to not use it in Kotlin coroutines and use this instead. But that doesn't make as much sense when crossing repos.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#discussion_r521799997", "createdAt": "2020-11-12T03:28:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kotlin-coroutines/library/src/main/kotlin/io/opentelemetry/instrumentation/kotlincoroutines/ContextExtensions.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.kotlincoroutines\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.context.Context\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge\n+import kotlin.coroutines.CoroutineContext\n+\n+/**\n+ * Returns a [CoroutineContext] which will make this [Context] current when resuming a coroutine\n+ * and restores the previous [Context] on suspension.\n+ */\n+fun Context.asContextElement(): CoroutineContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjE5MzYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#pullrequestreview-529219361", "createdAt": "2020-11-12T15:44:14Z", "commit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "committedDate": "2020-11-25T08:02:00Z", "message": "Use SDK helper"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fb6c6bd3dfc99cdeff03f3e9b785528537eca7a5", "committedDate": "2020-11-11T09:26:02Z", "message": "Long comment not needed anymore since no hackiness."}, "afterCommit": {"oid": "9a8011b9d46c339d0a626e58b6c0d99519240148", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9a8011b9d46c339d0a626e58b6c0d99519240148", "committedDate": "2020-11-25T08:02:00Z", "message": "Use SDK helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e40ed6178f649e60533fad3532909f2bd314f5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b1e40ed6178f649e60533fad3532909f2bd314f5", "committedDate": "2020-11-25T08:03:25Z", "message": "Revert unintended."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzA3MzM0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1618#pullrequestreview-538307334", "createdAt": "2020-11-25T09:33:46Z", "commit": {"oid": "b1e40ed6178f649e60533fad3532909f2bd314f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}