{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMTAxNTQw", "number": 1525, "title": "Migrates to using a context when span is started", "bodyText": "@marcingrzejszczak asked me to take over this change while he sorts out CLA stuff.", "createdAt": "2020-10-29T08:23:11Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1525", "merged": true, "mergeCommit": {"oid": "dfda406fee4f2126f556340a1b03a28e8c94cbb8"}, "closed": true, "closedAt": "2020-10-29T11:50:55Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXNqzsgH2gAyNTEyMTAxNTQwOjQxMmRiMTI4NGNiYWFkZTczZmFhN2ExZWZlZmZmZWQwNmZkNDA1NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXQyKfAFqTUxOTU4NDMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "412db1284cbaade73faa7a1efefffed06fd40554", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/412db1284cbaade73faa7a1efefffed06fd40554", "committedDate": "2020-10-29T08:13:01Z", "message": "Return Context when starting span to preserve baggage.\n\nCo-authored-by: Marcin Grzejszczak <marcin.grzejszczak@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04f656e974bc83b9a0213e41b8c0fdfebb2e976", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c04f656e974bc83b9a0213e41b8c0fdfebb2e976", "committedDate": "2020-10-29T08:22:06Z", "message": "Use bridge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NTg0MzM2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1525#pullrequestreview-519584336", "createdAt": "2020-10-29T11:50:42Z", "commit": {"oid": "c04f656e974bc83b9a0213e41b8c0fdfebb2e976"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1MDo0MlrOHqYOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1MDo0MlrOHqYOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5OTEyMA==", "bodyText": "I think we can optimise this pattern, without taking span from context and then putting it back in startScope. But as @marcingrzejszczak  really wants it now, let's do it in follow up", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1525#discussion_r514199120", "createdAt": "2020-10-29T11:50:42Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-webmvc-3.1/library/src/main/java/io/opentelemetry/instrumentation/spring/webmvc/WebMvcTracingFilter.java", "diffHunk": "@@ -30,8 +31,8 @@ public WebMvcTracingFilter(Tracer tracer) {\n   public void doFilterInternal(\n       HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n       throws ServletException, IOException {\n-    Span serverSpan = tracer.startSpan(request, request, FILTER_CLASS + \".\" + FILTER_METHOD);\n-\n+    Context ctx = tracer.startSpan(request, request, FILTER_CLASS + \".\" + FILTER_METHOD);\n+    Span serverSpan = Span.fromContext(ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c04f656e974bc83b9a0213e41b8c0fdfebb2e976"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2428, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}