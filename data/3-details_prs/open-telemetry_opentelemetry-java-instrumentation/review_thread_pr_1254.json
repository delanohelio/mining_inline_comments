{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDA4NDQ4", "number": 1254, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMzo0NDoxMlrOEnS8BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoyMzowNlrOEoZ4yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQwMTk2OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMzo0NDoxMlrOHXz8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODowODozN1rOHX5azw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDQzNg==", "bodyText": "Does it make sense to use AutoValue \"defaults\"? https://github.com/google/auto/blob/master/value/userguide/builders-howto.md#default\nand then DEFAULT = Config.newBuilder().build()\nand then we can get rid of those public constants, and only call the setters if there's an associated (non-null, non-empty) property", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494730436", "createdAt": "2020-09-25T03:44:12Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0ODQ0Ng==", "bodyText": "I guess no need to do this if we are going to remove most/all of these attributes from Config and primarily just store the properties map in Config", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494748446", "createdAt": "2020-09-25T05:02:20Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDQzNg=="}, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0ODkwNQ==", "bodyText": "the other comments (besides this one) still make sense for this PR i think, even if we are going to go forward with above idea in the future", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494748905", "createdAt": "2020-09-25T05:04:13Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDQzNg=="}, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgyMDA0Nw==", "bodyText": "Hm, for now I've used the defaults pattern suggested by AutoValue.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494820047", "createdAt": "2020-09-25T08:08:37Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDQzNg=="}, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQyOTU4OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDowMTo1MFrOHX0MZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDowMTo1MFrOHX0MZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczNDQzOQ==", "bodyText": "I think this is only needed for integrationNames\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static String normalizePropertyName(String propertyName) {\n          \n          \n            \n                return PROPERTY_NAME_REPLACEMENTS.matcher(propertyName.toLowerCase()).replaceAll(\".\");\n          \n          \n            \n              private static String normalizeIntegrationName(String integrationName) {\n          \n          \n            \n                return INTEGRATION_NAME_REPLACEMENTS.matcher(integrationName.toLowerCase()).replaceAll(\".\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494734439", "createdAt": "2020-09-25T04:01:50Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();\n+\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {\n+    if (INSTANCE != DEFAULT) {\n+      log.warn(\"Config#INSTANCE was already set earlier\");\n+      return;\n+    }\n+    INSTANCE = requireNonNull(config);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(Properties properties, Config parent) {\n-    exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n-    exporter = properties.getProperty(EXPORTER, parent.exporter);\n-\n-    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n-\n-    traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n-    integrationsEnabled =\n-        getPropertyBooleanValue(properties, INTEGRATIONS_ENABLED, parent.integrationsEnabled);\n-\n-    excludedClasses =\n-        getPropertyListValue(properties, TRACE_CLASSES_EXCLUDE, parent.excludedClasses);\n-\n-    scopeDepthLimit =\n-        getPropertyIntegerValue(properties, SCOPE_DEPTH_LIMIT, parent.scopeDepthLimit);\n-\n-    runtimeContextFieldInjection =\n-        getPropertyBooleanValue(\n-            properties, RUNTIME_CONTEXT_FIELD_INJECTION, parent.runtimeContextFieldInjection);\n-\n-    traceAnnotations = properties.getProperty(TRACE_ANNOTATIONS, parent.traceAnnotations);\n-\n-    traceMethods = properties.getProperty(TRACE_METHODS, parent.traceMethods);\n-    traceAnnotatedMethodsExclude =\n-        properties.getProperty(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, parent.traceAnnotatedMethodsExclude);\n-\n-    traceExecutorsAll =\n-        getPropertyBooleanValue(properties, TRACE_EXECUTORS_ALL, parent.traceExecutorsAll);\n-    traceExecutors = getPropertyListValue(properties, TRACE_EXECUTORS, parent.traceExecutors);\n-\n-    sqlNormalizerEnabled =\n-        getPropertyBooleanValue(properties, SQL_NORMALIZER_ENABLED, parent.sqlNormalizerEnabled);\n-\n-    kafkaClientPropagationEnabled =\n-        getPropertyBooleanValue(\n-            properties, KAFKA_CLIENT_PROPAGATION_ENABLED, parent.kafkaClientPropagationEnabled);\n+  public static Config get() {\n+    return INSTANCE;\n+  }\n \n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, parent.hystrixTagsEnabled);\n+  public abstract Map<String, String> getAllProperties();\n \n-    endpointPeerServiceMapping =\n-        getPropertyMapValue(\n-            properties, ENDPOINT_PEER_SERVICE_MAPPING, parent.endpointPeerServiceMapping);\n+  @Nullable\n+  public String getProperty(String propertyName) {\n+    return getAllProperties().get(normalizePropertyName(propertyName));\n+  }\n \n-    log.debug(\"New instance: {}\", this);\n+  // some integrations have '-' or '_' character in their names -- this does not work well with\n+  // environment variables (where we replace every non-alphanumeric character with '.'), so we're\n+  // replacing those with a dot\n+  public static String normalizePropertyName(String propertyName) {\n+    return PROPERTY_NAME_REPLACEMENTS.matcher(propertyName.toLowerCase()).replaceAll(\".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQzMDQ0OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDowMjoyN1rOHX0M1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDowNjowN1rOHZT0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczNDU1MA==", "bodyText": "i think it's only integration names that need to be normalized\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getAllProperties().get(normalizePropertyName(propertyName));\n          \n          \n            \n                return getAllProperties().get(propertyName);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494734550", "createdAt": "2020-09-25T04:02:27Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();\n+\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {\n+    if (INSTANCE != DEFAULT) {\n+      log.warn(\"Config#INSTANCE was already set earlier\");\n+      return;\n+    }\n+    INSTANCE = requireNonNull(config);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(Properties properties, Config parent) {\n-    exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n-    exporter = properties.getProperty(EXPORTER, parent.exporter);\n-\n-    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n-\n-    traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n-    integrationsEnabled =\n-        getPropertyBooleanValue(properties, INTEGRATIONS_ENABLED, parent.integrationsEnabled);\n-\n-    excludedClasses =\n-        getPropertyListValue(properties, TRACE_CLASSES_EXCLUDE, parent.excludedClasses);\n-\n-    scopeDepthLimit =\n-        getPropertyIntegerValue(properties, SCOPE_DEPTH_LIMIT, parent.scopeDepthLimit);\n-\n-    runtimeContextFieldInjection =\n-        getPropertyBooleanValue(\n-            properties, RUNTIME_CONTEXT_FIELD_INJECTION, parent.runtimeContextFieldInjection);\n-\n-    traceAnnotations = properties.getProperty(TRACE_ANNOTATIONS, parent.traceAnnotations);\n-\n-    traceMethods = properties.getProperty(TRACE_METHODS, parent.traceMethods);\n-    traceAnnotatedMethodsExclude =\n-        properties.getProperty(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, parent.traceAnnotatedMethodsExclude);\n-\n-    traceExecutorsAll =\n-        getPropertyBooleanValue(properties, TRACE_EXECUTORS_ALL, parent.traceExecutorsAll);\n-    traceExecutors = getPropertyListValue(properties, TRACE_EXECUTORS, parent.traceExecutors);\n-\n-    sqlNormalizerEnabled =\n-        getPropertyBooleanValue(properties, SQL_NORMALIZER_ENABLED, parent.sqlNormalizerEnabled);\n-\n-    kafkaClientPropagationEnabled =\n-        getPropertyBooleanValue(\n-            properties, KAFKA_CLIENT_PROPAGATION_ENABLED, parent.kafkaClientPropagationEnabled);\n+  public static Config get() {\n+    return INSTANCE;\n+  }\n \n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, parent.hystrixTagsEnabled);\n+  public abstract Map<String, String> getAllProperties();\n \n-    endpointPeerServiceMapping =\n-        getPropertyMapValue(\n-            properties, ENDPOINT_PEER_SERVICE_MAPPING, parent.endpointPeerServiceMapping);\n+  @Nullable\n+  public String getProperty(String propertyName) {\n+    return getAllProperties().get(normalizePropertyName(propertyName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgxMzMwNw==", "bodyText": "Yes, only integration names -- but we have to normalize them both when building the config (since someone can use dash in e.g. system property -Dotel.integration.some-library.enabled=false) and when isIntegrationEnabled() is called.\nSo I opted for adding the normalisation everywhere to be 100% consistent.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494813307", "createdAt": "2020-09-25T07:56:00Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();\n+\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {\n+    if (INSTANCE != DEFAULT) {\n+      log.warn(\"Config#INSTANCE was already set earlier\");\n+      return;\n+    }\n+    INSTANCE = requireNonNull(config);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(Properties properties, Config parent) {\n-    exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n-    exporter = properties.getProperty(EXPORTER, parent.exporter);\n-\n-    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n-\n-    traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n-    integrationsEnabled =\n-        getPropertyBooleanValue(properties, INTEGRATIONS_ENABLED, parent.integrationsEnabled);\n-\n-    excludedClasses =\n-        getPropertyListValue(properties, TRACE_CLASSES_EXCLUDE, parent.excludedClasses);\n-\n-    scopeDepthLimit =\n-        getPropertyIntegerValue(properties, SCOPE_DEPTH_LIMIT, parent.scopeDepthLimit);\n-\n-    runtimeContextFieldInjection =\n-        getPropertyBooleanValue(\n-            properties, RUNTIME_CONTEXT_FIELD_INJECTION, parent.runtimeContextFieldInjection);\n-\n-    traceAnnotations = properties.getProperty(TRACE_ANNOTATIONS, parent.traceAnnotations);\n-\n-    traceMethods = properties.getProperty(TRACE_METHODS, parent.traceMethods);\n-    traceAnnotatedMethodsExclude =\n-        properties.getProperty(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, parent.traceAnnotatedMethodsExclude);\n-\n-    traceExecutorsAll =\n-        getPropertyBooleanValue(properties, TRACE_EXECUTORS_ALL, parent.traceExecutorsAll);\n-    traceExecutors = getPropertyListValue(properties, TRACE_EXECUTORS, parent.traceExecutors);\n-\n-    sqlNormalizerEnabled =\n-        getPropertyBooleanValue(properties, SQL_NORMALIZER_ENABLED, parent.sqlNormalizerEnabled);\n-\n-    kafkaClientPropagationEnabled =\n-        getPropertyBooleanValue(\n-            properties, KAFKA_CLIENT_PROPAGATION_ENABLED, parent.kafkaClientPropagationEnabled);\n+  public static Config get() {\n+    return INSTANCE;\n+  }\n \n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, parent.hystrixTagsEnabled);\n+  public abstract Map<String, String> getAllProperties();\n \n-    endpointPeerServiceMapping =\n-        getPropertyMapValue(\n-            properties, ENDPOINT_PEER_SERVICE_MAPPING, parent.endpointPeerServiceMapping);\n+  @Nullable\n+  public String getProperty(String propertyName) {\n+    return getAllProperties().get(normalizePropertyName(propertyName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczNDU1MA=="}, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMwMTE4OA==", "bodyText": "makes sense \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r496301188", "createdAt": "2020-09-29T00:06:07Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +43,82 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n-\n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  private static final Config DEFAULT =\n+      Config.newBuilder()\n+          .setAllProperties(Collections.emptyMap())\n+          .setExporterJar(Optional.empty())\n+          .setExporter(DEFAULT_EXPORTER)\n+          .setPropagators(Collections.emptyList())\n+          .setTraceEnabled(DEFAULT_TRACE_ENABLED)\n+          .setIntegrationsEnabled(DEFAULT_INTEGRATIONS_ENABLED)\n+          .setExcludedClasses(Collections.emptyList())\n+          .setRuntimeContextFieldInjection(DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION)\n+          .setTraceAnnotations(Optional.empty())\n+          .setTraceMethods(\"\")\n+          .setTraceAnnotatedMethodsExclude(\"\")\n+          .setTraceExecutorsAll(DEFAULT_TRACE_EXECUTORS_ALL)\n+          .setTraceExecutors(Collections.emptyList())\n+          .setSqlNormalizerEnabled(DEFAULT_SQL_NORMALIZER_ENABLED)\n+          .setKafkaClientPropagationEnabled(DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED)\n+          .setHystrixTagsEnabled(DEFAULT_HYSTRIX_TAGS_ENABLED)\n+          .setEndpointPeerServiceMapping(Collections.emptyMap())\n+          .build();\n+\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {\n+    if (INSTANCE != DEFAULT) {\n+      log.warn(\"Config#INSTANCE was already set earlier\");\n+      return;\n+    }\n+    INSTANCE = requireNonNull(config);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(Properties properties, Config parent) {\n-    exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n-    exporter = properties.getProperty(EXPORTER, parent.exporter);\n-\n-    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n-\n-    traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n-    integrationsEnabled =\n-        getPropertyBooleanValue(properties, INTEGRATIONS_ENABLED, parent.integrationsEnabled);\n-\n-    excludedClasses =\n-        getPropertyListValue(properties, TRACE_CLASSES_EXCLUDE, parent.excludedClasses);\n-\n-    scopeDepthLimit =\n-        getPropertyIntegerValue(properties, SCOPE_DEPTH_LIMIT, parent.scopeDepthLimit);\n-\n-    runtimeContextFieldInjection =\n-        getPropertyBooleanValue(\n-            properties, RUNTIME_CONTEXT_FIELD_INJECTION, parent.runtimeContextFieldInjection);\n-\n-    traceAnnotations = properties.getProperty(TRACE_ANNOTATIONS, parent.traceAnnotations);\n-\n-    traceMethods = properties.getProperty(TRACE_METHODS, parent.traceMethods);\n-    traceAnnotatedMethodsExclude =\n-        properties.getProperty(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, parent.traceAnnotatedMethodsExclude);\n-\n-    traceExecutorsAll =\n-        getPropertyBooleanValue(properties, TRACE_EXECUTORS_ALL, parent.traceExecutorsAll);\n-    traceExecutors = getPropertyListValue(properties, TRACE_EXECUTORS, parent.traceExecutors);\n-\n-    sqlNormalizerEnabled =\n-        getPropertyBooleanValue(properties, SQL_NORMALIZER_ENABLED, parent.sqlNormalizerEnabled);\n-\n-    kafkaClientPropagationEnabled =\n-        getPropertyBooleanValue(\n-            properties, KAFKA_CLIENT_PROPAGATION_ENABLED, parent.kafkaClientPropagationEnabled);\n+  public static Config get() {\n+    return INSTANCE;\n+  }\n \n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, parent.hystrixTagsEnabled);\n+  public abstract Map<String, String> getAllProperties();\n \n-    endpointPeerServiceMapping =\n-        getPropertyMapValue(\n-            properties, ENDPOINT_PEER_SERVICE_MAPPING, parent.endpointPeerServiceMapping);\n+  @Nullable\n+  public String getProperty(String propertyName) {\n+    return getAllProperties().get(normalizePropertyName(propertyName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczNDU1MA=="}, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQzMzA1OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDowNDoxMVrOHX0OSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDowNDoxMVrOHX0OSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczNDkyMA==", "bodyText": "i think only integrationNames need this normalization, and can be done special for them in isIntegrationEnabled\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return this.fromConfigMap(normalizedProperties(properties), NamingConvention.DOT);\n          \n          \n            \n                return this.fromConfigMap(properties, NamingConvention.DOT);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494734920", "createdAt": "2020-09-25T04:04:11Z", "author": {"login": "trask"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.tooling.config;\n+\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_EXPORTER;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_HYSTRIX_TAGS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_INTEGRATIONS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_SQL_NORMALIZER_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_EXECUTORS_ALL;\n+import static io.opentelemetry.instrumentation.api.config.Config.normalizePropertyName;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Function;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ConfigBuilder\n+    extends io.opentelemetry.sdk.common.export.ConfigBuilder<ConfigBuilder> {\n+  private static final Logger log = LoggerFactory.getLogger(ConfigBuilder.class);\n+\n+  public static final String EXPORTER_JAR = \"otel.exporter.jar\";\n+  public static final String EXPORTER = \"otel.exporter\";\n+  public static final String PROPAGATORS = \"otel.propagators\";\n+  public static final String TRACE_ENABLED = \"otel.trace.enabled\";\n+  public static final String INTEGRATIONS_ENABLED = \"otel.integrations.enabled\";\n+  public static final String TRACE_CLASSES_EXCLUDE = \"otel.trace.classes.exclude\";\n+  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n+      \"otel.trace.runtime.context.field.injection\";\n+  public static final String TRACE_ANNOTATIONS = \"otel.trace.annotations\";\n+  public static final String TRACE_METHODS = \"otel.trace.methods\";\n+  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE =\n+      \"otel.trace.annotated.methods.exclude\";\n+  public static final String TRACE_EXECUTORS_ALL = \"otel.trace.executors.all\";\n+  public static final String TRACE_EXECUTORS = \"otel.trace.executors\";\n+  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n+  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED =\n+      \"otel.kafka.client.propagation.enabled\";\n+  public static final String HYSTRIX_TAGS_ENABLED = \"otel.hystrix.tags.enabled\";\n+  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"otel.endpoint.peer.service.mapping\";\n+\n+  private final Map<String, String> allProperties = new HashMap<>();\n+\n+  @Override\n+  public ConfigBuilder readProperties(Properties properties) {\n+    return this.fromConfigMap(normalizedProperties(properties), NamingConvention.DOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjQ3NzE1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDozMTo1OVrOHX0nQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDozMTo1OVrOHX0nQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MTMxNQ==", "bodyText": "in general we have been using @Nullable over Optional", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r494741315", "createdAt": "2020-09-25T04:31:59Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -246,351 +128,113 @@ public boolean isIntegrationEnabled(SortedSet<String> integrationNames, boolean\n     return anyEnabled;\n   }\n \n-  /**\n-   * Helper method that takes the name, adds a \"otel.\" prefix then checks for System Properties of\n-   * that name. If none found, the name is converted to an Environment Variable and used to check\n-   * the env. If none of the above returns a value, then an optional properties file if checked. If\n-   * setting is not configured in either location, <code>defaultValue</code> is returned.\n-   *\n-   * @param name\n-   * @param defaultValue\n-   * @return\n-   * @deprecated This method should only be used internally. Use the explicit getter instead.\n-   */\n-  public static String getSettingFromEnvironment(String name, String defaultValue) {\n-    String value;\n-    String systemPropertyName = propertyNameToSystemPropertyName(name);\n-\n-    // System properties and properties provided from command line have the highest precedence\n-    value = System.getProperties().getProperty(systemPropertyName);\n-    if (null != value) {\n-      return value;\n-    }\n-\n-    // If value not provided from system properties, looking at env variables\n-    value = System.getenv(propertyNameToEnvironmentVariableName(name));\n-    if (null != value) {\n-      return value;\n-    }\n-\n-    // If value is not defined yet, we look at properties optionally defined in a properties file\n-    value = propertiesFromConfigFile.getProperty(systemPropertyName);\n-    if (null != value) {\n-      return value;\n-    }\n-\n-    return defaultValue;\n+  public Properties asJavaProperties() {\n+    Properties properties = new Properties();\n+    properties.putAll(getAllProperties());\n+    return properties;\n   }\n \n-  /**\n-   * Calls {@link #getSettingFromEnvironment(String, String)} and converts the result to a list by\n-   * splitting on `,`.\n-   */\n-  private static List<String> getListSettingFromEnvironment(String name, String defaultValue) {\n-    return parseList(getSettingFromEnvironment(name, defaultValue));\n-  }\n+  public abstract Optional<String> getExporterJar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b010c1623bf1998261365c8d7e97a84cbdbb7012"}, "originalPosition": 344}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ4MzA3OnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxNzoyNlrOHYzGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxNzoyNlrOHYzGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NDk5Mw==", "bodyText": "Is it possible to only call asJavaProperties once?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495764993", "createdAt": "2020-09-28T08:17:26Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/TracerInstaller.java", "diffHunk": "@@ -201,7 +196,7 @@ private static void configure() {\n     /* Update trace config from env vars or sys props */\n     TraceConfig activeTraceConfig = tracerSdkProvider.getActiveTraceConfig();\n     tracerSdkProvider.updateActiveTraceConfig(\n-        activeTraceConfig.toBuilder().readEnvironmentVariables().readSystemProperties().build());\n+        activeTraceConfig.toBuilder().readProperties(Config.get().asJavaProperties()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzQ4ODMyOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoxOTowMlrOHYzJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNTowMVrOHZAMyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTgyMQ==", "bodyText": "Never been a fan of Properties class \ud83d\ude05 Just wondering, is it a bit simpler to iterate over keySet?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495765821", "createdAt": "2020-09-28T08:19:02Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.tooling.config;\n+\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_EXPORTER;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_HYSTRIX_TAGS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_INTEGRATIONS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_SQL_NORMALIZER_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_EXECUTORS_ALL;\n+import static io.opentelemetry.instrumentation.api.config.Config.normalizePropertyName;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Function;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ConfigBuilder\n+    extends io.opentelemetry.sdk.common.export.ConfigBuilder<ConfigBuilder> {\n+  private static final Logger log = LoggerFactory.getLogger(ConfigBuilder.class);\n+\n+  public static final String EXPORTER_JAR = \"otel.exporter.jar\";\n+  public static final String EXPORTER = \"otel.exporter\";\n+  public static final String PROPAGATORS = \"otel.propagators\";\n+  public static final String TRACE_ENABLED = \"otel.trace.enabled\";\n+  public static final String INTEGRATIONS_ENABLED = \"otel.integrations.enabled\";\n+  public static final String TRACE_CLASSES_EXCLUDE = \"otel.trace.classes.exclude\";\n+  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n+      \"otel.trace.runtime.context.field.injection\";\n+  public static final String TRACE_ANNOTATIONS = \"otel.trace.annotations\";\n+  public static final String TRACE_METHODS = \"otel.trace.methods\";\n+  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE =\n+      \"otel.trace.annotated.methods.exclude\";\n+  public static final String TRACE_EXECUTORS_ALL = \"otel.trace.executors.all\";\n+  public static final String TRACE_EXECUTORS = \"otel.trace.executors\";\n+  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n+  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED =\n+      \"otel.kafka.client.propagation.enabled\";\n+  public static final String HYSTRIX_TAGS_ENABLED = \"otel.hystrix.tags.enabled\";\n+  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"otel.endpoint.peer.service.mapping\";\n+\n+  private final Map<String, String> allProperties = new HashMap<>();\n+\n+  @Override\n+  public ConfigBuilder readProperties(Properties properties) {\n+    return this.fromConfigMap(normalizedProperties(properties), NamingConvention.DOT);\n+  }\n+\n+  private static Map<String, String> normalizedProperties(Properties properties) {\n+    Map<String, String> configMap = new HashMap<>(properties.size());\n+    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3OTcyMw==", "bodyText": "It is, I kinda forgot that Properties are a Map \ud83d\ude05\nDone, though it's not ideal -- because unfortunately both key and value in Properties are Objects.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495979723", "createdAt": "2020-09-28T14:25:01Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/config/ConfigBuilder.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.javaagent.tooling.config;\n+\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_EXPORTER;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_HYSTRIX_TAGS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_INTEGRATIONS_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_SQL_NORMALIZER_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_ENABLED;\n+import static io.opentelemetry.instrumentation.api.config.Config.DEFAULT_TRACE_EXECUTORS_ALL;\n+import static io.opentelemetry.instrumentation.api.config.Config.normalizePropertyName;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.function.Function;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class ConfigBuilder\n+    extends io.opentelemetry.sdk.common.export.ConfigBuilder<ConfigBuilder> {\n+  private static final Logger log = LoggerFactory.getLogger(ConfigBuilder.class);\n+\n+  public static final String EXPORTER_JAR = \"otel.exporter.jar\";\n+  public static final String EXPORTER = \"otel.exporter\";\n+  public static final String PROPAGATORS = \"otel.propagators\";\n+  public static final String TRACE_ENABLED = \"otel.trace.enabled\";\n+  public static final String INTEGRATIONS_ENABLED = \"otel.integrations.enabled\";\n+  public static final String TRACE_CLASSES_EXCLUDE = \"otel.trace.classes.exclude\";\n+  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n+      \"otel.trace.runtime.context.field.injection\";\n+  public static final String TRACE_ANNOTATIONS = \"otel.trace.annotations\";\n+  public static final String TRACE_METHODS = \"otel.trace.methods\";\n+  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE =\n+      \"otel.trace.annotated.methods.exclude\";\n+  public static final String TRACE_EXECUTORS_ALL = \"otel.trace.executors.all\";\n+  public static final String TRACE_EXECUTORS = \"otel.trace.executors\";\n+  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n+  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED =\n+      \"otel.kafka.client.propagation.enabled\";\n+  public static final String HYSTRIX_TAGS_ENABLED = \"otel.hystrix.tags.enabled\";\n+  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"otel.endpoint.peer.service.mapping\";\n+\n+  private final Map<String, String> allProperties = new HashMap<>();\n+\n+  @Override\n+  public ConfigBuilder readProperties(Properties properties) {\n+    return this.fromConfigMap(normalizedProperties(properties), NamingConvention.DOT);\n+  }\n+\n+  private static Map<String, String> normalizedProperties(Properties properties) {\n+    Map<String, String> configMap = new HashMap<>(properties.size());\n+    for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2NTgyMQ=="}, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzUwOTUwOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODoyNDo1MVrOHYzWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyNTo1MFrOHZAPQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTA5MQ==", "bodyText": "Config becoming volatile is a surprisingly big change. It's going to make unit tests much easier where we currently use bytecode manipulation to turn Config from final to non-final so I'm generally happy about it though :)\nWe should confirm that we only call Config.get on cold paths, which I think should generally be the case as it's basically only  to initialize instrumentation. In Java, the performance of Config.get().isFooEnabled() is actually significantly different when Java can know a boolean is a constant and C1 compiler can just remove the branches with no de-opt mechanism at all. So when .get is volatile, we'd expect a private static final boolean IS_FOO_ENABLED = Config.get().isFooEnabled() to replace such code inline on a hot path where we would like fast enabling/disabling of code paths", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495769091", "createdAt": "2020-09-28T08:24:51Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MDM1NA==", "bodyText": "That's a good point -- I'll look through usages of Config#get()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495980354", "createdAt": "2020-09-28T14:25:50Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc2OTA5MQ=="}, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU0MzA5OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMzo1N1rOHYzqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODozMzo1N1rOHYzqew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDMzMQ==", "bodyText": "Might add a recommendation to store config values as constants if they're referenced in performance-sensitive code.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r495774331", "createdAt": "2020-09-28T08:33:57Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {\n+    if (INSTANCE != DEFAULT) {\n+      log.warn(\"Config#INSTANCE was already set earlier\");\n+      return;\n+    }\n+    INSTANCE = requireNonNull(config);\n   }\n \n-  // Read order: Properties -> Parent\n-  private Config(Properties properties, Config parent) {\n-    exporterJar = properties.getProperty(EXPORTER_JAR, parent.exporterJar);\n-    exporter = properties.getProperty(EXPORTER, parent.exporter);\n-\n-    propagators = getPropertyListValue(properties, PROPAGATORS, parent.propagators);\n-\n-    traceEnabled = getPropertyBooleanValue(properties, TRACE_ENABLED, parent.traceEnabled);\n-    integrationsEnabled =\n-        getPropertyBooleanValue(properties, INTEGRATIONS_ENABLED, parent.integrationsEnabled);\n-\n-    excludedClasses =\n-        getPropertyListValue(properties, TRACE_CLASSES_EXCLUDE, parent.excludedClasses);\n-\n-    scopeDepthLimit =\n-        getPropertyIntegerValue(properties, SCOPE_DEPTH_LIMIT, parent.scopeDepthLimit);\n-\n-    runtimeContextFieldInjection =\n-        getPropertyBooleanValue(\n-            properties, RUNTIME_CONTEXT_FIELD_INJECTION, parent.runtimeContextFieldInjection);\n-\n-    traceAnnotations = properties.getProperty(TRACE_ANNOTATIONS, parent.traceAnnotations);\n-\n-    traceMethods = properties.getProperty(TRACE_METHODS, parent.traceMethods);\n-    traceAnnotatedMethodsExclude =\n-        properties.getProperty(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, parent.traceAnnotatedMethodsExclude);\n-\n-    traceExecutorsAll =\n-        getPropertyBooleanValue(properties, TRACE_EXECUTORS_ALL, parent.traceExecutorsAll);\n-    traceExecutors = getPropertyListValue(properties, TRACE_EXECUTORS, parent.traceExecutors);\n-\n-    sqlNormalizerEnabled =\n-        getPropertyBooleanValue(properties, SQL_NORMALIZER_ENABLED, parent.sqlNormalizerEnabled);\n-\n-    kafkaClientPropagationEnabled =\n-        getPropertyBooleanValue(\n-            properties, KAFKA_CLIENT_PROPAGATION_ENABLED, parent.kafkaClientPropagationEnabled);\n+  public static Config get() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322cf149407d6883bb05e04d8bf4960b459faaba"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODAyNjM0OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzoyMzowNlrOHZeTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1NjowM1rOHZ4EtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3Mjk0OQ==", "bodyText": "I usually prefer method names like doSomethingInternal vs internalDoSomething. What do others think?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r496472949", "createdAt": "2020-09-29T07:23:06Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c3ee8790b851f0e294c3c914c897fe37608f9b3"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NDUzNA==", "bodyText": "I have slight preference for internalDoSomething - gets the point across that it's internal sooner. Another option could be to make the access package-private and move the method to an InternalConfigAccess type of class.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r496484534", "createdAt": "2020-09-29T07:43:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3Mjk0OQ=="}, "originalCommit": {"oid": "9c3ee8790b851f0e294c3c914c897fe37608f9b3"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NTE1Nw==", "bodyText": "interesting, I've typically done doSomethingInternal, because it is often a delegate of doSomething, but I like the reasoning of putting internal in front to \"get the point across that it's internal sooner\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1254#discussion_r496895157", "createdAt": "2020-09-29T16:56:03Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -54,189 +42,63 @@\n   public static final boolean THREAD_PROPAGATION_DEBUGGER =\n       Boolean.getBoolean(\"otel.threadPropagationDebugger\");\n \n-  private static final MethodHandles.Lookup PUBLIC_LOOKUP = MethodHandles.publicLookup();\n-\n-  /** Config keys below */\n-  private static final String PREFIX = \"otel.\";\n-\n-  private static final Pattern ENV_REPLACEMENT = Pattern.compile(\"[^a-zA-Z0-9_]\");\n-\n-  public static final String EXPORTER_JAR = \"exporter.jar\";\n-  public static final String EXPORTER = \"exporter\";\n-  public static final String PROPAGATORS = \"propagators\";\n-  public static final String CONFIGURATION_FILE = \"trace.config\";\n-  public static final String TRACE_ENABLED = \"trace.enabled\";\n-  public static final String INTEGRATIONS_ENABLED = \"integrations.enabled\";\n-  public static final String TRACE_ANNOTATIONS = \"trace.annotations\";\n-  public static final String TRACE_EXECUTORS_ALL = \"trace.executors.all\";\n-  public static final String TRACE_EXECUTORS = \"trace.executors\";\n-  public static final String TRACE_METHODS = \"trace.methods\";\n-  public static final String TRACE_ANNOTATED_METHODS_EXCLUDE = \"trace.annotated.methods.exclude\";\n-  public static final String TRACE_CLASSES_EXCLUDE = \"trace.classes.exclude\";\n-  public static final String HTTP_SERVER_ERROR_STATUSES = \"http.server.error.statuses\";\n-  public static final String HTTP_CLIENT_ERROR_STATUSES = \"http.client.error.statuses\";\n-  public static final String SCOPE_DEPTH_LIMIT = \"trace.scope.depth.limit\";\n-  public static final String RUNTIME_CONTEXT_FIELD_INJECTION =\n-      \"trace.runtime.context.field.injection\";\n-\n-  public static final String KAFKA_CLIENT_PROPAGATION_ENABLED = \"kafka.client.propagation.enabled\";\n-\n-  public static final String HYSTRIX_TAGS_ENABLED = \"hystrix.tags.enabled\";\n-\n-  public static final String ENDPOINT_PEER_SERVICE_MAPPING = \"endpoint.peer.service.mapping\";\n-\n-  private static final boolean DEFAULT_TRACE_ENABLED = true;\n+  public static final String DEFAULT_EXPORTER = \"otlp\";\n+  public static final boolean DEFAULT_TRACE_ENABLED = true;\n   public static final boolean DEFAULT_INTEGRATIONS_ENABLED = true;\n-\n-  private static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n-\n-  private static final int DEFAULT_SCOPE_DEPTH_LIMIT = 100;\n-\n+  public static final boolean DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION = true;\n+  public static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n+  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n   public static final boolean DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED = true;\n-\n   public static final boolean DEFAULT_HYSTRIX_TAGS_ENABLED = false;\n \n-  private static final String DEFAULT_TRACE_ANNOTATIONS = null;\n-  private static final boolean DEFAULT_TRACE_EXECUTORS_ALL = false;\n-  private static final String DEFAULT_TRACE_EXECUTORS = \"\";\n-  private static final String DEFAULT_TRACE_METHODS = null;\n-  private static final String DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE = null;\n-\n-  public static final String SQL_NORMALIZER_ENABLED = \"sql.normalizer.enabled\";\n-  public static final boolean DEFAULT_SQL_NORMALIZER_ENABLED = true;\n-\n-  private final String exporterJar;\n-  private final String exporter;\n-  private final List<String> propagators;\n-  private final boolean traceEnabled;\n-  private final boolean integrationsEnabled;\n-  private final List<String> excludedClasses;\n-  private final Integer scopeDepthLimit;\n-  private final boolean runtimeContextFieldInjection;\n-\n-  private final String traceAnnotations;\n-\n-  private final String traceMethods;\n-  private final String traceAnnotatedMethodsExclude;\n-\n-  private final boolean traceExecutorsAll;\n-  private final List<String> traceExecutors;\n-\n-  private final boolean sqlNormalizerEnabled;\n-\n-  private final boolean kafkaClientPropagationEnabled;\n-\n-  private final boolean hystrixTagsEnabled;\n-\n-  private final Map<String, String> endpointPeerServiceMapping;\n-\n-  // Values from an optionally provided properties file\n-  private static Properties propertiesFromConfigFile;\n-\n-  // Read order: System Properties -> Env Variables, [-> properties file], [-> default value]\n-  // Visible for testing\n-  Config() {\n-    propertiesFromConfigFile = loadConfigurationFile();\n-\n-    propagators = getListSettingFromEnvironment(PROPAGATORS, null);\n-    exporterJar = getSettingFromEnvironment(EXPORTER_JAR, null);\n-    exporter = getSettingFromEnvironment(EXPORTER, \"otlp\");\n-    traceEnabled = getBooleanSettingFromEnvironment(TRACE_ENABLED, DEFAULT_TRACE_ENABLED);\n-    integrationsEnabled =\n-        getBooleanSettingFromEnvironment(INTEGRATIONS_ENABLED, DEFAULT_INTEGRATIONS_ENABLED);\n-\n-    excludedClasses = getListSettingFromEnvironment(TRACE_CLASSES_EXCLUDE, null);\n-\n-    scopeDepthLimit =\n-        getIntegerSettingFromEnvironment(SCOPE_DEPTH_LIMIT, DEFAULT_SCOPE_DEPTH_LIMIT);\n-\n-    runtimeContextFieldInjection =\n-        getBooleanSettingFromEnvironment(\n-            RUNTIME_CONTEXT_FIELD_INJECTION, DEFAULT_RUNTIME_CONTEXT_FIELD_INJECTION);\n-\n-    traceAnnotations = getSettingFromEnvironment(TRACE_ANNOTATIONS, DEFAULT_TRACE_ANNOTATIONS);\n-\n-    traceMethods = getSettingFromEnvironment(TRACE_METHODS, DEFAULT_TRACE_METHODS);\n-    traceAnnotatedMethodsExclude =\n-        getSettingFromEnvironment(\n-            TRACE_ANNOTATED_METHODS_EXCLUDE, DEFAULT_TRACE_ANNOTATED_METHODS_EXCLUDE);\n-\n-    traceExecutorsAll =\n-        getBooleanSettingFromEnvironment(TRACE_EXECUTORS_ALL, DEFAULT_TRACE_EXECUTORS_ALL);\n+  private static final Config DEFAULT = Config.newBuilder().build();\n \n-    traceExecutors = getListSettingFromEnvironment(TRACE_EXECUTORS, DEFAULT_TRACE_EXECUTORS);\n+  // INSTANCE can never be null - muzzle instantiates instrumenters when it generates\n+  // getInstrumentationMuzzle() and the Instrumenter.Default constructor uses Config\n+  private static volatile Config INSTANCE = DEFAULT;\n \n-    sqlNormalizerEnabled =\n-        getBooleanSettingFromEnvironment(SQL_NORMALIZER_ENABLED, DEFAULT_SQL_NORMALIZER_ENABLED);\n-\n-    kafkaClientPropagationEnabled =\n-        getBooleanSettingFromEnvironment(\n-            KAFKA_CLIENT_PROPAGATION_ENABLED, DEFAULT_KAFKA_CLIENT_PROPAGATION_ENABLED);\n-\n-    hystrixTagsEnabled =\n-        getBooleanSettingFromEnvironment(HYSTRIX_TAGS_ENABLED, DEFAULT_HYSTRIX_TAGS_ENABLED);\n-\n-    endpointPeerServiceMapping = getMapSettingFromEnvironment(ENDPOINT_PEER_SERVICE_MAPPING);\n-\n-    log.debug(\"New instance: {}\", this);\n+  /**\n+   * Sets the agent configuration singleton. This method is only supposed to be called once, from\n+   * the agent classloader just before the first instrumentation is loaded (and before {@link\n+   * Config#get()} is used for the first time).\n+   */\n+  public static void internalInitializeConfig(Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ3Mjk0OQ=="}, "originalCommit": {"oid": "9c3ee8790b851f0e294c3c914c897fe37608f9b3"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}