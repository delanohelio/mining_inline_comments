{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzU4NTUz", "number": 971, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDozODoyM1rOEYqpaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTozMzo1OVrOEZUWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzAwMDA5OnYy", "diffSide": "RIGHT", "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwNDozODoyM1rOHBHthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNDo0NzowMlrOHBPhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNjk2NA==", "bodyText": "this call was accidentally lost during conversion from decorator to tracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r470936964", "createdAt": "2020-08-15T04:38:23Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -66,6 +62,7 @@ public static void addFilter(\n               })\n           .doOnCancel(\n               () -> {\n+                TRACER.onCancel(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d966e15c11043422b1ce105249c59f32651496"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTAwOA==", "bodyText": "Is it possible to add a unit test for it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471051008", "createdAt": "2020-08-16T01:15:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -66,6 +62,7 @@ public static void addFilter(\n               })\n           .doOnCancel(\n               () -> {\n+                TRACER.onCancel(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNjk2NA=="}, "originalCommit": {"oid": "c1d966e15c11043422b1ce105249c59f32651496"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NDg1NQ==", "bodyText": "yeah, good idea, i created #1011 to track this", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471064855", "createdAt": "2020-08-16T04:47:02Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-webflux-5.0/src/main/java/io/opentelemetry/instrumentation/spring/webflux/client/WebClientTracingFilter.java", "diffHunk": "@@ -66,6 +62,7 @@ public static void addFilter(\n               })\n           .doOnCancel(\n               () -> {\n+                TRACER.onCancel(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzNjk2NA=="}, "originalCommit": {"oid": "c1d966e15c11043422b1ce105249c59f32651496"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzkzNDU1OnYy", "diffSide": "RIGHT", "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/instrumentation/auto/kubernetesclient/KubernetesClientTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMToyNDoxM1rOHBOtDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNDo1NTo0MVrOHBPjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTUzNQ==", "bodyText": "Kubernetes client is a wrapper in okhttp instrumentation I think. We probably want to refactor this to inherit from the okhttp tracer at some point, assuming it's technical feasible", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471051535", "createdAt": "2020-08-16T01:24:13Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/instrumentation/auto/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -55,6 +55,7 @@ protected String responseHeader(Response response, String name) {\n \n   @Override\n   protected Setter<Request> getSetter() {\n+    // TODO (trask) no propagation implemented yet?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ac54b748b68f773cb09bd5b790877abac1d913"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NTQ3NQ==", "bodyText": "Opened #1012", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471065475", "createdAt": "2020-08-16T04:55:41Z", "author": {"login": "trask"}, "path": "instrumentation/kubernetes-client-7.0/src/main/java/io/opentelemetry/instrumentation/auto/kubernetesclient/KubernetesClientTracer.java", "diffHunk": "@@ -55,6 +55,7 @@ protected String responseHeader(Response response, String name) {\n \n   @Override\n   protected Setter<Request> getSetter() {\n+    // TODO (trask) no propagation implemented yet?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTUzNQ=="}, "originalCommit": {"oid": "57ac54b748b68f773cb09bd5b790877abac1d913"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzkzNTY5OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/client/NettyHttpClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMToyNjowNVrOHBOtjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwMToyNjowNVrOHBOtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA1MTY2MA==", "bodyText": "Hmm I remember hoping to have removed this check but bringing it back but don't remember why. Will check it out to try to remember", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471051660", "createdAt": "2020-08-16T01:26:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/client/NettyHttpClientTracer.java", "diffHunk": "@@ -22,19 +22,34 @@\n import static org.jboss.netty.handler.codec.http.HttpHeaders.Names.HOST;\n \n import io.grpc.Context;\n-import io.opentelemetry.OpenTelemetry;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import io.opentelemetry.trace.Span;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import org.jboss.netty.handler.codec.http.HttpHeaders;\n import org.jboss.netty.handler.codec.http.HttpRequest;\n import org.jboss.netty.handler.codec.http.HttpResponse;\n \n-public class NettyHttpClientTracer extends HttpClientTracer<HttpRequest, HttpResponse> {\n+public class NettyHttpClientTracer\n+    extends HttpClientTracer<HttpRequest, HttpHeaders, HttpResponse> {\n   public static final NettyHttpClientTracer TRACER = new NettyHttpClientTracer();\n \n+  @Override\n+  public Scope startScope(Span span, HttpHeaders headers) {\n+    if (!headers.contains(\"amz-sdk-invocation-id\")) {\n+      return super.startScope(span, headers);\n+    } else {\n+      // TODO (trask) if we move injection up to aws-sdk layer, and start suppressing nested netty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ac54b748b68f773cb09bd5b790877abac1d913"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU0OTA0OnYy", "diffSide": "RIGHT", "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0MjowMVrOHBuL5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToyNDo0NVrOHCAF0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzMzNQ==", "bodyText": "Are you sure it wouldn't be better HttpClientTracer<Request, Request, Response>?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471567335", "createdAt": "2020-08-17T15:42:01Z", "author": {"login": "iNikem"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "diffHunk": "@@ -16,14 +16,16 @@\n \n package io.opentelemetry.instrumentation.auto.grizzly.client;\n \n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n import com.ning.http.client.Request;\n import com.ning.http.client.Response;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class GrizzlyClientTracer extends HttpClientTracer<Request, Response> {\n+public class GrizzlyClientTracer\n+    extends HttpClientTracer<Request, FluentCaseInsensitiveStringsMap, Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1ODExNg==", "bodyText": "FluentCaseInsensitiveStringsMap most closely represents the HEADERS type, but if you still prefer Request I don't mind and will change it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471658116", "createdAt": "2020-08-17T17:48:12Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "diffHunk": "@@ -16,14 +16,16 @@\n \n package io.opentelemetry.instrumentation.auto.grizzly.client;\n \n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n import com.ning.http.client.Request;\n import com.ning.http.client.Response;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class GrizzlyClientTracer extends HttpClientTracer<Request, Response> {\n+public class GrizzlyClientTracer\n+    extends HttpClientTracer<Request, FluentCaseInsensitiveStringsMap, Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzMzNQ=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzQzNw==", "bodyText": "Yeah, my comments probably actually mean \"are you sure that HEADERS is the best candidate for this new type parameter\"? I have review around half of the changed files and it seems to me that Request is actually enough for like 90%+ cases. Even if actually need a separate type parameter for those 10%, it does not make sense to force that HEADERS name to the letter and use such strange types.\nRename HEADER type to Carrier and use the simplest/most natural type?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471707437", "createdAt": "2020-08-17T18:47:34Z", "author": {"login": "iNikem"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "diffHunk": "@@ -16,14 +16,16 @@\n \n package io.opentelemetry.instrumentation.auto.grizzly.client;\n \n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n import com.ning.http.client.Request;\n import com.ning.http.client.Response;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class GrizzlyClientTracer extends HttpClientTracer<Request, Response> {\n+public class GrizzlyClientTracer\n+    extends HttpClientTracer<Request, FluentCaseInsensitiveStringsMap, Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzMzNQ=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODY3OA==", "bodyText": "oh yes I like renaming HEADERS type to CARRIER will do", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471708678", "createdAt": "2020-08-17T18:50:02Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "diffHunk": "@@ -16,14 +16,16 @@\n \n package io.opentelemetry.instrumentation.auto.grizzly.client;\n \n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n import com.ning.http.client.Request;\n import com.ning.http.client.Response;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class GrizzlyClientTracer extends HttpClientTracer<Request, Response> {\n+public class GrizzlyClientTracer\n+    extends HttpClientTracer<Request, FluentCaseInsensitiveStringsMap, Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzMzNQ=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2MDY5MA==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471860690", "createdAt": "2020-08-18T01:24:45Z", "author": {"login": "trask"}, "path": "instrumentation/grizzly-client-1.9/src/main/java/io/opentelemetry/instrumentation/auto/grizzly/client/GrizzlyClientTracer.java", "diffHunk": "@@ -16,14 +16,16 @@\n \n package io.opentelemetry.instrumentation.auto.grizzly.client;\n \n+import com.ning.http.client.FluentCaseInsensitiveStringsMap;\n import com.ning.http.client.Request;\n import com.ning.http.client.Response;\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import java.net.URISyntaxException;\n \n-public class GrizzlyClientTracer extends HttpClientTracer<Request, Response> {\n+public class GrizzlyClientTracer\n+    extends HttpClientTracer<Request, FluentCaseInsensitiveStringsMap, Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzMzNQ=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU1NTgyOnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v1_1/InjectAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0MzoyNlrOHBuP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToyNDo1M1rOHCAF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2ODM0Ng==", "bodyText": "I am not sure this change made things better. Why replaces ClientRequest with MultivaluedMap<String, Object> here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471568346", "createdAt": "2020-08-17T15:43:26Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v1_1/InjectAdapter.java", "diffHunk": "@@ -16,15 +16,15 @@\n \n package io.opentelemetry.instrumentation.auto.jaxrsclient.v1_1;\n \n-import com.sun.jersey.api.client.ClientRequest;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n+import javax.ws.rs.core.MultivaluedMap;\n \n-public final class InjectAdapter implements HttpTextFormat.Setter<ClientRequest> {\n+public final class InjectAdapter implements HttpTextFormat.Setter<MultivaluedMap<String, Object>> {\n \n   public static final InjectAdapter SETTER = new InjectAdapter();\n \n   @Override\n-  public void set(ClientRequest clientRequest, String key, String value) {\n-    clientRequest.getHeaders().putSingle(key, value);\n+  public void set(MultivaluedMap<String, Object> carrier, String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1ODE3NA==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471658174", "createdAt": "2020-08-17T17:48:18Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v1_1/InjectAdapter.java", "diffHunk": "@@ -16,15 +16,15 @@\n \n package io.opentelemetry.instrumentation.auto.jaxrsclient.v1_1;\n \n-import com.sun.jersey.api.client.ClientRequest;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n+import javax.ws.rs.core.MultivaluedMap;\n \n-public final class InjectAdapter implements HttpTextFormat.Setter<ClientRequest> {\n+public final class InjectAdapter implements HttpTextFormat.Setter<MultivaluedMap<String, Object>> {\n \n   public static final InjectAdapter SETTER = new InjectAdapter();\n \n   @Override\n-  public void set(ClientRequest clientRequest, String key, String value) {\n-    clientRequest.getHeaders().putSingle(key, value);\n+  public void set(MultivaluedMap<String, Object> carrier, String key, String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2ODM0Ng=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2MDcyNQ==", "bodyText": "and done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471860725", "createdAt": "2020-08-18T01:24:53Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v1_1/InjectAdapter.java", "diffHunk": "@@ -16,15 +16,15 @@\n \n package io.opentelemetry.instrumentation.auto.jaxrsclient.v1_1;\n \n-import com.sun.jersey.api.client.ClientRequest;\n import io.opentelemetry.context.propagation.HttpTextFormat;\n+import javax.ws.rs.core.MultivaluedMap;\n \n-public final class InjectAdapter implements HttpTextFormat.Setter<ClientRequest> {\n+public final class InjectAdapter implements HttpTextFormat.Setter<MultivaluedMap<String, Object>> {\n \n   public static final InjectAdapter SETTER = new InjectAdapter();\n \n   @Override\n-  public void set(ClientRequest clientRequest, String key, String value) {\n-    clientRequest.getHeaders().putSingle(key, value);\n+  public void set(MultivaluedMap<String, Object> carrier, String key, String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2ODM0Ng=="}, "originalCommit": {"oid": "48e0655ed7e37ae239422cd4fd0c01930f0bb777"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTgzMjkxOnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v2_0/JaxRsClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTozMzo1OVrOHCD-_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTozMzo1OVrOHCD-_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyNDQ3Nw==", "bodyText": "Carrier can be ClientRequestContext here as well", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/971#discussion_r471924477", "createdAt": "2020-08-18T05:33:59Z", "author": {"login": "iNikem"}, "path": "instrumentation/jaxrs-client/jaxrs-client-2.0/src/main/java/io/opentelemetry/instrumentation/auto/jaxrsclient/v2_0/JaxRsClientTracer.java", "diffHunk": "@@ -16,14 +16,17 @@\n \n package io.opentelemetry.instrumentation.auto.jaxrsclient.v2_0;\n \n+import static io.opentelemetry.instrumentation.auto.jaxrsclient.v2_0.InjectAdapter.SETTER;\n+\n import io.opentelemetry.context.propagation.HttpTextFormat.Setter;\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer;\n import java.net.URI;\n import javax.ws.rs.client.ClientRequestContext;\n import javax.ws.rs.client.ClientResponseContext;\n+import javax.ws.rs.core.MultivaluedMap;\n \n public class JaxRsClientTracer\n-    extends HttpClientTracer<ClientRequestContext, ClientResponseContext> {\n+    extends HttpClientTracer<ClientRequestContext, MultivaluedMap, ClientResponseContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ffab161cf5e7c4b54b3677069860ae1984dd01"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 31, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}