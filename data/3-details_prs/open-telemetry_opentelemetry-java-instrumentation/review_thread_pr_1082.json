{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzI2NDEy", "number": 1082, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTozNDoxNlrOEh3efg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0OToxMlrOEh3vSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQ3MzkwOnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-common/src/main/java/io/opentelemetry/instrumentation/auto/jaxrs/v2_0/AbstractRequestContextInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTozNDoxNlrOHPbGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwOTowNToxNVrOHPqOzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzNDcxNQ==", "bodyText": "why checking currentSpan == serverSpan?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1082#discussion_r485934715", "createdAt": "2020-09-09T21:34:16Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-common/src/main/java/io/opentelemetry/instrumentation/auto/jaxrs/v2_0/AbstractRequestContextInstrumentation.java", "diffHunk": "@@ -74,39 +73,35 @@ public AbstractRequestContextInstrumentation() {\n   }\n \n   public static class RequestFilterHelper {\n-    public static SpanWithScope createOrUpdateAbortSpan(\n+    public static Span createOrUpdateAbortSpan(\n         ContainerRequestContext context, Class<?> resourceClass, Method method) {\n \n       if (method != null && resourceClass != null) {\n         context.setProperty(JaxRsAnnotationsTracer.ABORT_HANDLED, true);\n-        Span parent = BaseTracer.getCurrentServerSpan();\n-        Span span = TRACER.getCurrentSpan();\n+        Span serverSpan = BaseTracer.getCurrentServerSpan();\n+        Span currentSpan = TRACER.getCurrentSpan();\n \n-        if (span == null) {\n-          span = TRACER.startSpan(resourceClass, method);\n-          return new SpanWithScope(span, currentContextWith(span));\n+        if (currentSpan == null || currentSpan == serverSpan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068ccae76dd0e45792d3260a75a078a93f89cbba"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE4MjYwNQ==", "bodyText": "I should have added a comment here -- will fix it.\nI've found out that DefaultRequestContextInstrumentation and implementation-specific RequestContextInstrumentations (e.g. Resteasy31RequestContextInstrumentation) worked differently when executed in different order.\n\nIn case of default -> impl order: the default instrumentation has always created a span, but without adding the ABORT_HANDLED marker, so the impl instrumentation also ran; span != null so only the span names were updated.\nIn case of impl -> default: span was also not null (because the servlet span would be the current span), so no new span was started here; ABORT_HANDLED marker was added though. The default instrumentation did not run; in this case we were missing one span.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1082#discussion_r486182605", "createdAt": "2020-09-10T09:05:15Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-common/src/main/java/io/opentelemetry/instrumentation/auto/jaxrs/v2_0/AbstractRequestContextInstrumentation.java", "diffHunk": "@@ -74,39 +73,35 @@ public AbstractRequestContextInstrumentation() {\n   }\n \n   public static class RequestFilterHelper {\n-    public static SpanWithScope createOrUpdateAbortSpan(\n+    public static Span createOrUpdateAbortSpan(\n         ContainerRequestContext context, Class<?> resourceClass, Method method) {\n \n       if (method != null && resourceClass != null) {\n         context.setProperty(JaxRsAnnotationsTracer.ABORT_HANDLED, true);\n-        Span parent = BaseTracer.getCurrentServerSpan();\n-        Span span = TRACER.getCurrentSpan();\n+        Span serverSpan = BaseTracer.getCurrentServerSpan();\n+        Span currentSpan = TRACER.getCurrentSpan();\n \n-        if (span == null) {\n-          span = TRACER.startSpan(resourceClass, method);\n-          return new SpanWithScope(span, currentContextWith(span));\n+        if (currentSpan == null || currentSpan == serverSpan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzNDcxNQ=="}, "originalCommit": {"oid": "068ccae76dd0e45792d3260a75a078a93f89cbba"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUxNjIzOnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1/jaxrs-2.0-resteasy-3.1.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0ODo1N1rOHPbgLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0ODo1N1rOHPbgLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MTI5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              latestDepTestLibrary group: 'org.jboss.resteasy', name: 'resteasy-core', version: '+'\n          \n          \n            \n              // artifact name changed from 'resteasy-jaxrs' to 'resteasy-core' starting from version 4.0.0\n          \n          \n            \n              latestDepTestLibrary group: 'org.jboss.resteasy', name: 'resteasy-core', version: '+'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1082#discussion_r485941294", "createdAt": "2020-09-09T21:48:57Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1/jaxrs-2.0-resteasy-3.1.gradle", "diffHunk": "@@ -22,7 +22,22 @@ muzzle {\n \n dependencies {\n   compileOnly group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'\n-  compileOnly group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.0.Final'\n+  library group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.0.Final'\n \n-  implementation project(':instrumentation:jaxrs:jaxrs-2.0')\n+  implementation project(':instrumentation:jaxrs:jaxrs-2.0:jaxrs-2.0-common')\n+\n+  testImplementation project(':instrumentation:servlet:servlet-3.0')\n+  testImplementation project(':instrumentation:jaxrs:jaxrs-2.0:jaxrs-2.0-testing')\n+\n+  testLibrary(group: 'org.jboss.resteasy', name: 'resteasy-undertow', version: '3.1.0.Final') {\n+    exclude group: 'org.jboss.resteasy', module: 'resteasy-client'\n+  }\n+\n+  latestDepTestLibrary group: 'org.jboss.resteasy', name: 'resteasy-core', version: '+'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068ccae76dd0e45792d3260a75a078a93f89cbba"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTUxNjkxOnYy", "diffSide": "RIGHT", "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1/jaxrs-2.0-resteasy-3.1.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0OToxMlrOHPbgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0OToxMlrOHPbgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0MTQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                testImplementation.exclude group: 'org.jboss.resteasy', module: 'resteasy-jaxrs'\n          \n          \n            \n                // artifact name changed from 'resteasy-jaxrs' to 'resteasy-core' starting from version 4.0.0\n          \n          \n            \n                testImplementation.exclude group: 'org.jboss.resteasy', module: 'resteasy-jaxrs'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1082#discussion_r485941402", "createdAt": "2020-09-09T21:49:12Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs/jaxrs-2.0/jaxrs-2.0-resteasy-3.1/jaxrs-2.0-resteasy-3.1.gradle", "diffHunk": "@@ -22,7 +22,22 @@ muzzle {\n \n dependencies {\n   compileOnly group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'\n-  compileOnly group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.0.Final'\n+  library group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.1.0.Final'\n \n-  implementation project(':instrumentation:jaxrs:jaxrs-2.0')\n+  implementation project(':instrumentation:jaxrs:jaxrs-2.0:jaxrs-2.0-common')\n+\n+  testImplementation project(':instrumentation:servlet:servlet-3.0')\n+  testImplementation project(':instrumentation:jaxrs:jaxrs-2.0:jaxrs-2.0-testing')\n+\n+  testLibrary(group: 'org.jboss.resteasy', name: 'resteasy-undertow', version: '3.1.0.Final') {\n+    exclude group: 'org.jboss.resteasy', module: 'resteasy-client'\n+  }\n+\n+  latestDepTestLibrary group: 'org.jboss.resteasy', name: 'resteasy-core', version: '+'\n+}\n+\n+if (findProperty('testLatestDeps')) {\n+  configurations {\n+    testImplementation.exclude group: 'org.jboss.resteasy', module: 'resteasy-jaxrs'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "068ccae76dd0e45792d3260a75a078a93f89cbba"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 95, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}