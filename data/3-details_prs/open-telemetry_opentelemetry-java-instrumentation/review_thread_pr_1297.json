{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MTk2NjU3", "number": 1297, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMzoxMVrOEppbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo1NDozNFrOEptUzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA1NzUzOnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyMzoxMVrOHbcjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToxMDozM1rOHcqLlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ==", "bodyText": "My understanding (which is not very good on this point) is that CONSUMER is used for a span that represents the processing of the message, and fetching a message from a queue synchronously like this would be CLIENT, with parent from the current Context, and a link to the producer span", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498541515", "createdAt": "2020-10-01T22:23:11Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNTA2Mw==", "bodyText": "IMO this is very confusing right now: https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md#span-kind\nI read convention like \"CONSUMER if async, CLIENT if sync and sends response back\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498615063", "createdAt": "2020-10-02T04:34:44Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2Njg5NA==", "bodyText": "I think we need to clarify, because I think this change breaks this use case:\n\nA servlet request reads a message from a queue\n\nI would expect for the span \"reading from queue\" to be parented to the span \"servlet request\" (with a link to the \"producer\" span).\nWith this change, the span \"reading from queue\" is parented to the \"producer\" span, and is no longer in the span tree of the \"servlet request\".", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499166894", "createdAt": "2020-10-03T17:36:49Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1Nzc2NQ==", "bodyText": "Setting aside that this is quite an unusual use-case for me :), I say that messaging semantic convention does not support this anyway. You see, CLIENT is a variant of PRODUCER, it means an operation creating a new message. Thus receive operation cannot be CLIENT. It can be either CONSUMER or SERVER :)\nAnd I think you are mixing two separate things here: setting span's kind and parent/link. They are mostly independent from each other.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499357765", "createdAt": "2020-10-05T05:51:57Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgxMzI2OQ==", "bodyText": "This PR changes both the span kind and the parent/link behavior. I disagree with both changes \ud83d\ude02 but am very likely wrong about one or more likely both. I added to tomorrow's agenda, and in case there's still disagreement after that, we can merge as is and escalate spec clarification.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499813269", "createdAt": "2020-10-05T19:10:33Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -192,12 +190,14 @@ class JMS2Test extends AgentTestRunner {\n       trace(0, 1) { // Consumer trace\n         span(0) {\n           parent()\n-          operationName destinationType + \"/\" + destinationName + \" receive\"\n-          spanKind CLIENT\n+          operationName destinationName + \" receive\"\n+          spanKind CONSUMER", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MTUxNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA2NTI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjoyNzozMVrOHbco1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMDo0NVrOHbjoPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjgwNQ==", "bodyText": "i think deserves to be method level comment\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {\n          \n          \n            \n              // passing messageId = null will verify message.id is not captured, passing messageId = \"\" will verify message.id is captured (but won't verify anything about the value), any other value for messageId will verify that message.id is captured and has that same value\n          \n          \n            \n              static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498542805", "createdAt": "2020-10-01T22:27:31Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -247,42 +250,42 @@ class JMS2Test extends AgentTestRunner {\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NzM0Mw==", "bodyText": "Done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498657343", "createdAt": "2020-10-02T07:30:45Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/jms2Test/groovy/JMS2Test.groovy", "diffHunk": "@@ -247,42 +250,42 @@ class JMS2Test extends AgentTestRunner {\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0MjgwNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA4OTY2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo0MDoyOVrOHbc3yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODozMDowN1rOHco3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ==", "bodyText": "Are these only used as string constants? If so string constants in JMSTracer seems more natural", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498546635", "createdAt": "2020-10-01T22:40:29Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYxNDc4NA==", "bodyText": "Having string input parameter allows for passing any string. In this case only these 3 values are allowed by convention.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498614784", "createdAt": "2020-10-02T04:32:55Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE2NzA5Mw==", "bodyText": "Makes sense \ud83d\udc4d\nBtw, the lowercase enum names are throwing me a bit, can we change to SEND(\"send\")? I think that's more conventional.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499167093", "createdAt": "2020-10-03T17:39:44Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1NjYxOA==", "bodyText": "Can I answer you \"no\"? :) The \"convention\" to have enum elements all in uppercase baffles me. Why should we wrap desired values (lowercase in this case as per spec) in identical uppercase strings? What benefit that brings?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499356618", "createdAt": "2020-10-05T05:47:13Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4NTg5OA==", "bodyText": "The \"convention\" to have enum elements all in uppercase baffles me\n\nCurious if you disagree that it is conventional for enums to be uppercase in Java? Or if you disagree that we should follow this convention?\nThe point of following convention is that it helps people reading the code. When I see Operation.send in code, it looks like direct non-constant field access, and takes me more time to understand than it's worth.\nAlso we document in CONTRIBUTING.md that we follow Google Java Style Guide so would suggest we lean on that for style / convention questions where possible.\nHappy to accept @anuraaga as tie-breaker vote either way though \ud83d\udc4d\ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499785898", "createdAt": "2020-10-05T18:19:20Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5MTY3MA==", "bodyText": "I find strange the notion \"constants should be UPPERCASE in Java\". But in general that is indeed, not important and we should just follow coding style.\nBut it is more important, IMO, when such coding style forces clumsier design. And I think that SEND(\"send\") is clumsy.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r499791670", "createdAt": "2020-10-05T18:30:07Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/main/java/io/opentelemetry/instrumentation/auto/jms/Operation.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.jms;\n+\n+public enum Operation {\n+  send,\n+  receive,\n+  process\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjYzNQ=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA5MTQ2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jms-1.1/src/test/groovy/JMS1Test.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjo0MToyNlrOHbc44Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMDo1OFrOHbjolA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjkxMw==", "bodyText": "same method level comment suggestion as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498546913", "createdAt": "2020-10-01T22:41:26Z", "author": {"login": "trask"}, "path": "instrumentation/jms-1.1/src/test/groovy/JMS1Test.groovy", "diffHunk": "@@ -247,48 +251,48 @@ class JMS1Test extends AgentTestRunner {\n     destination                      | destinationType | destinationName\n     session.createQueue(\"someQueue\") | \"queue\"         | \"someQueue\"\n     session.createTopic(\"someTopic\") | \"topic\"         | \"someTopic\"\n-    session.createTemporaryQueue()   | \"queue\"         | \"<temporary>\"\n-    session.createTemporaryTopic()   | \"topic\"         | \"<temporary>\"\n+    session.createTemporaryQueue()   | \"queue\"         | JMSTracer.TEMP_DESTINATION_NAME\n+    session.createTemporaryTopic()   | \"topic\"         | JMSTracer.TEMP_DESTINATION_NAME\n   }\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NzQyOA==", "bodyText": "Done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498657428", "createdAt": "2020-10-02T07:30:58Z", "author": {"login": "iNikem"}, "path": "instrumentation/jms-1.1/src/test/groovy/JMS1Test.groovy", "diffHunk": "@@ -247,48 +251,48 @@ class JMS1Test extends AgentTestRunner {\n     destination                      | destinationType | destinationName\n     session.createQueue(\"someQueue\") | \"queue\"         | \"someQueue\"\n     session.createTopic(\"someTopic\") | \"topic\"         | \"someTopic\"\n-    session.createTemporaryQueue()   | \"queue\"         | \"<temporary>\"\n-    session.createTemporaryTopic()   | \"topic\"         | \"<temporary>\"\n+    session.createTemporaryQueue()   | \"queue\"         | JMSTracer.TEMP_DESTINATION_NAME\n+    session.createTemporaryTopic()   | \"topic\"         | JMSTracer.TEMP_DESTINATION_NAME\n   }\n \n   static producerSpan(TraceAssert trace, int index, String destinationType, String destinationName) {\n     trace.span(index) {\n-      operationName destinationType + \"/\" + destinationName + \" send\"\n+      operationName destinationName + \" send\"\n       spanKind PRODUCER\n       errored false\n       parent()\n       attributes {\n-        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key()}\" destinationType\n-        \"${SemanticAttributes.MESSAGING_DESTINATION.key()}\" destinationName\n-        if (destinationName == \"<temporary>\") {\n-          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key()}\" true\n+        \"${SemanticAttributes.MESSAGING_SYSTEM.key}\" \"jms\"\n+        \"${SemanticAttributes.MESSAGING_DESTINATION.key}\" destinationName\n+        \"${SemanticAttributes.MESSAGING_DESTINATION_KIND.key}\" destinationType\n+        if (destinationName == JMSTracer.TEMP_DESTINATION_NAME) {\n+          \"${SemanticAttributes.MESSAGING_TEMP_DESTINATION.key}\" true\n         }\n       }\n     }\n   }\n \n-  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, boolean messageListener, Class origin, Object parentOrLinkedSpan) {\n+  static consumerSpan(TraceAssert trace, int index, String destinationType, String destinationName, String messageId, Object parentOrLinkedSpan, Operation operation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NjkxMw=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTY5Njc4OnYy", "diffSide": "RIGHT", "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/instrumentation/auto/kafkaclients/KafkaConsumerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo1NDozNFrOHbi0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMToyOVrOHbjpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NDA3Ng==", "bodyText": "Why do we need to specify start timestamp to current time ourselves here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498644076", "createdAt": "2020-10-02T06:54:34Z", "author": {"login": "anuraaga"}, "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/instrumentation/auto/kafkaclients/KafkaConsumerTracer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.kafkaclients;\n+\n+import static io.opentelemetry.instrumentation.api.decorator.BaseDecorator.extract;\n+import static io.opentelemetry.instrumentation.auto.kafkaclients.TextMapExtractAdapter.GETTER;\n+import static io.opentelemetry.trace.Span.Kind.CONSUMER;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.record.TimestampType;\n+\n+public class KafkaConsumerTracer extends BaseTracer {\n+  public static final KafkaConsumerTracer TRACER = new KafkaConsumerTracer();\n+\n+  public Span startSpan(ConsumerRecord<?, ?> record) {\n+    long now = System.currentTimeMillis();\n+\n+    Span span =\n+        tracer\n+            .spanBuilder(spanNameOnConsume(record))\n+            .setSpanKind(CONSUMER)\n+            .setParent(extractParent(record))\n+            .setStartTimestamp(TimeUnit.MILLISECONDS.toNanos(now))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1NzY2NQ==", "bodyText": "It is used later in onConsume method to calculate record.queue_time_ms", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1297#discussion_r498657665", "createdAt": "2020-10-02T07:31:29Z", "author": {"login": "iNikem"}, "path": "instrumentation/kafka-clients-0.11/src/main/java/io/opentelemetry/instrumentation/auto/kafkaclients/KafkaConsumerTracer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.kafkaclients;\n+\n+import static io.opentelemetry.instrumentation.api.decorator.BaseDecorator.extract;\n+import static io.opentelemetry.instrumentation.auto.kafkaclients.TextMapExtractAdapter.GETTER;\n+import static io.opentelemetry.trace.Span.Kind.CONSUMER;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.record.TimestampType;\n+\n+public class KafkaConsumerTracer extends BaseTracer {\n+  public static final KafkaConsumerTracer TRACER = new KafkaConsumerTracer();\n+\n+  public Span startSpan(ConsumerRecord<?, ?> record) {\n+    long now = System.currentTimeMillis();\n+\n+    Span span =\n+        tracer\n+            .spanBuilder(spanNameOnConsume(record))\n+            .setSpanKind(CONSUMER)\n+            .setParent(extractParent(record))\n+            .setStartTimestamp(TimeUnit.MILLISECONDS.toNanos(now))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NDA3Ng=="}, "originalCommit": {"oid": "6a95e499b078f58f81623587d889efb4e2102da3"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}