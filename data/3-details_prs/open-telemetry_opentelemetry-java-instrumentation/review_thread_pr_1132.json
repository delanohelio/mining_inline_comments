{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODYyODA1", "number": 1132, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNTozMjozNFrOEeCJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNzozNFrOEeiPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTI3ODI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNTozMjozNFrOHJgDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNzowMTowMVrOHJgfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyNDM3Nw==", "bodyText": "i think this can be consolidated\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              compileOnly group: 'org.redisson', name: 'redisson', version: '3.0.0'\n          \n          \n            \n            \n          \n          \n            \n              testLibrary group: 'org.redisson', name: 'redisson', version: '3.0.0'\n          \n          \n            \n              library group: 'org.redisson', name: 'redisson', version: '3.0.0'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479724377", "createdAt": "2020-08-30T05:32:34Z", "author": {"login": "trask"}, "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.redisson\"\n+    module = \"redisson\"\n+    versions = \"[3.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+\n+  testLibrary group: 'org.redisson', name: 'redisson', version: '3.0.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1864a995399939f956b97a887fd7fa585d1db57"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMTQ4Ng==", "bodyText": "Thanks. fixed at lastest commit.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479731486", "createdAt": "2020-08-30T07:01:01Z", "author": {"login": "dengliming"}, "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.redisson\"\n+    module = \"redisson\"\n+    versions = \"[3.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+\n+  testLibrary group: 'org.redisson', name: 'redisson', version: '3.0.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyNDM3Nw=="}, "originalCommit": {"oid": "d1864a995399939f956b97a887fd7fa585d1db57"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTI3OTc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNTozNTowNFrOHJgD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQwNzowMToyMVrOHJgfQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyNDUzNw==", "bodyText": "it looks like 3.+ resolves the same as +, so using the new library dependencies, you don't need this (it will default to +)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              latestDepTestLibrary group: 'org.redisson', name: 'redisson', version: '3.+'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479724537", "createdAt": "2020-08-30T05:35:04Z", "author": {"login": "trask"}, "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.redisson\"\n+    module = \"redisson\"\n+    versions = \"[3.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+\n+  testLibrary group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+  testImplementation group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'\n+  latestDepTestLibrary group: 'org.redisson', name: 'redisson', version: '3.+'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1864a995399939f956b97a887fd7fa585d1db57"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTczMTUyMg==", "bodyText": "Thanks. fixed at lastest commit.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479731522", "createdAt": "2020-08-30T07:01:21Z", "author": {"login": "dengliming"}, "path": "instrumentation/redisson-3.0/redisson-3.0.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.redisson\"\n+    module = \"redisson\"\n+    versions = \"[3.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+\n+  testLibrary group: 'org.redisson', name: 'redisson', version: '3.0.0'\n+  testImplementation group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'\n+  latestDepTestLibrary group: 'org.redisson', name: 'redisson', version: '3.+'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTcyNDUzNw=="}, "originalCommit": {"oid": "d1864a995399939f956b97a887fd7fa585d1db57"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI2MTU2OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/instrumentation/auto/redisson/RedissonClientTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTozMDoyM1rOHJnfjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNDo1ODoyN1rOHJqCqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0NjI4NQ==", "bodyText": "I don't think we do any truncation in other places, like Lettuce or DB instrumentation. It probably is a good idea but we should do it consistently for all the instrumentation, how about storing everything for now?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479846285", "createdAt": "2020-08-31T01:30:23Z", "author": {"login": "anuraaga"}, "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/instrumentation/auto/redisson/RedissonClientTracer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.redisson;\n+\n+import io.netty.channel.Channel;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.auto.api.jdbc.DbSystem;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import org.redisson.client.RedisConnection;\n+import org.redisson.client.protocol.CommandData;\n+import org.redisson.client.protocol.CommandsData;\n+\n+public class RedissonClientTracer extends DatabaseClientTracer<RedisConnection, Object> {\n+\n+  public static final RedissonClientTracer TRACER = new RedissonClientTracer();\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.redisson-3.0\";\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(Object args) {\n+    String commandName = \"Redis Command\";\n+    // get command\n+    if (args instanceof CommandsData) {\n+      List<CommandData<?, ?>> commands = ((CommandsData) args).getCommands();\n+      if (commands != null && !commands.isEmpty()) {\n+        commandName = commands.get(0).getCommand().getName() + \"... [bulk]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1600ec6e51e6b01351b1c6d1ee065b5934e2cf3e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4ODA0Mw==", "bodyText": "Java SDK already supports truncating too large attributes. So this better be left to them :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479888043", "createdAt": "2020-08-31T04:58:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/redisson-3.0/src/main/java/io/opentelemetry/instrumentation/auto/redisson/RedissonClientTracer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.auto.redisson;\n+\n+import io.netty.channel.Channel;\n+import io.opentelemetry.instrumentation.api.tracer.DatabaseClientTracer;\n+import io.opentelemetry.instrumentation.auto.api.jdbc.DbSystem;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import org.redisson.client.RedisConnection;\n+import org.redisson.client.protocol.CommandData;\n+import org.redisson.client.protocol.CommandsData;\n+\n+public class RedissonClientTracer extends DatabaseClientTracer<RedisConnection, Object> {\n+\n+  public static final RedissonClientTracer TRACER = new RedissonClientTracer();\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.redisson-3.0\";\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(Object args) {\n+    String commandName = \"Redis Command\";\n+    // get command\n+    if (args instanceof CommandsData) {\n+      List<CommandData<?, ?>> commands = ((CommandsData) args).getCommands();\n+      if (commands != null && !commands.isEmpty()) {\n+        commandName = commands.get(0).getCommand().getName() + \"... [bulk]\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0NjI4NQ=="}, "originalCommit": {"oid": "1600ec6e51e6b01351b1c6d1ee065b5934e2cf3e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI2ODU2OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/src/test/groovy/RedissonClientTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTozNTo0OVrOHJnjYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzoxMzoyMVrOHJ4PFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0NzI2Nw==", "bodyText": "Does it make sense to have a more complete async test with callbacks? I notice the return type is RFuture I wonder if our concurrent instrumentation will apply to it.\nhttps://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/master/instrumentation/lettuce/lettuce-5.1/src/test/groovy/io/opentelemetry/instrumentation/auto/lettuce/v5_1/LettuceAsyncClientTest.groovy#L327\nWe can focus on async in another PR though.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r479847267", "createdAt": "2020-08-31T01:35:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation/redisson-3.0/src/test/groovy/RedissonClientTest.groovy", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.redisson.Redisson\n+import org.redisson.api.RAtomicLong\n+import org.redisson.api.RBatch\n+import org.redisson.api.RBucket\n+import org.redisson.api.RList\n+import org.redisson.api.RLock\n+import org.redisson.api.RMap\n+import org.redisson.api.RScoredSortedSet\n+import org.redisson.api.RSet\n+import org.redisson.api.RedissonClient\n+import org.redisson.config.Config\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+\n+class RedissonClientTest extends AgentTestRunner {\n+\n+  @Shared\n+  int port = PortUtils.randomOpenPort()\n+\n+  @Shared\n+  RedisServer redisServer = RedisServer.builder()\n+  // bind to localhost to avoid firewall popup\n+    .setting(\"bind 127.0.0.1\")\n+  // set max memory to avoid problems in CI\n+    .setting(\"maxmemory 128M\")\n+    .port(port).build()\n+  @Shared\n+  RedissonClient redisson\n+\n+  def setupSpec() {\n+    println \"Using redis: $redisServer.args\"\n+    redisServer.start()\n+  }\n+\n+  def cleanupSpec() {\n+    redisson.shutdown()\n+    redisServer.stop()\n+  }\n+\n+  def setup() {\n+    Config config = new Config()\n+    config.useSingleServer().setAddress(\"localhost:\" + port)\n+    redisson = Redisson.create(config)\n+    TEST_WRITER.clear()\n+  }\n+\n+  def \"test string command\"() {\n+    when:\n+    RBucket<String> keyObject = redisson.getBucket(\"foo\")\n+    keyObject.set(\"bar\")\n+    keyObject.get()\n+    then:\n+    assertTraces(2) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"SET\"\n+          spanKind CLIENT\n+          attributes {\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n+          }\n+        }\n+      }\n+      trace(1, 1) {\n+        span(0) {\n+          operationName \"GET\"\n+          spanKind CLIENT\n+          attributes {\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"GET\"\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def \"test batch command\"() {\n+    when:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1600ec6e51e6b01351b1c6d1ee065b5934e2cf3e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyMDU5OA==", "bodyText": "Nothing seems to have changed.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r480120598", "createdAt": "2020-08-31T13:13:21Z", "author": {"login": "dengliming"}, "path": "instrumentation/redisson-3.0/src/test/groovy/RedissonClientTest.groovy", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.redisson.Redisson\n+import org.redisson.api.RAtomicLong\n+import org.redisson.api.RBatch\n+import org.redisson.api.RBucket\n+import org.redisson.api.RList\n+import org.redisson.api.RLock\n+import org.redisson.api.RMap\n+import org.redisson.api.RScoredSortedSet\n+import org.redisson.api.RSet\n+import org.redisson.api.RedissonClient\n+import org.redisson.config.Config\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+\n+class RedissonClientTest extends AgentTestRunner {\n+\n+  @Shared\n+  int port = PortUtils.randomOpenPort()\n+\n+  @Shared\n+  RedisServer redisServer = RedisServer.builder()\n+  // bind to localhost to avoid firewall popup\n+    .setting(\"bind 127.0.0.1\")\n+  // set max memory to avoid problems in CI\n+    .setting(\"maxmemory 128M\")\n+    .port(port).build()\n+  @Shared\n+  RedissonClient redisson\n+\n+  def setupSpec() {\n+    println \"Using redis: $redisServer.args\"\n+    redisServer.start()\n+  }\n+\n+  def cleanupSpec() {\n+    redisson.shutdown()\n+    redisServer.stop()\n+  }\n+\n+  def setup() {\n+    Config config = new Config()\n+    config.useSingleServer().setAddress(\"localhost:\" + port)\n+    redisson = Redisson.create(config)\n+    TEST_WRITER.clear()\n+  }\n+\n+  def \"test string command\"() {\n+    when:\n+    RBucket<String> keyObject = redisson.getBucket(\"foo\")\n+    keyObject.set(\"bar\")\n+    keyObject.get()\n+    then:\n+    assertTraces(2) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"SET\"\n+          spanKind CLIENT\n+          attributes {\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n+          }\n+        }\n+      }\n+      trace(1, 1) {\n+        span(0) {\n+          operationName \"GET\"\n+          spanKind CLIENT\n+          attributes {\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"GET\"\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def \"test batch command\"() {\n+    when:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0NzI2Nw=="}, "originalCommit": {"oid": "1600ec6e51e6b01351b1c6d1ee065b5934e2cf3e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDUzNzc4OnYy", "diffSide": "RIGHT", "path": "instrumentation/redisson-3.0/src/test/groovy/RedissonAsyncClientTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNzozNFrOHKPJ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDoyNzozNFrOHKPJ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ5NjA5OA==", "bodyText": "Thanks, this is a good test! I just noticed our async redis tests don't check context propagation, we can look at that separately #1139", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1132#discussion_r480496098", "createdAt": "2020-09-01T00:27:34Z", "author": {"login": "anuraaga"}, "path": "instrumentation/redisson-3.0/src/test/groovy/RedissonAsyncClientTest.groovy", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.opentelemetry.auto.test.AgentTestRunner\n+import io.opentelemetry.auto.test.utils.PortUtils\n+import io.opentelemetry.trace.attributes.SemanticAttributes\n+import org.redisson.Redisson\n+import org.redisson.api.*\n+import org.redisson.config.Config\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+import java.util.concurrent.TimeUnit\n+import java.util.function.BiConsumer\n+\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+\n+class RedissonAsyncClientTest extends AgentTestRunner {\n+\n+  @Shared\n+  int port = PortUtils.randomOpenPort()\n+\n+  @Shared\n+  RedisServer redisServer = RedisServer.builder()\n+  // bind to localhost to avoid firewall popup\n+    .setting(\"bind 127.0.0.1\")\n+  // set max memory to avoid problems in CI\n+    .setting(\"maxmemory 128M\")\n+    .port(port).build()\n+  @Shared\n+  RedissonClient redisson\n+\n+  def setupSpec() {\n+    println \"Using redis: $redisServer.args\"\n+    redisServer.start()\n+  }\n+\n+  def cleanupSpec() {\n+    redisson.shutdown()\n+    redisServer.stop()\n+  }\n+\n+  def setup() {\n+    Config config = new Config()\n+    config.useSingleServer().setAddress(\"localhost:\" + port)\n+    redisson = Redisson.create(config)\n+    TEST_WRITER.clear()\n+  }\n+\n+  def \"test future get\"() {\n+    when:\n+    RBucket<String> keyObject = redisson.getBucket(\"foo\")\n+    RFuture future = keyObject.setAsync(\"bar\")\n+    future.get(3, TimeUnit.SECONDS)\n+    then:\n+    assertTraces(1) {\n+      trace(0, 1) {\n+        span(0) {\n+          operationName \"SET\"\n+          spanKind CLIENT\n+          attributes {\n+            \"${SemanticAttributes.DB_SYSTEM.key()}\" \"redis\"\n+            \"${SemanticAttributes.NET_PEER_IP.key()}\" \"127.0.0.1\"\n+            \"${SemanticAttributes.NET_PEER_NAME.key()}\" \"localhost\"\n+            \"${SemanticAttributes.DB_CONNECTION_STRING.key()}\" \"localhost:$port\"\n+            \"${SemanticAttributes.NET_PEER_PORT.key()}\" port\n+            \"${SemanticAttributes.DB_STATEMENT.key()}\" \"SET\"\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  def \"test future whenComplete\"() {\n+    when:\n+    RSet<String> rSet = redisson.getSet(\"set1\")\n+    RFuture<Boolean> result = rSet.addAsync(\"s1\")\n+    result.whenComplete(new BiConsumer<Boolean, Throwable>() {\n+      @Override\n+      void accept(Boolean res, Throwable throwable) {\n+        RList<String> strings = redisson.getList(\"list1\")\n+        strings.add(\"a\")\n+      }\n+    })\n+    then:\n+    result.get(3, TimeUnit.SECONDS)\n+    assertTraces(2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2baa5c958e7b3c4100c8bf935e763fcbadab461"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4849, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}