{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMzQ1OTIy", "number": 1839, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MToyNlrOFBnwLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MToyNlrOFBnwLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjQ0MjA3OnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/grpc/v1_5/GrpcServerBuilderInstrumentation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjo0MToyNlrOIAYDMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzoyMzoxN1rOIAZD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NDk0Ng==", "bodyText": "this string will get shaded too \ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1839#discussion_r537264946", "createdAt": "2020-12-07T06:41:26Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/grpc/v1_5/GrpcServerBuilderInstrumentation.java", "diffHunk": "@@ -21,33 +28,61 @@\n \n public class GrpcServerBuilderInstrumentation implements TypeInstrumentation {\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+    return hasClassesNamed(\"io.grpc.ServerBuilder\");\n+  }\n+\n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractServerImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ServerBuilder\"));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        isMethod().and(named(\"build\")),\n-        GrpcServerBuilderInstrumentation.class.getName() + \"$AddInterceptorAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"intercept\"))\n+            .and(takesArgument(0, named(\"io.grpc.ServerInterceptor\"))),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$InterceptAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"build\")).and(takesArguments(0)),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$BuildAdvice\");\n+    return transformers;\n   }\n \n-  public static class AddInterceptorAdvice {\n+  public static class InterceptAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void addInterceptor(\n-        @Advice.FieldValue(\"interceptors\") List<ServerInterceptor> interceptors) {\n-      boolean shouldRegister = true;\n-      for (ServerInterceptor interceptor : interceptors) {\n-        if (interceptor instanceof TracingServerInterceptor) {\n-          shouldRegister = false;\n-          break;\n-        }\n+    public static void onEnter(\n+        @Advice.This ServerBuilder<?> serverBuilder,\n+        @Advice.Argument(0) ServerInterceptor interceptor) {\n+      // Check against unshaded name.\n+      if (interceptor\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.instrumentation.grpc.v1_5.server.TracingServerInterceptor\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "690c4ed707f2fa4d29a225cf4ba1e81b21130b85"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3MTA2NA==", "bodyText": "Oops - removed the check for now so we can come up with a better strategy globally", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1839#discussion_r537271064", "createdAt": "2020-12-07T06:57:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/grpc/v1_5/GrpcServerBuilderInstrumentation.java", "diffHunk": "@@ -21,33 +28,61 @@\n \n public class GrpcServerBuilderInstrumentation implements TypeInstrumentation {\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+    return hasClassesNamed(\"io.grpc.ServerBuilder\");\n+  }\n+\n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractServerImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ServerBuilder\"));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        isMethod().and(named(\"build\")),\n-        GrpcServerBuilderInstrumentation.class.getName() + \"$AddInterceptorAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"intercept\"))\n+            .and(takesArgument(0, named(\"io.grpc.ServerInterceptor\"))),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$InterceptAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"build\")).and(takesArguments(0)),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$BuildAdvice\");\n+    return transformers;\n   }\n \n-  public static class AddInterceptorAdvice {\n+  public static class InterceptAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void addInterceptor(\n-        @Advice.FieldValue(\"interceptors\") List<ServerInterceptor> interceptors) {\n-      boolean shouldRegister = true;\n-      for (ServerInterceptor interceptor : interceptors) {\n-        if (interceptor instanceof TracingServerInterceptor) {\n-          shouldRegister = false;\n-          break;\n-        }\n+    public static void onEnter(\n+        @Advice.This ServerBuilder<?> serverBuilder,\n+        @Advice.Argument(0) ServerInterceptor interceptor) {\n+      // Check against unshaded name.\n+      if (interceptor\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.instrumentation.grpc.v1_5.server.TracingServerInterceptor\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NDk0Ng=="}, "originalCommit": {"oid": "690c4ed707f2fa4d29a225cf4ba1e81b21130b85"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI3NzMzNQ==", "bodyText": "So, will we have multiple copies of TracingServerInterceptor?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1839#discussion_r537277335", "createdAt": "2020-12-07T07:13:55Z", "author": {"login": "iNikem"}, "path": "instrumentation/grpc-1.5/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/grpc/v1_5/GrpcServerBuilderInstrumentation.java", "diffHunk": "@@ -21,33 +28,61 @@\n \n public class GrpcServerBuilderInstrumentation implements TypeInstrumentation {\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+    return hasClassesNamed(\"io.grpc.ServerBuilder\");\n+  }\n+\n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractServerImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ServerBuilder\"));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        isMethod().and(named(\"build\")),\n-        GrpcServerBuilderInstrumentation.class.getName() + \"$AddInterceptorAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"intercept\"))\n+            .and(takesArgument(0, named(\"io.grpc.ServerInterceptor\"))),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$InterceptAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"build\")).and(takesArguments(0)),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$BuildAdvice\");\n+    return transformers;\n   }\n \n-  public static class AddInterceptorAdvice {\n+  public static class InterceptAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void addInterceptor(\n-        @Advice.FieldValue(\"interceptors\") List<ServerInterceptor> interceptors) {\n-      boolean shouldRegister = true;\n-      for (ServerInterceptor interceptor : interceptors) {\n-        if (interceptor instanceof TracingServerInterceptor) {\n-          shouldRegister = false;\n-          break;\n-        }\n+    public static void onEnter(\n+        @Advice.This ServerBuilder<?> serverBuilder,\n+        @Advice.Argument(0) ServerInterceptor interceptor) {\n+      // Check against unshaded name.\n+      if (interceptor\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.instrumentation.grpc.v1_5.server.TracingServerInterceptor\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NDk0Ng=="}, "originalCommit": {"oid": "690c4ed707f2fa4d29a225cf4ba1e81b21130b85"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4MTUwMQ==", "bodyText": "See #903", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1839#discussion_r537281501", "createdAt": "2020-12-07T07:23:17Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/grpc/v1_5/GrpcServerBuilderInstrumentation.java", "diffHunk": "@@ -21,33 +28,61 @@\n \n public class GrpcServerBuilderInstrumentation implements TypeInstrumentation {\n \n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderOptimization() {\n+    return hasClassesNamed(\"io.grpc.ServerBuilder\");\n+  }\n+\n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractServerImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ServerBuilder\"));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        isMethod().and(named(\"build\")),\n-        GrpcServerBuilderInstrumentation.class.getName() + \"$AddInterceptorAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"intercept\"))\n+            .and(takesArgument(0, named(\"io.grpc.ServerInterceptor\"))),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$InterceptAdvice\");\n+    transformers.put(\n+        isMethod().and(isPublic()).and(named(\"build\")).and(takesArguments(0)),\n+        GrpcServerBuilderInstrumentation.class.getName() + \"$BuildAdvice\");\n+    return transformers;\n   }\n \n-  public static class AddInterceptorAdvice {\n+  public static class InterceptAdvice {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static void addInterceptor(\n-        @Advice.FieldValue(\"interceptors\") List<ServerInterceptor> interceptors) {\n-      boolean shouldRegister = true;\n-      for (ServerInterceptor interceptor : interceptors) {\n-        if (interceptor instanceof TracingServerInterceptor) {\n-          shouldRegister = false;\n-          break;\n-        }\n+    public static void onEnter(\n+        @Advice.This ServerBuilder<?> serverBuilder,\n+        @Advice.Argument(0) ServerInterceptor interceptor) {\n+      // Check against unshaded name.\n+      if (interceptor\n+          .getClass()\n+          .getName()\n+          .equals(\"io.opentelemetry.instrumentation.grpc.v1_5.server.TracingServerInterceptor\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI2NDk0Ng=="}, "originalCommit": {"oid": "690c4ed707f2fa4d29a225cf4ba1e81b21130b85"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}