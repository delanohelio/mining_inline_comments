{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk1MjM3", "number": 152, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMjoyNlrODe_Euw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozODo0MVrODfTr7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE3Mjc1OnYy", "diffSide": "RIGHT", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozMjoyNlrOFobmOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDowODozMlrOFo87lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg==", "bodyText": "Worth excluding the internal classloader or any classloader that we know delegates properly?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377939512", "createdAt": "2020-02-11T22:32:26Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDQyOQ==", "bodyText": "ya, makes sense to exclude java.lang.ClassLoader itself. not sure any others are really worth it, wdyt?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990429", "createdAt": "2020-02-12T01:07:48Z", "author": {"login": "trask"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODYyMw==", "bodyText": "I think at least AgentClassLoader too.  I guess any other classloader could either explicitly or implicitly not delegate, so I think those are the only two that could work.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378468623", "createdAt": "2020-02-12T19:35:29Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NTY1Mg==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378485652", "createdAt": "2020-02-12T20:08:32Z", "author": {"login": "trask"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTUxMg=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE4MTAxOnYy", "diffSide": "RIGHT", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNTowNlrOFobq9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNzowOVrOFo78cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ==", "bodyText": "What is this for?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377940725", "createdAt": "2020-02-11T22:35:06Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {Constants.class.getName()};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"loadClass\"))\n+            .and(\n+                takesArguments(1)\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .or(\n+                        takesArguments(2)\n+                            .and(takesArgument(0, named(\"java.lang.String\")))\n+                            .and(takesArgument(1, named(\"boolean\")))))\n+            .and(isPublic().or(isProtected()))\n+            .and(not(isStatic())),\n+        ClassloadingInstrumentation.class.getName() + \"$LoadClassAdvice\");\n+  }\n+\n+  public static class LoadClassAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDg0NA==", "bodyText": "this tells byte buddy to skip the loadClass() method body if we return something non-null (since we want to short-circuit and return from loadClass() right away if we find what we're looking for in the bootstrap class loader", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990844", "createdAt": "2020-02-12T01:09:35Z", "author": {"login": "trask"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {Constants.class.getName()};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"loadClass\"))\n+            .and(\n+                takesArguments(1)\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .or(\n+                        takesArguments(2)\n+                            .and(takesArgument(0, named(\"java.lang.String\")))\n+                            .and(takesArgument(1, named(\"boolean\")))))\n+            .and(isPublic().or(isProtected()))\n+            .and(not(isStatic())),\n+        ClassloadingInstrumentation.class.getName() + \"$LoadClassAdvice\");\n+  }\n+\n+  public static class LoadClassAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTQ5MA==", "bodyText": "oh, I see... cool.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378469490", "createdAt": "2020-02-12T19:37:09Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {\n+  public ClassloadingInstrumentation() {\n+    super(\"classloading\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"java.lang.ClassLoader\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {Constants.class.getName()};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"loadClass\"))\n+            .and(\n+                takesArguments(1)\n+                    .and(takesArgument(0, named(\"java.lang.String\")))\n+                    .or(\n+                        takesArguments(2)\n+                            .and(takesArgument(0, named(\"java.lang.String\")))\n+                            .and(takesArgument(1, named(\"boolean\")))))\n+            .and(isPublic().or(isProtected()))\n+            .and(not(isStatic())),\n+        ClassloadingInstrumentation.class.getName() + \"$LoadClassAdvice\");\n+  }\n+\n+  public static class LoadClassAdvice {\n+    @Advice.OnMethodEnter(skipOn = Advice.OnNonDefaultValue.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDcyNQ=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODE4NTA5OnYy", "diffSide": "RIGHT", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjozNjozN1rOFobtYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowNjo0N1rOFoesNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng==", "bodyText": "Consider adding a unit test for this project with a regular urlclassloader that doesn't delegate properly.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941346", "createdAt": "2020-02-11T22:36:37Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTcyOQ==", "bodyText": "Also, a class comment here explaining the reason for this instrumentation would be a good idea since it might not be obvious to everyone.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377941729", "createdAt": "2020-02-11T22:37:37Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDE5Nw==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r377990197", "createdAt": "2020-02-12T01:06:47Z", "author": {"login": "trask"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package io.opentelemetry.auto.instrumentation.classloading;\n+\n+import static io.opentelemetry.auto.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.auto.tooling.Constants;\n+import io.opentelemetry.auto.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ClassloadingInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MTM0Ng=="}, "originalCommit": {"oid": "7ed62c8c7a055fba499f3e9a38e12a3a79a1456c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU0OTg5OnYy", "diffSide": "RIGHT", "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozODo0MVrOFo7_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDowODoyMlrOFo87Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Some class loaders to do not delegate to their parent, so classes in those class loaders\n          \n          \n            \n             * Some class loaders do not delegate to their parent, so classes in those class loaders", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378470269", "createdAt": "2020-02-12T19:38:41Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -20,6 +20,16 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/*\n+ * Some class loaders to do not delegate to their parent, so classes in those class loaders", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ4NTU4Mw==", "bodyText": "done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/152#discussion_r378485583", "createdAt": "2020-02-12T20:08:22Z", "author": {"login": "trask"}, "path": "instrumentation/classloading/src/main/java/io/opentelemetry/auto/instrumentation/classloading/ClassloadingInstrumentation.java", "diffHunk": "@@ -20,6 +20,16 @@\n import net.bytebuddy.description.type.TypeDescription;\n import net.bytebuddy.matcher.ElementMatcher;\n \n+/*\n+ * Some class loaders to do not delegate to their parent, so classes in those class loaders", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDI2OQ=="}, "originalCommit": {"oid": "6a9eb0b81b45f1425b70e452b79cde848dc56502"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 556, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}