{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMjkxMTY3", "number": 729, "title": "add exporter configurations to springboot autoconfigure", "bodyText": "Add Spring Boot auto configurations and configuration properties for OTLPGrpcSpanExporter, LoggingSpanExporter, JaegerSpanExporter, and ZipkinSpanExporter.\nMy next pull request will add spring boot starters for these exporters. Here's a preview: https://github.com/mabdinur/opentelemetry-java-instrumentation/pull/6/files :)", "createdAt": "2020-07-19T03:00:50Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729", "merged": true, "mergeCommit": {"oid": "72c36b40b414e572df69a07827c02e2335e1bfd3"}, "closed": true, "closedAt": "2020-07-27T02:55:04Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2upZ3gFqTQ1MTQ2NDQyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc44xxEgFqTQ1NTQ0MzU1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDY0NDIw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-451464420", "createdAt": "2020-07-20T09:57:29Z", "commit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1NzoyOVrOG0DsLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1ODo0NVrOG0Dvrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzOTU5OA==", "bodyText": "Let's go ahead and remove this, and instead add javadoc to at least the getters.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457239598", "createdAt": "2020-07-20T09:57:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,24 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Sets default tracer name and sampler probability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDQ5NQ==", "bodyText": "Aren't these included transitively from the above deps? Even if not, these should be compileOnly as well, not implementation", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457240495", "createdAt": "2020-07-20T09:58:45Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -32,9 +33,17 @@ dependencies {\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  implementation group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ee181772c46ff524ae0e99ca1b4a6b08b2fd00"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODIxOTQ1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-451821945", "createdAt": "2020-07-20T17:40:25Z", "commit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MDoyNVrOG0Yk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0MDoyNVrOG0Yk3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MTc5MQ==", "bodyText": "Moving these apis to an opentelemetry-spring-starter. A draft of this can be see here: mabdinur#6", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r457581791", "createdAt": "2020-07-20T17:40:25Z", "author": {"login": "mabdinur"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -31,8 +32,15 @@ dependencies {\n   implementation 'org.springframework.boot:spring-boot-starter-webflux'\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n-  api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTE4MDY5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-452918069", "createdAt": "2020-07-22T00:32:55Z", "commit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMjo1NVrOG1OguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNjozMVrOG1Okvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTQ2NQ==", "bodyText": "[Suggestion] Drop the extra newline here.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465465", "createdAt": "2020-07-22T00:32:55Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTcyOA==", "bodyText": "[Question] Is that always guaranteed to be a valid value?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465728", "createdAt": "2020-07-22T00:33:55Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,67 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTk2OQ==", "bodyText": "Here and elsewhere: You don't need usually need to provide a list of the methods of the class in its documentation. IS there a special convention for beans?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458465969", "createdAt": "2020-07-22T00:34:51Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -16,18 +16,26 @@\n \n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n+import javax.validation.constraints.DecimalMax;\n+import javax.validation.constraints.DecimalMin;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n \n /**\n  * Configuration for OpenTelemetry Tracer\n  *\n- * <p>Configures LoggingExporter and sets default tracer name\n+ * <p>Get Tracer Name {@link getName()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjE2Mw==", "bodyText": "Is it worth documenting that 0.0 / 1.0 have special values?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466163", "createdAt": "2020-07-22T00:35:21Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerProperties.java", "diffHunk": "@@ -37,11 +45,11 @@ public void setName(String name) {\n     this.name = name;\n   }\n \n-  public boolean isLoggingExporterEnabled() {\n-    return loggingExporterEnabled;\n+  public double getSamplerProbability() {\n+    return samplerProbability;\n   }\n \n-  public void setLoggingExporterEnabled(boolean loggingExporterEnabled) {\n-    this.loggingExporterEnabled = loggingExporterEnabled;\n+  public void setSamplerProbability(double samplerProbability) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ0Mw==", "bodyText": "[Note] I'm not sure about the convention, but I'd consider making the defaults part of the class documentation.\nI'd also add a link to where that 14250 is coming from.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466443", "createdAt": "2020-07-22T00:36:20Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjQ5NQ==", "bodyText": "I think you can just use ofSeconds(1)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r458466495", "createdAt": "2020-07-22T00:36:31Z", "author": {"login": "udekel"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches {@link getDeadline()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  private int port = 14250;\n+  private Duration deadline = Duration.ofMillis(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32d56a3e2536cfe604c91c9abf76cd155ccf3d4"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjc2MjUw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-453676250", "createdAt": "2020-07-22T20:52:45Z", "commit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1Mjo0NVrOG1zyRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowNzo0NVrOG10Qbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjE2Ng==", "bodyText": "i think good to align default serviceName with SDK\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076166", "createdAt": "2020-07-22T20:52:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NjQ3OA==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459076478", "createdAt": "2020-07-22T20:53:25Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3NzMxMw==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n          \n          \n            \n              private String serviceName = \"unknown\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459077313", "createdAt": "2020-07-22T20:55:04Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MjU3NQ==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"http://localhost\";\n          \n          \n            \n              /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"http://localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459082575", "createdAt": "2020-07-22T21:05:10Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.zipkin;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link ZipkinSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name {@link getServiceName()}\n+ *\n+ * <p>Get Exporter Host Name {@link getHost()}\n+ *\n+ * <p>Get Exporter Port {@link getPort()}\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.zipkin\")\n+public class ZipkinSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-exporter\";\n+  private String host = \"http://localhost\";\n+  /** Default end point in {@link ZipkinSpanExporter.OTEL_ZIPKIN_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MzYxMw==", "bodyText": "combine these into single endpoint to match recommended configuration properties coming in open-telemetry/opentelemetry-specification#666\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083613", "createdAt": "2020-07-22T21:07:17Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.jaeger;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link JaegerSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.jaeger\")\n+public final class JaegerSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-jaeger-exporter\";\n+  private String host = \"localhost\";\n+  /** Default port from {@link JaegerSpanExporter.DEFAULT_JAEGER_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4Mzg4Nw==", "bodyText": "same here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String host = \"localhost\";\n          \n          \n            \n              /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n          \n          \n            \n              private int port = 14250;\n          \n          \n            \n              private String endpoint = \"localhost:14250\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459083887", "createdAt": "2020-07-22T21:07:45Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.autoconfigure.exporters.otlp;\n+\n+import java.time.Duration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Configuration for {@link OTLPGrpcSpanExporter}\n+ *\n+ * <p>Get Exporter Service Name\n+ *\n+ * <p>Get Exporter Host Name\n+ *\n+ * <p>Get Exporter Port\n+ *\n+ * <p>Get max wait time for Collector to process Span Batches\n+ */\n+@ConfigurationProperties(prefix = \"opentelemetry.trace.exporter.otlp\")\n+public final class OtlpGrpcSpanExporterProperties {\n+\n+  private boolean enabled = true;\n+  private String serviceName = \"otel-spring-boot-zipkin-otlp\";\n+  private String host = \"localhost\";\n+  /** Default end point in {@link OTLPGrpcSpanExporter.OTEL_OTLP_ENDPOINT} */\n+  private int port = 14250;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8f59d2226c7ed345d03163421cf955f8877d62b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8f59d2226c7ed345d03163421cf955f8877d62b", "committedDate": "2020-07-22T16:50:15Z", "message": "edit host name"}, "afterCommit": {"oid": "97ff9ae902575f59ca337b3dea3605d53befa24c", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/97ff9ae902575f59ca337b3dea3605d53befa24c", "committedDate": "2020-07-23T00:35:57Z", "message": "edit host name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzIwMzM1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-454320335", "createdAt": "2020-07-23T16:51:20Z", "commit": {"oid": "fa074ab692b84819f66559c9256060c5845a4eb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MToyMFrOG2TJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MToyMFrOG2TJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MDAwMw==", "bodyText": "need to call OpenTelemetrySdk.getTracerProvider().updateActiveTraceConfig(...)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r459590003", "createdAt": "2020-07-23T16:51:20Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/TracerAutoConfiguration.java", "diffHunk": "@@ -17,43 +17,66 @@\n package io.opentelemetry.instrumentation.spring.autoconfigure;\n \n import io.opentelemetry.OpenTelemetry;\n-import io.opentelemetry.exporters.logging.LoggingSpanExporter;\n import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.MultiSpanProcessor;\n+import io.opentelemetry.sdk.trace.Samplers;\n import io.opentelemetry.sdk.trace.SpanProcessor;\n+import io.opentelemetry.sdk.trace.config.TraceConfig;\n import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n import io.opentelemetry.trace.Tracer;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n /**\n- * Create an {@link io.opentelemetry.trace.Tracer}.\n+ * Create {@link io.opentelemetry.trace.Tracer} bean if bean is missing.\n  *\n- * <p>If {@code TracerProperties.loggingExporterIsEnabled=True}: Create a simple span processor\n- * using the LoggingSpanExporter\n+ * <p>Adds span exporter beans to the active tracer provider {@code\n+ * OpenTelemetrySdk.getTracerProvider()}\n+ *\n+ * <p>Sets {@link TraceConfig} sampler probability\n  */\n @Configuration\n @EnableConfigurationProperties(TracerProperties.class)\n public class TracerAutoConfiguration {\n \n-  @Autowired TracerProperties tracerProperties;\n-\n   @Bean\n   @ConditionalOnMissingBean\n-  public Tracer otelTracer() throws Exception {\n+  public Tracer otelTracer(\n+      TracerProperties tracerProperties, ObjectProvider<List<SpanExporter>> spanExportersProvider)\n+      throws Exception {\n     Tracer tracer = OpenTelemetry.getTracer(tracerProperties.getName());\n-    setLoggingExporter();\n+\n+    List<SpanExporter> spanExporters = spanExportersProvider.getIfAvailable();\n+    if (spanExporters == null || spanExporters.isEmpty()) {\n+      return tracer;\n+    }\n+\n+    addSpanProcessors(spanExporters);\n+    setSampler(tracerProperties);\n+\n     return tracer;\n   }\n \n-  private void setLoggingExporter() {\n-    if (!tracerProperties.isLoggingExporterEnabled()) {\n-      return;\n-    }\n+  private void addSpanProcessors(List<SpanExporter> spanExporters) {\n+    List<SpanProcessor> spanProcessors =\n+        spanExporters.stream()\n+            .map(spanExporter -> SimpleSpanProcessor.newBuilder(spanExporter).build())\n+            .collect(Collectors.toList());\n+\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(MultiSpanProcessor.create(spanProcessors));\n+  }\n \n-    SpanProcessor logProcessor = SimpleSpanProcessor.newBuilder(new LoggingSpanExporter()).build();\n-    OpenTelemetrySdk.getTracerProvider().addSpanProcessor(logProcessor);\n+  private void setSampler(TracerProperties tracerProperties) {\n+    TraceConfig.getDefault()\n+        .toBuilder()\n+        .setSampler(Samplers.probability(tracerProperties.getSamplerProbability()))\n+        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa074ab692b84819f66559c9256060c5845a4eb5"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDg2MDUx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-454486051", "createdAt": "2020-07-23T20:51:46Z", "commit": {"oid": "0e761ecd6d65d25baa10b14d7fe58c4e7032c866"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d5d08583bf2375a2a7d1716b1179c01bd8721f2", "committedDate": "2020-07-24T21:32:40Z", "message": "add exporter configurations to springboot autoconfigure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbed77676cf5a7af117a86071fb6ff56793615ee", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bbed77676cf5a7af117a86071fb6ff56793615ee", "committedDate": "2020-07-24T21:32:40Z", "message": "clean up javadoc and jaegerspanexporter name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0a0e246af44407c777b36bd898a27d930330ab", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/df0a0e246af44407c777b36bd898a27d930330ab", "committedDate": "2020-07-24T21:32:40Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cc7e247b2d63aea4e316dc28bc0cecd8ad549b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/e3cc7e247b2d63aea4e316dc28bc0cecd8ad549b", "committedDate": "2020-07-24T21:32:40Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b20642b6591e857838e676d9fcba701b4214364", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b20642b6591e857838e676d9fcba701b4214364", "committedDate": "2020-07-24T21:32:40Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d49d6682f9da5f5a00f30ffe22ea78dd1e4fae3", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d49d6682f9da5f5a00f30ffe22ea78dd1e4fae3", "committedDate": "2020-07-24T21:32:40Z", "message": "format and clean up java docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36f415dd8616a3ca1041ebdc4080b88c2c03187c", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36f415dd8616a3ca1041ebdc4080b88c2c03187c", "committedDate": "2020-07-24T21:32:41Z", "message": "review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1259478c2d53eb2b143d793d70f74d5d614cfdf", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d1259478c2d53eb2b143d793d70f74d5d614cfdf", "committedDate": "2020-07-24T21:32:41Z", "message": "edit host name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925cc1c629e920e324bd7d5bdfb893c042a31970", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/925cc1c629e920e324bd7d5bdfb893c042a31970", "committedDate": "2020-07-24T21:32:41Z", "message": "Update TracerProperties.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4d492e70fb07dfcaa2513637f88bfbb2b70685", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9b4d492e70fb07dfcaa2513637f88bfbb2b70685", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6109f69d0cf764723c9c7339cda460bb7916e8", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0d6109f69d0cf764723c9c7339cda460bb7916e8", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d52ebd7c26f9f6795f6a03cee874a49b6c6623e9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d52ebd7c26f9f6795f6a03cee874a49b6c6623e9", "committedDate": "2020-07-24T21:32:41Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81ac0315a4300232961ea9d523a370211cde2276", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/81ac0315a4300232961ea9d523a370211cde2276", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/otlp/OtlpGrpcSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6696f74d680beca5670c11112aca24e5233741", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c6696f74d680beca5670c11112aca24e5233741", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/jaeger/JaegerSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9deec575fedaa88cb5eb8bc30521fb01475a2f10", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9deec575fedaa88cb5eb8bc30521fb01475a2f10", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f4faa066c1c781c9ca432a2a88e4d37f7741e2", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/87f4faa066c1c781c9ca432a2a88e4d37f7741e2", "committedDate": "2020-07-24T21:32:41Z", "message": "Update instrumentation-core/spring/spring-boot-autoconfigure/src/main/java/io/opentelemetry/instrumentation/spring/autoconfigure/exporters/zipkin/ZipkinSpanExporterProperties.java\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd426339308d27e9b698a3df4fc2f7298b48677", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cdd426339308d27e9b698a3df4fc2f7298b48677", "committedDate": "2020-07-24T21:32:41Z", "message": "fixed properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a370c042690300657d7047236c1bc54e7808b77e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a370c042690300657d7047236c1bc54e7808b77e", "committedDate": "2020-07-24T21:32:41Z", "message": "update active tracer config with sampling probability and clean up host/port property javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6535eda035ea91310b15157f98ecf15ef1050d51", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6535eda035ea91310b15157f98ecf15ef1050d51", "committedDate": "2020-07-24T21:32:42Z", "message": "fix duration property name to align with docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e761ecd6d65d25baa10b14d7fe58c4e7032c866", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/0e761ecd6d65d25baa10b14d7fe58c4e7032c866", "committedDate": "2020-07-23T19:38:54Z", "message": "fix duration property name to align with docs"}, "afterCommit": {"oid": "6535eda035ea91310b15157f98ecf15ef1050d51", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6535eda035ea91310b15157f98ecf15ef1050d51", "committedDate": "2020-07-24T21:32:42Z", "message": "fix duration property name to align with docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d53a80abbddef5ba6b85d7660aa587aa793e7fb", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4d53a80abbddef5ba6b85d7660aa587aa793e7fb", "committedDate": "2020-07-25T04:05:47Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjU5NzE3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-455259717", "createdAt": "2020-07-25T04:17:03Z", "commit": {"oid": "4d53a80abbddef5ba6b85d7660aa587aa793e7fb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNDoxNzowM1rOG3CSdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNDoxNzowM1rOG3CSdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM2MjM1OA==", "bodyText": "It sounds like the transitive dependency problem got fixed. Doesn't it work to remove these extra compileOnly completely?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#discussion_r460362358", "createdAt": "2020-07-25T04:17:03Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-boot-autoconfigure/spring-boot-autoconfigure.gradle", "diffHunk": "@@ -18,21 +18,27 @@ bootJar {\n }\n \n dependencies {\n-  annotationProcessor \"org.springframework.boot:spring-boot-configuration-processor\"\n+  annotationProcessor \"org.springframework.boot:spring-boot-autoconfigure-processor\"\n+  implementation \"org.springframework.boot:spring-boot-starter-validation\"\n   \n   testImplementation('org.springframework.boot:spring-boot-starter-test') {\n     exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'\n   }\n   \n-  implementation 'org.springframework.boot:spring-boot-starter-web'\n   implementation project(':instrumentation-core:spring:spring-webmvc-3.1')\n   implementation project(':instrumentation-core:spring:spring-web-3.1')\n-  \n-  implementation 'org.springframework.boot:spring-boot-starter-webflux'\n   implementation project(':instrumentation-core:spring:spring-webflux-5.0')\n   \n   api deps.opentelemetryApi \n-  api \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+\n+  compileOnly \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n+  compileOnly deps.opentelemetryJaeger\n+  compileOnly deps.opentelemetryOtlp\n+  compileOnly group: 'io.grpc', name: 'grpc-api', version: '1.24.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d53a80abbddef5ba6b85d7660aa587aa793e7fb"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8465b752962bb0951405d848aa4569ec11cd373e", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8465b752962bb0951405d848aa4569ec11cd373e", "committedDate": "2020-07-25T15:20:48Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fc41bf842bd4a355d7b7e6e7c2741013490382a", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6fc41bf842bd4a355d7b7e6e7c2741013490382a", "committedDate": "2020-07-26T21:05:02Z", "message": "Update spring-boot-autoconfigure.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f3da1af9a427058fad231dab9a540d56d13e48", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/02f3da1af9a427058fad231dab9a540d56d13e48", "committedDate": "2020-07-26T23:47:39Z", "message": "add conditional on managed channel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7737f3d39cf6d710be0a49683b0247ec80e31758", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7737f3d39cf6d710be0a49683b0247ec80e31758", "committedDate": "2020-07-26T23:48:36Z", "message": "conditional on managed channel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NDQzNTU0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/729#pullrequestreview-455443554", "createdAt": "2020-07-27T02:54:53Z", "commit": {"oid": "7737f3d39cf6d710be0a49683b0247ec80e31758"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2806, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}