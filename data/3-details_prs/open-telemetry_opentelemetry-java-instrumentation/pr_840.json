{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDI5MjEw", "number": 840, "title": "Generate bootstrap jar with gradle instead of when running tests.", "bodyText": "Currently, we create an entire JAR file at runtime every time we run a test, and this takes many seconds. This changes it so it's Gradle that generates and sets up the bootstrap classpath, not SpockRunner. It's essentially the same as the previous state otherwise.\nA clean build may be a bit faster than before, not sure. But more importantly, running the same test over and over goes much faster since the bootstrap jar is up-to-date by Gradle. (I have been running tests over and over a lot recently :P).\nI went with a plugin in Java mainly to be able to continue to copy-paste from Constants.java. I find it easier to maintain personally too.\nIt took a while to get this to work (finding the use of files(Callable) was a doozy) so want to merge and follow up with even more optimizations.\n\n\nThere seem to be only two types of bootstrap jars, normal and normal+servlet. I should be able to tweak it so only these two jars are ever created, which will speed up clean build substantially.\n\n\nSee if we can loosen some restrictions now that the bootstrap classpath is set up at startup instead of at runtime (maybe can merge test and integrationTest back into one? not sure haven't tried yet but I think it might be possible).\n\n\nRemove the unit test bootstrap proxy from our agent code, less test hacks in business logic is good :D", "createdAt": "2020-07-30T09:50:39Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840", "merged": true, "mergeCommit": {"oid": "87bf97da70ef4499e2da41e0ed6c1d86bdd7c2dd"}, "closed": true, "closedAt": "2020-08-02T01:17:53Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc58cLjgH2gAyNDU5MDI5MjEwOmJjMGNhYjk0NTViNmU0NGU2NzZjYjAwZmE2MjIyOTY0ZWM5Y2JhZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6yUEmAFqTQ1OTYxMTUwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bc0cab9455b6e44e676cb00fa6222964ec9cbae6", "committedDate": "2020-07-30T09:44:51Z", "message": "Generate bootstrap jar with gradle instead of when running tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a23c4bf29bb10f632e77f6fdcca1538d1c39db9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4a23c4bf29bb10f632e77f6fdcca1538d1c39db9", "committedDate": "2020-07-30T11:43:01Z", "message": "kill all semicolons"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjY0NDcx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#pullrequestreview-458264471", "createdAt": "2020-07-30T10:07:07Z", "commit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNzowN1rOG5crow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowOToxMVrOG5cv2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MTkzOQ==", "bodyText": "Package is certainly weird :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462891939", "createdAt": "2020-07-30T10:07:07Z", "author": {"login": "iNikem"}, "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -10,6 +10,10 @@ gradlePlugin {\n       id = \"muzzle\"\n       implementationClass = \"MuzzlePlugin\"\n     }\n+    create(\"auto-instrumentation-plugin\") {\n+      id = \"io.opentelemetry.auto.auto-instrumentation\"\n+      implementationClass = \"io.opentelemetry.auto.gradle.instrumentation.AutoInstrumentationPlugin\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MjE5OQ==", "bodyText": "This comment is not relevant here, is it?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892199", "createdAt": "2020-07-30T10:07:37Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5Mjg4NQ==", "bodyText": "Why exactly do we have 2 separate arrays that we merge anyway?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462892885", "createdAt": "2020-07-30T10:08:57Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {\n+\n+  /**\n+   * An exact copy of {@code io.opentelemetry.auto.tooling.Constants#BOOTSTRAP_PACKAGE_PREFIXES}.\n+   *\n+   * <p>This list is needed to initialize the bootstrap classpath because Utils' static initializer\n+   * references bootstrap classes (e.g. AgentClassLoader).\n+   */\n+  public static final String[] BOOTSTRAP_PACKAGE_PREFIXES_COPY = {\n+    \"io.opentelemetry.auto.common.exec\",\n+    \"io.opentelemetry.auto.slf4j\",\n+    \"io.opentelemetry.auto.config\",\n+    \"io.opentelemetry.auto.bootstrap\",\n+    \"io.opentelemetry.auto.instrumentation.api\",\n+    \"io.opentelemetry.auto.shaded\",\n+    \"io.opentelemetry.auto.typedspan\",\n+  };\n+\n+  private static final String[] TEST_BOOTSTRAP_PREFIXES;\n+\n+  static {\n+    final String[] testBS = {\n+      \"io.opentelemetry.OpenTelemetry\", // OpenTelemetry API\n+      \"io.opentelemetry.common\", // OpenTelemetry API\n+      \"io.opentelemetry.context\", // OpenTelemetry API (context prop)\n+      \"io.opentelemetry.correlationcontext\", // OpenTelemetry API\n+      \"io.opentelemetry.internal\", // OpenTelemetry API\n+      \"io.opentelemetry.metrics\", // OpenTelemetry API\n+      \"io.opentelemetry.trace\", // OpenTelemetry API\n+      \"io.opentelemetry.contrib.auto.annotations\", // OpenTelemetry API Contrib\n+      \"io.grpc.Context\", // OpenTelemetry API dependency\n+      \"io.grpc.Deadline\", // OpenTelemetry API dependency\n+      \"io.grpc.PersistentHashArrayMappedTrie\", // OpenTelemetry API dependency\n+      \"io.grpc.ThreadLocalContextStorage\", // OpenTelemetry API dependency\n+      \"org.slf4j\",\n+      \"ch.qos.logback\",\n+      // Tomcat's servlet classes must be on boostrap\n+      // when running tomcat test\n+      \"javax.servlet.ServletContainerInitializer\",\n+      \"javax.servlet.ServletContext\"\n+    };\n+    TEST_BOOTSTRAP_PREFIXES =\n+        Arrays.copyOf(\n+            BOOTSTRAP_PACKAGE_PREFIXES_COPY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MzAxNw==", "bodyText": "Please write a javadoc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r462893017", "createdAt": "2020-07-30T10:09:11Z", "author": {"login": "iNikem"}, "path": "buildSrc/src/main/java/io/opentelemetry/auto/gradle/instrumentation/AutoInstrumentationPlugin.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.auto.gradle.instrumentation;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.Callable;\n+import org.gradle.api.Plugin;\n+import org.gradle.api.Project;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.file.DuplicatesStrategy;\n+import org.gradle.api.plugins.JavaLibraryPlugin;\n+import org.gradle.api.plugins.JavaPlugin;\n+import org.gradle.api.tasks.TaskProvider;\n+import org.gradle.api.tasks.testing.Test;\n+import org.gradle.jvm.tasks.Jar;\n+\n+public class AutoInstrumentationPlugin implements Plugin<Project> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0cab9455b6e44e676cb00fa6222964ec9cbae6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d8827d1258567a19c89481097ba5a1416c8748", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c0d8827d1258567a19c89481097ba5a1416c8748", "committedDate": "2020-07-30T12:40:07Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db765979fa43e0ba65db0b1acc1714f63f0db35d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/db765979fa43e0ba65db0b1acc1714f63f0db35d", "committedDate": "2020-07-30T12:40:18Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c965d5662a7d23edf2648ca50ee2531a858d9c27", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c965d5662a7d23edf2648ca50ee2531a858d9c27", "committedDate": "2020-07-31T00:14:29Z", "message": "ByteCodeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbbf4ba6a4ad448b9de213c1fcfa25232411066b", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/fbbf4ba6a4ad448b9de213c1fcfa25232411066b", "committedDate": "2020-07-31T00:14:34Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into gradle-test-bootstrap-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62f57b3fdf1f5f96f303bd0c9c12b976772132e6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/62f57b3fdf1f5f96f303bd0c9c12b976772132e6", "committedDate": "2020-07-31T00:56:34Z", "message": "Use latestDepTest classpath for its bootstrap jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6607c7bd523043eb9fd7222db9e392fef2a68a43", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6607c7bd523043eb9fd7222db9e392fef2a68a43", "committedDate": "2020-07-31T01:03:17Z", "message": "Rename package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b6eb9e92c677e961249eb918cff98b38d343a45", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/1b6eb9e92c677e961249eb918cff98b38d343a45", "committedDate": "2020-07-31T01:06:06Z", "message": "Reformat comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42ff6bc17dfec63ba60977997c721747876a65a3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/42ff6bc17dfec63ba60977997c721747876a65a3", "committedDate": "2020-07-31T02:06:26Z", "message": "Bootstrap jar absolute path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b38da54228e7770dd03e9eaa3012982cc35c4c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a2b38da54228e7770dd03e9eaa3012982cc35c4c", "committedDate": "2020-07-31T04:50:24Z", "message": "Save bootstrap jar to reports dir."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22735eaf180aef9870d2acf08d27d6a75a690192", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22735eaf180aef9870d2acf08d27d6a75a690192", "committedDate": "2020-07-31T05:05:27Z", "message": "Debug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd8904114c00cb2dedbbeb9a4aa81c4ab7842741", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bd8904114c00cb2dedbbeb9a4aa81c4ab7842741", "committedDate": "2020-07-31T03:55:55Z", "message": "[WIP] Try without cache"}, "afterCommit": {"oid": "22735eaf180aef9870d2acf08d27d6a75a690192", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22735eaf180aef9870d2acf08d27d6a75a690192", "committedDate": "2020-07-31T05:05:27Z", "message": "Debug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39b3358f3d71669c78ab594ca7ee25a4411d60b5", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/39b3358f3d71669c78ab594ca7ee25a4411d60b5", "committedDate": "2020-07-31T05:07:07Z", "message": "Debug"}, "afterCommit": {"oid": "58cc63730a117fe7a3ac0581d6e5a075a04f662c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/58cc63730a117fe7a3ac0581d6e5a075a04f662c", "committedDate": "2020-07-31T05:08:41Z", "message": "Debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "committedDate": "2020-07-31T05:22:02Z", "message": "Debug"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58cc63730a117fe7a3ac0581d6e5a075a04f662c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/58cc63730a117fe7a3ac0581d6e5a075a04f662c", "committedDate": "2020-07-31T05:08:41Z", "message": "Debug"}, "afterCommit": {"oid": "bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/bb54807f65ce6c9430a5afddf9cfe6a7a00eccc2", "committedDate": "2020-07-31T05:22:02Z", "message": "Debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9124dcc5170c99f01d582a90328f4ef010062b3e", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9124dcc5170c99f01d582a90328f4ef010062b3e", "committedDate": "2020-07-31T05:44:04Z", "message": "Use project.getBuildDir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec628ec3ba7ef7c6137e0f10d629040f21984b5d", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ec628ec3ba7ef7c6137e0f10d629040f21984b5d", "committedDate": "2020-07-31T05:46:45Z", "message": "Restore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afdee18c1b44ade1a8344e129c570075c8018bf3", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/afdee18c1b44ade1a8344e129c570075c8018bf3", "committedDate": "2020-07-31T05:46:55Z", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-auto-instr-java into gradle-test-bootstrap-jar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8df84823d0abec9ef5694a9b5ba45c84c201a6", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/cf8df84823d0abec9ef5694a9b5ba45c84c201a6", "committedDate": "2020-07-31T05:53:48Z", "message": "Revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d05cc8df9454e36db6aa7e5d662a63022e14be", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f7d05cc8df9454e36db6aa7e5d662a63022e14be", "committedDate": "2020-07-31T06:53:09Z", "message": "testFieldInjection is instrumentation test too."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/6346080ecc60bd57d26f536d1803dd7903234d86", "committedDate": "2020-07-31T07:36:47Z", "message": "Split out bytecode tests for testing-common"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDAyODA5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#pullrequestreview-459002809", "createdAt": "2020-07-31T08:28:25Z", "commit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoyODoyNVrOG6AWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODoyODoyNVrOG6AWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NjM0MA==", "bodyText": "@trask This started throwing an exception even though the assertions pass, any idea if this is a valid fix?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463476340", "createdAt": "2020-07-31T08:28:25Z", "author": {"login": "anuraaga"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -177,8 +180,12 @@ class FieldBackedProviderTest extends AgentTestRunner {\n \n   def \"context classes are redefine safe\"() {\n     when:\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(KeyClass, ClasspathUtils.convertToByteArray(KeyClass)))\n-    ByteBuddyAgent.getInstrumentation().redefineClasses(new ClassDefinition(UntransformableKeyClass, ClasspathUtils.convertToByteArray(UntransformableKeyClass)))\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6346080ecc60bd57d26f536d1803dd7903234d86"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d23c8e18116ef65c00528397db092f857e1c9239", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d23c8e18116ef65c00528397db092f857e1c9239", "committedDate": "2020-08-01T03:23:18Z", "message": "Apply jacoco configuration to all tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36cf60deb77ceb62a59ff6691dce2b5087e88f2c", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/36cf60deb77ceb62a59ff6691dce2b5087e88f2c", "committedDate": "2020-08-01T03:25:51Z", "message": "Add note that jacoco may be causing frustration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5395896946efa3328dc62881582311159c3e2302", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5395896946efa3328dc62881582311159c3e2302", "committedDate": "2020-08-01T03:30:52Z", "message": "YOLO alert - Hope my guess at the reason is correct"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTkyMjEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#pullrequestreview-459592210", "createdAt": "2020-08-01T17:29:24Z", "commit": {"oid": "5395896946efa3328dc62881582311159c3e2302"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzoyOToyNFrOG6fQlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMToxNFrOG6fRKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // NB: This test will fail if some other agent is also running that fills the class structure\n          \n          \n            \n              // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n          \n          \n            \n              // make sure jacoco exclusion is working.\n          \n          \n            \n              // NB: This test will fail if some other agent is also running that modifies the class structure\n          \n          \n            \n              // in a way that is incompatible with redefining the class back to its original bytecode.\n          \n          \n            \n              // A likely culprit is jacoco if you start seeing failure here due to a change make sure jacoco\n          \n          \n            \n              // exclusion is working.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982741", "createdAt": "2020-08-01T17:29:24Z", "author": {"login": "trask"}, "path": "testing-common/src/test/groovy/context/FieldBackedProviderTest.groovy", "diffHunk": "@@ -175,6 +178,9 @@ class FieldBackedProviderTest extends AgentTestRunner {\n     new UntransformableKeyClass().incrementContextCount() == 1\n   }\n \n+  // NB: This test will fail if some other agent is also running that fills the class structure\n+  // before we can. A likely culprit is jacoco if you start seeing failure here due to a change\n+  // make sure jacoco exclusion is working.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395896946efa3328dc62881582311159c3e2302"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjg5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n          \n          \n            \n               * meaning it has one field available for us to add context through redefinition. {@link\n          \n          \n            \n               * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n          \n          \n            \n               * thus has no available space for us to add context via redefinition.\n          \n          \n            \n               * A class which will not be transformed by our instrumentation due to {@link\n          \n          \n            \n               * FieldBackedProviderTest#shouldTransformClass(String, ClassLoader)}.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#discussion_r463982890", "createdAt": "2020-08-01T17:31:14Z", "author": {"login": "trask"}, "path": "testing-common/src/test/java/context/ContextTestInstrumentation.java", "diffHunk": "@@ -194,7 +194,12 @@ public void putContextCount(final int value) {\n     }\n   }\n \n-  /** A class which cannot be transformed by our instrumentation. */\n+  /**\n+   * A class which cannot be transformed by our instrumentation. {@link KeyClass} is an empty object\n+   * meaning it has one field available for us to add context through redefinition. {@link\n+   * UntransformableKeyClass} has an implicit reference to its parent class, {@link KeyClass} and\n+   * thus has no available space for us to add context via redefinition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5395896946efa3328dc62881582311159c3e2302"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8350101bc08e6cdbd16e3e9c6e4844b1a7c9fb0", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/f8350101bc08e6cdbd16e3e9c6e4844b1a7c9fb0", "committedDate": "2020-08-02T00:26:29Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NjExNTAw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/840#pullrequestreview-459611500", "createdAt": "2020-08-02T00:30:52Z", "commit": {"oid": "f8350101bc08e6cdbd16e3e9c6e4844b1a7c9fb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2896, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}