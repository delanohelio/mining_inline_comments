{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNTMyNzU4", "number": 1068, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxODozN1rOEaTC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMTo1NzoxMlrOEaw7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDEwNDU5OnYy", "diffSide": "RIGHT", "path": "docs/java-7-rationale.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxODozN1rOHDo9yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDozOTo1M1rOHDpR0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3ODk1Mw==", "bodyText": "I like Rationale docs hope we doc out more of them :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r473578953", "createdAt": "2020-08-20T04:18:37Z", "author": {"login": "anuraaga"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -0,0 +1,40 @@\n+## Rationale for not supporting Java 7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0411ef6f5d6f7c105d319ca8619bb272b04f59"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4NDA4Mg==", "bodyText": "I blame your and @adriancole's influence \ud83d\ude01", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r473584082", "createdAt": "2020-08-20T04:39:53Z", "author": {"login": "trask"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -0,0 +1,40 @@\n+## Rationale for not supporting Java 7", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3ODk1Mw=="}, "originalCommit": {"oid": "9a0411ef6f5d6f7c105d319ca8619bb272b04f59"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDEwNjE3OnYy", "diffSide": "RIGHT", "path": "docs/java-7-rationale.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxOTo0M1rOHDo-rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxOTo0M1rOHDo-rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3OTE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Both JUnit 5 and Testcontainers both require Java 8+.\n          \n          \n            \n            Both JUnit 5 and Testcontainers require Java 8+.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r473579183", "createdAt": "2020-08-20T04:19:43Z", "author": {"login": "anuraaga"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -0,0 +1,40 @@\n+## Rationale for not supporting Java 7\n+\n+### Android support is no longer tied to Java 7\n+\n+Even for supporting old Android API levels:\n+\n+> If you're building your app using Android Gradle plugin 4.0.0 or higher, the plugin extends\n+> support for using a number of Java 8 language APIs <b>without requiring a minimum API level for\n+> your app</b>.\n+\n+(https://developer.android.com/studio/write/java8-support#library-desugaring)\n+\n+There are some Java 8 APIs that Android does not desugar, but we can use\n+[animal sniffer plugin](https://github.com/xvik/gradle-animalsniffer-plugin) to ensure we don't use\n+those particular Java 8 APIs that are not available in the base Android level we decide to support,\n+e.g. OkHttp takes this approach to\n+[ensure compliance with Android API level 21](https://github.com/square/okhttp/blob/96a2118dd447ebc28a64d9b11a431ca642edc441/build.gradle#L144-L153)\n+\n+We will use this approach for the `instrumentation-api` module and for any library (manual)\n+instrumentation that would be useful to Android developers\n+(e.g. library instrumentation for OkHttp).\n+\n+### Modern test tooling requires Java 8+\n+\n+Both JUnit 5 and Testcontainers both require Java 8+.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0411ef6f5d6f7c105d319ca8619bb272b04f59"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTAwMTczOnYy", "diffSide": "RIGHT", "path": "docs/java-7-rationale.md", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMTo1NzoxMlrOHEY8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMjozMjozN1rOHFB3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg==", "bodyText": "the option brave uses is retrolambda + animal sniffer until https://youtrack.jetbrains.com/issue/IDEA-85478\nwhether your tests execute in JRE 1.7 is less important than having code compile correctly. You can use a different process to smoke test a few paths as it is unlikely to break as long as you lock signatures and compilation levels.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r474365092", "createdAt": "2020-08-21T01:57:12Z", "author": {"login": "codefromthecrypt"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1MzEzMQ==", "bodyText": "Instana has a test harness that forks test apps and runs test agents/instrumentations. The test harness uses testcontainers. It can compile and run the test apps in various JVM vendors, versions, languages (java, groovy, scala, kotlin..). There is an API that communicates between the app under test and the harness.\nIts a lot of work. So in my opinion an honest answer to the \"rationale\" is stating the amount of work the project is willing to invest into these kind of compatibility tests. It also would be honest to state that the project does NOT do any kid of compatibility tests.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r474453131", "createdAt": "2020-08-21T07:09:02Z", "author": {"login": "CodingFabian"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NDQ4Mw==", "bodyText": "the project does NOT do any kind of compatibility tests\n\nNot sure why you think that? This only limits us to not running test apps on Java 7. We can (and do) run tests on Java 8, 11, 14, Scala, Groovy, and Kotlin. We also have container based smoke tests to test specific application servers (e.g. the ever problematic for javaagents Wildfly).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r474794483", "createdAt": "2020-08-21T16:13:13Z", "author": {"login": "trask"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMjYzNQ==", "bodyText": "Also, not sure why you were compelled to take @adriancole's \"popcorn\" bait. I honestly had more respect for Instana than to expect that.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r475022635", "createdAt": "2020-08-22T00:42:29Z", "author": {"login": "trask"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMjg3NA==", "bodyText": "in case folks don't necessarily have patience to do digging, If you look at the \"Checks\" tab on this PR, you can see 3 JDKs used to build and run the unit tests of this project: 8, 11, 14  Since this issue started about unit tests preventing use of JRE, it kindof makes sense to anchor about build+test invocation and might be subtle what Fabian said, which was different than normal unit tests.\nThe closest thing to what Fabian said was the smoke test which I think Trask was hinting at when mentioning pesky runtimes. Unless I'm missing something, there are a couple major differences between what fabian said and what is done in the smoke tests.\n\nThe smoke tests appear firstly to only verify the agent doesn't crash the runtime.\n\nThis is not so much a portability test, but a safety latch.\n\n\nThe smoke tests only seem to run in one JRE\n\nfar less important than the other point.\n\n\n\nThis thread is taking its own path, but I think it is important for folks to know the difference between what you would expect a profession vendor to have to do vs what is in this project. It is also important to ack that what is in this project is not limited to what's done today and it can catch up. It might be a good idea if we want to say we are doing portability testing to lift fabian's advice into an issue as looking at the amount of people working on this project, it is certainly accomplish-able resource-wise and it is nice to have someone tell you a free design of how to do it!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r475022874", "createdAt": "2020-08-22T00:44:31Z", "author": {"login": "codefromthecrypt"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzU4NQ==", "bodyText": "The smoke tests appear firstly to only verify the agent doesn't crash the runtime\n\nThis is not true.\n\nThe smoke tests only seem to run in one JRE\n\nThis is not true either.\n\nIt is also important to ack that what is in this project is not limited to what's done today\n\n\ud83d\udc4d and you would have been right about the statements above until recently", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r475027585", "createdAt": "2020-08-22T01:10:03Z", "author": {"login": "trask"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAzMDk2OQ==", "bodyText": "Might want to update the README with what's going on as yeah I didn't pull since when less than two weeks ago some of this changed,\n\nalso the build logs are not helpful understanding things as everything is inlined in groovy. there's no status message or visibility into matrixes due to this (unlike the actions which are using build supplied parameters.\nYou are right that right now, very recently there are a few frameworks smoke tested.\nEx. spring boot 2.3 (only this version) checks that spans are created from synchronous controllers using JREs coded into the test\nI'm sure you are aware that more problems happen than scenarios like this and likely Instana would be doing more than this. Ex async is where almost all breaks occur. There's a heap of work to go, but truth be told this is a good start!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r475030969", "createdAt": "2020-08-22T01:43:17Z", "author": {"login": "codefromthecrypt"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAzNTUzMw==", "bodyText": "I'm not sure if you've seen, all of the instrumentation modules have pretty extensive integration tests, which perform full bytecode instrumentation and run against Java 8, 11 and 14.\nThat's generally where we catch problems, e.g. there are lots of tests for lots of different async frameworks.\nOverall there are about 3000 of these integration tests that run against each Java version (e.g. a recent gradle build scan for Java 8).\n[credit for this extensive test suite goes to DataDog who contributed the original codebase for this project]", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1068#discussion_r475035533", "createdAt": "2020-08-22T02:32:37Z", "author": {"login": "trask"}, "path": "docs/java-7-rationale.md", "diffHunk": "@@ -33,8 +33,37 @@ But bytecode instrumentation tends to be much more sensitive to Java versions th\n we would lose a lot of confidence in the quality of our Java 7 support without being able to run our\n standard tests against it.\n \n+Another option would be to run the \"code under test\" in a separate JVM from our test harness, which", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM2NTA5Mg=="}, "originalCommit": {"oid": "9e5f24f273e31be7f7f28aa6715a513711875191"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 89, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}