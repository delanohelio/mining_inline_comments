{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjQwODE5", "number": 202, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo0ODo0MlrODkiC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzo1NFrODkiNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjMzMTMwOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo0ODo0MlrOFw5_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzozMDo0NlrOFxFwLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n          \n          \n            \n                    .or(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n          \n            \n                return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"));\n          \n      \n    \n    \n  \n\nsafeHasSuperType includes itself already", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386826210", "createdAt": "2020-03-03T06:48:42Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "diffHunk": "@@ -38,7 +43,8 @@ public GrpcClientBuilderInstrumentation() {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractManagedChannelImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n+        .or(named(\"io.grpc.ManagedChannelBuilder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODc5OA==", "bodyText": "Done!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387018798", "createdAt": "2020-03-03T13:30:46Z", "author": {"login": "prydin"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/GrpcClientBuilderInstrumentation.java", "diffHunk": "@@ -38,7 +43,8 @@ public GrpcClientBuilderInstrumentation() {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    return named(\"io.grpc.internal.AbstractManagedChannelImplBuilder\");\n+    return safeHasSuperType(named(\"io.grpc.ManagedChannelBuilder\"))\n+        .or(named(\"io.grpc.ManagedChannelBuilder\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjIxMA=="}, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM0MTgwOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1NDo0MFrOFw6GWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxODowN1rOFxHiLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nlet's remove RESOURCE_NAME here. @tylerbenson has mentioned previously that in general RESOURCE_NAME should be migrated to span name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386827866", "createdAt": "2020-03-03T06:54:40Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -30,27 +30,34 @@\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.AttributeValue;\n import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n public class TracingClientInterceptor implements ClientInterceptor {\n+  private final InetSocketAddress peerAddress;\n \n-  public static final TracingClientInterceptor INSTANCE = new TracingClientInterceptor();\n+  public TracingClientInterceptor(final InetSocketAddress peerAddress) {\n+    this.peerAddress = peerAddress;\n+  }\n \n   @Override\n   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n       final MethodDescriptor<ReqT, RespT> method,\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final Span span = TRACER.spanBuilder(\"grpc.client\").setSpanKind(CLIENT).startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    final String methodName = method.getFullMethodName();\n+    final Span span = TRACER.spanBuilder(methodName).setSpanKind(CLIENT).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0Nzk4MQ==", "bodyText": "Done!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387047981", "createdAt": "2020-03-03T14:18:07Z", "author": {"login": "prydin"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/client/TracingClientInterceptor.java", "diffHunk": "@@ -30,27 +30,34 @@\n import io.grpc.MethodDescriptor;\n import io.grpc.Status;\n import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.auto.instrumentation.grpc.common.GrpcHelper;\n import io.opentelemetry.context.Scope;\n import io.opentelemetry.trace.AttributeValue;\n import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n public class TracingClientInterceptor implements ClientInterceptor {\n+  private final InetSocketAddress peerAddress;\n \n-  public static final TracingClientInterceptor INSTANCE = new TracingClientInterceptor();\n+  public TracingClientInterceptor(final InetSocketAddress peerAddress) {\n+    this.peerAddress = peerAddress;\n+  }\n \n   @Override\n   public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n       final MethodDescriptor<ReqT, RespT> method,\n       final CallOptions callOptions,\n       final Channel next) {\n \n-    final Span span = TRACER.spanBuilder(\"grpc.client\").setSpanKind(CLIENT).startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, method.getFullMethodName());\n+    final String methodName = method.getFullMethodName();\n+    final Span span = TRACER.spanBuilder(methodName).setSpanKind(CLIENT).startSpan();\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNzg2Ng=="}, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM0OTMwOnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjo1ODo1NFrOFw6K-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxNDowM1rOFxHXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTA1MQ==", "bodyText": "There's a fancy (and more efficient) way to do this.\nCheck out the context store functionality, e.g. here and here\nUsing this will inject a field into ManagedChannelBuilder to track the InetSocketAddress if possible (and if not it will fall back to using WeakMap)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829051", "createdAt": "2020-03-03T06:58:54Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.grpc.common;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.bootstrap.WeakMap;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n+\n+public class GrpcHelper {\n+  private static final WeakMap<ManagedChannelBuilder, InetSocketAddress> builderToAddress =\n+      WeakMap.Provider.newWeakMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NTI2Mg==", "bodyText": "Done!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387045262", "createdAt": "2020-03-03T14:14:03Z", "author": {"login": "prydin"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/common/GrpcHelper.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.opentelemetry.auto.instrumentation.grpc.common;\n+\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentelemetry.auto.bootstrap.WeakMap;\n+import io.opentelemetry.auto.instrumentation.api.MoreTags;\n+import io.opentelemetry.trace.Span;\n+import java.net.InetSocketAddress;\n+\n+public class GrpcHelper {\n+  private static final WeakMap<ManagedChannelBuilder, InetSocketAddress> builderToAddress =\n+      WeakMap.Provider.newWeakMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTA1MQ=="}, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM1NDc3OnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMTo0OFrOFw6OPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxODoyMlrOFxHi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.setAttribute(MoreTags.RESOURCE_NAME, methodName);\n          \n      \n    \n    \n  \n\nsame comment as above", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386829887", "createdAt": "2020-03-03T07:01:48Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -57,7 +62,11 @@ private TracingServerInterceptor() {}\n       spanBuilder.setNoParent();\n     }\n     final Span span = spanBuilder.startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0ODE1NQ==", "bodyText": "Done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387048155", "createdAt": "2020-03-03T14:18:22Z", "author": {"login": "prydin"}, "path": "instrumentation/grpc-1.5/src/main/java/io/opentelemetry/auto/instrumentation/grpc/server/TracingServerInterceptor.java", "diffHunk": "@@ -57,7 +62,11 @@ private TracingServerInterceptor() {}\n       spanBuilder.setNoParent();\n     }\n     final Span span = spanBuilder.startSpan();\n-    span.setAttribute(MoreTags.RESOURCE_NAME, call.getMethodDescriptor().getFullMethodName());\n+    span.setAttribute(MoreTags.RESOURCE_NAME, methodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyOTg4Nw=="}, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM1Nzk0OnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzozNlrOFw6QMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzozNlrOFw6QMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDM4Ng==", "bodyText": "Nice, dealing with different versions is so clean with groovy! \ud83d\ude06", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386830386", "createdAt": "2020-03-03T07:03:36Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "diffHunk": "@@ -68,9 +69,17 @@ class GrpcStreamingTest extends AgentTestRunner {\n         }\n       }\n     }\n-    Server server = InProcessServerBuilder.forName(getClass().name).addService(greeter).directExecutor().build().start()\n-\n-    ManagedChannel channel = InProcessChannelBuilder.forName(getClass().name).build()\n+    def port = PortUtils.randomOpenPort()\n+    Server server = ServerBuilder.forPort(port).addService(greeter).build().start()\n+    ManagedChannelBuilder channelBuilder = ManagedChannelBuilder.forAddress(\"localhost\", port)\n+\n+    // Depending on the version of gRPC usePlainText may or may not take an argument.\n+    try {\n+      channelBuilder.usePlaintext()\n+    } catch (MissingMethodException e) {\n+      channelBuilder.usePlaintext(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjM1ODQ5OnYy", "diffSide": "RIGHT", "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNzowMzo1NFrOFw6Qhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxODozOFrOFxHjkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"$MoreTags.RESOURCE_NAME\" \"example.Greeter/Conversation\"\n          \n      \n    \n    \n  \n\netc", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r386830470", "createdAt": "2020-03-03T07:03:54Z", "author": {"login": "trask"}, "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "diffHunk": "@@ -102,14 +111,18 @@ class GrpcStreamingTest extends AgentTestRunner {\n     assertTraces(1) {\n       trace(0, 2) {\n         span(0) {\n-          operationName \"grpc.client\"\n+          operationName \"example.Greeter/Conversation\"\n           spanKind CLIENT\n           parent()\n           errored false\n           tags {\n             \"$MoreTags.RESOURCE_NAME\" \"example.Greeter/Conversation\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0ODMzNw==", "bodyText": "Done", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/202#discussion_r387048337", "createdAt": "2020-03-03T14:18:38Z", "author": {"login": "prydin"}, "path": "instrumentation/grpc-1.5/src/test/groovy/GrpcStreamingTest.groovy", "diffHunk": "@@ -102,14 +111,18 @@ class GrpcStreamingTest extends AgentTestRunner {\n     assertTraces(1) {\n       trace(0, 2) {\n         span(0) {\n-          operationName \"grpc.client\"\n+          operationName \"example.Greeter/Conversation\"\n           spanKind CLIENT\n           parent()\n           errored false\n           tags {\n             \"$MoreTags.RESOURCE_NAME\" \"example.Greeter/Conversation\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMDQ3MA=="}, "originalCommit": {"oid": "e224b263d84123fdc3f320b92616ee56be4332e5"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 587, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}