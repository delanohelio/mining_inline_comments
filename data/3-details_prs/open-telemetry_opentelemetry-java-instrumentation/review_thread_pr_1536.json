{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjcyNjY4", "number": 1536, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowMDo0MlrOE0O4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyODowOVrOE1EUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA1MTI0OnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowMDo0MlrOHr2VDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1MzoxM1rOHtDVJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MDk0Mg==", "bodyText": "This is unfortunate but seems to be the only way to support streams, oh well.\nFor non-streams, will we use the event types?\nhttps://github.com/aws/aws-lambda-java-libs/blob/master/aws-lambda-java-events/src/main/java/com/amazonaws/services/lambda/runtime/events/APIGatewayProxyRequestEvent.java", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515740942", "createdAt": "2020-11-02T05:00:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import java.io.InputStream;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private final Headers headers;\n+\n+  private ApiGatewayProxyRequest(Headers headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MjI1OQ==", "bodyText": "Though I wonder if supporting stream is actually important. Looking at this, it seems like the body is encoded into JSON anyways so there is no benefit in the stream handler - so maybe it's a reasonable and practical limitation for us to just detect that event type?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515742259", "createdAt": "2020-11-02T05:07:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import java.io.InputStream;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private final Headers headers;\n+\n+  private ApiGatewayProxyRequest(Headers headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MDk0Mg=="}, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjUzNA==", "bodyText": "Yes, events for non-streams should be doable, at least at the wrapper level. Handler gets argument type from a child class so in this case afair it's not possible to get the headers if arg is not the event type (correct me if I'm wrong).\nWith regards to streams, now we have safeguards (only if propagators configured) and current implementation of the AWS proxy uses ButeArrayInputStream which is markable, so I'd say it's safe to leave it (as a drop-in method for customers already suing streams handler).\nIf you agree, we can merge this PR and I'll file another one for non-streams wrapper.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517002534", "createdAt": "2020-11-03T22:53:13Z", "author": {"login": "kubawach"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import java.io.InputStream;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private final Headers headers;\n+\n+  private ApiGatewayProxyRequest(Headers headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MDk0Mg=="}, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjA1MzU1OnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNTowMjowN1rOHr2WQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjo1MjozNlrOHsM_HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTI0OQ==", "bodyText": "Do you think it's possible to do this only if the propagator is configured?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r515741249", "createdAt": "2020-11-02T05:02:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "diffHunk": "@@ -50,11 +51,16 @@ protected TracingRequestStreamHandler(AwsLambdaTracer tracer) {\n   }\n \n   @Override\n-  public final void handleRequest(InputStream input, OutputStream output, Context context)\n+  public void handleRequest(InputStream input, OutputStream output, Context context)\n       throws IOException {\n-    Span span = tracer.startSpan(context, Kind.SERVER);\n+\n+    InputStreamFactory streamFactory = InputStreamFactory.forStream(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExMjE1Ng==", "bodyText": "Great idea, will implement a switch,", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r516112156", "createdAt": "2020-11-02T16:52:36Z", "author": {"login": "kubawach"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/TracingRequestStreamHandler.java", "diffHunk": "@@ -50,11 +51,16 @@ protected TracingRequestStreamHandler(AwsLambdaTracer tracer) {\n   }\n \n   @Override\n-  public final void handleRequest(InputStream input, OutputStream output, Context context)\n+  public void handleRequest(InputStream input, OutputStream output, Context context)\n       throws IOException {\n-    Span span = tracer.startSpan(context, Kind.SERVER);\n+\n+    InputStreamFactory streamFactory = InputStreamFactory.forStream(input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc0MTI0OQ=="}, "originalCommit": {"oid": "90009c342b4472dc510792b43c75b7c3c1f150a0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDgwNTE5OnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyNjozMFrOHtIthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzoyOTozMFrOHvu9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDY5NA==", "bodyText": "I don't think we need afterburner since we're not mapping to POJO, just reading the tree.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517090694", "createdAt": "2020-11-04T04:26:30Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "diffHunk": "@@ -17,8 +17,12 @@ apply from: \"$rootDir/gradle/instrumentation-library.gradle\"\n \n dependencies {\n   library group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.0.0'\n+  library group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-core', version: '1.5.2'\n+\n   compileOnly deps.opentelemetrySdk\n \n+  compile('com.fasterxml.jackson.core:jackson-databind:2.10.3', 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.10')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwMDI5MQ==", "bodyText": "There is a mapping call fetching Headers class instance - return OBJECT_MAPPER.readValue(jParser, Headers.class); I believe that's optimised with afterburner (although I'm not expert here ;) ).", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517200291", "createdAt": "2020-11-04T09:20:19Z", "author": {"login": "kubawach"}, "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "diffHunk": "@@ -17,8 +17,12 @@ apply from: \"$rootDir/gradle/instrumentation-library.gradle\"\n \n dependencies {\n   library group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.0.0'\n+  library group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-core', version: '1.5.2'\n+\n   compileOnly deps.opentelemetrySdk\n \n+  compile('com.fasterxml.jackson.core:jackson-databind:2.10.3', 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.10')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDY5NA=="}, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NTUwNg==", "bodyText": "Ah I missed that. That being said, since we're telemetry I don't think we should try for \"more than the base\". Do you know if aws SDK uses afterburner? If they do no problem adding it :) But if not we should try to stick to their dependence as much as possible and I would avoid it.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r519775506", "createdAt": "2020-11-09T12:37:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "diffHunk": "@@ -17,8 +17,12 @@ apply from: \"$rootDir/gradle/instrumentation-library.gradle\"\n \n dependencies {\n   library group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.0.0'\n+  library group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-core', version: '1.5.2'\n+\n   compileOnly deps.opentelemetrySdk\n \n+  compile('com.fasterxml.jackson.core:jackson-databind:2.10.3', 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.10')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDY5NA=="}, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNDY1MQ==", "bodyText": "Noted for future assignments, thanks :) Here it's ok as the afterburner is references by the SDK (in particular by 'aws-serverless-java-container-core').", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r519814651", "createdAt": "2020-11-09T13:29:30Z", "author": {"login": "kubawach"}, "path": "instrumentation/aws-lambda-1.0/library/aws-lambda-1.0-library.gradle", "diffHunk": "@@ -17,8 +17,12 @@ apply from: \"$rootDir/gradle/instrumentation-library.gradle\"\n \n dependencies {\n   library group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.0.0'\n+  library group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-core', version: '1.5.2'\n+\n   compileOnly deps.opentelemetrySdk\n \n+  compile('com.fasterxml.jackson.core:jackson-databind:2.10.3', 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.10')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDY5NA=="}, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDgwODM4OnYy", "diffSide": "RIGHT", "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyODowOVrOHtIvMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTowMjo1M1rOHtOv6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MTEyMA==", "bodyText": "IIUC, if the x-ray propagator is configured, fields wouldn't be empty but in that case we want to read the env var. Should we compare to its fields?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517091120", "createdAt": "2020-11-04T04:28:09Z", "author": {"login": "anuraaga"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import io.opentelemetry.api.OpenTelemetry;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.apache.commons.io.IOUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+abstract class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private static boolean noHttpPropagationNeeded() {\n+    return OpenTelemetry.getGlobalPropagators().getTextMapPropagator().fields().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4OTYxMA==", "bodyText": "Hmmm yes, sound idea. I forgot about non-http propagator :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1536#discussion_r517189610", "createdAt": "2020-11-04T09:02:53Z", "author": {"login": "kubawach"}, "path": "instrumentation/aws-lambda-1.0/library/src/main/java/io/opentelemetry/instrumentation/awslambda/v1_0/ApiGatewayProxyRequest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.instrumentation.awslambda.v1_0;\n+\n+import com.amazonaws.serverless.proxy.model.Headers;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n+import io.opentelemetry.api.OpenTelemetry;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.apache.commons.io.IOUtils;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+abstract class ApiGatewayProxyRequest {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ApiGatewayProxyRequest.class);\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+  static {\n+    OBJECT_MAPPER.registerModule(new AfterburnerModule());\n+  }\n+\n+  private static boolean noHttpPropagationNeeded() {\n+    return OpenTelemetry.getGlobalPropagators().getTextMapPropagator().fields().isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MTEyMA=="}, "originalCommit": {"oid": "26001403facaef6cef2861d6ae40fad5a8456e27"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4770, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}