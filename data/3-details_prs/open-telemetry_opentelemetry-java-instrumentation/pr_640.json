{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTU4MTY2", "number": 640, "title": "[1] Create spring-core project in instrumentation-core/spring", "bodyText": "Replace the instrumentation-core:spring with instrumentation-core:spring:spring-core\nAs of now this project only has one http interceptor for RestTemplate. I plan to add spring annotations and aspects here that I will use in my autoconfigurations.\nThe instrumentation-core/spring folder will now contain:\n\nspring-core (this pr)\nspring-webmvc-3.1-core project\nspring-webflux-5.0-core project\nspring-autoconfigure project (I haven't created a pr yet. It will contain this logic autoconfigure )\nspring-starter project (I haven't created a pr. It will roughly contain this logic spring-starter )\n....\n\nI'm holding off on writing tests until I get these changes approved.", "createdAt": "2020-07-06T19:22:33Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640", "merged": true, "mergeCommit": {"oid": "c79be44de28d3b5cc2cb59c556b94c34261b9a3b"}, "closed": true, "closedAt": "2020-07-09T03:48:55Z", "author": {"login": "mabdinur"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyf590AFqTQ0MzU5MDQ4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczGOKPgFqTQ0NTI2MTM0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTkwNDg1", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-443590485", "createdAt": "2020-07-07T06:18:29Z", "commit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjoxODoyOVrOGtwhCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNjozMjoyOFrOGtw1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzMzk5NQ==", "bodyText": "Is this used?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450633995", "createdAt": "2020-07-07T06:18:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.spring.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+dependencies {\n+  implementation \"org.springframework:spring-context:3.1.0.RELEASE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNDIyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              implementation \"org.springframework:spring-webmvc:3.1.0.RELEASE\"\n          \n          \n            \n              api \"org.springframework:spring-webmvc:3.1.0.RELEASE\"\n          \n      \n    \n    \n  \n\nYou expose this in the API of this module (you have a public class of type ClientHttpRequestInterceptor)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450634221", "createdAt": "2020-07-07T06:19:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.spring.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+dependencies {\n+  implementation \"org.springframework:spring-context:3.1.0.RELEASE\"\n+  implementation \"org.springframework:spring-webmvc:3.1.0.RELEASE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNDQ0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              compileOnly deps.opentelemetryApi\n          \n          \n            \n              implementation deps.opentelemetryApi\n          \n      \n    \n    \n  \n\nManual instrumentation requires this so we make sure the POM reflects it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450634449", "createdAt": "2020-07-07T06:19:46Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.spring.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+dependencies {\n+  implementation \"org.springframework:spring-context:3.1.0.RELEASE\"\n+  implementation \"org.springframework:spring-webmvc:3.1.0.RELEASE\"\n+\n+  compileOnly deps.opentelemetryApi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNDY2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              compileOnly deps.opentelemetrySdk\n          \n          \n            \n              compileOnly \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"\n          \n      \n    \n    \n  \n\nNot used (instrumentation would never depend on the SDK, only API). You may need to add to testImplementation if needed", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450634668", "createdAt": "2020-07-07T06:20:19Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.spring.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'\n+\n+dependencies {\n+  implementation \"org.springframework:spring-context:3.1.0.RELEASE\"\n+  implementation \"org.springframework:spring-webmvc:3.1.0.RELEASE\"\n+\n+  compileOnly deps.opentelemetryApi\n+  compileOnly deps.opentelemetrySdk\n+  compileOnly \"io.opentelemetry:opentelemetry-exporters-logging:0.5.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNTA5NQ==", "bodyText": "This class should not be named Test. Also, this is an interceptor that uses opentelemetry, so better name is OpenTelemetryRequestInterceptor", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450635095", "createdAt": "2020-07-07T06:21:38Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNTcxOA==", "bodyText": "It looks like we're targeting an old version of spring which is good since it means we can support more apps. But it means we should stick with default Java 7", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450635718", "createdAt": "2020-07-07T06:23:24Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+group = 'io.opentelemetry.spring.instrumentation'\n+version = '0.0.1-SNAPSHOT'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+sourceCompatibility = '8'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNjI1Mg==", "bodyText": "Package should be io.opentelemetry.instrumentation.spring.httpclients", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450636252", "createdAt": "2020-07-07T06:24:40Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzNjQzNw==", "bodyText": "@Autowired perhaps", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450636437", "createdAt": "2020-07-07T06:25:14Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzODA2Mg==", "bodyText": "@jkwatson @carlosalberto I haven't followed up on the injection + context issue yet, but wanted to point out this code looks pretty confusing to me, instrumentation just wants to inject a span so round-tripping through context is obtuse. We can save some thread-local lookups by reading the current context before creating the span and creating a new context with explicit propagation, but that would be even more complexity that goes away if just injecting a span.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450638062", "createdAt": "2020-07-07T06:29:22Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public ClientHttpResponse intercept(\n+      HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\n+\n+    String spanName = createSpanName(request);\n+    Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+\n+    try (Scope scope = tracer.withSpan(currentSpan)) {\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, SETTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYzOTIyOQ==", "bodyText": "We should be using HttpClientDecorator which abstracts this sort of logic away. Otherwise, we don't want to put the URI here in a client since it has too high cardinality\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md#name", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r450639229", "createdAt": "2020-07-07T06:32:28Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/spring/instrumentation/httpclients/RestTemplateInterceptorTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.spring.instrumentation.httpclients;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.OpenTelemetry;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptorTest implements ClientHttpRequestInterceptor {\n+\n+  private static final HttpTextFormat.Setter<HttpRequest> SETTER =\n+      new HttpTextFormat.Setter<HttpRequest>() {\n+        @Override\n+        public void set(HttpRequest carrier, String key, String value) {\n+          carrier.getHeaders().set(key, value);\n+        }\n+      };\n+\n+  private final Tracer tracer;\n+\n+  public RestTemplateInterceptorTest(Tracer tracer) {\n+    this.tracer = tracer;\n+  }\n+\n+  @Override\n+  public ClientHttpResponse intercept(\n+      HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {\n+\n+    String spanName = createSpanName(request);\n+    Span currentSpan = tracer.spanBuilder(spanName).setSpanKind(Span.Kind.CLIENT).startSpan();\n+\n+    try (Scope scope = tracer.withSpan(currentSpan)) {\n+      OpenTelemetry.getPropagators().getHttpTextFormat().inject(Context.current(), request, SETTER);\n+      ClientHttpResponse response = execution.execute(request, body);\n+      return response;\n+    } finally {\n+      currentSpan.end();\n+    }\n+  }\n+\n+  private String createSpanName(HttpRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d461aee72d9dc63fa0db81d23c211d3421608460"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "491c338f781519711e4b86ac27e674553edfc524", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/491c338f781519711e4b86ac27e674553edfc524", "committedDate": "2020-07-07T16:57:08Z", "message": "add decorator"}, "afterCommit": {"oid": "62ad14b55f1bac8044781717a60287489574372d", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/62ad14b55f1bac8044781717a60287489574372d", "committedDate": "2020-07-08T03:18:59Z", "message": "add spring-core project"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62ad14b55f1bac8044781717a60287489574372d", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/62ad14b55f1bac8044781717a60287489574372d", "committedDate": "2020-07-08T03:18:59Z", "message": "add spring-core project"}, "afterCommit": {"oid": "4e4ee7d465700d027b12f89429a83ec98939f5a6", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e4ee7d465700d027b12f89429a83ec98939f5a6", "committedDate": "2020-07-08T03:32:51Z", "message": "add spring-core project"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e4ee7d465700d027b12f89429a83ec98939f5a6", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/4e4ee7d465700d027b12f89429a83ec98939f5a6", "committedDate": "2020-07-08T03:32:51Z", "message": "add spring-core project"}, "afterCommit": {"oid": "c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "committedDate": "2020-07-08T03:50:42Z", "message": "add spring-core project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "committedDate": "2020-07-08T03:57:09Z", "message": "add spring-core project"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/c706e1d98b6657ca3d5a89cf6a6f23d851b6120b", "committedDate": "2020-07-08T03:50:42Z", "message": "add spring-core project"}, "afterCommit": {"oid": "2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2e55ad8ab56dab9885e7e2836bccf83ed6b3bafd", "committedDate": "2020-07-08T03:57:09Z", "message": "add spring-core project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c217f156a4528c0e4db3fc68925df947e686cdb", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8c217f156a4528c0e4db3fc68925df947e686cdb", "committedDate": "2020-07-08T04:45:54Z", "message": "update decorator and gradle file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NDU4NTk5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-444458599", "createdAt": "2020-07-08T06:54:18Z", "commit": {"oid": "8c217f156a4528c0e4db3fc68925df947e686cdb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjo1NDoxOFrOGuae-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjo1NTowMFrOGuagTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMTU5NA==", "bodyText": "Let's keep package private unless we later find a use case for exposing it", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451321594", "createdAt": "2020-07-08T06:54:18Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/HttpHeadersInjectAdapter.java", "diffHunk": "@@ -14,15 +14,17 @@\n  * limitations under the License.\n  */\n \n-package io.opentelemetry.instrumentation.spring;\n+package io.opentelemetry.instrumentation.spring.httpclients;\n \n-import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import org.springframework.http.HttpRequest;\n \n-@SpringBootApplication\n-public class Application {\n+public class HttpHeadersInjectAdapter implements HttpTextFormat.Setter<HttpRequest> {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c217f156a4528c0e4db3fc68925df947e686cdb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMyMTkzMg==", "bodyText": "So for now let's make only this class public and the rest package private", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451321932", "createdAt": "2020-07-08T06:55:00Z", "author": {"login": "anuraaga"}, "path": "instrumentation-core/spring/spring-core/src/main/java/io/opentelemetry/instrumentation/spring/httpclients/RestTemplateInterceptor.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.spring.httpclients;\n+\n+import static io.opentelemetry.instrumentation.spring.httpclients.RestTemplateDecorator.DECORATE;\n+\n+import io.grpc.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.io.IOException;\n+import org.springframework.http.HttpRequest;\n+import org.springframework.http.client.ClientHttpRequestExecution;\n+import org.springframework.http.client.ClientHttpRequestInterceptor;\n+import org.springframework.http.client.ClientHttpResponse;\n+\n+/** Wraps RestTemplate requests in a span. Adds the current span context to request headers. */\n+public final class RestTemplateInterceptor implements ClientHttpRequestInterceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c217f156a4528c0e4db3fc68925df947e686cdb"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "committedDate": "2020-07-08T14:57:53Z", "message": "update dependencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a14e06a740d732e6e75e3a7e1e38e231cbd50f9f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a14e06a740d732e6e75e3a7e1e38e231cbd50f9f", "committedDate": "2020-07-08T12:48:31Z", "message": "changed access modifiers for classes, removed version from gradle"}, "afterCommit": {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/8e15a9d7179ddf87924eda0e0e1d939f104b4ac9", "committedDate": "2020-07-08T14:57:53Z", "message": "update dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjE1Mzgz", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-445215383", "createdAt": "2020-07-09T00:34:02Z", "commit": {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjE1NDkx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-445215491", "createdAt": "2020-07-09T00:34:21Z", "commit": {"oid": "8e15a9d7179ddf87924eda0e0e1d939f104b4ac9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b6467854b134b19f0a53b2ad2eb1264fe350ae", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/50b6467854b134b19f0a53b2ad2eb1264fe350ae", "committedDate": "2020-07-09T00:58:10Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3434fc30470e9bd7a6011ebab800e43b547e92", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7b3434fc30470e9bd7a6011ebab800e43b547e92", "committedDate": "2020-07-09T00:59:03Z", "message": "Update RestTemplateDecorator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7766b6114827ad540b56062d82aaa70cba25b861", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/7766b6114827ad540b56062d82aaa70cba25b861", "committedDate": "2020-07-09T00:59:40Z", "message": "Update settings.gradle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjM2MzA4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-445236308", "createdAt": "2020-07-09T01:46:21Z", "commit": {"oid": "7766b6114827ad540b56062d82aaa70cba25b861"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo0NjoyMVrOGu-1ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo0NjoyMVrOGu-1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNzE2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              api \"org.springframework:spring-webmvc:3.1.0.RELEASE\"\n          \n          \n            \n              api \"org.springframework:spring-web:3.1.0.RELEASE\"", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#discussion_r451917162", "createdAt": "2020-07-09T01:46:21Z", "author": {"login": "trask"}, "path": "instrumentation-core/spring/spring-core/spring-core.gradle", "diffHunk": "@@ -0,0 +1,24 @@\n+group = 'io.opentelemetry.instrumentation.spring'\n+\n+apply plugin: 'java'\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+dependencies {\n+  \n+  // copy-paste from instrumentation-core-aws-sdk:aws-sdk-2.2-core:\n+  // TODO(anuraaga): We currently include common instrumentation logic like decorators in the\n+  // bootstrap, but we need to move it out so manual instrumentation does not depend on code from\n+  // the agent, like Agent.\n+  api project(':auto-bootstrap')\n+  \n+  api \"org.springframework:spring-webmvc:3.1.0.RELEASE\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7766b6114827ad540b56062d82aaa70cba25b861"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677962ceb550a5d36f980d089ef873e08471227f", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/677962ceb550a5d36f980d089ef873e08471227f", "committedDate": "2020-07-09T02:57:18Z", "message": "Update instrumentation-core/spring/spring-core/spring-core.gradle\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c7cb9a29442ef5d6da3065761cfd3a3c895b97c", "author": {"user": {"login": "mabdinur", "name": "Munir Abdinur"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/9c7cb9a29442ef5d6da3065761cfd3a3c895b97c", "committedDate": "2020-07-09T03:07:13Z", "message": "rename project to spring-web"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjYxMzQx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/640#pullrequestreview-445261341", "createdAt": "2020-07-09T03:11:07Z", "commit": {"oid": "9c7cb9a29442ef5d6da3065761cfd3a3c895b97c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3056, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}