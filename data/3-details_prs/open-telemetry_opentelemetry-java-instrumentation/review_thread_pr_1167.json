{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Njc4MDc5", "number": 1167, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo1MjowOFrOEgKxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo1MjowOFrOEgKxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTY2MzA4OnYy", "diffSide": "RIGHT", "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMTo1MjowOFrOHM4rXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNjo1NFrOHPFN_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA==", "bodyText": "allowing 0 indicates that the response was not counted. if it's not counted in the tests I wouldn't expect it to be counted elsewhere.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r483273564", "createdAt": "2020-09-03T21:52:08Z", "author": {"login": "FrankSpitulski"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1ODkwNw==", "bodyText": "Well, it's to be expected that all frameworks that use getOutputStream() will now get a 0.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r483558907", "createdAt": "2020-09-04T11:31:18Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA=="}, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMDMxMg==", "bodyText": "This means it misses spring boot's default configuration which I'd hazard to say is a large portion of applications being instrumented. Is there some alternative implementation or is this attribute just being dropped?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r483600312", "createdAt": "2020-09-04T13:00:52Z", "author": {"login": "FrankSpitulski"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA=="}, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3Mzk4OA==", "bodyText": "There were two:\n\n#1104 contained a separate instrumentation for servlet 3.0 and 3.1; it had lots of copy-pasted code\nIn #1149 I initially tried to just copy the WriteListener class that was absent in 3.0, but that failed. Then I tried to generate a class extending ServletOutputStream in runtime, which probably should work -- but there's no way to load it correctly without modifying Instrumenter.Default heavily.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r483673988", "createdAt": "2020-09-04T15:00:12Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA=="}, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NDQ4Nw==", "bodyText": "@FrankSpitulski We're leaning towards just using content-length header for servlet. The counting approach seems to have too many corner cases for us to deal with well unfortunately \ud83d\ude3f\n@mateuszrzeszutek I don't think we should set 0 if we couldn't count, 0 means no content, not content couldn't be counted - can you update the implementation of getContentLength to avoid setting 0 when printWriter is null?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r485374487", "createdAt": "2020-09-09T06:44:23Z", "author": {"login": "anuraaga"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA=="}, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NjE4OA==", "bodyText": "I've removed all the counting stuff altogether, according to #1167 (comment)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1167#discussion_r485576188", "createdAt": "2020-09-09T12:36:54Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/dropwizard-testing/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -122,7 +122,7 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n         \"${SemanticAttributes.HTTP_USER_AGENT.key()}\" TEST_USER_AGENT\n         \"${SemanticAttributes.HTTP_CLIENT_IP.key()}\" TEST_CLIENT_IP\n         // exception bodies are not yet recorded\n-        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == responseContentLength || /* async */it == null }\n+        \"${SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH.key()}\" { it == 0 || it == responseContentLength || /* async */it == null }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI3MzU2NA=="}, "originalCommit": {"oid": "e48396ce04e13dd9590863627c1589ab8f05b14c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4874, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}