{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTE5ODc3", "number": 1843, "title": "Instrument spring-batch", "bodyText": "Related to #1842\nThis PR introduces just a \"skeleton\" instrumentation that does not log any span attributes, just creates the spans. Span names may change once a spec PR emerges.", "createdAt": "2020-12-07T09:21:22Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843", "merged": true, "mergeCommit": {"oid": "f82e9107d6eca855426b77775b50bd7337a0743c"}, "closed": true, "closedAt": "2020-12-16T11:27:24Z", "author": {"login": "mateuszrzeszutek"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj_95sgFqTU0NjY2NDM3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmsyLHgH2gAyNTMzNTE5ODc3OmVlOWQwNGJmYmM5M2VkZDZkZmRjNzdmMmI1MmI0ZGZlNGJmMTA2NDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjY0Mzcy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-546664372", "createdAt": "2020-12-08T01:00:03Z", "commit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowMDowM1rOIBB7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMToxNDoyMlrOIBCQgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MTAyNQ==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537951025", "createdAt": "2020-12-08T01:00:03Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer\n+            .spanBuilder(String.format(\"BatchJob %s.%s.Chunk\", jobName, stepName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537952160", "createdAt": "2020-12-08T01:02:51Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.JobExecution;\n+\n+public class JobExecutionTracer extends BaseTracer {\n+  private static final JobExecutionTracer TRACER = new JobExecutionTracer();\n+\n+  public static JobExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(JobExecution jobExecution) {\n+    String jobName = jobExecution.getJobInstance().getJobName();\n+    Span span = startSpan(String.format(\"BatchJob %s\", jobName), INTERNAL);\n+    return Context.current().with(span);\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MjU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537952555", "createdAt": "2020-12-08T01:03:54Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.StepExecution;\n+\n+public class StepExecutionTracer extends BaseTracer {\n+  private static final StepExecutionTracer TRACER = new StepExecutionTracer();\n+\n+  public static StepExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(StepExecution stepExecution) {\n+    String jobName = stepExecution.getJobExecution().getJobInstance().getJobName();\n+    String stepName = stepExecution.getStepName();\n+    Span span = startSpan(String.format(\"BatchJob %s.%s\", jobName, stepName), INTERNAL);\n+    return Context.current().with(span);\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NDk3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Iterable<String> instrumentationNames, String suffix, boolean defaultEnabled) {\n          \n          \n            \n                  Iterable<String> instrumentationNames, String suffix, boolean defaultValue) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537954973", "createdAt": "2020-12-08T01:10:16Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -133,12 +133,17 @@ public boolean getBooleanProperty(String name, boolean defaultValue) {\n \n   public boolean isInstrumentationEnabled(\n       Iterable<String> instrumentationNames, boolean defaultEnabled) {\n+    return getInstrumentationBooleanProperty(instrumentationNames, \"enabled\", defaultEnabled);\n+  }\n+\n+  public boolean getInstrumentationBooleanProperty(\n+      Iterable<String> instrumentationNames, String suffix, boolean defaultEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTEyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.spring-batch\";\n          \n          \n            \n                return \"io.opentelemetry.javaagent.spring-batch\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955124", "createdAt": "2020-12-08T01:10:43Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/chunk/ChunkExecutionTracer.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.chunk;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.shouldCreateRootSpanForChunk;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.api.trace.SpanBuilder;\n+import io.opentelemetry.api.trace.SpanContext;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.scope.context.ChunkContext;\n+\n+public class ChunkExecutionTracer extends BaseTracer {\n+  private static final ChunkExecutionTracer TRACER = new ChunkExecutionTracer();\n+\n+  public static ChunkExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(ChunkContext chunkContext) {\n+    String jobName = chunkContext.getStepContext().getJobName();\n+    String stepName = chunkContext.getStepContext().getStepName();\n+    SpanBuilder spanBuilder =\n+        tracer\n+            .spanBuilder(String.format(\"BatchJob %s.%s.Chunk\", jobName, stepName))\n+            .setSpanKind(INTERNAL);\n+    if (shouldCreateRootSpanForChunk()) {\n+      linkParentSpan(spanBuilder);\n+    }\n+    Span span = spanBuilder.startSpan();\n+    return Context.current().with(span);\n+  }\n+\n+  private void linkParentSpan(SpanBuilder spanBuilder) {\n+    spanBuilder.setNoParent();\n+\n+    SpanContext parentSpanContext = Span.current().getSpanContext();\n+    if (parentSpanContext.isValid()) {\n+      spanBuilder.addLink(parentSpanContext);\n+    }\n+  }\n+\n+  public void end(Context context) {\n+    end(Span.fromContext(context));\n+  }\n+\n+  public void endExceptionally(Context context, Throwable throwable) {\n+    endExceptionally(Span.fromContext(context), throwable);\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.spring-batch\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTQxMA==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955410", "createdAt": "2020-12-08T01:11:27Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobExecutionTracer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.JobExecution;\n+\n+public class JobExecutionTracer extends BaseTracer {\n+  private static final JobExecutionTracer TRACER = new JobExecutionTracer();\n+\n+  public static JobExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(JobExecution jobExecution) {\n+    String jobName = jobExecution.getJobInstance().getJobName();\n+    Span span = startSpan(String.format(\"BatchJob %s\", jobName), INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NTQ5Mg==", "bodyText": "more efficient to concat", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537955492", "createdAt": "2020-12-08T01:11:40Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/StepExecutionTracer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.api.trace.Span.Kind.INTERNAL;\n+\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+import org.springframework.batch.core.StepExecution;\n+\n+public class StepExecutionTracer extends BaseTracer {\n+  private static final StepExecutionTracer TRACER = new StepExecutionTracer();\n+\n+  public static StepExecutionTracer tracer() {\n+    return TRACER;\n+  }\n+\n+  public Context startSpan(StepExecution stepExecution) {\n+    String jobName = stepExecution.getJobExecution().getJobInstance().getJobName();\n+    String stepName = stepExecution.getStepName();\n+    Span span = startSpan(String.format(\"BatchJob %s.%s\", jobName, stepName), INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1NjQ4Mw==", "bodyText": "would looking for a spring batch class here be more specific?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r537956483", "createdAt": "2020-12-08T01:14:22Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.chunk.StepBuilderInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"javax.batch.api.Batchlet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzA0NzU0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-546704754", "createdAt": "2020-12-08T02:48:42Z", "commit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71309e6aa37e95d43f282770cf1bb71fb32d47a0", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/71309e6aa37e95d43f282770cf1bb71fb32d47a0", "committedDate": "2020-12-07T14:04:51Z", "message": "Minor fix"}, "afterCommit": {"oid": "ea534ad822393d6ef6daadad863af633317c2514", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea534ad822393d6ef6daadad863af633317c2514", "committedDate": "2020-12-08T11:57:50Z", "message": "Instrument spring-batch: chunk"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea534ad822393d6ef6daadad863af633317c2514", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ea534ad822393d6ef6daadad863af633317c2514", "committedDate": "2020-12-08T11:57:50Z", "message": "Instrument spring-batch: chunk"}, "afterCommit": {"oid": "5ec3e872038e9f0d8e70d6eb501870f1c2df4817", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5ec3e872038e9f0d8e70d6eb501870f1c2df4817", "committedDate": "2020-12-08T12:00:45Z", "message": "Instrument spring-batch: job & step"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ec3e872038e9f0d8e70d6eb501870f1c2df4817", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5ec3e872038e9f0d8e70d6eb501870f1c2df4817", "committedDate": "2020-12-08T12:00:45Z", "message": "Instrument spring-batch: job & step"}, "afterCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b225379c17d512341da1aa65a70028d3f46237ec", "committedDate": "2020-12-08T14:39:28Z", "message": "Instrument spring-batch: job & step"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTMxMDYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-550931061", "createdAt": "2020-12-13T15:26:03Z", "commit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNToyNjowM1rOIE1zIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNTozMToyN1rOIE13GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NjY1OQ==", "bodyText": "Either this name or method's content is misleading. Name says about any boolean property. Content still talks about enablement and contains quite specific logic.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541946659", "createdAt": "2020-12-13T15:26:03Z", "author": {"login": "iNikem"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/config/Config.java", "diffHunk": "@@ -133,17 +133,22 @@ public boolean getBooleanProperty(String name, boolean defaultValue) {\n \n   public boolean isInstrumentationEnabled(\n       Iterable<String> instrumentationNames, boolean defaultEnabled) {\n+    return getInstrumentationBooleanProperty(instrumentationNames, \"enabled\", defaultEnabled);\n+  }\n+\n+  public boolean getInstrumentationBooleanProperty(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzE5Mw==", "bodyText": "Looking at #1874, I think this should be disabled by default.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947193", "createdAt": "2020-12-13T15:28:52Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.unmodifiableList;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import java.util.List;\n+\n+public final class SpringBatchInstrumentationConfig {\n+  private static final List<String> INSTRUMENTATION_NAMES =\n+      unmodifiableList(asList(\"spring-batch\", \"spring-batch-3.0\"));\n+\n+  public static List<String> instrumentationNames() {\n+    return INSTRUMENTATION_NAMES;\n+  }\n+\n+  public static boolean isTracingEnabled(String type) {\n+    return Config.get()\n+        .getInstrumentationBooleanProperty(instrumentationNames(), type + \".enabled\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQxMQ==", "bodyText": "Should we check if jobExecutionListeners already contains TracingJobExecutionListener?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947411", "createdAt": "2020-12-13T15:29:56Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)\n+          JobExecutionListener[] jobExecutionListeners) {\n+    ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+        InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+    JobExecutionListener tracingListener = new TracingJobExecutionListener(executionContextStore);\n+    if (jobExecutionListeners == null) {\n+      jobExecutionListeners = new JobExecutionListener[] {tracingListener};\n+    } else {\n+      JobExecutionListener[] newListeners =\n+          new JobExecutionListener[jobExecutionListeners.length + 1];\n+      newListeners[0] = tracingListener;\n+      System.arraycopy(jobExecutionListeners, 0, newListeners, 1, jobExecutionListeners.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQ5Ng==", "bodyText": "Should be protect against double adding?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947496", "createdAt": "2020-12-13T15:30:30Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+          InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+      properties.addJobExecutionListener(new TracingJobExecutionListener(executionContextStore));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzY3Mw==", "bodyText": "What if factory created by JavaConfig?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r541947673", "createdAt": "2020-12-13T15:31:27Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMDEyMzU4", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-551012358", "createdAt": "2020-12-14T02:55:07Z", "commit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMjo1NTowN1rOIE9zjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMzowMTo1MFrOIE97MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3NzgzNw==", "bodyText": "I don't know if we follow the pattern in every instrumentation, but I do like the nested class pattern for advice - being close to the type matcher shows easily what the signature of the instrumented method is.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542077837", "createdAt": "2020-12-14T02:55:07Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/GetObjectAdvice.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import net.bytebuddy.asm.Advice;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class GetObjectAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3OTM3Ng==", "bodyText": "What happens if we use public API instead of field? I think we should always make an attempt to instrument with public API to prevent the inevitable testLatestDeps failure that will come in the future. If there is a reason that it's impossible, we need to add comments on what makes it impossible when falling back to private fields.\nI guess here we can call listener() instead of adding to the field?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542079376", "createdAt": "2020-12-14T03:00:17Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA3OTc5Mw==", "bodyText": "Yeah looks like we may need some InstrumentationContext to keep track. Can easily call enhance twice on different jobs I think.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r542079793", "createdAt": "2020-12-14T03:01:50Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")\n+            .and(isProtected())\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.springframework.batch.core.Job\"))),\n+        this.getClass().getName() + \"$EnhanceAdvice\");\n+  }\n+\n+  public static class EnhanceAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(\"properties\") JobBuilderHelper.CommonJobProperties properties) {\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore =\n+          InstrumentationContext.get(JobExecution.class, ContextAndScope.class);\n+      properties.addJobExecutionListener(new TracingJobExecutionListener(executionContextStore));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk0NzQ5Ng=="}, "originalCommit": {"oid": "b225379c17d512341da1aa65a70028d3f46237ec"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMDg5Mjgx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-552089281", "createdAt": "2020-12-15T04:03:26Z", "commit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowMzoyNlrOIF33xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNDowNjozOVrOIF376Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTE5MQ==", "bodyText": "Do you want to instrument enhance instead of the exit of the constructor?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543029191", "createdAt": "2020-12-15T04:03:26Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobBuilderHelperInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isProtected;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.job.builder.JobBuilderHelper;\n+\n+public class JobBuilderHelperInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Java DSL Job config\n+    return named(\"org.springframework.batch.core.job.builder.JobBuilderHelper\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"enhance\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyOTk1NQ==", "bodyText": "Do you think we can avoid the private field access by\n\nInstrument constructor exit to call setJobExecutionListeners(empty_array)\nInstrument setJobExecutionListeners to add our listener to the provided array\n\n?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543029955", "createdAt": "2020-12-15T04:05:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config\n+    return named(\"org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean\")\n+        // JSR-352 XML config\n+        .or(named(\"org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"getObject\").and(isPublic()).and(takesArguments(0)),\n+        this.getClass().getName() + \"$GetObjectAdvice\");\n+  }\n+\n+  public static class GetObjectAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.FieldValue(value = \"jobExecutionListeners\", readOnly = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzMDI0OQ==", "bodyText": "Do we need these weird equals/hashCode methods?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543030249", "createdAt": "2020-12-15T04:06:39Z", "author": {"login": "anuraaga"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.StepExecution;\n+import org.springframework.batch.core.StepExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingStepExecutionListener implements StepExecutionListener, Ordered {\n+  private final ContextStore<StepExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingStepExecutionListener(\n+      ContextStore<StepExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeStep(StepExecution stepExecution) {\n+    Context context = tracer().startSpan(stepExecution);\n+    Scope scope = context.makeCurrent();\n+    executionContextStore.put(stepExecution, new ContextAndScope(context, scope));\n+  }\n+\n+  @Override\n+  public ExitStatus afterStep(StepExecution stepExecution) {\n+    ContextAndScope contextAndScope = executionContextStore.get(stepExecution);\n+    if (contextAndScope != null) {\n+      executionContextStore.put(stepExecution, null);\n+      contextAndScope.closeScope();\n+      tracer().end(contextAndScope.getContext());\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return HIGHEST_PRECEDENCE;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTcwODY2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-552170866", "createdAt": "2020-12-15T07:33:01Z", "commit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozMzowMVrOIF8xsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzozNTowNlrOIF815w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEwOTU1NA==", "bodyText": "Why? Enabling specific instrumentation is totally OK, no?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543109554", "createdAt": "2020-12-15T07:33:01Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/SpringBatchInstrumentationModule.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.instrumentationNames;\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.SpringBatchInstrumentationConfig.isTracingEnabled;\n+import static io.opentelemetry.javaagent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobFactoryBeanInstrumentation;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepBuilderHelperInstrumentation;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(InstrumentationModule.class)\n+public class SpringBatchInstrumentationModule extends InstrumentationModule {\n+  public SpringBatchInstrumentationModule() {\n+    super(instrumentationNames());\n+  }\n+\n+  public ElementMatcher.Junction<ClassLoader> classLoaderMatcher() {\n+    // JSR-352 Batch API\n+    return hasClassesNamed(\"org.springframework.batch.core.jsr.launch.JsrJobOperator\");\n+  }\n+\n+  @Override\n+  protected Map<String, String> contextStore() {\n+    Map<String, String> context = new HashMap<>();\n+    String contextAndScope =\n+        \"io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope\";\n+    context.put(\"org.springframework.batch.core.JobExecution\", contextAndScope);\n+    context.put(\"org.springframework.batch.core.StepExecution\", contextAndScope);\n+    return context;\n+  }\n+\n+  @Override\n+  public List<TypeInstrumentation> typeInstrumentations() {\n+    List<TypeInstrumentation> instrumentations = new ArrayList<>();\n+    if (isTracingEnabled(\"job\")) {\n+      instrumentations.add(new JobBuilderHelperInstrumentation());\n+      instrumentations.add(new JobFactoryBeanInstrumentation());\n+    }\n+    if (isTracingEnabled(\"step\")) {\n+      instrumentations.add(new StepBuilderHelperInstrumentation());\n+    }\n+    return instrumentations;\n+  }\n+\n+  protected boolean defaultEnabled() {\n+    // TODO: replace this with an experimental flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzExMDYzMQ==", "bodyText": "If equals compare classes, shouldn't we do getClass().hashCode() here?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543110631", "createdAt": "2020-12-15T07:35:06Z", "author": {"login": "iNikem"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingJobExecutionListener implements JobExecutionListener, Ordered {\n+  private final ContextStore<JobExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingJobExecutionListener(\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeJob(JobExecution jobExecution) {\n+    Context context = tracer().startSpan(jobExecution);\n+    Scope scope = context.makeCurrent();\n+    executionContextStore.put(jobExecution, new ContextAndScope(context, scope));\n+  }\n+\n+  @Override\n+  public void afterJob(JobExecution jobExecution) {\n+    ContextAndScope contextAndScope = executionContextStore.get(jobExecution);\n+    if (contextAndScope != null) {\n+      executionContextStore.put(jobExecution, null);\n+      contextAndScope.closeScope();\n+      tracer().end(contextAndScope.getContext());\n+    }\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return HIGHEST_PRECEDENCE;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    return o != null && getClass() == o.getClass();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b7aa7ba46d43942139d9bbee42fe6f5ec8bb69"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDg3MDgy", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-552487082", "createdAt": "2020-12-15T14:00:25Z", "commit": {"oid": "b524ef56c58904169f0b54b949057b99a8f688de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "129609345b423b397c78f49f301ee70bc51a5af0", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/129609345b423b397c78f49f301ee70bc51a5af0", "committedDate": "2020-12-15T17:08:08Z", "message": "Instrument spring-batch: job & step"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421551c10be89b26ee117ddd7ea6176f74e2b34f", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/421551c10be89b26ee117ddd7ea6176f74e2b34f", "committedDate": "2020-12-15T17:08:08Z", "message": "Instrument spring-batch: job & step - code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd173406d3f159a9dc02c85267a8987acdc953e8", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dd173406d3f159a9dc02c85267a8987acdc953e8", "committedDate": "2020-12-15T17:08:08Z", "message": "Instrument spring-batch: job & step - code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3953368276153b39c6404d1396a1166cfb80977c", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/3953368276153b39c6404d1396a1166cfb80977c", "committedDate": "2020-12-15T17:08:08Z", "message": "Instrument spring-batch: job & step - code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74e99c72fe387158c4a1c1107ba556fc97c1c1e9", "committedDate": "2020-12-15T17:08:08Z", "message": "spotless"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b524ef56c58904169f0b54b949057b99a8f688de", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/b524ef56c58904169f0b54b949057b99a8f688de", "committedDate": "2020-12-15T13:15:59Z", "message": "spotless"}, "afterCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/74e99c72fe387158c4a1c1107ba556fc97c1c1e9", "committedDate": "2020-12-15T17:08:08Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzMzExMDA5", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#pullrequestreview-553311009", "createdAt": "2020-12-16T02:29:53Z", "commit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjoyOTo1M1rOIGpcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMjozNzowNlrOIGpx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MTQ1Nw==", "bodyText": "took me a few min to understand this, worth a comment\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  jobFactory.setJobExecutionListeners(new Object[] {});\n          \n          \n            \n                  // this will trigger the advice below, which will make sure that the tracing listener is registered\n          \n          \n            \n                  // even if the application never calls setJobExecutionListeners() directly\n          \n          \n            \n                  jobFactory.setJobExecutionListeners(new Object[] {});", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543841457", "createdAt": "2020-12-16T02:29:53Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isArray;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean;\n+\n+public class JobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // JSR-352 XML config\n+    return named(\"org.springframework.batch.core.jsr.configuration.xml.JobFactoryBean\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), this.getClass().getName() + \"$InitAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"setJobExecutionListeners\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, isArray())),\n+        this.getClass().getName() + \"$SetListenersAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class InitAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(@Advice.This JobFactoryBean jobFactory) {\n+      jobFactory.setJobExecutionListeners(new Object[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0Mjc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});\n          \n          \n            \n                  // this will trigger the advice below, which will make sure that the tracing listener is registered\n          \n          \n            \n                  // even if the application never calls setJobExecutionListeners() directly\n          \n          \n            \n                  jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543842774", "createdAt": "2020-12-16T02:31:41Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/JobParserJobFactoryBeanInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.isArray;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.api.InstrumentationContext;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean;\n+\n+public class JobParserJobFactoryBeanInstrumentation implements TypeInstrumentation {\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // Spring Batch XML config\n+    return named(\"org.springframework.batch.core.configuration.xml.JobParserJobFactoryBean\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), this.getClass().getName() + \"$InitAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"setJobExecutionListeners\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, isArray())),\n+        this.getClass().getName() + \"$SetListenersAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class InitAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(@Advice.This JobParserJobFactoryBean jobFactory) {\n+      jobFactory.setJobExecutionListeners(new JobExecutionListener[] {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0MzkxMA==", "bodyText": "is before/after always synchronous? if so, a comment about that will help future readers not worry about context leaking here", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543843910", "createdAt": "2020-12-16T02:33:13Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/job/TracingJobExecutionListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.job;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.job.JobExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingJobExecutionListener implements JobExecutionListener, Ordered {\n+  private final ContextStore<JobExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingJobExecutionListener(\n+      ContextStore<JobExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeJob(JobExecution jobExecution) {\n+    Context context = tracer().startSpan(jobExecution);\n+    Scope scope = context.makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzg0NjkxMA==", "bodyText": "same question about synchronous guarantee? for cautionary tale see \n  \n    \n      opentelemetry-java-instrumentation/instrumentation/aws-sdk/aws-sdk-2.2/library/src/main/java/io/opentelemetry/instrumentation/awssdk/v2_2/TracingExecutionInterceptor.java\n    \n    \n        Lines 87 to 93\n      in\n      49c2a36\n    \n    \n    \n    \n\n        \n          \n           if (executionAttributes \n        \n\n        \n          \n               .getAttribute(SdkExecutionAttribute.CLIENT_TYPE) \n        \n\n        \n          \n               .equals(ClientType.SYNC)) { \n        \n\n        \n          \n             // We can only activate context for synchronous clients, which allows downstream \n        \n\n        \n          \n             // instrumentation like Apache to know about the SDK span. \n        \n\n        \n          \n             executionAttributes.putAttribute(SCOPE_ATTRIBUTE, otelContext.makeCurrent()); \n        \n\n        \n          \n           }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1843#discussion_r543846910", "createdAt": "2020-12-16T02:37:06Z", "author": {"login": "trask"}, "path": "instrumentation/spring/spring-batch-3.0/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/spring/batch/step/TracingStepExecutionListener.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.spring.batch.step;\n+\n+import static io.opentelemetry.javaagent.instrumentation.spring.batch.step.StepExecutionTracer.tracer;\n+\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.ContextStore;\n+import io.opentelemetry.javaagent.instrumentation.spring.batch.ContextAndScope;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.StepExecution;\n+import org.springframework.batch.core.StepExecutionListener;\n+import org.springframework.core.Ordered;\n+\n+public class TracingStepExecutionListener implements StepExecutionListener, Ordered {\n+  private final ContextStore<StepExecution, ContextAndScope> executionContextStore;\n+\n+  public TracingStepExecutionListener(\n+      ContextStore<StepExecution, ContextAndScope> executionContextStore) {\n+    this.executionContextStore = executionContextStore;\n+  }\n+\n+  @Override\n+  public void beforeStep(StepExecution stepExecution) {\n+    Context context = tracer().startSpan(stepExecution);\n+    Scope scope = context.makeCurrent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e99c72fe387158c4a1c1107ba556fc97c1c1e9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a76a1577704eb4023fd78903e6e3fe34f90a04d", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/2a76a1577704eb4023fd78903e6e3fe34f90a04d", "committedDate": "2020-12-16T10:06:01Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Trask Stalnaker <trask.stalnaker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f180898d52e028192752721863fd8e93fdc675", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/a4f180898d52e028192752721863fd8e93fdc675", "committedDate": "2020-12-16T10:44:51Z", "message": "Instrument spring-batch: job & step - code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee9d04bfbc93edd6dfdc77f2b52b4dfe4bf10646", "author": {"user": {"login": "mateuszrzeszutek", "name": "Mateusz Rzeszutek"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/ee9d04bfbc93edd6dfdc77f2b52b4dfe4bf10646", "committedDate": "2020-12-16T10:56:59Z", "message": "spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2150, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}