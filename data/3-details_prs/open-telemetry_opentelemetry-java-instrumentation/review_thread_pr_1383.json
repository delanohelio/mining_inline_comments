{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMTM2NDcy", "number": 1383, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoxNzoyN1rOEtVL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoxNzoyN1rOEtVL_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTY4NTA4OnYy", "diffSide": "LEFT", "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoxNzoyOFrOHhDwlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoxODozMlrOHhDyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNjY0NQ==", "bodyText": "This was wrong in my previous change, naturally just like TracingServerInterceptor, any interceptor that modifies context must use Contexts.interceptCall to make sure it's propagated.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1383#discussion_r504426645", "createdAt": "2020-10-14T06:17:28Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -323,25 +324,26 @@ abstract class AbstractGrpcTest extends InstrumentationSpecification {\n     def port = PortUtils.randomOpenPort()\n     Server server\n     server = configureServer(ServerBuilder.forPort(port)\n-      .addService(greeter))\n+      .addService(greeter)\n       .intercept(new ServerInterceptor() {\n         @Override\n         <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-          def ctx = Context.current().withValue(key, \"meow\")\n-          def oldCtx = ctx.attach()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f4e70dd80be427917b3fede01e3cff8a5280af6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNzA2NQ==", "bodyText": "Incidentally this is much easier when context is mutable :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1383#discussion_r504427065", "createdAt": "2020-10-14T06:18:32Z", "author": {"login": "anuraaga"}, "path": "instrumentation/grpc-1.5/testing/src/main/groovy/io/opentelemetry/instrumentation/grpc/v1_5/AbstractGrpcTest.groovy", "diffHunk": "@@ -323,25 +324,26 @@ abstract class AbstractGrpcTest extends InstrumentationSpecification {\n     def port = PortUtils.randomOpenPort()\n     Server server\n     server = configureServer(ServerBuilder.forPort(port)\n-      .addService(greeter))\n+      .addService(greeter)\n       .intercept(new ServerInterceptor() {\n         @Override\n         <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call, Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n-          def ctx = Context.current().withValue(key, \"meow\")\n-          def oldCtx = ctx.attach()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyNjY0NQ=="}, "originalCommit": {"oid": "3f4e70dd80be427917b3fede01e3cff8a5280af6"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}