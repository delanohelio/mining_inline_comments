{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjAyMDIx", "number": 189, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxMjoxNVrODjjxXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoxMzowOVrODjmLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjEyODI4OnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase-2.0/src/test/groovy/springdata/CouchbaseSpringRepositoryTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxMjoxNVrOFvbz8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoxMjoxNVrOFvbz8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4MzA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \\\n          \n      \n    \n    \n  \n\nAnd extra newlines too...", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/189#discussion_r385283056", "createdAt": "2020-02-27T18:12:15Z", "author": {"login": "tylerbenson"}, "path": "instrumentation/couchbase-2.0/src/test/groovy/springdata/CouchbaseSpringRepositoryTest.groovy", "diffHunk": "@@ -61,6 +61,9 @@ class CouchbaseSpringRepositoryTest extends AbstractCouchbaseTest {\n \n     applicationContext = new AnnotationConfigApplicationContext(CouchbaseConfig)\n     repo = applicationContext.getBean(DocRepository)\n+    \\\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f47ed72f969994261bf3697ee5985a31912d0632"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjUyMjM0OnYy", "diffSide": "RIGHT", "path": "instrumentation/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/client/CouchbaseBucketInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoxMzowOVrOFvfsyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoxMzowOVrOFvfsyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0Njc2MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/189#discussion_r385346760", "createdAt": "2020-02-27T20:13:09Z", "author": {"login": "trask"}, "path": "instrumentation/couchbase-2.0/src/main/java/io/opentelemetry/auto/instrumentation/couchbase/client/CouchbaseBucketInstrumentation.java", "diffHunk": "@@ -74,8 +79,35 @@ public static void subscribeResult(\n         return;\n       }\n       CallDepthThreadLocalMap.reset(CouchbaseCluster.class);\n+      result = Observable.create(new CouchbaseOnSubscribe(result, method, bucket, null));\n+    }\n+  }\n+\n+  public static class CouchbaseClientQueryAdvice {\n+\n+    @Advice.OnMethodEnter\n+    public static int trackCallDepth() {\n+      return CallDepthThreadLocalMap.incrementCallDepth(CouchbaseCluster.class);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class)\n+    public static void subscribeResult(\n+        @Advice.Enter final int callDepth,\n+        @Advice.Origin final Method method,\n+        @Advice.FieldValue(\"bucket\") final String bucket,\n+        @Advice.Argument(value = 0, optional = true) final Object query,\n+        @Advice.Return(readOnly = false) Observable result) {\n+      if (callDepth > 0) {\n+        return;\n+      }\n+      CallDepthThreadLocalMap.reset(CouchbaseCluster.class);\n \n-      result = Observable.create(new CouchbaseOnSubscribe(result, method, bucket));\n+      // A query can be of many different types. We could track the creation of them and try to\n+      // rewind back to when they were created from a string, but for now we rely on toString()\n+      // returning something useful. That seems to be the case. If we're starting to see strange\n+      // query texts, this is the place to look!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4090e7f8c83c7759610e6b84b015c5b5dbe1bf0"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 578, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}