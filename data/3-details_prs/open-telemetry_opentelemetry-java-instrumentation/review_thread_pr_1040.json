{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MTUxMTQ4", "number": 1040, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozNTowNlrOEZTFAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMjo0M1rOEZ0QYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYyNDM1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseHttpClientServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozNTowNlrOHCCHqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozNTowNlrOHCCHqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5MzkzMA==", "bodyText": "Instead of adding more hierarchy, I think will be better to make a static util method to convert URI to String in the format that http.url semantic convention expects and call that static util method directly from the sub classes\nMaybe in class named HttpUrlUtils to match suggestion below for NetPeerUtils.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471893930", "createdAt": "2020-08-18T03:35:06Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseHttpClientServerTracer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public abstract class BaseHttpClientServerTracer extends BaseTracer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYyNzQ3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozNjo0NFrOHCCJWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozNjo0NFrOHCCJWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NDM2Mg==", "bodyText": "I think starting a span based on \"name for the class\" will only ever be called by INTERNAL spans (because span names are more well defined for other types)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Span startSpan(Class<?> clazz, Kind kind) {\n          \n          \n            \n              public Span startSpan(Class<?> clazz) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471894362", "createdAt": "2020-08-18T03:36:44Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -49,25 +46,19 @@ public BaseTracer(Tracer tracer) {\n     this.tracer = tracer;\n   }\n \n-  public Span startSpan(Class<?> clazz) {\n+  public Span startSpan(Class<?> clazz, Kind kind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYzMjE3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozOTo0NVrOHCCMAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzozOTo0NVrOHCCMAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTA0MA==", "bodyText": "we changed convention recently: #921\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void onPeerConnection(final Span span, final CONNECTION connection) {\n          \n          \n            \n              protected void onPeerConnection(Span span, CONNECTION connection) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471895040", "createdAt": "2020-08-18T03:39:45Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/DatabaseClientTracer.java", "diffHunk": "@@ -116,8 +116,8 @@ protected void onError(Span span, Throwable throwable) {\n     }\n   }\n \n-  protected void onPeerConnection(Span span, CONNECTION connection) {\n-    onPeerConnection(span, peerAddress(connection));\n+  protected void onPeerConnection(final Span span, final CONNECTION connection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYzNDgzOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0MTowMlrOHCCNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0MTowMlrOHCCNZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (final Exception e) {\n          \n          \n            \n                } catch (Exception e) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471895396", "createdAt": "2020-08-18T03:41:02Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -175,45 +174,15 @@ protected void onRequest(Span span, REQUEST request) {\n     if (userAgent != null) {\n       SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n     }\n-    // Copy of HttpClientTracer url handling\n+\n     try {\n       URI url = url(request);\n-      if (url != null) {\n-        StringBuilder urlBuilder = new StringBuilder();\n-        if (url.getScheme() != null) {\n-          urlBuilder.append(url.getScheme());\n-          urlBuilder.append(\"://\");\n-        }\n-        if (url.getHost() != null) {\n-          urlBuilder.append(url.getHost());\n-          if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n-            urlBuilder.append(\":\");\n-            urlBuilder.append(url.getPort());\n-          }\n-        }\n-        String path = url.getPath();\n-        if (path.isEmpty()) {\n-          urlBuilder.append(\"/\");\n-        } else {\n-          urlBuilder.append(path);\n-        }\n-        String query = url.getQuery();\n-        if (query != null) {\n-          urlBuilder.append(\"?\").append(query);\n-        }\n-        String fragment = url.getFragment();\n-        if (fragment != null) {\n-          urlBuilder.append(\"#\").append(fragment);\n-        }\n-\n-        span.setAttribute(SemanticAttributes.HTTP_URL.key(), urlBuilder.toString());\n-\n-        if (Config.get().isHttpServerTagQueryString()) {\n-          span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n-          span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n-        }\n+      tagUrl(url, span);\n+      if (Config.get().isHttpServerTagQueryString()) {\n+        span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n+        span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n       }\n-    } catch (Exception e) {\n+    } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYzODE3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0MzozMVrOHCCPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0MzozMVrOHCCPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {\n          \n          \n            \n              public static void setAttributes(Span span, InetSocketAddress remoteConnection) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471895877", "createdAt": "2020-08-18T03:43:31Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {\n+\n+  public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYzODU3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0Mzo0NVrOHCCPfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0Mzo0NVrOHCCPfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void onPeerConnection(Span span, InetAddress remoteAddress) {\n          \n          \n            \n              public static void setAttributes(Span span, InetAddress remoteAddress) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471895935", "createdAt": "2020-08-18T03:43:45Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {\n+\n+  public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {\n+    if (remoteConnection != null) {\n+      InetAddress remoteAddress = remoteConnection.getAddress();\n+      if (remoteAddress != null) {\n+        onPeerConnection(span, remoteAddress);\n+      } else {\n+        // Failed DNS lookup, the host string is the name.\n+        setPeer(span, remoteConnection.getHostString(), null);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n+    }\n+  }\n+\n+  public static void onPeerConnection(Span span, InetAddress remoteAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTYzODgxOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0Mzo1NFrOHCCPqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoxNjoyNFrOHCeUzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTk3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void setPeer(Span span, String peerName, String peerIp) {\n          \n          \n            \n              public static void setAttributes(Span span, String peerName, String peerIp) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471895977", "createdAt": "2020-08-18T03:43:54Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {\n+\n+  public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {\n+    if (remoteConnection != null) {\n+      InetAddress remoteAddress = remoteConnection.getAddress();\n+      if (remoteAddress != null) {\n+        onPeerConnection(span, remoteAddress);\n+      } else {\n+        // Failed DNS lookup, the host string is the name.\n+        setPeer(span, remoteConnection.getHostString(), null);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n+    }\n+  }\n+\n+  public static void onPeerConnection(Span span, InetAddress remoteAddress) {\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+  }\n+\n+  public static void setPeer(Span span, String peerName, String peerIp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1MjI2MA==", "bodyText": "will that be confusing to use the same method name for all 3?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472352260", "createdAt": "2020-08-18T17:09:58Z", "author": {"login": "heyams"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {\n+\n+  public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {\n+    if (remoteConnection != null) {\n+      InetAddress remoteAddress = remoteConnection.getAddress();\n+      if (remoteAddress != null) {\n+        onPeerConnection(span, remoteAddress);\n+      } else {\n+        // Failed DNS lookup, the host string is the name.\n+        setPeer(span, remoteConnection.getHostString(), null);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n+    }\n+  }\n+\n+  public static void onPeerConnection(Span span, InetAddress remoteAddress) {\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+  }\n+\n+  public static void setPeer(Span span, String peerName, String peerIp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTk3Nw=="}, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM1NjA0Nw==", "bodyText": "I don't think so, they all set the same things, just have different inputs", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472356047", "createdAt": "2020-08-18T17:16:24Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {\n+\n+  public static void onPeerConnection(Span span, InetSocketAddress remoteConnection) {\n+    if (remoteConnection != null) {\n+      InetAddress remoteAddress = remoteConnection.getAddress();\n+      if (remoteAddress != null) {\n+        onPeerConnection(span, remoteAddress);\n+      } else {\n+        // Failed DNS lookup, the host string is the name.\n+        setPeer(span, remoteConnection.getHostString(), null);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n+    }\n+  }\n+\n+  public static void onPeerConnection(Span span, InetAddress remoteAddress) {\n+    setPeer(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+  }\n+\n+  public static void setPeer(Span span, String peerName, String peerIp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NTk3Nw=="}, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY0Mzk5OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0NzowM1rOHCCSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0NzowM1rOHCCSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5Njc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class NetPeerHelper {\n          \n          \n            \n            /**\n          \n          \n            \n             * Utility methods for setting net.peer.* semantic attributes.\n          \n          \n            \n             */\n          \n          \n            \n            public class NetPeerUtils {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471896763", "createdAt": "2020-08-18T03:47:03Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/NetPeerHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY0NzczOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0OToyM1rOHCCU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0OToyM1rOHCCU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NzMxNg==", "bodyText": "good to move this to new a test NetPeerUtilsTest since it no longer tests BaseTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471897316", "createdAt": "2020-08-18T03:49:23Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "diffHunk": "@@ -34,7 +34,7 @@ class BaseTracerTest extends AgentSpecification {\n \n   def \"test onPeerConnection\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY0ODA1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0OTozOVrOHCCVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo0OTozOVrOHCCVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5NzM2MQ==", "bodyText": "same with this test", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471897361", "createdAt": "2020-08-18T03:49:39Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "diffHunk": "@@ -59,7 +59,7 @@ class BaseTracerTest extends AgentSpecification {\n     ConfigUtils.withConfigOverride(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1NTY1OnYy", "diffSide": "RIGHT", "path": "instrumentation/finatra-2.9/src/main/java/io/opentelemetry/instrumentation/auto/finatra/FinatraInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NDoyOVrOHCCZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NDoyOVrOHCCZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5ODU1Mg==", "bodyText": "@anuraaga @iNikem what do you think of making getCurrentServerSpan() an instance method even though it doesn't need to be (e.g. for DI / testability since this can be used by manual instrumentation)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471898552", "createdAt": "2020-08-18T03:54:29Z", "author": {"login": "trask"}, "path": "instrumentation/finatra-2.9/src/main/java/io/opentelemetry/instrumentation/auto/finatra/FinatraInstrumentation.java", "diffHunk": "@@ -84,12 +86,12 @@ public static SpanWithScope nameSpan(\n         @Advice.FieldValue(\"routeInfo\") RouteInfo routeInfo,\n         @Advice.FieldValue(\"clazz\") Class clazz) {\n \n-      Span serverSpan = TRACER.getCurrentServerSpan();\n+      Span serverSpan = BaseTracer.getCurrentServerSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1ODAxOnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/ChannelFutureListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NTo0OFrOHCCbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NTo0OFrOHCCbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5ODg5Nw==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);\n          \n          \n            \n                  Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.CLIENT);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471898897", "createdAt": "2020-08-18T03:55:48Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.1/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_1/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -103,7 +104,7 @@ public static Scope activateScope(@Advice.Argument(0) ChannelFuture future) {\n         return null;\n       }\n       Scope parentScope = currentContextWith(parentSpan);\n-      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n+      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1ODcwOnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/ChannelFutureListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NjoxNVrOHCCbcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NjoxNVrOHCCbcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5ODk5Mw==", "bodyText": "Can you change this to Kind.CLIENT and update tests if needed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);\n          \n          \n            \n                  Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.CLIENT);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471898993", "createdAt": "2020-08-18T03:56:15Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -113,7 +114,7 @@ public static Scope activateScope(@Advice.Argument(0) ChannelFuture future) {\n         return null;\n       }\n       Scope parentScope = currentContextWith(continuation);\n-      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n+      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1OTA1OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/ChannelFutureListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NjoyNlrOHCCbmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NjoyNlrOHCCbmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5OTAzMw==", "bodyText": "same\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Span span = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);\n          \n          \n            \n                  Span span = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.CLIENT);", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471899033", "createdAt": "2020-08-18T03:56:26Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-4.0/src/main/java/io/opentelemetry/instrumentation/auto/netty/v4_0/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -103,7 +104,7 @@ public static Scope activateScope(@Advice.Argument(0) ChannelFuture future) {\n         return null;\n       }\n       Scope parentScope = currentContextWith(parentSpan);\n-      Span span = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n+      Span span = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.INTERNAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1OTc2OnYy", "diffSide": "RIGHT", "path": "instrumentation/play/play-2.4/src/main/java/io/opentelemetry/instrumentation/auto/play/v2_4/PlayAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1Njo1MFrOHCCcBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1Njo1MFrOHCCcBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5OTE0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static SpanWithScope onEnter(@Advice.Argument(0) final Request<?> req) {\n          \n          \n            \n              public static SpanWithScope onEnter(@Advice.Argument(0) Request<?> req) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471899141", "createdAt": "2020-08-18T03:56:50Z", "author": {"login": "trask"}, "path": "instrumentation/play/play-2.4/src/main/java/io/opentelemetry/instrumentation/auto/play/v2_4/PlayAdvice.java", "diffHunk": "@@ -30,8 +32,8 @@\n \n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope onEnter(@Advice.Argument(0) Request<?> req) {\n-    Span span = TRACER.startSpan(\"play.request\");\n+  public static SpanWithScope onEnter(@Advice.Argument(0) final Request<?> req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY1OTk3OnYy", "diffSide": "RIGHT", "path": "instrumentation/play/play-2.6/src/main/java/io/opentelemetry/instrumentation/auto/play/v2_6/PlayAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NzowMVrOHCCcJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1NzowMVrOHCCcJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5OTE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static SpanWithScope onEnter(@Advice.Argument(0) final Request<?> req) {\n          \n          \n            \n              public static SpanWithScope onEnter(@Advice.Argument(0) Request<?> req) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471899172", "createdAt": "2020-08-18T03:57:01Z", "author": {"login": "trask"}, "path": "instrumentation/play/play-2.6/src/main/java/io/opentelemetry/instrumentation/auto/play/v2_6/PlayAdvice.java", "diffHunk": "@@ -29,8 +31,8 @@\n \n public class PlayAdvice {\n   @Advice.OnMethodEnter(suppress = Throwable.class)\n-  public static SpanWithScope onEnter(@Advice.Argument(0) Request<?> req) {\n-    Span span = DECORATE.startSpan(\"play.request\");\n+  public static SpanWithScope onEnter(@Advice.Argument(0) final Request<?> req) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTY2MTE3OnYy", "diffSide": "RIGHT", "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/auto/springwebmvc/HandlerAdapterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1Nzo0M1rOHCCc2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMzo1Nzo0M1rOHCCc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg5OTM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Advice.Argument(0) final HttpServletRequest request,\n          \n          \n            \n                    @Advice.Argument(2) final Object handler) {\n          \n          \n            \n                    @Advice.Argument(0) HttpServletRequest request,\n          \n          \n            \n                    @Advice.Argument(2) Object handler) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r471899352", "createdAt": "2020-08-18T03:57:43Z", "author": {"login": "trask"}, "path": "instrumentation/spring-webmvc-3.1/src/main/java/io/opentelemetry/instrumentation/auto/springwebmvc/HandlerAdapterInstrumentation.java", "diffHunk": "@@ -76,8 +77,9 @@ public HandlerAdapterInstrumentation() {\n   public static class ControllerAdvice {\n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static SpanWithScope nameResourceAndStartSpan(\n-        @Advice.Argument(0) HttpServletRequest request, @Advice.Argument(2) Object handler) {\n-      Span serverSpan = TRACER.getCurrentServerSpan();\n+        @Advice.Argument(0) final HttpServletRequest request,\n+        @Advice.Argument(2) final Object handler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ecae669c56028628fe369228ad2da364fe1854c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjY4MzE3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0ODoyNFrOHCffow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0Nzo1NFrOHCjb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTIwMw==", "bodyText": "I think better to leave this in both HttpClientTracer and HttpServerTracer, since it's only specific to those two subclasses of BaseTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472375203", "createdAt": "2020-08-18T17:48:24Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -39,6 +36,8 @@\n   public static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n       Context.key(\"opentelemetry-trace-auto-client-span-key\");\n \n+  protected static final String USER_AGENT = \"User-Agent\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf896582980df2c5aa5ee75e00921ec1dcd5e3d6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMDAwNA==", "bodyText": "this is also used by AwsSdkClientTracer.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472430004", "createdAt": "2020-08-18T19:28:28Z", "author": {"login": "heyams"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -39,6 +36,8 @@\n   public static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n       Context.key(\"opentelemetry-trace-auto-client-span-key\");\n \n+  protected static final String USER_AGENT = \"User-Agent\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTIwMw=="}, "originalCommit": {"oid": "cf896582980df2c5aa5ee75e00921ec1dcd5e3d6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzOTc5Mw==", "bodyText": "AwsSdkClientTracer can access USER_AGENT in HttpClientTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472439793", "createdAt": "2020-08-18T19:47:54Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -39,6 +36,8 @@\n   public static final Context.Key<Span> CONTEXT_CLIENT_SPAN_KEY =\n       Context.key(\"opentelemetry-trace-auto-client-span-key\");\n \n+  protected static final String USER_AGENT = \"User-Agent\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTIwMw=="}, "originalCommit": {"oid": "cf896582980df2c5aa5ee75e00921ec1dcd5e3d6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc5NTAzOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMDoyMFrOHCgmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMDoyMFrOHCgmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5MzQxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  } catch (final Exception e) {\n          \n          \n            \n                  } catch (Exception e) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472393410", "createdAt": "2020-08-18T18:20:20Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpClientTracer.java", "diffHunk": "@@ -139,49 +139,20 @@ protected Span onRequest(Span span, REQUEST request) {\n         SemanticAttributes.HTTP_USER_AGENT.set(span, userAgent);\n       }\n \n-      // Copy of HttpServerDecorator url handling\n       try {\n         URI url = url(request);\n-        if (url != null) {\n-          StringBuilder urlBuilder = new StringBuilder();\n-          if (url.getScheme() != null) {\n-            urlBuilder.append(url.getScheme());\n-            urlBuilder.append(\"://\");\n-          }\n-          if (url.getHost() != null) {\n-            urlBuilder.append(url.getHost());\n-            setPeer(span, url.getHost(), null);\n-            if (url.getPort() > 0) {\n-              span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), url.getPort());\n-              if (url.getPort() != 80 && url.getPort() != 443) {\n-                urlBuilder.append(\":\");\n-                urlBuilder.append(url.getPort());\n-              }\n-            }\n-          }\n-          String path = url.getPath();\n-          if (path.isEmpty()) {\n-            urlBuilder.append(\"/\");\n-          } else {\n-            urlBuilder.append(path);\n-          }\n-          String query = url.getQuery();\n-          if (query != null) {\n-            urlBuilder.append(\"?\").append(query);\n-          }\n-          String fragment = url.getFragment();\n-          if (fragment != null) {\n-            urlBuilder.append(\"#\").append(fragment);\n-          }\n-\n-          span.setAttribute(SemanticAttributes.HTTP_URL.key(), urlBuilder.toString());\n-\n-          if (Config.get().isHttpClientTagQueryString()) {\n-            span.setAttribute(MoreAttributes.HTTP_QUERY, query);\n-            span.setAttribute(MoreAttributes.HTTP_FRAGMENT, fragment);\n+        if (url != null && url.getHost() != null) {\n+          NetPeerUtils.setAttributes(span, url.getHost(), null);\n+          if (url.getPort() > 0) {\n+            span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), url.getPort());\n           }\n         }\n-      } catch (Exception e) {\n+        HttpUrlUtils.tagUrl(url, span);\n+        if (Config.get().isHttpClientTagQueryString()) {\n+          span.setAttribute(MoreAttributes.HTTP_QUERY, url.getQuery());\n+          span.setAttribute(MoreAttributes.HTTP_FRAGMENT, url.getFragment());\n+        }\n+      } catch (final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjc5ODczOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMToxOVrOHCgpCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMToxOVrOHCgpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5Mzk5NQ==", "bodyText": "to match NetPeerUtils:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void tagUrl(URI url, Span span) {\n          \n          \n            \n              public static void setHttpUrlAttribute(Span span, URI url) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472393995", "createdAt": "2020-08-18T18:21:19Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void tagUrl(URI url, Span span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjgwNDQ3OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMzowNVrOHCgsyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyMzowNVrOHCgsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NDk1Mw==", "bodyText": "\ud83d\ude04 since there are none now\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // TODO add more tests for BaseTracer\n          \n          \n            \n            // TODO add tests for BaseTracer", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472394953", "createdAt": "2020-08-18T18:23:05Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "diffHunk": "@@ -16,14 +16,12 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import io.opentelemetry.auto.test.utils.ConfigUtils\n import io.opentelemetry.auto.util.test.AgentSpecification\n import io.opentelemetry.trace.Span\n-import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n+// TODO add more tests for BaseTracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjgwODk4OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyNDoyNFrOHCgvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0OTowMlrOHCmJvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NTY3OQ==", "bodyText": "we recently updated groovy import layout in #816", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472395679", "createdAt": "2020-08-18T18:24:24Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "diffHunk": "@@ -16,14 +16,14 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import static io.opentelemetry.auto.test.utils.ConfigUtils.withConfigOverride\n-\n import io.opentelemetry.context.propagation.HttpTextFormat\n import io.opentelemetry.instrumentation.api.decorator.HttpStatusConverter\n import io.opentelemetry.trace.Span\n import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n+import static io.opentelemetry.auto.test.utils.ConfigUtils.withConfigOverride", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NDI4Nw==", "bodyText": "i think u missed this one", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472484287", "createdAt": "2020-08-18T20:49:02Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/HttpClientTracerTest.groovy", "diffHunk": "@@ -16,14 +16,14 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import static io.opentelemetry.auto.test.utils.ConfigUtils.withConfigOverride\n-\n import io.opentelemetry.context.propagation.HttpTextFormat\n import io.opentelemetry.instrumentation.api.decorator.HttpStatusConverter\n import io.opentelemetry.trace.Span\n import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n+import static io.opentelemetry.auto.test.utils.ConfigUtils.withConfigOverride", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NTY3OQ=="}, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjgxODk0OnYy", "diffSide": "RIGHT", "path": "instrumentation/http-url-connection/src/test/groovy/UrlConnectionTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyNzowOVrOHCg1tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODoyNzowOVrOHCg1tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM5NzIzOQ==", "bodyText": "same (#816)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472397239", "createdAt": "2020-08-18T18:27:09Z", "author": {"login": "trask"}, "path": "instrumentation/http-url-connection/src/test/groovy/UrlConnectionTest.groovy", "diffHunk": "@@ -14,15 +14,16 @@\n  * limitations under the License.\n  */\n \n-import static io.opentelemetry.auto.test.utils.PortUtils.UNUSABLE_PORT\n-import static io.opentelemetry.auto.test.utils.TraceUtils.runUnderTrace\n-import static io.opentelemetry.trace.Span.Kind.CLIENT\n \n import io.opentelemetry.auto.test.AgentTestRunner\n import io.opentelemetry.instrumentation.api.tracer.HttpClientTracer\n import io.opentelemetry.instrumentation.auto.api.AgentClassLoader\n import io.opentelemetry.trace.attributes.SemanticAttributes\n \n+import static io.opentelemetry.auto.test.utils.PortUtils.UNUSABLE_PORT\n+import static io.opentelemetry.auto.test.utils.TraceUtils.runUnderTrace\n+import static io.opentelemetry.trace.Span.Kind.CLIENT\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da92468f5c059a32f93890d08b2d3519700bc6aa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk0NDMxOnYy", "diffSide": "LEFT", "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/instrumentation/auto/httpurlconnection/UrlInstrumentation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowNTowMVrOHCiD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozNTo1NVrOHClvEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNzI2MA==", "bodyText": "sorry it looks like I was wrong about this, I thought these attributes would get set by HttpClientTracer, but I can see from test changes that they do not. i suggest reverting this change (and remove the unnecessary scope here, because i think that will make it more clear that this is not a normal instrumentation)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472417260", "createdAt": "2020-08-18T19:05:01Z", "author": {"login": "trask"}, "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/instrumentation/auto/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -83,14 +83,11 @@ public static void errorSpan(\n         String protocol = url.getProtocol();\n         protocol = protocol != null ? protocol : \"url\";\n \n-        Span span = TRACER.startSpan(protocol + \".request\");\n+        Span span = TRACER.startSpan(protocol + \".request\", Kind.CLIENT);\n         try (Scope scope = currentContextWith(span)) {\n-          span.setAttribute(SemanticAttributes.HTTP_URL.key(), url.toString());\n-          span.setAttribute(\n-              SemanticAttributes.NET_PEER_PORT.key(), url.getPort() == -1 ? 80 : url.getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb917fe539ae5ff07e7ad08423846dbcb54f3b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNDIyMg==", "bodyText": "url and port are setting inside onRequest.  UrlInstrumentation didn't call onRequest. is that why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472424222", "createdAt": "2020-08-18T19:18:23Z", "author": {"login": "heyams"}, "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/instrumentation/auto/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -83,14 +83,11 @@ public static void errorSpan(\n         String protocol = url.getProtocol();\n         protocol = protocol != null ? protocol : \"url\";\n \n-        Span span = TRACER.startSpan(protocol + \".request\");\n+        Span span = TRACER.startSpan(protocol + \".request\", Kind.CLIENT);\n         try (Scope scope = currentContextWith(span)) {\n-          span.setAttribute(SemanticAttributes.HTTP_URL.key(), url.toString());\n-          span.setAttribute(\n-              SemanticAttributes.NET_PEER_PORT.key(), url.getPort() == -1 ? 80 : url.getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNzI2MA=="}, "originalCommit": {"oid": "9fb917fe539ae5ff07e7ad08423846dbcb54f3b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMjU0OQ==", "bodyText": "Let's verify it together offline.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472432549", "createdAt": "2020-08-18T19:33:27Z", "author": {"login": "heyams"}, "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/instrumentation/auto/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -83,14 +83,11 @@ public static void errorSpan(\n         String protocol = url.getProtocol();\n         protocol = protocol != null ? protocol : \"url\";\n \n-        Span span = TRACER.startSpan(protocol + \".request\");\n+        Span span = TRACER.startSpan(protocol + \".request\", Kind.CLIENT);\n         try (Scope scope = currentContextWith(span)) {\n-          span.setAttribute(SemanticAttributes.HTTP_URL.key(), url.toString());\n-          span.setAttribute(\n-              SemanticAttributes.NET_PEER_PORT.key(), url.getPort() == -1 ? 80 : url.getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNzI2MA=="}, "originalCommit": {"oid": "9fb917fe539ae5ff07e7ad08423846dbcb54f3b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NzQ1Nw==", "bodyText": "Reverted.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472477457", "createdAt": "2020-08-18T20:35:55Z", "author": {"login": "heyams"}, "path": "instrumentation/http-url-connection/src/main/java/io/opentelemetry/instrumentation/auto/httpurlconnection/UrlInstrumentation.java", "diffHunk": "@@ -83,14 +83,11 @@ public static void errorSpan(\n         String protocol = url.getProtocol();\n         protocol = protocol != null ? protocol : \"url\";\n \n-        Span span = TRACER.startSpan(protocol + \".request\");\n+        Span span = TRACER.startSpan(protocol + \".request\", Kind.CLIENT);\n         try (Scope scope = currentContextWith(span)) {\n-          span.setAttribute(SemanticAttributes.HTTP_URL.key(), url.toString());\n-          span.setAttribute(\n-              SemanticAttributes.NET_PEER_PORT.key(), url.getPort() == -1 ? 80 : url.getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNzI2MA=="}, "originalCommit": {"oid": "9fb917fe539ae5ff07e7ad08423846dbcb54f3b1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk1OTE1OnYy", "diffSide": "RIGHT", "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/ChannelFutureListenerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowOTo1MFrOHCiNvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowOTo1MFrOHCiNvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTc3Mg==", "bodyText": "i see we weren't verifying the span kind here in our tests, opened #1044", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472419772", "createdAt": "2020-08-18T19:09:50Z", "author": {"login": "trask"}, "path": "instrumentation/netty/netty-3.8/src/main/java/io/opentelemetry/instrumentation/auto/netty/v3_8/ChannelFutureListenerInstrumentation.java", "diffHunk": "@@ -113,7 +114,7 @@ public static Scope activateScope(@Advice.Argument(0) ChannelFuture future) {\n         return null;\n       }\n       Scope parentScope = currentContextWith(continuation);\n-      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\");\n+      Span errorSpan = NettyHttpClientTracer.TRACER.startSpan(\"CONNECT\", Kind.CLIENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb917fe539ae5ff07e7ad08423846dbcb54f3b1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM2Njk2OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MToxNlrOHCmOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToyMjozN1rOHCnKWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTQ1MA==", "bodyText": "may as well keep prior order here\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final boolean FAIL_ON_CONTEXT_LEAK =\n          \n          \n            \n                  Boolean.getBoolean(\"otel.internal.failOnContextLeak\");\n          \n          \n            \n            \n          \n          \n            \n              protected static final String USER_AGENT = \"User-Agent\";\n          \n          \n            \n              protected static final String USER_AGENT = \"User-Agent\";\n          \n          \n            \n            \n          \n          \n            \n              private static final boolean FAIL_ON_CONTEXT_LEAK =\n          \n          \n            \n                  Boolean.getBoolean(\"otel.internal.failOnContextLeak\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472485450", "createdAt": "2020-08-18T20:51:16Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -49,11 +50,11 @@\n \n   public static final String CONTEXT_ATTRIBUTE = \"io.opentelemetry.instrumentation.context\";\n \n-  protected static final String USER_AGENT = \"User-Agent\";\n-\n   private static final boolean FAIL_ON_CONTEXT_LEAK =\n       Boolean.getBoolean(\"otel.internal.failOnContextLeak\");\n \n+  protected static final String USER_AGENT = \"User-Agent\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ae45c8891064b52f4e334920de03ae41e8b2d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDgyNQ==", "bodyText": "what is the benefit does it gain? I usually put protected behind private.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472500825", "createdAt": "2020-08-18T21:22:37Z", "author": {"login": "heyams"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/HttpServerTracer.java", "diffHunk": "@@ -49,11 +50,11 @@\n \n   public static final String CONTEXT_ATTRIBUTE = \"io.opentelemetry.instrumentation.context\";\n \n-  protected static final String USER_AGENT = \"User-Agent\";\n-\n   private static final boolean FAIL_ON_CONTEXT_LEAK =\n       Boolean.getBoolean(\"otel.internal.failOnContextLeak\");\n \n+  protected static final String USER_AGENT = \"User-Agent\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTQ1MA=="}, "originalCommit": {"oid": "54ae45c8891064b52f4e334920de03ae41e8b2d3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM2OTY0OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MTo1OVrOHCmP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MTo1OVrOHCmP2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTg1MA==", "bodyText": "to stay consistent with NetPeerUtils:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void setHttpUrlAttribute(URI url, Span span) {\n          \n          \n            \n              public static void setHttpUrlAttribute(Span span, URI url) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472485850", "createdAt": "2020-08-18T20:51:59Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void setHttpUrlAttribute(URI url, Span span) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54ae45c8891064b52f4e334920de03ae41e8b2d3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA0MDg1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyODoxM1rOHC2tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyODoxM1rOHC2tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NTYwMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472755603", "createdAt": "2020-08-19T06:28:13Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/BaseTracer.java", "diffHunk": "@@ -51,23 +48,17 @@ public BaseTracer(Tracer tracer) {\n \n   public Span startSpan(Class<?> clazz) {\n     String spanName = spanNameForClass(clazz);\n-    return startSpan(spanName);\n+    return startSpan(spanName, Kind.INTERNAL);\n   }\n \n-  public Span startSpan(String spanName) {\n-    return tracer.spanBuilder(spanName).startSpan();\n+  public Span startSpan(String spanName, Kind kind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA0NjA4OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOToyOVrOHC2w7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOToyOVrOHC2w7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NjQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class HttpUrlUtils {\n          \n          \n            \n            public final class HttpUrlUtils {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472756461", "createdAt": "2020-08-19T06:29:29Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA0NzE1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOTo0MlrOHC2xng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOTo0MlrOHC2xng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n              private HttpUrlUtils() {}\n          \n          \n            \n            }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472756638", "createdAt": "2020-08-19T06:29:42Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void setHttpUrlAttribute(Span span, URI url) {\n+    if (url != null) {\n+      StringBuilder urlBuilder = new StringBuilder();\n+      if (url.getScheme() != null) {\n+        urlBuilder.append(url.getScheme());\n+        urlBuilder.append(\"://\");\n+      }\n+      if (url.getHost() != null) {\n+        urlBuilder.append(url.getHost());\n+        if (url.getPort() > 0 && url.getPort() != 80 && url.getPort() != 443) {\n+          urlBuilder.append(\":\");\n+          urlBuilder.append(url.getPort());\n+        }\n+      }\n+      String path = url.getPath();\n+      if (path.isEmpty()) {\n+        urlBuilder.append(\"/\");\n+      } else {\n+        urlBuilder.append(path);\n+      }\n+      String query = url.getQuery();\n+      if (query != null) {\n+        urlBuilder.append(\"?\").append(query);\n+      }\n+      String fragment = url.getFragment();\n+      if (fragment != null) {\n+        urlBuilder.append(\"#\").append(fragment);\n+      }\n+\n+      span.setAttribute(SemanticAttributes.HTTP_URL.key(), urlBuilder.toString());\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA0Nzk1OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOTo1NFrOHC2yHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyOTo1NFrOHC2yHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1Njc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class NetPeerUtils {\n          \n          \n            \n            public final class NetPeerUtils {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472756766", "createdAt": "2020-08-19T06:29:54Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA0ODgzOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMDowNFrOHC2ytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMDowNFrOHC2ytQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NjkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n              private NetPeerUtils() {}\n          \n          \n            \n            }", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472756917", "createdAt": "2020-08-19T06:30:04Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerUtils {\n+\n+  public static void setAttributes(Span span, InetSocketAddress remoteConnection) {\n+    if (remoteConnection != null) {\n+      InetAddress remoteAddress = remoteConnection.getAddress();\n+      if (remoteAddress != null) {\n+        setAttributes(span, remoteAddress);\n+      } else {\n+        // Failed DNS lookup, the host string is the name.\n+        setAttributes(span, remoteConnection.getHostString(), null);\n+      }\n+      span.setAttribute(SemanticAttributes.NET_PEER_PORT.key(), remoteConnection.getPort());\n+    }\n+  }\n+\n+  public static void setAttributes(Span span, InetAddress remoteAddress) {\n+    setAttributes(span, remoteAddress.getHostName(), remoteAddress.getHostAddress());\n+  }\n+\n+  public static void setAttributes(Span span, String peerName, String peerIp) {\n+    if (peerName != null && !peerName.equals(peerIp)) {\n+      SemanticAttributes.NET_PEER_NAME.set(span, peerName);\n+    }\n+    if (peerIp != null) {\n+      SemanticAttributes.NET_PEER_IP.set(span, peerIp);\n+    }\n+    String peerService = mapToPeer(peerName);\n+    if (peerService == null) {\n+      peerService = mapToPeer(peerIp);\n+    }\n+    if (peerService != null) {\n+      SemanticAttributes.PEER_SERVICE.set(span, peerService);\n+    }\n+  }\n+\n+  private static String mapToPeer(String endpoint) {\n+    if (endpoint == null) {\n+      return null;\n+    }\n+\n+    return Config.get().getEndpointPeerServiceMapping().get(endpoint);\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA1MzE2OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMTowNVrOHC21rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozMDoyM1rOHDSJDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NzY3OA==", "bodyText": "I don't think we need Attribute in the names, it's sort of an implementation detail. We're mostly concerned with setting the URL into the Span", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472757678", "createdAt": "2020-08-19T06:31:05Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void setHttpUrlAttribute(Span span, URI url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMTI4NQ==", "bodyText": "how about setNetPeer for NetPeerUtils to be consistent with setHttpUrl in HttpUrlUtils?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r473201285", "createdAt": "2020-08-19T17:23:46Z", "author": {"login": "heyams"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void setHttpUrlAttribute(Span span, URI url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NzY3OA=="}, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNTAwNw==", "bodyText": "How about?\n\nHttpUrlUtils.setHttpUrl()\nNetPeerUtils.setNetPeerInfo()\n\n(the info because it sets more than one attribute)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r473205007", "createdAt": "2020-08-19T17:30:23Z", "author": {"login": "trask"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/HttpUrlUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.URI;\n+\n+public class HttpUrlUtils {\n+\n+  public static void setHttpUrlAttribute(Span span, URI url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1NzY3OA=="}, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA1NjcyOnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMTo0OVrOHC24DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMTo0OVrOHC24DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODI4NA==", "bodyText": "Maybe name it setPeerInfo for all the methods", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472758284", "createdAt": "2020-08-19T06:31:49Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/main/java/io/opentelemetry/instrumentation/api/tracer/utils/NetPeerUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.instrumentation.api.tracer.utils;\n+\n+import io.opentelemetry.instrumentation.api.config.Config;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class NetPeerUtils {\n+\n+  public static void setAttributes(Span span, InetSocketAddress remoteConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA2MDE5OnYy", "diffSide": "RIGHT", "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMjo0M1rOHC26bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzozMToyMFrOHDSLXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODg5Mg==", "bodyText": "If there are any tests that came to mind when you wrote this TODO, I think it's better to file an issue with some examples. I have no idea how to resolve this TODO right now :P", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r472758892", "createdAt": "2020-08-19T06:32:43Z", "author": {"login": "anuraaga"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "diffHunk": "@@ -16,14 +16,12 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import io.opentelemetry.auto.test.utils.ConfigUtils\n import io.opentelemetry.auto.util.test.AgentSpecification\n import io.opentelemetry.trace.Span\n-import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n+// TODO add tests for BaseTracer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNTU5OA==", "bodyText": "see #1063", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1040#discussion_r473205598", "createdAt": "2020-08-19T17:31:20Z", "author": {"login": "heyams"}, "path": "instrumentation-api/src/test/groovy/io/opentelemetry/instrumentation/api/tracer/BaseTracerTest.groovy", "diffHunk": "@@ -16,14 +16,12 @@\n \n package io.opentelemetry.instrumentation.api.tracer\n \n-import io.opentelemetry.auto.test.utils.ConfigUtils\n import io.opentelemetry.auto.util.test.AgentSpecification\n import io.opentelemetry.trace.Span\n-import io.opentelemetry.trace.attributes.SemanticAttributes\n import spock.lang.Shared\n \n+// TODO add tests for BaseTracer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODg5Mg=="}, "originalCommit": {"oid": "ac2ccea474adef633306cf0af7a5c6148fd50ed6"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}