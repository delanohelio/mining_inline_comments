{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDU1NjEw", "number": 1533, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyNDoyM1rOE23zWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMTozOFrOE3VaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTcyODI2OnYy", "diffSide": "RIGHT", "path": "javaagent-api/src/test/groovy/io/opentelemetry/javaagent/instrumentation/api/db/normalizer/SqlStatementInfoExtractorTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyNDoyM1rOHv5fpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozMzozMVrOHv538Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NzEwOA==", "bodyText": "Maybe add a comment one just to document the known edge case (unless I'm misreading the code and this actually works)?\n'/*comment*/ select * from table1' -> null/null", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r519987108", "createdAt": "2020-11-09T17:24:23Z", "author": {"login": "johnbley"}, "path": "javaagent-api/src/test/groovy/io/opentelemetry/javaagent/instrumentation/api/db/normalizer/SqlStatementInfoExtractorTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.SqlStatementInfo\n+import spock.lang.Specification\n+import spock.lang.Unroll\n+\n+class SqlStatementInfoExtractorTest extends Specification {\n+\n+  @Unroll\n+  def \"should simplify #sql\"() {\n+    expect:\n+    SqlStatementInfoExtractor.extract(sql) == expected\n+\n+    where:\n+    sql                                                               | expected\n+    // Select\n+    'SELECT x, y, z FROM schema.table'                                | new SqlStatementInfo(sql, 'SELECT', 'schema.table')\n+    'WITH subquery as (select a from b) SELECT x, y, z FROM table'    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'SELECT x, y, (select a from b) as z FROM table'                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select delete, insert into, merge, update from table'            | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col /* from table2 */ from table'                         | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table join anotherTable'                         | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable)'                    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable) alias'              | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 union select col from table2'             | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (select * from anotherTable)' | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1, table2'                                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 t1, table2 t2'                            | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 as t1, table2 as t2'                      | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (1, 2, 3)'                    | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table order by col, col2'                        | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select \u0105\u015b\u2202\u0144\u00a9 from \u017a\u0107\u013c\u0144\u0136 order by col, col2'                      | new SqlStatementInfo(sql, 'SELECT', '\u017a\u0107\u013c\u0144\u0136')\n+    'select 12345678'                                                 | new SqlStatementInfo(sql, 'SELECT', null)\n+    // Insert\n+    ' insert into table where lalala'                                 | new SqlStatementInfo(sql.trim(), 'INSERT', 'table')\n+    'insert insert into table where lalala'                           | new SqlStatementInfo(sql, 'INSERT', 'table')\n+    'insert into db.table where lalala'                               | new SqlStatementInfo(sql, 'INSERT', 'db.table')\n+    'insert without i-n-t-o'                                          | new SqlStatementInfo(sql, 'INSERT', null)\n+    // Delete\n+    'delete from table where something something'                     | new SqlStatementInfo(sql, 'DELETE', 'table')\n+    'delete from 12345678'                                            | new SqlStatementInfo(sql, 'DELETE', null)\n+    'delete   ((('                                                    | new SqlStatementInfo(sql, 'DELETE', null)\n+    // Update\n+    'update table set answer=42'                                      | new SqlStatementInfo(sql, 'UPDATE', 'table')\n+    'update /*table'                                                  | new SqlStatementInfo(sql, 'UPDATE', null)\n+    // Merge\n+    'merge into table'                                                | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge table (into is optional in some dbs)'                      | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge (into )))'                                                 | new SqlStatementInfo(sql, 'MERGE', null)\n+    // Unknown operation\n+    'and now for something completely different'                      | new SqlStatementInfo(sql, null, null)\n+    ''                                                                | new SqlStatementInfo(sql, null, null)\n+    null                                                              | new SqlStatementInfo(sql, null, null)\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53e1f759ce08246c4642a6d7014b2b7e0ea8024"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5MzMyOQ==", "bodyText": "This actually works, but I'll add a test case for that anyway.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r519993329", "createdAt": "2020-11-09T17:33:31Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-api/src/test/groovy/io/opentelemetry/javaagent/instrumentation/api/db/normalizer/SqlStatementInfoExtractorTest.groovy", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.api.db.normalizer\n+\n+import io.opentelemetry.javaagent.instrumentation.api.db.SqlStatementInfo\n+import spock.lang.Specification\n+import spock.lang.Unroll\n+\n+class SqlStatementInfoExtractorTest extends Specification {\n+\n+  @Unroll\n+  def \"should simplify #sql\"() {\n+    expect:\n+    SqlStatementInfoExtractor.extract(sql) == expected\n+\n+    where:\n+    sql                                                               | expected\n+    // Select\n+    'SELECT x, y, z FROM schema.table'                                | new SqlStatementInfo(sql, 'SELECT', 'schema.table')\n+    'WITH subquery as (select a from b) SELECT x, y, z FROM table'    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'SELECT x, y, (select a from b) as z FROM table'                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select delete, insert into, merge, update from table'            | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col /* from table2 */ from table'                         | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table join anotherTable'                         | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable)'                    | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from (select * from anotherTable) alias'              | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 union select col from table2'             | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (select * from anotherTable)' | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1, table2'                                  | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 t1, table2 t2'                            | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table1 as t1, table2 as t2'                      | new SqlStatementInfo(sql, 'SELECT', null)\n+    'select col from table where col in (1, 2, 3)'                    | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select col from table order by col, col2'                        | new SqlStatementInfo(sql, 'SELECT', 'table')\n+    'select \u0105\u015b\u2202\u0144\u00a9 from \u017a\u0107\u013c\u0144\u0136 order by col, col2'                      | new SqlStatementInfo(sql, 'SELECT', '\u017a\u0107\u013c\u0144\u0136')\n+    'select 12345678'                                                 | new SqlStatementInfo(sql, 'SELECT', null)\n+    // Insert\n+    ' insert into table where lalala'                                 | new SqlStatementInfo(sql.trim(), 'INSERT', 'table')\n+    'insert insert into table where lalala'                           | new SqlStatementInfo(sql, 'INSERT', 'table')\n+    'insert into db.table where lalala'                               | new SqlStatementInfo(sql, 'INSERT', 'db.table')\n+    'insert without i-n-t-o'                                          | new SqlStatementInfo(sql, 'INSERT', null)\n+    // Delete\n+    'delete from table where something something'                     | new SqlStatementInfo(sql, 'DELETE', 'table')\n+    'delete from 12345678'                                            | new SqlStatementInfo(sql, 'DELETE', null)\n+    'delete   ((('                                                    | new SqlStatementInfo(sql, 'DELETE', null)\n+    // Update\n+    'update table set answer=42'                                      | new SqlStatementInfo(sql, 'UPDATE', 'table')\n+    'update /*table'                                                  | new SqlStatementInfo(sql, 'UPDATE', null)\n+    // Merge\n+    'merge into table'                                                | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge table (into is optional in some dbs)'                      | new SqlStatementInfo(sql, 'MERGE', 'table')\n+    'merge (into )))'                                                 | new SqlStatementInfo(sql, 'MERGE', null)\n+    // Unknown operation\n+    'and now for something completely different'                      | new SqlStatementInfo(sql, null, null)\n+    ''                                                                | new SqlStatementInfo(sql, null, null)\n+    null                                                              | new SqlStatementInfo(sql, null, null)\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NzEwOA=="}, "originalCommit": {"oid": "d53e1f759ce08246c4642a6d7014b2b7e0ea8024"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDgxNDc2OnYy", "diffSide": "RIGHT", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMjoxODoxMFrOHwD1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToxNjo1NVrOHwX3pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1NjUzNA==", "bodyText": "can query.getOperation() be null here?\nmaybe a unit test for this method to test the different combinations?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520156534", "createdAt": "2020-11-09T22:18:10Z", "author": {"login": "trask"}, "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "diffHunk": "@@ -69,19 +71,44 @@ public Span startSpan(PreparedStatement statement) {\n   }\n \n   public Span startSpan(Statement statement, String query) {\n+    return startSpan(statement, normalizeAndExtractInfo(query));\n+  }\n+\n+  public Span startSpan(Statement statement, SqlStatementInfo queryInfo) {\n     Connection connection = connectionFromStatement(statement);\n     if (connection == null) {\n       return null;\n     }\n \n     DBInfo dbInfo = extractDbInfo(connection);\n \n-    return startSpan(dbInfo, query);\n+    return startSpan(dbInfo, queryInfo);\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(SqlStatementInfo query) {\n+    return query.getFullStatement();\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n-    return JDBCUtils.normalizeSql(query);\n+  protected String spanName(DBInfo connection, SqlStatementInfo query, String normalizedQuery) {\n+    String dbName = dbName(connection);\n+    if (query.getOperation() == null && query.getTable() == null) {\n+      return dbName == null ? DB_QUERY : dbName;\n+    }\n+\n+    StringBuilder name = new StringBuilder();\n+    name.append(query.getOperation()).append(' ');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9974a9c95ba3970b95ecfa28d0687cae105f379a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NDc3NA==", "bodyText": "It can't - the only possible options are null, null, operation, null, operation, table.\nI'll add more unit tests anyway.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520484774", "createdAt": "2020-11-10T11:16:55Z", "author": {"login": "mateuszrzeszutek"}, "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "diffHunk": "@@ -69,19 +71,44 @@ public Span startSpan(PreparedStatement statement) {\n   }\n \n   public Span startSpan(Statement statement, String query) {\n+    return startSpan(statement, normalizeAndExtractInfo(query));\n+  }\n+\n+  public Span startSpan(Statement statement, SqlStatementInfo queryInfo) {\n     Connection connection = connectionFromStatement(statement);\n     if (connection == null) {\n       return null;\n     }\n \n     DBInfo dbInfo = extractDbInfo(connection);\n \n-    return startSpan(dbInfo, query);\n+    return startSpan(dbInfo, queryInfo);\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(SqlStatementInfo query) {\n+    return query.getFullStatement();\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n-    return JDBCUtils.normalizeSql(query);\n+  protected String spanName(DBInfo connection, SqlStatementInfo query, String normalizedQuery) {\n+    String dbName = dbName(connection);\n+    if (query.getOperation() == null && query.getTable() == null) {\n+      return dbName == null ? DB_QUERY : dbName;\n+    }\n+\n+    StringBuilder name = new StringBuilder();\n+    name.append(query.getOperation()).append(' ');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE1NjUzNA=="}, "originalCommit": {"oid": "9974a9c95ba3970b95ecfa28d0687cae105f379a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDU3ODYzOnYy", "diffSide": "RIGHT", "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMTozOFrOHwnpZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzozMTozOFrOHwnpZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MzI3MQ==", "bodyText": "I think this makes more clear that query.getOperation() can't be null below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (query.getOperation() == null && query.getTable() == null) {\n          \n          \n            \n                if (query.getOperation() == null) {", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1533#discussion_r520743271", "createdAt": "2020-11-10T17:31:38Z", "author": {"login": "trask"}, "path": "instrumentation/jdbc/src/main/java/io/opentelemetry/javaagent/instrumentation/jdbc/JdbcTracer.java", "diffHunk": "@@ -69,19 +71,44 @@ public Span startSpan(PreparedStatement statement) {\n   }\n \n   public Span startSpan(Statement statement, String query) {\n+    return startSpan(statement, normalizeAndExtractInfo(query));\n+  }\n+\n+  public Span startSpan(Statement statement, SqlStatementInfo queryInfo) {\n     Connection connection = connectionFromStatement(statement);\n     if (connection == null) {\n       return null;\n     }\n \n     DBInfo dbInfo = extractDbInfo(connection);\n \n-    return startSpan(dbInfo, query);\n+    return startSpan(dbInfo, queryInfo);\n+  }\n+\n+  @Override\n+  protected String normalizeQuery(SqlStatementInfo query) {\n+    return query.getFullStatement();\n   }\n \n   @Override\n-  protected String normalizeQuery(String query) {\n-    return JDBCUtils.normalizeSql(query);\n+  protected String spanName(DBInfo connection, SqlStatementInfo query, String normalizedQuery) {\n+    String dbName = dbName(connection);\n+    if (query.getOperation() == null && query.getTable() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0526c6565b4861e13be508e23506d69a6143160a"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}