{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTUyOTg5", "number": 623, "title": "Add extension point for HTTP client decorators to return headers gene\u2026", "bodyText": "\u2026rically instead of only user agent.\nWhen preparing to record content-length, I realized my previous change for user agents lacked foresight... By providing a generic header extension for HTTP decorators, we should be able to do everything in one place.\nThis should be added to HTTP server decorators too but for now doing client only to make sure it's not a terrible direction to go in.", "createdAt": "2020-07-01T09:04:51Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623", "merged": true, "mergeCommit": {"oid": "1aae2bd7f06db6a4bcc4a3c65134a08704d11c3b"}, "closed": true, "closedAt": "2020-07-02T05:29:22Z", "author": {"login": "anuraaga"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwmdUmAH2gAyNDQyNTUyOTg5OjIyZTgwZDBjODNjYTU4NDVkNDcyMjVjYjlkZmI5ZmVmYzUxNmFlZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw3lUJgFqTQ0MTM1MTExMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22e80d0c83ca5845d47225cb9dfb9fefc516aef9", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/22e80d0c83ca5845d47225cb9dfb9fefc516aef9", "committedDate": "2020-07-01T09:02:52Z", "message": "Add extension point for HTTP client decorators to return headers generically instead of only user agent."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/5b8d26849a9be546c56b59c1df56d9419635e1fe", "committedDate": "2020-07-02T02:14:42Z", "message": "Use older Play API for better compatibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzMyMTM3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#pullrequestreview-441332137", "createdAt": "2020-07-02T03:52:54Z", "commit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMzo1Mjo1NVrOGr8goA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNDoyNDoyM1rOGr8-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzM0NA==", "bodyText": "since this is now arbitrary header, maybe call .toString() (with null check) instead of casting?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733344", "createdAt": "2020-07-02T03:52:55Z", "author": {"login": "trask"}, "path": "instrumentation/aws-sdk/aws-sdk-1.11/src/main/java/io/opentelemetry/auto/instrumentation/awssdk/v1_11/AwsSdkClientDecorator.java", "diffHunk": "@@ -117,7 +117,12 @@ protected Integer status(final Response response) {\n   }\n \n   @Override\n-  protected String userAgent(Request request) {\n-    return (String) request.getHeaders().get(USER_AGENT);\n+  protected String requestHeader(Request request, String name) {\n+    return (String) request.getHeaders().get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzQ4OQ==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733489", "createdAt": "2020-07-02T03:53:40Z", "author": {"login": "trask"}, "path": "instrumentation/google-http-client-1.19/src/main/java/io/opentelemetry/auto/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -50,7 +51,16 @@ protected Integer status(final HttpResponse httpResponse) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    return httpRequest.getHeaders().getUserAgent();\n+  protected String requestHeader(HttpRequest httpRequest, String name) {\n+    return header(httpRequest.getHeaders(), name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpResponse httpResponse, String name) {\n+    return header(httpResponse.getHeaders(), name);\n+  }\n+\n+  private static String header(HttpHeaders headers, String name) {\n+    return (String) headers.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczMzUyMw==", "bodyText": "same", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448733523", "createdAt": "2020-07-02T03:53:48Z", "author": {"login": "trask"}, "path": "instrumentation/jaxrs-client/jaxrs-client-1.1/src/main/java/io/opentelemetry/auto/instrumentation/jaxrsclient/v1_1/JaxRsClientV1Decorator.java", "diffHunk": "@@ -45,7 +45,12 @@ protected Integer status(final ClientResponse clientResponse) {\n   }\n \n   @Override\n-  protected String userAgent(ClientRequest clientRequest) {\n-    return (String) clientRequest.getHeaders().getFirst(USER_AGENT);\n+  protected String requestHeader(ClientRequest clientRequest, String name) {\n+    return (String) clientRequest.getHeaders().getFirst(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0MDg3Mg==", "bodyText": "instead of extracting the response from context twice (even though cheap), do u mind trying out changing ApacheHttpAsyncClientDecorator generic type from HttpContext to HttpResponse, and extracting response from context in TraceContinuedFutureCallback when calling onResponse, e.g.\n    public void completed(final T result) {\n      HttpResponse response = getResponse(context);\n      DECORATE.onResponse(clientSpan, response);\n      ...\n    }\n\ni think this may be nicer\nalso, just noticed, then won't need the response != null conditionals above since response != null is already checked prior to calling those methods", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#discussion_r448740872", "createdAt": "2020-07-02T04:24:23Z", "author": {"login": "trask"}, "path": "instrumentation/apache-httpasyncclient-4.0/src/main/java/io/opentelemetry/auto/instrumentation/apachehttpasyncclient/ApacheHttpAsyncClientDecorator.java", "diffHunk": "@@ -76,8 +77,26 @@ protected Integer status(final HttpContext context) {\n   }\n \n   @Override\n-  protected String userAgent(HttpRequest httpRequest) {\n-    final Header header = httpRequest.getFirstHeader(USER_AGENT);\n+  protected String requestHeader(HttpRequest request, String name) {\n+    return header(request, name);\n+  }\n+\n+  @Override\n+  protected String responseHeader(HttpContext context, String name) {\n+    HttpResponse response = extractResponse(context);\n+    if (response != null) {\n+      return header(response, name);\n+    }\n+    return null;\n+  }\n+\n+  private static String header(HttpMessage message, String name) {\n+    Header header = message.getFirstHeader(name);\n     return header != null ? header.getValue() : null;\n   }\n+\n+  private static HttpResponse extractResponse(HttpContext context) {\n+    Object responseObject = context.getAttribute(HttpCoreContext.HTTP_RESPONSE);\n+    return responseObject instanceof HttpResponse ? (HttpResponse) responseObject : null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8d26849a9be546c56b59c1df56d9419635e1fe"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b0e187d646af5e569a94f4d6051884d27d2cab", "author": {"user": {"login": "anuraaga", "name": "Anuraag Agrawal"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/20b0e187d646af5e569a94f4d6051884d27d2cab", "committedDate": "2020-07-02T04:49:21Z", "message": "Cleanups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzUwOTYx", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#pullrequestreview-441350961", "createdAt": "2020-07-02T04:59:30Z", "commit": {"oid": "20b0e187d646af5e569a94f4d6051884d27d2cab"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzUxMTEw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/623#pullrequestreview-441351110", "createdAt": "2020-07-02T04:59:59Z", "commit": {"oid": "20b0e187d646af5e569a94f4d6051884d27d2cab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3034, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}