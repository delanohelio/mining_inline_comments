{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNDc4MDkw", "number": 1628, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozNToxMlrOE41-tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzozNVrOE5YNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQwMTE3OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozNToxMlrOHzAUYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwOTo1OTo1MFrOHzJ5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NDY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"io.opentelemetry.auto.struts-2\";\n          \n          \n            \n                return \"io.opentelemetry.auto.struts-2.0\";", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523244642", "createdAt": "2020-11-13T21:35:12Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.struts-2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTU0MA==", "bodyText": "Renamed struts-2 to struts-2.3 everywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401540", "createdAt": "2020-11-14T09:59:50Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));\n+  }\n+\n+  @Override\n+  protected String getInstrumentationName() {\n+    return \"io.opentelemetry.auto.struts-2\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NDY0Mg=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQwNDM3OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTozNjozN1rOHzAWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMDoxMzoxOFrOHzJ95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTE0Ng==", "bodyText": "also, can you send a separate PR adding struts to the main README? (separate PR so we can wait to update the README when we release the next version)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            include ':instrumentation:struts-2'\n          \n          \n            \n            include ':instrumentation:struts-2.0'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523245146", "createdAt": "2020-11-13T21:36:37Z", "author": {"login": "trask"}, "path": "settings.gradle", "diffHunk": "@@ -188,6 +188,7 @@ include ':instrumentation:spring:starters:otlp-exporter-starter'\n include ':instrumentation:spring:starters:zipkin-exporter-starter'\n include ':instrumentation:spymemcached-2.12'\n include ':instrumentation:twilio-6.6'\n+include ':instrumentation:struts-2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMjcyNg==", "bodyText": "Updated version to 2.3. Main README PR: #1636", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523402726", "createdAt": "2020-11-14T10:13:18Z", "author": {"login": "vovencij"}, "path": "settings.gradle", "diffHunk": "@@ -188,6 +188,7 @@ include ':instrumentation:spring:starters:otlp-exporter-starter'\n include ':instrumentation:spring:starters:zipkin-exporter-starter'\n include ':instrumentation:spymemcached-2.12'\n include ':instrumentation:twilio-6.6'\n+include ':instrumentation:struts-2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTE0Ng=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQxNTA3OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0MDozOFrOHzAcrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODoyNToxN1rOH1DLiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ==", "bodyText": "can you submit a PR to opentelemetry-java to add these to SemanticAttributes?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523246765", "createdAt": "2020-11-13T21:40:38Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMjgzOQ==", "bodyText": "Will do.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523402839", "createdAt": "2020-11-14T10:14:27Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQxMTMyNg==", "bodyText": "Do I understand correctly, that to update SemanticAttributes.java I have to update https://github.com/open-telemetry/opentelemetry-specification/blob/master/semantic_conventions/trace/general.yaml from which SemanticAttributes.java s eventually generated?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523411326", "createdAt": "2020-11-14T11:50:07Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1MDQ0OQ==", "bodyText": "oh yes, good find, I believe that's the correct spot", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523450449", "createdAt": "2020-11-14T18:51:23Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NDc4NQ==", "bodyText": "open-telemetry/opentelemetry-specification#1229", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525084785", "createdAt": "2020-11-17T11:31:56Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3OTg2Ng==", "bodyText": "@trask are you Ok with merging this PR before we have spec updated, right?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525379866", "createdAt": "2020-11-17T18:11:48Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM4ODY4MA==", "bodyText": "yes \ud83d\udc4d", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r525388680", "createdAt": "2020-11-17T18:25:17Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0Njc2NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQyMDQ4OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2/struts-2.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0MjozOVrOHzAfww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwOToxNDo0OVrOHzJqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NzU1NQ==", "bodyText": "is this the minimum version that this instrumentation works with? if so, then let's rename module to struts-2.3 instead of my suggestion below of struts-2.0", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523247555", "createdAt": "2020-11-13T21:42:39Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/struts-2.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.struts\"\n+    module = \"struts2-core\"\n+    versions = \"[2.3.20,)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM5Nzc5Mg==", "bodyText": "2.3.20 from year 2014 is the earliest version of Struts2, that is available for download on Struts official download page: https://archive.apache.org/dist/struts/ I wasn't adventurous enough to search for even earlier versions. :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523397792", "createdAt": "2020-11-14T09:14:49Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/struts-2.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.struts\"\n+    module = \"struts2-core\"\n+    versions = \"[2.3.20,)\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NzU1NQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQyNzY3OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0NToxN1rOHzAj9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMDowMDoxMlrOHzJ5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODYyOQ==", "bodyText": "based on recent discussion in #1579\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"struts-2\");\n          \n          \n            \n                super(\"struts\", \"struts-2.0\");", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523248629", "createdAt": "2020-11-13T21:45:17Z", "author": {"login": "trask"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static java.util.Collections.singletonList;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+\n+@AutoService(InstrumentationModule.class)\n+public class Struts2InstrumentationModule extends InstrumentationModule {\n+\n+  public Struts2InstrumentationModule() {\n+    super(\"struts-2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTU4Mg==", "bodyText": "Renamed struts-2 to struts-2.3 everywhere.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401582", "createdAt": "2020-11-14T10:00:12Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2InstrumentationModule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static java.util.Collections.singletonList;\n+\n+import com.google.auto.service.AutoService;\n+import io.opentelemetry.javaagent.tooling.InstrumentationModule;\n+import io.opentelemetry.javaagent.tooling.TypeInstrumentation;\n+import java.util.List;\n+\n+@AutoService(InstrumentationModule.class)\n+public class Struts2InstrumentationModule extends InstrumentationModule {\n+\n+  public Struts2InstrumentationModule() {\n+    super(\"struts-2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODYyOQ=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MTI5NjI5OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwNTo0Njo0MVrOHzIofg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxMDowMjowMVrOHzJ6Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDg2Mg==", "bodyText": "It looks like struts has the concept of interceptors\nhttps://struts.apache.org/core-developers/interceptors.html\nIs it possible to define an interceptor and register it, instead of instrumenting the action invocation directly? While it wouldn't need to be in this PR, it would make it much easier to separate out library, nonagent instrumentation.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523380862", "createdAt": "2020-11-14T05:46:41Z", "author": {"login": "anuraaga"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQwMTc1MQ==", "bodyText": "Yes, interceptors definitely can be used for a library. Moved current instrumentation to javaagent sub-project to accommodate for the library version. Which I will do as a separate PR.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r523401751", "createdAt": "2020-11-14T10:02:01Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4MDg2Mg=="}, "originalCommit": {"oid": "ef6377ab3566382358abd292b2df990be7ec1c95"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk3MDUwOnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMTozMlrOHzyrzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMTozMlrOHzyrzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2OTgzOQ==", "bodyText": "We have recently switched to using tracer()", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524069839", "createdAt": "2020-11-16T10:11:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/ActionInvocationAdvice.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import static io.opentelemetry.javaagent.instrumentation.struts2.Struts2Tracer.TRACER;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.javaagent.instrumentation.api.Java8BytecodeBridge;\n+import net.bytebuddy.asm.Advice;\n+\n+public class ActionInvocationAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void onEnter(\n+      @Advice.This ActionInvocation actionInvocation,\n+      @Advice.Local(\"otelSpan\") Span span,\n+      @Advice.Local(\"otelScope\") Scope scope) {\n+    span = TRACER.startSpan(actionInvocation);\n+    scope = TRACER.startScope(span);\n+\n+    TRACER.updateServerSpanName(Java8BytecodeBridge.currentContext(), actionInvocation.getProxy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk4MTc0OnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMzoxNVrOHzyzJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMzoxNVrOHzyzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MTcxNg==", "bodyText": "You already have this as serverSpan local variable.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524071716", "createdAt": "2020-11-16T10:13:15Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/main/java/io/opentelemetry/javaagent/instrumentation/struts2/Struts2Tracer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.javaagent.instrumentation.struts2;\n+\n+import com.opensymphony.xwork2.ActionInvocation;\n+import com.opensymphony.xwork2.ActionProxy;\n+import io.opentelemetry.api.trace.Span;\n+import io.opentelemetry.context.Context;\n+import io.opentelemetry.instrumentation.api.servlet.ServletContextPath;\n+import io.opentelemetry.instrumentation.api.tracer.BaseTracer;\n+\n+public class Struts2Tracer extends BaseTracer {\n+\n+  public static final Struts2Tracer TRACER = new Struts2Tracer();\n+\n+  public Span startSpan(ActionInvocation actionInvocation) {\n+    Object action = actionInvocation.getAction();\n+    Class<?> actionClass = action.getClass();\n+\n+    String method = actionInvocation.getProxy().getMethod();\n+    String spanName = spanNameForMethod(actionClass, method);\n+\n+    Span strutsSpan = tracer.spanBuilder(spanName).startSpan();\n+\n+    strutsSpan.setAttribute(\"code.namespace\", actionClass.getName());\n+    if (method != null) {\n+      strutsSpan.setAttribute(\"code.function\", method);\n+    }\n+\n+    return strutsSpan;\n+  }\n+\n+  // Handle cases where action parameters are encoded into URL path\n+  public void updateServerSpanName(Context context, ActionProxy actionProxy) {\n+    Span serverSpan = getCurrentServerSpan();\n+    if (serverSpan == null) {\n+      return;\n+    }\n+\n+    // We take name from the config, because it contains the path pattern from the\n+    // configuration.\n+    String result = actionProxy.getConfig().getName();\n+\n+    String actionNamespace = actionProxy.getNamespace();\n+    if (actionNamespace != null && !actionNamespace.isEmpty()) {\n+      if (actionNamespace.endsWith(\"/\") || result.startsWith(\"/\")) {\n+        result = actionNamespace + result;\n+      } else {\n+        result = actionNamespace + \"/\" + result;\n+      }\n+    }\n+\n+    if (!result.startsWith(\"/\")) {\n+      result = \"/\" + result;\n+    }\n+\n+    if (!result.contains(\"{\")) {\n+      // If there are no braces, then there are no path parameters encoded in\n+      // the action name, so let's not change existing server span name, because\n+      // path is good enough. Wildcards like * in action name may glue\n+      // several endpoints into one action name, which we do not want -- we want\n+      // normalize parameters, not actions.\n+      return;\n+    }\n+\n+    getCurrentServerSpan().updateName(ServletContextPath.prepend(context, result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk5MDQzOnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2.3/javaagent/src/test/groovy/Struts2ActionSpanTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNDozMlrOHzy49g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTowMzo0NVrOH0qz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MzIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    'code.function' { it == expectedMethodName(endpoint) }\n          \n          \n            \n                    'code.function' expectedMethodName(endpoint)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524073206", "createdAt": "2020-11-16T10:14:32Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/src/test/groovy/Struts2ActionSpanTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n+import io.opentelemetry.instrumentation.test.base.HttpServerTest\n+import io.opentelemetry.sdk.trace.data.SpanData\n+import javax.servlet.DispatcherType\n+import org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.DefaultServlet\n+import org.eclipse.jetty.servlet.ServletContextHandler\n+import org.eclipse.jetty.util.resource.FileResource\n+\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n+\n+class Struts2ActionSpanTest extends HttpServerTest<Server> {\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testExceptionBody() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testError() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testRedirect() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    return true\n+  }\n+\n+  String expectedServerSpanName(ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? getContextPath() + \"/path/{id}/param\" : endpoint.resolvePath(address).path\n+  }\n+\n+  String expectedHandlerName(ServerEndpoint serverEndpoint) {\n+    return \"GreetingAction.\" + expectedMethodName(serverEndpoint)\n+  }\n+\n+  String expectedMethodName(ServerEndpoint endpoint) {\n+    switch (endpoint) {\n+      case QUERY_PARAM: return \"query\"\n+      case EXCEPTION: return \"exception\"\n+      case PATH_PARAM: return \"pathParam\"\n+      default: return \"success\"\n+    }\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, int index, Object parent, String method, ServerEndpoint endpoint) {\n+    trace.span(index) {\n+      name expectedHandlerName(endpoint)\n+      kind Span.Kind.INTERNAL\n+      errored endpoint == EXCEPTION\n+      if (endpoint == EXCEPTION) {\n+        errorEvent(Exception, EXCEPTION.body)\n+      }\n+      attributes {\n+        'code.namespace' \"io.opentelemetry.struts.GreetingAction\"\n+        'code.function' { it == expectedMethodName(endpoint) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3ODkzNQ==", "bodyText": "Calling methods in assertions doesn't work with Groovy Magic in io.opentelemetry.instrumentation.test.asserts.AttributesAssert#attribute. I failed to get it to work over several attempts, as you can see from the commit history.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524978935", "createdAt": "2020-11-17T08:47:25Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2.3/javaagent/src/test/groovy/Struts2ActionSpanTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n+import io.opentelemetry.instrumentation.test.base.HttpServerTest\n+import io.opentelemetry.sdk.trace.data.SpanData\n+import javax.servlet.DispatcherType\n+import org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.DefaultServlet\n+import org.eclipse.jetty.servlet.ServletContextHandler\n+import org.eclipse.jetty.util.resource.FileResource\n+\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n+\n+class Struts2ActionSpanTest extends HttpServerTest<Server> {\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testExceptionBody() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testError() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testRedirect() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    return true\n+  }\n+\n+  String expectedServerSpanName(ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? getContextPath() + \"/path/{id}/param\" : endpoint.resolvePath(address).path\n+  }\n+\n+  String expectedHandlerName(ServerEndpoint serverEndpoint) {\n+    return \"GreetingAction.\" + expectedMethodName(serverEndpoint)\n+  }\n+\n+  String expectedMethodName(ServerEndpoint endpoint) {\n+    switch (endpoint) {\n+      case QUERY_PARAM: return \"query\"\n+      case EXCEPTION: return \"exception\"\n+      case PATH_PARAM: return \"pathParam\"\n+      default: return \"success\"\n+    }\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, int index, Object parent, String method, ServerEndpoint endpoint) {\n+    trace.span(index) {\n+      name expectedHandlerName(endpoint)\n+      kind Span.Kind.INTERNAL\n+      errored endpoint == EXCEPTION\n+      if (endpoint == EXCEPTION) {\n+        errorEvent(Exception, EXCEPTION.body)\n+      }\n+      attributes {\n+        'code.namespace' \"io.opentelemetry.struts.GreetingAction\"\n+        'code.function' { it == expectedMethodName(endpoint) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MzIwNg=="}, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk4OTQzMw==", "bodyText": "But I think I found a nicer way instead of this closure.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524989433", "createdAt": "2020-11-17T09:03:45Z", "author": {"login": "vovencij"}, "path": "instrumentation/struts-2.3/javaagent/src/test/groovy/Struts2ActionSpanTest.groovy", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+import io.opentelemetry.api.trace.Span\n+import io.opentelemetry.instrumentation.test.asserts.TraceAssert\n+import io.opentelemetry.instrumentation.test.base.HttpServerTest\n+import io.opentelemetry.sdk.trace.data.SpanData\n+import javax.servlet.DispatcherType\n+import org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter\n+import org.eclipse.jetty.server.Server\n+import org.eclipse.jetty.servlet.DefaultServlet\n+import org.eclipse.jetty.servlet.ServletContextHandler\n+import org.eclipse.jetty.util.resource.FileResource\n+\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.EXCEPTION\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.PATH_PARAM\n+import static io.opentelemetry.instrumentation.test.base.HttpServerTest.ServerEndpoint.QUERY_PARAM\n+\n+class Struts2ActionSpanTest extends HttpServerTest<Server> {\n+\n+  @Override\n+  boolean testNotFound() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testPathParam() {\n+    return true\n+  }\n+\n+  @Override\n+  boolean testExceptionBody() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testError() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean testRedirect() {\n+    return false\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    return true\n+  }\n+\n+  String expectedServerSpanName(ServerEndpoint endpoint) {\n+    return endpoint == PATH_PARAM ? getContextPath() + \"/path/{id}/param\" : endpoint.resolvePath(address).path\n+  }\n+\n+  String expectedHandlerName(ServerEndpoint serverEndpoint) {\n+    return \"GreetingAction.\" + expectedMethodName(serverEndpoint)\n+  }\n+\n+  String expectedMethodName(ServerEndpoint endpoint) {\n+    switch (endpoint) {\n+      case QUERY_PARAM: return \"query\"\n+      case EXCEPTION: return \"exception\"\n+      case PATH_PARAM: return \"pathParam\"\n+      default: return \"success\"\n+    }\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, int index, Object parent, String method, ServerEndpoint endpoint) {\n+    trace.span(index) {\n+      name expectedHandlerName(endpoint)\n+      kind Span.Kind.INTERNAL\n+      errored endpoint == EXCEPTION\n+      if (endpoint == EXCEPTION) {\n+        errorEvent(Exception, EXCEPTION.body)\n+      }\n+      attributes {\n+        'code.namespace' \"io.opentelemetry.struts.GreetingAction\"\n+        'code.function' { it == expectedMethodName(endpoint) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MzIwNg=="}, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAwNDMxOnYy", "diffSide": "RIGHT", "path": "instrumentation/struts-2.3/javaagent/struts-2.3-javaagent.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNjozNFrOHzzCLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNjozNFrOHzzCLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NTU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              compileOnly group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n          \n          \n            \n            \n          \n          \n            \n              testImplementation group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n          \n          \n            \n              library group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524075567", "createdAt": "2020-11-16T10:16:34Z", "author": {"login": "iNikem"}, "path": "instrumentation/struts-2.3/javaagent/struts-2.3-javaagent.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+apply from: \"$rootDir/gradle/instrumentation.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = \"org.apache.struts\"\n+    module = \"struts2-core\"\n+    versions = \"[2.3.20,)\"\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'\n+\n+  testImplementation group: 'org.apache.struts', name: 'struts2-core', version: '2.3.20'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAwODg1OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzoxOVrOHzzFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzoxOVrOHzzFUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            include ':instrumentation:twilio-6.6'\n          \n          \n            \n            include ':instrumentation:struts-2.3:javaagent'\n          \n          \n            \n            include ':instrumentation:struts-2.3:javaagent'\n          \n          \n            \n            include ':instrumentation:twilio-6.6'", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524076369", "createdAt": "2020-11-16T10:17:19Z", "author": {"login": "iNikem"}, "path": "settings.gradle", "diffHunk": "@@ -188,6 +188,7 @@ include ':instrumentation:spring:starters:otlp-exporter-starter'\n include ':instrumentation:spring:starters:zipkin-exporter-starter'\n include ':instrumentation:spymemcached-2.12'\n include ':instrumentation:twilio-6.6'\n+include ':instrumentation:struts-2.3:javaagent'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAxMDE3OnYy", "diffSide": "RIGHT", "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/asserts/AttributesAssert.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzozNVrOHzzGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwODo1NDoyMlrOH0qcsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjYwNg==", "bodyText": "Why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524076606", "createdAt": "2020-11-16T10:17:35Z", "author": {"login": "iNikem"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/asserts/AttributesAssert.groovy", "diffHunk": "@@ -41,7 +41,7 @@ class AttributesAssert {\n     } else if (value instanceof Closure) {\n       assert ((Closure) value).call(val)\n     } else {\n-      assert val == value\n+      assert value == val", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk4MzQ3Mg==", "bodyText": "No particular reason. I tried to get nice assertion messages out of here, which would indicate for which attribute the assertion failed, but I failed eventually as various places across the project were failing with all the solutions I tried. So eventually I returned it in the initial implementation, but sides got switched incidentally. Will put it back as it was.", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1628#discussion_r524983472", "createdAt": "2020-11-17T08:54:22Z", "author": {"login": "vovencij"}, "path": "testing-common/src/main/groovy/io/opentelemetry/instrumentation/test/asserts/AttributesAssert.groovy", "diffHunk": "@@ -41,7 +41,7 @@ class AttributesAssert {\n     } else if (value instanceof Closure) {\n       assert ((Closure) value).call(val)\n     } else {\n-      assert val == value\n+      assert value == val", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjYwNg=="}, "originalCommit": {"oid": "0e223627a549a794e6633525c1bff3ba705d0c69"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}