{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjI5OTkz", "number": 1762, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoyOTozNVrOE9GFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoyOTozNVrOE9GFzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDk4MzgzOnYy", "diffSide": "RIGHT", "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoyOTozNVrOH5mNfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTowNTozN1rOH5pagQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NjkyNA==", "bodyText": "Magic!", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1762#discussion_r530156924", "createdAt": "2020-11-25T07:29:35Z", "author": {"login": "anuraaga"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -91,6 +85,24 @@ public void collectReferencesFrom(String adviceClassName) {\n     }\n   }\n \n+  private static InputStream getClassFileStream(String className) throws IOException {\n+    URLConnection connection =\n+        checkNotNull(\n+                ReferenceCollector.class\n+                    .getClassLoader()\n+                    .getResource(Utils.getResourceName(className)),\n+                \"Couldn't find class file %s\",\n+                className)\n+            .openConnection();\n+\n+    // Since the JarFile cache is not per class loader, but global with path as key, using cache may\n+    // cause the same instance of JarFile being used for consecutive builds, even if the file has\n+    // been changed. There is still another cache in ZipFile.Source which checks last modified time\n+    // as well, so the zip index is not scanned again on every class.\n+    connection.setUseCaches(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b1f936cfba28874c09ccd92a13a1e84feba370"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwOTQwOQ==", "bodyText": "\ud83e\udd2f", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1762#discussion_r530209409", "createdAt": "2020-11-25T09:05:37Z", "author": {"login": "mateuszrzeszutek"}, "path": "javaagent-tooling/src/main/java/io/opentelemetry/javaagent/tooling/muzzle/collector/ReferenceCollector.java", "diffHunk": "@@ -91,6 +85,24 @@ public void collectReferencesFrom(String adviceClassName) {\n     }\n   }\n \n+  private static InputStream getClassFileStream(String className) throws IOException {\n+    URLConnection connection =\n+        checkNotNull(\n+                ReferenceCollector.class\n+                    .getClassLoader()\n+                    .getResource(Utils.getResourceName(className)),\n+                \"Couldn't find class file %s\",\n+                className)\n+            .openConnection();\n+\n+    // Since the JarFile cache is not per class loader, but global with path as key, using cache may\n+    // cause the same instance of JarFile being used for consecutive builds, even if the file has\n+    // been changed. There is still another cache in ZipFile.Source which checks last modified time\n+    // as well, so the zip index is not scanned again on every class.\n+    connection.setUseCaches(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1NjkyNA=="}, "originalCommit": {"oid": "08b1f936cfba28874c09ccd92a13a1e84feba370"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4448, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}