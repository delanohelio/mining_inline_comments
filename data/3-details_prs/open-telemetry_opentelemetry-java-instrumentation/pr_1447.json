{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODU2ODcy", "number": 1447, "title": "Replace `print` with log messages.", "bodyText": "Replace print with log messages.\n\nAdd slf4j compile time dependency to the javaagent-exporters.logging module\nReplace System.out.print with log.debug messages\n\nConcerns:\n\nI am not sure about log.debug. I can replace it if you think that it should be in other level.\nAttributeKey ls logged using toString() method from its implementation. The only implementation right now is AutoValue_AttributeKeyImpl which prints the key like \"AttributeKeyImpl{getType=\" + this.getType + \", key=\" + this.key + \"}\". I think it is not a good idea to use toString from objects for logging because anyone can change the method's implementation or provide implementation without toString (with default) and it will affect logging quality. I would change it not rely on toString output, but I don't know what would the appropriate format for this. If you have ideas please share.\n\nFixes: #1328", "createdAt": "2020-10-21T20:52:37Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447", "merged": true, "mergeCommit": {"oid": "3cf2a3504fa6e2d6136642dd191c1580b5cb0cdf"}, "closed": true, "closedAt": "2020-10-23T18:27:29Z", "author": {"login": "vadeg"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUz5e-AH2gAyNTA3ODU2ODcyOjA2OTM5N2U0ZWYzNTk0YmVhZjk1NWFhNzAyYmNlNWM3MTY3NGJmYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVJNzYAFqTUxNTE0NzMzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb", "author": {"user": {"login": "vadeg", "name": "Vadim Shaigorodskiy"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/069397e4ef3594beaf955aa702bce5c71674bfbb", "committedDate": "2020-10-21T21:03:40Z", "message": "Replace `print` with log messages.\n\n* Add `slf4j` compile time dependency to the `javaagent-exporters.logging` module\n* Replace `System.out.println` with log.debug messages\n\nFixes: #1328"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be44e527f5040ee5fe34e12c2fc434a40a9f7e53", "author": {"user": {"login": "vadeg", "name": "Vadim Shaigorodskiy"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/be44e527f5040ee5fe34e12c2fc434a40a9f7e53", "committedDate": "2020-10-21T20:47:04Z", "message": "Replace `print` with log messages.\n\n* Add `slf4j` compile time dependency to the `javaagent-exporters.logging` module\n* Replace `System.out.println` with log.debug messages\n\nFixes: #1260"}, "afterCommit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb", "author": {"user": {"login": "vadeg", "name": "Vadim Shaigorodskiy"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/069397e4ef3594beaf955aa702bce5c71674bfbb", "committedDate": "2020-10-21T21:03:40Z", "message": "Replace `print` with log messages.\n\n* Add `slf4j` compile time dependency to the `javaagent-exporters.logging` module\n* Replace `System.out.println` with log.debug messages\n\nFixes: #1328"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjUzNjQ3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#pullrequestreview-514253647", "createdAt": "2020-10-21T23:13:16Z", "commit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzoxNlrOHmK9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMzoxMzo0OFrOHmK-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4NzU2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              stringBuilder.append(key).append('=');\n          \n          \n            \n                              stringBuilder.append(key.getKey()).append('=');\n          \n      \n    \n    \n  \n\nThanks for bringing up the issue about toString, I think getKey should solve that", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#discussion_r509787566", "createdAt": "2020-10-21T23:13:16Z", "author": {"login": "anuraaga"}, "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "diffHunk": "@@ -21,28 +25,37 @@ public LoggingExporter(String prefix) {\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> list) {\n+    StringBuilder stringBuilder = new StringBuilder();\n     for (SpanData span : list) {\n-      System.out.print(\n-          prefix + \" \" + span.getName() + \" \" + span.getTraceId() + \" \" + span.getSpanId() + \" \");\n+\n+      stringBuilder\n+          .append(prefix)\n+          .append(\" \")\n+          .append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())\n+          .append(\" \")\n+          .append(span.getSpanId())\n+          .append(\" \");\n+\n       span.getAttributes()\n           .forEach(\n               new AttributeConsumer() {\n                 @Override\n                 public <T> void consume(AttributeKey<T> key, T value) {\n-                  System.out.print(key + \"=\");\n-                  switch (key.getType()) {\n-                    case STRING:\n-                      System.out.print('\"' + String.valueOf(value) + '\"');\n-                      break;\n-                    default:\n-                      System.out.print(value);\n-                      break;\n+\n+                  stringBuilder.append(key).append('=');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc4Nzc0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                log.debug(stringBuilder.toString());\n          \n          \n            \n                log.info(stringBuilder.toString());\n          \n      \n    \n    \n  \n\nThis exporter needs to be explicitly enabled so I think by default it should log something :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#discussion_r509787746", "createdAt": "2020-10-21T23:13:48Z", "author": {"login": "anuraaga"}, "path": "javaagent-exporters/logging/src/main/java/io/opentelemetry/javaagent/exporters/logging/LoggingExporter.java", "diffHunk": "@@ -21,28 +25,37 @@ public LoggingExporter(String prefix) {\n \n   @Override\n   public CompletableResultCode export(Collection<SpanData> list) {\n+    StringBuilder stringBuilder = new StringBuilder();\n     for (SpanData span : list) {\n-      System.out.print(\n-          prefix + \" \" + span.getName() + \" \" + span.getTraceId() + \" \" + span.getSpanId() + \" \");\n+\n+      stringBuilder\n+          .append(prefix)\n+          .append(\" \")\n+          .append(span.getName())\n+          .append(\" \")\n+          .append(span.getTraceId())\n+          .append(\" \")\n+          .append(span.getSpanId())\n+          .append(\" \");\n+\n       span.getAttributes()\n           .forEach(\n               new AttributeConsumer() {\n                 @Override\n                 public <T> void consume(AttributeKey<T> key, T value) {\n-                  System.out.print(key + \"=\");\n-                  switch (key.getType()) {\n-                    case STRING:\n-                      System.out.print('\"' + String.valueOf(value) + '\"');\n-                      break;\n-                    default:\n-                      System.out.print(value);\n-                      break;\n+\n+                  stringBuilder.append(key).append('=');\n+\n+                  if (key.getType() == AttributeType.STRING) {\n+                    stringBuilder.append('\"').append(value).append('\"');\n+                  } else {\n+                    stringBuilder.append(value);\n                   }\n-                  System.out.print(\" \");\n+                  stringBuilder.append(' ');\n                 }\n               });\n     }\n-    System.out.println();\n+    log.debug(stringBuilder.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTg0NzA3", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#pullrequestreview-514584707", "createdAt": "2020-10-22T10:32:42Z", "commit": {"oid": "069397e4ef3594beaf955aa702bce5c71674bfbb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "918fa4906f1ab97f9e7eafc599836e858c915e1d", "author": {"user": {"login": "vadeg", "name": "Vadim Shaigorodskiy"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/918fa4906f1ab97f9e7eafc599836e858c915e1d", "committedDate": "2020-10-22T20:26:07Z", "message": "Replace `debug` with `info`\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd878b1621523341729fa0865e2d421bc37a2d95", "author": {"user": {"login": "vadeg", "name": "Vadim Shaigorodskiy"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/dd878b1621523341729fa0865e2d421bc37a2d95", "committedDate": "2020-10-22T20:26:30Z", "message": "Use `getKey` to log key.\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTQ3MzM2", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1447#pullrequestreview-515147336", "createdAt": "2020-10-22T21:53:52Z", "commit": {"oid": "dd878b1621523341729fa0865e2d421bc37a2d95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2387, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}