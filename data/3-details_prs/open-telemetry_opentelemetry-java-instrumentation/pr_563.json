{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDkyMTYy", "number": 563, "title": "Working against otel-java 0.6.0-SNAPSHOT", "bodyText": "", "createdAt": "2020-06-23T10:58:33Z", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563", "merged": true, "mergeCommit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "closed": true, "closedAt": "2020-06-23T11:39:32Z", "author": {"login": "iNikem"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuDSIVgH2gAyNDM4NDkyMTYyOmQ3ZGQyNTljMTA3ODljNjE0N2JmNTIwODA2N2FiYzc3YTg1M2Y3Y2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuP53pgFqTQzNjI1ODU1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb", "author": {"user": {"login": "iNikem", "name": "Nikita Salnikov-Tarnovski"}}, "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/commit/d7dd259c10789c6147bf5208067abc77a853f7cb", "committedDate": "2020-06-23T10:56:07Z", "message": "Working against otel-java 0.6.0-SNAPSHOT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjU4NTUw", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563#pullrequestreview-436258550", "createdAt": "2020-06-24T01:10:00Z", "commit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMToxMDowMFrOGn_leA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMTozNDo0MVrOGn_9JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4OTQzMg==", "bodyText": "\ud83d\ude04", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563#discussion_r444589432", "createdAt": "2020-06-24T01:10:00Z", "author": {"login": "trask"}, "path": "instrumentation/opentelemetry-api-beta/opentelemetry-api-beta.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n apply from: \"$rootDir/gradle/instrumentation.gradle\"\n \n dependencies {\n-  // this instrumentation needs to be able to be able to reference both the OpenTelemetry API\n+  // this instrumentation needs to be able to reference both the OpenTelemetry API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5MDA5Nw==", "bodyText": "(in the future) this probably is better in common package, like you did for LabelsShader", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563#discussion_r444590097", "createdAt": "2020-06-24T01:12:40Z", "author": {"login": "trask"}, "path": "instrumentation/opentelemetry-api-beta/src/main/java/io/opentelemetry/auto/instrumentation/opentelemetryapi/trace/Bridging.java", "diffHunk": "@@ -100,17 +101,20 @@ public static SpanContext toUnshaded(final io.opentelemetry.trace.SpanContext sh\n     }\n   }\n \n-  public static Map<String, io.opentelemetry.common.AttributeValue> toShaded(\n-      final Map<String, AttributeValue> unshadedAttributes) {\n-    final Map<String, io.opentelemetry.common.AttributeValue> shadedAttributes = new HashMap<>();\n-    for (final Map.Entry<String, AttributeValue> entry : unshadedAttributes.entrySet()) {\n-      final AttributeValue value = entry.getValue();\n-      final io.opentelemetry.common.AttributeValue shadedValue = toShadedOrNull(value);\n-      if (shadedValue != null) {\n-        shadedAttributes.put(entry.getKey(), shadedValue);\n-      }\n-    }\n-    return shadedAttributes;\n+  public static io.opentelemetry.common.Attributes toShaded(final Attributes unshadedAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5MDY1Nw==", "bodyText": "oh ya i never got around to renaming tags to attributes in tests", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563#discussion_r444590657", "createdAt": "2020-06-24T01:15:06Z", "author": {"login": "trask"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/asserts/TagsAssert.groovy", "diffHunk": "@@ -18,18 +18,19 @@ package io.opentelemetry.auto.test.asserts\n import groovy.transform.stc.ClosureParams\n import groovy.transform.stc.SimpleType\n import io.opentelemetry.common.AttributeValue\n-\n+import io.opentelemetry.common.ReadableAttributes\n+import io.opentelemetry.common.ReadableKeyValuePairs\n import java.util.regex.Pattern\n \n class TagsAssert {\n-  private final Map<String, AttributeValue> tags\n+  private final ReadableAttributes tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NTQ5Mg==", "bodyText": "staring at this way too long... \ud83d\ude02\nhow about this comment instead:\n// the first and second condition in the assert are exactly the same\n// but both are included in order to provide better context in the error message", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/563#discussion_r444595492", "createdAt": "2020-06-24T01:34:41Z", "author": {"login": "trask"}, "path": "testing/src/main/groovy/io/opentelemetry/auto/test/asserts/TagsAssert.groovy", "diffHunk": "@@ -82,12 +83,18 @@ class TagsAssert {\n   }\n \n   void assertTagsAllVerified() {\n-    def set = new TreeMap<>(tags).keySet()\n-    set.removeAll(assertedTags)\n-    // The primary goal is to ensure the set is empty.\n-    // tags and assertedTags are included via an \"always true\" comparison\n-    // so they provide better context in the error message.\n-    assert (tags.entrySet() != assertedTags || assertedTags.isEmpty()) && set.isEmpty()\n+    Set<String> allTags = new TreeSet<>()\n+    tags.forEach(new ReadableKeyValuePairs.KeyValueConsumer<AttributeValue>() {\n+      @Override\n+      void consume(String key, AttributeValue value) {\n+        allTags.add(key)\n+      }\n+    })\n+    Set<String> unverifiedTags = new TreeSet(allTags)\n+    unverifiedTags.removeAll(assertedTags)\n+    // tags and assertedTags are included to provide better context in the error message.\n+    //containsAll because we may assert more than span actually has\n+    assert unverifiedTags.isEmpty() && assertedTags.containsAll(allTags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7dd259c10789c6147bf5208067abc77a853f7cb"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2984, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}