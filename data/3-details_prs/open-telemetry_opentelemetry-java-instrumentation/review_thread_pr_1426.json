{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NTU1MzQ2", "number": 1426, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoxNzozNFrOEvvxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo0ODo0M1rOEvyZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAxMTc4OnYy", "diffSide": "RIGHT", "path": ".github/workflows/build-grpc-smoke-dist.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoxNzozNFrOHk5ZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoxNzozNFrOHk5ZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MTExNg==", "bodyText": "That's not Spring Boot, right?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508451116", "createdAt": "2020-10-20T12:17:34Z", "author": {"login": "iNikem"}, "path": ".github/workflows/build-grpc-smoke-dist.yaml", "diffHunk": "@@ -0,0 +1,33 @@\n+name: Build Spring Boot smoke test distribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAxMzA3OnYy", "diffSide": "LEFT", "path": ".gitignore", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoxNzo1NVrOHk5Z6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowOTowNFrOHlF6nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MTMwNw==", "bodyText": "Why?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508451307", "createdAt": "2020-10-20T12:17:55Z", "author": {"login": "iNikem"}, "path": ".gitignore", "diffHunk": "@@ -58,7 +57,4 @@ hs_err_pid*\n replay_pid*\n \n !java-agent/benchmark/releases/*.jar\n-/smoke-tests/play/.gradle/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NjI4Nw==", "bodyText": "I made .gradle a non-absolute path above which seems like low chance of collision :)", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508656287", "createdAt": "2020-10-20T16:09:04Z", "author": {"login": "anuraaga"}, "path": ".gitignore", "diffHunk": "@@ -58,7 +57,4 @@ hs_err_pid*\n replay_pid*\n \n !java-agent/benchmark/releases/*.jar\n-/smoke-tests/play/.gradle/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MTMwNw=="}, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTAyMzQ4OnYy", "diffSide": "RIGHT", "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/GrpcSmokeTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyMDoyN1rOHk5gLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjowOToxNFrOHlF7Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MjkwOA==", "bodyText": "Wanna change back?", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508452908", "createdAt": "2020-10-20T12:20:27Z", "author": {"login": "iNikem"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/GrpcSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import static java.util.stream.Collectors.toSet\n+\n+import io.grpc.ManagedChannelBuilder\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n+import io.opentelemetry.proto.collector.trace.v1.TraceServiceGrpc\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+import spock.lang.Unroll\n+\n+class GrpcSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    \"open-telemetry-docker-dev.bintray.io/java/smoke-grpc-jdk$jdk:latest\"\n+  }\n+\n+  @Unroll\n+  def \"grpc smoke test on JDK #jdk\"(int jdk) {\n+    setup:\n+    startTarget(jdk)\n+\n+    def channel = ManagedChannelBuilder.forAddress(\"localhost\", target.getMappedPort(8080))\n+      .usePlaintext()\n+      .build()\n+    def stub = TraceServiceGrpc.newBlockingStub(channel)\n+\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    stub.export(ExportTraceServiceRequest.getDefaultInstance())\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces()\n+\n+    then:\n+    countSpansByName(traces, 'opentelemetry.proto.collector.trace.v1.TraceService/Export') == 1\n+    countSpansByName(traces, 'TestService.withSpan') == 1\n+\n+    [currentAgentVersion] as Set == findResourceAttribute(traces, \"telemetry.auto.version\")\n+      .map { it.stringValue }\n+      .collect(toSet())\n+\n+    cleanup:\n+    stopTarget()\n+\n+    where:\n+    jdk << [11]\n+    // jdk << [8, 11, 15]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NjQ1OA==", "bodyText": "Doh yeah", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508656458", "createdAt": "2020-10-20T16:09:14Z", "author": {"login": "anuraaga"}, "path": "smoke-tests/src/test/groovy/io/opentelemetry/smoketest/GrpcSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.smoketest\n+\n+import static java.util.stream.Collectors.toSet\n+\n+import io.grpc.ManagedChannelBuilder\n+import io.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n+import io.opentelemetry.proto.collector.trace.v1.TraceServiceGrpc\n+import java.util.jar.Attributes\n+import java.util.jar.JarFile\n+import spock.lang.Unroll\n+\n+class GrpcSmokeTest extends SmokeTest {\n+\n+  protected String getTargetImage(int jdk) {\n+    \"open-telemetry-docker-dev.bintray.io/java/smoke-grpc-jdk$jdk:latest\"\n+  }\n+\n+  @Unroll\n+  def \"grpc smoke test on JDK #jdk\"(int jdk) {\n+    setup:\n+    startTarget(jdk)\n+\n+    def channel = ManagedChannelBuilder.forAddress(\"localhost\", target.getMappedPort(8080))\n+      .usePlaintext()\n+      .build()\n+    def stub = TraceServiceGrpc.newBlockingStub(channel)\n+\n+    def currentAgentVersion = new JarFile(agentPath).getManifest().getMainAttributes().get(Attributes.Name.IMPLEMENTATION_VERSION)\n+\n+    when:\n+    stub.export(ExportTraceServiceRequest.getDefaultInstance())\n+    Collection<ExportTraceServiceRequest> traces = waitForTraces()\n+\n+    then:\n+    countSpansByName(traces, 'opentelemetry.proto.collector.trace.v1.TraceService/Export') == 1\n+    countSpansByName(traces, 'TestService.withSpan') == 1\n+\n+    [currentAgentVersion] as Set == findResourceAttribute(traces, \"telemetry.auto.version\")\n+      .map { it.stringValue }\n+      .collect(toSet())\n+\n+    cleanup:\n+    stopTarget()\n+\n+    where:\n+    jdk << [11]\n+    // jdk << [8, 11, 15]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MjkwOA=="}, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQ0Mjc0OnYy", "diffSide": "RIGHT", "path": "smoke-tests/grpc/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo0ODo0M1rOHk9lEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo0ODo0M1rOHk9lEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUxOTY5OQ==", "bodyText": "Shouldn't it be 8 here? If you want it to run on Java 8", "url": "https://github.com/open-telemetry/opentelemetry-java-instrumentation/pull/1426#discussion_r508519699", "createdAt": "2020-10-20T13:48:43Z", "author": {"login": "mateuszrzeszutek"}, "path": "smoke-tests/grpc/build.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+plugins {\n+  id \"java\"\n+  id \"com.google.cloud.tools.jib\" version \"2.6.0\"\n+}\n+\n+group = \"io.opentelemetry\"\n+version = \"0.0.1-SNAPSHOT\"\n+\n+repositories {\n+  jcenter()\n+}\n+\n+dependencies {\n+  implementation platform(\"org.apache.logging.log4j:log4j-bom:2.13.3\")\n+\n+  implementation \"io.grpc:grpc-netty-shaded:1.32.1\"\n+  implementation \"io.grpc:grpc-protobuf:1.32.1\"\n+  implementation \"io.grpc:grpc-stub:1.32.1\"\n+  implementation \"io.opentelemetry:opentelemetry-proto:0.9.1\"\n+  implementation \"io.opentelemetry:opentelemetry-extension-auto-annotations:0.9.1\"\n+  implementation \"org.apache.logging.log4j:log4j-core\"\n+\n+  runtimeOnly(\"org.apache.logging.log4j:log4j-slf4j-impl\")\n+}\n+\n+compileJava {\n+  options.release = 11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3343ad38ab088b52b05a1a52a2df54487c8dbd2b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4710, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}