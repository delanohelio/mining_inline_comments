{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDUxNDE1", "number": 1421, "title": "[eclipse/xtext#1679]ported more code to java", "bodyText": "[eclipse/xtext#1679]ported more code to java\nSigned-off-by: Christian Dietrich christian.dietrich@itemis.de", "createdAt": "2020-04-30T12:50:42Z", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421", "merged": true, "mergeCommit": {"oid": "3024751046a7924c53d7019b70dfa62aa28ce270"}, "closed": true, "closedAt": "2020-05-04T17:55:38Z", "author": {"login": "cdietrich"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccupdogBqjMyODk5ODAwNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceB3Z_AFqTQwNTEzNzcwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61a86df8228a2e037ca2a18f1eb7a75425b3dce4", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/61a86df8228a2e037ca2a18f1eb7a75425b3dce4", "committedDate": "2020-04-30T12:50:10Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "6c89ed13cc6473d85b9b58d26da920ee8fb69c0b", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/6c89ed13cc6473d85b9b58d26da920ee8fb69c0b", "committedDate": "2020-04-30T15:16:32Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c89ed13cc6473d85b9b58d26da920ee8fb69c0b", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/6c89ed13cc6473d85b9b58d26da920ee8fb69c0b", "committedDate": "2020-04-30T15:16:32Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/e2ce793e07b472e1fd34c728ed975d3ff28e3f5f", "committedDate": "2020-04-30T16:29:15Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTI2ODMy", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#pullrequestreview-404126832", "createdAt": "2020-05-01T11:54:24Z", "commit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "state": "DISMISSED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTo1NDoyNVrOGPIAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoxMDo1N1rOGPIPZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjkxOQ==", "bodyText": "Underscores in var names?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418512919", "createdAt": "2020-05-01T11:54:25Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/model/DocumentLockerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.text.edits.TextEdit;\n+import org.eclipse.xtext.parser.antlr.Lexer;\n+import org.eclipse.xtext.parser.antlr.internal.InternalXtextLexer;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.model.DocumentTokenSource;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.editor.model.XtextDocument;\n+import org.eclipse.xtext.ui.editor.model.edit.ITextEditComposer;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.concurrent.CancelableUnitOfWork;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @author Jan Koehnlein\n+ */\n+public class DocumentLockerTest extends AbstractXtextDocumentTest {\n+\t@Test\n+\tpublic void testNoUpdateContentProcessOnReentrant() {\n+\t\tList<String> s = new ArrayList<>();\n+\t\tXtextDocument document = new XtextDocument(createTokenSource(), createTextEditComposer(), outdatedStateManager,\n+\t\t\t\toperationCanceledManager) {\n+\t\t\t@Override\n+\t\t\tprotected boolean updateContentBeforeRead() {\n+\t\t\t\treturn s.add(\"x\");\n+\t\t\t}\n+\t\t};\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tAssert.assertEquals(0, s.size());\n+\t\tdocument.readOnly(r1 -> {\n+\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\tdocument.readOnly(r2 -> {\n+\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\tdocument.readOnly(r3 -> {\n+\t\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t\t\t\treturn null;\n+\t\t\t});\n+\t\t\treturn null;\n+\t\t});\n+\t\tAssert.assertEquals(1, s.size());\n+\t}\n+\n+\t@Test\n+\tpublic void testModifySetsOutdatedFalse() {\n+\t\tDocumentTokenSource _createTokenSource = createTokenSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzAyNg==", "bodyText": "Seems useless", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418513026", "createdAt": "2020-05-01T11:54:47Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/model/DocumentLockerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.text.edits.TextEdit;\n+import org.eclipse.xtext.parser.antlr.Lexer;\n+import org.eclipse.xtext.parser.antlr.internal.InternalXtextLexer;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.model.DocumentTokenSource;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.editor.model.XtextDocument;\n+import org.eclipse.xtext.ui.editor.model.edit.ITextEditComposer;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.concurrent.CancelableUnitOfWork;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @author Jan Koehnlein\n+ */\n+public class DocumentLockerTest extends AbstractXtextDocumentTest {\n+\t@Test\n+\tpublic void testNoUpdateContentProcessOnReentrant() {\n+\t\tList<String> s = new ArrayList<>();\n+\t\tXtextDocument document = new XtextDocument(createTokenSource(), createTextEditComposer(), outdatedStateManager,\n+\t\t\t\toperationCanceledManager) {\n+\t\t\t@Override\n+\t\t\tprotected boolean updateContentBeforeRead() {\n+\t\t\t\treturn s.add(\"x\");\n+\t\t\t}\n+\t\t};\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tAssert.assertEquals(0, s.size());\n+\t\tdocument.readOnly(r1 -> {\n+\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\tdocument.readOnly(r2 -> {\n+\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\tdocument.readOnly(r3 -> {\n+\t\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t\t\t\treturn null;\n+\t\t\t});\n+\t\t\treturn null;\n+\t\t});\n+\t\tAssert.assertEquals(1, s.size());\n+\t}\n+\n+\t@Test\n+\tpublic void testModifySetsOutdatedFalse() {\n+\t\tDocumentTokenSource _createTokenSource = createTokenSource();\n+\t\tITextEditComposer _createTextEditComposer = createTextEditComposer();\n+\t\tXtextDocument document = new XtextDocument(_createTokenSource, _createTextEditComposer, outdatedStateManager,\n+\t\t\t\toperationCanceledManager);\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tdocument.internalModify((XtextResource it) -> {\n+\t\t\tAssert.assertFalse(document.getCancelIndicator().isCanceled());\n+\t\t\treturn null;\n+\t\t});\n+\t\tCancelIndicator indicator = document.getCancelIndicator();\n+\t\tAssert.assertFalse(indicator.isCanceled());\n+\t\tdocument.set(\"fupp\");\n+\t\tAssert.assertTrue(indicator.isCanceled());\n+\t\tdocument.internalModify((XtextResource it) -> {\n+\t\t\tAssert.assertFalse(document.getCancelIndicator().isCanceled());\n+\t\t\treturn null;\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testPriorityReadOnlyCancelsReaders() throws Exception {\n+\t\tThread.interrupted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzIzMw==", "bodyText": "Can't this just be a tiny lambda?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418513233", "createdAt": "2020-05-01T11:55:36Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/model/DocumentLockerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.text.edits.TextEdit;\n+import org.eclipse.xtext.parser.antlr.Lexer;\n+import org.eclipse.xtext.parser.antlr.internal.InternalXtextLexer;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.editor.model.DocumentTokenSource;\n+import org.eclipse.xtext.ui.editor.model.IXtextDocument;\n+import org.eclipse.xtext.ui.editor.model.XtextDocument;\n+import org.eclipse.xtext.ui.editor.model.edit.ITextEditComposer;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.concurrent.CancelableUnitOfWork;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * @author Jan Koehnlein\n+ */\n+public class DocumentLockerTest extends AbstractXtextDocumentTest {\n+\t@Test\n+\tpublic void testNoUpdateContentProcessOnReentrant() {\n+\t\tList<String> s = new ArrayList<>();\n+\t\tXtextDocument document = new XtextDocument(createTokenSource(), createTextEditComposer(), outdatedStateManager,\n+\t\t\t\toperationCanceledManager) {\n+\t\t\t@Override\n+\t\t\tprotected boolean updateContentBeforeRead() {\n+\t\t\t\treturn s.add(\"x\");\n+\t\t\t}\n+\t\t};\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tAssert.assertEquals(0, s.size());\n+\t\tdocument.readOnly(r1 -> {\n+\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\tdocument.readOnly(r2 -> {\n+\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\tdocument.readOnly(r3 -> {\n+\t\t\t\t\tAssert.assertEquals(1, s.size());\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t\t\t\treturn null;\n+\t\t\t});\n+\t\t\treturn null;\n+\t\t});\n+\t\tAssert.assertEquals(1, s.size());\n+\t}\n+\n+\t@Test\n+\tpublic void testModifySetsOutdatedFalse() {\n+\t\tDocumentTokenSource _createTokenSource = createTokenSource();\n+\t\tITextEditComposer _createTextEditComposer = createTextEditComposer();\n+\t\tXtextDocument document = new XtextDocument(_createTokenSource, _createTextEditComposer, outdatedStateManager,\n+\t\t\t\toperationCanceledManager);\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tdocument.internalModify((XtextResource it) -> {\n+\t\t\tAssert.assertFalse(document.getCancelIndicator().isCanceled());\n+\t\t\treturn null;\n+\t\t});\n+\t\tCancelIndicator indicator = document.getCancelIndicator();\n+\t\tAssert.assertFalse(indicator.isCanceled());\n+\t\tdocument.set(\"fupp\");\n+\t\tAssert.assertTrue(indicator.isCanceled());\n+\t\tdocument.internalModify((XtextResource it) -> {\n+\t\t\tAssert.assertFalse(document.getCancelIndicator().isCanceled());\n+\t\t\treturn null;\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testPriorityReadOnlyCancelsReaders() throws Exception {\n+\t\tThread.interrupted();\n+\t\tXtextDocument document = new XtextDocument(createTokenSource(), null, outdatedStateManager, operationCanceledManager);\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tCountDownLatch check = new CountDownLatch(1);\n+\t\tRunnable runnable = new Runnable() {\n+\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tdocument.readOnly(new CancelableUnitOfWork<Object, XtextResource>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Object exec(XtextResource state, CancelIndicator cancelIndicator) throws Exception {\n+\t\t\t\t\t\tcheck.countDown();\n+\t\t\t\t\t\tint wait = 4000;\n+\t\t\t\t\t\tint i = 0;\n+\t\t\t\t\t\twhile (!cancelIndicator.isCanceled()) {\n+\t\t\t\t\t\t\tThread.sleep(10L);\n+\t\t\t\t\t\t\tif (i > wait) {\n+\t\t\t\t\t\t\t\tthrow new InterruptedException();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\ti = i + 1;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t};\n+\t\tThread thread = new Thread(runnable);\n+\t\tthread.start();\n+\t\tcheck.await();\n+\t\tdocument.priorityReadOnly(r -> null);\n+\t\tAssert.assertFalse(thread.isInterrupted());\n+\t}\n+\n+\t@Test\n+\tpublic void testReadOnlyDoesntCancelReaders() {\n+\t\tXtextDocument document = new XtextDocument(createTokenSource(), null, outdatedStateManager, operationCanceledManager);\n+\t\tXtextResource resource = new XtextResource();\n+\t\tnew XtextResourceSet().getResources().add(resource);\n+\t\tdocument.setInput(resource);\n+\t\tList<CancelIndicator> cancelIndicators = new ArrayList<>();\n+\t\taddReaderCancelationListener(document, cancelIndicators);\n+\t\tAssert.assertTrue(cancelIndicators.isEmpty());\n+\t\tdocument.readOnly(r -> null);\n+\t\tAssert.assertTrue(cancelIndicators.isEmpty());\n+\t\tdocument.readOnly(r -> null);\n+\t\tAssert.assertTrue(cancelIndicators.isEmpty());\n+\t}\n+\n+\tprivate DocumentTokenSource createTokenSource() {\n+\t\tDocumentTokenSource tokenSource = new DocumentTokenSource();\n+\t\ttokenSource.setLexer(new Provider<Lexer>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzY0MA==", "bodyText": "Can just reverse the logic and use \"...\".equals()", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418513640", "createdAt": "2020-05-01T11:56:57Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/quickfix/DeclarativeQuickfixProviderTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.quickfix;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.ui.editor.model.edit.IModification;\n+import org.eclipse.xtext.ui.editor.quickfix.AbstractDeclarativeQuickfixProvider;\n+import org.eclipse.xtext.ui.editor.quickfix.Fix;\n+import org.eclipse.xtext.ui.editor.quickfix.Fixes;\n+import org.eclipse.xtext.ui.editor.quickfix.IssueResolution;\n+import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;\n+import org.eclipse.xtext.validation.Issue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Knut Wannheden - Initial contribution and API\n+ */\n+public class DeclarativeQuickfixProviderTest extends Assert {\n+\tprivate static final String DUMMY_CODE = \"DeclarativeQuickfixProviderTest.DummyCode\";\n+\n+\tprivate static final String DUMMY_CODE2 = \"DeclarativeQuickfixProviderTest.DummyCode2\";\n+\n+\t@Test\n+\tpublic void testHasResolutions() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t}\n+\n+\t@Test\n+\tpublic void testHasResolutions2() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE2)\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE2));\n+\t}\n+\n+\t@Test\n+\tpublic void testHasResolutions3() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fixes({ @Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE), @Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE2) })\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE2));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetResolutions() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void fixError1(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t\tacceptor.accept(i, \"fixError1\", \"\", \"\", IModification.NULL);\n+\t\t\t}\n+\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void fixError2(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t\tacceptor.accept(i, \"fixError2\", \"\", \"\", IModification.NULL);\n+\t\t\t}\n+\t\t};\n+\t\tprovider.setIssueResolutionAcceptorProvider(() -> new IssueResolutionAcceptor(it -> null));\n+\t\tList<IssueResolution> resolutionsIterable = provider.getResolutions(createIssue(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertNull(Iterables.getFirst(resolutionsIterable, null));\n+\t\tList<IssueResolution> resolutions = provider.getResolutions(createIssue(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertEquals(2, resolutions.size());\n+\t\tassertTrue(resolutions.stream().anyMatch(it -> Objects.equal(it.getLabel(), \"fixError1\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzY1OA==", "bodyText": "Same", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418513658", "createdAt": "2020-05-01T11:57:03Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/editor/quickfix/DeclarativeQuickfixProviderTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.editor.quickfix;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.ui.editor.model.edit.IModification;\n+import org.eclipse.xtext.ui.editor.quickfix.AbstractDeclarativeQuickfixProvider;\n+import org.eclipse.xtext.ui.editor.quickfix.Fix;\n+import org.eclipse.xtext.ui.editor.quickfix.Fixes;\n+import org.eclipse.xtext.ui.editor.quickfix.IssueResolution;\n+import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;\n+import org.eclipse.xtext.validation.Issue;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Knut Wannheden - Initial contribution and API\n+ */\n+public class DeclarativeQuickfixProviderTest extends Assert {\n+\tprivate static final String DUMMY_CODE = \"DeclarativeQuickfixProviderTest.DummyCode\";\n+\n+\tprivate static final String DUMMY_CODE2 = \"DeclarativeQuickfixProviderTest.DummyCode2\";\n+\n+\t@Test\n+\tpublic void testHasResolutions() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t}\n+\n+\t@Test\n+\tpublic void testHasResolutions2() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE2)\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE2));\n+\t}\n+\n+\t@Test\n+\tpublic void testHasResolutions3() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fixes({ @Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE), @Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE2) })\n+\t\t\tpublic void signature(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t}\n+\t\t};\n+\t\tassertFalse(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertTrue(provider.hasResolutionFor(DeclarativeQuickfixProviderTest.DUMMY_CODE2));\n+\t}\n+\n+\t@Test\n+\tpublic void testGetResolutions() throws Exception {\n+\t\tAbstractDeclarativeQuickfixProvider provider = new AbstractDeclarativeQuickfixProvider() {\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void fixError1(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t\tacceptor.accept(i, \"fixError1\", \"\", \"\", IModification.NULL);\n+\t\t\t}\n+\n+\t\t\t@Fix(DeclarativeQuickfixProviderTest.DUMMY_CODE)\n+\t\t\tpublic void fixError2(Issue i, IssueResolutionAcceptor acceptor) {\n+\t\t\t\tacceptor.accept(i, \"fixError2\", \"\", \"\", IModification.NULL);\n+\t\t\t}\n+\t\t};\n+\t\tprovider.setIssueResolutionAcceptorProvider(() -> new IssueResolutionAcceptor(it -> null));\n+\t\tList<IssueResolution> resolutionsIterable = provider.getResolutions(createIssue(DeclarativeQuickfixProviderTest.DUMMY_CODE + 1));\n+\t\tassertNull(Iterables.getFirst(resolutionsIterable, null));\n+\t\tList<IssueResolution> resolutions = provider.getResolutions(createIssue(DeclarativeQuickfixProviderTest.DUMMY_CODE));\n+\t\tassertEquals(2, resolutions.size());\n+\t\tassertTrue(resolutions.stream().anyMatch(it -> Objects.equal(it.getLabel(), \"fixError1\")));\n+\t\tassertTrue(resolutions.stream().anyMatch(it -> Objects.equal(it.getLabel(), \"fixError2\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNDA0Nw==", "bodyText": "Just inline this", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418514047", "createdAt": "2020-05-01T11:58:43Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/tasks/TaskMarkerContributorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.tasks;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.function.Function;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.junit4.AbstractXtextTests;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.ui.tasks.TaskMarkerContributor;\n+import org.eclipse.xtext.ui.tasks.TaskMarkerTypeProvider;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.eclipse.xtext.ui.tests.internal.TestsActivator;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Stefan Oehme - Initial contribution and API\n+ */\n+public class TaskMarkerContributorTest extends AbstractXtextTests {\n+\t@Inject\n+\tprivate TaskMarkerContributor markerContributor;\n+\n+\t@Before\n+\tpublic void setup() {\n+\t\tsetInjector(TestsActivator.getInstance()\n+\t\t\t\t.getInjector(TestsActivator.ORG_ECLIPSE_XTEXT_UI_TESTS_EDITOR_CONTENTASSIST_DOMAINMODELTESTLANGUAGE));\n+\t\tinjectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testMarkerCreation() throws Exception {\n+\t\t// @formatter:off\n+\t\tString model =\n+\t\t\t\t\"/*\\n\" +\n+\t\t\t\t\" * TODO foo\\n\" +\n+\t\t\t\t\" * FIXME bar\\n\" +\n+\t\t\t\t\"*/\\n\";\n+\t\t// @formatter:on\n+\t\tIFile file = IResourcesSetupUtil.createFile(\"foo/foo.domainModelTest\", model);\n+\t\tXtextResource resource = getResource(file);\n+\t\tNullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNDExNw==", "bodyText": "Unneeded cast?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418514117", "createdAt": "2020-05-01T11:59:01Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/tasks/TaskMarkerContributorTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.tasks;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.function.Function;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.junit4.AbstractXtextTests;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.ui.tasks.TaskMarkerContributor;\n+import org.eclipse.xtext.ui.tasks.TaskMarkerTypeProvider;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.eclipse.xtext.ui.tests.internal.TestsActivator;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Stefan Oehme - Initial contribution and API\n+ */\n+public class TaskMarkerContributorTest extends AbstractXtextTests {\n+\t@Inject\n+\tprivate TaskMarkerContributor markerContributor;\n+\n+\t@Before\n+\tpublic void setup() {\n+\t\tsetInjector(TestsActivator.getInstance()\n+\t\t\t\t.getInjector(TestsActivator.ORG_ECLIPSE_XTEXT_UI_TESTS_EDITOR_CONTENTASSIST_DOMAINMODELTESTLANGUAGE));\n+\t\tinjectMembers(this);\n+\t}\n+\n+\t@Test\n+\tpublic void testMarkerCreation() throws Exception {\n+\t\t// @formatter:off\n+\t\tString model =\n+\t\t\t\t\"/*\\n\" +\n+\t\t\t\t\" * TODO foo\\n\" +\n+\t\t\t\t\" * FIXME bar\\n\" +\n+\t\t\t\t\"*/\\n\";\n+\t\t// @formatter:on\n+\t\tIFile file = IResourcesSetupUtil.createFile(\"foo/foo.domainModelTest\", model);\n+\t\tXtextResource resource = getResource(file);\n+\t\tNullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();\n+\t\tmarkerContributor.updateMarkers(file, resource, _nullProgressMonitor);\n+\t\tIMarker[] markers = file.findMarkers(TaskMarkerTypeProvider.XTEXT_TASK_TYPE, true, IResource.DEPTH_ZERO);\n+\t\tArrays.sort(markers, Comparator.comparing((Function<IMarker, String>) (IMarker it) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTA2MQ==", "bodyText": "Reverse logic and early return?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515061", "createdAt": "2020-05-01T12:03:08Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/typesystem/Oven.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.junit.typesystem;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.junit4.util.ParseHelper;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XClosure;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.CompoundReentrantTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.internal.RootResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.TypeData;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Utility to check a given expression for exceptions and integrity after it was processed by the {@link IBatchTypeResolver}\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.typesystem.Oven instead\n+ */\n+@Deprecated\n+@Beta\n+@Singleton\n+public class Oven extends Assert {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate ParseHelper<EObject> parseHelper;\n+\n+\tpublic void fireproof(CharSequence input) throws Exception {\n+\t\tfireproof(input.toString());\n+\t}\n+\n+\tpublic void fireproof(String input) throws Exception {\n+\t\ttry {\n+\t\t\tEObject file = parseHelper.parse(input);\n+\t\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(file);\n+\t\t\tAssert.assertNotNull(resolvedTypes);\n+\t\t\tif (file != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTE0NQ==", "bodyText": "Ideally we use something other than IteratorExtensions", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515145", "createdAt": "2020-05-01T12:03:26Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/typesystem/Oven.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.junit.typesystem;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.junit4.util.ParseHelper;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XClosure;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.CompoundReentrantTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.internal.RootResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.TypeData;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Utility to check a given expression for exceptions and integrity after it was processed by the {@link IBatchTypeResolver}\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.typesystem.Oven instead\n+ */\n+@Deprecated\n+@Beta\n+@Singleton\n+public class Oven extends Assert {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate ParseHelper<EObject> parseHelper;\n+\n+\tpublic void fireproof(CharSequence input) throws Exception {\n+\t\tfireproof(input.toString());\n+\t}\n+\n+\tpublic void fireproof(String input) throws Exception {\n+\t\ttry {\n+\t\t\tEObject file = parseHelper.parse(input);\n+\t\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(file);\n+\t\t\tAssert.assertNotNull(resolvedTypes);\n+\t\t\tif (file != null) {\n+\t\t\t\tfor (EObject content : IteratorExtensions.toIterable(file.eAllContents())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTI4OA==", "bodyText": "Might want to make a casted var for the XAbstractFeatureCall", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515288", "createdAt": "2020-05-01T12:04:03Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/typesystem/Oven.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.junit.typesystem;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.junit4.util.ParseHelper;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XClosure;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.CompoundReentrantTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.internal.RootResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.TypeData;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Utility to check a given expression for exceptions and integrity after it was processed by the {@link IBatchTypeResolver}\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.typesystem.Oven instead\n+ */\n+@Deprecated\n+@Beta\n+@Singleton\n+public class Oven extends Assert {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate ParseHelper<EObject> parseHelper;\n+\n+\tpublic void fireproof(CharSequence input) throws Exception {\n+\t\tfireproof(input.toString());\n+\t}\n+\n+\tpublic void fireproof(String input) throws Exception {\n+\t\ttry {\n+\t\t\tEObject file = parseHelper.parse(input);\n+\t\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(file);\n+\t\t\tAssert.assertNotNull(resolvedTypes);\n+\t\t\tif (file != null) {\n+\t\t\t\tfor (EObject content : IteratorExtensions.toIterable(file.eAllContents())) {\n+\t\t\t\t\tif (content instanceof XAbstractFeatureCall) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved(((XExpression) content), resolvedTypes);\n+\t\t\t\t\t\tif (((XAbstractFeatureCall) content).getImplicitReceiver() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTM1Mg==", "bodyText": "Unneeded cast?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515352", "createdAt": "2020-05-01T12:04:19Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.junit/src/org/eclipse/xtext/xbase/junit/typesystem/Oven.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.junit.typesystem;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.common.types.JvmFormalParameter;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.junit4.util.ParseHelper;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XClosure;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;\n+import org.eclipse.xtext.xbase.typesystem.IBatchTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.IResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.CompoundReentrantTypeResolver;\n+import org.eclipse.xtext.xbase.typesystem.internal.RootResolvedTypes;\n+import org.eclipse.xtext.xbase.typesystem.internal.TypeData;\n+import org.eclipse.xtext.xbase.typesystem.references.LightweightTypeReference;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Utility to check a given expression for exceptions and integrity after it was processed by the {@link IBatchTypeResolver}\n+ * \n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ * @deprecated Use org.eclipse.xtext.xbase.testing.typesystem.Oven instead\n+ */\n+@Deprecated\n+@Beta\n+@Singleton\n+public class Oven extends Assert {\n+\t@Inject\n+\tprivate IBatchTypeResolver typeResolver;\n+\n+\t@Inject\n+\tprivate ReflectExtensions reflectExtensions;\n+\n+\t@Inject\n+\tprivate ParseHelper<EObject> parseHelper;\n+\n+\tpublic void fireproof(CharSequence input) throws Exception {\n+\t\tfireproof(input.toString());\n+\t}\n+\n+\tpublic void fireproof(String input) throws Exception {\n+\t\ttry {\n+\t\t\tEObject file = parseHelper.parse(input);\n+\t\t\tIResolvedTypes resolvedTypes = typeResolver.resolveTypes(file);\n+\t\t\tAssert.assertNotNull(resolvedTypes);\n+\t\t\tif (file != null) {\n+\t\t\t\tfor (EObject content : IteratorExtensions.toIterable(file.eAllContents())) {\n+\t\t\t\t\tif (content instanceof XAbstractFeatureCall) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved(((XExpression) content), resolvedTypes);\n+\t\t\t\t\t\tif (((XAbstractFeatureCall) content).getImplicitReceiver() != null) {\n+\t\t\t\t\t\t\tassertExpressionTypeIsResolved(((XAbstractFeatureCall) content).getImplicitReceiver(), resolvedTypes);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (((XAbstractFeatureCall) content).getImplicitFirstArgument() != null) {\n+\t\t\t\t\t\t\tassertExpressionTypeIsResolved(((XAbstractFeatureCall) content).getImplicitFirstArgument(), resolvedTypes);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else if (content instanceof XClosure) {\n+\t\t\t\t\t\tassertExpressionTypeIsResolved(((XExpression) content), resolvedTypes);\n+\t\t\t\t\t\t((XClosure) content).getImplicitFormalParameters()\n+\t\t\t\t\t\t\t\t.forEach((Consumer<JvmFormalParameter>) (JvmFormalParameter it) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTgwOA==", "bodyText": "No need for qualified name", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515808", "createdAt": "2020-05-01T12:06:25Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/AbstractXbaseContentAssistBugTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.TargetPlatformUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractXbaseContentAssistBugTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\tprivate IProject demandCreateProject;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tTargetPlatformUtil.setTargetPlatform(AbstractXbaseContentAssistBugTest.class);\n+\t\tAbstractXbaseContentAssistBugTest.staticProject = AbstractXbaseUITestCase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTgzNg==", "bodyText": "No need for qualified name", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515836", "createdAt": "2020-05-01T12:06:30Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/AbstractXbaseContentAssistBugTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.TargetPlatformUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractXbaseContentAssistBugTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\tprivate IProject demandCreateProject;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tTargetPlatformUtil.setTargetPlatform(AbstractXbaseContentAssistBugTest.class);\n+\t\tAbstractXbaseContentAssistBugTest.staticProject = AbstractXbaseUITestCase\n+\t\t\t\t.createPluginProject(AbstractXbaseContentAssistBugTest.class.getName());\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void deleteTestProject() throws Exception {\n+\t\tJavaProjectSetupUtil.deleteProject(AbstractXbaseContentAssistBugTest.staticProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNTk0MQ==", "bodyText": "No need for qualified name", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418515941", "createdAt": "2020-05-01T12:06:59Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xbase.ui.tests/src/org/eclipse/xtext/xbase/ui/tests/editor/AbstractXbaseContentAssistBugTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.ui.tests.editor;\n+\n+import java.io.InputStream;\n+\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.xtext.common.types.access.jdt.IJavaProjectProvider;\n+import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.ui.testing.ContentAssistProcessorTestBuilder;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.TargetPlatformUtil;\n+import org.eclipse.xtext.xbase.ui.tests.AbstractXbaseUITestCase;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public abstract class AbstractXbaseContentAssistBugTest extends AbstractXbaseUITestCase implements IJavaProjectProvider {\n+\tprivate IProject demandCreateProject;\n+\n+\tprivate static IProject staticProject;\n+\n+\t@BeforeClass\n+\tpublic static void createTestProject() throws Exception {\n+\t\tTargetPlatformUtil.setTargetPlatform(AbstractXbaseContentAssistBugTest.class);\n+\t\tAbstractXbaseContentAssistBugTest.staticProject = AbstractXbaseUITestCase\n+\t\t\t\t.createPluginProject(AbstractXbaseContentAssistBugTest.class.getName());\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void deleteTestProject() throws Exception {\n+\t\tJavaProjectSetupUtil.deleteProject(AbstractXbaseContentAssistBugTest.staticProject);\n+\t}\n+\n+\t@Override\n+\tpublic void tearDown() throws Exception {\n+\t\tif (demandCreateProject != null) {\n+\t\t\tJavaProjectSetupUtil.deleteProject(demandCreateProject);\n+\t\t}\n+\t\tsuper.tearDown();\n+\t}\n+\n+\t@Override\n+\tpublic boolean doCleanWorkspace() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic IJavaProject getJavaProject(ResourceSet resourceSet) {\n+\t\tString projectName = getProjectName();\n+\t\tIJavaProject javaProject = JavaProjectSetupUtil.findJavaProject(projectName);\n+\t\tif (javaProject == null || !javaProject.exists()) {\n+\t\t\ttry {\n+\t\t\t\tdemandCreateProject = AbstractXbaseUITestCase.createPluginProject(projectName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNjExNQ==", "bodyText": "s/runs/Runs/", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418516115", "createdAt": "2020-05-01T12:07:48Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.ui.examples/projects/domainmodel/org.eclipse.xtext.example.domainmodel.tests/src/org/eclipse/xtext/example/domainmodel/tests/XbaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.example.domainmodel.tests;\n+\n+import java.lang.reflect.Method;\n+\n+import org.eclipse.xtext.example.domainmodel.domainmodel.DomainModel;\n+import org.eclipse.xtext.generator.InMemoryFileSystemAccess;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.xbase.compiler.JvmModelGenerator;\n+import org.eclipse.xtext.xbase.testing.OnTheFlyJavaCompiler2;\n+import org.eclipse.xtext.xbase.testing.evaluation.AbstractXbaseEvaluationTest;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Xbase integration test.\n+ * \n+ * runs all Xbase tests from {@link AbstractXbaseEvaluationTest} in the context", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNjM2Mw==", "bodyText": "No need for final", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418516363", "createdAt": "2020-05-01T12:08:52Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.ui.examples/projects/domainmodel/org.eclipse.xtext.example.domainmodel.ui/src/org/eclipse/xtext/example/domainmodel/ui/editor/hierarchy/AssociationHierarchyBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2016, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.example.domainmodel.ui.editor.hierarchy;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EClassifier;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.EcoreUtil2;\n+import org.eclipse.xtext.common.types.TypesPackage;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.DomainmodelPackage;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.Entity;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.Property;\n+import org.eclipse.xtext.ide.editor.hierarchy.DefaultCallHierarchyBuilder;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNodeLocationProvider;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.resource.IReferenceDescription;\n+import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class AssociationHierarchyBuilder extends DefaultCallHierarchyBuilder {\n+\t@Inject\n+\tprivate IJvmModelAssociations jvmModelAssociations;\n+\n+\t@Inject\n+\tprivate AssociationHierarchyNodeLocationProvider associationHierarchyNodeLocationProvider;\n+\n+\t@Override\n+\tprotected IHierarchyNodeLocationProvider getHierarchyNodeLocationProvider() {\n+\t\treturn associationHierarchyNodeLocationProvider;\n+\t}\n+\n+\t@Override\n+\tprotected IEObjectDescription findDeclaration(URI objectURI) {\n+\t\tfinal IEObjectDescription description = getDescription(objectURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNjU5Nw==", "bodyText": "No need for this", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418516597", "createdAt": "2020-05-01T12:09:44Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.ui.examples/projects/domainmodel/org.eclipse.xtext.example.domainmodel.ui/src/org/eclipse/xtext/example/domainmodel/ui/editor/hierarchy/AssociationHierarchyBuilder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2016, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.example.domainmodel.ui.editor.hierarchy;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EClassifier;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.EcoreUtil2;\n+import org.eclipse.xtext.common.types.TypesPackage;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.DomainmodelPackage;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.Entity;\n+import org.eclipse.xtext.example.domainmodel.domainmodel.Property;\n+import org.eclipse.xtext.ide.editor.hierarchy.DefaultCallHierarchyBuilder;\n+import org.eclipse.xtext.ide.editor.hierarchy.IHierarchyNodeLocationProvider;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.resource.IReferenceDescription;\n+import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ */\n+public class AssociationHierarchyBuilder extends DefaultCallHierarchyBuilder {\n+\t@Inject\n+\tprivate IJvmModelAssociations jvmModelAssociations;\n+\n+\t@Inject\n+\tprivate AssociationHierarchyNodeLocationProvider associationHierarchyNodeLocationProvider;\n+\n+\t@Override\n+\tprotected IHierarchyNodeLocationProvider getHierarchyNodeLocationProvider() {\n+\t\treturn associationHierarchyNodeLocationProvider;\n+\t}\n+\n+\t@Override\n+\tprotected IEObjectDescription findDeclaration(URI objectURI) {\n+\t\tfinal IEObjectDescription description = getDescription(objectURI);\n+\t\tif (description != null) {\n+\t\t\tEClass eClass = description.getEClass();\n+\t\t\tif (isJvmType(eClass)) {\n+\t\t\t\treturn readOnly(description.getEObjectURI(), (EObject targetElement) -> {\n+\t\t\t\t\tEObject sourceElement = jvmModelAssociations.getPrimarySourceElement(targetElement);\n+\t\t\t\t\tif (sourceElement != null) {\n+\t\t\t\t\t\tif (isEntity(sourceElement.eClass())) {\n+\t\t\t\t\t\t\treturn getDescription(sourceElement);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\t\t\t}\n+\t\t\tif (isEntity(eClass)) {\n+\t\t\t\treturn description;\n+\t\t\t}\n+\t\t}\n+\t\treturn readOnly(objectURI, (EObject object) -> {\n+\t\t\treturn getDescription(EcoreUtil2.getContainerOfType(object, Entity.class));\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tprotected boolean filterReference(IReferenceDescription reference) {\n+\t\tif (reference == null || !this.isJvmType(reference.getEReference().getEType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNjc5MQ==", "bodyText": "Don't really see why this is needed", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418516791", "createdAt": "2020-05-01T12:10:46Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.ui.examples/projects/domainmodel/org.eclipse.xtext.example.domainmodel.ui/src/org/eclipse/xtext/example/domainmodel/ui/editor/hierarchy/AssociationHierarchyViewPart.java", "diffHunk": "@@ -16,14 +16,13 @@\n /**\n  * @author kosyakov - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public class AssociationHierarchyViewPart extends DefaultCallHierarchyViewPart {\n-  @Override\n-  protected Pair<String, ColumnLayoutData>[] getLocationColumnDescriptions() {\n-    ColumnWeightData _columnWeightData = new ColumnWeightData(60);\n-    Pair<String, ColumnLayoutData> _mappedTo = Pair.<String, ColumnLayoutData>of(\"Line\", _columnWeightData);\n-    ColumnWeightData _columnWeightData_1 = new ColumnWeightData(300);\n-    Pair<String, ColumnLayoutData> _mappedTo_1 = Pair.<String, ColumnLayoutData>of(\"Property\", _columnWeightData_1);\n-    return new Pair[] { _mappedTo, _mappedTo_1 };\n-  }\n+\t@SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxNjgzOA==", "bodyText": "Don't need the typing information right?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#discussion_r418516838", "createdAt": "2020-05-01T12:10:57Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.ui.examples/projects/domainmodel/org.eclipse.xtext.example.domainmodel.ui/src/org/eclipse/xtext/example/domainmodel/ui/editor/hierarchy/AssociationHierarchyViewPart.java", "diffHunk": "@@ -16,14 +16,13 @@\n /**\n  * @author kosyakov - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public class AssociationHierarchyViewPart extends DefaultCallHierarchyViewPart {\n-  @Override\n-  protected Pair<String, ColumnLayoutData>[] getLocationColumnDescriptions() {\n-    ColumnWeightData _columnWeightData = new ColumnWeightData(60);\n-    Pair<String, ColumnLayoutData> _mappedTo = Pair.<String, ColumnLayoutData>of(\"Line\", _columnWeightData);\n-    ColumnWeightData _columnWeightData_1 = new ColumnWeightData(300);\n-    Pair<String, ColumnLayoutData> _mappedTo_1 = Pair.<String, ColumnLayoutData>of(\"Property\", _columnWeightData_1);\n-    return new Pair[] { _mappedTo, _mappedTo_1 };\n-  }\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tprotected Pair<String, ColumnLayoutData>[] getLocationColumnDescriptions() {\n+\t\treturn new Pair[] { \n+\t\t\tPair.<String, ColumnLayoutData> of(\"Line\", new ColumnWeightData(60)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2ce793e07b472e1fd34c728ed975d3ff28e3f5f", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/e2ce793e07b472e1fd34c728ed975d3ff28e3f5f", "committedDate": "2020-04-30T16:29:15Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "05ae19d3bd0bac0281ddb1d7bd9e9571ae12a821", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/05ae19d3bd0bac0281ddb1d7bd9e9571ae12a821", "committedDate": "2020-05-01T17:16:01Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05ae19d3bd0bac0281ddb1d7bd9e9571ae12a821", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/05ae19d3bd0bac0281ddb1d7bd9e9571ae12a821", "committedDate": "2020-05-01T17:16:01Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "9290af35ebbd5ae879d70ea3f658b10c76099a76", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/9290af35ebbd5ae879d70ea3f658b10c76099a76", "committedDate": "2020-05-04T06:47:42Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9290af35ebbd5ae879d70ea3f658b10c76099a76", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/9290af35ebbd5ae879d70ea3f658b10c76099a76", "committedDate": "2020-05-04T06:47:42Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "20bf01694390e46a4f303e5476b90dc3b08e029f", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/20bf01694390e46a4f303e5476b90dc3b08e029f", "committedDate": "2020-05-04T12:44:29Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0dfa5e17d3db54d93968485b7e1de4d2cc7da0d", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/e0dfa5e17d3db54d93968485b7e1de4d2cc7da0d", "committedDate": "2020-05-04T12:49:06Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20bf01694390e46a4f303e5476b90dc3b08e029f", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/20bf01694390e46a4f303e5476b90dc3b08e029f", "committedDate": "2020-05-04T12:44:29Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "e0dfa5e17d3db54d93968485b7e1de4d2cc7da0d", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-eclipse/commit/e0dfa5e17d3db54d93968485b7e1de4d2cc7da0d", "committedDate": "2020-05-04T12:49:06Z", "message": "[eclipse/xtext#1679]ported more code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTM3NzAw", "url": "https://github.com/eclipse/xtext-eclipse/pull/1421#pullrequestreview-405137700", "createdAt": "2020-05-04T16:14:14Z", "commit": {"oid": "e0dfa5e17d3db54d93968485b7e1de4d2cc7da0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4523, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}