{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NDcwMjgw", "number": 1564, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo1ODo0NFrOExE7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowNToxNVrOExFCrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODk2MzczOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo1ODo0NFrOHnBEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo1ODo0NFrOHnBEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NDA3OQ==", "bodyText": "Futures.getUnchecked(..) may simlify this try-catch and the one below.", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510674079", "createdAt": "2020-10-23T06:58:44Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -74,7 +77,7 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\tISourceViewer viewer = editor.getInternalSourceViewer();\n \n \t\tString text = editor.getDocument().get();\n-\t\tStringBuilder sb = new StringBuilder();\n+\t\tStringBuilder sb = new StringBuilder(text);\n \n \t\tList<? extends ICodeMining> codeMinings;\n \t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62259d3a1accd09fa9bc962c1ef9fc1913d1f31b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODk2Njc2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo1OTo0N1rOHnBGUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo1OTo0N1rOHnBGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NDUxNQ==", "bodyText": "Note to self: sort backwards such that traversal starts with the last one", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510674515", "createdAt": "2020-10-23T06:59:47Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -92,45 +95,21 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n \t\t}\n \n-\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm2.getPosition().getOffset() - cm1.getPosition().getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62259d3a1accd09fa9bc962c1ef9fc1913d1f31b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODk2ODY3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowMDoyMVrOHnBHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowMDoyMVrOHnBHWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NDc3Nw==", "bodyText": "Note to self: Group the sorted minings -> LinkedHashMap maintains the order.", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510674777", "createdAt": "2020-10-23T07:00:21Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -92,45 +95,21 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n \t\t}\n \n-\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm2.getPosition().getOffset() - cm1.getPosition().getOffset());\n \n-\t\tint currentOffset = 0;\n-\t\tfor (int i = 0; i < codeMinings.size(); i++) {\n-\n-\t\t\tICodeMining codeMining = codeMinings.get(i);\n-\n-\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n-\n-\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n-\n-\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n-\n-\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n-\n-\t\t\tcurrentOffset = codeMiningOffset;\n-\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n-\t\t\t\tsb.append(System.lineSeparator());\n-\t\t\t\tcurrentOffset--;\n+\t\tMap<Integer, List<ICodeMining>> byPos = codeMinings.stream().collect(Collectors.groupingBy(e -> e.getPosition().getOffset(), LinkedHashMap::new, Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62259d3a1accd09fa9bc962c1ef9fc1913d1f31b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODk3Njc0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowMzoxNVrOHnBMDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowOToyMFrOHnBWow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTk4Mw==", "bodyText": "Maybe more straight forward to use Multimap.index(codeMinings, e->getPositions().getOffset()) but it's a matter of taste", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510675983", "createdAt": "2020-10-23T07:03:15Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -92,45 +95,21 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n \t\t}\n \n-\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm2.getPosition().getOffset() - cm1.getPosition().getOffset());\n \n-\t\tint currentOffset = 0;\n-\t\tfor (int i = 0; i < codeMinings.size(); i++) {\n-\n-\t\t\tICodeMining codeMining = codeMinings.get(i);\n-\n-\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n-\n-\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n-\n-\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n-\n-\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n-\n-\t\t\tcurrentOffset = codeMiningOffset;\n-\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n-\t\t\t\tsb.append(System.lineSeparator());\n-\t\t\t\tcurrentOffset--;\n+\t\tMap<Integer, List<ICodeMining>> byPos = codeMinings.stream().collect(Collectors.groupingBy(e -> e.getPosition().getOffset(), LinkedHashMap::new, Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62259d3a1accd09fa9bc962c1ef9fc1913d1f31b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3ODY5MQ==", "bodyText": "wanted to keep this similat to what eclipse does ;)", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510678691", "createdAt": "2020-10-23T07:09:20Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -92,45 +95,21 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n \t\t}\n \n-\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm2.getPosition().getOffset() - cm1.getPosition().getOffset());\n \n-\t\tint currentOffset = 0;\n-\t\tfor (int i = 0; i < codeMinings.size(); i++) {\n-\n-\t\t\tICodeMining codeMining = codeMinings.get(i);\n-\n-\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n-\n-\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n-\n-\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n-\n-\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n-\n-\t\t\tcurrentOffset = codeMiningOffset;\n-\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n-\t\t\t\tsb.append(System.lineSeparator());\n-\t\t\t\tcurrentOffset--;\n+\t\tMap<Integer, List<ICodeMining>> byPos = codeMinings.stream().collect(Collectors.groupingBy(e -> e.getPosition().getOffset(), LinkedHashMap::new, Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3NTk4Mw=="}, "originalCommit": {"oid": "62259d3a1accd09fa9bc962c1ef9fc1913d1f31b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODk4Mjg0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowNToxNVrOHnBPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzowNToxNVrOHnBPkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY3Njg4MA==", "bodyText": "System.lineSeparator -> ((IDocumentExtension4)editor.getDocument()).getDefaultLineDelimiter()", "url": "https://github.com/eclipse/xtext-eclipse/pull/1564#discussion_r510676880", "createdAt": "2020-10-23T07:05:15Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -74,63 +77,31 @@ protected String insertCodeMinings(XtextEditor editor) {\n \t\tISourceViewer viewer = editor.getInternalSourceViewer();\n \n \t\tString text = editor.getDocument().get();\n-\t\tStringBuilder sb = new StringBuilder();\n+\t\tStringBuilder sb = new StringBuilder(text);\n \n \t\tList<? extends ICodeMining> codeMinings;\n-\t\ttry {\n-\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n-\t\t} catch (InterruptedException | ExecutionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n+\t\tcodeMinings = Futures.getUnchecked(codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()));\n \n \t\tfor (ICodeMining codeMining : codeMinings) {\n-\t\t\ttry {\n-\t\t\t\tcodeMining.resolve(viewer, new NullProgressMonitor()).get();\n-\t\t\t} catch (InterruptedException | ExecutionException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n+\t\t\tFutures.getUnchecked(codeMining.resolve(viewer, new NullProgressMonitor()));\n \t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n \t\t}\n \n-\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n-\n-\t\tint currentOffset = 0;\n-\t\tfor (int i = 0; i < codeMinings.size(); i++) {\n-\n-\t\t\tICodeMining codeMining = codeMinings.get(i);\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm2.getPosition().getOffset() - cm1.getPosition().getOffset());\n \n-\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n-\n-\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n-\n-\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n-\n-\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n-\n-\t\t\tcurrentOffset = codeMiningOffset;\n-\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n-\t\t\t\tsb.append(System.lineSeparator());\n-\t\t\t\tcurrentOffset--;\n+\t\tMap<Integer, List<ICodeMining>> byPos = codeMinings.stream().collect(Collectors.groupingBy(e -> e.getPosition().getOffset(), LinkedHashMap::new, Collectors.toList()));\n+\t\tfor (Entry<Integer, List<ICodeMining>> e : byPos.entrySet()) {\n+\t\t\tint codeMiningOffset = e.getKey();\n+\t\t\tList<ICodeMining> miningsAtOffset = e.getValue();\n+\t\t\tString codeMiningsText = getCodeMiningsText(miningsAtOffset);\n+\t\t\tif (containsLineHeaderCodeMining(miningsAtOffset)) {\n+\t\t\t\tsb.insert(codeMiningOffset, System.lineSeparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f810664685b2435e911f9f85d95c77debe7328a"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 772, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}