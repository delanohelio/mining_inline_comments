{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5ODA3NTc1", "number": 1498, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo0NzowM1rOET8stg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDoyNjo0OFrOEUE-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzUyODg2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNjo0NzowM1rOG59y_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDozNzozMFrOG6K6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA==", "bodyText": "does this work with multiple codeminings? does it work with multiple codeminings at the same place? does it work if the codeminings are not sorted by offset?", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463434494", "createdAt": "2020-07-31T06:47:03Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzOTc1Mw==", "bodyText": "Multiple codeminings are already supported, see org.eclipse.xtext.example.arithmetics.ui.tests.codemining.CodeMiningTest test class in the PR:\n\nI think, the other corner cases you mentioned are not supported, but the user has the possibility to override the protected String insertCodeMinings(XtextEditor editor) method to provide a custom implementation for such cases.", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463439753", "createdAt": "2020-07-31T07:02:02Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA=="}, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0MDA4OQ==", "bodyText": "i dont think we should let that up to the user ....", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463440089", "createdAt": "2020-07-31T07:03:01Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA=="}, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0MjMwOA==", "bodyText": "the usual algorithm is to sort codeminings by offset backwards (apply them from bottom to top)", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463442308", "createdAt": "2020-07-31T07:09:06Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA=="}, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ1MTcxNA==", "bodyText": "e.g. adding\n\t\tfor (Property f :  EcoreUtil2.eAllOfType(resource.getContents().get(0), Property.class)) {\n\t\t\tint endOffset = NodeModelUtils.findActualNodeFor(f).getEndOffset();\n\t\t\tacceptor.accept(createNewLineContentCodeMining(endOffset, \" Breaking Tamas Test\"));\n\t\t}\n\nto domain model code mining provider easily breaks your code", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463451714", "createdAt": "2020-07-31T07:33:17Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA=="}, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0OTQ3OQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463649479", "createdAt": "2020-07-31T14:37:30Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tint currentOffset = 0;\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQzNDQ5NA=="}, "originalCommit": {"oid": "1b3e0a121678d94b4eb58b9f180b87500cb8e759"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDg4NTU0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDoyNjo0OFrOG6Ki7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDozNzoxOFrOG6K6VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0MzM3NQ==", "bodyText": "formatting", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463643375", "createdAt": "2020-07-31T14:26:48Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\ttry {\n+\t\t\t\tcodeMining.resolve(viewer, new NullProgressMonitor()).get();\n+\t\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n+\t\t}\n+\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\n+\t\tint currentOffset = 0;\n+\t\tfor (int i=0; i<codeMinings.size(); i++) {\n+\n+\t\t\tICodeMining codeMining = codeMinings.get(i);\n+\n+\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n+\n+\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n+\n+\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n+\n+\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n+\n+\t\t\tcurrentOffset = codeMiningOffset;\n+\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n+\t\t\t\tsb.append(System.lineSeparator());\n+\t\t\t\tcurrentOffset--;\n+\t\t\t}\n+\n+\t\t\ti = getLastCodeMiningOnOffset(codeMinings, codeMiningOffset);\n+\t\t}\n+\n+\t\tsb.append(text.substring(currentOffset));\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprotected List<ICodeMining> getCodeMiningsByOffset(List<? extends ICodeMining> codeMinings, int offset) {\n+\t\tList<ICodeMining> result = new ArrayList<ICodeMining>();\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n+\t\t\tif (codeMiningOffset == offset) {\n+\t\t\t\tresult.add(codeMining);\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprotected String getCodeMiningsText(List<? extends ICodeMining> codeMinings) {\n+\t\tStringBuilder result = new StringBuilder();\n+\n+\t\tint count = 0;\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tString codeMiningLabel = codeMining.getLabel();\n+\t\t\tif (codeMiningLabel != null) {\n+\t\t\t\tif (count != 0) {\n+\t\t\t\t\tresult.append(\" | \");\n+\t\t\t\t}\n+\t\t\t\tresult.append(codeMiningLabel);\n+\t\t\t}\n+\t\t\tcount++;\n+\t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tprotected boolean containsLineHeaderCodeMining(List<ICodeMining> codeMinings) {\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tif (codeMining instanceof LineHeaderCodeMining) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprotected int getLastCodeMiningOnOffset(List<? extends ICodeMining> codeMinings, int offset) {\n+\t\tint i = 0;\n+\t\tfor(;i<codeMinings.size();i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "858ea280366b20a65cfaa3c7f52832e3236cabb6"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0OTM2NA==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-eclipse/pull/1498#discussion_r463649364", "createdAt": "2020-07-31T14:37:18Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.ui.testing/src/org/eclipse/xtext/ui/testing/AbstractCodeMiningTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ui.testing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.jface.text.codemining.ICodeMining;\n+import org.eclipse.jface.text.codemining.ICodeMiningProvider;\n+import org.eclipse.jface.text.codemining.LineHeaderCodeMining;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.ui.editor.XtextEditor;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author miklossy - Initial contribution and API\n+ * @since 2.23\n+ */\n+@Beta\n+public class AbstractCodeMiningTest extends AbstractEditorTest {\n+\n+\t@Inject protected FileExtensionProvider fileExtensionProvider;\n+\t@Inject protected ICodeMiningProvider codeMiningProvider;\n+\n+\t/**\n+\t * Test that the expected code minings are present on a given DSL text.\n+\t *\n+\t * @param The initial DSL text.\n+\t * @param expected The DSL text where the expected code minings are inserted on the right position.\n+\t */\n+\tpublic void testCodeMining(CharSequence initialText, String expected) {\n+\t\t// Given\n+\t\tIFile dslFile = dslFile(initialText);\n+\t\t// When\n+\t\tXtextEditor editor = openEditor(dslFile);\n+\t\t// Then\n+\t\tcodeMiningsArePresent(editor, expected);\n+\t}\n+\n+\t@Override\n+\tprotected XtextEditor openEditor(IFile dslFile) {\n+\t\ttry {\n+\t\t\tXtextEditor editor = super.openEditor(dslFile);\n+\t\t\tassertNotNull(editor);\n+\t\t\treturn editor;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t}\n+\n+\tprotected void codeMiningsArePresent(XtextEditor editor, String expected) {\n+\t\tString actual = insertCodeMinings(editor);\n+\t\tassertEquals(expected, actual);\n+\t}\n+\n+\tprotected String insertCodeMinings(XtextEditor editor) {\n+\t\tISourceViewer viewer = editor.getInternalSourceViewer();\n+\n+\t\tString text = editor.getDocument().get();\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tList<? extends ICodeMining> codeMinings;\n+\t\ttry {\n+\t\t\tcodeMinings = codeMiningProvider.provideCodeMinings(viewer, new NullProgressMonitor()).get();\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\ttry {\n+\t\t\t\tcodeMining.resolve(viewer, new NullProgressMonitor()).get();\n+\t\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t}\n+\t\t\tassertTrue(\"CodeMining is not resolved!\", codeMining.isResolved());\n+\t\t}\n+\n+\t\tcodeMinings.sort((ICodeMining cm1, ICodeMining cm2) -> cm1.getPosition().getOffset() - cm2.getPosition().getOffset());\n+\n+\t\tint currentOffset = 0;\n+\t\tfor (int i=0; i<codeMinings.size(); i++) {\n+\n+\t\t\tICodeMining codeMining = codeMinings.get(i);\n+\n+\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n+\n+\t\t\tList<ICodeMining> codeMiningsOnTheSameOffset = getCodeMiningsByOffset(codeMinings, codeMiningOffset);\n+\n+\t\t\tString codeMiningsText = getCodeMiningsText(codeMiningsOnTheSameOffset);\n+\n+\t\t\tsb.append(text.substring(currentOffset, codeMiningOffset) + codeMiningsText);\n+\n+\t\t\tcurrentOffset = codeMiningOffset;\n+\t\t\tif (containsLineHeaderCodeMining(codeMiningsOnTheSameOffset)) {\n+\t\t\t\tsb.append(System.lineSeparator());\n+\t\t\t\tcurrentOffset--;\n+\t\t\t}\n+\n+\t\t\ti = getLastCodeMiningOnOffset(codeMinings, codeMiningOffset);\n+\t\t}\n+\n+\t\tsb.append(text.substring(currentOffset));\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprotected List<ICodeMining> getCodeMiningsByOffset(List<? extends ICodeMining> codeMinings, int offset) {\n+\t\tList<ICodeMining> result = new ArrayList<ICodeMining>();\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tint codeMiningOffset = codeMining.getPosition().getOffset();\n+\t\t\tif (codeMiningOffset == offset) {\n+\t\t\t\tresult.add(codeMining);\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t\n+\tprotected String getCodeMiningsText(List<? extends ICodeMining> codeMinings) {\n+\t\tStringBuilder result = new StringBuilder();\n+\n+\t\tint count = 0;\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tString codeMiningLabel = codeMining.getLabel();\n+\t\t\tif (codeMiningLabel != null) {\n+\t\t\t\tif (count != 0) {\n+\t\t\t\t\tresult.append(\" | \");\n+\t\t\t\t}\n+\t\t\t\tresult.append(codeMiningLabel);\n+\t\t\t}\n+\t\t\tcount++;\n+\t\t}\n+\t\treturn result.toString();\n+\t}\n+\n+\tprotected boolean containsLineHeaderCodeMining(List<ICodeMining> codeMinings) {\n+\t\tfor (ICodeMining codeMining : codeMinings) {\n+\t\t\tif (codeMining instanceof LineHeaderCodeMining) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprotected int getLastCodeMiningOnOffset(List<? extends ICodeMining> codeMinings, int offset) {\n+\t\tint i = 0;\n+\t\tfor(;i<codeMinings.size();i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY0MzM3NQ=="}, "originalCommit": {"oid": "858ea280366b20a65cfaa3c7f52832e3236cabb6"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 745, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}