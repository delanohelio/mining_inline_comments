{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTczMTg1", "number": 9858, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNjo0OFrODxt4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNjo0OFrODxt4Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU4NTM1OnYy", "diffSide": "RIGHT", "path": "sql-parser/src/main/java/io/crate/sql/ExpressionFormatter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNjo0OFrOGFWCCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToxMzo1MlrOGFdKew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzAzNQ==", "bodyText": "Could also use a StringBuilder or StringJoiner directly here and further above", "url": "https://github.com/crate/crate/pull/9858#discussion_r408257035", "createdAt": "2020-04-14T16:06:48Z", "author": {"login": "mfussenegger"}, "path": "sql-parser/src/main/java/io/crate/sql/ExpressionFormatter.java", "diffHunk": "@@ -586,35 +584,35 @@ protected String visitTryCast(TryCast node, @Nullable List<Expression> parameter\n \n         @Override\n         protected String visitSearchedCaseExpression(SearchedCaseExpression node, @Nullable List<Expression> parameters) {\n-            ImmutableList.Builder<String> parts = ImmutableList.builder();\n+            ArrayList<String> parts = new ArrayList<>();\n             parts.add(\"CASE\");\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 parts.add(whenClause.accept(this, parameters));\n             }\n             if (node.getDefaultValue() != null) {\n-                parts.add(\"ELSE\")\n-                    .add(node.getDefaultValue().accept(this, parameters));\n+                parts.add(\"ELSE\");\n+                parts.add(node.getDefaultValue().accept(this, parameters));\n             }\n             parts.add(\"END\");\n \n-            return \"(\" + String.join(\" \", parts.build()) + \")\";\n+            return \"(\" + String.join(\" \", parts) + \")\";\n         }\n \n         @Override\n         protected String visitSimpleCaseExpression(SimpleCaseExpression node, @Nullable List<Expression> parameters) {\n-            ImmutableList.Builder<String> parts = ImmutableList.builder();\n-            parts.add(\"CASE\")\n-                .add(node.getOperand().accept(this, parameters));\n+            ArrayList<String> parts = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95bd4cd1e991a18685cd846247835a99784283d9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3Mzg4Mw==", "bodyText": "i went for StringBuilder", "url": "https://github.com/crate/crate/pull/9858#discussion_r408373883", "createdAt": "2020-04-14T19:13:52Z", "author": {"login": "kovrus"}, "path": "sql-parser/src/main/java/io/crate/sql/ExpressionFormatter.java", "diffHunk": "@@ -586,35 +584,35 @@ protected String visitTryCast(TryCast node, @Nullable List<Expression> parameter\n \n         @Override\n         protected String visitSearchedCaseExpression(SearchedCaseExpression node, @Nullable List<Expression> parameters) {\n-            ImmutableList.Builder<String> parts = ImmutableList.builder();\n+            ArrayList<String> parts = new ArrayList<>();\n             parts.add(\"CASE\");\n             for (WhenClause whenClause : node.getWhenClauses()) {\n                 parts.add(whenClause.accept(this, parameters));\n             }\n             if (node.getDefaultValue() != null) {\n-                parts.add(\"ELSE\")\n-                    .add(node.getDefaultValue().accept(this, parameters));\n+                parts.add(\"ELSE\");\n+                parts.add(node.getDefaultValue().accept(this, parameters));\n             }\n             parts.add(\"END\");\n \n-            return \"(\" + String.join(\" \", parts.build()) + \")\";\n+            return \"(\" + String.join(\" \", parts) + \")\";\n         }\n \n         @Override\n         protected String visitSimpleCaseExpression(SimpleCaseExpression node, @Nullable List<Expression> parameters) {\n-            ImmutableList.Builder<String> parts = ImmutableList.builder();\n-            parts.add(\"CASE\")\n-                .add(node.getOperand().accept(this, parameters));\n+            ArrayList<String> parts = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzAzNQ=="}, "originalCommit": {"oid": "95bd4cd1e991a18685cd846247835a99784283d9"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1601, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}