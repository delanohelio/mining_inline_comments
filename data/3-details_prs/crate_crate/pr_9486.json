{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5OTE3MDIy", "number": 9486, "title": "Group unreleased changes", "bodyText": "Checklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-01-07T10:09:50Z", "url": "https://github.com/crate/crate/pull/9486", "merged": true, "mergeCommit": {"oid": "5ce39f4cb0aa9ec3869afa2dc1cb5a1383147ec9"}, "closed": true, "closedAt": "2020-01-07T13:55:25Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3-Vu8gFqTMzOTE1NDQ4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4AmuPgH2gAyMzU5OTE3MDIyOjQ1N2QxZDJiMzc2MzdkYTNjMjE5ODM3MmE3Zjg4MDg5ZmJkNGE4M2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MTU0NDg2", "url": "https://github.com/crate/crate/pull/9486#pullrequestreview-339154486", "createdAt": "2020-01-07T10:33:32Z", "commit": {"oid": "5b423e2a0193f769b4149760189f5c008f1d2eba"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDozMzozM1rOFa1osA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMDozMzozM1rOFa1osA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY4NjA2NA==", "bodyText": "maybe add backticks to the scalar names or even add documentation links?", "url": "https://github.com/crate/crate/pull/9486#discussion_r363686064", "createdAt": "2020-01-07T10:33:33Z", "author": {"login": "seut"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -65,154 +65,182 @@ Deprecations\n Changes\n =======\n \n-- Added support for type interval in ``offset PRECEDING/FOLLOWING``, in\n-  RANGE mode of window functions. When the ordering column is of type\n-  :ref:`timestamp <timestamp_data_type>`, the ``offset`` expression can\n-  be an :ref:`interval <interval_data_type>`.\n \n-- Added support for casting values of type ``object`` to ``text``. This will\n-  cause the object to be converted to a JSON string.\n+Resiliency improvements\n+-----------------------\n \n-- Optimized ``SELECT DISTINCT .. LIMIT n`` queries. On high cardinality\n-  columns this type of queries can now execute up to 200% faster and use\n-  less memory.\n-\n-- The optimizer now utilizes internal statistics to approximate the number of\n-  rows returned by various parts of a query plan. This should result in more\n-  efficient execution plans for joins.\n-\n-- Added a :ref:`ANALYZE <analyze>` command that can be used to update\n-  statistical data about the contents of the tables in the CrateDB cluster.\n-  This data is visible in a newly added :ref:`pg_stats <pg_stats>` table.\n-\n-- Added support for casting to :ref:`geo_point_data_type`,\n-  :ref:`geo_shape_data_type` and :ref:`object_data_type` array data types.\n-  For example: ``cast(['POINT(2 3)','POINT(1 3)'] AS array(geo_point))``\n-\n-- Added a ``failures`` column to the :ref:`sys.snapshots <sys-snapshots>`\n-  table.\n+- Some ``ALTER TABLE`` operations now internally invoke a single cluster state\n+  update instead of multiple cluster state updates, making it more resilient as\n+  there is no longer a window where the cluster state could be inconsistent.\n \n - Changed the default garbage collector that is being used from Concurrent Mark\n-  Sweep to G1GC.\n+  Sweep to G1GC. This should lead to shorter GC pauses.\n \n-- Added support for CIDR notation comparisons through special purpose\n-  operator ``<<`` associated with type ip.\n-  Statements like ``192.168.0.0 << 192.168.0.1/24`` are true,\n-  ``select ip from ips_table where ip << 192.168.0.1/24`` returns\n-  matching :ref:`ip <ip-type>` addresses.\n-\n-- Added the ``ltrim`` and ``rtrim`` scalar functions.\n+- Added a dynamic bulk sizing mechanism that should prevent ``INSERT INTO ...\n+  FROM query`` operations to run into out of memory errors if the individual\n+  records of a table are large.\n \n-- Improved the error messages that were returned if a relation or schema is not\n-  found. They now may include suggestions for similarly named tables. This\n-  should make typos more apparent and can help users figure out that they were\n-  missing double quotes in case the table names contain upper case letters.\n+- Added the :ref:`cluster.routing.allocation.total_shards_per_node\n+  <cluster.routing.allocation.total_shards_per_node>` setting.\n \n-- Added a ``seq_no_stats`` and a ``translog_stats`` column to the\n-  :ref:`sys.shards <sys-shards>` table.\n \n-- Added new system table :ref:`sys.segments <sys-segments>` which contains\n-  information about the Lucene segments of a shard.\n+Performance improvements\n+------------------------\n \n-- Added a ``node`` column to :ref:`sys.jobs_log <sys-logs>`.\n+- Optimized ``SELECT DISTINCT .. LIMIT n`` queries. On high cardinality\n+  columns this type of queries can now execute up to 200% faster and use\n+  less memory.\n \n-- Added support for the operator :ref:`ILIKE <sql_dql_like>`, the case\n-  insensitive complement to ``LIKE``.\n+- The optimizer now utilizes internal statistics to approximate the number of\n+  rows returned by various parts of a query plan. This should result in more\n+  efficient execution plans for joins.\n \n - Reduced recovery time by sending file-chunks concurrently. It applies\n   only for when transport communication is secured or compressed. The number of\n   chunks is controlled by the :ref:`indices.recovery.max_concurrent_file_chunks\n   <indices.recovery.max_concurrent_file_chunks>` setting.\n \n+- Added an optimization that allows to run `WHERE` clauses on top of\n+  derived tables containing :ref:`table functions <ref-table-functions>`\n+  more efficiently in some cases.\n+\n - Allow user to control how table data is stored and accessed on a disk\n   via the :ref:`store.type <table_parameter.store_type>` table parameter and\n   :ref:`node.store.allow_mmap <node.store_allow_mmap>` node setting.\n \n - Changed the default table data store type from ``mmapfs`` to ``hybridfs``.\n \n-- Added ``phonetic`` token filter with following encoders: ``metaphone``,\n-  ``double_metaphone``, ``soundex``, ``refined_soundex``, ``caverphone1``,\n-  ``caverphone2``, ``cologne``, ``nysiis``, ``koelnerphonetik``,\n-  ``haasephonetik``, ``beider_morse``, ``daitch_mokotoff``.\n \n-- Removed a restriction for predicates in the ``WHERE`` clause involving\n-  partitioned by columns which could result in a failure response with the\n-  message ``logical conjunction of the conditions in the WHERE clause which\n-  involve partitioned columns led to a query that can't be executed``.\n+SQL Standard and PostgreSQL compatibility improvements\n+------------------------------------------------------\n \n-- Added a dynamic bulk sizing mechanism that should prevent ``INSERT INTO ...\n-  FROM query`` operations to run into out of memory errors if the individual\n-  records of a table are very large.\n+Window function extensions\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-- Improved resiliency of ``ALTER TABLE ADD`` operation.\n+- Added support for the :ref:`lag <window-function-lag>` and :ref:`lead\n+  <window-function-lead>` window functions as enterprise features.\n \n-- Improved resiliency of ``ALTER TABLE`` operation.\n+- Added support for ``ROWS`` frame definitions in the context of window\n+  functions :ref:`window definitions <window-definition>`.\n+\n+- Added support for the :ref:`named window definition <named-windows>`.\n+  It allows a user to define a list of window definitions in the\n+  :ref:`sql_reference_window` clause that can be referenced in :ref:`over`\n+  clauses.\n+\n+- Added support for `offset PRECEDING` and `offset FOLLOWING`\n+  :ref:`window definitions <window-definition>`.\n+\n+\n+\n+Scalar functions and operators\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n - Extended :ref:`CONCAT <scalar_concat>` to do implicit casts, so that calls\n   like ``SELECT 't' || 5`` are supported.\n \n+- Added support for casting values of type ``object`` to ``text``. This will\n+  cause the object to be converted to a JSON string.\n+\n+- Added support for casting to :ref:`geo_point_data_type`,\n+  :ref:`geo_shape_data_type` and :ref:`object_data_type` array data types.\n+  For example: ``cast(['POINT(2 3)','POINT(1 3)'] AS array(geo_point))``\n+\n+- Added the :ref:`PG_TYPEOF <pg_typeof>` system function.\n+\n - Added the :ref:`INTERVAL <interval_data_type>` datatype and extended\n   :ref:`table-functions-generate-series` to work with timestamps and the\n   new :ref:`INTERVAL <interval_data_type>` type\n \n-- Added the :ref:`PG_TYPEOF <pg_typeof>` system function.\n+- Added :ref:`LPAD <scalar-lpad>` and :ref:`RPAD <scalar-rpad>` scalar functions.\n \n-- Support implicit object creation in update statements. E.g. ``UPDATE t SET\n-  obj['x'] = 10`` will now implicitly set ``obj`` to ``{obj: {x: 10}}`` on rows\n-  where ``obj`` was previously ``null``.\n+- Added the ``ltrim`` and ``rtrim`` scalar functions.\n \n-- Added :ref:`LPAD <scalar-lpad>` and :ref:`RPAD <scalar-rpad>` scalar functions.\n+- Added left and right scalar functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b423e2a0193f769b4149760189f5c008f1d2eba"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b8baf27236eec3584125c1e6331ef10f11abbc", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/46b8baf27236eec3584125c1e6331ef10f11abbc", "committedDate": "2020-01-07T12:39:08Z", "message": "Group unreleased changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b423e2a0193f769b4149760189f5c008f1d2eba", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/5b423e2a0193f769b4149760189f5c008f1d2eba", "committedDate": "2020-01-07T10:08:58Z", "message": "Group unreleased changes"}, "afterCommit": {"oid": "46b8baf27236eec3584125c1e6331ef10f11abbc", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/46b8baf27236eec3584125c1e6331ef10f11abbc", "committedDate": "2020-01-07T12:39:08Z", "message": "Group unreleased changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457d1d2b37637da3c2198372a7f88089fbd4a83b", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/457d1d2b37637da3c2198372a7f88089fbd4a83b", "committedDate": "2020-01-07T13:16:59Z", "message": "Merge branch 'master' into j/release-notes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}