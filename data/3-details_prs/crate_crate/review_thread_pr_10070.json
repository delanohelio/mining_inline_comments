{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNDkwOTc2", "number": 10070, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMzowMFrOEEUYEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowMjo0N1rOEEYpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTYzNjAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMzowMFrOGh3SRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyMzowMFrOGh3SRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2MTk4OA==", "bodyText": "checkstyle forced me to add this weird indention, don't know why :(", "url": "https://github.com/crate/crate/pull/10070#discussion_r438161988", "createdAt": "2020-06-10T14:23:00Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "diffHunk": "@@ -64,158 +44,130 @@\n         public static final String MOD = \"mod\";\n     }\n \n-    public static void register(ScalarFunctionModule module) {\n-        module.register(Names.ADD, new ArithmeticFunctionResolver(\n-            Names.ADD,\n-            \"+\",\n+    private enum Operations {\n+        ADD(\n             FunctionInfo.DETERMINISTIC_AND_COMPARISON_REPLACEMENT,\n             Math::addExact,\n             Double::sum,\n             Math::addExact,\n             Float::sum\n-        ));\n-        module.register(Names.SUBTRACT, new ArithmeticFunctionResolver(\n-            Names.SUBTRACT,\n-            \"-\",\n+        ),\n+        SUBTRACT(\n             FunctionInfo.DETERMINISTIC_ONLY,\n             Math::subtractExact,\n-            (arg0, arg1) -> arg0 - arg1,\n+                (arg0, arg1) -> arg0 - arg1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTc5OTI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDo1NjozMFrOGh47TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToxNzoyOVrOGh53LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4ODg3Nw==", "bodyText": "do we still need to check whether the intersecting from and to type parameters are compatible or the size check would be enough?", "url": "https://github.com/crate/crate/pull/10070#discussion_r438188877", "createdAt": "2020-06-10T14:56:30Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "diffHunk": "@@ -92,6 +92,9 @@\n         List<DataType<?>> toTypeParameters = toType.getTypeParameters();\n \n         if (fromTypeParameters.size() != toTypeParameters.size()) {\n+            if (fromType.id() == ObjectType.ID && toType.id() == ObjectType.ID) {\n+                return fromTypeParameters.size() > toTypeParameters.size() ? fromType : toType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwNDIwNA==", "bodyText": "Currently no test required to check for object inner type compatibility. Thats why I went just with size comparison as it popped up when working with untyped and typed objects.\nI'd keep that in mind and only add later on if really required.", "url": "https://github.com/crate/crate/pull/10070#discussion_r438204204", "createdAt": "2020-06-10T15:17:29Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "diffHunk": "@@ -92,6 +92,9 @@\n         List<DataType<?>> toTypeParameters = toType.getTypeParameters();\n \n         if (fromTypeParameters.size() != toTypeParameters.size()) {\n+            if (fromType.id() == ObjectType.ID && toType.id() == ObjectType.ID) {\n+                return fromTypeParameters.size() > toTypeParameters.size() ? fromType : toType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE4ODg3Nw=="}, "originalCommit": {"oid": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTg0MzMyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNjoyOVrOGh5Xqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTowNjoyOVrOGh5Xqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NjEzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/crate/crate/pull/10070#discussion_r438196139", "createdAt": "2020-06-10T15:06:29Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1027,7 +1027,7 @@ public void testCreateTableGeneratedColumnWithCast() {\n         Map<String, String> generatedColumnsMapping = (Map<String, String>) metaMapping.get(\"generated_columns\");\n         assertThat(\n             generatedColumnsMapping.get(\"day\"),\n-            is(\"_cast((_cast(ts, 'bigint') + 1::bigint), 'timestamp with time zone')\"));\n+            is(\"(ts + 1::bigint)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e59012035e3533d2860b4a3bfcec5bdce7b0ebd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDMzNDc5OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNzowMjo0N1rOGh-UNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODowOTo0OVrOGiS8yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NzE3NA==", "bodyText": "Could we move this to the changes?  We're not going to backport it.", "url": "https://github.com/crate/crate/pull/10070#discussion_r438277174", "createdAt": "2020-06-10T17:02:47Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -218,4 +218,6 @@ Performance improvements\n Fixes\n =====\n \n-None\n+- Fixed arithmetics containing a non-floating numeric column type and a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be67de2d065da8c9639a2b59e4a92960857f6b1a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYxNTI0MA==", "bodyText": "\ud83d\udc4d Done via #10073.", "url": "https://github.com/crate/crate/pull/10070#discussion_r438615240", "createdAt": "2020-06-11T08:09:49Z", "author": {"login": "seut"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -218,4 +218,6 @@ Performance improvements\n Fixes\n =====\n \n-None\n+- Fixed arithmetics containing a non-floating numeric column type and a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI3NzE3NA=="}, "originalCommit": {"oid": "be67de2d065da8c9639a2b59e4a92960857f6b1a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1400, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}