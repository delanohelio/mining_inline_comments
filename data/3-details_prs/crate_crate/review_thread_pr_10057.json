{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwOTk4MTkw", "number": 10057, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozNzo0NFrOESsKRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozOToxMVrOESsMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDMzMzUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/GeneratedColumnExpander.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozNzo0NFrOG4AXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoxNDowNlrOG4BoCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3OTQ0MA==", "bodyText": "This always creates the new ArrayList even if it's not required.", "url": "https://github.com/crate/crate/pull/10057#discussion_r461379440", "createdAt": "2020-07-28T07:37:44Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/GeneratedColumnExpander.java", "diffHunk": "@@ -152,7 +149,8 @@ public Symbol visitFunction(Function function, Context context) {\n \n \n         private Symbol addComparison(Function function, Reference reference, Symbol comparedAgainst, Context context) {\n-            Collection<GeneratedReference> genColInfos = context.referencedRefsToGeneratedColumn.get(reference);\n+            ArrayList<GeneratedReference> genColInfos = context.referencedRefsToGeneratedColumn\n+                .getOrDefault(reference, new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0dd2982502f6b681b038292d582506f40d4f98f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwMDA3NQ==", "bodyText": "i probably could change ArrayList<GeneratedReference> to List<..> and then use List.of() in getOrDefault, but computeIfAbsent should be ok as well, not sure what is better", "url": "https://github.com/crate/crate/pull/10057#discussion_r461400075", "createdAt": "2020-07-28T08:14:06Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/analyze/GeneratedColumnExpander.java", "diffHunk": "@@ -152,7 +149,8 @@ public Symbol visitFunction(Function function, Context context) {\n \n \n         private Symbol addComparison(Function function, Reference reference, Symbol comparedAgainst, Context context) {\n-            Collection<GeneratedReference> genColInfos = context.referencedRefsToGeneratedColumn.get(reference);\n+            ArrayList<GeneratedReference> genColInfos = context.referencedRefsToGeneratedColumn\n+                .getOrDefault(reference, new ArrayList<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3OTQ0MA=="}, "originalCommit": {"oid": "c0dd2982502f6b681b038292d582506f40d4f98f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDMzODM1OnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/crate/metadata/doc/DocIndexMetadata.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozOToxMVrOG4AaaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozOToxMVrOG4AaaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MDIwMA==", "bodyText": "I think we could extend the MapBuilder with a putAll and keep this as it was before.", "url": "https://github.com/crate/crate/pull/10057#discussion_r461380200", "createdAt": "2020-07-28T07:39:11Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/doc/DocIndexMetadata.java", "diffHunk": "@@ -692,21 +692,26 @@ public Settings tableParameters() {\n                 || (columnDataType.id() == ArrayType.ID\n                     && ((ArrayType) columnDataType).innerType().id() == ObjectType.ID)) {\n                 if (columnProperties.get(\"properties\") != null) {\n-                    builder.putAll(getAnalyzers(newIdent, (Map<String, Object>) columnProperties.get(\"properties\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0dd2982502f6b681b038292d582506f40d4f98f"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1376, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}