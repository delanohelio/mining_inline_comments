{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NzIyNzkw", "number": 10355, "title": "Introduce new error handling for http/psql client", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis introduces a (hopefully) simpler way to handle error responses to the psql and http client. The classes PGError and HttpError will map exceptions to error responses for each client and replaceSQLActionException.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-08-12T12:05:44Z", "url": "https://github.com/crate/crate/pull/10355", "merged": true, "mergeCommit": {"oid": "88d4b1d16eb33d3e6988ec4870679ee31eac0533"}, "closed": true, "closedAt": "2020-08-14T13:10:13Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-KkgrgBqjM2NDc0MzM1NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-z0pbgBqjM2NTYwNDg5NjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32837e9a9bd12e24d12ce95ccd098a34bc21e4fe", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/32837e9a9bd12e24d12ce95ccd098a34bc21e4fe", "committedDate": "2020-08-12T12:22:34Z", "message": "Remove SqlActionException"}, "afterCommit": {"oid": "db2704511605149fe9a96f4d7b507bda25d73680", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/db2704511605149fe9a96f4d7b507bda25d73680", "committedDate": "2020-08-12T12:27:41Z", "message": "Remove SqlActionException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6639b0388f5890b914648d968fd6b24b588c7579", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/6639b0388f5890b914648d968fd6b24b588c7579", "committedDate": "2020-08-12T15:17:26Z", "message": "fix all tests"}, "afterCommit": {"oid": "b55d5acc9f5379dec7ebe71931938be1abba16de", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/b55d5acc9f5379dec7ebe71931938be1abba16de", "committedDate": "2020-08-12T15:18:31Z", "message": "fix all tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b17658ef61db6866366034cee168432667be951c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/b17658ef61db6866366034cee168432667be951c", "committedDate": "2020-08-12T15:35:24Z", "message": "Add JdkDownloadPluginFunctionalTest back"}, "afterCommit": {"oid": "d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "committedDate": "2020-08-12T16:01:58Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/d938757182fc9d3a238f7e8c98bd4202a3d45d8c", "committedDate": "2020-08-12T16:01:58Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}, "afterCommit": {"oid": "461cb099051a575c96c33934f6807097e2b04d93", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/461cb099051a575c96c33934f6807097e2b04d93", "committedDate": "2020-08-12T16:02:59Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96ae8212df760042586b3abd32958165b8ce7c5d", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/96ae8212df760042586b3abd32958165b8ce7c5d", "committedDate": "2020-08-12T16:06:28Z", "message": "Fix"}, "afterCommit": {"oid": "a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "committedDate": "2020-08-12T16:08:47Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a2cdd32527c8e13e5b1f7947b63b6fd2738f998e", "committedDate": "2020-08-12T16:08:47Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}, "afterCommit": {"oid": "c0a43d6bdb34baac2d871678b0977b0df4806ab5", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c0a43d6bdb34baac2d871678b0977b0df4806ab5", "committedDate": "2020-08-12T16:10:13Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces custom error handling with PGError and HttpError\nfor the clients and removes SQLActionException."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDcyNzUx", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-466072751", "createdAt": "2020-08-12T16:17:32Z", "commit": {"oid": "c0a43d6bdb34baac2d871678b0977b0df4806ab5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNzozMlrOG_owGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNzozMlrOG_owGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MTE0Nw==", "bodyText": "Error code 4040 does not exist in the crate documentation, i assume 4041 Relationship unknown is the one we want here. https://crate.io/docs/crate/reference/en/4.2/interfaces/http.html", "url": "https://github.com/crate/crate/pull/10355#discussion_r469381147", "createdAt": "2020-08-12T16:17:32Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/integrationtests/ViewsITest.java", "diffHunk": "@@ -170,7 +170,7 @@ public void testDropViewFailsIfViewIsMissing() {\n                      isSQLError(containsString(\"Relations not found: \" + sqlExecutor.getCurrentSchema() + \".v1\"),\n                                 INTERNAL_ERROR,\n                                 NOT_FOUND,\n-                                4040));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0a43d6bdb34baac2d871678b0977b0df4806ab5"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e6ee2dcfe541432565e3b1afd326a6c7ac01493", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7e6ee2dcfe541432565e3b1afd326a6c7ac01493", "committedDate": "2020-08-13T11:14:59Z", "message": "Migrate itest"}, "afterCommit": {"oid": "c82fd5b04b3dd358e7eb7416776bac723db226ed", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c82fd5b04b3dd358e7eb7416776bac723db226ed", "committedDate": "2020-08-13T12:02:54Z", "message": "Fix last test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f73cb9419e1e9b3b892897df2c0efffe86a07352", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/f73cb9419e1e9b3b892897df2c0efffe86a07352", "committedDate": "2020-08-13T12:03:46Z", "message": "Fix"}, "afterCommit": {"oid": "7a720d64723d6d6c4fb97d21bf6f468638e0d989", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7a720d64723d6d6c4fb97d21bf6f468638e0d989", "committedDate": "2020-08-13T12:10:26Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a720d64723d6d6c4fb97d21bf6f468638e0d989", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7a720d64723d6d6c4fb97d21bf6f468638e0d989", "committedDate": "2020-08-13T12:10:26Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage."}, "afterCommit": {"oid": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd", "committedDate": "2020-08-13T12:12:53Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzA1MjU0", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-466705254", "createdAt": "2020-08-13T12:17:52Z", "commit": {"oid": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoxNzo1MlrOHAI6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoxNzo1MlrOHAI6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwNzk3Mg==", "bodyText": "InvalidRequest was only introduced to handle this case here, is there a simpler way to do this ?", "url": "https://github.com/crate/crate/pull/10355#discussion_r469907972", "createdAt": "2020-08-13T12:17:52Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java", "diffHunk": "@@ -199,8 +202,8 @@ private void sendResponse(Session session,\n         List<Object> args = parseContext.args();\n         List<List<Object>> bulkArgs = parseContext.bulkArgs();\n         if (bothProvided(args, bulkArgs)) {\n-            return CompletableFuture.failedFuture(new SQLActionException(\n-                \"request body contains args and bulk_args. It's forbidden to provide both\", 4000, HttpResponseStatus.BAD_REQUEST));\n+            return CompletableFuture.failedFuture(new InvalidRequest(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1360ac116252d1f41f7532094aad9aad653fbfdb", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/1360ac116252d1f41f7532094aad9aad653fbfdb", "committedDate": "2020-08-13T12:30:53Z", "message": "Fix"}, "afterCommit": {"oid": "6fbec0e106c3736f40c9666a055d1e2d007c84be", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/6fbec0e106c3736f40c9666a055d1e2d007c84be", "committedDate": "2020-08-13T12:32:10Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fbec0e106c3736f40c9666a055d1e2d007c84be", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/6fbec0e106c3736f40c9666a055d1e2d007c84be", "committedDate": "2020-08-13T12:32:10Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally from the clients error\nmessage."}, "afterCommit": {"oid": "a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "committedDate": "2020-08-13T12:32:50Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a6fd6c3cd301217b829cfa483cdcdd5b753c66ff", "committedDate": "2020-08-13T12:32:50Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}, "afterCommit": {"oid": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "committedDate": "2020-08-13T12:40:45Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549", "committedDate": "2020-08-13T12:40:45Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}, "afterCommit": {"oid": "4188158b96335b755cda9357f27d87bf39171132", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/4188158b96335b755cda9357f27d87bf39171132", "committedDate": "2020-08-13T13:40:22Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzcwMDcy", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-466770072", "createdAt": "2020-08-13T13:39:09Z", "commit": {"oid": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozOTowOVrOHAL9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0ODowNVrOHAMWLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1ODA4Mw==", "bodyText": "We currently don't consider error messages to be stable, so I think this could be moved to the changes section instead of the breaking changes section.", "url": "https://github.com/crate/crate/pull/10355#discussion_r469958083", "createdAt": "2020-08-13T13:39:09Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -42,6 +42,10 @@ Unreleased Changes\n Breaking Changes\n ================\n \n+- Changed the error handling so it returns the error message and the related", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d5f848d88ef674f0e7bd0ce1db8ab3f8b801549"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MDI4Ng==", "bodyText": "handle is a bit generic and there is no hint how it is handling the exception. Maybe this could also be called forWireTransmission ? Or we rename all 3 methods to prepareForClientTransmission or something like that?", "url": "https://github.com/crate/crate/pull/10355#discussion_r469960286", "createdAt": "2020-08-13T13:42:23Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/exceptions/SQLExceptions.java", "diffHunk": "@@ -111,81 +106,28 @@ public static boolean isShardFailure(Throwable e) {\n     }\n \n     public static Function<Throwable, Exception> forWireTransmission(AccessControl accessControl) {\n-        return e -> createSQLActionException(e, accessControl::ensureMaySee);\n+        return e -> handleException(e, accessControl::ensureMaySee);\n     }\n \n-    public static SQLActionException forWireTransmission(AccessControl accessControl, Throwable e) {\n-        return createSQLActionException(e, accessControl::ensureMaySee);\n+    public static RuntimeException forWireTransmission(AccessControl accessControl, Throwable e) {\n+        return handleException(e, accessControl::ensureMaySee);\n     }\n \n-    /**\n-     * Create a {@link SQLActionException} out of a {@link Throwable}.\n-     * If concrete {@link ElasticsearchException} is found, first transform it\n-     * to a {@link CrateException}\n-     */\n-    public static SQLActionException createSQLActionException(Throwable e, Consumer<Throwable> maskSensitiveInformation) {\n-        // ideally this method would be a static factory method in SQLActionException,\n-        // but that would pull too many dependencies for the client\n-\n-        if (e instanceof SQLActionException) {\n-            return (SQLActionException) e;\n-        }\n+    public static RuntimeException handleException(Throwable e, @Nullable Consumer<Throwable> maskSensitiveInformation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4188158b96335b755cda9357f27d87bf39171132"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTIyMA==", "bodyText": "Either the argument should be annotated with Nullable or this check is not needed. (In which case the PGError.fromThrowable(..) call earlier may be strange as well?", "url": "https://github.com/crate/crate/pull/10355#discussion_r469961220", "createdAt": "2020-08-13T13:43:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/protocols/postgres/Messages.java", "diffHunk": "@@ -179,40 +173,34 @@ static void sendParameterStatus(Channel channel, final String name, final String\n     static void sendAuthenticationError(Channel channel, String message) {\n         LOGGER.warn(message);\n         byte[] msg = message.getBytes(StandardCharsets.UTF_8);\n-        sendErrorResponse(channel, message, msg, SEVERITY_FATAL, null, null,\n-            METHOD_NAME_CLIENT_AUTH, ERROR_CODE_INVALID_AUTHORIZATION_SPECIFICATION);\n+        byte[] errorCode = PGErrorStatus.INVALID_AUTHORIZATION_SPECIFICATION.code().getBytes(StandardCharsets.UTF_8);\n+\n+        sendErrorResponse(channel, message, msg, PGError.SEVERITY_FATAL, null, null,\n+                          METHOD_NAME_CLIENT_AUTH, errorCode);\n     }\n \n     static ChannelFuture sendErrorResponse(Channel channel, Throwable throwable) {\n-        final String message = SQLExceptions.messageOf(throwable);\n-        byte[] msg = message.getBytes(StandardCharsets.UTF_8);\n+        var error = PGError.fromThrowable(throwable);\n+        byte[] msg = error.message().getBytes(StandardCharsets.UTF_8);\n+        byte[] errorCode = error.status().code().getBytes(StandardCharsets.UTF_8);\n         byte[] lineNumber = null;\n         byte[] fileName = null;\n         byte[] methodName = null;\n \n-        StackTraceElement[] stackTrace = throwable.getStackTrace();\n-        if (stackTrace != null && stackTrace.length > 0) {\n-            StackTraceElement stackTraceElement = stackTrace[0];\n-            lineNumber = String.valueOf(stackTraceElement.getLineNumber()).getBytes(StandardCharsets.UTF_8);\n-            if (stackTraceElement.getFileName() != null) {\n-                fileName = stackTraceElement.getFileName().getBytes(StandardCharsets.UTF_8);\n-            }\n-            if (stackTraceElement.getMethodName() != null) {\n-                methodName = stackTraceElement.getMethodName().getBytes(StandardCharsets.UTF_8);\n+        if (throwable != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4188158b96335b755cda9357f27d87bf39171132"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2Mjc2Mw==", "bodyText": "Wouldn't the logic from\nhttps://github.com/crate/crate/pull/10355/files#diff-d29c0eca9190fb553abe986177c7c87cR224\nalso make sense here?", "url": "https://github.com/crate/crate/pull/10355#discussion_r469962763", "createdAt": "2020-08-13T13:45:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/protocols/postgres/PGError.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres;\n+\n+import io.crate.exceptions.SQLExceptions;\n+\n+import javax.annotation.Nullable;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class PGError {\n+\n+    public static final byte[] SEVERITY_FATAL = \"FATAL\".getBytes(StandardCharsets.UTF_8);\n+    public static final byte[] SEVERITY_ERROR = \"ERROR\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final PGErrorStatus status;\n+    private final String message;\n+\n+    @Nullable\n+    private final Throwable throwable;\n+\n+    public PGError(PGErrorStatus status, String message, @Nullable Throwable throwable) {\n+        this.status = status;\n+        this.message = message;\n+        this.throwable = throwable;\n+\n+    }\n+\n+    public PGErrorStatus status() {\n+        return status;\n+    }\n+\n+    @Nullable\n+    public Throwable throwable() {\n+        return throwable;\n+    }\n+\n+    public String message() {\n+        return message;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PGError{\" +\n+               \"status=\" + status +\n+               \", message='\" + message + '\\'' +\n+               \", throwable=\" + throwable +\n+               '}';\n+    }\n+\n+    public static PGError fromThrowable(Throwable throwable) {\n+        var status = PGErrorStatus.INTERNAL_ERROR;\n+        if (throwable instanceof IllegalArgumentException || throwable instanceof UnsupportedOperationException) {\n+            status = PGErrorStatus.FEATURE_NOT_SUPPORTED;\n+        }\n+        return new PGError(status, SQLExceptions.messageOf(throwable), throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4188158b96335b755cda9357f27d87bf39171132"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MzgwNg==", "bodyText": "Do we use the message from here?\nLooks like we have 2 sources of messages, once from the exception and once from the definition here. I think we should stick to the one from the exception and only add/annotate the response status and error code", "url": "https://github.com/crate/crate/pull/10355#discussion_r469963806", "createdAt": "2020-08-13T13:47:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/rest/action/HttpErrorStatus.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.rest.action;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+public enum HttpErrorStatus {\n+\n+    STATEMENT_INVALID_OR_UNSUPPORTED_SYNTAX(HttpResponseStatus.BAD_REQUEST, 4000, \"The statement contains an invalid syntax or unsupported SQL statement\"),\n+    STATEMENT_INVALID_ANALYZER_DEFINITION(HttpResponseStatus.BAD_REQUEST, 4001, \"The statement contains an invalid analyzer definition.\"),\n+    RELATION_INVALID_NAME(HttpResponseStatus.BAD_REQUEST, 4002, \"The name of the relation is invalid\"),\n+    FIELD_VALIDATION_FAILED(HttpResponseStatus.BAD_REQUEST,4003, \"Field type validation failed\"),\n+    POSSIBLE_FEATURE_NOT_SUPPROTED_YET(HttpResponseStatus.BAD_REQUEST,4004, \"Possible feature not supported (yet)\"),\n+    ALTER_TABLE_USING_ALIAS_NOT_SUPPORTED(HttpResponseStatus.BAD_REQUEST, 4005, \"Alter table using a table alias is not supported.\"),\n+    COLUMN_ALIAS_IS_AMBIGUOUS(HttpResponseStatus.BAD_REQUEST, 4006, \"The used column alias is ambiguous.\"),\n+    RELATION_OPERATION_NOT_SUPPORTED(HttpResponseStatus.BAD_REQUEST,4007, \"The operation is not supported on this relation, as it is not accessible\"),\n+    COLUMN_NAME_INVALID(HttpResponseStatus.BAD_REQUEST,4008, \"The name of the column is invalid\"),\n+    LICENSE_EXPIRED(HttpResponseStatus.BAD_REQUEST,4009, \"CrateDB License is expired\"),\n+    USER_NOT_AUTHORIZED_TO_PERFORM_STATEMENT(HttpResponseStatus.UNAUTHORIZED, 4010, \"User is not authorized to perform the SQL statement\"),\n+    MISSING_USER_PRIVILEGES(HttpResponseStatus.UNAUTHORIZED, 4011, \"Missing privilege for user\"),\n+    ONLY_READ_OPERATION_ALLOWED_ON_THIS_NODE(HttpResponseStatus.FORBIDDEN, 4031, \"Only read operations are allowed on this node\"),\n+    RELATION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4041, \"Unknown Relation\"),\n+    ANALYZER_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4042, \"Unknown Analyzer\"),\n+    COLUMN_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4043, \"Unknown Column\"),\n+    TYPE_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4044, \"Unknown Type\"),\n+    SCHEMA_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4045, \"Unknown Schema\"),\n+    PARTITION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4046, \"Unknown Partition\"),\n+    REPOSITORY_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4047, \"Unknown Repository\"),\n+    SNAPSHOT_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4048, \"Unknown Snapshot\"),\n+    USER_DEFINED_FUNCTION_UNKNOWN(HttpResponseStatus.NOT_FOUND, 4049, \"Unknown user-defined function\"),\n+    USER_UNKNOWN(HttpResponseStatus.NOT_FOUND, 40410, \"Unknown user\"),\n+    DOCUMENT_WITH_THE_SAME_PRIMARY_KEY_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4091, \"A document with the same primary key exists already\"),\n+    VERSION_CONFLICT(HttpResponseStatus.CONFLICT,4092, \"A VersionConflict. Might be thrown if an attempt was made to update the same document concurrently\"),\n+    RELATION_WITH_THE_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4093, \"A relation with the same name exists already\"),\n+    TABLE_ALIAS_CONTAINS_TABLES_WITH_DIFFERENT_SCHEMA(HttpResponseStatus.CONFLICT,4094, \"The used table alias contains tables with different schema\"),\n+    REPOSITORY_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4095, \"A repository with the same name exists already\"),\n+    SNAPSHOT_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4096, \"A snapshot with the same name already exists in the repository\"),\n+    PARTITION_FOR_THE_SAME_VALUE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4097, \"A partition for the same values already exists in this table\"),\n+    USER_DEFINED_FUNCTION_WITH_SAME_SIGNATURE_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4098, \"A user-defined function with the same signature already exists\"),\n+    USER_WITH_SAME_NAME_EXISTS_ALREADY(HttpResponseStatus.CONFLICT,4099, \"A user with the same name already exists\"),\n+    UNHANDLED_SERVER_ERROR(HttpResponseStatus.INTERNAL_SERVER_ERROR, 5000, \"Unhandled server error\"),\n+    EXECUTION_OF_TASK_FAILED(HttpResponseStatus.INTERNAL_SERVER_ERROR,5001, \"The execution of one or more tasks failed\"),\n+    ONE_OR_MORE_SHARDS_NOT_AVAILABLE(HttpResponseStatus.INTERNAL_SERVER_ERROR,5002, \"One or more shards are not available\"),\n+    QUERY_FAILED_ON_ONE_OR_MORE_SHARDS(HttpResponseStatus.INTERNAL_SERVER_ERROR,5003, \"The query failed on one or more shards\"),\n+    CREATING_SNAPSHOT_FAILED(HttpResponseStatus.INTERNAL_SERVER_ERROR,5004, \"Creating a snapshot failed\"),\n+    QUERY_KILLED_BY_STATEMENT(HttpResponseStatus.INTERNAL_SERVER_ERROR, 5030, \"The query was killed by a kill statement\");\n+\n+    private final HttpResponseStatus httpResponseStatus;\n+    private final int errorCode;\n+    private final String message;\n+\n+    HttpErrorStatus(HttpResponseStatus httpResponseStatus, int erroCode, String message) {\n+        this.httpResponseStatus = httpResponseStatus;\n+        this.errorCode = erroCode;\n+        this.message = message;\n+    }\n+\n+    public HttpResponseStatus httpResponseStatus() {\n+        return httpResponseStatus;\n+    }\n+\n+    public int errorCode() {\n+        return errorCode;\n+    }\n+\n+    public String message() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4188158b96335b755cda9357f27d87bf39171132"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NDMzMw==", "bodyText": "IllegalArgumentException wouldn't fit?", "url": "https://github.com/crate/crate/pull/10355#discussion_r469964333", "createdAt": "2020-08-13T13:48:05Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/rest/action/SqlHttpHandler.java", "diffHunk": "@@ -199,8 +202,8 @@ private void sendResponse(Session session,\n         List<Object> args = parseContext.args();\n         List<List<Object>> bulkArgs = parseContext.bulkArgs();\n         if (bothProvided(args, bulkArgs)) {\n-            return CompletableFuture.failedFuture(new SQLActionException(\n-                \"request body contains args and bulk_args. It's forbidden to provide both\", 4000, HttpResponseStatus.BAD_REQUEST));\n+            return CompletableFuture.failedFuture(new InvalidRequest(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwNzk3Mg=="}, "originalCommit": {"oid": "e1a6ad4c2c5e207c8359292d7dc57337ad4c65cd"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a518d2ba721021bb4ebbd09876a23bb967d0c24", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5a518d2ba721021bb4ebbd09876a23bb967d0c24", "committedDate": "2020-08-13T14:57:15Z", "message": "Update changes file"}, "afterCommit": {"oid": "a1596d2472f807954f37c7073bdd332c8e41c87d", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a1596d2472f807954f37c7073bdd332c8e41c87d", "committedDate": "2020-08-13T15:01:55Z", "message": "Update changes file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODY4NjYy", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-466868662", "createdAt": "2020-08-13T15:22:32Z", "commit": {"oid": "e5a025635316373a5af03472713c858b3dcc0382"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjozMlrOHAQlGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjozMlrOHAQlGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzY5MA==", "bodyText": "message will never be null here because of how messageOf is implemented.\nMaybe it would be an option to integrate the strack-trace element logic into messageOf?, not sure what else would be affected by that.", "url": "https://github.com/crate/crate/pull/10355#discussion_r470033690", "createdAt": "2020-08-13T15:22:32Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/protocols/postgres/PGError.java", "diffHunk": "@@ -74,6 +76,21 @@ public static PGError fromThrowable(Throwable throwable) {\n         if (throwable instanceof IllegalArgumentException || throwable instanceof UnsupportedOperationException) {\n             status = PGErrorStatus.FEATURE_NOT_SUPPORTED;\n         }\n-        return new PGError(status, SQLExceptions.messageOf(throwable), throwable);\n+        String message = SQLExceptions.messageOf(throwable);\n+        if (message == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a025635316373a5af03472713c858b3dcc0382"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzczNTE2", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-467373516", "createdAt": "2020-08-14T07:49:27Z", "commit": {"oid": "adae411e6fbf21af3d78cfd3d4a36ce42cc41462"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0OToyN1rOHAq97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzo0OToyN1rOHAq97Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjAyOQ==", "bodyText": "This provides a message in the following format (take from a broken test):\nRelationUnknown 'Relation 'sys.nodes' unknown' thrown at io.crate.analyze.relations.FullQualifiedNameFieldProvider.resolveField(FullQualifiedNameFieldProvider.java:113)'\n\nThe only downside here is that the position could change based on the code, so for unit testing, we could either go with startsWith matching, or provide a message for testing without this additional information. The tests need to be adapted, which i will do once we finalise the error message.", "url": "https://github.com/crate/crate/pull/10355#discussion_r470466029", "createdAt": "2020-08-14T07:49:27Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/exceptions/SQLExceptions.java", "diffHunk": "@@ -91,6 +92,22 @@ public static Throwable unwrap(@Nonnull Throwable t) {\n         return unwrap(t, null);\n     }\n \n+    public static String detailedMessageOf(@Nullable Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adae411e6fbf21af3d78cfd3d4a36ce42cc41462"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32a7a234b42517426c81e6dc278799c87a0627e7", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/32a7a234b42517426c81e6dc278799c87a0627e7", "committedDate": "2020-08-14T08:06:43Z", "message": "Fix null case"}, "afterCommit": {"oid": "8e360bdef5129761599039e149cf662b975424b0", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8e360bdef5129761599039e149cf662b975424b0", "committedDate": "2020-08-14T08:07:50Z", "message": "Provide better error message"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e360bdef5129761599039e149cf662b975424b0", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8e360bdef5129761599039e149cf662b975424b0", "committedDate": "2020-08-14T08:07:50Z", "message": "Provide better error message"}, "afterCommit": {"oid": "4f3ac8cdc05e0a26368a18307ce738012116f041", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/4f3ac8cdc05e0a26368a18307ce738012116f041", "committedDate": "2020-08-14T08:09:49Z", "message": "Provide better error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NTI1MzI1", "url": "https://github.com/crate/crate/pull/10355#pullrequestreview-467525325", "createdAt": "2020-08-14T12:11:12Z", "commit": {"oid": "5b0b3d0bd05af043e2bb95b3551c61b3d39dcdd6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b0b3d0bd05af043e2bb95b3551c61b3d39dcdd6", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5b0b3d0bd05af043e2bb95b3551c61b3d39dcdd6", "committedDate": "2020-08-14T09:26:22Z", "message": "Fix formatting"}, "afterCommit": {"oid": "074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "committedDate": "2020-08-14T12:21:26Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c2c5c439c7e8202c009d40c53040e6419c4740", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/37c2c5c439c7e8202c009d40c53040e6419c4740", "committedDate": "2020-08-14T12:31:45Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/074caed9dc56ee2a55b949f51ccd81adf66e1ce4", "committedDate": "2020-08-14T12:21:26Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}, "afterCommit": {"oid": "37c2c5c439c7e8202c009d40c53040e6419c4740", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/37c2c5c439c7e8202c009d40c53040e6419c4740", "committedDate": "2020-08-14T12:31:45Z", "message": "Introduce custom Error Handling for http and psql\n\nThis introduces specific error handling for the http/psql client\nand removes SQLActionException internally and from the clients\nerror message."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3118, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}