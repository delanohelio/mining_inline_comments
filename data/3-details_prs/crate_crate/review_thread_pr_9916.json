{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyODQyMzYy", "number": 9916, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0Njo0NlrOD4_vpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTozMzowOFrOD5dT_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDkxMjM2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0Njo0NlrOGQBGSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0Njo0NlrOGQBGSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0ODM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static DataType<?> safeOfName(String typeName) {\n          \n          \n            \n                public static DataType<?> ofNameOrNull(String typeName) {\n          \n      \n    \n    \n  \n\nIn other places safe is used to indicate that an error is thrown if the name doesn't exist. E.g indexServiceSafe. I'd use a different name to not overload the same expression for two different purposes - that would confuse readers.", "url": "https://github.com/crate/crate/pull/9916#discussion_r419448392", "createdAt": "2020-05-04T13:46:46Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -343,14 +343,19 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"timestamp\", TIMESTAMPZ),\n         entry(\"interval\", INTERVAL));\n \n-    public static DataType ofName(String name) {\n-        DataType dataType = TYPES_BY_NAME_OR_ALIAS.get(name);\n+    public static DataType<?> ofName(String typeName) {\n+        DataType<?> dataType = safeOfName(typeName);\n         if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + name);\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n         }\n         return dataType;\n     }\n \n+    @Nullable\n+    public static DataType<?> safeOfName(String typeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDkyMDUwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0ODoyM1rOGQBK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDozOTo0MVrOGQDd4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg==", "bodyText": "Could this be moved to the SignatureBindingInfo, or do we need this always available?", "url": "https://github.com/crate/crate/pull/9916#discussion_r419449572", "createdAt": "2020-05-04T13:48:23Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1OTA1Nw==", "bodyText": "SignatureBindingInfo is not serializable, see \n  \n    \n      crate/sql/src/main/java/io/crate/metadata/functions/SignatureBindingInfo.java\n    \n    \n        Lines 29 to 33\n      in\n      280cb15\n    \n    \n    \n    \n\n        \n          \n           /** \n        \n\n        \n          \n            * Containing {@link Signature} properties which are only required for signature binding/matching. \n        \n\n        \n          \n            * It won't be streamed and all properties won't be taken into account when resolving a function by signature. \n        \n\n        \n          \n            */ \n        \n\n        \n          \n           public class SignatureBindingInfo { \n        \n    \n  \n\n. Therefore, signature#getSignatureBindingInfo can retrun null.\nI thought of serializing SignatureBindingInfo, but then it appeared that we just need variableArity to fill some fields of the pg_proc, therefore, I've serialized it with a signature object.", "url": "https://github.com/crate/crate/pull/9916#discussion_r419459057", "createdAt": "2020-05-04T14:01:33Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3OTg4NQ==", "bodyText": "I thought of serializing SignatureBindingInfo, but then it appeared that we just need variableArity to fill some fields of the pg_proc, therefore, I've serialized it with a signature object.\n\nSignatureBindingInfo was created to avoid streaming of information which is only needed for binding/matching of signatured but not needed for resolving a signature to an impl directly against the registry.\nInside the registry, signature#getSignatureBindingInfo is never null.", "url": "https://github.com/crate/crate/pull/9916#discussion_r419479885", "createdAt": "2020-05-04T14:29:55Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4MjI3Mw==", "bodyText": "To clarify more, variableArity should never be streamed. Can you please elaborate why you've added streaming support for it?", "url": "https://github.com/crate/crate/pull/9916#discussion_r419482273", "createdAt": "2020-05-04T14:33:11Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4NzIwMw==", "bodyText": "I'll remove that. I thought, that it won't be always possible to use Sigmature#getBindingInfo to get variableArity in order to populate the pg_proc table.", "url": "https://github.com/crate/crate/pull/9916#discussion_r419487203", "createdAt": "2020-05-04T14:39:41Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -308,6 +312,10 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n+    public boolean variableArity() {\n+        return variableArity;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0OTU3Mg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDkyODk4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo1MDowNFrOGQBPxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowMDoxOVrOGQieFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg==", "bodyText": "Can you add a reference to where this is coming from?\nWould also rename such as to Because typalign of any is integer", "url": "https://github.com/crate/crate/pull/9916#discussion_r419450822", "createdAt": "2020-05-04T13:50:04Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AnyType extends PGType<Integer> {\n+    // we represent the any type as integer,\n+    // such as the typalign of any is integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MjQ1Nw==", "bodyText": "Could it be that the int that is streamed as part of any is the oid of the actual type, and that any is some kind of \"lazy\" / deferred type?", "url": "https://github.com/crate/crate/pull/9916#discussion_r419452457", "createdAt": "2020-05-04T13:52:22Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AnyType extends PGType<Integer> {\n+    // we represent the any type as integer,\n+    // such as the typalign of any is integer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDU4OQ==", "bodyText": "I'll check that.\nI couldn't find anything so far in the documentation, I just inferred it from the typalign of the PostgreSQL any type.", "url": "https://github.com/crate/crate/pull/9916#discussion_r419460589", "createdAt": "2020-05-04T14:03:49Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AnyType extends PGType<Integer> {\n+    // we represent the any type as integer,\n+    // such as the typalign of any is integer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NTE1OA==", "bodyText": "Yes, it seems that the type of these pseudotypes is defined by a data type that is passed to it later on. See, https://www.postgresql.org/docs/10/extend-type-system.html", "url": "https://github.com/crate/crate/pull/9916#discussion_r419995158", "createdAt": "2020-05-05T10:00:19Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/AnyType.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AnyType extends PGType<Integer> {\n+    // we represent the any type as integer,\n+    // such as the typalign of any is integer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1MDgyMg=="}, "originalCommit": {"oid": "c2eeceae6504b979d47edd196da836e27526a050"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDcwNTk0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/metadata/functions/SignatureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxODowN1rOGQk15Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxODowN1rOGQk15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNDAyMQ==", "bodyText": "this can be removed", "url": "https://github.com/crate/crate/pull/9916#discussion_r420034021", "createdAt": "2020-05-05T11:18:07Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/metadata/functions/SignatureTest.java", "diffHunk": "@@ -47,6 +47,7 @@ public void test_streaming_of_signature_and_type_signatures() throws Exception {\n         var signature = Signature.builder()\n             .name(\"foo\")\n             .kind(FunctionInfo.Type.SCALAR)\n+            .setVariableArity(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b471a12148686363bdcaf93a1e34225e19d0f55d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDcxMTM3OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToxOTo1NFrOGQk5Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMToyNjo0MFrOGQlFFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNDg2Mg==", "bodyText": "in PostgreSQL this is anyarray. why is it _any? this is not very expressive ;)", "url": "https://github.com/crate/crate/pull/9916#discussion_r420034862", "createdAt": "2020-05-05T11:19:54Z", "author": {"login": "seut"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -190,9 +190,11 @@ table available in CrateDB::\n     | 1186 | interval                     |     1187 |       0 |     16 | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | A           |\n     | 2249 | record                       |     2287 |       0 |     -1 | P           |\n+    | 2276 | any                          |        0 |       0 |      4 | P           |\n+    | 2277 | _any                         |        0 |    2276 |     -1 | A           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b471a12148686363bdcaf93a1e34225e19d0f55d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNzkxMQ==", "bodyText": "right, will adjust it. I am wondering why other array types represented as _type and the array of any type as anyarray. maybe it is a special case ..", "url": "https://github.com/crate/crate/pull/9916#discussion_r420037911", "createdAt": "2020-05-05T11:26:40Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -190,9 +190,11 @@ table available in CrateDB::\n     | 1186 | interval                     |     1187 |       0 |     16 | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | A           |\n     | 2249 | record                       |     2287 |       0 |     -1 | P           |\n+    | 2276 | any                          |        0 |       0 |      4 | P           |\n+    | 2277 | _any                         |        0 |    2276 |     -1 | A           |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAzNDg2Mg=="}, "originalCommit": {"oid": "b471a12148686363bdcaf93a1e34225e19d0f55d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTc1Njc4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTozMzowOFrOGQvIIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTozMzowOFrOGQvIIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIwMjUyOQ==", "bodyText": "Could use .get instead of .getOrDefault", "url": "https://github.com/crate/crate/pull/9916#discussion_r420202529", "createdAt": "2020-05-05T15:33:08Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -343,14 +343,19 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"timestamp\", TIMESTAMPZ),\n         entry(\"interval\", INTERVAL));\n \n-    public static DataType ofName(String name) {\n-        DataType dataType = TYPES_BY_NAME_OR_ALIAS.get(name);\n+    public static DataType<?> ofName(String typeName) {\n+        DataType<?> dataType = ofNameOrNull(typeName);\n         if (dataType == null) {\n-            throw new IllegalArgumentException(\"Cannot find data type: \" + name);\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n         }\n         return dataType;\n     }\n \n+    @Nullable\n+    public static DataType<?> ofNameOrNull(String typeName) {\n+        return TYPES_BY_NAME_OR_ALIAS.getOrDefault(typeName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf40689ab1bf6b99bee6805957affbc0c1e909b"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1456, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}