{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjE4NzEw", "number": 10033, "title": "Insert into support for `varchar(length)`", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-02T14:21:10Z", "url": "https://github.com/crate/crate/pull/10033", "merged": true, "mergeCommit": {"oid": "a3e3be50f1df0831024ff508cc053c76fcaf5e6b"}, "closed": true, "closedAt": "2020-06-04T09:42:21Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnWCeygBqjMzOTgwNTE4MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn6Fu2gBqjM0MDU3OTI0NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3a5359cb00b20d529f7a9aee817b43b2d0f9a49", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d3a5359cb00b20d529f7a9aee817b43b2d0f9a49", "committedDate": "2020-06-02T14:18:52Z", "message": "Support text type with length for insert from values and query."}, "afterCommit": {"oid": "6dc7305cfe6b95610bdd50254183cb641ea6450b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6dc7305cfe6b95610bdd50254183cb641ea6450b", "committedDate": "2020-06-02T14:49:22Z", "message": "Support text type with length for insert from values and query."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dc7305cfe6b95610bdd50254183cb641ea6450b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6dc7305cfe6b95610bdd50254183cb641ea6450b", "committedDate": "2020-06-02T14:49:22Z", "message": "Support text type with length for insert from values and query."}, "afterCommit": {"oid": "897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "committedDate": "2020-06-03T09:58:50Z", "message": "Support text type with length for insert from values and query."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/897364fe0ec5304a2ff04fcc9e6fb85e1b1c4138", "committedDate": "2020-06-03T09:58:50Z", "message": "Support text type with length for insert from values and query."}, "afterCommit": {"oid": "d841e5b9c29f9b439c56559eb20cce849374430d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d841e5b9c29f9b439c56559eb20cce849374430d", "committedDate": "2020-06-03T13:22:21Z", "message": "Support text type with length for insert from values and query."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d841e5b9c29f9b439c56559eb20cce849374430d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d841e5b9c29f9b439c56559eb20cce849374430d", "committedDate": "2020-06-03T13:22:21Z", "message": "Support text type with length for insert from values and query."}, "afterCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/57fdeab1c6b095e2915122b6d80676d3701d4785", "committedDate": "2020-06-03T13:41:35Z", "message": "Support text type with length for insert from values and query."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTc0NTUz", "url": "https://github.com/crate/crate/pull/10033#pullrequestreview-423574553", "createdAt": "2020-06-03T13:52:17Z", "commit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MjoxN1rOGec3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1Nzo0M1rOGedHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzMyOA==", "bodyText": "I think the default implementation should return the value as-is unchanged. Has a lower overhead and is closer to the prior behavior before the introduction of the method.\nWill also be easier to reason about what is happening.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434583328", "createdAt": "2020-06-03T13:52:17Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -105,6 +105,18 @@ public T explicitCast(Object value) throws IllegalArgumentException, ClassCastEx\n         return implicitCast(value);\n     }\n \n+    /**\n+     * To prepare a value of the same {@link DataType<T>} for insertion.\n+     * The method fall backs to the implicit cast if it is overwritten\n+     * by a data type subclass.\n+     *\n+     * @param value The value of the {@link DataType<T>}.\n+     * @return The prepared for insertion value of the {@link DataType<T>}.\n+     */\n+    public T valueForInsert(Object value) {\n+        return implicitCast(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDI3Mw==", "bodyText": "Would it make sense to add a String.class entry to POJO_TYPE_MAPPING instead?", "url": "https://github.com/crate/crate/pull/10033#discussion_r434584273", "createdAt": "2020-06-03T13:53:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -253,6 +253,8 @@ public static void toStream(DataType type, StreamOutput out) throws IOException\n             return valueFromList((List) value);\n         } else if (value.getClass().isArray()) {\n             return valueFromList(Arrays.asList((Object[]) value));\n+        } else if (value instanceof StringType) {\n+            return STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NTA5NQ==", "bodyText": "Given that we already use readInt /writeInt instead of the vInt variants, couldn't we just write the MAX_VALUE directly and avoid the boolean?", "url": "https://github.com/crate/crate/pull/10033#discussion_r434585095", "createdAt": "2020-06-03T13:54:35Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -69,6 +70,18 @@ private StringType(int lengthLimit) {\n         this.lengthLimit = lengthLimit;\n     }\n \n+    public StringType(StreamInput in) throws IOException {\n+        if (in.getVersion().onOrAfter(Version.V_4_2_0)) {\n+            if (in.readBoolean()) { // see writeTo\n+                lengthLimit = Integer.MAX_VALUE;\n+            } else {\n+                lengthLimit = in.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA==", "bodyText": "I think we should be able to assert that the value is a String. Or even change the signature (valueForInsert(T value)) and not run the implicit cast logic.\nIf the value didn't match the target type, we would already have added an implicit cast, so the value at this point must already match the type.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434586478", "createdAt": "2020-06-03T13:56:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg==", "bodyText": "This may be fairly expensive for it does (copies the string) - to check if a region is blank.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434587506", "createdAt": "2020-06-03T13:57:43Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ea9ee549df3df6c8c87f3124b5cc38a062eeb13", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/4ea9ee549df3df6c8c87f3124b5cc38a062eeb13", "committedDate": "2020-06-03T16:01:59Z", "message": "fixup! Support text type with length for insert from values and query."}, "afterCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/381a913da58eafe4cd8ef3f250ba0673b5f95aea", "committedDate": "2020-06-03T20:41:44Z", "message": "fixup! Support text type with length for insert from values and query."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTg5MTYz", "url": "https://github.com/crate/crate/pull/10033#pullrequestreview-424189163", "createdAt": "2020-06-04T07:53:08Z", "commit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo1MzowOFrOGe6ADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo1MzowOFrOGe6ADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ==", "bodyText": "Maybe we could even include the value in the error message", "url": "https://github.com/crate/crate/pull/10033#discussion_r435060751", "createdAt": "2020-06-04T07:53:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc0915780b5f5500bc70aafb5fdde29b75819c3", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6cc0915780b5f5500bc70aafb5fdde29b75819c3", "committedDate": "2020-06-04T08:49:38Z", "message": "Reflect limit length in serialization of the text type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42d5070c66204778505d67cc6c21eb594b10b5b2", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/42d5070c66204778505d67cc6c21eb594b10b5b2", "committedDate": "2020-06-04T08:49:38Z", "message": "Support text type with length for insert from values and query."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/381a913da58eafe4cd8ef3f250ba0673b5f95aea", "committedDate": "2020-06-03T20:41:44Z", "message": "fixup! Support text type with length for insert from values and query."}, "afterCommit": {"oid": "42d5070c66204778505d67cc6c21eb594b10b5b2", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/42d5070c66204778505d67cc6c21eb594b10b5b2", "committedDate": "2020-06-04T08:49:38Z", "message": "Support text type with length for insert from values and query."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3230, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}