{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNjIzNjI0", "number": 10578, "title": "Make memory reservation based on free bytes in insert-from-query", "bodyText": "Summary of the changes / Why this improves CrateDB\nOne of our nightly benchmarks failed because it's doing 15 concurrent\ninsert-from-unnest.\nWith the logic we had, each insert-from-query operation was allowed to\nreserve memory anywhere from 5MB to 15% of the query circuit breaker's\nlimit.\nThe problem with that is that the first couple of insert-from-query\noperations eagerly use up memory, and then there is nothing left for the\nremainder.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-09-23T08:57:52Z", "url": "https://github.com/crate/crate/pull/10578", "merged": true, "mergeCommit": {"oid": "483a2f45c8b48a3f095bef1181c009c33354f977"}, "closed": true, "closedAt": "2020-09-23T12:20:06Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLov3MgFqTQ5NDQ0NjUyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLrCLdABqjM3OTc2NDQ3ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDQ2NTIz", "url": "https://github.com/crate/crate/pull/10578#pullrequestreview-494446523", "createdAt": "2020-09-23T08:58:53Z", "commit": {"oid": "8569de2be095910a60ee4557ce2874ca11cecf3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODo1M1rOHWe8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODo1M1rOHWe8DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg==", "bodyText": "I'm not sure if this is the behavior we want? Maybe if wantedBytes is less than minAcceptableBytes we should fail?", "url": "https://github.com/crate/crate/pull/10578#discussion_r493337612", "createdAt": "2020-09-23T08:58:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -136,7 +136,7 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes == wantedBytes) {\n+        if (minAcceptableBytes >= wantedBytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8569de2be095910a60ee4557ce2874ca11cecf3c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDg2ODIw", "url": "https://github.com/crate/crate/pull/10578#pullrequestreview-494486820", "createdAt": "2020-09-23T09:48:24Z", "commit": {"oid": "5d3bdbaccfaa5da1b163fdfb7de83e7fe47c7820"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoyNFrOHWh4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoyNFrOHWh4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTc3OA==", "bodyText": "If free is > 5 MB, but  free * 0.15 isn't, we should probably still allow it?", "url": "https://github.com/crate/crate/pull/10578#discussion_r493385778", "createdAt": "2020-09-23T09:48:24Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -254,15 +256,33 @@ private boolean shouldPauseOnPartitionCreation(ShardedRequests<ShardUpsertReques\n         return false;\n     }\n \n+    static long reserveBytes(CircuitBreaker circuitBreaker) {\n+        long minAcceptableBytes = ByteSizeUnit.MB.toBytes(5);\n+        long free = circuitBreaker.getFree();\n+        long wantedBytes = (long) (free * BREAKER_LIMIT_PERCENTAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d3bdbaccfaa5da1b163fdfb7de83e7fe47c7820"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "748d8df976ef5b91d0f04b6d47e20f4fb851930a", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/748d8df976ef5b91d0f04b6d47e20f4fb851930a", "committedDate": "2020-09-23T11:33:26Z", "message": "fixup! fixup! Make memory reservation based on free bytes in insert-from-query"}, "afterCommit": {"oid": "76efc862b5d01e0d381493d6643b5d4e9e951cbe", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/76efc862b5d01e0d381493d6643b5d4e9e951cbe", "committedDate": "2020-09-23T11:34:03Z", "message": "fixup! fixup! Make memory reservation based on free bytes in insert-from-query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTY0Nzk5", "url": "https://github.com/crate/crate/pull/10578#pullrequestreview-494564799", "createdAt": "2020-09-23T11:36:55Z", "commit": {"oid": "76efc862b5d01e0d381493d6643b5d4e9e951cbe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c102121bedbe5ffc72c31c743f9afc08e3e73468", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c102121bedbe5ffc72c31c743f9afc08e3e73468", "committedDate": "2020-09-23T11:38:34Z", "message": "Make memory reservation based on free bytes in insert-from-query\n\nOne of our nightly benchmarks failed because it's doing 15 concurrent\ninsert-from-unnest.\n\nWith the logic we had, each insert-from-query operation was allowed to\nreserve memory anywhere from 5MB to 15% of the query circuit breaker's\nlimit.\n\nThe problem with that is that the first couple of insert-from-query\noperations eagerly use up memory, and then there is nothing left for the\nremainder."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76efc862b5d01e0d381493d6643b5d4e9e951cbe", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/76efc862b5d01e0d381493d6643b5d4e9e951cbe", "committedDate": "2020-09-23T11:34:03Z", "message": "fixup! fixup! Make memory reservation based on free bytes in insert-from-query"}, "afterCommit": {"oid": "c102121bedbe5ffc72c31c743f9afc08e3e73468", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c102121bedbe5ffc72c31c743f9afc08e3e73468", "committedDate": "2020-09-23T11:38:34Z", "message": "Make memory reservation based on free bytes in insert-from-query\n\nOne of our nightly benchmarks failed because it's doing 15 concurrent\ninsert-from-unnest.\n\nWith the logic we had, each insert-from-query operation was allowed to\nreserve memory anywhere from 5MB to 15% of the query circuit breaker's\nlimit.\n\nThe problem with that is that the first couple of insert-from-query\noperations eagerly use up memory, and then there is nothing left for the\nremainder."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3777, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}