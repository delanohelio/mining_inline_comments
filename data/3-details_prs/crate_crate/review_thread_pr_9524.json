{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjk5MzY3", "number": 9524, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowOToxMFrODZNFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowMTo1MlrODZOB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU1NDU1OnYy", "diffSide": "LEFT", "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzowOToxMFrOFfd0IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDo0Njo1MlrOFfgoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw==", "bodyText": "or shall we go with catching Exception as it is done in  normalizePrimitiveValue?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368538657", "createdAt": "2020-01-20T13:09:10Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MDYxOQ==", "bodyText": "maybe I'm missing something: how can a PgArrayParsingException happen here?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368560619", "createdAt": "2020-01-20T13:57:56Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MzE3OQ==", "bodyText": "I think it is better to be more specific when catching the exceptions.", "url": "https://github.com/crate/crate/pull/9524#discussion_r368563179", "createdAt": "2020-01-20T14:03:17Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MzIzNA==", "bodyText": "@seut because we use PgArrayParser in ArrayType now, see 470eaa5#diff-299c839efaea31569151e5ad86ebab25R115", "url": "https://github.com/crate/crate/pull/9524#discussion_r368583234", "createdAt": "2020-01-20T14:43:51Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4NDc0MQ==", "bodyText": "ah right, on literal casts, value() is called.", "url": "https://github.com/crate/crate/pull/9524#discussion_r368584741", "createdAt": "2020-01-20T14:46:52Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ValueNormalizer.java", "diffHunk": "@@ -68,7 +69,7 @@ public static Symbol normalizeInputForReference(Symbol valueSymbol, Reference re\n         Literal<?> literal;\n         try {\n             literal = (Literal<?>) valueSymbol.cast(reference.valueType());\n-        } catch (ConversionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzODY1Nw=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU2OTcyOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxNToxNlrOFfd9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDozODoyM1rOFfgXAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MTAxNA==", "bodyText": "why isn't this type added to the list above (no extra assertion)?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368541014", "createdAt": "2020-01-20T13:15:16Z", "author": {"login": "seut"}, "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -183,14 +185,17 @@ public void testIpNegativeValue() throws Exception {\n \n     @Test\n     public void selfConversionTest() throws Exception {\n-        for (DataType type : com.google.common.collect.Iterables.concat(\n+        for (DataType<?> type : Lists2.concat(\n             DataTypes.PRIMITIVE_TYPES,\n-            Arrays.asList(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n-\n-            assertTrue(type.isConvertableTo(type));\n-\n-            ArrayType arrayType = new ArrayType(type);\n-            assertTrue(arrayType.isConvertableTo(arrayType));\n+            List.of(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n+            assertThat(\n+                \"type '\" + type + \"' is not self convertible\",\n+                type.isConvertableTo(type), is(true));\n+\n+            ArrayType<?> arrayType = new ArrayType<>(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDM1NQ==", "bodyText": "it creates an array type for each type from the list above, thus, we cannot add it to the list above.", "url": "https://github.com/crate/crate/pull/9524#discussion_r368580355", "createdAt": "2020-01-20T14:38:23Z", "author": {"login": "kovrus"}, "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -183,14 +185,17 @@ public void testIpNegativeValue() throws Exception {\n \n     @Test\n     public void selfConversionTest() throws Exception {\n-        for (DataType type : com.google.common.collect.Iterables.concat(\n+        for (DataType<?> type : Lists2.concat(\n             DataTypes.PRIMITIVE_TYPES,\n-            Arrays.asList(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n-\n-            assertTrue(type.isConvertableTo(type));\n-\n-            ArrayType arrayType = new ArrayType(type);\n-            assertTrue(arrayType.isConvertableTo(arrayType));\n+            List.of(DataTypes.UNDEFINED, DataTypes.GEO_POINT, DataTypes.GEO_SHAPE, ObjectType.untyped()))) {\n+            assertThat(\n+                \"type '\" + type + \"' is not self convertible\",\n+                type.isConvertableTo(type), is(true));\n+\n+            ArrayType<?> arrayType = new ArrayType<>(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MTAxNA=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU3Nzc4OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxODowMFrOFfeCFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDozOToyNFrOFfgY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MjIyOQ==", "bodyText": "shouldn't this be ObjectType.undefined() as well? otherwise it tests the same as here https://github.com/crate/crate/pull/9524/files#diff-726498b21d19949db0e0009971e5b32eR253", "url": "https://github.com/crate/crate/pull/9524#discussion_r368542229", "createdAt": "2020-01-20T13:18:00Z", "author": {"login": "seut"}, "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -234,4 +239,38 @@ public void testTimestampToDoubleConversion() {\n             is(true));\n \n     }\n+\n+    @Test\n+    public void test_object_to_object_conversion_no_inner() {\n+        var objectTypeWithInner = ObjectType.builder().setInnerType(\"field\", DataTypes.STRING).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU4MDg2MA==", "bodyText": "yes, copy paste error. i drop this test, coz there is already self conversion test that asserts this scenario.", "url": "https://github.com/crate/crate/pull/9524#discussion_r368580860", "createdAt": "2020-01-20T14:39:24Z", "author": {"login": "kovrus"}, "path": "common/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -234,4 +239,38 @@ public void testTimestampToDoubleConversion() {\n             is(true));\n \n     }\n+\n+    @Test\n+    public void test_object_to_object_conversion_no_inner() {\n+        var objectTypeWithInner = ObjectType.builder().setInnerType(\"field\", DataTypes.STRING).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MjIyOQ=="}, "originalCommit": {"oid": "9dcb773e32cc5004064c93d4b471896fe071a732"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzY5MzI4OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzo1NzowMFrOFffIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzo1NzowMFrOFffIHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MDE1OA==", "bodyText": "unused imports?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368560158", "createdAt": "2020-01-20T13:57:00Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "diffHunk": "@@ -22,6 +22,8 @@\n package io.crate.integrationtests;\n \n import io.crate.action.sql.SQLActionException;\n+import io.crate.exceptions.ColumnValidationException;\n+import io.crate.exceptions.SQLParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eacab9d7e16b0145b69187dd24426212453a76"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzcwNDk2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowMDo0OFrOFffPPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowMDo0OFrOFffPPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MTk4Mg==", "bodyText": "Is it okay to use unnest like this here? What if one array has more dimensions than the other?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368561982", "createdAt": "2020-01-20T14:00:48Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -413,6 +414,28 @@ public static void register(int id, Writeable.Reader<DataType<?>> dataType) {\n         return streamer;\n     }\n \n+    public static boolean compareTypesById(DataType<?> left, DataType<?> right) {\n+        if (left.id() != right.id()) {\n+            return false;\n+        } else if (isArray(left)) {\n+            return compareTypesById(unnest(left), unnest(right));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eacab9d7e16b0145b69187dd24426212453a76"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzcwODU1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowMTo1MlrOFffRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDowMTo1MlrOFffRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MjUxMA==", "bodyText": "should we add an assertion that first and second implement RandomAccess ?", "url": "https://github.com/crate/crate/pull/9524#discussion_r368562510", "createdAt": "2020-01-20T14:01:52Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -413,6 +414,28 @@ public static void register(int id, Writeable.Reader<DataType<?>> dataType) {\n         return streamer;\n     }\n \n+    public static boolean compareTypesById(DataType<?> left, DataType<?> right) {\n+        if (left.id() != right.id()) {\n+            return false;\n+        } else if (isArray(left)) {\n+            return compareTypesById(unnest(left), unnest(right));\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    public static boolean compareTypesById(List<DataType> first, List<DataType> second) {\n+        if (first.size() != second.size()) {\n+            return false;\n+        }\n+        for (int i = 0; i < first.size(); i++) {\n+            if (!compareTypesById(first.get(i), second.get(i))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eacab9d7e16b0145b69187dd24426212453a76"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1114, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}