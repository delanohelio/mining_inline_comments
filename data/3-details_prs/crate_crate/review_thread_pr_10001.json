{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTI2NDM5", "number": 10001, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDowNVrOEAe_Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDo1M1rOEAfATQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTQzMTc4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDowNVrOGbyqGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDowNVrOGbyqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5NDcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ensureYellow();\n          \n      \n    \n    \n  \n\nShouldn't be required here.", "url": "https://github.com/crate/crate/pull/10001#discussion_r431794712", "createdAt": "2020-05-28T12:24:05Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "diffHunk": "@@ -485,4 +493,86 @@ public void test_cannot_create_snapshot_in_read_only_repo() {\n         expectedException.expectMessage(\"cannot create snapshot in a readonly repository\");\n         execute(\"create snapshot my_repo_ro.s1 ALL WITH (wait_for_completion=true)\");\n     }\n+\n+    public void test_snapshot_with_corrupted_shard_index_file() throws Exception {\n+        execute(\"CREATE TABLE t1 (x int)\");\n+        var numberOfDocs = randomLongBetween(0, 10);\n+        for (int i = 0; i < numberOfDocs; i++) {\n+            execute(\"INSERT INTO t1 (x) VALUES (?)\", new Object[]{randomInt()});\n+        }\n+        execute(\"REFRESH TABLE t1\");\n+\n+        var snapShotName1 = \"s1\";\n+        var fullSnapShotName1 =  REPOSITORY_NAME + \".\" + snapShotName1;\n+        execute(\"CREATE SNAPSHOT \" + fullSnapShotName1 + \" ALL WITH (wait_for_completion=true)\");\n+        ensureYellow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4faf786afe84f11817e3b38df8a9022388415581"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTQzNDM3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDo1M1rOGbyrxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyNDo1M1rOGbyrxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5NTE0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ensureYellow();", "url": "https://github.com/crate/crate/pull/10001#discussion_r431795140", "createdAt": "2020-05-28T12:24:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "diffHunk": "@@ -485,4 +493,86 @@ public void test_cannot_create_snapshot_in_read_only_repo() {\n         expectedException.expectMessage(\"cannot create snapshot in a readonly repository\");\n         execute(\"create snapshot my_repo_ro.s1 ALL WITH (wait_for_completion=true)\");\n     }\n+\n+    public void test_snapshot_with_corrupted_shard_index_file() throws Exception {\n+        execute(\"CREATE TABLE t1 (x int)\");\n+        var numberOfDocs = randomLongBetween(0, 10);\n+        for (int i = 0; i < numberOfDocs; i++) {\n+            execute(\"INSERT INTO t1 (x) VALUES (?)\", new Object[]{randomInt()});\n+        }\n+        execute(\"REFRESH TABLE t1\");\n+\n+        var snapShotName1 = \"s1\";\n+        var fullSnapShotName1 =  REPOSITORY_NAME + \".\" + snapShotName1;\n+        execute(\"CREATE SNAPSHOT \" + fullSnapShotName1 + \" ALL WITH (wait_for_completion=true)\");\n+        ensureYellow();\n+\n+        var repositoryData = getRepositoryData();\n+        var indexIds = repositoryData.getIndices();\n+        assertThat(indexIds.size(), equalTo(1));\n+\n+        var corruptedIndex = indexIds.entrySet().iterator().next().getValue();\n+        var shardIndexFile = defaultRepositoryLocation.toPath().resolve(\"indices\")\n+            .resolve(corruptedIndex.getId()).resolve(\"0\")\n+            .resolve(\"index-0\");\n+\n+        // Truncating shard index file\n+        try (var outChan = Files.newByteChannel(shardIndexFile, StandardOpenOption.WRITE)) {\n+            outChan.truncate(randomInt(10));\n+        }\n+\n+        assertSnapShotState(snapShotName1);\n+\n+        execute(\"drop table t1\");\n+        execute(\"RESTORE SNAPSHOT \" +  fullSnapShotName1 + \" TABLE t1 with (wait_for_completion=true)\");\n+        ensureYellow();\n+\n+        execute(\"SELECT COUNT(*) FROM t1\");\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+\n+        var numberOfAdditionalDocs = randomLongBetween(0, 10);\n+        for (int i = 0; i < numberOfAdditionalDocs; i++) {\n+            execute(\"INSERT INTO t1 (x) VALUES (?)\", new Object[]{randomInt()});\n+        }\n+        execute(\"REFRESH TABLE t1\");\n+\n+        var snapShotName2 = \"s2\";\n+        var fullSnapShotName2 = REPOSITORY_NAME + \".s2\";\n+\n+        execute(\"CREATE SNAPSHOT \" + fullSnapShotName2 + \" ALL WITH (wait_for_completion=true)\");\n+        ensureYellow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4faf786afe84f11817e3b38df8a9022388415581"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1350, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}