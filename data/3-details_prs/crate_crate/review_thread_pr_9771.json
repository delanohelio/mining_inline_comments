{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTU4MTY0", "number": 9771, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NToxMlrODpCUNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDowODo1NVrODpC2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzU2MTUwOnYy", "diffSide": "RIGHT", "path": "dex/src/main/java/io/crate/data/AsyncFlatMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOTo0NToxMlrOF39L0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo1OTozMlrOF4Bx4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA==", "bodyText": "It is a bit tricky to see the flatmap here, seems like this only provides the map operation yielding the Iterator<O> and the flattening happens in AsyncFlatMapBatchIterator. However this makes all sense. Maybe a few lines of documentation/comments would be good, otherwise it will be hard to use it for everyone who is not so familiar with all the concepts and internals.", "url": "https://github.com/crate/crate/pull/9771#discussion_r394218450", "createdAt": "2020-03-18T09:45:12Z", "author": {"login": "mkleen"}, "path": "dex/src/main/java/io/crate/data/AsyncFlatMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.data;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface AsyncFlatMapper<I, O> extends AutoCloseable {\n+\n+    CompletableFuture<? extends Iterator<O>> apply(I item, boolean isLastCall);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0MzE0NQ==", "bodyText": "Yep, this is modelled after the stream API:\nflatMap(Function<...,? extends Stream<? extends R>> mapper) : Stream<R>\n\nThe function that does the mapping is called mapper.\nI will add some more docs to clarify that.", "url": "https://github.com/crate/crate/pull/9771#discussion_r394243145", "createdAt": "2020-03-18T10:25:53Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/AsyncFlatMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.data;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface AsyncFlatMapper<I, O> extends AutoCloseable {\n+\n+    CompletableFuture<? extends Iterator<O>> apply(I item, boolean isLastCall);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA=="}, "originalCommit": {"oid": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5MzczMA==", "bodyText": "I tried to add something, but it read as a repitition of the signature, so I'll keep it as it is for now.", "url": "https://github.com/crate/crate/pull/9771#discussion_r394293730", "createdAt": "2020-03-18T11:59:32Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/AsyncFlatMapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.data;\n+\n+import java.util.Iterator;\n+import java.util.concurrent.CompletableFuture;\n+\n+public interface AsyncFlatMapper<I, O> extends AutoCloseable {\n+\n+    CompletableFuture<? extends Iterator<O>> apply(I item, boolean isLastCall);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODQ1MA=="}, "originalCommit": {"oid": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzY0ODE3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/fetch/FetchMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDowODo1NVrOF3-Ebw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDowODo1NVrOF3-Ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzMjk0Mw==", "bodyText": "Very nice!", "url": "https://github.com/crate/crate/pull/9771#discussion_r394232943", "createdAt": "2020-03-18T10:08:55Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/engine/fetch/FetchMapper.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.fetch;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.carrotsearch.hppc.IntContainer;\n+import com.carrotsearch.hppc.IntObjectHashMap;\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.carrotsearch.hppc.IntSet;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import io.crate.concurrent.CompletableFutures;\n+import io.crate.data.AsyncFlatMapper;\n+import io.crate.data.Bucket;\n+import io.crate.data.Row;\n+\n+public class FetchMapper implements AsyncFlatMapper<ReaderBuckets, Row> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebf25b710404e4cadf159cc0e7938ea6af4c5ccf"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1527, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}