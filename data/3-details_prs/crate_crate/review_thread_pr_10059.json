{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTUzNjAz", "number": 10059, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNDo0M1rOEDezYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNjo0NVrOEDfuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDg1ODU3OnYy", "diffSide": "RIGHT", "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNDo0M1rOGghgMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxMDoxNVrOGgjHTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjUzMQ==", "bodyText": "Could you update the branch against master? I recently deleted this method as it was unused.", "url": "https://github.com/crate/crate/pull/10059#discussion_r436756531", "createdAt": "2020-06-08T14:34:43Z", "author": {"login": "mfussenegger"}, "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+package org.elasticsearch.repositories.azure;\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.RestUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Minimal HTTP handler that acts as an Azure compliant server\n+ */\n+public class AzureHttpHandler implements HttpHandler {\n+\n+    private final Map<String, BytesReference> blobs;\n+    private final String container;\n+\n+    public AzureHttpHandler(final String container) {\n+        this.container = Objects.requireNonNull(container);\n+        this.blobs = new ConcurrentHashMap<>();\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String request = exchange.getRequestMethod() + \" \" + exchange.getRequestURI().toString();\n+\n+        if (request.startsWith(\"GET\") || request.startsWith(\"HEAD\") || request.startsWith(\"DELETE\")) {\n+            int read = exchange.getRequestBody().read();\n+            assert read == -1 : \"Request body should have been empty but saw [\" + read + \"]\";\n+        }\n+        try {\n+            if (Regex.simpleMatch(\"PUT /\" + container + \"/*blockid=*\", request)) {\n+                // Put Block (https://docs.microsoft.com/en-us/rest/api/storageservices/put-block)\n+                final Map<String, String> params = new HashMap<>();\n+                RestUtils.decodeQueryString(exchange.getRequestURI().getQuery(), 0, params);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba82df04d819bae5d4fd5d5359a9e3a9d9aab546"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2MjM1MQ==", "bodyText": "Shall i add it back ?", "url": "https://github.com/crate/crate/pull/10059#discussion_r436762351", "createdAt": "2020-06-08T14:42:42Z", "author": {"login": "mkleen"}, "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+package org.elasticsearch.repositories.azure;\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.RestUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Minimal HTTP handler that acts as an Azure compliant server\n+ */\n+public class AzureHttpHandler implements HttpHandler {\n+\n+    private final Map<String, BytesReference> blobs;\n+    private final String container;\n+\n+    public AzureHttpHandler(final String container) {\n+        this.container = Objects.requireNonNull(container);\n+        this.blobs = new ConcurrentHashMap<>();\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String request = exchange.getRequestMethod() + \" \" + exchange.getRequestURI().toString();\n+\n+        if (request.startsWith(\"GET\") || request.startsWith(\"HEAD\") || request.startsWith(\"DELETE\")) {\n+            int read = exchange.getRequestBody().read();\n+            assert read == -1 : \"Request body should have been empty but saw [\" + read + \"]\";\n+        }\n+        try {\n+            if (Regex.simpleMatch(\"PUT /\" + container + \"/*blockid=*\", request)) {\n+                // Put Block (https://docs.microsoft.com/en-us/rest/api/storageservices/put-block)\n+                final Map<String, String> params = new HashMap<>();\n+                RestUtils.decodeQueryString(exchange.getRequestURI().getQuery(), 0, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjUzMQ=="}, "originalCommit": {"oid": "ba82df04d819bae5d4fd5d5359a9e3a9d9aab546"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MjkyNA==", "bodyText": "Just wanted to make sure I see the full diff. But now I'm actually wondering if we could replace it with io.netty.handler.codec.http.QueryStringDecoder or so?", "url": "https://github.com/crate/crate/pull/10059#discussion_r436782924", "createdAt": "2020-06-08T15:10:15Z", "author": {"login": "mfussenegger"}, "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+package org.elasticsearch.repositories.azure;\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import org.elasticsearch.common.bytes.BytesArray;\n+import org.elasticsearch.common.bytes.BytesReference;\n+import org.elasticsearch.common.io.Streams;\n+import org.elasticsearch.common.regex.Regex;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.rest.RestUtils;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Minimal HTTP handler that acts as an Azure compliant server\n+ */\n+public class AzureHttpHandler implements HttpHandler {\n+\n+    private final Map<String, BytesReference> blobs;\n+    private final String container;\n+\n+    public AzureHttpHandler(final String container) {\n+        this.container = Objects.requireNonNull(container);\n+        this.blobs = new ConcurrentHashMap<>();\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String request = exchange.getRequestMethod() + \" \" + exchange.getRequestURI().toString();\n+\n+        if (request.startsWith(\"GET\") || request.startsWith(\"HEAD\") || request.startsWith(\"DELETE\")) {\n+            int read = exchange.getRequestBody().read();\n+            assert read == -1 : \"Request body should have been empty but saw [\" + read + \"]\";\n+        }\n+        try {\n+            if (Regex.simpleMatch(\"PUT /\" + container + \"/*blockid=*\", request)) {\n+                // Put Block (https://docs.microsoft.com/en-us/rest/api/storageservices/put-block)\n+                final Map<String, String> params = new HashMap<>();\n+                RestUtils.decodeQueryString(exchange.getRequestURI().getQuery(), 0, params);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NjUzMQ=="}, "originalCommit": {"oid": "ba82df04d819bae5d4fd5d5359a9e3a9d9aab546"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTAxMDYxOnYy", "diffSide": "RIGHT", "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNjo0NVrOGgi-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNjo0NVrOGgi-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDU3OQ==", "bodyText": "We also have a HttpTestServer that is based on netty. Maybe we could extend that so that the last channel handler is configurable and use that instead of adding another http-server variant?\nNot sure if it is worth it, since this stuff here is part of the JDK anyway.", "url": "https://github.com/crate/crate/pull/10059#discussion_r436780579", "createdAt": "2020-06-08T15:06:45Z", "author": {"login": "mfussenegger"}, "path": "plugins/es-repository-azure/src/test/java/org/elasticsearch/repositories/azure/AzureHttpHandler.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+package org.elasticsearch.repositories.azure;\n+\n+import com.sun.net.httpserver.Headers;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063b5f585eb75ecdd6df7c80e00e34dfc93b2c87"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1379, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}