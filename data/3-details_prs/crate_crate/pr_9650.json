{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzI1MDg5", "number": 9650, "title": "Terminate ordered lucene collector on cancel/kill ", "bodyText": "If an ordered lucene collector is running inside a child thread, it should stop processing and the thread should terminate if cancelled/killed.\nOtherwise it may still occupy resources (e.g. account memory) AFTER the job was killed and shared resources (ram accounting) are released.\nSupersedes #9628.", "createdAt": "2020-02-11T15:32:53Z", "url": "https://github.com/crate/crate/pull/9650", "merged": true, "mergeCommit": {"oid": "0666c0e8e0a46c5d3f889a42af018de84a58f237"}, "closed": true, "closedAt": "2020-02-12T11:16:41Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDT3GTAFqTM1Njc1OTc2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDkAoyABqjMwMzAyNzc2ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzU5NzY2", "url": "https://github.com/crate/crate/pull/9650#pullrequestreview-356759766", "createdAt": "2020-02-11T15:37:55Z", "commit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNzo1NlrOFoN2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1NDozMFrOFoOiSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDMyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                Consumer<Throwable> beforeExceptional) {\n          \n          \n            \n                                                                Consumer<Throwable> onKill) {", "url": "https://github.com/crate/crate/pull/9650#discussion_r377714321", "createdAt": "2020-02-11T15:37:56Z", "author": {"login": "mfussenegger"}, "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "diffHunk": "@@ -57,4 +67,349 @@ private CompletableFutures() {\n         }\n     }\n \n+    public static <T> CompletionStage<T> asKillable(CompletableFuture<T> delegate,\n+                                                    Consumer<Throwable> beforeExceptional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTY4MA==", "bodyText": "Just curious, what's the forbidden part here?", "url": "https://github.com/crate/crate/pull/9650#discussion_r377715680", "createdAt": "2020-02-11T15:39:58Z", "author": {"login": "mfussenegger"}, "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "diffHunk": "@@ -57,4 +67,349 @@ private CompletableFutures() {\n         }\n     }\n \n+    public static <T> CompletionStage<T> asKillable(CompletableFuture<T> delegate,\n+                                                    Consumer<Throwable> beforeExceptional) {\n+        return new KillableCompletableFuture<>(delegate, beforeExceptional);\n+    }\n+\n+    @SuppressForbidden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTQxNw==", "bodyText": "I am not sure if we need both of these to be volatile.\nWe could probably remove the check here https://github.com/crate/crate/pull/9650/files#diff-1360f05e99db1b25d5f53dec74c7abb2R137 and always depend on the kill raising via the Collector. I think the operations happening between those actions are cheap enough to ignore.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377719417", "createdAt": "2020-02-11T15:45:20Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -72,6 +79,11 @@\n     private int batchSize;\n     private boolean batchSizeReduced = false;\n \n+    @Nullable\n+    private volatile KillableCollector currentCollector;\n+\n+    @Nullable\n+    private volatile Throwable killed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA==", "bodyText": "I think there is a race condition between getLeafCollector and kill:\nt1: Is before `killed = t;`\nt2: Is past `raiseIfKilled(killed);` but hasn`t done the assignment to `currentLeafCollector`\n\nIn that case the kill would be swallowed I think. Could probably be solved with a compare and set operation", "url": "https://github.com/crate/crate/pull/9650#discussion_r377723674", "createdAt": "2020-02-11T15:51:42Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNTUxNA==", "bodyText": "I think here we could actually return the new KillableCompletableFuture. Otherwise the call-site has to know that this might implement Killable, that is not very common.\nBy changing the interface to return CompletionStage I was referring to loadNextBatch, but that could probably be a dedicated PR, as it isn't involved here at all.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377725514", "createdAt": "2020-02-11T15:54:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/OrderedLuceneBatchIteratorFactory.java", "diffHunk": "@@ -102,22 +104,24 @@\n             );\n         }\n \n-        private CompletableFuture<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {\n+        private CompletionStage<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f850d9ca0dff083e369e0247d1e5f56e2b58bd62", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/f850d9ca0dff083e369e0247d1e5f56e2b58bd62", "committedDate": "2020-02-11T19:45:42Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "24ab00eb94ab06fbfa150a1b26874612ee463009", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/24ab00eb94ab06fbfa150a1b26874612ee463009", "committedDate": "2020-02-11T19:49:02Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24ab00eb94ab06fbfa150a1b26874612ee463009", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/24ab00eb94ab06fbfa150a1b26874612ee463009", "committedDate": "2020-02-11T19:49:02Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "eab3bdb91d8d7ce5188d82ba03beb8c7e2e80243", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/eab3bdb91d8d7ce5188d82ba03beb8c7e2e80243", "committedDate": "2020-02-11T19:51:55Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eab3bdb91d8d7ce5188d82ba03beb8c7e2e80243", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/eab3bdb91d8d7ce5188d82ba03beb8c7e2e80243", "committedDate": "2020-02-11T19:51:55Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "3f751c3aa98b59a0648c32c5d3c9109d5eeada5f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/3f751c3aa98b59a0648c32c5d3c9109d5eeada5f", "committedDate": "2020-02-11T19:53:36Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f751c3aa98b59a0648c32c5d3c9109d5eeada5f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/3f751c3aa98b59a0648c32c5d3c9109d5eeada5f", "committedDate": "2020-02-11T19:53:36Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "ca52c75556965792960ec7e8a4b7993166c1b464", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/ca52c75556965792960ec7e8a4b7993166c1b464", "committedDate": "2020-02-11T19:57:39Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca52c75556965792960ec7e8a4b7993166c1b464", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/ca52c75556965792960ec7e8a4b7993166c1b464", "committedDate": "2020-02-11T19:57:39Z", "message": "fixup! fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "779d1e5fd1d79fdf604ea3e8e72ddacf1b13aecb", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/779d1e5fd1d79fdf604ea3e8e72ddacf1b13aecb", "committedDate": "2020-02-12T08:30:32Z", "message": "Terminate ordered lucene collector on cancel/kill\n\nIf an ordered lucene collector is running inside a child thread, it\nshould stop processing and the thread should terminate if cancelled/killed.\nOtherwise it may still occupy resources (e.g. account memory) AFTER the\njob was killed and shared resources (ram accounting) are released."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MzQ2MzU2", "url": "https://github.com/crate/crate/pull/9650#pullrequestreview-357346356", "createdAt": "2020-02-12T10:36:30Z", "commit": {"oid": "f68cde661b0a04409a7fa8f2a0a45f9c7c916221"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNjozMFrOFopg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNjozMFrOFopg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzUzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public KillableCollector(Collector delegate, Consumer<Void> raiseIfKilled) {\n          \n          \n            \n                    public KillableCollector(Collector delegate, Runnable raiseIfKilled) {", "url": "https://github.com/crate/crate/pull/9650#discussion_r378167538", "createdAt": "2020-02-12T10:36:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -231,82 +222,55 @@ private Query query(FieldDoc lastDoc) {\n         return searchAfterQuery.build();\n     }\n \n-    private static void raiseIfKilled(@Nullable Throwable t) {\n+    private void raiseIfKilled() {\n+        var t = killed.get();\n         if (t != null) {\n             Exceptions.rethrowUnchecked(t);\n         }\n     }\n \n-    private static class KillableCollector implements Collector, Killable {\n+    private static class KillableCollector implements Collector {\n \n         private final Collector delegate;\n+        private final Consumer<Void> raiseIfKilled;\n \n-        @Nullable\n-        private volatile KillableLeafCollector currentLeafCollector;\n-\n-        @Nullable\n-        private volatile Throwable killed;\n-\n-        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+        public KillableCollector(Collector delegate, Consumer<Void> raiseIfKilled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68cde661b0a04409a7fa8f2a0a45f9c7c916221"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c23a88568ea92f6e83aa32b55b0f739e9414728", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/7c23a88568ea92f6e83aa32b55b0f739e9414728", "committedDate": "2020-02-12T10:44:59Z", "message": "Terminate ordered lucene collector on cancel/kill\n\nIf an ordered lucene collector is running inside a child thread, it\nshould stop processing and the thread should terminate if cancelled/killed.\nOtherwise it may still occupy resources (e.g. account memory) AFTER the\njob was killed and shared resources (ram accounting) are released."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f68cde661b0a04409a7fa8f2a0a45f9c7c916221", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/f68cde661b0a04409a7fa8f2a0a45f9c7c916221", "committedDate": "2020-02-12T10:22:53Z", "message": "fixup! Terminate ordered lucene collector on cancel/kill"}, "afterCommit": {"oid": "7c23a88568ea92f6e83aa32b55b0f739e9414728", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/7c23a88568ea92f6e83aa32b55b0f739e9414728", "committedDate": "2020-02-12T10:44:59Z", "message": "Terminate ordered lucene collector on cancel/kill\n\nIf an ordered lucene collector is running inside a child thread, it\nshould stop processing and the thread should terminate if cancelled/killed.\nOtherwise it may still occupy resources (e.g. account memory) AFTER the\njob was killed and shared resources (ram accounting) are released."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3854, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}