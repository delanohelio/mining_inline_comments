{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTIyNjMw", "number": 10128, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyMjo0MVrOEJnKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1MTo0OFrOEKBb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTE0MjM0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyMjo0MVrOGqMTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMToyMjo0MVrOGqMTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5NTAxOA==", "bodyText": "See https://github.com/original-brownbear/elasticsearch/blob/222c587c0ae930f2dde097621e8757b9cf217d81/server/src/test/java/org/elasticsearch/snapshots/SharedClusterSnapshotRestoreIT.java#L3050", "url": "https://github.com/crate/crate/pull/10128#discussion_r446895018", "createdAt": "2020-06-29T11:22:41Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/integrationtests/SnapshotRestoreIntegrationTest.java", "diffHunk": "@@ -539,24 +542,15 @@ public void test_snapshot_with_corrupted_shard_index_file() throws Exception {\n         var fullSnapShotName2 = REPOSITORY_NAME + \".s2\";\n \n         execute(\"CREATE SNAPSHOT \" + fullSnapShotName2 + \" ALL WITH (wait_for_completion=true)\");\n-\n-        assertSnapShotState(snapShotName2);\n-\n-        execute(\"drop table t1\");\n-        execute(\"RESTORE SNAPSHOT \" + fullSnapShotName2 + \" TABLE t1 with (wait_for_completion=true)\");\n-        ensureYellow();\n-\n-        execute(\"SELECT COUNT(*) FROM t1\");\n-        assertThat(response.rows()[0][0], is(numberOfDocs + numberOfAdditionalDocs));\n-\n+        assertSnapShotState(snapShotName2, SnapshotState.PARTIAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221c5c7abe30f45973db82fc8db45d1d0d9a6a30"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjExNzg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMToxM1rOGqVh0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMToxM1rOGqVh0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0NjA5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static <T> ActionListener<T> delegateResponse(ActionListener<T> delegate, BiConsumer<ActionListener<T>, Exception> bc) {\n          \n          \n            \n                    return new ActionListener<T>() {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onResponse(T r) {\n          \n          \n            \n                            delegate.onResponse(r);\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onFailure(Exception e) {\n          \n          \n            \n                            bc.accept(delegate, e);\n          \n          \n            \n                        }\n          \n          \n            \n                    };\n          \n          \n            \n                }\n          \n          \n            \n                static <T> ActionListener<T> delegateResponse(ActionListener<T> delegate, BiConsumer<ActionListener<T>, Exception> onFailure) {\n          \n          \n            \n                    return new ActionListener<T>() {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onResponse(T r) {\n          \n          \n            \n                            delegate.onResponse(r);\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onFailure(Exception e) {\n          \n          \n            \n                            onFailure.accept(delegate, e);\n          \n          \n            \n                        }\n          \n          \n            \n                    };\n          \n          \n            \n                }", "url": "https://github.com/crate/crate/pull/10128#discussion_r447046098", "createdAt": "2020-06-29T15:11:13Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/action/ActionListener.java", "diffHunk": "@@ -247,4 +247,27 @@ public void onFailure(Exception e) {\n             }\n         };\n     }\n+\n+    /**\n+     * Creates a listener that delegates all responses it receives to another listener.\n+     *\n+     * @param delegate ActionListener to wrap and delegate any exception to\n+     * @param bc BiConsumer invoked with delegate listener and exception\n+     * @param <T> Type of the listener\n+     * @return Delegating listener\n+     */\n+    static <T> ActionListener<T> delegateResponse(ActionListener<T> delegate, BiConsumer<ActionListener<T>, Exception> bc) {\n+        return new ActionListener<T>() {\n+\n+            @Override\n+            public void onResponse(T r) {\n+                delegate.onResponse(r);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                bc.accept(delegate, e);\n+            }\n+        };\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab4e7fef64469bbfa23790b319583ea692aa558"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE4MzIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNTozNlrOGqWKWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNTozNlrOGqWKWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NjQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Shard generations.\n          \n          \n            \n                 */\n          \n      \n    \n    \n  \n\nThe comment just repeats the variable name - no point in having it.", "url": "https://github.com/crate/crate/pull/10128#discussion_r447056474", "createdAt": "2020-06-29T15:25:36Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -78,20 +79,33 @@\n      */\n     private final Map<IndexId, Set<SnapshotId>> indexSnapshots;\n \n+    /**\n+     * Shard generations.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE5MDU0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNzoxNFrOGqWO9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNzoxNFrOGqWO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NzY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.shardGenerations = Objects.requireNonNull(shardGenerations);\n          \n          \n            \n                    this.shardGenerations = Objects.requireNonNull(shardGenerations, \"shardGenerations must not be null\");", "url": "https://github.com/crate/crate/pull/10128#discussion_r447057652", "createdAt": "2020-06-29T15:27:14Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -78,20 +79,33 @@\n      */\n     private final Map<IndexId, Set<SnapshotId>> indexSnapshots;\n \n+    /**\n+     * Shard generations.\n+     */\n+    private final ShardGenerations shardGenerations;\n+\n     public RepositoryData(long genId,\n                           Map<String, SnapshotId> snapshotIds,\n                           Map<String, SnapshotState> snapshotStates,\n-                          Map<IndexId, Set<SnapshotId>> indexSnapshots) {\n+                          Map<IndexId, Set<SnapshotId>> indexSnapshots,\n+                          ShardGenerations shardGenerations) {\n         this.genId = genId;\n         this.snapshotIds = Collections.unmodifiableMap(snapshotIds);\n         this.snapshotStates = Collections.unmodifiableMap(snapshotStates);\n         this.indices = Collections.unmodifiableMap(indexSnapshots.keySet().stream()\n             .collect(Collectors.toMap(IndexId::getName, Function.identity())));\n         this.indexSnapshots = Collections.unmodifiableMap(indexSnapshots);\n+        this.shardGenerations = Objects.requireNonNull(shardGenerations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIwMDY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyOToyM1rOGqWVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowNTo1N1rOGqzFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTIyMw==", "bodyText": "In ES this got introduced in elastic/elasticsearch@be397b7 do we have the other changes from that?", "url": "https://github.com/crate/crate/pull/10128#discussion_r447059223", "createdAt": "2020-06-29T15:29:23Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -134,13 +148,32 @@ public SnapshotState getSnapshotState(final SnapshotId snapshotId) {\n         return indices;\n     }\n \n+    /**\n+     * Returns the list of {@link IndexId} that have their snapshots updated but not removed (because they are still referenced by other\n+     * snapshots) after removing the given snapshot from the repository.\n+     *\n+     * @param snapshotId SnapshotId to remove\n+     * @return List of indices that are changed but not removed\n+     */\n+    public List<IndexId> indicesToUpdateAfterRemovingSnapshot(SnapshotId snapshotId) {\n+        return indexSnapshots.entrySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMDQwMQ==", "bodyText": "All changes were already in, i took the related tests as well now.", "url": "https://github.com/crate/crate/pull/10128#discussion_r447530401", "createdAt": "2020-06-30T09:05:57Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -134,13 +148,32 @@ public SnapshotState getSnapshotState(final SnapshotId snapshotId) {\n         return indices;\n     }\n \n+    /**\n+     * Returns the list of {@link IndexId} that have their snapshots updated but not removed (because they are still referenced by other\n+     * snapshots) after removing the given snapshot from the repository.\n+     *\n+     * @param snapshotId SnapshotId to remove\n+     * @return List of indices that are changed but not removed\n+     */\n+    public List<IndexId> indicesToUpdateAfterRemovingSnapshot(SnapshotId snapshotId) {\n+        return indexSnapshots.entrySet().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1OTIyMw=="}, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjIwNzI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTozMDo0MVrOGqWY9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowNTo0OFrOGqzFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDIxNA==", "bodyText": "This came with elastic/elasticsearch@4849c3e\nAre the other changes also ported?", "url": "https://github.com/crate/crate/pull/10128#discussion_r447060214", "createdAt": "2020-06-29T15:30:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -152,16 +185,35 @@ public RepositoryData addSnapshot(final SnapshotId snapshotId,\n         Map<String, SnapshotState> newSnapshotStates = new HashMap<>(snapshotStates);\n         newSnapshotStates.put(snapshotId.getUUID(), snapshotState);\n         Map<IndexId, Set<SnapshotId>> allIndexSnapshots = new HashMap<>(indexSnapshots);\n-        for (final IndexId indexId : snapshottedIndices) {\n+        for (final IndexId indexId : shardGenerations.indices()) {\n             allIndexSnapshots.computeIfAbsent(indexId, k -> new LinkedHashSet<>()).add(snapshotId);\n         }\n-        return new RepositoryData(genId, snapshots, newSnapshotStates, allIndexSnapshots);\n+        return new RepositoryData(genId, snapshots, newSnapshotStates, allIndexSnapshots,\n+                                  ShardGenerations.builder().putAll(this.shardGenerations).putAll(shardGenerations).build());\n+    }\n+\n+    /**\n+     * Create a new instance with the given generation and all other fields equal to this instance.\n+     *\n+     * @param newGeneration New Generation\n+     * @return New instance\n+     */\n+    public RepositoryData withGenId(long newGeneration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMDMyMA==", "bodyText": "All changes were already in, i took the related tests as well now.", "url": "https://github.com/crate/crate/pull/10128#discussion_r447530320", "createdAt": "2020-06-30T09:05:48Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/org/elasticsearch/repositories/RepositoryData.java", "diffHunk": "@@ -152,16 +185,35 @@ public RepositoryData addSnapshot(final SnapshotId snapshotId,\n         Map<String, SnapshotState> newSnapshotStates = new HashMap<>(snapshotStates);\n         newSnapshotStates.put(snapshotId.getUUID(), snapshotState);\n         Map<IndexId, Set<SnapshotId>> allIndexSnapshots = new HashMap<>(indexSnapshots);\n-        for (final IndexId indexId : snapshottedIndices) {\n+        for (final IndexId indexId : shardGenerations.indices()) {\n             allIndexSnapshots.computeIfAbsent(indexId, k -> new LinkedHashSet<>()).add(snapshotId);\n         }\n-        return new RepositoryData(genId, snapshots, newSnapshotStates, allIndexSnapshots);\n+        return new RepositoryData(genId, snapshots, newSnapshotStates, allIndexSnapshots,\n+                                  ShardGenerations.builder().putAll(this.shardGenerations).putAll(shardGenerations).build());\n+    }\n+\n+    /**\n+     * Create a new instance with the given generation and all other fields equal to this instance.\n+     *\n+     * @param newGeneration New Generation\n+     * @return New instance\n+     */\n+    public RepositoryData withGenId(long newGeneration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDIxNA=="}, "originalCommit": {"oid": "803c0efac6fbfd78bb39c831de531a565d0268be"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQ0NDA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1MTowMlrOGq0z5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1MTowMlrOGq0z5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1ODYyOQ==", "bodyText": "can't these still be final?", "url": "https://github.com/crate/crate/pull/10128#discussion_r447558629", "createdAt": "2020-06-30T09:51:02Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -400,10 +389,16 @@ private void syncShardStatsOnNewMaster(ClusterChangedEvent event) {\n      * Internal request that is used to send changes in snapshot status to master\n      */\n     public static class UpdateIndexShardSnapshotStatusRequest extends MasterNodeRequest<UpdateIndexShardSnapshotStatusRequest> {\n+        private Snapshot snapshot;\n+        private ShardId shardId;\n+        private ShardSnapshotStatus status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a3e0be567e4be1689893fa2675c3c5c677ed43"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTQ0NzUzOnYy", "diffSide": "LEFT", "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1MTo0OFrOGq02Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTo1MTo0OFrOGq02Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1OTE5OQ==", "bodyText": "Why the formatting changes?", "url": "https://github.com/crate/crate/pull/10128#discussion_r447559199", "createdAt": "2020-06-30T09:51:48Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java", "diffHunk": "@@ -575,25 +564,21 @@ public void clusterStateProcessed(String source, ClusterState oldState, ClusterS\n \n     static class UpdateIndexShardSnapshotStatusResponse extends TransportResponse {\n \n-        @Override\n-        public void writeTo(StreamOutput out) throws IOException {\n+        public UpdateIndexShardSnapshotStatusResponse() {\n+\n         }\n \n-        public UpdateIndexShardSnapshotStatusResponse() {\n+        @Override\n+        public void writeTo(StreamOutput out) throws IOException {\n         }\n     }\n \n     private class UpdateSnapshotStatusAction\n         extends TransportMasterNodeAction<UpdateIndexShardSnapshotStatusRequest, UpdateIndexShardSnapshotStatusResponse> {\n         UpdateSnapshotStatusAction(TransportService transportService, ClusterService clusterService,\n-                                   ThreadPool threadPool, IndexNameExpressionResolver indexNameExpressionResolver) {\n+                                   ThreadPool threadPool,IndexNameExpressionResolver indexNameExpressionResolver) {\n             super(\n-                SnapshotShardsService.UPDATE_SNAPSHOT_STATUS_ACTION_NAME,\n-                transportService,\n-                clusterService,\n-                threadPool,\n-                UpdateIndexShardSnapshotStatusRequest::new,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15a3e0be567e4be1689893fa2675c3c5c677ed43"}, "originalPosition": 263}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1294, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}