{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzI2Mjg4", "number": 10305, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo1NTo0M1rOEg47uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMToxMVrOEg5Obw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTIyNjgzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo1NTo0M1rOHN60NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo1NTo0M1rOHN60NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NzE3Mg==", "bodyText": "Maybe something like that can be more redable?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    execute(\"select pg_get_function_result(\" + functionOid + \")\");\n          \n          \n            \n                    execute(\"select pg_get_function_result(?)\", new Object[]{functionOid});", "url": "https://github.com/crate/crate/pull/10305#discussion_r484357172", "createdAt": "2020-09-07T10:55:43Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -299,6 +300,32 @@ public void test_pg_function_is_visible() throws Exception {\n         assertThat(response.rows()[0][0], is(false));\n     }\n \n+    @Test\n+    public void test_pg_get_function_result() throws Exception {\n+        TypeSignature returnTypeSig = TypeSignature.parseTypeSignature(\"array(array(integer))\");\n+        String returnType = returnTypeSig.toString();\n+        Signature signature = Signature\n+            .builder()\n+            .kind(FunctionType.SCALAR)\n+            .name(new FunctionName(Schemas.DOC_SCHEMA_NAME, \"make_2d_array\"))\n+            .argumentTypes(TypeSignature.parseTypeSignature(\"integer\"))\n+            .returnType(returnTypeSig)\n+            .build();\n+        int functionOid = OidHash.functionOid(signature);\n+\n+        execute(\"select pg_get_function_result(\" + functionOid + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTIyNzc1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo1NjowMVrOHN60xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo1NjowMVrOHN60xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1NzMxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    execute(\"create function doc.make_2d_array(integer) returns array(array(integer)) language dummy_lang as '\" + returnType + \"'\");\n          \n          \n            \n                    execute(\"create function doc.make_2d_array(integer) returns array(array(integer)) language dummy_lang as ?\", new Object[]{returnType});", "url": "https://github.com/crate/crate/pull/10305#discussion_r484357316", "createdAt": "2020-09-07T10:56:01Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -299,6 +300,32 @@ public void test_pg_function_is_visible() throws Exception {\n         assertThat(response.rows()[0][0], is(false));\n     }\n \n+    @Test\n+    public void test_pg_get_function_result() throws Exception {\n+        TypeSignature returnTypeSig = TypeSignature.parseTypeSignature(\"array(array(integer))\");\n+        String returnType = returnTypeSig.toString();\n+        Signature signature = Signature\n+            .builder()\n+            .kind(FunctionType.SCALAR)\n+            .name(new FunctionName(Schemas.DOC_SCHEMA_NAME, \"make_2d_array\"))\n+            .argumentTypes(TypeSignature.parseTypeSignature(\"integer\"))\n+            .returnType(returnTypeSig)\n+            .build();\n+        int functionOid = OidHash.functionOid(signature);\n+\n+        execute(\"select pg_get_function_result(\" + functionOid + \")\");\n+        assertThat(response.rows()[0][0], nullValue());\n+\n+        execute(\"create function doc.make_2d_array(integer) returns array(array(integer)) language dummy_lang as '\" + returnType + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTI1MDEzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/expression/scalar/systeminformation/PgGetFunctionResultFunctionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowMjo1OFrOHN7BwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowMjo1OFrOHN7BwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2MDY0MQ==", "bodyText": "can you maybe extract these two assertions into a separate test?", "url": "https://github.com/crate/crate/pull/10305#discussion_r484360641", "createdAt": "2020-09-07T11:02:58Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/scalar/systeminformation/PgGetFunctionResultFunctionTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.systeminformation;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import io.crate.metadata.FunctionProvider;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.pgcatalog.OidHash;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+public class PgGetFunctionResultFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void test_null_oid_results_in_null() {\n+        assertEvaluate(\"pg_function_is_visible(null)\", null);\n+    }\n+\n+    @Test\n+    public void test_system_function_result_type_text_representation() {\n+        assertEvaluate(\"pg_get_function_result(0)\",null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTI1MzY4OnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNDoxMVrOHN7EAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNDoxMVrOHN7EAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2MTIxNg==", "bodyText": "The changelog entry is missing.", "url": "https://github.com/crate/crate/pull/10305#discussion_r484361216", "createdAt": "2020-09-07T11:04:11Z", "author": {"login": "kovrus"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2669,6 +2669,32 @@ Example:\n     +------------------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_get_function_result:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTI1ODMxOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNTozOVrOHN7GzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowNTozOVrOHN7GzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2MTkzMw==", "bodyText": "return value's data type of the function referred **to** by the OID. is to obsolete here?", "url": "https://github.com/crate/crate/pull/10305#discussion_r484361933", "createdAt": "2020-09-07T11:05:39Z", "author": {"login": "kovrus"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2669,6 +2669,32 @@ Example:\n     +------------------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_get_function_result:\n+\n+``pg_get_function_result``\n+--------------------------\n+\n+The function ``pg_get_function_result`` returns the text representation of the\n+return value's data type of the function referred to by the OID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTI3NDcxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMToxMVrOHN7Q2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMToxMVrOHN7Q2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2NDUwNA==", "bodyText": "will be a better choise if there would be some kind of refactoring\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .argumentTypes(TypeSignature.parseTypeSignature(\"integer\"))\n          \n          \n            \n                        .argumentTypes(DataTypes.INTEGER.getTypeSignature()\"))", "url": "https://github.com/crate/crate/pull/10305#discussion_r484364504", "createdAt": "2020-09-07T11:11:11Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -299,6 +300,32 @@ public void test_pg_function_is_visible() throws Exception {\n         assertThat(response.rows()[0][0], is(false));\n     }\n \n+    @Test\n+    public void test_pg_get_function_result() throws Exception {\n+        TypeSignature returnTypeSig = TypeSignature.parseTypeSignature(\"array(array(integer))\");\n+        String returnType = returnTypeSig.toString();\n+        Signature signature = Signature\n+            .builder()\n+            .kind(FunctionType.SCALAR)\n+            .name(new FunctionName(Schemas.DOC_SCHEMA_NAME, \"make_2d_array\"))\n+            .argumentTypes(TypeSignature.parseTypeSignature(\"integer\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b5dc4e479bedb537d4dd8bbf0159b134e62a13"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1242, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}