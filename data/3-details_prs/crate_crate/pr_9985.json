{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTYxMDIw", "number": 9985, "title": "Always generate `cast` function for implicit casts", "bodyText": "Casting literals used a special logic and resulted in immediately converted literals. Some plans relied on this logic and break if non-literals are used.\nEarly normalization of literal casts, over the special logic or by normalizing the cast function, removes relevant information maybe required by outer symbols (functions).\nE.g. normalizing of array literals converts them into an array object and thus looses  the ability of using concrete type cast functionality of each literal array element.\nAll these issues can be solved by removing the early \u201con-function-resolving\u201d normalization and early literal conversion.\nInstead the complete symbol tree will be normalized after it has been build.\nAdditionally we differentiate between explicit and implicit casts.\nThis was already the case from a user perspective but internally hidden due to the special early literal cast (conversion) logic.\nAn example where explicit casts are possible but implicit casts not is the supported ObjectType<->StringType conversion to allow object literals of type JSON string.\nThis is still allowed on explicit casts but not on implicit ones.\nSummary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-22T14:45:58Z", "url": "https://github.com/crate/crate/pull/9985", "merged": true, "mergeCommit": {"oid": "89c5b8e7b1f96def563aa4c3f22b5a2de0b68d7f"}, "closed": true, "closedAt": "2020-05-25T08:50:22Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckrShJAFqTQxNzUyMDkzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABckrjynABqjMzNjkyNzg3NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTIwOTM4", "url": "https://github.com/crate/crate/pull/9985#pullrequestreview-417520938", "createdAt": "2020-05-25T07:47:14Z", "commit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0NzoxNVrOGZ34Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0NzoxNVrOGZ34Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4MzA4Ng==", "bodyText": "Would it be possible to remove the isEagerNormalizationAllowed flag now altogether?\nWe've afaik only 2 places where it is disabled (for using literals as table function and in the values case), in those cases we could call expression.accept.. directly instead of going through convert.", "url": "https://github.com/crate/crate/pull/9985#discussion_r429783086", "createdAt": "2020-05-25T07:47:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -215,7 +216,12 @@ public ExpressionAnalyzer(Functions functions,\n      * Functions with constants will be normalized.\n      */\n     public Symbol convert(Expression expression, ExpressionAnalysisContext expressionAnalysisContext) {\n-        return expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var symbol = expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var normalizer = EvaluatingNormalizer.functionOnlyNormalizer(\n+            functions,\n+            f -> expressionAnalysisContext.isEagerNormalizationAllowed() && f.info().isDeterministic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTI2MDM2", "url": "https://github.com/crate/crate/pull/9985#pullrequestreview-417526036", "createdAt": "2020-05-25T07:55:36Z", "commit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMxNDIw", "url": "https://github.com/crate/crate/pull/9985#pullrequestreview-417531420", "createdAt": "2020-05-25T08:04:18Z", "commit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDoxOFrOGZ4Y9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDoxOFrOGZ4Y9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTQ3Ng==", "bodyText": "explicitCast is not used at all in isConvertableTo", "url": "https://github.com/crate/crate/pull/9985#discussion_r429791476", "createdAt": "2020-05-25T08:04:18Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -107,7 +107,7 @@ public boolean precedes(DataType other) {\n      * @param other the DataType to check conversion to\n      * @return true or false\n      */\n-    public boolean isConvertableTo(DataType<?> other) {\n+    public boolean isConvertableTo(DataType<?> other, boolean explicitCast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTM1MDQ2", "url": "https://github.com/crate/crate/pull/9985#pullrequestreview-417535046", "createdAt": "2020-05-25T08:10:17Z", "commit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719ac1c86ff93495f4197bf8687842c28f2a4587", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/719ac1c86ff93495f4197bf8687842c28f2a4587", "committedDate": "2020-05-25T08:12:08Z", "message": "Always generate `cast` function for implicit casts\n\nCasting literals used a special logic and resulted in immediately\nconverted literals. Some plans relied on this logic and break if\nnon-literals are used.\nEarly normalization of literal casts, over the special logic or by\nnormalizing the `cast` function, removes relevant information maybe\nrequired by outer symbols (functions). E.g. normalizing of array\nliterals converts them into an array object and thus looses\nthe ability of using concrete type cast functionality of each literal\narray element.\n\nAll these issues can be solved by removing early \u201con-function-resolving\u201d\nnormalization and early literal conversion.\nInstead the complete symbol tree will be normalized after it has been build.\n\nAdditionally we differentiate between explicit and implicit casts.\nThis was already the case from a user perspective but internally hidden\ndue to the special early literal cast (conversion) logic.\nAn example where explicit casts are possible but implicit casts not\nis the supported `ObjectType<->StringType` conversion to allow object\nliterals of type JSON string.\nThis is still allowed on explicit casts but not on implicit ones."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/68141748f43ab2d419bc7e1fad69061d65c63464", "committedDate": "2020-05-22T15:09:55Z", "message": "fixup! Always generate `cast` function for implicit casts"}, "afterCommit": {"oid": "719ac1c86ff93495f4197bf8687842c28f2a4587", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/719ac1c86ff93495f4197bf8687842c28f2a4587", "committedDate": "2020-05-25T08:12:08Z", "message": "Always generate `cast` function for implicit casts\n\nCasting literals used a special logic and resulted in immediately\nconverted literals. Some plans relied on this logic and break if\nnon-literals are used.\nEarly normalization of literal casts, over the special logic or by\nnormalizing the `cast` function, removes relevant information maybe\nrequired by outer symbols (functions). E.g. normalizing of array\nliterals converts them into an array object and thus looses\nthe ability of using concrete type cast functionality of each literal\narray element.\n\nAll these issues can be solved by removing early \u201con-function-resolving\u201d\nnormalization and early literal conversion.\nInstead the complete symbol tree will be normalized after it has been build.\n\nAdditionally we differentiate between explicit and implicit casts.\nThis was already the case from a user perspective but internally hidden\ndue to the special early literal cast (conversion) logic.\nAn example where explicit casts are possible but implicit casts not\nis the supported `ObjectType<->StringType` conversion to allow object\nliterals of type JSON string.\nThis is still allowed on explicit casts but not on implicit ones."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}