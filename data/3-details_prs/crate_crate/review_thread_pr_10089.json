{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Njc1Njk3", "number": 10089, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOToxNDo0NVrOEGRCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoyMlrOEGRgGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDA2MDU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/planner/operators/FetchRewriteTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOToxNDo0NVrOGk9C2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo1NDozMVrOGlCTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMjA3Mw==", "bodyText": "In some tests, you don't use signatures to create function instances. e.g. JoinPhaseTest, FilterProjectionTest, etc. is it done by intention or it is just slipped from the sight?", "url": "https://github.com/crate/crate/pull/10089#discussion_r441402073", "createdAt": "2020-06-17T09:14:45Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/planner/operators/FetchRewriteTest.java", "diffHunk": "@@ -52,6 +56,16 @@\n \n public class FetchRewriteTest extends CrateDummyClusterServiceUnitTest {\n \n+    public static Function of(String name, List<Symbol> arguments, DataType<?> returnType) {\n+        return new Function(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4ODI0Mg==", "bodyText": "Somehow by intention, in these tests the function registry is not used so it doesn't really matter. This will change anyway when the signature() method is required to return non-null values, I'm already working on this a part of removing the old function registry.", "url": "https://github.com/crate/crate/pull/10089#discussion_r441488242", "createdAt": "2020-06-17T11:54:31Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/planner/operators/FetchRewriteTest.java", "diffHunk": "@@ -52,6 +56,16 @@\n \n public class FetchRewriteTest extends CrateDummyClusterServiceUnitTest {\n \n+    public static Function of(String name, List<Symbol> arguments, DataType<?> returnType) {\n+        return new Function(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMjA3Mw=="}, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDEzNjEzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoxNFrOGk9zGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo1OToyNVrOGlEiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg==", "bodyText": "just a question: why it is matched with object(k, v) shouldn't we match it with just object such as the map can contain the v type variable of different types?", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414426", "createdAt": "2020-06-17T09:34:14Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "diffHunk": "@@ -23,46 +23,71 @@\n \n import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n-import io.crate.expression.symbol.Function;\n-import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n-import io.crate.types.DataType;\n-import io.crate.types.DataTypes;\n-import io.crate.types.ObjectType;\n-\n-import java.util.Arrays;\n-import java.util.List;\n+import io.crate.metadata.functions.Signature;\n+\n+import javax.annotation.Nullable;\n import java.util.Map;\n \n-import static io.crate.expression.operator.CmpOperator.CmpResolver.createInfo;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public final class EqOperator extends Operator<Object> {\n \n     public static final String NAME = \"op_=\";\n \n-    private final FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"E\"),\n+        parseTypeSignature(\"E\"),\n+        Operator.RETURN_TYPE.getTypeSignature()\n+    ).withTypeVariableConstraints(typeVariable(\"E\"));\n+\n+    public static final Signature SIGNATURE_OBJECTS = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"object(K, V)\"),\n+        parseTypeSignature(\"object(K, V)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4NzAxNA==", "bodyText": "good point, will check.", "url": "https://github.com/crate/crate/pull/10089#discussion_r441487014", "createdAt": "2020-06-17T11:51:54Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "diffHunk": "@@ -23,46 +23,71 @@\n \n import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n-import io.crate.expression.symbol.Function;\n-import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n-import io.crate.types.DataType;\n-import io.crate.types.DataTypes;\n-import io.crate.types.ObjectType;\n-\n-import java.util.Arrays;\n-import java.util.List;\n+import io.crate.metadata.functions.Signature;\n+\n+import javax.annotation.Nullable;\n import java.util.Map;\n \n-import static io.crate.expression.operator.CmpOperator.CmpResolver.createInfo;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public final class EqOperator extends Operator<Object> {\n \n     public static final String NAME = \"op_=\";\n \n-    private final FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"E\"),\n+        parseTypeSignature(\"E\"),\n+        Operator.RETURN_TYPE.getTypeSignature()\n+    ).withTypeVariableConstraints(typeVariable(\"E\"));\n+\n+    public static final Signature SIGNATURE_OBJECTS = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"object(K, V)\"),\n+        parseTypeSignature(\"object(K, V)\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg=="}, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNDkwNw==", "bodyText": "Figured out that we don't need the special ObjectEqOperator at all as our ObjectType.equals is checking also inner types and our signature binder allows coercion between un-typed objects and typed once. Pushed a fixup.", "url": "https://github.com/crate/crate/pull/10089#discussion_r441524907", "createdAt": "2020-06-17T12:59:25Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "diffHunk": "@@ -23,46 +23,71 @@\n \n import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n-import io.crate.expression.symbol.Function;\n-import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n-import io.crate.types.DataType;\n-import io.crate.types.DataTypes;\n-import io.crate.types.ObjectType;\n-\n-import java.util.Arrays;\n-import java.util.List;\n+import io.crate.metadata.functions.Signature;\n+\n+import javax.annotation.Nullable;\n import java.util.Map;\n \n-import static io.crate.expression.operator.CmpOperator.CmpResolver.createInfo;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public final class EqOperator extends Operator<Object> {\n \n     public static final String NAME = \"op_=\";\n \n-    private final FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"E\"),\n+        parseTypeSignature(\"E\"),\n+        Operator.RETURN_TYPE.getTypeSignature()\n+    ).withTypeVariableConstraints(typeVariable(\"E\"));\n+\n+    public static final Signature SIGNATURE_OBJECTS = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"object(K, V)\"),\n+        parseTypeSignature(\"object(K, V)\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg=="}, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDEzNjU5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoyMlrOGk9zbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyNjoyN1rOGlDVrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ==", "bodyText": "Do you think it would be worth following up on this to format the function name in a way that is closer to what the user entered? So that we'd get something like Unknown function: integer_array = ANY(integer_array)", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414511", "createdAt": "2020-06-17T09:34:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -369,7 +369,7 @@ public void testParameterExpressionInLikeAny() throws Exception {\n \n     @Test\n     public void testAnyWithArrayOnBothSidesResultsInNiceErrorMessage() {\n-        expectedException.expectMessage(\"Cannot cast `xs` of type `integer_array` to type `integer`\");\n+        expectedException.expectMessage(\"unknown function: any_=(integer_array, integer_array)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ4ODcwNQ==", "bodyText": "Yes good point. Will follow up here dedicated or do you prefer to add it to this PR?", "url": "https://github.com/crate/crate/pull/10089#discussion_r441488705", "createdAt": "2020-06-17T11:55:23Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -369,7 +369,7 @@ public void testParameterExpressionInLikeAny() throws Exception {\n \n     @Test\n     public void testAnyWithArrayOnBothSidesResultsInNiceErrorMessage() {\n-        expectedException.expectMessage(\"Cannot cast `xs` of type `integer_array` to type `integer`\");\n+        expectedException.expectMessage(\"unknown function: any_=(integer_array, integer_array)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ=="}, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwNTE5Ng==", "bodyText": "Follow up sounds good", "url": "https://github.com/crate/crate/pull/10089#discussion_r441505196", "createdAt": "2020-06-17T12:26:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -369,7 +369,7 @@ public void testParameterExpressionInLikeAny() throws Exception {\n \n     @Test\n     public void testAnyWithArrayOnBothSidesResultsInNiceErrorMessage() {\n-        expectedException.expectMessage(\"Cannot cast `xs` of type `integer_array` to type `integer`\");\n+        expectedException.expectMessage(\"unknown function: any_=(integer_array, integer_array)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ=="}, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1414, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}