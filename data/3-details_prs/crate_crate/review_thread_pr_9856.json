{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDQ3MDYz", "number": 9856, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMzozN1rODwbF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMzozN1rODwbF8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTAyMTMxOnYy", "diffSide": "LEFT", "path": "sql/src/main/java/io/crate/planner/operators/Union.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMzozN1rOGDanGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODozNDo1NVrOGDkq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNDkwNQ==", "bodyText": "This removed the resultDescription.orderBy information, which is required so that further merges on top of the union are ordered correctly.\nThe UnionExecutionPlan carries on the limit + offset, so that later operators which force a merge apply it correctly.", "url": "https://github.com/crate/crate/pull/9856#discussion_r406234905", "createdAt": "2020-04-09T14:13:37Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/Union.java", "diffHunk": "@@ -195,21 +191,4 @@ public long estimatedRowSize() {\n     public <C, R> R accept(LogicalPlanVisitor<C, R> visitor, C context) {\n         return visitor.visitUnion(this, context);\n     }\n-\n-    /**\n-     * Wraps the plan inside a Merge plan if limit or offset need to be applied.\n-     */\n-    private static ExecutionPlan addMergeIfNeeded(ExecutionPlan plan, PlannerContext plannerContext) {\n-        ResultDescription resultDescription = plan.resultDescription();\n-        if (resultDescription.hasRemainingLimitOrOffset()) {\n-            // Do a merge because we have to apply a limit/offset projection\n-            //\n-            // Note: Currently, this is performed on the handler node. It would be possible to\n-            // do this on another involved node instead but we don't do that for now because\n-            // the Merge of the union itself is always performed on the handler. So the\n-            // performance gain would be small.\n-            return Merge.ensureOnHandler(plan, plannerContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f2513d1173b8c98d040278f56f502cf45e6ac7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5OTcyNg==", "bodyText": "@mkleen had to push a fixup because if there is a limit - order by operator beneath the union   it must be merged before the union. So I had to re-add this part", "url": "https://github.com/crate/crate/pull/9856#discussion_r406399726", "createdAt": "2020-04-09T18:34:55Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/Union.java", "diffHunk": "@@ -195,21 +191,4 @@ public long estimatedRowSize() {\n     public <C, R> R accept(LogicalPlanVisitor<C, R> visitor, C context) {\n         return visitor.visitUnion(this, context);\n     }\n-\n-    /**\n-     * Wraps the plan inside a Merge plan if limit or offset need to be applied.\n-     */\n-    private static ExecutionPlan addMergeIfNeeded(ExecutionPlan plan, PlannerContext plannerContext) {\n-        ResultDescription resultDescription = plan.resultDescription();\n-        if (resultDescription.hasRemainingLimitOrOffset()) {\n-            // Do a merge because we have to apply a limit/offset projection\n-            //\n-            // Note: Currently, this is performed on the handler node. It would be possible to\n-            // do this on another involved node instead but we don't do that for now because\n-            // the Merge of the union itself is always performed on the handler. So the\n-            // performance gain would be small.\n-            return Merge.ensureOnHandler(plan, plannerContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNDkwNQ=="}, "originalCommit": {"oid": "17f2513d1173b8c98d040278f56f502cf45e6ac7"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1598, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}