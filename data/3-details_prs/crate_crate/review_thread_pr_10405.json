{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjM1NDc2", "number": 10405, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMjoxNFrOEaDwRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTowODo0OFrOEaep-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzU5OTQzOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjozMjoxNFrOHDPtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo0ODowMlrOHDQX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NTEzNg==", "bodyText": "The (if not disabled) part left me wondering a bit before I figured out what it means.\nMaybe something like the following would clarify it?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            every other object type, values are validated and indexed (if not disabled).\n          \n          \n            \n            every other object type, values are validated and indexed, unless an explicit ``INDEX OFF`` clause is used to disable indexing.", "url": "https://github.com/crate/crate/pull/10405#discussion_r473165136", "createdAt": "2020-08-19T16:32:14Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -968,9 +968,11 @@ not mapped according to their type, which is therefor not guessed as well. You\n can in fact add any value to an added column of the same name. The first value\n added does not determine what you can add further, like with ``dynamic``\n objects.\n+Subcolumn definitions inside an ``ignored`` object will behave the same like on\n+every other object type, values are validated and indexed (if not disabled).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE3NjAzOQ==", "bodyText": "I wonder if we should actually re-phrase the full paragraph. Something like the following maybe?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            every other object type, values are validated and indexed (if not disabled).\n          \n          \n            \n            The third option is ``ignored``. Explicitly defined columns within an ``ignored`` object behave the same as those within object columns declared as ``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly turned off using ``INDEX OFF`` and values inserted are validated. The difference is that with ``ignored``, dynamically added columns do not result in a schema update, and the values won't be indexed. This allows to store values with a mixed type under the same key.\n          \n          \n            \n            \n          \n          \n            \n            An example::\n          \n          \n            \n            \n          \n          \n            \n              cr> CREATE TABLE metrics (\n          \n          \n            \n              ...   id TEXT PRIMARY KEY,\n          \n          \n            \n              ...   payload OBJECT (IGNORED) as (\n          \n          \n            \n              ...     tag TEXT\n          \n          \n            \n              ...   )\n          \n          \n            \n              ... );\n          \n          \n            \n            \n          \n          \n            \n              cr> INSERT INTO metrics (id, payload) values ('1', {\"tag\"='AT', \"value\"=30}');\n          \n          \n            \n              cr> INSERT INTO metrics (id, payload) values ('2', {\"tag\": 'AT', \"value\"='str'});\n          \n          \n            \n            \n          \n          \n            \n              cr> SELECT payload FROM metrics ORDER BY id;", "url": "https://github.com/crate/crate/pull/10405#discussion_r473176039", "createdAt": "2020-08-19T16:48:02Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -968,9 +968,11 @@ not mapped according to their type, which is therefor not guessed as well. You\n can in fact add any value to an added column of the same name. The first value\n added does not determine what you can add further, like with ``dynamic``\n objects.\n+Subcolumn definitions inside an ``ignored`` object will behave the same like on\n+every other object type, values are validated and indexed (if not disabled).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2NTEzNg=="}, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcyNTMzOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMToyMlrOHDRAJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1MToyM1rOHDxnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjM0MQ==", "bodyText": "Also a suggestion here to elaborate a bit on why it is slower and to distinguish between the ordering and filtering case, because ordering is not that much more expensive compared to the difference when using these columns in the WHERE clause. I also noticed that the part about not being able to use aggregations is incorrect:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               Filtering by and ordering on any undefined subcolumn is possible but very\n          \n          \n            \n               performance intensive. Undefined subcolumns of ``ignored`` objects are a\n          \n          \n            \n               *black box* for the storage engine, so the filtering/ordering is done using\n          \n          \n            \n               an expensive table scan and a filter/order function outside of the storage\n          \n          \n            \n               engine. Using undefined subcolumns of ``ignored`` objects for grouping or\n          \n          \n            \n               aggregations is not possible and will result in an exception unless explicit\n          \n          \n            \n               casted.\n          \n          \n            \n               Given that dynamically added sub-columns of an ``ignored`` objects are not indexed, filter operations on these columns cannot utilize the index and instead a value lookup is performed for each matching row. This can be mitigated by combining a filter using the ``AND`` clause with other predicates on indexed columns.\n          \n          \n            \n            \n          \n          \n            \n               Futhermore, values for dynamically added sub-columns of an ``ignored`` objects aren't stored in a column store, which means that ordering on these columns or using them with aggregates is also slower than using the same operations on regular columns. For some operations it may also be necessary to add an explicit type cast because there is no type information available in the schema. An example::\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n               cr> SELECT arbitrary(payload['value']::text) FROM metrics;\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            Given that it is possible have values of different types within the same sub-column of an ignored objects, aggregations may fail at runtime::\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n               cr> SELECT sum(payload['value']::bigint) FROM metrics;", "url": "https://github.com/crate/crate/pull/10405#discussion_r473186341", "createdAt": "2020-08-19T17:01:22Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -991,12 +993,13 @@ inserted into it, but otherwise ignore them.\n .. NOTE::\n \n    ``Ignored`` objects should be mainly used for storing and fetching.\n-   Filtering by and ordering on them is possible but very performance\n-   intensive. ``Ignored`` objects are a *black box* for the storage engine, so\n-   the filtering/ordering is done using an expensive table scan and a\n-   filter/order function outside of the storage engine. Using ``ignored``\n-   objects for grouping or aggregations is not possible at all and will result\n-   in an exception or ``NULL`` value if used with excplicit casts.\n+   Filtering by and ordering on any undefined subcolumn is possible but very\n+   performance intensive. Undefined subcolumns of ``ignored`` objects are a\n+   *black box* for the storage engine, so the filtering/ordering is done using\n+   an expensive table scan and a filter/order function outside of the storage\n+   engine. Using undefined subcolumns of ``ignored`` objects for grouping or\n+   aggregations is not possible and will result in an exception unless explicit\n+   casted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MDA3Mg==", "bodyText": "The arbitrary example is probably not deterministic, so maybe a filter or so will be needed in addition - or you could come up with a better example?", "url": "https://github.com/crate/crate/pull/10405#discussion_r473190072", "createdAt": "2020-08-19T17:05:06Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -991,12 +993,13 @@ inserted into it, but otherwise ignore them.\n .. NOTE::\n \n    ``Ignored`` objects should be mainly used for storing and fetching.\n-   Filtering by and ordering on them is possible but very performance\n-   intensive. ``Ignored`` objects are a *black box* for the storage engine, so\n-   the filtering/ordering is done using an expensive table scan and a\n-   filter/order function outside of the storage engine. Using ``ignored``\n-   objects for grouping or aggregations is not possible at all and will result\n-   in an exception or ``NULL`` value if used with excplicit casts.\n+   Filtering by and ordering on any undefined subcolumn is possible but very\n+   performance intensive. Undefined subcolumns of ``ignored`` objects are a\n+   *black box* for the storage engine, so the filtering/ordering is done using\n+   an expensive table scan and a filter/order function outside of the storage\n+   engine. Using undefined subcolumns of ``ignored`` objects for grouping or\n+   aggregations is not possible and will result in an exception unless explicit\n+   casted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjM0MQ=="}, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwMzYzOQ==", "bodyText": "For some operations it may also be necessary to add an explicit type cast because there is no type information available in the schema\n\nAfaik the explicit type cast is always  needed despite simple selecting the column. (functions, aggs, grouping, ordering, filtering, etc.)", "url": "https://github.com/crate/crate/pull/10405#discussion_r473703639", "createdAt": "2020-08-20T07:38:17Z", "author": {"login": "seut"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -991,12 +993,13 @@ inserted into it, but otherwise ignore them.\n .. NOTE::\n \n    ``Ignored`` objects should be mainly used for storing and fetching.\n-   Filtering by and ordering on them is possible but very performance\n-   intensive. ``Ignored`` objects are a *black box* for the storage engine, so\n-   the filtering/ordering is done using an expensive table scan and a\n-   filter/order function outside of the storage engine. Using ``ignored``\n-   objects for grouping or aggregations is not possible at all and will result\n-   in an exception or ``NULL`` value if used with excplicit casts.\n+   Filtering by and ordering on any undefined subcolumn is possible but very\n+   performance intensive. Undefined subcolumns of ``ignored`` objects are a\n+   *black box* for the storage engine, so the filtering/ordering is done using\n+   an expensive table scan and a filter/order function outside of the storage\n+   engine. Using undefined subcolumns of ``ignored`` objects for grouping or\n+   aggregations is not possible and will result in an exception unless explicit\n+   casted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjM0MQ=="}, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyMDY0MA==", "bodyText": "Afaik the explicit type cast is always needed despite simple selecting the column. (functions, aggs, grouping, ordering, filtering, etc.)\n\nI think due to the type inference it can be omitted if a function overload is restrictive enough. The following works:\ncreate table tbl (id text primary key, payload object (ignored));\ninsert into tbl (id, payload) values ('1', {x=10});\ninsert into tbl (id, payload) values ('2', {x=10});\nrefresh table tbl;\nselect sum(payload['x']) from tbl;", "url": "https://github.com/crate/crate/pull/10405#discussion_r473720640", "createdAt": "2020-08-20T07:51:23Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -991,12 +993,13 @@ inserted into it, but otherwise ignore them.\n .. NOTE::\n \n    ``Ignored`` objects should be mainly used for storing and fetching.\n-   Filtering by and ordering on them is possible but very performance\n-   intensive. ``Ignored`` objects are a *black box* for the storage engine, so\n-   the filtering/ordering is done using an expensive table scan and a\n-   filter/order function outside of the storage engine. Using ``ignored``\n-   objects for grouping or aggregations is not possible at all and will result\n-   in an exception or ``NULL`` value if used with excplicit casts.\n+   Filtering by and ordering on any undefined subcolumn is possible but very\n+   performance intensive. Undefined subcolumns of ``ignored`` objects are a\n+   *black box* for the storage engine, so the filtering/ordering is done using\n+   an expensive table scan and a filter/order function outside of the storage\n+   engine. Using undefined subcolumns of ``ignored`` objects for grouping or\n+   aggregations is not possible and will result in an exception unless explicit\n+   casted.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjM0MQ=="}, "originalCommit": {"oid": "018dc1883ede4ab37cf473d5b49c0a46365753e5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTk5MTE4OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTowNDozMVrOHD70ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTowNDozMVrOHD70ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4Nzg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            update, and the values won't be indexed. This allows to store values with a\n          \n          \n            \n            update and the values won't be indexed. This allows you to store values with a", "url": "https://github.com/crate/crate/pull/10405#discussion_r473887882", "createdAt": "2020-08-20T11:04:31Z", "author": {"login": "norosa"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -962,41 +962,92 @@ subcolumns. One can retrieve them, sort by them and use them in where clauses.\n ``ignored``\n -----------\n \n-The third option is ``ignored`` which results in an object that allows\n-inserting new subcolumns but this adding will not affect the schema, they are\n-not mapped according to their type, which is therefor not guessed as well. You\n-can in fact add any value to an added column of the same name. The first value\n-added does not determine what you can add further, like with ``dynamic``\n-objects.\n-\n-An object configured like this will simply accept and return the columns\n-inserted into it, but otherwise ignore them.\n-\n+The third option is ``ignored``. Explicitly defined columns within an\n+``ignored`` object behave the same as those within object columns declared as\n+``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly\n+turned off using ``INDEX OFF`` and values inserted are validated. The difference\n+is that with ``ignored``, dynamically added columns do not result in a schema\n+update, and the values won't be indexed. This allows to store values with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01b2381b013f6650a1a951beb46ef2ad4dfe12a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjAwNjk2OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTowODo0OVrOHD79mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOTo1NFrOHEBEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MDIwMg==", "bodyText": "can you clarify what \"and values inserted are validated\" means? the passive voice makes it a little ambiguous. a switch to active voice would probably clear it up\nis the user expected to validate values when inserting, or does CrateDB validate values when the user tries to insert them? (another way of putting it: is the validation a part of a \"columns are indexed unless X and Y\" precondition or is validation dependant upon indexing?)", "url": "https://github.com/crate/crate/pull/10405#discussion_r473890202", "createdAt": "2020-08-20T11:08:49Z", "author": {"login": "norosa"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -962,41 +962,92 @@ subcolumns. One can retrieve them, sort by them and use them in where clauses.\n ``ignored``\n -----------\n \n-The third option is ``ignored`` which results in an object that allows\n-inserting new subcolumns but this adding will not affect the schema, they are\n-not mapped according to their type, which is therefor not guessed as well. You\n-can in fact add any value to an added column of the same name. The first value\n-added does not determine what you can add further, like with ``dynamic``\n-objects.\n-\n-An object configured like this will simply accept and return the columns\n-inserted into it, but otherwise ignore them.\n-\n+The third option is ``ignored``. Explicitly defined columns within an\n+``ignored`` object behave the same as those within object columns declared as\n+``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly\n+turned off using ``INDEX OFF`` and values inserted are validated. The difference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01b2381b013f6650a1a951beb46ef2ad4dfe12a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMDY3NA==", "bodyText": "CrateDB validates the values according to the defined schema.  So the type must fit, and if there are further constraints, like CHECK the values must pass these checks.\nNot sure how to phrase that better in a succinct way.", "url": "https://github.com/crate/crate/pull/10405#discussion_r473920674", "createdAt": "2020-08-20T12:08:05Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -962,41 +962,92 @@ subcolumns. One can retrieve them, sort by them and use them in where clauses.\n ``ignored``\n -----------\n \n-The third option is ``ignored`` which results in an object that allows\n-inserting new subcolumns but this adding will not affect the schema, they are\n-not mapped according to their type, which is therefor not guessed as well. You\n-can in fact add any value to an added column of the same name. The first value\n-added does not determine what you can add further, like with ``dynamic``\n-objects.\n-\n-An object configured like this will simply accept and return the columns\n-inserted into it, but otherwise ignore them.\n-\n+The third option is ``ignored``. Explicitly defined columns within an\n+``ignored`` object behave the same as those within object columns declared as\n+``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly\n+turned off using ``INDEX OFF`` and values inserted are validated. The difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MDIwMg=="}, "originalCommit": {"oid": "c01b2381b013f6650a1a951beb46ef2ad4dfe12a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMjc2Nw==", "bodyText": "Sorry but I don't get what can be ambiguous with \"values are validated\".\nIf a user should validate it, then it wouldn't be \"are validated\".\nCould you please make a suggestion?\nWould using ... and column constraints and data type restrictions are ensured instead help?", "url": "https://github.com/crate/crate/pull/10405#discussion_r473922767", "createdAt": "2020-08-20T12:12:04Z", "author": {"login": "seut"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -962,41 +962,92 @@ subcolumns. One can retrieve them, sort by them and use them in where clauses.\n ``ignored``\n -----------\n \n-The third option is ``ignored`` which results in an object that allows\n-inserting new subcolumns but this adding will not affect the schema, they are\n-not mapped according to their type, which is therefor not guessed as well. You\n-can in fact add any value to an added column of the same name. The first value\n-added does not determine what you can add further, like with ``dynamic``\n-objects.\n-\n-An object configured like this will simply accept and return the columns\n-inserted into it, but otherwise ignore them.\n-\n+The third option is ``ignored``. Explicitly defined columns within an\n+``ignored`` object behave the same as those within object columns declared as\n+``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly\n+turned off using ``INDEX OFF`` and values inserted are validated. The difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MDIwMg=="}, "originalCommit": {"oid": "c01b2381b013f6650a1a951beb46ef2ad4dfe12a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MzkzMQ==", "bodyText": "@seut the sentence can be read two ways:\n\n\n\"The columns are indexed unless indexing is explicitly turned off using INDEX OFF and, separately, values inserted are validated.\"\n\n\n\"The columns are indexed unless indexing is explicitly turned off using INDEX OFF and unless values inserted are validated.\" (which doesn't make much logical sense to me but the grammar is ambiguous enough to give me pause)\n\n\nbased on @mfussenegger's response, I take it that the first is the correct interpretation. so how about this:\n\nExplicitly defined columns within an ignored object behave the same as those within object columns declared as dynamic or strict (e.g., column constraints are still enforced, columns that would be indexed are still indexed, and so on).", "url": "https://github.com/crate/crate/pull/10405#discussion_r473973931", "createdAt": "2020-08-20T13:29:54Z", "author": {"login": "norosa"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -962,41 +962,92 @@ subcolumns. One can retrieve them, sort by them and use them in where clauses.\n ``ignored``\n -----------\n \n-The third option is ``ignored`` which results in an object that allows\n-inserting new subcolumns but this adding will not affect the schema, they are\n-not mapped according to their type, which is therefor not guessed as well. You\n-can in fact add any value to an added column of the same name. The first value\n-added does not determine what you can add further, like with ``dynamic``\n-objects.\n-\n-An object configured like this will simply accept and return the columns\n-inserted into it, but otherwise ignore them.\n-\n+The third option is ``ignored``. Explicitly defined columns within an\n+``ignored`` object behave the same as those within object columns declared as\n+``dynamic`` or ``strict``. The columns are indexed unless indexing is explicitly\n+turned off using ``INDEX OFF`` and values inserted are validated. The difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MDIwMg=="}, "originalCommit": {"oid": "c01b2381b013f6650a1a951beb46ef2ad4dfe12a"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1182, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}