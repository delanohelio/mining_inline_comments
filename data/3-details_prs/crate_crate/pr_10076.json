{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTc0OTQ0", "number": 10076, "title": "Add query optimizer incl. rules for cast optimizations", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis replaces the special literal downcast logic inside the deprecated/old function matching which caused bugs on arithmetic.\nThe optimizer runs before creating any RoutedCollectPhase while building execution plans and thus only runs once per query.\nRelates #9901.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-11T15:46:23Z", "url": "https://github.com/crate/crate/pull/10076", "merged": true, "mergeCommit": {"oid": "9f63a1d9691de9abdfe09c6e49fc5e4a937e589a"}, "closed": true, "closedAt": "2020-06-15T15:52:57Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqQeTggBqjM0MzQ4NTkwMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcriOyagH2gAyNDMzMTc0OTQ0OmVlNzcwYWM4YTVlY2ZjZWQ5NDQ0MTMwOTNiYjA3ZmU4MjQ3MTU5MTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11262e5780cd988604cee74ed3bd1e1164de60c9", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/11262e5780cd988604cee74ed3bd1e1164de60c9", "committedDate": "2020-06-11T15:45:02Z", "message": "Add query optimizer incl. rules for cast optimizations\n\nThis replaces the special literal downcast logic inside the deprecated/old\nfunction matching which caused bugs on arithmetics.\n\nThe optimizer runs before creating any `RoutedCollectPhase` while building\nexecution plans and thus only runs once per query."}, "afterCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/3efa9b457e875100a2dbf2534202086f68c29177", "committedDate": "2020-06-11T16:02:15Z", "message": "Add query optimizer incl. rules for cast optimizations\n\nThis replaces the special literal downcast logic inside the deprecated/old\nfunction matching which caused bugs on arithmetics.\n\nThe optimizer runs before creating any `RoutedCollectPhase` while building\nexecution plans and thus only runs once per query."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDk1NTIy", "url": "https://github.com/crate/crate/pull/10076#pullrequestreview-429095522", "createdAt": "2020-06-11T16:42:23Z", "commit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0MjoyNFrOGil2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0MjoyNFrOGil2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNDg0Nw==", "bodyText": "I wonder if we should trigger it inside the WhereClauseOptimizer instead to avoid to trigger it in 3 (select/update/delete) plans.", "url": "https://github.com/crate/crate/pull/10076#discussion_r438924847", "createdAt": "2020-06-11T16:42:24Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/planner/operators/Collect.java", "diffHunk": "@@ -258,7 +260,7 @@ private RoutedCollectPhase createPhase(PlannerContext plannerContext, java.util.\n                 ? Lists2.map(boundOutputs, DocReferences::toSourceLookup)\n                 : boundOutputs,\n             Collections.emptyList(),\n-            where.queryOrFallback(),\n+            Optimizer.optimizeQuery(plannerContext, where.queryOrFallback()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5Mjg3NzY4", "url": "https://github.com/crate/crate/pull/10076#pullrequestreview-429287768", "createdAt": "2020-06-11T21:04:24Z", "commit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTowNDoyNFrOGiutIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMToyOToyOVrOGivWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2OTk4NQ==", "bodyText": "Maybe we could create a new symbol or expression package within optimizer.\nThis stuff isn't necessarily reserved for the collect pieces.", "url": "https://github.com/crate/crate/pull/10076#discussion_r439069985", "createdAt": "2020-06-11T21:04:24Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/collect/Optimizer.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.collect;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3MDQ4Nw==", "bodyText": "() -> Version.CURRENT isn't the minNodeVersionInCluster. Is this correct?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439070487", "createdAt": "2020-06-11T21:05:37Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/collect/Optimizer.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.collect;\n+\n+import io.crate.analyze.expressions.ExpressionAnalyzer;\n+import io.crate.common.collections.Lists2;\n+import io.crate.exceptions.ConversionException;\n+import io.crate.expression.symbol.FunctionCopyVisitor;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.Functions;\n+import io.crate.planner.PlannerContext;\n+import io.crate.planner.optimizer.collect.rule.MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastOnAnyOperatorsWhenLeftIsReference;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastOnAnyOperatorsWhenRightIsReference;\n+import io.crate.planner.optimizer.collect.rule.MoveSubscriptOnReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.matcher.Captures;\n+import io.crate.planner.optimizer.matcher.Match;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class Optimizer {\n+\n+    public static Symbol optimizeQuery(PlannerContext plannerContext, Symbol query) {\n+        Optimizer optimizer = new Optimizer(\n+            plannerContext.functions(),\n+            plannerContext.transactionContext(),\n+            () -> Version.CURRENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3MTAyMQ==", "bodyText": "Based on the types and name it is hard to guess what String and List<Symbol>, Symbol here are referring to. Maybe it would be worth to introduce a named specific interface?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439071021", "createdAt": "2020-06-11T21:06:49Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/collect/Optimizer.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.collect;\n+\n+import io.crate.analyze.expressions.ExpressionAnalyzer;\n+import io.crate.common.collections.Lists2;\n+import io.crate.exceptions.ConversionException;\n+import io.crate.expression.symbol.FunctionCopyVisitor;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.Functions;\n+import io.crate.planner.PlannerContext;\n+import io.crate.planner.optimizer.collect.rule.MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastOnAnyOperatorsWhenLeftIsReference;\n+import io.crate.planner.optimizer.collect.rule.MoveReferenceCastToLiteralCastOnAnyOperatorsWhenRightIsReference;\n+import io.crate.planner.optimizer.collect.rule.MoveSubscriptOnReferenceCastToLiteralCastInsideOperators;\n+import io.crate.planner.optimizer.matcher.Captures;\n+import io.crate.planner.optimizer.matcher.Match;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+public class Optimizer {\n+\n+    public static Symbol optimizeQuery(PlannerContext plannerContext, Symbol query) {\n+        Optimizer optimizer = new Optimizer(\n+            plannerContext.functions(),\n+            plannerContext.transactionContext(),\n+            () -> Version.CURRENT,\n+            List.of(\n+                MoveReferenceCastToLiteralCastInsideOperators::new,\n+                MoveReferenceCastToLiteralCastOnAnyOperatorsWhenRightIsReference::new,\n+                MoveReferenceCastToLiteralCastOnAnyOperatorsWhenLeftIsReference::new,\n+                MoveSubscriptOnReferenceCastToLiteralCastInsideOperators::new,\n+                MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators::new\n+            )\n+        );\n+        return optimizer.optimize(query);\n+    }\n+\n+    private static final Logger LOGGER = LogManager.getLogger(Optimizer.class);\n+\n+    private final List<Rule<?>> rules;\n+    private final Supplier<Version> minNodeVersionInCluster;\n+    private final Functions functions;\n+    private final Visitor visitor = new Visitor();\n+\n+    public Optimizer(Functions functions,\n+                     CoordinatorTxnCtx coordinatorTxnCtx,\n+                     Supplier<Version> minNodeVersionInCluster,\n+                     List<Function<BiFunction<String, List<Symbol>, Symbol>, Rule<?>>> rules) {\n+        BiFunction<String, List<Symbol>, Symbol> functionResolver =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3MjgzNA==", "bodyText": "Should we try to create some \"matcher\" functions, similar to how isFunction(name, argMatcher...) works that we use in the tests?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439072834", "createdAt": "2020-06-11T21:11:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/collect/rule/MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.collect.rule;\n+\n+import io.crate.expression.scalar.ArrayUpperFunction;\n+import io.crate.expression.symbol.Function;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Functions;\n+import io.crate.planner.optimizer.collect.Rule;\n+import io.crate.planner.optimizer.matcher.Capture;\n+import io.crate.planner.optimizer.matcher.Captures;\n+import io.crate.planner.optimizer.matcher.Pattern;\n+import io.crate.types.DataType;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.BiFunction;\n+\n+import static io.crate.expression.operator.Operators.COMPARISON_OPERATORS;\n+import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_FUNCTION_NAMES;\n+import static io.crate.planner.optimizer.matcher.Pattern.typeOf;\n+\n+\n+public class MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators implements Rule<Function> {\n+\n+    private final Capture<Function> castCapture;\n+    private final Pattern<Function> pattern;\n+    private final BiFunction<String, List<Symbol>, Symbol> functionResolver;\n+    private volatile boolean enabled = true;\n+\n+    public MoveArrayLengthOnReferenceCastToLiteralCastInsideOperators(\n+        BiFunction<String, List<Symbol>, Symbol> functionResolver\n+    ) {\n+        this.functionResolver = functionResolver;\n+        this.castCapture = new Capture<>();\n+        this.pattern = typeOf(Function.class)\n+            .with(f -> COMPARISON_OPERATORS.contains(f.info().ident().name()))\n+            .with(f -> f.arguments().get(1).symbolType() == SymbolType.LITERAL)\n+            .with(f -> Optional.of(f.arguments().get(0)), typeOf(Function.class).capturedAs(castCapture)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3NTc3MQ==", "bodyText": "Is this to assign the name with the predicate? (Just to make sure I understand why this is being changed)\nI'm not sure I see the benefit of doing this in this new way?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439075771", "createdAt": "2020-06-11T21:18:13Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/operator/any/AnyOperators.java", "diffHunk": "@@ -22,42 +22,73 @@\n \n package io.crate.expression.operator.any;\n \n+import io.crate.common.collections.Lists2;\n+import io.crate.expression.operator.LikeOperators;\n import io.crate.expression.operator.OperatorModule;\n import io.crate.sql.tree.ComparisonExpression;\n \n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Locale;\n+import java.util.function.IntPredicate;\n \n import static io.crate.expression.operator.any.AnyOperator.OPERATOR_PREFIX;\n-import static io.crate.expression.operator.any.AnyOperators.Names.EQ;\n-import static io.crate.expression.operator.any.AnyOperators.Names.GT;\n-import static io.crate.expression.operator.any.AnyOperators.Names.GTE;\n-import static io.crate.expression.operator.any.AnyOperators.Names.LT;\n-import static io.crate.expression.operator.any.AnyOperators.Names.LTE;\n-import static io.crate.expression.operator.any.AnyOperators.Names.NEQ;\n \n public final class AnyOperators {\n \n-    private AnyOperators() {\n-    }\n+    public static final List<String> OPERATOR_NAMES = Lists2.concat(\n+        AnyOperators.Type.fullQualifiedNames(),\n+        List.of(\n+            LikeOperators.ANY_LIKE,\n+            LikeOperators.ANY_ILIKE,\n+            LikeOperators.ANY_NOT_LIKE,\n+            LikeOperators.ANY_NOT_ILIKE\n+        )\n+    );\n \n     public static class Names {\n-        public static final String EQ = OPERATOR_PREFIX + ComparisonExpression.Type.EQUAL.getValue();\n-        public static final String GTE = OPERATOR_PREFIX + ComparisonExpression.Type.GREATER_THAN_OR_EQUAL.getValue();\n-        public static final String GT = OPERATOR_PREFIX + ComparisonExpression.Type.GREATER_THAN.getValue();\n-        public static final String LTE = OPERATOR_PREFIX + ComparisonExpression.Type.LESS_THAN_OR_EQUAL.getValue();\n-        public static final String LT = OPERATOR_PREFIX + ComparisonExpression.Type.LESS_THAN.getValue();\n-        public static final String NEQ = OPERATOR_PREFIX + ComparisonExpression.Type.NOT_EQUAL.getValue();\n+        public static final String EQ = Type.EQ.fullQualifiedName;\n+        public static final String GTE = Type.GTE.fullQualifiedName;\n+        public static final String GT = Type.GT.fullQualifiedName;\n+        public static final String LTE = Type.LTE.fullQualifiedName;\n+        public static final String LT = Type.LT.fullQualifiedName;\n+        public static final String NEQ = Type.NEQ.fullQualifiedName;\n+    }\n+\n+    public enum Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3NzM4MQ==", "bodyText": "Looks like this is only used in tests. Maybe annotate with @VisibleForTesting", "url": "https://github.com/crate/crate/pull/10076#discussion_r439077381", "createdAt": "2020-06-11T21:22:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/operator/any/AnyOperators.java", "diffHunk": "@@ -22,42 +22,73 @@\n \n package io.crate.expression.operator.any;\n \n+import io.crate.common.collections.Lists2;\n+import io.crate.expression.operator.LikeOperators;\n import io.crate.expression.operator.OperatorModule;\n import io.crate.sql.tree.ComparisonExpression;\n \n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Locale;\n+import java.util.function.IntPredicate;\n \n import static io.crate.expression.operator.any.AnyOperator.OPERATOR_PREFIX;\n-import static io.crate.expression.operator.any.AnyOperators.Names.EQ;\n-import static io.crate.expression.operator.any.AnyOperators.Names.GT;\n-import static io.crate.expression.operator.any.AnyOperators.Names.GTE;\n-import static io.crate.expression.operator.any.AnyOperators.Names.LT;\n-import static io.crate.expression.operator.any.AnyOperators.Names.LTE;\n-import static io.crate.expression.operator.any.AnyOperators.Names.NEQ;\n \n public final class AnyOperators {\n \n-    private AnyOperators() {\n-    }\n+    public static final List<String> OPERATOR_NAMES = Lists2.concat(\n+        AnyOperators.Type.fullQualifiedNames(),\n+        List.of(\n+            LikeOperators.ANY_LIKE,\n+            LikeOperators.ANY_ILIKE,\n+            LikeOperators.ANY_NOT_LIKE,\n+            LikeOperators.ANY_NOT_ILIKE\n+        )\n+    );\n \n     public static class Names {\n-        public static final String EQ = OPERATOR_PREFIX + ComparisonExpression.Type.EQUAL.getValue();\n-        public static final String GTE = OPERATOR_PREFIX + ComparisonExpression.Type.GREATER_THAN_OR_EQUAL.getValue();\n-        public static final String GT = OPERATOR_PREFIX + ComparisonExpression.Type.GREATER_THAN.getValue();\n-        public static final String LTE = OPERATOR_PREFIX + ComparisonExpression.Type.LESS_THAN_OR_EQUAL.getValue();\n-        public static final String LT = OPERATOR_PREFIX + ComparisonExpression.Type.LESS_THAN.getValue();\n-        public static final String NEQ = OPERATOR_PREFIX + ComparisonExpression.Type.NOT_EQUAL.getValue();\n+        public static final String EQ = Type.EQ.fullQualifiedName;\n+        public static final String GTE = Type.GTE.fullQualifiedName;\n+        public static final String GT = Type.GT.fullQualifiedName;\n+        public static final String LTE = Type.LTE.fullQualifiedName;\n+        public static final String LT = Type.LT.fullQualifiedName;\n+        public static final String NEQ = Type.NEQ.fullQualifiedName;\n+    }\n+\n+    public enum Type {\n+        EQ(ComparisonExpression.Type.EQUAL, result -> result == 0),\n+        NEQ(ComparisonExpression.Type.NOT_EQUAL, result -> result != 0),\n+        GTE(ComparisonExpression.Type.GREATER_THAN_OR_EQUAL, result -> result >= 0),\n+        GT(ComparisonExpression.Type.GREATER_THAN, result -> result > 0),\n+        LTE(ComparisonExpression.Type.LESS_THAN_OR_EQUAL, result -> result <= 0),\n+        LT(ComparisonExpression.Type.LESS_THAN, result -> result < 0);\n+\n+        final String fullQualifiedName;\n+        final String name;\n+        final IntPredicate cmp;\n+\n+        Type(ComparisonExpression.Type type, IntPredicate cmp) {\n+            this.fullQualifiedName = OPERATOR_PREFIX + type.getValue();\n+            this.name = type.getValue();\n+            this.cmp = cmp;\n+        }\n+\n+        public static List<String> fullQualifiedNames() {\n+            return Lists2.map(Arrays.asList(values()), t -> t.fullQualifiedName);\n+        }\n+\n+        public static List<String> operatorSymbols() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3ODkwMg==", "bodyText": "Looks like in the call-sites of this we're now creating comparisons where the types don't match. Shouldn't they still be adjusted somehow?\nI'm afraid that this might bite us later if we don't do that.", "url": "https://github.com/crate/crate/pull/10076#discussion_r439078902", "createdAt": "2020-06-11T21:25:39Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/Symbols.java", "diffHunk": "@@ -170,6 +172,14 @@ public static String format(String messageTmpl, Symbol... symbols) {\n         return String.format(Locale.ENGLISH, messageTmpl, formattedSymbols);\n     }\n \n+    public static Symbol unwrapReferenceFromCast(Symbol symbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA3OTcwMA==", "bodyText": "Looks like this is not used yet. Should we remove this + isEnabled altogether for now?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439079700", "createdAt": "2020-06-11T21:27:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/collect/Rule.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.collect;\n+\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.planner.optimizer.matcher.Captures;\n+import io.crate.planner.optimizer.matcher.Pattern;\n+import org.elasticsearch.Version;\n+\n+public interface Rule<T> {\n+\n+    Pattern<T> pattern();\n+\n+    boolean isEnabled();\n+\n+    void setEnabled(boolean enabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4MDQ4NQ==", "bodyText": "Would date be casted to long without the explicit timestamp cast?\nHow would something like date >= '2019-01-01' behave?", "url": "https://github.com/crate/crate/pull/10076#discussion_r439080485", "createdAt": "2020-06-11T21:29:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/DeleteAnalyzerTest.java", "diffHunk": "@@ -82,7 +82,7 @@ public void testDeleteWhereSysColumn() throws Exception {\n \n     @Test\n     public void testDeleteWherePartitionedByColumn() throws Exception {\n-        AnalyzedDeleteStatement delete = e.analyze(\"delete from parted where date = 1395874800000\");\n+        AnalyzedDeleteStatement delete = e.analyze(\"delete from parted where date = 1395874800000::timestamp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efa9b457e875100a2dbf2534202086f68c29177"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62d821fac2fd87c6d8766943804bbfad168b3f12", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/62d821fac2fd87c6d8766943804bbfad168b3f12", "committedDate": "2020-06-15T09:15:27Z", "message": "fixup! Add query optimizer incl. rules for cast optimizations"}, "afterCommit": {"oid": "597ff9fa442dc639cffd76d3e6f88949086b371b", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/597ff9fa442dc639cffd76d3e6f88949086b371b", "committedDate": "2020-06-15T11:23:48Z", "message": "fixup! Add query optimizer incl. rules for cast optimizations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjAyMDYw", "url": "https://github.com/crate/crate/pull/10076#pullrequestreview-430602060", "createdAt": "2020-06-15T12:38:26Z", "commit": {"oid": "597ff9fa442dc639cffd76d3e6f88949086b371b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozODoyN1rOGjwU4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozODoyN1rOGjwU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NTEyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Symbol apply(String bame, List<Symbol> arguments);\n          \n          \n            \n                Symbol apply(String name, List<Symbol> arguments);\n          \n      \n    \n    \n  \n\ntypo?", "url": "https://github.com/crate/crate/pull/10076#discussion_r440145120", "createdAt": "2020-06-15T12:38:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/planner/optimizer/symbol/FunctionSymbolResolver.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.planner.optimizer.symbol;\n+\n+import io.crate.expression.symbol.Symbol;\n+\n+import java.util.List;\n+\n+public interface FunctionSymbolResolver {\n+\n+    Symbol apply(String bame, List<Symbol> arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597ff9fa442dc639cffd76d3e6f88949086b371b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjA0MjM0", "url": "https://github.com/crate/crate/pull/10076#pullrequestreview-430604234", "createdAt": "2020-06-15T12:41:23Z", "commit": {"oid": "597ff9fa442dc639cffd76d3e6f88949086b371b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc9a5de52f1036949d3283479d78321e5f3e44e", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/5fc9a5de52f1036949d3283479d78321e5f3e44e", "committedDate": "2020-06-15T14:43:09Z", "message": "Add query optimizer incl. rules for cast optimizations\n\nThis replaces the special literal downcast logic inside the deprecated/old\nfunction matching which caused bugs on arithmetics.\n\nThe optimizer runs before creating any `RoutedCollectPhase` while building\nexecution plans and thus only runs once per query."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "597ff9fa442dc639cffd76d3e6f88949086b371b", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/597ff9fa442dc639cffd76d3e6f88949086b371b", "committedDate": "2020-06-15T11:23:48Z", "message": "fixup! Add query optimizer incl. rules for cast optimizations"}, "afterCommit": {"oid": "5fc9a5de52f1036949d3283479d78321e5f3e44e", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/5fc9a5de52f1036949d3283479d78321e5f3e44e", "committedDate": "2020-06-15T14:43:09Z", "message": "Add query optimizer incl. rules for cast optimizations\n\nThis replaces the special literal downcast logic inside the deprecated/old\nfunction matching which caused bugs on arithmetics.\n\nThe optimizer runs before creating any `RoutedCollectPhase` while building\nexecution plans and thus only runs once per query."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee770ac8a5ecfced944413093bb07fe824715919", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/ee770ac8a5ecfced944413093bb07fe824715919", "committedDate": "2020-06-15T15:17:45Z", "message": "Merge branch 'master' into s/cast-symbol-optimizer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3268, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}