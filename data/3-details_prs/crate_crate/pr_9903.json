{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMTEzMDEx", "number": 9903, "title": "Fix signature parameter binding for nested variables of any type.", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis change fixes the corner case in the signature parameters binding\nwhen\n\nthe type variable constraint is a type variable of any type\nhas the variable arity > 1\nused as a nested type parameter of the function type parameter\n\nFor example, the following declared signature that matches function\nsignatures with N arrays of any type as type parameters:\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n\nbut previously it would not be matched for the following type parameters:\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-04-28T13:18:53Z", "url": "https://github.com/crate/crate/pull/9903", "merged": true, "mergeCommit": {"oid": "d6a74bbff6df2cc810c789367407f56bf7237bac"}, "closed": true, "closedAt": "2020-04-29T11:40:10Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccEGJpABqjMyODAzODQ4OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccWSB7ABqjMyODQwNDg0OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44958b9426fabafac7f0e460097bacd287089f91", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/44958b9426fabafac7f0e460097bacd287089f91", "committedDate": "2020-04-28T13:17:48Z", "message": "Fix signature parameter binding for nested variables of any type."}, "afterCommit": {"oid": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "committedDate": "2020-04-28T13:31:26Z", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDkxODQ0", "url": "https://github.com/crate/crate/pull/9903#pullrequestreview-402491844", "createdAt": "2020-04-29T09:13:48Z", "commit": {"oid": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToxMzo0OFrOGN2UjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToxMzo0OFrOGN2UjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE3NDY2OA==", "bodyText": "wouldn't this case result in the same as here? https://github.com/crate/crate/pull/9903/files#diff-f5c59a6293ee86d741b614ade3f78ed4R434\nSo we maybe could just always use replaceTypeVariable()?", "url": "https://github.com/crate/crate/pull/9903#discussion_r417174668", "createdAt": "2020-04-29T09:13:48Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/metadata/functions/SignatureBinder.java", "diffHunk": "@@ -386,18 +386,59 @@ private static void addVarArgTypeSignature(TypeSignature typeSignature,\n                                                Map<String, TypeVariableConstraint> typeVariableConstraints,\n                                                List<TypeSignature> builder,\n                                                int actualArity) {\n-        TypeVariableConstraint typeVariableConstraint = typeVariableConstraints.get(typeSignature.getBaseTypeName());\n+        TypeVariableConstraint typeVariableConstraint = resolveTypeVariableConstraint(\n+            typeSignature,\n+            typeVariableConstraints\n+        );\n         if (typeVariableConstraint != null && typeVariableConstraint.isAnyAllowed()) {\n             // Type variables defaults to be bound to the same type.\n             // To support independent variable type arguments, each vararg must be bound to a dedicated type variable.\n-            String constraintName = \"_generated_\" + typeSignature.getBaseTypeName() + actualArity;\n-            TypeSignature newTypeSignature = new TypeSignature(constraintName);\n-            typeVariableConstraints.put(constraintName, typeVariableOfAnyType(constraintName));\n+            var newConstraintName = \"_generated_\" + typeVariableConstraint + actualArity;\n+            TypeSignature newTypeSignature;\n+            if (typeSignature.getParameters().isEmpty()) {\n+                newTypeSignature = new TypeSignature(newConstraintName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/c43c9b7b9ac3b6068f57ee57b5c83f9435b5479a", "committedDate": "2020-04-28T13:31:26Z", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```"}, "afterCommit": {"oid": "8603f71ece8c1e9160617f487629f28780dab0e8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8603f71ece8c1e9160617f487629f28780dab0e8", "committedDate": "2020-04-29T09:20:42Z", "message": "fixup! Fix signature parameter binding for nested variables of any type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNTE4ODU3", "url": "https://github.com/crate/crate/pull/9903#pullrequestreview-402518857", "createdAt": "2020-04-29T09:53:00Z", "commit": {"oid": "8603f71ece8c1e9160617f487629f28780dab0e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a74bbff6df2cc810c789367407f56bf7237bac", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d6a74bbff6df2cc810c789367407f56bf7237bac", "committedDate": "2020-04-29T10:53:20Z", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8603f71ece8c1e9160617f487629f28780dab0e8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8603f71ece8c1e9160617f487629f28780dab0e8", "committedDate": "2020-04-29T09:20:42Z", "message": "fixup! Fix signature parameter binding for nested variables of any type."}, "afterCommit": {"oid": "d6a74bbff6df2cc810c789367407f56bf7237bac", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d6a74bbff6df2cc810c789367407f56bf7237bac", "committedDate": "2020-04-29T10:53:20Z", "message": "Fix signature parameter binding for nested variables of any type.\n\nThis change fixes the corner case in the signature parameters binding\nwhen the type variable constraint is a type variable of any type, has\nthe variable arity > 1 and used as a nested param of the function param\ntype signature. For example, the following declared signature\n\n```\nSignature.builder()\n    .argumentTypes(parseTypeSignature(\"array(E)\"))\n    .typeVariableConstraints(List.of(typeVariableOfAnyType(\"E\")))\n    .setVariableArity(true)\n\n    .name(...)\n    .kind(...)\n    .returnType(...)\n    .build();\n```\n\nwould be previously bound incorrectly with parameters types. e.g.\n\n```\nList.of(\n    parseTypeSignature(\"array(integer)\"),\n    parseTypeSignature(\"array(text)\")\n)\n```"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3318, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}