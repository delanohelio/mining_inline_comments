{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNTE2NzQ4", "number": 10071, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowOToyOVrOEEs5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0NzozMVrOEF-Rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzY1MjY3OnYy", "diffSide": "RIGHT", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowOToyOVrOGifJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDowOToyOVrOGifJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNTEzOA==", "bodyText": "Is the executeSingleUpload the right place for it? There are also delete blob, read blob, and other methods of BlobContainer.\nIs it possible to do it somewhere in S3ClientSettings?", "url": "https://github.com/crate/crate/pull/10071#discussion_r438815138", "createdAt": "2020-06-11T14:09:29Z", "author": {"login": "kovrus"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3BlobContainer.java", "diffHunk": "@@ -259,7 +259,14 @@ void executeSingleUpload(final S3BlobStore blobStore,\n         try (AmazonS3Reference clientReference = blobStore.clientReference()) {\n             clientReference.client().putObject(putRequest);\n         } catch (final AmazonClientException e) {\n-            throw new IOException(\"Unable to upload object [\" + blobName + \"] using a single upload\", e);\n+            if (!this.blobStore.getRepositoryMetaData().settings().hasValue(S3RepositorySettings.ACCESS_KEY_SETTING.getKey()) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323f7333841b825b9a5f32adf2da3162350b22fc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc2MjQxOnYy", "diffSide": "RIGHT", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxMTowN1rOGjr0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1NTozNVrOGjtMCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg==", "bodyText": "I am just wondering why it should RepositoryVerificationException, we are just trying to configure a client at this point and not yet doing anything with repositories. Also to buildCredentials we don't need to know the repository name  buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository)", "url": "https://github.com/crate/crate/pull/10071#discussion_r440071342", "createdAt": "2020-06-15T10:11:07Z", "author": {"login": "kovrus"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "diffHunk": "@@ -119,11 +121,19 @@ static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings) {\n     }\n \n     // pkg private for tests\n-    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings) {\n+    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository) {\n         final AWSCredentials credentials = clientSettings.credentials;\n         if (credentials == null) {\n             logger.debug(\"Using instance profile credentials\");\n-            return new EC2ContainerCredentialsProviderWrapper();\n+            var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n+            try {\n+                // Try to connect to test credentials\n+                ec2ContainerCredentialsProviderWrapper.getCredentials();\n+                return ec2ContainerCredentialsProviderWrapper;\n+            } catch(SdkClientException e) {\n+                throw new RepositoryVerificationException(repository, \"Cannot find required credentials to create a repository of type s3. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b5386f2c6a2c60025327096c712658ad0bc93f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NzI2NA==", "bodyText": "I think it fits better than an IOException and change all method signatures. Any better idea here ? \n  \n    \n      crate/server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java\n    \n    \n         Line 670\n      in\n      46b8331\n    \n    \n    \n    \n\n        \n          \n           throw new RepositoryVerificationException(metadata.name(), \"path \" + basePath() + \" is not accessible on master node\", exp);", "url": "https://github.com/crate/crate/pull/10071#discussion_r440077264", "createdAt": "2020-06-15T10:22:31Z", "author": {"login": "mkleen"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "diffHunk": "@@ -119,11 +121,19 @@ static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings) {\n     }\n \n     // pkg private for tests\n-    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings) {\n+    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository) {\n         final AWSCredentials credentials = clientSettings.credentials;\n         if (credentials == null) {\n             logger.debug(\"Using instance profile credentials\");\n-            return new EC2ContainerCredentialsProviderWrapper();\n+            var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n+            try {\n+                // Try to connect to test credentials\n+                ec2ContainerCredentialsProviderWrapper.getCredentials();\n+                return ec2ContainerCredentialsProviderWrapper;\n+            } catch(SdkClientException e) {\n+                throw new RepositoryVerificationException(repository, \"Cannot find required credentials to create a repository of type s3. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}, "originalCommit": {"oid": "d4b5386f2c6a2c60025327096c712658ad0bc93f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MjIzOQ==", "bodyText": "but why RepositoryVerificationException if it has nothing to do with repositories?", "url": "https://github.com/crate/crate/pull/10071#discussion_r440092239", "createdAt": "2020-06-15T10:52:39Z", "author": {"login": "kovrus"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "diffHunk": "@@ -119,11 +121,19 @@ static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings) {\n     }\n \n     // pkg private for tests\n-    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings) {\n+    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository) {\n         final AWSCredentials credentials = clientSettings.credentials;\n         if (credentials == null) {\n             logger.debug(\"Using instance profile credentials\");\n-            return new EC2ContainerCredentialsProviderWrapper();\n+            var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n+            try {\n+                // Try to connect to test credentials\n+                ec2ContainerCredentialsProviderWrapper.getCredentials();\n+                return ec2ContainerCredentialsProviderWrapper;\n+            } catch(SdkClientException e) {\n+                throw new RepositoryVerificationException(repository, \"Cannot find required credentials to create a repository of type s3. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}, "originalCommit": {"oid": "d4b5386f2c6a2c60025327096c712658ad0bc93f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MzcwNA==", "bodyText": "This class is part of the repository package.", "url": "https://github.com/crate/crate/pull/10071#discussion_r440093704", "createdAt": "2020-06-15T10:55:35Z", "author": {"login": "mkleen"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Service.java", "diffHunk": "@@ -119,11 +121,19 @@ static ClientConfiguration buildConfiguration(S3ClientSettings clientSettings) {\n     }\n \n     // pkg private for tests\n-    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings) {\n+    static AWSCredentialsProvider buildCredentials(Logger logger, S3ClientSettings clientSettings, String repository) {\n         final AWSCredentials credentials = clientSettings.credentials;\n         if (credentials == null) {\n             logger.debug(\"Using instance profile credentials\");\n-            return new EC2ContainerCredentialsProviderWrapper();\n+            var ec2ContainerCredentialsProviderWrapper = new EC2ContainerCredentialsProviderWrapper();\n+            try {\n+                // Try to connect to test credentials\n+                ec2ContainerCredentialsProviderWrapper.getCredentials();\n+                return ec2ContainerCredentialsProviderWrapper;\n+            } catch(SdkClientException e) {\n+                throw new RepositoryVerificationException(repository, \"Cannot find required credentials to create a repository of type s3. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM0Mg=="}, "originalCommit": {"oid": "d4b5386f2c6a2c60025327096c712658ad0bc93f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTczMDgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToxNTo0OFrOGkSm_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDowNzo1MlrOGkUfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw==", "bodyText": "if we introduce a new CrateException do we need to have a unique error code? Do we also have to reflect changes here \n  \n    \n      crate/server/src/main/java/io/crate/exceptions/SQLExceptions.java\n    \n    \n        Lines 144 to 163\n      in\n      ad02ff5\n    \n    \n    \n    \n\n        \n          \n           if (e instanceof CrateException) { \n        \n\n        \n          \n               CrateException crateException = (CrateException) e; \n        \n\n        \n          \n               if (e instanceof ValidationException) { \n        \n\n        \n          \n                   errorCode = 4000 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.BAD_REQUEST; \n        \n\n        \n          \n               } else if (e instanceof UnauthorizedException) { \n        \n\n        \n          \n                   errorCode = 4010 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.UNAUTHORIZED; \n        \n\n        \n          \n               } else if (e instanceof ReadOnlyException) { \n        \n\n        \n          \n                   errorCode = 4030 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.FORBIDDEN; \n        \n\n        \n          \n               } else if (e instanceof ResourceUnknownException) { \n        \n\n        \n          \n                   errorCode = 4040 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.NOT_FOUND; \n        \n\n        \n          \n               } else if (e instanceof ConflictException) { \n        \n\n        \n          \n                   errorCode = 4090 + crateException.errorCode(); \n        \n\n        \n          \n                   httpStatus = HttpResponseStatus.CONFLICT; \n        \n\n        \n          \n               } else if (e instanceof UnhandledServerException) { \n        \n\n        \n          \n                   errorCode = 5000 + crateException.errorCode(); \n        \n\n        \n          \n               } \n        \n    \n  \n\n ?\nDo we need to update http doc https://github.com/crate/crate/blob/ad02ff5f40bc853937b15eef6e9dcae5543838f9/docs/interfaces/http.rst#id10\nIt seems like a user-facing change. Were you planning to backport it as well?", "url": "https://github.com/crate/crate/pull/10071#discussion_r440706813", "createdAt": "2020-06-16T09:15:48Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMzY5Mg==", "bodyText": "Could we just go with \"InvalidArgumentException\" for now or some other existing exception class? I had in mind to restructure the exception handling a bit to make it easier to return the proper error codes in the PostgreSQL wire protocol, so it would be helpful if we didn't add more CrateException instances for now.", "url": "https://github.com/crate/crate/pull/10071#discussion_r440713692", "createdAt": "2020-06-16T09:27:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxODE4Ng==", "bodyText": "As commented I suggest to delete this and let BlobStoreCredentialsException extend from ValidationExecption.\nBut still this would introduce a new error code and thus user facing change.\nI think this could be acceptable for a backport as it should not break anything.", "url": "https://github.com/crate/crate/pull/10071#discussion_r440718186", "createdAt": "2020-06-16T09:34:47Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczMzk4OA==", "bodyText": "If we use a ValidationExecption then we cannot add a designated error code. We reserved all 10 error code on the 400X already https://crate.io/docs/crate/reference/en/latest/interfaces/http.html. We could either fallback to 4000 or move it to 401X (Unauthorized).", "url": "https://github.com/crate/crate/pull/10071#discussion_r440733988", "createdAt": "2020-06-16T10:01:33Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDczNzcyNA==", "bodyText": "If we use an ValidationExecption then we cannot add a designated error code. We reserved all 10 error code on the 400 already https://crate.io/docs/crate/reference/en/latest/interfaces/http.html. We could either fallback to 4000 or move it to 401X (Unauthorized).\n\nI'd go with 4000.\nFor 401X we need to be careful. We need to distinguish between unauthorized to execute certain SQL statements (permissions related to executing CrateDB stuff), and unauthorized to use a other third-party resource.\nWe also need to be careful how clients would map these errors to exceptions.", "url": "https://github.com/crate/crate/pull/10071#discussion_r440737724", "createdAt": "2020-06-16T10:07:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/exceptions/MissingParametersException.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.exceptions;\n+\n+public class MissingParametersException extends RuntimeException implements CrateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgxMw=="}, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTc5MTE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozMjoyNFrOGkTNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozMjoyNFrOGkTNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxNjc0MQ==", "bodyText": "Why cant we just extend from a io.crate.exceptions.ValidationException** here instead? I don't see any reason to create an ES exception here which will always be converted later on.", "url": "https://github.com/crate/crate/pull/10071#discussion_r440716741", "createdAt": "2020-06-16T09:32:24Z", "author": {"login": "seut"}, "path": "server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreCredentialsException.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package org.elasticsearch.repositories.blobstore;\n+\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.rest.RestStatus;\n+\n+import java.io.IOException;\n+\n+public class BlobStoreCredentialsException extends ElasticsearchException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad02ff5f40bc853937b15eef6e9dcae5543838f9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Njk4NjUxOnYy", "diffSide": "LEFT", "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0NzozMVrOGke_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1NDowOVrOGkfT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTY3NQ==", "bodyText": "Is there documentation we need to update to reflect this change?", "url": "https://github.com/crate/crate/pull/10071#discussion_r440909675", "createdAt": "2020-06-16T14:47:31Z", "author": {"login": "mfussenegger"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -69,12 +69,10 @@\n \n     static final String TYPE = \"s3\";\n \n-    public static List<Setting<?>> mandatorySettings() {\n-        return List.of(ACCESS_KEY_SETTING, SECRET_KEY_SETTING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNDkyMQ==", "bodyText": "Good point, I think we should mention the IAM roles here https://crate.io/docs/crate/reference/en/latest/sql/statements/create-repository.html#s3", "url": "https://github.com/crate/crate/pull/10071#discussion_r440914921", "createdAt": "2020-06-16T14:54:09Z", "author": {"login": "mkleen"}, "path": "plugins/es-repository-s3/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java", "diffHunk": "@@ -69,12 +69,10 @@\n \n     static final String TYPE = \"s3\";\n \n-    public static List<Setting<?>> mandatorySettings() {\n-        return List.of(ACCESS_KEY_SETTING, SECRET_KEY_SETTING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwOTY3NQ=="}, "originalCommit": {"oid": "8ef2c8d2c9e95201171c07c6e6149b3da5bf4027"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1402, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}