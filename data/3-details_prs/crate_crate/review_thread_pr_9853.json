{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjA4Mjg5", "number": 9853, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowMToyMVrODudusg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNzo0MlrOD1IcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQ4MTc4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowMToyMVrOGAeRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozNzo0MlrOGB7UbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0OTIyMQ==", "bodyText": "Is this safe to stream TypeSignature like this? I think this could lose information if it's  ObjectParameterTypeSignature", "url": "https://github.com/crate/crate/pull/9853#discussion_r403149221", "createdAt": "2020-04-03T17:01:21Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -231,6 +237,29 @@ private Signature(FunctionName name,\n         this.allowCoercion = allowCoercion;\n     }\n \n+    public Signature(StreamInput in) throws IOException {\n+        name = new FunctionName(in);\n+        kind = FunctionInfo.Type.values()[in.readVInt()];\n+        int argsSize = in.readVInt();\n+        argumentTypes = new ArrayList<>(argsSize);\n+        for (int i = 0; i < argsSize; i++) {\n+            argumentTypes.add(new TypeSignature(in));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3MzY0NQ==", "bodyText": "\ud83d\udc4d ah, good catch", "url": "https://github.com/crate/crate/pull/9853#discussion_r404673645", "createdAt": "2020-04-07T09:37:42Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -231,6 +237,29 @@ private Signature(FunctionName name,\n         this.allowCoercion = allowCoercion;\n     }\n \n+    public Signature(StreamInput in) throws IOException {\n+        name = new FunctionName(in);\n+        kind = FunctionInfo.Type.values()[in.readVInt()];\n+        int argsSize = in.readVInt();\n+        argumentTypes = new ArrayList<>(argsSize);\n+        for (int i = 0; i < argsSize; i++) {\n+            argumentTypes.add(new TypeSignature(in));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0OTIyMQ=="}, "originalCommit": {"oid": "f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDMzOTYyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzowMjo0M1rOGKZ0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo0NTozOVrOGKbaQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2MTk5OA==", "bodyText": "This case will be removed once all functions are migrated,  right?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413561998", "createdAt": "2020-04-23T07:02:43Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -613,8 +614,15 @@ public AnalyzedRelation visitTableFunction(TableFunction node, StatementAnalysis\n         }\n         Function function = (Function) symbol;\n         FunctionIdent ident = function.info().ident();\n+        Signature signature = function.signature();\n \n-        FunctionImplementation functionImplementation = functions.getQualified(ident);\n+        FunctionImplementation functionImplementation;\n+        if (signature == null) {\n+            functionImplementation = functions.getQualified(ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4ODAzNQ==", "bodyText": "Yep", "url": "https://github.com/crate/crate/pull/9853#discussion_r413588035", "createdAt": "2020-04-23T07:45:39Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -613,8 +614,15 @@ public AnalyzedRelation visitTableFunction(TableFunction node, StatementAnalysis\n         }\n         Function function = (Function) symbol;\n         FunctionIdent ident = function.info().ident();\n+        Signature signature = function.signature();\n \n-        FunctionImplementation functionImplementation = functions.getQualified(ident);\n+        FunctionImplementation functionImplementation;\n+        if (signature == null) {\n+            functionImplementation = functions.getQualified(ident);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2MTk5OA=="}, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM2NTE4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzowOTo1MVrOGKaDVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzowOTo1MVrOGKaDVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NTc4Mw==", "bodyText": "This should probably be 4.2, no?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413565783", "createdAt": "2020-04-23T07:09:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "diffHunk": "@@ -66,10 +64,27 @@ public Aggregation(FunctionInfo functionInfo,\n \n         this.valueType = valueType;\n         this.functionInfo = functionInfo;\n+        this.signature = signature;\n         this.inputs = inputs;\n         this.filter = filter;\n     }\n \n+    public Aggregation(StreamInput in) throws IOException {\n+        functionInfo = new FunctionInfo(in);\n+        valueType = DataTypes.fromStream(in);\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0)) {\n+            filter = Symbols.fromStream(in);\n+        } else {\n+            filter = Literal.BOOLEAN_TRUE;\n+        }\n+        inputs = Symbols.listFromStream(in);\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0) && in.readBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM2NTg3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDowNFrOGKaD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDowNFrOGKaD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NTkwNw==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/9853#discussion_r413565907", "createdAt": "2020-04-23T07:10:04Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "diffHunk": "@@ -105,7 +125,12 @@ public void writeTo(StreamOutput out) throws IOException {\n             Symbols.toStream(filter, out);\n         }\n         Symbols.toStream(inputs, out);\n-\n+        if (out.getVersion().onOrAfter(Version.V_4_1_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM2NjcyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDoyMFrOGKaEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDoyMFrOGKaEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NjAzNQ==", "bodyText": "4.2", "url": "https://github.com/crate/crate/pull/9853#discussion_r413566035", "createdAt": "2020-04-23T07:10:20Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -98,17 +101,27 @@ public Function(StreamInput in) throws IOException {\n             filter = null;\n         }\n         arguments = List.copyOf(Symbols.listFromStream(in));\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0) && in.readBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM2NzM2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDozM1rOGKaEuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMDozM1rOGKaEuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NjEzOQ==", "bodyText": "here as well", "url": "https://github.com/crate/crate/pull/9853#discussion_r413566139", "createdAt": "2020-04-23T07:10:33Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -191,6 +211,12 @@ public void writeTo(StreamOutput out) throws IOException {\n             Symbols.nullableToStream(filter, out);\n         }\n         Symbols.toStream(arguments, out);\n+        if (out.getVersion().onOrAfter(Version.V_4_1_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM3NjA4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMjo1MVrOGKaJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxMjo1MVrOGKaJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NzQ0OA==", "bodyText": "This can be nullable", "url": "https://github.com/crate/crate/pull/9853#discussion_r413567448", "createdAt": "2020-04-23T07:12:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -269,25 +290,49 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n-    public List<TypeVariableConstraint> getTypeVariableConstraints() {\n-        return typeVariableConstraints;\n+    public SignatureBindingInfo getBindingInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM5NDE4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/TypeSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNzo0MlrOGKaU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNzo0MlrOGKaU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MDI3Nw==", "bodyText": "For Symbol and DataType we've static methods to handle the ordinal handling.\n    public static void toStream(DataType type, StreamOutput out) throws IOException {\n        out.writeVInt(type.id());\n        type.writeTo(out);\n    }\n\nDo you think it would make sense to follow that pattern here too?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413570277", "createdAt": "2020-04-23T07:17:42Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -143,6 +157,16 @@ public String getBaseTypeName() {\n         return DataTypes.ofName(baseTypeName);\n     }\n \n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(baseTypeName);\n+        out.writeVInt(parameters.size());\n+        for (TypeSignature parameter : parameters) {\n+            out.writeVInt(parameter.type().ordinal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1595, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}