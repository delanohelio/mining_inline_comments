{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Njc1Njk3", "number": 10089, "title": "Convert all operators to new signature based function registry", "bodyText": "Summary of the changes / Why this improves CrateDB\nRefactored all operator registration to use the new signature based function registry.\nRegex operators are now only registered to text and undefined(null) data types to prevent casting of a text argument to an argument type of higher precedence which would then later fail anyway on evaluation as only text types can be used.\nThis results in a different exception when used with non-text, non-null values; UnsupportedOperationException instead of a ConversionException.", "createdAt": "2020-06-17T08:05:05Z", "url": "https://github.com/crate/crate/pull/10089", "merged": true, "mergeCommit": {"oid": "67ba347bd3ddbd4289aad5c91e0873d515b78578"}, "closed": true, "closedAt": "2020-06-17T15:02:10Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsFkhZABqjM0NTI0NDQ1ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsKo9EAH2gAyNDM1Njc1Njk3OmU4OTk4YmM1YjU3ZGIyYjA2MjA1YzMyMGI4MmZiNzI3Y2EyZWYwYzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3e62ec4d6a2e8b90bcfa8bcad6e89e4149b9e7f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/a3e62ec4d6a2e8b90bcfa8bcad6e89e4149b9e7f", "committedDate": "2020-06-17T08:03:23Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}, "afterCommit": {"oid": "a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "committedDate": "2020-06-17T08:25:40Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/a41a1566c000bb8994ba5f8b4e1e0d03b9338350", "committedDate": "2020-06-17T08:25:40Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}, "afterCommit": {"oid": "1572720151a0c8304f3675e254ae19c3799750b2", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/1572720151a0c8304f3675e254ae19c3799750b2", "committedDate": "2020-06-17T08:28:22Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjExMjgz", "url": "https://github.com/crate/crate/pull/10089#pullrequestreview-432211283", "createdAt": "2020-06-17T09:14:45Z", "commit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOToxNDo0NVrOGk9C2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoxNFrOGk9zGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwMjA3Mw==", "bodyText": "In some tests, you don't use signatures to create function instances. e.g. JoinPhaseTest, FilterProjectionTest, etc. is it done by intention or it is just slipped from the sight?", "url": "https://github.com/crate/crate/pull/10089#discussion_r441402073", "createdAt": "2020-06-17T09:14:45Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/planner/operators/FetchRewriteTest.java", "diffHunk": "@@ -52,6 +56,16 @@\n \n public class FetchRewriteTest extends CrateDummyClusterServiceUnitTest {\n \n+    public static Function of(String name, List<Symbol> arguments, DataType<?> returnType) {\n+        return new Function(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDQyNg==", "bodyText": "just a question: why it is matched with object(k, v) shouldn't we match it with just object such as the map can contain the v type variable of different types?", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414426", "createdAt": "2020-06-17T09:34:14Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/operator/EqOperator.java", "diffHunk": "@@ -23,46 +23,71 @@\n \n import io.crate.common.collections.MapComparator;\n import io.crate.data.Input;\n-import io.crate.expression.symbol.Function;\n-import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n-import io.crate.types.DataType;\n-import io.crate.types.DataTypes;\n-import io.crate.types.ObjectType;\n-\n-import java.util.Arrays;\n-import java.util.List;\n+import io.crate.metadata.functions.Signature;\n+\n+import javax.annotation.Nullable;\n import java.util.Map;\n \n-import static io.crate.expression.operator.CmpOperator.CmpResolver.createInfo;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public final class EqOperator extends Operator<Object> {\n \n     public static final String NAME = \"op_=\";\n \n-    private final FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"E\"),\n+        parseTypeSignature(\"E\"),\n+        Operator.RETURN_TYPE.getTypeSignature()\n+    ).withTypeVariableConstraints(typeVariable(\"E\"));\n+\n+    public static final Signature SIGNATURE_OBJECTS = Signature.scalar(\n+        NAME,\n+        parseTypeSignature(\"object(K, V)\"),\n+        parseTypeSignature(\"object(K, V)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjI3MDkw", "url": "https://github.com/crate/crate/pull/10089#pullrequestreview-432227090", "createdAt": "2020-06-17T09:34:22Z", "commit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoyMlrOGk9zbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozNDoyMlrOGk9zbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNDUxMQ==", "bodyText": "Do you think it would be worth following up on this to format the function name in a way that is closer to what the user entered? So that we'd get something like Unknown function: integer_array = ANY(integer_array)", "url": "https://github.com/crate/crate/pull/10089#discussion_r441414511", "createdAt": "2020-06-17T09:34:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -369,7 +369,7 @@ public void testParameterExpressionInLikeAny() throws Exception {\n \n     @Test\n     public void testAnyWithArrayOnBothSidesResultsInNiceErrorMessage() {\n-        expectedException.expectMessage(\"Cannot cast `xs` of type `integer_array` to type `integer`\");\n+        expectedException.expectMessage(\"unknown function: any_=(integer_array, integer_array)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzQ5MjAx", "url": "https://github.com/crate/crate/pull/10089#pullrequestreview-432349201", "createdAt": "2020-06-17T12:28:54Z", "commit": {"oid": "4e13f362ec28cca4f6da01ea258c0b3d8df5f02b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzc4MjYw", "url": "https://github.com/crate/crate/pull/10089#pullrequestreview-432378260", "createdAt": "2020-06-17T13:04:23Z", "commit": {"oid": "2c96979b668f1edace3bc9b32b2019e941d29573"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f5c54ae267e14913049436dbf99e02d410c793", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/15f5c54ae267e14913049436dbf99e02d410c793", "committedDate": "2020-06-17T13:05:32Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c96979b668f1edace3bc9b32b2019e941d29573", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/2c96979b668f1edace3bc9b32b2019e941d29573", "committedDate": "2020-06-17T12:57:42Z", "message": "fixup! Convert all operators to new signature based function registry"}, "afterCommit": {"oid": "15f5c54ae267e14913049436dbf99e02d410c793", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/15f5c54ae267e14913049436dbf99e02d410c793", "committedDate": "2020-06-17T13:05:32Z", "message": "Convert all operators to new signature based function registry\n\nRefactored all operator registration to use the new signature based function registry.\n\nRegex operators are now only registered to `text` and `undefined`(null) data types\nto prevent casting of a `text` argument to an argument type of higher precedence\nwhich would then later fail anyway on evaluation as only `text` types can be used.\nThis results in a different exception when used with non-text, non-null values;\n`UnsupportedOperationException` instead of a `ConversionException`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8998bc5b57db2b06205c320b82fb727ca2ef0c5", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/e8998bc5b57db2b06205c320b82fb727ca2ef0c5", "committedDate": "2020-06-17T14:22:32Z", "message": "Merge branch 'master' into s/operators-signature"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}