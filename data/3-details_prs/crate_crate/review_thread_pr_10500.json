{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTcyODI0", "number": 10500, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1NzozNlrOEhOyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo0OTozNFrOEhtdTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjgwNzA1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1NzozNlrOHObmWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1NzozNlrOHObmWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5NDI5OA==", "bodyText": "psql returns a 42703 undefined_column in the case of an unknown column but i think this is a bit different here. We mention in the docs that the type object ignored cannot not be used for grouping https://crate.io/docs/crate/reference/en/4.2/general/ddl/data-types.html#ignored", "url": "https://github.com/crate/crate/pull/10500#discussion_r484894298", "createdAt": "2020-09-08T12:57:36Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -673,9 +674,9 @@ public void testGroupByUnknownResultColumn() throws Exception {\n     @Test\n     public void testGroupByUnknownGroupByColumn() throws Exception {\n         this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",\n-                                              \"Cannot GROUP BY type: undefined\"));\n+        assertThrows(() -> execute(\"select max(age) from characters group by details_ignored['lol']\"),\n+                     isSQLError(is(\"Using column type ignored 'details_ignored['lol']' for grouping or aggregations is not allowed\"),\n+                                INTERNAL_ERROR, BAD_REQUEST, 4000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c0d3184532fbe4664a2c953d0ce12ed2f642c2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjgzNTQ2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/GroupByAnalyzerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzowNDo0OFrOHOb3rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDoxNDo0N1rOHOfQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5ODczMw==", "bodyText": "We could probably just go with the analyzer test and remove the integration test.", "url": "https://github.com/crate/crate/pull/10500#discussion_r484898733", "createdAt": "2020-09-08T13:04:48Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/analyze/GroupByAnalyzerTest.java", "diffHunk": "@@ -118,6 +121,13 @@ public void testGroupByWithDistinctAggregation() throws Exception {\n         analyze(\"select count(DISTINCT name) from sys.nodes group by 1\");\n     }\n \n+    @Test\n+    public void test_group_by_unknown_column() {\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                                () -> analyze(\"select max(age) from foo.users group by details_ignored['lol']\"),\n+                                \"Using column type ignored 'details_ignored['lol']' for grouping or aggregations is not allowed\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643a65b3884831512ba661664a69d5dafd6a030d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1NDIzOQ==", "bodyText": "Yep agreed", "url": "https://github.com/crate/crate/pull/10500#discussion_r484954239", "createdAt": "2020-09-08T14:14:47Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/GroupByAnalyzerTest.java", "diffHunk": "@@ -118,6 +121,13 @@ public void testGroupByWithDistinctAggregation() throws Exception {\n         analyze(\"select count(DISTINCT name) from sys.nodes group by 1\");\n     }\n \n+    @Test\n+    public void test_group_by_unknown_column() {\n+        Assertions.assertThrows(IllegalArgumentException.class,\n+                                () -> analyze(\"select max(age) from foo.users group by details_ignored['lol']\"),\n+                                \"Using column type ignored 'details_ignored['lol']' for grouping or aggregations is not allowed\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5ODczMw=="}, "originalCommit": {"oid": "643a65b3884831512ba661664a69d5dafd6a030d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjk0MjY2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyNTowNlrOHOc3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzoyNTowNlrOHOc3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkxNDk5Ng==", "bodyText": "If there is an alias involved or some form of sub-query we'd have a Field instead of a Reference here and I think in that case the validation would be by-passed.\nI also wonder if we're too restrictive here - or rather, fail for the wrong reason. The problem is that we don't know the type and that it may be mixed, not that the column policy is ignored.\nSee the conversation here - we tell users that they can use aggregations on ignored columns if they use casts, the same applies for GROUP BY:\ncreate table tbl (obj object (ignored));\ninsert into tbl (obj) values ({x=10}), ({x=10}), ({x=20});\nselect obj['x'], count(*) from tbl group by 1;\nUnsupportedFeatureException[Cannot GROUP BY type: undefined]\n\ncr> select obj['x']::integer, count(*) from tbl group by 1;\n+---------------------------+----------+\n| cast(obj['x'] AS integer) | count(*) |\n+---------------------------+----------+\n|                        10 |        2 |\n|                        20 |        1 |\n+---------------------------+----------+\nWe could change the check to assert that there is a type, and the error could also point users to adding an explicit cast (+ pointing out a performance impact)", "url": "https://github.com/crate/crate/pull/10500#discussion_r484914996", "createdAt": "2020-09-08T13:25:06Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,17 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        if (groupBy instanceof Reference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1746b949585ff096a23f9623745c54fc90c4a96c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE1MzY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1MToyMFrOHO7CQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1MToyMFrOHO7CQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwOTM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return visitSymbol(symbol, context);\n          \n          \n            \n                        return null;\n          \n      \n    \n    \n  \n\nvisitSymbol would do the valueType() == UNDEFINED check again.", "url": "https://github.com/crate/crate/pull/10500#discussion_r485409346", "createdAt": "2020-09-09T07:51:20Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {\n+\n+        static final SymbolTypeValidator INSTANCE = new SymbolTypeValidator();\n+\n+        @Override\n+        public Void visitSymbol(Symbol symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED) {\n+                throw new IllegalArgumentException(\n+                    \"Cannot group or aggregate on '\" + symbol.toString() + \"' efficiently with an undefined type.\" +\n+                    \" Use an explicit type cast.\"\n+                );\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public Void visitLiteral(Literal symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED && symbol.value() == null) {\n+                // `NULL` is a valid case\n+                return null;\n+            }\n+            return visitSymbol(symbol, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8787ba944fc48f0234c1f5907c489e6e12766f9b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE2MjU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1MzoyMlrOHO7HYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1MzoyMlrOHO7HYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMDY1OQ==", "bodyText": "I think the error is a bit misleading. It's not that it cannot do it efficiently without a defined type, it can't do it at all.\nIt works with casts, but the cast has a bit of overhead and given that it's most likely to be undefined because of being an ignored column it won't have a column-store (docvalues) available and it will use a source lookup and other more expensive code paths.", "url": "https://github.com/crate/crate/pull/10500#discussion_r485410659", "createdAt": "2020-09-09T07:53:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {\n+\n+        static final SymbolTypeValidator INSTANCE = new SymbolTypeValidator();\n+\n+        @Override\n+        public Void visitSymbol(Symbol symbol, Void context) {\n+            if (symbol.valueType() == DataTypes.UNDEFINED) {\n+                throw new IllegalArgumentException(\n+                    \"Cannot group or aggregate on '\" + symbol.toString() + \"' efficiently with an undefined type.\" +\n+                    \" Use an explicit type cast.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8787ba944fc48f0234c1f5907c489e6e12766f9b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE2NjkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDozMVrOHO7KJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NDozMVrOHO7KJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTM2Ng==", "bodyText": "Maybe we could make the names a bit specific. E.g. ensurehasDefinedType and EnsureTypedGroupKey or something like that.\nvalidator and validate is always a bit vague in that it doesn't indicate what constraints or conditions need to be met for it to be valid", "url": "https://github.com/crate/crate/pull/10500#discussion_r485411366", "createdAt": "2020-09-09T07:54:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/GroupAndAggregateSemantics.java", "diffHunk": "@@ -76,6 +79,40 @@ public static void validate(List<Symbol> outputSymbols,\n         }\n     }\n \n+    private static void validateGroupBySymbol(Symbol groupBy) {\n+        groupBy.accept(SymbolTypeValidator.INSTANCE, null);\n+    }\n+\n+    private static class SymbolTypeValidator extends SymbolVisitor<Void, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8787ba944fc48f0234c1f5907c489e6e12766f9b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjE2OTM1OnYy", "diffSide": "LEFT", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NTowNVrOHO7LkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzo1NTowNVrOHO7LkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxMTcyOA==", "bodyText": "On second thought, maybe we could keep the integration test but change it to use a cast, so we make sure to verify that it works.", "url": "https://github.com/crate/crate/pull/10500#discussion_r485411728", "createdAt": "2020-09-09T07:55:05Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -670,14 +665,6 @@ public void testGroupByUnknownResultColumn() throws Exception {\n                                 \"'details_ignored['lol']' must appear in the GROUP BY clause\");\n     }\n \n-    @Test\n-    public void testGroupByUnknownGroupByColumn() throws Exception {\n-        this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8787ba944fc48f0234c1f5907c489e6e12766f9b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzgzMjQ2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDo0OTozNFrOHPLJkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTo0OTozMlrOHPN4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzM2Mw==", "bodyText": "I meant to change the query to have a cast. For the error case the analyzer test is good enough. But a integration test that confirms that it works with cast should be here additionally", "url": "https://github.com/crate/crate/pull/10500#discussion_r485673363", "createdAt": "2020-09-09T14:49:34Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -673,9 +672,10 @@ public void testGroupByUnknownResultColumn() throws Exception {\n     @Test\n     public void testGroupByUnknownGroupByColumn() throws Exception {\n         this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",\n-                                              \"Cannot GROUP BY type: undefined\"));\n+        assertThrows(() -> execute(\"select max(age) from characters group by details_ignored['lol']\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942dc0b4e0c5350da108d0a4474a801138d59909"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcxODA4NA==", "bodyText": "Sorry i missed that.", "url": "https://github.com/crate/crate/pull/10500#discussion_r485718084", "createdAt": "2020-09-09T15:49:32Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/integrationtests/GroupByAggregateTest.java", "diffHunk": "@@ -673,9 +672,10 @@ public void testGroupByUnknownResultColumn() throws Exception {\n     @Test\n     public void testGroupByUnknownGroupByColumn() throws Exception {\n         this.setup.groupBySetup();\n-        Assertions.assertThrows(Exception.class,\n-                                () -> execute(\"select max(birthdate) from characters group by details_ignored['lol']\",\n-                                              \"Cannot GROUP BY type: undefined\"));\n+        assertThrows(() -> execute(\"select max(age) from characters group by details_ignored['lol']\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MzM2Mw=="}, "originalCommit": {"oid": "942dc0b4e0c5350da108d0a4474a801138d59909"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1216, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}