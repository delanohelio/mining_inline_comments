{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODMxNDAx", "number": 9620, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODozNzoxOFrODdP5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo0NzoxMlrODdQEVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTk1ODI5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODozNzoxOFrOFlvchQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMDo1NjozNlrOFlzqDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));\n          \n          \n            \n                            fields.add(new Field(this, path, outputsIterator.next()));\n          \n      \n    \n    \n  \n\nThe relation of a Field must point to the relation who owns the field, which in this case here is the AnalyzedInsertStatement.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375118981", "createdAt": "2020-02-05T08:37:18Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1MTI3OA==", "bodyText": "AnalyzedInsertStatement is not an AnalyzedRelation so it can't be this. The subQueryRelation would of course work, but i assumed that the subquery relation is not the relation who owns the output field, so this is why I ended with this solution. What I am missing here ?", "url": "https://github.com/crate/crate/pull/9620#discussion_r375151278", "createdAt": "2020-02-05T09:45:09Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2MjM2Nw==", "bodyText": "Oh I see, I missed that.\nCould you add a inline comment about that? We'll need to address that eventually, but given that we did the same for Update I guess it is okay to move along as is for now.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375162367", "createdAt": "2020-02-05T10:05:37Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3MzYwOQ==", "bodyText": "Ok, will do. Thanks for the feedback. So, AnalyzedInsertStatement should be a Relation in an ideal world ?", "url": "https://github.com/crate/crate/pull/9620#discussion_r375173609", "createdAt": "2020-02-05T10:27:15Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4Nzk4Mw==", "bodyText": "Currently my thinking is that in an ideal world the Field wouldn't have this relation reference in its current form.\nI'm not sure about AnalyzedInsertStatement being a Relation - or changing the hierarchy there in some other form. The focus would be more on changing fields() and outputs (or in this case, the returnValues`, so that only 1 is needed and not both.\nBut that's something for the future.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187983", "createdAt": "2020-02-05T10:56:36Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedInsertStatement.java", "diffHunk": "@@ -103,6 +119,16 @@\n             generatedColumns,\n             defaultExpressionColumns,\n             false);\n+        this.returnValues = returnValues;\n+        if (!outputNames.isEmpty() && !returnValues.isEmpty()) {\n+            this.fields = new ArrayList<>(outputNames.size());\n+            Iterator<Symbol> outputsIterator = returnValues.iterator();\n+            for (ColumnIdent path : outputNames) {\n+                fields.add(new Field(new TableRelation(tableInfo), path, outputsIterator.next()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODk4MQ=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTk2NDkyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODozOTo1NFrOFlvgvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo0NTo1M1rOFlvq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        DocTableRelation targetTableRelation = (DocTableRelation) relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n      \n    \n    \n  \n\nFurther below is currently a cast to FieldResolver that looks unsafe.\nMy preference would be to put it here instead. Here the relation between insert.table() -> DocTableRelation is more visible. Could even add a comment to clarify that relationship.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375120062", "createdAt": "2020-02-05T08:39:54Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMjY2NA==", "bodyText": "Or even better:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n          \n          \n            \n                        var relation = new DocTableRelation(tableInfo);", "url": "https://github.com/crate/crate/pull/9620#discussion_r375122664", "createdAt": "2020-02-05T08:45:53Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDA2Mg=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTk4NTUxOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo0NzoxMlrOFlvtIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMTo1NDo1NVrOFl1LmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA==", "bodyText": "I'm not sure if we should do the normalization here already.\nThis is to turn Field into Reference I assume?\nIn other cases we do this as part of the logical planning via the RelationNormalizer. Maybe you could have a look if it would be possible to also defer this to the RelationNormalizer.\nI wouldn't spend too much time on it. I want to change some things about Field and Reference soon anyhow.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375123234", "createdAt": "2020-02-05T08:47:12Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3ODcwMw==", "bodyText": "CurrentIy we normalize also in the UpdateAnalyzer at the same point. I could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?", "url": "https://github.com/crate/crate/pull/9620#discussion_r375178703", "createdAt": "2020-02-05T10:37:38Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4NzM0Nw==", "bodyText": "could extend the RelationNormalizer to also support the AnalyzedInsertStatement. Does this make sense to you ?\n\nYes, but only if it isn't too much effort and doesn't cause other issues.", "url": "https://github.com/crate/crate/pull/9620#discussion_r375187347", "createdAt": "2020-02-05T10:55:17Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxMjk1Mw==", "bodyText": "I had a look at RelationNormalizer and I think conceptionally it would be a bit awkward to add  AnalyzedInsertStatement as a non-relational type to the RelationNormalizer. I would leave as it is right now, what do you think ?", "url": "https://github.com/crate/crate/pull/9620#discussion_r375212953", "createdAt": "2020-02-05T11:54:55Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/analyze/InsertAnalyzer.java", "diffHunk": "@@ -139,12 +143,53 @@ public AnalyzedInsertStatement analyze(Insert<?> insert, ParamTypeHints typeHint\n         final boolean ignoreDuplicateKeys =\n             insert.duplicateKeyContext().getType() == Insert.DuplicateKeyContext.Type.ON_CONFLICT_DO_NOTHING;\n \n+        List<Symbol> returnValues = List.of();\n+        List<ColumnIdent> outputNames = List.of();\n+\n+        if (!insert.returningClause().isEmpty()) {\n+            var stmtCtx = new StatementAnalysisContext(typeHints, Operation.INSERT, txnCtx);\n+            var relCtx = stmtCtx.startRelation();\n+            var relation = relationAnalyzer.analyze(insert.table(), stmtCtx);\n+            stmtCtx.endRelation();\n+\n+            var exprCtx = new ExpressionAnalysisContext();\n+            var sourceExprAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                txnCtx,\n+                typeHints,\n+                new FullQualifiedNameFieldProvider(\n+                    relCtx.sources(),\n+                    relCtx.parentSources(),\n+                    txnCtx.sessionContext().searchPath().currentSchema()\n+                ),\n+                null\n+            );\n+\n+            var selectAnalysis = SelectAnalyzer.analyzeSelectItems(\n+                insert.returningClause(),\n+                relCtx.sources(),\n+                sourceExprAnalyzer,\n+                exprCtx\n+            );\n+\n+            var normalizer = new EvaluatingNormalizer(functions,\n+                                                      RowGranularity.CLUSTER,\n+                                                      null,\n+                                                      (FieldResolver) relation);\n+\n+            returnValues = Lists2.map(selectAnalysis.outputSymbols(), x -> normalizer.normalize(x, txnCtx));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMzIzNA=="}, "originalCommit": {"oid": "657ba0646a44aef6fff7c5bc06c81642e24f078c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1044, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}