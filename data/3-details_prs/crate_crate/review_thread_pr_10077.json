{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTkwNjg0", "number": 10077, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMzowM1rOEFAZ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODo1Mjo1NVrOEFcpHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjg0OTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/ArrayType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMzowM1rOGi-rLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1MzoxNVrOGjm90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTYzMQ==", "bodyText": "taking #9851 into consideration it should be fine probably to have a null-safe comparison here such as it the array type?", "url": "https://github.com/crate/crate/pull/10077#discussion_r439331631", "createdAt": "2020-06-12T10:13:03Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/ArrayType.java", "diffHunk": "@@ -173,7 +174,7 @@ public int compare(List<T> val1, List<T> val2) {\n             return -1;\n         }\n         for (int i = 0; i < val1.size(); i++) {\n-            int cmp = innerType.compare(val1.get(i), val2.get(i));\n+            int cmp = Comparator.nullsFirst(innerType).compare(val1.get(i), val2.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MTc2MA==", "bodyText": "yes should be fine. The NULLS FIRST / LAST would need  toapply for the array itself, not for individual elements in case we add support for sorting on arrays.", "url": "https://github.com/crate/crate/pull/10077#discussion_r439991760", "createdAt": "2020-06-15T07:53:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/ArrayType.java", "diffHunk": "@@ -173,7 +174,7 @@ public int compare(List<T> val1, List<T> val2) {\n             return -1;\n         }\n         for (int i = 0; i < val1.size(); i++) {\n-            int cmp = innerType.compare(val1.get(i), val2.get(i));\n+            int cmp = Comparator.nullsFirst(innerType).compare(val1.get(i), val2.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTYzMQ=="}, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI2Mjg0OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1Mzo0NlrOGjm-7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNzoxNVrOGjncDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <analyze>` statement was executed on tables with the text array type columns\n          \n          \n            \n              <analyze>` statement was executed on tables with text array type columns", "url": "https://github.com/crate/crate/pull/10077#discussion_r439992045", "createdAt": "2020-06-15T07:53:46Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -221,5 +221,9 @@ Performance improvements\n Fixes\n =====\n \n+- Fixed an issue that caused a ``NullPointerException`` if the :ref:`ANALYZE\n+  <analyze>` statement was executed on tables with the text array type columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjQ3OQ==", "bodyText": "Did this only apply to text ?", "url": "https://github.com/crate/crate/pull/10077#discussion_r439992479", "createdAt": "2020-06-15T07:54:36Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -221,5 +221,9 @@ Performance improvements\n Fixes\n =====\n \n+- Fixed an issue that caused a ``NullPointerException`` if the :ref:`ANALYZE\n+  <analyze>` statement was executed on tables with the text array type columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjA0NQ=="}, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTUwMA==", "bodyText": "actually it applies to all primitive types", "url": "https://github.com/crate/crate/pull/10077#discussion_r439999500", "createdAt": "2020-06-15T08:07:15Z", "author": {"login": "kovrus"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -221,5 +221,9 @@ Performance improvements\n Fixes\n =====\n \n+- Fixed an issue that caused a ``NullPointerException`` if the :ref:`ANALYZE\n+  <analyze>` statement was executed on tables with the text array type columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjA0NQ=="}, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTI2NDI4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/statistics/TransportAnalyzeAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NDoxM1rOGjm_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzo1NDoxM1rOGjm_3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjI4NQ==", "bodyText": "Please keep those explicit generics, see the comment above it:\n\n// Explicit generic is required for eclipse JDT, otherwise it won't compile", "url": "https://github.com/crate/crate/pull/10077#discussion_r439992285", "createdAt": "2020-06-15T07:54:13Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/statistics/TransportAnalyzeAction.java", "diffHunk": "@@ -103,7 +101,7 @@ public TransportAnalyzeAction(TransportService transportService,\n             AnalyzeRequest::new,\n             ThreadPool.Names.SAME, // goes async right away\n             // Explicit generic is required for eclipse JDT, otherwise it won't compile\n-            new NodeActionRequestHandler<AnalyzeRequest, AcknowledgedResponse>(\n+            new NodeActionRequestHandler<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba31a023fea76c8aa02a60e885f23d919c24c1e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTQ3NjE1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/InsertIntoIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODo1Mjo1NVrOGjpClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODo1Mjo1NVrOGjpClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNTc1MA==", "bodyText": "@mfussenegger i pushed it after the approval. it seems to be flaky.", "url": "https://github.com/crate/crate/pull/10077#discussion_r440025750", "createdAt": "2020-06-15T08:52:55Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/InsertIntoIntegrationTest.java", "diffHunk": "@@ -1596,7 +1596,7 @@ public void test_insert_from_values_and_subquery_into_varchar_with_length_column\n         execute(\"REFRESH TABLE t1\");\n \n         assertThat(\n-            printedTable(execute(\"SELECT * FROM t1\").rows()),\n+            printedTable(execute(\"SELECT * FROM t1 ORDER BY str\").rows()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3241b047b4c0c7b22f5d37fc476c21ed27ba481"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1408, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}