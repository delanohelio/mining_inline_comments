{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDk4NDMx", "number": 10318, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyODozOVrOEV5vzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODozNjo1M1rOEWIUFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDAxNjc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/testing/SQLErrorMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyODozOVrOG87FZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyODozOVrOG87FZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNTc4MA==", "bodyText": "This is not the final implementation of SQLErrorMatcher, this is just temporary to match SqlActionException  to the coresponding error codes and messages.", "url": "https://github.com/crate/crate/pull/10318#discussion_r466535780", "createdAt": "2020-08-06T16:28:39Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/testing/SQLErrorMatcher.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.testing;\n+\n+import io.crate.action.sql.SQLActionException;\n+import io.crate.protocols.postgres.PGErrorStatus;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import org.hamcrest.Matcher;\n+import org.postgresql.util.PSQLException;\n+\n+import static io.crate.testing.MoreMatchers.withFeature;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.anyOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class SQLErrorMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3f40effa72989473120c5493ad7e9e428181f57"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjM1MTQ0OnYy", "diffSide": "RIGHT", "path": "server/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyMDoyMFrOG9Q_tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNzoxN1rOG9TW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NDc3NA==", "bodyText": "The PSQLException type is required as dependency.", "url": "https://github.com/crate/crate/pull/10318#discussion_r466894774", "createdAt": "2020-08-07T08:20:20Z", "author": {"login": "mkleen"}, "path": "server/build.gradle", "diffHunk": "@@ -57,6 +57,8 @@ dependencies {\n     compile \"org.apache.commons:commons-math3:${versions.commonsmath}\"\n     compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${versions.jackson}\"\n     compile \"com.fasterxml.jackson.core:jackson-databind:${versions.jackson}\"\n+    compile \"org.postgresql:postgresql:${versions.jdbc}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3dfb1f70d8f3170aca64225a0c5e1cd3e9755"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwODE3MQ==", "bodyText": "Why is that type used on the server side? I don't think we should depend on the PostgreSQL jdbc in the server module.", "url": "https://github.com/crate/crate/pull/10318#discussion_r466908171", "createdAt": "2020-08-07T08:47:11Z", "author": {"login": "mfussenegger"}, "path": "server/build.gradle", "diffHunk": "@@ -57,6 +57,8 @@ dependencies {\n     compile \"org.apache.commons:commons-math3:${versions.commonsmath}\"\n     compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${versions.jackson}\"\n     compile \"com.fasterxml.jackson.core:jackson-databind:${versions.jackson}\"\n+    compile \"org.postgresql:postgresql:${versions.jdbc}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NDc3NA=="}, "originalCommit": {"oid": "28e3dfb1f70d8f3170aca64225a0c5e1cd3e9755"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzQ3Nw==", "bodyText": "My mistake, you are right. This came over from the error handling pr, not relevant for this pr.", "url": "https://github.com/crate/crate/pull/10318#discussion_r466933477", "createdAt": "2020-08-07T09:37:17Z", "author": {"login": "mkleen"}, "path": "server/build.gradle", "diffHunk": "@@ -57,6 +57,8 @@ dependencies {\n     compile \"org.apache.commons:commons-math3:${versions.commonsmath}\"\n     compile \"com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${versions.jackson}\"\n     compile \"com.fasterxml.jackson.core:jackson-databind:${versions.jackson}\"\n+    compile \"org.postgresql:postgresql:${versions.jdbc}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5NDc3NA=="}, "originalCommit": {"oid": "28e3dfb1f70d8f3170aca64225a0c5e1cd3e9755"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQwMzQwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/testing/Asserts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODozNjo1M1rOG9Rftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODozNjo1M1rOG9Rftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwMjk2Nw==", "bodyText": "Inspired by https://github.com/junit-team/junit5/blob/main/junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertThrows.java but matching better our usecase assertThrows(() -> execute(\"stmt\"), isSQLError(....)", "url": "https://github.com/crate/crate/pull/10318#discussion_r466902967", "createdAt": "2020-08-07T08:36:53Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/testing/Asserts.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.testing;\n+\n+import org.hamcrest.Matcher;\n+import org.junit.jupiter.api.function.Executable;\n+import org.opentest4j.AssertionFailedError;\n+\n+public class Asserts {\n+\n+    private Asserts() {}\n+\n+    public static <T extends Throwable> void assertThrows(Executable executable, Matcher<T> matcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e3dfb1f70d8f3170aca64225a0c5e1cd3e9755"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1252, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}