{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTg5Mzk5", "number": 9722, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyODoxOVrODksvQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNjoxMFrODks8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA4MzIxOnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyODoxOVrOFxKkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozOToyM1rOFxLBfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NzY1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CrateDB Table Version Compatibility Scheme\n          \n          \n            \n            CrateDB table version compatibility scheme", "url": "https://github.com/crate/crate/pull/9722#discussion_r387097656", "createdAt": "2020-03-03T15:28:19Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwNTE0OA==", "bodyText": "we switched to sentence case for all headings last year (it is considered better style. see parameter one here: https://practicaltypography.com/headings.html)", "url": "https://github.com/crate/crate/pull/9722#discussion_r387105148", "createdAt": "2020-03-03T15:39:23Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NzY1Ng=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA4NjIyOnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyODo1NlrOFxKmDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyODo1NlrOFxKmDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5ODEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Avoiding Reindex Using Partitioned Tables\n          \n          \n            \n            Avoiding reindex using partitioned tables", "url": "https://github.com/crate/crate/pull/9722#discussion_r387098127", "createdAt": "2020-03-03T15:28:56Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA4OTMxOnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyOTo0M1rOFxKoDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyOTo0M1rOFxKoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5ODYzOA==", "bodyText": "might convey your meaning a little better if you phrase it \"and intend to delete old data\"", "url": "https://github.com/crate/crate/pull/9722#discussion_r387098638", "createdAt": "2020-03-03T15:29:43Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA5MTA0OnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMDoxMVrOFxKpQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMDoxMVrOFxKpQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5ODk0Nw==", "bodyText": "for numbers 0-9, it's good style to spell them out (see https://oreillymedia.github.io/production-resources/styleguide/#dates_and_numbers). so, \"nine\", in this instance\nnote: this doesn't apply to literals", "url": "https://github.com/crate/crate/pull/9722#discussion_r387098947", "createdAt": "2020-03-03T15:30:11Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA5NzczOnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTozNlrOFxKtPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMTozNlrOFxKtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5OTk2Nw==", "bodyText": "how about:\n\"Then, every month, the system will create a new partition.\"", "url": "https://github.com/crate/crate/pull/9722#discussion_r387099967", "createdAt": "2020-03-03T15:31:36Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODEwOTQ4OnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNDozMlrOFxK0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzo1MTozMlrOFxt_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTg3NQ==", "bodyText": "it's not clear to me how this fits:\n\"You will also have to delete the oldest partition.\"\nI think maybe this para could start with an \"If\" condition, i.e., \"If you wish to achieve GOAL, then you must...\"\nthat would make it more clear that you are outlining a procedure. as it stands, the bit before this sentence about deleting a partition reads more like a general description of how partitioning works", "url": "https://github.com/crate/crate/pull/9722#discussion_r387101875", "createdAt": "2020-03-03T15:34:32Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMjA4MQ==", "bodyText": "also, minor: comma after \"By doing this\"", "url": "https://github.com/crate/crate/pull/9722#discussion_r387102081", "createdAt": "2020-03-03T15:34:49Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTg3NQ=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMjEzOQ==", "bodyText": "also, \"nine\" :)", "url": "https://github.com/crate/crate/pull/9722#discussion_r387102139", "createdAt": "2020-03-03T15:34:55Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTg3NQ=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMzE1Ng==", "bodyText": "@mechanomi Tried to rephrase it, maybe you can have another look", "url": "https://github.com/crate/crate/pull/9722#discussion_r387133156", "createdAt": "2020-03-03T16:19:06Z", "author": {"login": "mfussenegger"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTg3NQ=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3ODA5MQ==", "bodyText": "@mfussenegger big improvement! thx!", "url": "https://github.com/crate/crate/pull/9722#discussion_r387678091", "createdAt": "2020-03-04T13:51:32Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTg3NQ=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODExMjM0OnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNTowOVrOFxK2Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNTowOVrOFxK2Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMjMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            How To Reindex\n          \n          \n            \n            How to reindex", "url": "https://github.com/crate/crate/pull/9722#discussion_r387102310", "createdAt": "2020-03-03T15:35:09Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9\n+months and all partitions will be compatible with the next major CrateDB\n+version.\n+\n+\n+How To Reindex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODExNjYwOnYy", "diffSide": "RIGHT", "path": "docs/admin/system-information.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNjoxMFrOFxK5Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTo0NDozMlrOFxLO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMzAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            6. Drop the now obsolete old table::\n          \n          \n            \n            6. Drop the old table, as it is now obsolete::\n          \n      \n    \n    \n  \n\n\"now obsolete\" is a bit confusing as an adjective phrase (also known as a compound adjective) as it is used here, especially when combined with the additional adjective, \"old\". if you do want to keep it this way, it should be styled \"now-obsolete\" to disambiguate the adjectives", "url": "https://github.com/crate/crate/pull/9722#discussion_r387103007", "createdAt": "2020-03-03T15:36:10Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9\n+months and all partitions will be compatible with the next major CrateDB\n+version.\n+\n+\n+How To Reindex\n+~~~~~~~~~~~~~~\n+\n+.. hide:\n+\n+    cr> CREATE TABLE rx.metrics (id TEXT PRIMARY KEY, temperature REAL);\n+    CREATE OK, 1 row affected (... sec)\n+\n+    cr> INSERT INTO rx.metrics (id, temperature) VALUES ('1', 38.4), ('2', 42.7);\n+    INSERT OK, 2 rows affected  (... sec)\n+\n+    cr> REFRESH TABLE rx.metrics;\n+    REFRESH OK, 1 row affected  (... sec)\n+\n+1. Use :ref:`ref-show-create-table` to get the schema required to create an\n+   empty copy of the table to recreate::\n+\n+    cr> SHOW CREATE TABLE rx.metrics;\n+    +-----------------------------------------------------+\n+    | SHOW CREATE TABLE rx.metrics                        |\n+    +-----------------------------------------------------+\n+    | CREATE TABLE IF NOT EXISTS \"rx\".\"metrics\" (         |\n+    |    \"id\" TEXT,                                       |\n+    |    \"temperature\" REAL,                              |\n+    |    PRIMARY KEY (\"id\")                               |\n+    | )                                                   |\n+    | CLUSTERED BY (\"id\") INTO 4 SHARDS                   |\n+    | WITH (                                              |\n+    |    \"allocation.max_retries\" = 5,                    |\n+    |    \"blocks.metadata\" = false,                       |\n+    |    \"blocks.read\" = false,                           |\n+    |    \"blocks.read_only\" = false,                      |\n+    |    \"blocks.read_only_allow_delete\" = false,         |\n+    |    \"blocks.write\" = false,                          |\n+    |    codec = 'default',                               |\n+    |    column_policy = 'strict',                        |\n+    |    \"mapping.total_fields.limit\" = 1000,             |\n+    |    max_ngram_diff = 1,                              |\n+    |    max_shingle_diff = 3,                            |\n+    |    number_of_replicas = '0-1',                      |\n+    |    refresh_interval = 1000,                         |\n+    |    \"routing.allocation.enable\" = 'all',             |\n+    |    \"routing.allocation.total_shards_per_node\" = -1, |\n+    |    \"store.type\" = 'fs',                             |\n+    |    \"translog.durability\" = 'REQUEST',               |\n+    |    \"translog.flush_threshold_size\" = 536870912,     |\n+    |    \"translog.sync_interval\" = 5000,                 |\n+    |    \"unassigned.node_left.delayed_timeout\" = 60000,  |\n+    |    \"warmer.enabled\" = true,                         |\n+    |    \"write.wait_for_active_shards\" = '1'             |\n+    | )                                                   |\n+    +-----------------------------------------------------+\n+    SHOW 1 row in set (... sec)\n+\n+2. Create a new temporary table, using the schema returned from\n+   :ref:`ref-show-create-table`::\n+\n+    cr> CREATE TABLE rx.tmp_metrics (id TEXT PRIMARY KEY, temperature REAL);\n+    CREATE OK, 1 row affected (... sec)\n+\n+3. Copy the data::\n+\n+    cr> INSERT INTO rx.tmp_metrics (id, temperature) (SELECT id, temperature FROM rx.metrics);\n+    INSERT OK, 2 rows affected (... sec)\n+\n+4. Swap the tables::\n+\n+    cr> ALTER CLUSTER SWAP TABLE rx.tmp_metrics TO rx.metrics;\n+    ALTER OK, 1 row affected  (... sec)\n+\n+5. Confirm the new ``your_table`` contains all data and has the new version::\n+\n+    cr> SELECT count(*) FROM rx.metrics;\n+    +----------+\n+    | count(*) |\n+    +----------+\n+    |        2 |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n \n-5) Swap the tables::\n+    cr> SELECT version['created'] FROM information_schema.tables \n+    ... WHERE table_schema = 'rx' AND table_name = 'metrics';\n+    +--------------------+\n+    | version['created'] |\n+    +--------------------+\n+    | 4.2.0              |\n+    +--------------------+\n+    SELECT 1 row in set (... sec)\n \n-    ALTER CLUSTER SWAP TABLE tmp_your_table TO your_table;\n+6. Drop the now obsolete old table::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwODU5MQ==", "bodyText": "some related reading here: https://english.stackexchange.com/a/461189 (fun fact: this is one element of typographic style I'm fascinated with and have done far too much research on than I care to admit)", "url": "https://github.com/crate/crate/pull/9722#discussion_r387108591", "createdAt": "2020-03-03T15:44:32Z", "author": {"login": "norosa"}, "path": "docs/admin/system-information.rst", "diffHunk": "@@ -1574,49 +1574,161 @@ Tables need to be recreated\n    cluster check is failing. Follow the instructions below to get this cluster\n    check passing.\n \n-This check warns you if there are tables that need to be recreated for\n-compatibility with future major versions of CrateDB.\n+This check warns you if your cluster contains tables that you need to reindex\n+before you can upgrade to a future major version of CrateDB.\n \n-If you try to upgrade to the next major version of CrateDB with tables that\n-have not been recreated, CrateDB will refuse to start.\n+If you try to upgrade to a later major CrateDB version without reindexing the\n+tables, CrateDB will refuse to start.\n \n-To recreate a table, you have to create new tables, copy over the data and\n-rename or remove the old table.\n+CrateDB Table Version Compatibility Scheme\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-1) Use :ref:`ref-show-create-table` to get the schema required to create an\n-empty copy of the table to recreate::\n+CrateDB maintains backward compatibility for tables created in ``majorVersion - 1``:\n \n-    SHOW CREATE TABLE your_table;\n-\n-2) Create a new temporary table, using the schema returned from\n-:ref:`ref-show-create-table`::\n-\n-    CREATE TABLE tmp_your_table (...);\n-\n-3) Prevent inserts to the original table::\n-\n-    ALTER TABLE your_table SET (\"blocks.read_only\" = true);\n-\n-4) Copy the data::\n+.. list-table::\n \n-    INSERT INTO tmp_your_table (...) (SELECT ... FROM your_table);\n+    * - Table Origin\n+      - Current Version\n+      - Current Version\n+      - Current Version\n+    * - \n+      - 3.x\n+      - 4.x\n+      - 5.x\n+    * - 3.x\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+      - \u274c\n+    * - 4.x\n+      - \u274c\n+      - \u2714\ufe0f\n+      - \u2714\ufe0f\n+    * - 5.x\n+      - \u274c\n+      - \u274c\n+      - \u2714\ufe0f\n+\n+\n+Avoiding Reindex Using Partitioned Tables\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Reindexing tables is an expensive operation which can take a long time. If you\n+are storing time series data for a certain retention period and delete old\n+data, it is possible to use the :ref:`partitioned_tables` feature to avoid\n+reindex operations.\n+\n+You will have to partition a table by a column that denotes time. For example,\n+if you have a retention period of 9 months, you could partition a table by a\n+``month`` column. Then every month the system creates a new partition. This new\n+partition is created using the active CrateDB version and is compatible with\n+the next major CrateDB version. You will also have to delete the oldest\n+partition. By doing this you will have rolled through all partitions after 9\n+months and all partitions will be compatible with the next major CrateDB\n+version.\n+\n+\n+How To Reindex\n+~~~~~~~~~~~~~~\n+\n+.. hide:\n+\n+    cr> CREATE TABLE rx.metrics (id TEXT PRIMARY KEY, temperature REAL);\n+    CREATE OK, 1 row affected (... sec)\n+\n+    cr> INSERT INTO rx.metrics (id, temperature) VALUES ('1', 38.4), ('2', 42.7);\n+    INSERT OK, 2 rows affected  (... sec)\n+\n+    cr> REFRESH TABLE rx.metrics;\n+    REFRESH OK, 1 row affected  (... sec)\n+\n+1. Use :ref:`ref-show-create-table` to get the schema required to create an\n+   empty copy of the table to recreate::\n+\n+    cr> SHOW CREATE TABLE rx.metrics;\n+    +-----------------------------------------------------+\n+    | SHOW CREATE TABLE rx.metrics                        |\n+    +-----------------------------------------------------+\n+    | CREATE TABLE IF NOT EXISTS \"rx\".\"metrics\" (         |\n+    |    \"id\" TEXT,                                       |\n+    |    \"temperature\" REAL,                              |\n+    |    PRIMARY KEY (\"id\")                               |\n+    | )                                                   |\n+    | CLUSTERED BY (\"id\") INTO 4 SHARDS                   |\n+    | WITH (                                              |\n+    |    \"allocation.max_retries\" = 5,                    |\n+    |    \"blocks.metadata\" = false,                       |\n+    |    \"blocks.read\" = false,                           |\n+    |    \"blocks.read_only\" = false,                      |\n+    |    \"blocks.read_only_allow_delete\" = false,         |\n+    |    \"blocks.write\" = false,                          |\n+    |    codec = 'default',                               |\n+    |    column_policy = 'strict',                        |\n+    |    \"mapping.total_fields.limit\" = 1000,             |\n+    |    max_ngram_diff = 1,                              |\n+    |    max_shingle_diff = 3,                            |\n+    |    number_of_replicas = '0-1',                      |\n+    |    refresh_interval = 1000,                         |\n+    |    \"routing.allocation.enable\" = 'all',             |\n+    |    \"routing.allocation.total_shards_per_node\" = -1, |\n+    |    \"store.type\" = 'fs',                             |\n+    |    \"translog.durability\" = 'REQUEST',               |\n+    |    \"translog.flush_threshold_size\" = 536870912,     |\n+    |    \"translog.sync_interval\" = 5000,                 |\n+    |    \"unassigned.node_left.delayed_timeout\" = 60000,  |\n+    |    \"warmer.enabled\" = true,                         |\n+    |    \"write.wait_for_active_shards\" = '1'             |\n+    | )                                                   |\n+    +-----------------------------------------------------+\n+    SHOW 1 row in set (... sec)\n+\n+2. Create a new temporary table, using the schema returned from\n+   :ref:`ref-show-create-table`::\n+\n+    cr> CREATE TABLE rx.tmp_metrics (id TEXT PRIMARY KEY, temperature REAL);\n+    CREATE OK, 1 row affected (... sec)\n+\n+3. Copy the data::\n+\n+    cr> INSERT INTO rx.tmp_metrics (id, temperature) (SELECT id, temperature FROM rx.metrics);\n+    INSERT OK, 2 rows affected (... sec)\n+\n+4. Swap the tables::\n+\n+    cr> ALTER CLUSTER SWAP TABLE rx.tmp_metrics TO rx.metrics;\n+    ALTER OK, 1 row affected  (... sec)\n+\n+5. Confirm the new ``your_table`` contains all data and has the new version::\n+\n+    cr> SELECT count(*) FROM rx.metrics;\n+    +----------+\n+    | count(*) |\n+    +----------+\n+    |        2 |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n \n-5) Swap the tables::\n+    cr> SELECT version['created'] FROM information_schema.tables \n+    ... WHERE table_schema = 'rx' AND table_name = 'metrics';\n+    +--------------------+\n+    | version['created'] |\n+    +--------------------+\n+    | 4.2.0              |\n+    +--------------------+\n+    SELECT 1 row in set (... sec)\n \n-    ALTER CLUSTER SWAP TABLE tmp_your_table TO your_table;\n+6. Drop the now obsolete old table::", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMzAwNw=="}, "originalCommit": {"oid": "6c617fbb0e58556a723f170b7693cab81b6f7c23"}, "originalPosition": 169}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1628, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}