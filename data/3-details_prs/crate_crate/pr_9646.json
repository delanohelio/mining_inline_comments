{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTg0NTM4", "number": 9646, "title": "Add the ``trunc`` scalar function", "bodyText": "https://www.postgresql.org/docs/current/functions-math.html", "createdAt": "2020-02-11T10:40:17Z", "url": "https://github.com/crate/crate/pull/9646", "merged": true, "mergeCommit": {"oid": "5a40a952c5504da47202cfd5bb8278c6da563ee2"}, "closed": true, "closedAt": "2020-02-17T12:41:32Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDPlJGABqjMwMjYwNjUyMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFMMQUgBqjMwNDM0NzA0NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d6261c9232d1b0d59fdb478b5ec7fbcf9b438a4", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4d6261c9232d1b0d59fdb478b5ec7fbcf9b438a4", "committedDate": "2020-02-11T10:39:19Z", "message": "Add the ``trunc`` scalar function"}, "afterCommit": {"oid": "fdb5dba316ecbaa6fe93fed45a1ed0048423175d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fdb5dba316ecbaa6fe93fed45a1ed0048423175d", "committedDate": "2020-02-11T10:56:41Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdb5dba316ecbaa6fe93fed45a1ed0048423175d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fdb5dba316ecbaa6fe93fed45a1ed0048423175d", "committedDate": "2020-02-11T10:56:41Z", "message": "Fixup"}, "afterCommit": {"oid": "a781eeac7100685a108f3f57d4fc129f7b35d9c9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a781eeac7100685a108f3f57d4fc129f7b35d9c9", "committedDate": "2020-02-11T14:35:11Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a781eeac7100685a108f3f57d4fc129f7b35d9c9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a781eeac7100685a108f3f57d4fc129f7b35d9c9", "committedDate": "2020-02-11T14:35:11Z", "message": "Fixup"}, "afterCommit": {"oid": "925f98aa1922d23808c2166294ab8945ea0ea786", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/925f98aa1922d23808c2166294ab8945ea0ea786", "committedDate": "2020-02-11T14:35:57Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "824bdfe0d7bb3f1466112950e70099c1fdd93018", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/824bdfe0d7bb3f1466112950e70099c1fdd93018", "committedDate": "2020-02-11T15:02:19Z", "message": "Execute ArithmeticIntegrationTests, 'where', using jdbc"}, "afterCommit": {"oid": "6a99db2a2567d0b0cd3367a81118e5bf139b8d40", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6a99db2a2567d0b0cd3367a81118e5bf139b8d40", "committedDate": "2020-02-11T15:33:00Z", "message": "Fix tests now that the return type is not directly BigDecimal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MjgwMDcw", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357280070", "createdAt": "2020-02-12T08:59:15Z", "commit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwODo1OToxNVrOFomR4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOTowMzo0N1rOFombVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNDUzMQ==", "bodyText": "Using floor like that wouldn't return the correct values for negative numbers:\nselect trunc(-29.99);\n\nexpected:  -29\ngot:       -30", "url": "https://github.com/crate/crate/pull/9646#discussion_r378114531", "createdAt": "2020-02-12T08:59:15Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.scalar.UnaryScalar;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";\n+                DataType argType = types.get(0);\n+                DataType returnType = DataTypes.getIntegralReturnType(argType);\n+                return 1 == argsLen ?\n+                    new OneParamTrunc(argType, returnType) : new TwoParamTrunc(argType, returnType);\n+            }\n+        });\n+    }\n+\n+\n+    private static class OneParamTrunc extends UnaryScalar<Number, Number> {\n+\n+        OneParamTrunc(DataType argType, DataType returnType) {\n+            super(NAME, argType, returnType, n -> evaluate(n, returnType));\n+        }\n+\n+        static Number evaluate(Object n, DataType returnType) {\n+            return (Number) returnType.value(Math.floor(((Number) n).doubleValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNTA5NQ==", "bodyText": "Same floor issue with negative numbers as described before.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378115095", "createdAt": "2020-02-12T09:00:22Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.scalar.UnaryScalar;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";\n+                DataType argType = types.get(0);\n+                DataType returnType = DataTypes.getIntegralReturnType(argType);\n+                return 1 == argsLen ?\n+                    new OneParamTrunc(argType, returnType) : new TwoParamTrunc(argType, returnType);\n+            }\n+        });\n+    }\n+\n+\n+    private static class OneParamTrunc extends UnaryScalar<Number, Number> {\n+\n+        OneParamTrunc(DataType argType, DataType returnType) {\n+            super(NAME, argType, returnType, n -> evaluate(n, returnType));\n+        }\n+\n+        static Number evaluate(Object n, DataType returnType) {\n+            return (Number) returnType.value(Math.floor(((Number) n).doubleValue()));\n+        }\n+    }\n+\n+    private static class TwoParamTrunc extends Scalar<Number, Number> {\n+\n+        private final FunctionInfo info;\n+        private final DataType returnType;\n+\n+        TwoParamTrunc(DataType argType, DataType returnType) {\n+            info = new FunctionInfo(new FunctionIdent(\n+                NAME, List.of(argType, DataTypes.INTEGER)), DataTypes.DOUBLE);\n+            this.returnType = returnType;\n+        }\n+\n+        @Override\n+        public FunctionInfo info() {\n+            return info;\n+        }\n+\n+        @Override\n+        public Number evaluate(TransactionContext txnCtx, Input<Number>... args) {\n+            Number n = args[0].value();\n+            int numDecimals = args[1].value().intValue();\n+            if (0 == numDecimals) {\n+                return OneParamTrunc.evaluate(n, returnType);\n+            } else {\n+                return BigDecimal.valueOf(n.doubleValue()).setScale(numDecimals, RoundingMode.FLOOR).doubleValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNjA4Ng==", "bodyText": "not sure if we really need this additional integration tests, I think the scalar unit tests are enough. Or do I miss some by unit tests not covered scenarios?", "url": "https://github.com/crate/crate/pull/9646#discussion_r378116086", "createdAt": "2020-02-12T09:02:11Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/integrationtests/ArithmeticIntegrationTest.java", "diffHunk": "@@ -70,6 +72,14 @@ public void testSelectWhereArithmeticScalar() throws Exception {\n         assertThat(response.rowCount(), is(1L));\n         assertThat((Long) response.rows()[0][0], is(2L));\n \n+        execute(\"select trunc(d) from t where trunc(d, 1) = 2.2\");\n+        assertThat(response.rowCount(), is(1L));\n+        assertThat((Long) response.rows()[0][0], is(2L));\n+\n+        execute(\"select trunc(d) from t where trunc(d, 2) = 29.19\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODExNjk0OA==", "bodyText": "Is this worth having 2 implementations? Maybe we can just use 1 with a default val of 0.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378116948", "createdAt": "2020-02-12T09:03:47Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.scalar.UnaryScalar;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";\n+                DataType argType = types.get(0);\n+                DataType returnType = DataTypes.getIntegralReturnType(argType);\n+                return 1 == argsLen ?\n+                    new OneParamTrunc(argType, returnType) : new TwoParamTrunc(argType, returnType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96c058f04bfd449a02c326bf3db9f51a07692c26", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/96c058f04bfd449a02c326bf3db9f51a07692c26", "committedDate": "2020-02-11T16:38:12Z", "message": "Fixup"}, "afterCommit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e23661f58619ab3133c8d709ee19d908af18533d", "committedDate": "2020-02-12T09:54:20Z", "message": "Add test for trunc'ing negatives"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MzYxMDcx", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357361071", "createdAt": "2020-02-12T10:58:22Z", "commit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1ODoyMlrOFoqOOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1OToyNFrOFoqQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTEzMA==", "bodyText": "all input args must be checked for NULL values, otherwise this results in an NPE.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378179130", "createdAt": "2020-02-12T10:58:22Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";\n+                DataType argType = types.get(0);\n+                DataType returnTypeSingleArg = DataTypes.getIntegralReturnType(argType);\n+                FunctionInfo info;\n+                if (1 == argsLen) {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType)),\n+                        returnTypeSingleArg);\n+                } else {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType, DataTypes.INTEGER)),\n+                        DataTypes.DOUBLE);\n+                }\n+                return new Scalar<Number, Number>() {\n+\n+                    @Override\n+                    public FunctionInfo info() {\n+                        return info;\n+                    }\n+\n+                    @Override\n+                    public Number evaluate(TransactionContext txnCtx, Input<Number>... args) {\n+                        Number n = args[0].value();\n+                        int numDecimals = args.length > 1 ? args[1].value().intValue() : 0;\n+                        double val = n.doubleValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTQ4MQ==", "bodyText": "this should result in  isLiteral(29L).\nin general, normalizing using literals should always result in a literal, pls fix all normalize tests here please.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378179481", "createdAt": "2020-02-12T10:58:59Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/TruncFunctionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import static io.crate.testing.SymbolMatchers.isFunction;\n+import static io.crate.testing.SymbolMatchers.isLiteral;\n+\n+public class TruncFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void testNormalizeOnDouble() throws Exception {\n+        assertNormalize(\"trunc(29.1947)\", isLiteral(29L));\n+        assertNormalize(\"trunc(-29.1947)\", isLiteral(-29L));\n+        assertNormalize(\"trunc(29.1947, 0)\", isFunction(TruncFunction.NAME, List.of(DataTypes.DOUBLE, DataTypes.INTEGER)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3OTY4Ng==", "bodyText": "should result in isLiteral(null, DataTypes.LONG)", "url": "https://github.com/crate/crate/pull/9646#discussion_r378179686", "createdAt": "2020-02-12T10:59:24Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/TruncFunctionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import static io.crate.testing.SymbolMatchers.isFunction;\n+import static io.crate.testing.SymbolMatchers.isLiteral;\n+\n+public class TruncFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void testNormalizeOnDouble() throws Exception {\n+        assertNormalize(\"trunc(29.1947)\", isLiteral(29L));\n+        assertNormalize(\"trunc(-29.1947)\", isLiteral(-29L));\n+        assertNormalize(\"trunc(29.1947, 0)\", isFunction(TruncFunction.NAME, List.of(DataTypes.DOUBLE, DataTypes.INTEGER)));\n+        assertNormalize(\"trunc(cast(null as double))\", isFunction(TruncFunction.NAME, List.of(DataTypes.DOUBLE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e23661f58619ab3133c8d709ee19d908af18533d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e23661f58619ab3133c8d709ee19d908af18533d", "committedDate": "2020-02-12T09:54:20Z", "message": "Add test for trunc'ing negatives"}, "afterCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5a39228042bcfd455e54cb294c91895a1b850804", "committedDate": "2020-02-12T13:01:26Z", "message": "Result should be literal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTI5NzYx", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357529761", "createdAt": "2020-02-12T15:09:36Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTowOTozN1rOFoyTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTowOTozN1rOFoyTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxMTQzNg==", "bodyText": "have a look at the other sections in this document. the style we've used for other functions is to have an intro para that explains what the function does and uses the argument literals in the explanation text\nfor example:\n``power(a: number, b: number)``\n-------------------------------\n\nReturns the given argument ``a`` raised to the power of argument ``b``.\n\ncould you reword this so it follows the same style?", "url": "https://github.com/crate/crate/pull/9646#discussion_r378311436", "createdAt": "2020-02-12T15:09:37Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1393,6 +1393,37 @@ See below for an example::\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-trunc:\n+\n+``trunc(number[, precision])``\n+------------------------------\n+\n+`number` is the ``numeric`` value to be truncated.\n+`precision` is an ``integer`` indicating the number of decimal places to\n+preserve (defaults to 0).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTMxMzY3", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357531367", "createdAt": "2020-02-12T15:11:29Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxMToyOVrOFoyYEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxMToyOVrOFoyYEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxMjcyMw==", "bodyText": "the first sentence here is a good candidate for what I have suggested in my previous comment\nyou could lift the first sentence out and put it as the first para and use the argument literals. then, in this para, just talk about what the function returns\ncheck out the rest of the document for examples where we've done this previously", "url": "https://github.com/crate/crate/pull/9646#discussion_r378312723", "createdAt": "2020-02-12T15:11:29Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1393,6 +1393,37 @@ See below for an example::\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-trunc:\n+\n+``trunc(number[, precision])``\n+------------------------------\n+\n+`number` is the ``numeric`` value to be truncated.\n+`precision` is an ``integer`` indicating the number of decimal places to\n+preserve (defaults to 0).\n+\n+Returns the value truncated to the specified precision. When the precision\n+is not specified, or when it is 0, it returns an ``integer``, or ``bigint``.\n+When it is specified, the return value will be of type ``double precision``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTU5NzU3", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357559757", "createdAt": "2020-02-12T15:43:37Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo0MzozN1rOFoztng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo0MzozN1rOFoztng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzNDYyMg==", "bodyText": "don't we want to treat trunc(number, 0) the same as trunc(number)?  At least pgsql behaves like this..", "url": "https://github.com/crate/crate/pull/9646#discussion_r378334622", "createdAt": "2020-02-12T15:43:37Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/TruncFunctionTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.junit.Test;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import static io.crate.testing.SymbolMatchers.isFunction;\n+import static io.crate.testing.SymbolMatchers.isLiteral;\n+\n+public class TruncFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void testNormalizeOnDouble() throws Exception {\n+        assertNormalize(\"trunc(29.1947)\", isLiteral(29L));\n+        assertNormalize(\"trunc(-29.1947)\", isLiteral(-29L));\n+        assertNormalize(\"trunc(29.1947, 0)\", isLiteral(29.0d));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTcwNzI4", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357570728", "createdAt": "2020-02-12T15:55:58Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo1NTo1OFrOFo0Oaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo1NTo1OFrOFo0Oaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0MzAxOQ==", "bodyText": "You can use BaseFunctionResolver.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378343019", "createdAt": "2020-02-12T15:55:58Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTcyMTYw", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357572160", "createdAt": "2020-02-12T15:57:33Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo1NzozM1rOFo0TAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNTo1NzozM1rOFo0TAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0NDE5NA==", "bodyText": "why do we need to assert it here, FunctionResolver#getSignature does it already.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378344194", "createdAt": "2020-02-12T15:57:33Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTc1ODAy", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-357575802", "createdAt": "2020-02-12T16:01:32Z", "commit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjowMTozMlrOFo0d8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjowMTozMlrOFo0d8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0Njk5NA==", "bodyText": "would it be simpler to replace it with UnaryScalar and BinaryScalar, so we can delegate null checks and inputs materialization to those classes.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378346994", "createdAt": "2020-02-12T16:01:32Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.symbol.FuncArg;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionResolver;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new FunctionResolver() {\n+\n+            @Override\n+            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n+                return SIGNATURE.match(funcArgs);\n+            }\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                assert argsLen > 0 && argsLen <= 2 : \"number of args must be up to 2\";\n+                DataType argType = types.get(0);\n+                DataType returnTypeSingleArg = DataTypes.getIntegralReturnType(argType);\n+                FunctionInfo info;\n+                if (1 == argsLen) {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType)),\n+                        returnTypeSingleArg);\n+                } else {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType, DataTypes.INTEGER)),\n+                        DataTypes.DOUBLE);\n+                }\n+                return new Scalar<Number, Number>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a39228042bcfd455e54cb294c91895a1b850804"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDgwMjk5", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-358080299", "createdAt": "2020-02-13T09:50:23Z", "commit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MDoyM1rOFpNRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MDoyM1rOFpNRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MzM4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Returns `number` truncated to the specified `precision`.\n          \n          \n            \n            Returns ``number`` truncated to the specified ``precision``.", "url": "https://github.com/crate/crate/pull/9646#discussion_r378753382", "createdAt": "2020-02-13T09:50:23Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1393,6 +1393,40 @@ See below for an example::\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-trunc:\n+\n+``trunc(number[, precision])``\n+------------------------------\n+\n+Returns `number` truncated to the specified `precision`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDgwNjE5", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-358080619", "createdAt": "2020-02-13T09:50:49Z", "commit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MDo1MFrOFpNSXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MDo1MFrOFpNSXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1MzYyOQ==", "bodyText": "you can drop this line now! :)", "url": "https://github.com/crate/crate/pull/9646#discussion_r378753629", "createdAt": "2020-02-13T09:50:50Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1393,6 +1393,40 @@ See below for an example::\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-trunc:\n+\n+``trunc(number[, precision])``\n+------------------------------\n+\n+Returns `number` truncated to the specified `precision`.\n+\n+`number` is the ``numeric`` value to be truncated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MDgyNDY1", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-358082465", "createdAt": "2020-02-13T09:53:35Z", "commit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MzozNVrOFpNYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1MzozNVrOFpNYAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NTA3Mg==", "bodyText": "you can drop this line too. maybe add the bit about \"the number of decimal places\" to the first para in this section as a clarification, i.e.:\nReturns ``number`` truncated to the specified ``precision`` (i.e., decimal places).", "url": "https://github.com/crate/crate/pull/9646#discussion_r378755072", "createdAt": "2020-02-13T09:53:35Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1393,6 +1393,40 @@ See below for an example::\n     +-------------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar-trunc:\n+\n+``trunc(number[, precision])``\n+------------------------------\n+\n+Returns `number` truncated to the specified `precision`.\n+\n+`number` is the ``numeric`` value to be truncated.\n+`precision` is an ``integer`` indicating the number of decimal places to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "675b5136fd8df163e7c07c86e42ed226cbfbaba8", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/675b5136fd8df163e7c07c86e42ed226cbfbaba8", "committedDate": "2020-02-12T16:22:07Z", "message": "Include Nomi's suggestions"}, "afterCommit": {"oid": "a909d1f123d83dfd3b3631d2bf5e63e95a2da263", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a909d1f123d83dfd3b3631d2bf5e63e95a2da263", "committedDate": "2020-02-14T10:46:00Z", "message": "Reference simplification/improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4ODY2MTE3", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-358866117", "createdAt": "2020-02-14T11:03:20Z", "commit": {"oid": "a909d1f123d83dfd3b3631d2bf5e63e95a2da263"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTowMzoyMFrOFpzEUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTowMzoyMFrOFpzEUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MjYyNg==", "bodyText": "This could be a bit simplified (2nd arg is already ensured to be an INTEGER by the SIGNATURE):\nDataType returnType = types.size() == 1 ? DataTypes.getIntegralReturnType(argType) : DataTypes.DOUBLE;\nFunctionInfo info = new FunctionInfo(new FunctionIdent(NAME, types), returnType);", "url": "https://github.com/crate/crate/pull/9646#discussion_r379372626", "createdAt": "2020-02-14T11:03:20Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.BaseFunctionResolver;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new BaseFunctionResolver(SIGNATURE) {\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                int argsLen = types.size();\n+                DataType argType = types.get(0);\n+                DataType returnTypeSingleArg = DataTypes.getIntegralReturnType(argType);\n+                FunctionInfo info;\n+                if (1 == argsLen) {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType)),\n+                        returnTypeSingleArg);\n+                } else {\n+                    info = new FunctionInfo(\n+                        new FunctionIdent(NAME, List.of(argType, DataTypes.INTEGER)),\n+                        DataTypes.DOUBLE);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a909d1f123d83dfd3b3631d2bf5e63e95a2da263"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a909d1f123d83dfd3b3631d2bf5e63e95a2da263", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a909d1f123d83dfd3b3631d2bf5e63e95a2da263", "committedDate": "2020-02-14T10:46:00Z", "message": "Reference simplification/improvements"}, "afterCommit": {"oid": "a29b75425577b37252f8a3a203cfadc941f5a760", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a29b75425577b37252f8a3a203cfadc941f5a760", "committedDate": "2020-02-14T14:54:14Z", "message": "Simplify info construction"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d07cc65abd556792f76124ab0527d8a9eb5eebb", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0d07cc65abd556792f76124ab0527d8a9eb5eebb", "committedDate": "2020-02-14T14:57:50Z", "message": "Fixup"}, "afterCommit": {"oid": "057d3da6b0de3c51de6cec9fce2f9766c73601ee", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/057d3da6b0de3c51de6cec9fce2f9766c73601ee", "committedDate": "2020-02-17T10:03:09Z", "message": "Add Basti's suggestion of having a UnaryScalar and a Scalar\n\nfor the two different implementations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjYwMjIw", "url": "https://github.com/crate/crate/pull/9646#pullrequestreview-359660220", "createdAt": "2020-02-17T11:14:38Z", "commit": {"oid": "057d3da6b0de3c51de6cec9fce2f9766c73601ee"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMToxNDozOVrOFqg2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMToxNToxN1rOFqg3UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMjY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        NAME, List.of(argType, DataTypes.INTEGER)), DataTypes.DOUBLE);\n          \n          \n            \n                                        NAME, types), DataTypes.DOUBLE);", "url": "https://github.com/crate/crate/pull/9646#discussion_r380122673", "createdAt": "2020-02-17T11:14:39Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.scalar.UnaryScalar;\n+import io.crate.metadata.BaseFunctionResolver;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new BaseFunctionResolver(SIGNATURE) {\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                DataType argType = types.get(0);\n+                DataType returnType = DataTypes.getIntegralReturnType(argType);\n+                return 1 == types.size() ?\n+                    new UnaryScalar<Number, Number>(NAME, argType, returnType, n -> {\n+                        double val = n.doubleValue();\n+                        Function<Double, Double> f = val >= 0 ? Math::floor : Math::ceil;\n+                        return (Number) returnType.value(f.apply(val));\n+                    })\n+                    :\n+                    new Scalar<Number, Number>() {\n+\n+                        FunctionInfo info = new FunctionInfo(new FunctionIdent(\n+                            NAME, List.of(argType, DataTypes.INTEGER)), DataTypes.DOUBLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057d3da6b0de3c51de6cec9fce2f9766c73601ee"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMjk2MA==", "bodyText": "I'd prefer if/else for readability.", "url": "https://github.com/crate/crate/pull/9646#discussion_r380122960", "createdAt": "2020-02-17T11:15:17Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/TruncFunction.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.arithmetic;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.expression.scalar.UnaryScalar;\n+import io.crate.metadata.BaseFunctionResolver;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionImplementation;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.params.FuncParams;\n+import io.crate.metadata.functions.params.Param;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+\n+public final class TruncFunction {\n+\n+    public static final String NAME = \"trunc\";\n+    private static final FuncParams SIGNATURE = FuncParams\n+        .builder(Param.NUMERIC)\n+        .withVarArgs(Param.INTEGER)\n+        .limitVarArgOccurrences(1)\n+        .build();\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(NAME, new BaseFunctionResolver(SIGNATURE) {\n+\n+            @Override\n+            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n+                DataType argType = types.get(0);\n+                DataType returnType = DataTypes.getIntegralReturnType(argType);\n+                return 1 == types.size() ?\n+                    new UnaryScalar<Number, Number>(NAME, argType, returnType, n -> {\n+                        double val = n.doubleValue();\n+                        Function<Double, Double> f = val >= 0 ? Math::floor : Math::ceil;\n+                        return (Number) returnType.value(f.apply(val));\n+                    })\n+                    :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057d3da6b0de3c51de6cec9fce2f9766c73601ee"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "057d3da6b0de3c51de6cec9fce2f9766c73601ee", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/057d3da6b0de3c51de6cec9fce2f9766c73601ee", "committedDate": "2020-02-17T10:03:09Z", "message": "Add Basti's suggestion of having a UnaryScalar and a Scalar\n\nfor the two different implementations."}, "afterCommit": {"oid": "3e7c51cd96858799530566f9777bb4c7566a7f1f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3e7c51cd96858799530566f9777bb4c7566a7f1f", "committedDate": "2020-02-17T12:02:49Z", "message": "Add the ``trunc`` scalar function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e7c51cd96858799530566f9777bb4c7566a7f1f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3e7c51cd96858799530566f9777bb4c7566a7f1f", "committedDate": "2020-02-17T12:02:49Z", "message": "Add the ``trunc`` scalar function"}, "afterCommit": {"oid": "1500b2a40db5f18b0632c48eb2deb23fdb330307", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1500b2a40db5f18b0632c48eb2deb23fdb330307", "committedDate": "2020-02-17T12:05:39Z", "message": "Add the ``trunc`` scalar function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c3d0ca2541a6294e15bde15861ec7722cccfac", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/73c3d0ca2541a6294e15bde15861ec7722cccfac", "committedDate": "2020-02-17T12:07:47Z", "message": "Add the ``trunc`` scalar function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1500b2a40db5f18b0632c48eb2deb23fdb330307", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1500b2a40db5f18b0632c48eb2deb23fdb330307", "committedDate": "2020-02-17T12:05:39Z", "message": "Add the ``trunc`` scalar function"}, "afterCommit": {"oid": "73c3d0ca2541a6294e15bde15861ec7722cccfac", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/73c3d0ca2541a6294e15bde15861ec7722cccfac", "committedDate": "2020-02-17T12:07:47Z", "message": "Add the ``trunc`` scalar function"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}