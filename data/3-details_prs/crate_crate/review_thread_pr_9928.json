{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDY1OTUy", "number": 9928, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNjoyNFrOD79I0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0MDo1NFrOD8Ei-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk0MjU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNjoyNFrOGUmIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNjoyNFrOGUmIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0OTQ2OA==", "bodyText": "nitpick: should be folded into the line above or indented.", "url": "https://github.com/crate/crate/pull/9928#discussion_r424249468", "createdAt": "2020-05-13T08:06:24Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "diffHunk": "@@ -57,14 +57,73 @@\n \n     public static final String NAME = \"subscript\";\n \n+    private final Signature signature;\n     private final FunctionInfo info;\n     private final BiFunction<Object, Object, Object> lookup;\n \n     public static void register(ScalarFunctionModule module) {\n-        module.register(NAME, new Resolver());\n+        // subscript(array(object)), text) -> array(undefined)\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                parseTypeSignature(\"array(object)\"),\n+                DataTypes.STRING.getTypeSignature(),\n+                parseTypeSignature(\"array(undefined)\")),\n+            (signature, dataTypes) -> new SubscriptFunction(\n+                signature,\n+                FunctionInfo.of(NAME, dataTypes, new ArrayType<>(DataTypes.UNDEFINED)),\n+                SubscriptFunction::lookupIntoListObjectsByName)\n+        );\n+        // subscript(array(any)), text) -> any\n+        module.register(\n+            Signature\n+                .scalar(\n+                    NAME,\n+                    parseTypeSignature(\"array(E)\"),\n+                    DataTypes.INTEGER.getTypeSignature(),\n+                    parseTypeSignature(\"E\"))\n+                .withTypeVariableConstraints(\n+                typeVariable(\"E\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk0NjcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNzozOFrOGUmLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowNzozOFrOGUmLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MDE3NQ==", "bodyText": "Could we document this a bit (why is this needed)?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424250175", "createdAt": "2020-05-13T08:07:38Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "diffHunk": "@@ -57,14 +57,73 @@\n \n     public static final String NAME = \"subscript\";\n \n+    private final Signature signature;\n     private final FunctionInfo info;\n     private final BiFunction<Object, Object, Object> lookup;\n \n     public static void register(ScalarFunctionModule module) {\n-        module.register(NAME, new Resolver());\n+        // subscript(array(object)), text) -> array(undefined)\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                parseTypeSignature(\"array(object)\"),\n+                DataTypes.STRING.getTypeSignature(),\n+                parseTypeSignature(\"array(undefined)\")),\n+            (signature, dataTypes) -> new SubscriptFunction(\n+                signature,\n+                FunctionInfo.of(NAME, dataTypes, new ArrayType<>(DataTypes.UNDEFINED)),\n+                SubscriptFunction::lookupIntoListObjectsByName)\n+        );\n+        // subscript(array(any)), text) -> any\n+        module.register(\n+            Signature\n+                .scalar(\n+                    NAME,\n+                    parseTypeSignature(\"array(E)\"),\n+                    DataTypes.INTEGER.getTypeSignature(),\n+                    parseTypeSignature(\"E\"))\n+                .withTypeVariableConstraints(\n+                typeVariable(\"E\")),\n+            (signature, dataTypes) -> {\n+                var returnType = ((ArrayType<?>) dataTypes.get(0)).innerType();\n+                return new SubscriptFunction(\n+                    signature,\n+                    FunctionInfo.of(NAME, dataTypes, returnType),\n+                    SubscriptFunction::lookupByNumericIndex);\n+            });\n+        // subscript(object(text, element), text) -> element\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.UNTYPED_OBJECT.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.UNDEFINED.getTypeSignature()),\n+            (signature, dataTypes) ->\n+                new SubscriptFunction(\n+                    signature,\n+                    new FunctionInfo(new FunctionIdent(NAME, dataTypes), DataTypes.UNDEFINED),\n+                    SubscriptFunction::lookupByName\n+                )\n+        );\n+        module.register(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk1NDU1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/expression/scalar/SubscriptFunctionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODowOTozM1rOGUmP4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMToyMVrOGUzi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MTM2Mw==", "bodyText": "I think this error message is not really understandable for users. Is it possible to improve here?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424251363", "createdAt": "2020-05-13T08:09:33Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/expression/scalar/SubscriptFunctionTest.java", "diffHunk": "@@ -69,9 +69,7 @@ public void testIndexOutOfRange() throws Exception {\n \n     @Test\n     public void testIndexExpressionIsNotInteger() throws Exception {\n-        expectedException.expectMessage(\n-            \"`index` in subscript expression (`base[index]`) \" +\n-            \"must be a numeric type if the base expression is text_array\");\n+        expectedException.expectMessage(\"No cast function found for return type undefined\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NzE2Mg==", "bodyText": "probably cannot do it better than this https://github.com/crate/crate/pull/9928/files#diff-fb3a57a840597e5dc05aa82f387d13e6R406, otherwise, we will get the casting exception message.", "url": "https://github.com/crate/crate/pull/9928#discussion_r424457162", "createdAt": "2020-05-13T13:55:16Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/scalar/SubscriptFunctionTest.java", "diffHunk": "@@ -69,9 +69,7 @@ public void testIndexOutOfRange() throws Exception {\n \n     @Test\n     public void testIndexExpressionIsNotInteger() throws Exception {\n-        expectedException.expectMessage(\n-            \"`index` in subscript expression (`base[index]`) \" +\n-            \"must be a numeric type if the base expression is text_array\");\n+        expectedException.expectMessage(\"No cast function found for return type undefined\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MTM2Mw=="}, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2OTI0Mg==", "bodyText": "\ud83d\udc4d Think this is much better now.", "url": "https://github.com/crate/crate/pull/9928#discussion_r424469242", "createdAt": "2020-05-13T14:11:21Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/expression/scalar/SubscriptFunctionTest.java", "diffHunk": "@@ -69,9 +69,7 @@ public void testIndexOutOfRange() throws Exception {\n \n     @Test\n     public void testIndexExpressionIsNotInteger() throws Exception {\n-        expectedException.expectMessage(\n-            \"`index` in subscript expression (`base[index]`) \" +\n-            \"must be a numeric type if the base expression is text_array\");\n+        expectedException.expectMessage(\"No cast function found for return type undefined\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MTM2Mw=="}, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk2NzYzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxMzoyM1rOGUmYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToyNTowNFrOGUtEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MzU1Mw==", "bodyText": "Why are arrays of objects skipped here? Shouldn't the array-type/object-type be adapted instead?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424253553", "createdAt": "2020-05-13T08:13:23Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -401,7 +402,11 @@ private FrameBoundDefinition convertToAnalyzedFrameBound(ExpressionAnalysisConte\n         int size = symbolsToCast.size();\n         List<Symbol> castList = new ArrayList<>(size);\n         for (int i = 0; i < size; i++) {\n-            castList.add(symbolsToCast.get(i).cast(targetTypes.get(i), false));\n+            var symbolToCast = symbolsToCast.get(i);\n+            if (ArrayType.unnest(symbolToCast.valueType()).id() != ObjectType.ID) {\n+                symbolToCast = symbolToCast.cast(targetTypes.get(i), false);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MzA5OA==", "bodyText": "The description of this point from the chat communication\nThe second issue is related to subscript on object or arrays of objects. There we try to infer the return type of the function at the normalization step based on arguments, see https://github.com/crate/crate/blob/master/server/src/main/java/io/crate/expression/scalar/SubscriptObjectFunction.java#L98, but with the new function signature, the object arguments were cast to objects coz of different inner types (empty vs actual inner types) and the return type inference logic was not working any longer.\nso basically I did that to skip cast for object and array(object) i am not sure how to handle in another way. hmm maybe actually checking whether the source and target are either array(object) and object and then don't cast source type if the source and target types have different inner types?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424363098", "createdAt": "2020-05-13T11:25:04Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -401,7 +402,11 @@ private FrameBoundDefinition convertToAnalyzedFrameBound(ExpressionAnalysisConte\n         int size = symbolsToCast.size();\n         List<Symbol> castList = new ArrayList<>(size);\n         for (int i = 0; i < size; i++) {\n-            castList.add(symbolsToCast.get(i).cast(targetTypes.get(i), false));\n+            var symbolToCast = symbolsToCast.get(i);\n+            if (ArrayType.unnest(symbolToCast.valueType()).id() != ObjectType.ID) {\n+                symbolToCast = symbolToCast.cast(targetTypes.get(i), false);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MzU1Mw=="}, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTk3MDIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxNDowOFrOGUmaIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODoxNDowOFrOGUmaIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1Mzk4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // subscript(array(any)), text) -> any\n          \n          \n            \n                    // subscript(array(any)), integer) -> any\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424253984", "createdAt": "2020-05-13T08:14:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/SubscriptFunction.java", "diffHunk": "@@ -57,14 +57,73 @@\n \n     public static final String NAME = \"subscript\";\n \n+    private final Signature signature;\n     private final FunctionInfo info;\n     private final BiFunction<Object, Object, Object> lookup;\n \n     public static void register(ScalarFunctionModule module) {\n-        module.register(NAME, new Resolver());\n+        // subscript(array(object)), text) -> array(undefined)\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                parseTypeSignature(\"array(object)\"),\n+                DataTypes.STRING.getTypeSignature(),\n+                parseTypeSignature(\"array(undefined)\")),\n+            (signature, dataTypes) -> new SubscriptFunction(\n+                signature,\n+                FunctionInfo.of(NAME, dataTypes, new ArrayType<>(DataTypes.UNDEFINED)),\n+                SubscriptFunction::lookupIntoListObjectsByName)\n+        );\n+        // subscript(array(any)), text) -> any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c62a0509e1c54ed81f2c312395c53a723d0b39"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzE1NjQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/Symbol.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0MDo1NFrOGUyJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo1MjowN1rOGUyqeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjIyNg==", "bodyText": "so basically the cast for the object and array(object) was added coz the target type, the one that comes from the signature, has the empty inner types while the source data type has some inner types. There is no point to cast an object to an object type with empty inner types, so probably these semantic is not correct. I've added this condition in the Symbol#cast. @mfussenegger (such as we talked a little bit about it during the daily coffee) wdyt?", "url": "https://github.com/crate/crate/pull/9928#discussion_r424446226", "createdAt": "2020-05-13T13:40:54Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/symbol/Symbol.java", "diffHunk": "@@ -59,6 +61,9 @@ public final Symbol cast(DataType<?> targetType) {\n     public Symbol cast(DataType<?> targetType, boolean tryCast) {\n         if (targetType.equals(valueType())) {\n             return this;\n+        } else if (ArrayType.unnest(targetType).equals(DataTypes.UNTYPED_OBJECT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a19c3254cd1e56c7c6734c803a1984e8b88c7d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ1NDc3Nw==", "bodyText": "Looks better to me to have it here \ud83d\udc4d", "url": "https://github.com/crate/crate/pull/9928#discussion_r424454777", "createdAt": "2020-05-13T13:52:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/Symbol.java", "diffHunk": "@@ -59,6 +61,9 @@ public final Symbol cast(DataType<?> targetType) {\n     public Symbol cast(DataType<?> targetType, boolean tryCast) {\n         if (targetType.equals(valueType())) {\n             return this;\n+        } else if (ArrayType.unnest(targetType).equals(DataTypes.UNTYPED_OBJECT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjIyNg=="}, "originalCommit": {"oid": "d8a19c3254cd1e56c7c6734c803a1984e8b88c7d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1464, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}