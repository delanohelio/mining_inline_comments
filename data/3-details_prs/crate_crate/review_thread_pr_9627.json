{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxODAyOTI3", "number": 9627, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjozNzozM1rODeb_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0NDoyN1rODecHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjQyNTM1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjozNzozM1rOFnkhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzoyMDowMFrOFnlt8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNzA4MA==", "bodyText": "Do we need to handle the array of row type separately, such as we have a special handling for RowType.", "url": "https://github.com/crate/crate/pull/9627#discussion_r377037080", "createdAt": "2020-02-10T12:37:33Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -97,31 +102,46 @@\n         return TYPES;\n     }\n \n-    public static DataType fromOID(int oid) {\n+    public static DataType<?> fromOID(int oid) {\n         return PG_TYPES_TO_CRATE_TYPE.get(oid);\n     }\n \n-    public static PGType get(DataType type) {\n-        if (type.id() == ArrayType.ID) {\n-            DataType<?> innerType = ((ArrayType) type).innerType();\n-            if (innerType.id() == ArrayType.ID) {\n-                // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays\n-                // with sub-arrays of different length\n-                // (something like [ [1, 2], [3] ] is not supported)\n+    public static PGType get(DataType<?> type) {\n+        switch (type.id()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1Njc1NQ==", "bodyText": "Good point. Adding a fixup", "url": "https://github.com/crate/crate/pull/9627#discussion_r377056755", "createdAt": "2020-02-10T13:20:00Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -97,31 +102,46 @@\n         return TYPES;\n     }\n \n-    public static DataType fromOID(int oid) {\n+    public static DataType<?> fromOID(int oid) {\n         return PG_TYPES_TO_CRATE_TYPE.get(oid);\n     }\n \n-    public static PGType get(DataType type) {\n-        if (type.id() == ArrayType.ID) {\n-            DataType<?> innerType = ((ArrayType) type).innerType();\n-            if (innerType.id() == ArrayType.ID) {\n-                // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays\n-                // with sub-arrays of different length\n-                // (something like [ [1, 2], [3] ] is not supported)\n+    public static PGType get(DataType<?> type) {\n+        switch (type.id()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNzA4MA=="}, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjQzODQ0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/RowType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0MTo0OVrOFnkorA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzoxNjozNlrOFnlm_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTAyMA==", "bodyText": "should we have some pre condition here to be more safe and get a better exception message if we get out of bound exception.", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039020", "createdAt": "2020-02-10T12:41:49Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NDk3Mw==", "bodyText": "Not sure, I think the out-of-bounds exception that will be raised is fairly fitting.", "url": "https://github.com/crate/crate/pull/9627#discussion_r377054973", "createdAt": "2020-02-10T13:16:36Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTAyMA=="}, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjQ0NDc4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/RowType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0NDowM1rOFnkseA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzoxODo1NVrOFnlrxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTk5Mg==", "bodyText": "not sure, maybe we can first check Row#numColumns of val1 and val2?", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039992", "createdAt": "2020-02-10T12:44:03Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {\n+        return fieldNames.get(position);\n+    }\n+\n+    public List<String> fieldNames() {\n+        return fieldNames;\n+    }\n+\n+    public List<DataType<?>> fieldTypes() {\n+        return fieldTypes;\n+    }\n+\n+    @Override\n+    public Row readValueFrom(StreamInput in) throws IOException {\n+        Object[] values = new Object[fieldTypes.size()];\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            values[i] = fieldTypes.get(i).streamer().readValueFrom(in);\n+        }\n+        return new RowN(values);\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public void writeValueTo(StreamOutput out, Row row) throws IOException {\n+        assert row.numColumns() == fieldTypes.size()\n+            : \"Row that should be streamed must have the same number of columns as the rowType contains fieldTypes\";\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            Streamer streamer = fieldTypes.get(i).streamer();\n+            streamer.writeValueTo(out, row.get(i));\n+        }\n+    }\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TableType;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Streamer<Row> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Row value(Object value) throws IllegalArgumentException, ClassCastException {\n+        return (Row) value;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public int compareValueTo(Row val1, Row val2) {\n+        for (int i = 0; i < fieldTypes.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA1NjE5OQ==", "bodyText": "I added an assertion to make sure they have the same size. I think comparing different rows to each other shouldn't be allowed. (This here is for sorting, and we can't sort different row values).", "url": "https://github.com/crate/crate/pull/9627#discussion_r377056199", "createdAt": "2020-02-10T13:18:55Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {\n+        return fieldNames.get(position);\n+    }\n+\n+    public List<String> fieldNames() {\n+        return fieldNames;\n+    }\n+\n+    public List<DataType<?>> fieldTypes() {\n+        return fieldTypes;\n+    }\n+\n+    @Override\n+    public Row readValueFrom(StreamInput in) throws IOException {\n+        Object[] values = new Object[fieldTypes.size()];\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            values[i] = fieldTypes.get(i).streamer().readValueFrom(in);\n+        }\n+        return new RowN(values);\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public void writeValueTo(StreamOutput out, Row row) throws IOException {\n+        assert row.numColumns() == fieldTypes.size()\n+            : \"Row that should be streamed must have the same number of columns as the rowType contains fieldTypes\";\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            Streamer streamer = fieldTypes.get(i).streamer();\n+            streamer.writeValueTo(out, row.get(i));\n+        }\n+    }\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TableType;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Streamer<Row> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Row value(Object value) throws IllegalArgumentException, ClassCastException {\n+        return (Row) value;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public int compareValueTo(Row val1, Row val2) {\n+        for (int i = 0; i < fieldTypes.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTk5Mg=="}, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjQ0NTcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0NDoyN1rOFnktGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0NDoyN1rOFnktGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0MDE1Mw==", "bodyText": "shall we add regproc to aliases in data-types.rst?", "url": "https://github.com/crate/crate/pull/9627#discussion_r377040153", "createdAt": "2020-02-10T12:44:27Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -314,6 +315,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"int4\", INTEGER),\n         entry(\"int8\", LONG),\n         entry(\"name\", STRING),\n+        entry(\"regproc\", STRING),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1049, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}