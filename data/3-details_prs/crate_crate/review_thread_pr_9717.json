{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjk0MDcy", "number": 9717, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMzoyMFrODlXBvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0Mzo0OFrODlX6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTAxMTgxOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/pgcatalog/PgClassTable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMzoyMFrOFyNSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1Mzo1NFrOFyZK_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDc2NQ==", "bodyText": "Primary keys should actually not have a reltuples value, not relevant for the kafka usecase. Fixing this is a bit of a effort, not sure if it is worth.", "url": "https://github.com/crate/crate/pull/9717#discussion_r388190765", "createdAt": "2020-03-05T10:03:20Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/metadata/pgcatalog/PgClassTable.java", "diffHunk": "@@ -22,107 +22,93 @@\n \n package io.crate.metadata.pgcatalog;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n-import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationInfo;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n+import io.crate.metadata.SystemTable;\n import io.crate.statistics.TableStats;\n-import io.crate.types.ArrayType;\n-import io.crate.types.ObjectType;\n-import org.elasticsearch.cluster.ClusterState;\n \n import java.util.Map;\n \n-import static io.crate.execution.engine.collect.NestableCollectExpression.constant;\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n-import static io.crate.metadata.pgcatalog.OidHash.schemaOid;\n+import static io.crate.metadata.RelationInfo.RelationType.BASE_TABLE;\n+import static io.crate.metadata.RelationInfo.RelationType.VIEW;\n import static io.crate.types.DataTypes.BOOLEAN;\n import static io.crate.types.DataTypes.FLOAT;\n import static io.crate.types.DataTypes.INTEGER;\n import static io.crate.types.DataTypes.SHORT;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n \n-public class PgClassTable extends StaticTableInfo<RelationInfo> {\n+public class PgClassTable {\n \n     public static final RelationName IDENT = new RelationName(PgCatalogSchemaInfo.NAME, \"pg_class\");\n-    private static final String KIND_TABLE = \"r\";\n-    private static final String KIND_VIEW = \"v\";\n-\n+    private static final Map<RelationInfo.RelationType, String> KIND_MAPPING = Map.of(VIEW, \"v\", BASE_TABLE, \"r\");\n     private static final String PERSISTENCE_PERMANENT = \"p\";\n \n-    private final ColumnRegistrar<RelationInfo> columnRegistrar;\n-\n-    Map<ColumnIdent, RowCollectExpressionFactory<RelationInfo>> expressions() {\n-        return columnRegistrar.expressions();\n-    }\n-\n-    private static ColumnRegistrar<RelationInfo> columnRegistrar(TableStats tableStats) {\n-        return new ColumnRegistrar<RelationInfo>(IDENT, RowGranularity.DOC)\n-            .register(\"oid\", INTEGER, () -> forFunction(OidHash::relationOid))\n-            .register(\"relname\", STRING, () -> forFunction(r -> r.ident().name()))\n-            .register(\"relnamespace\", INTEGER,() -> forFunction(r -> schemaOid(r.ident().schema())))\n-            .register(\"reltype\", INTEGER, () -> constant(0))\n-            .register(\"reloftype\", INTEGER, () -> constant(0))\n-            .register(\"relowner\", INTEGER, () -> constant(0))\n-            .register(\"relam\", INTEGER, () -> constant(0))\n-            .register(\"relfilenode\", INTEGER, () -> constant(0))\n-            .register(\"reltablespace\", INTEGER, () -> constant(0))\n-            .register(\"relpages\", INTEGER, () -> constant(0))\n-            .register(\"reltuples\", FLOAT, () -> forFunction(r -> (float) tableStats.numDocs(r.ident())))\n-            .register(\"relallvisible\", INTEGER, () -> constant(0))\n-            .register(\"reltoastrelid\", INTEGER, () -> constant(0))\n-            .register(\"relhasindex\", BOOLEAN, () -> constant(false))\n-            .register(\"relisshared\", BOOLEAN, () -> constant(false))\n-            .register(\"relpersistence\", STRING, () -> constant(PERSISTENCE_PERMANENT))\n-            .register(\"relkind\", STRING, () -> forFunction(r -> r.relationType() == RelationType.VIEW ? KIND_VIEW : KIND_TABLE))\n-            .register(\"relnatts\", SHORT, () -> forFunction(r -> (short) r.columns().size()))\n-            .register(\"relchecks\", SHORT, () -> constant((short) 0))\n-            .register(\"relhasoids\", BOOLEAN, () -> constant(false))\n-            .register(\"relhaspkey\", BOOLEAN, () -> forFunction(r -> r.primaryKey().size() > 0))\n-            .register(\"relhasrules\", BOOLEAN, () -> constant(false))\n-            .register(\"relhastriggers\", BOOLEAN, () -> constant(false))\n-            .register(\"relhassubclass\", BOOLEAN, () -> constant(false))\n-            .register(\"relrowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relforcerowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relispopulated\", BOOLEAN, () -> constant(true))\n-            .register(\"relreplident\", STRING, () -> constant(\"p\"))\n-            .register(\"relispartition\", BOOLEAN, () -> constant(false))\n-            .register(\"relfrozenxid\", INTEGER,() -> constant(0))\n-            .register(\"relminmxid\", INTEGER, () -> constant(0))\n-            .register(\"relacl\", new ArrayType<>(ObjectType.untyped()), () -> constant(null))\n-            .register(\"reloptions\", STRING_ARRAY, () -> constant(null))\n-            .register(\"relpartbound\", ObjectType.untyped(), () -> constant(null));\n+    public static SystemTable<Entry> create(TableStats tableStats) {\n+        return SystemTable.<Entry>builder()\n+            .add(\"oid\", INTEGER, x -> x.oid)\n+            .add(\"relname\", STRING, x -> x.name)\n+            .add(\"relnamespace\", INTEGER, x -> x.schemaOid)\n+            .add(\"reltype\", INTEGER, x -> 0)\n+            .add(\"reloftype\", INTEGER, x -> 0)\n+            .add(\"relowner\", INTEGER, x -> 0)\n+            .add(\"relam\", INTEGER, x -> 0)\n+            .add(\"relfilenode\", INTEGER, x -> 0)\n+            .add(\"reltablespace\", INTEGER, x -> 0)\n+            .add(\"relpages\", INTEGER, x -> 0)\n+            .add(\"reltuples\", FLOAT, x -> (float) tableStats.numDocs(x.ident))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f6008f0fd6351c1bf0ca62718e1467df2b17ffe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjIyMA==", "bodyText": "Could we use  relkind / relationType to avoid the numDocs call then?", "url": "https://github.com/crate/crate/pull/9717#discussion_r388212220", "createdAt": "2020-03-05T10:42:36Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/pgcatalog/PgClassTable.java", "diffHunk": "@@ -22,107 +22,93 @@\n \n package io.crate.metadata.pgcatalog;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n-import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationInfo;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n+import io.crate.metadata.SystemTable;\n import io.crate.statistics.TableStats;\n-import io.crate.types.ArrayType;\n-import io.crate.types.ObjectType;\n-import org.elasticsearch.cluster.ClusterState;\n \n import java.util.Map;\n \n-import static io.crate.execution.engine.collect.NestableCollectExpression.constant;\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n-import static io.crate.metadata.pgcatalog.OidHash.schemaOid;\n+import static io.crate.metadata.RelationInfo.RelationType.BASE_TABLE;\n+import static io.crate.metadata.RelationInfo.RelationType.VIEW;\n import static io.crate.types.DataTypes.BOOLEAN;\n import static io.crate.types.DataTypes.FLOAT;\n import static io.crate.types.DataTypes.INTEGER;\n import static io.crate.types.DataTypes.SHORT;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n \n-public class PgClassTable extends StaticTableInfo<RelationInfo> {\n+public class PgClassTable {\n \n     public static final RelationName IDENT = new RelationName(PgCatalogSchemaInfo.NAME, \"pg_class\");\n-    private static final String KIND_TABLE = \"r\";\n-    private static final String KIND_VIEW = \"v\";\n-\n+    private static final Map<RelationInfo.RelationType, String> KIND_MAPPING = Map.of(VIEW, \"v\", BASE_TABLE, \"r\");\n     private static final String PERSISTENCE_PERMANENT = \"p\";\n \n-    private final ColumnRegistrar<RelationInfo> columnRegistrar;\n-\n-    Map<ColumnIdent, RowCollectExpressionFactory<RelationInfo>> expressions() {\n-        return columnRegistrar.expressions();\n-    }\n-\n-    private static ColumnRegistrar<RelationInfo> columnRegistrar(TableStats tableStats) {\n-        return new ColumnRegistrar<RelationInfo>(IDENT, RowGranularity.DOC)\n-            .register(\"oid\", INTEGER, () -> forFunction(OidHash::relationOid))\n-            .register(\"relname\", STRING, () -> forFunction(r -> r.ident().name()))\n-            .register(\"relnamespace\", INTEGER,() -> forFunction(r -> schemaOid(r.ident().schema())))\n-            .register(\"reltype\", INTEGER, () -> constant(0))\n-            .register(\"reloftype\", INTEGER, () -> constant(0))\n-            .register(\"relowner\", INTEGER, () -> constant(0))\n-            .register(\"relam\", INTEGER, () -> constant(0))\n-            .register(\"relfilenode\", INTEGER, () -> constant(0))\n-            .register(\"reltablespace\", INTEGER, () -> constant(0))\n-            .register(\"relpages\", INTEGER, () -> constant(0))\n-            .register(\"reltuples\", FLOAT, () -> forFunction(r -> (float) tableStats.numDocs(r.ident())))\n-            .register(\"relallvisible\", INTEGER, () -> constant(0))\n-            .register(\"reltoastrelid\", INTEGER, () -> constant(0))\n-            .register(\"relhasindex\", BOOLEAN, () -> constant(false))\n-            .register(\"relisshared\", BOOLEAN, () -> constant(false))\n-            .register(\"relpersistence\", STRING, () -> constant(PERSISTENCE_PERMANENT))\n-            .register(\"relkind\", STRING, () -> forFunction(r -> r.relationType() == RelationType.VIEW ? KIND_VIEW : KIND_TABLE))\n-            .register(\"relnatts\", SHORT, () -> forFunction(r -> (short) r.columns().size()))\n-            .register(\"relchecks\", SHORT, () -> constant((short) 0))\n-            .register(\"relhasoids\", BOOLEAN, () -> constant(false))\n-            .register(\"relhaspkey\", BOOLEAN, () -> forFunction(r -> r.primaryKey().size() > 0))\n-            .register(\"relhasrules\", BOOLEAN, () -> constant(false))\n-            .register(\"relhastriggers\", BOOLEAN, () -> constant(false))\n-            .register(\"relhassubclass\", BOOLEAN, () -> constant(false))\n-            .register(\"relrowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relforcerowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relispopulated\", BOOLEAN, () -> constant(true))\n-            .register(\"relreplident\", STRING, () -> constant(\"p\"))\n-            .register(\"relispartition\", BOOLEAN, () -> constant(false))\n-            .register(\"relfrozenxid\", INTEGER,() -> constant(0))\n-            .register(\"relminmxid\", INTEGER, () -> constant(0))\n-            .register(\"relacl\", new ArrayType<>(ObjectType.untyped()), () -> constant(null))\n-            .register(\"reloptions\", STRING_ARRAY, () -> constant(null))\n-            .register(\"relpartbound\", ObjectType.untyped(), () -> constant(null));\n+    public static SystemTable<Entry> create(TableStats tableStats) {\n+        return SystemTable.<Entry>builder()\n+            .add(\"oid\", INTEGER, x -> x.oid)\n+            .add(\"relname\", STRING, x -> x.name)\n+            .add(\"relnamespace\", INTEGER, x -> x.schemaOid)\n+            .add(\"reltype\", INTEGER, x -> 0)\n+            .add(\"reloftype\", INTEGER, x -> 0)\n+            .add(\"relowner\", INTEGER, x -> 0)\n+            .add(\"relam\", INTEGER, x -> 0)\n+            .add(\"relfilenode\", INTEGER, x -> 0)\n+            .add(\"reltablespace\", INTEGER, x -> 0)\n+            .add(\"relpages\", INTEGER, x -> 0)\n+            .add(\"reltuples\", FLOAT, x -> (float) tableStats.numDocs(x.ident))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDc2NQ=="}, "originalCommit": {"oid": "5f6008f0fd6351c1bf0ca62718e1467df2b17ffe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4NTUzNQ==", "bodyText": "it is addressed now.", "url": "https://github.com/crate/crate/pull/9717#discussion_r388385535", "createdAt": "2020-03-05T15:53:54Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/metadata/pgcatalog/PgClassTable.java", "diffHunk": "@@ -22,107 +22,93 @@\n \n package io.crate.metadata.pgcatalog;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n-import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationInfo;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n+import io.crate.metadata.SystemTable;\n import io.crate.statistics.TableStats;\n-import io.crate.types.ArrayType;\n-import io.crate.types.ObjectType;\n-import org.elasticsearch.cluster.ClusterState;\n \n import java.util.Map;\n \n-import static io.crate.execution.engine.collect.NestableCollectExpression.constant;\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n-import static io.crate.metadata.pgcatalog.OidHash.schemaOid;\n+import static io.crate.metadata.RelationInfo.RelationType.BASE_TABLE;\n+import static io.crate.metadata.RelationInfo.RelationType.VIEW;\n import static io.crate.types.DataTypes.BOOLEAN;\n import static io.crate.types.DataTypes.FLOAT;\n import static io.crate.types.DataTypes.INTEGER;\n import static io.crate.types.DataTypes.SHORT;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n \n-public class PgClassTable extends StaticTableInfo<RelationInfo> {\n+public class PgClassTable {\n \n     public static final RelationName IDENT = new RelationName(PgCatalogSchemaInfo.NAME, \"pg_class\");\n-    private static final String KIND_TABLE = \"r\";\n-    private static final String KIND_VIEW = \"v\";\n-\n+    private static final Map<RelationInfo.RelationType, String> KIND_MAPPING = Map.of(VIEW, \"v\", BASE_TABLE, \"r\");\n     private static final String PERSISTENCE_PERMANENT = \"p\";\n \n-    private final ColumnRegistrar<RelationInfo> columnRegistrar;\n-\n-    Map<ColumnIdent, RowCollectExpressionFactory<RelationInfo>> expressions() {\n-        return columnRegistrar.expressions();\n-    }\n-\n-    private static ColumnRegistrar<RelationInfo> columnRegistrar(TableStats tableStats) {\n-        return new ColumnRegistrar<RelationInfo>(IDENT, RowGranularity.DOC)\n-            .register(\"oid\", INTEGER, () -> forFunction(OidHash::relationOid))\n-            .register(\"relname\", STRING, () -> forFunction(r -> r.ident().name()))\n-            .register(\"relnamespace\", INTEGER,() -> forFunction(r -> schemaOid(r.ident().schema())))\n-            .register(\"reltype\", INTEGER, () -> constant(0))\n-            .register(\"reloftype\", INTEGER, () -> constant(0))\n-            .register(\"relowner\", INTEGER, () -> constant(0))\n-            .register(\"relam\", INTEGER, () -> constant(0))\n-            .register(\"relfilenode\", INTEGER, () -> constant(0))\n-            .register(\"reltablespace\", INTEGER, () -> constant(0))\n-            .register(\"relpages\", INTEGER, () -> constant(0))\n-            .register(\"reltuples\", FLOAT, () -> forFunction(r -> (float) tableStats.numDocs(r.ident())))\n-            .register(\"relallvisible\", INTEGER, () -> constant(0))\n-            .register(\"reltoastrelid\", INTEGER, () -> constant(0))\n-            .register(\"relhasindex\", BOOLEAN, () -> constant(false))\n-            .register(\"relisshared\", BOOLEAN, () -> constant(false))\n-            .register(\"relpersistence\", STRING, () -> constant(PERSISTENCE_PERMANENT))\n-            .register(\"relkind\", STRING, () -> forFunction(r -> r.relationType() == RelationType.VIEW ? KIND_VIEW : KIND_TABLE))\n-            .register(\"relnatts\", SHORT, () -> forFunction(r -> (short) r.columns().size()))\n-            .register(\"relchecks\", SHORT, () -> constant((short) 0))\n-            .register(\"relhasoids\", BOOLEAN, () -> constant(false))\n-            .register(\"relhaspkey\", BOOLEAN, () -> forFunction(r -> r.primaryKey().size() > 0))\n-            .register(\"relhasrules\", BOOLEAN, () -> constant(false))\n-            .register(\"relhastriggers\", BOOLEAN, () -> constant(false))\n-            .register(\"relhassubclass\", BOOLEAN, () -> constant(false))\n-            .register(\"relrowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relforcerowsecurity\", BOOLEAN, () -> constant(false))\n-            .register(\"relispopulated\", BOOLEAN, () -> constant(true))\n-            .register(\"relreplident\", STRING, () -> constant(\"p\"))\n-            .register(\"relispartition\", BOOLEAN, () -> constant(false))\n-            .register(\"relfrozenxid\", INTEGER,() -> constant(0))\n-            .register(\"relminmxid\", INTEGER, () -> constant(0))\n-            .register(\"relacl\", new ArrayType<>(ObjectType.untyped()), () -> constant(null))\n-            .register(\"reloptions\", STRING_ARRAY, () -> constant(null))\n-            .register(\"relpartbound\", ObjectType.untyped(), () -> constant(null));\n+    public static SystemTable<Entry> create(TableStats tableStats) {\n+        return SystemTable.<Entry>builder()\n+            .add(\"oid\", INTEGER, x -> x.oid)\n+            .add(\"relname\", STRING, x -> x.name)\n+            .add(\"relnamespace\", INTEGER, x -> x.schemaOid)\n+            .add(\"reltype\", INTEGER, x -> 0)\n+            .add(\"reloftype\", INTEGER, x -> 0)\n+            .add(\"relowner\", INTEGER, x -> 0)\n+            .add(\"relam\", INTEGER, x -> 0)\n+            .add(\"relfilenode\", INTEGER, x -> 0)\n+            .add(\"reltablespace\", INTEGER, x -> 0)\n+            .add(\"relpages\", INTEGER, x -> 0)\n+            .add(\"reltuples\", FLOAT, x -> (float) tableStats.numDocs(x.ident))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDc2NQ=="}, "originalCommit": {"oid": "5f6008f0fd6351c1bf0ca62718e1467df2b17ffe"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEyNjA5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNTozM1rOFyOWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNTozM1rOFyOWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return relationInfo != null && (relationInfo.primaryKey().size() > 1 ||\n          \n          \n            \n                                                    (relationInfo.primaryKey().size() == 1 &&\n          \n          \n            \n                                                     !relationInfo.primaryKey().get(0).name().equals(\"_id\")));\n          \n          \n            \n                    return relationInfo.primaryKey().size() > 1 ||\n          \n          \n            \n                        (relationInfo.primaryKey().size() == 1 &&\n          \n          \n            \n                         !relationInfo.primaryKey().get(0).name().equals(\"_id\"));\n          \n      \n    \n    \n  \n\nI think we don't have null RelationInfo entries.", "url": "https://github.com/crate/crate/pull/9717#discussion_r388208269", "createdAt": "2020-03-05T10:35:33Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -125,6 +130,50 @@ public InformationSchemaIterables(final Schemas schemas,\n         // these are initialized on a clusterState change\n         routines = emptyList();\n         clusterService.addListener(this);\n+\n+        pgIndices = () -> tablesStream(schemas).filter(this::isPrimaryKey).map(this::pgIndex).iterator();\n+\n+        pgClasses = () -> concat(sequentialStream(relations).map(this::relationToPgClassEntry),\n+                                 sequentialStream(primaryKeys).map(this::primaryKeyToPgClassEntry)).iterator();\n+\n+    }\n+\n+    private boolean isPrimaryKey(RelationInfo relationInfo) {\n+        return relationInfo != null && (relationInfo.primaryKey().size() > 1 ||\n+                                        (relationInfo.primaryKey().size() == 1 &&\n+                                         !relationInfo.primaryKey().get(0).name().equals(\"_id\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEzMDQwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNjozOFrOFyOZFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNjozOFrOFyOZFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new PgClassTable.Entry(OidHash.relationOid(info),\n          \n          \n            \n                                                  OidHash.schemaOid(info.ident().schema()),\n          \n          \n            \n                                                  info.ident(),\n          \n          \n            \n                                                  info.ident().name(),\n          \n          \n            \n                                                  info.relationType(),\n          \n          \n            \n                                                  info.columns().size(),\n          \n          \n            \n                                                  info.primaryKey().size() > 0);\n          \n          \n            \n                    return new PgClassTable.Entry(\n          \n          \n            \n                        OidHash.relationOid(info),\n          \n          \n            \n                        OidHash.schemaOid(info.ident().schema()),\n          \n          \n            \n                        info.ident(),\n          \n          \n            \n                        info.ident().name(),\n          \n          \n            \n                        info.relationType(),\n          \n          \n            \n                        info.columns().size(),\n          \n          \n            \n                        info.primaryKey().size() > 0);", "url": "https://github.com/crate/crate/pull/9717#discussion_r388208917", "createdAt": "2020-03-05T10:36:38Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -125,6 +130,50 @@ public InformationSchemaIterables(final Schemas schemas,\n         // these are initialized on a clusterState change\n         routines = emptyList();\n         clusterService.addListener(this);\n+\n+        pgIndices = () -> tablesStream(schemas).filter(this::isPrimaryKey).map(this::pgIndex).iterator();\n+\n+        pgClasses = () -> concat(sequentialStream(relations).map(this::relationToPgClassEntry),\n+                                 sequentialStream(primaryKeys).map(this::primaryKeyToPgClassEntry)).iterator();\n+\n+    }\n+\n+    private boolean isPrimaryKey(RelationInfo relationInfo) {\n+        return relationInfo != null && (relationInfo.primaryKey().size() > 1 ||\n+                                        (relationInfo.primaryKey().size() == 1 &&\n+                                         !relationInfo.primaryKey().get(0).name().equals(\"_id\")));\n+    }\n+\n+    private PgClassTable.Entry relationToPgClassEntry(RelationInfo info) {\n+        return new PgClassTable.Entry(OidHash.relationOid(info),\n+                                      OidHash.schemaOid(info.ident().schema()),\n+                                      info.ident(),\n+                                      info.ident().name(),\n+                                      info.relationType(),\n+                                      info.columns().size(),\n+                                      info.primaryKey().size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEzMjY3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNzowOVrOFyOaWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNzowOVrOFyOaWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwOTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new PgClassTable.Entry(OidHash.primaryKeyOid(info),\n          \n          \n            \n                                                  OidHash.schemaOid(info.ident().schema()),\n          \n          \n            \n                                                  info.ident(),\n          \n          \n            \n                                                  info.ident().name() + \"_pkey\",\n          \n          \n            \n                                                  info.relationType(),\n          \n          \n            \n                                                  info.columns().size(),\n          \n          \n            \n                                                  info.primaryKey().size() > 0);\n          \n          \n            \n                    return new PgClassTable.Entry(\n          \n          \n            \n                        OidHash.primaryKeyOid(info),\n          \n          \n            \n                        OidHash.schemaOid(info.ident().schema()),\n          \n          \n            \n                        info.ident(),\n          \n          \n            \n                        info.ident().name() + \"_pkey\",\n          \n          \n            \n                        info.relationType(),\n          \n          \n            \n                        info.columns().size(),\n          \n          \n            \n                        info.primaryKey().size() > 0);", "url": "https://github.com/crate/crate/pull/9717#discussion_r388209241", "createdAt": "2020-03-05T10:37:09Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -125,6 +130,50 @@ public InformationSchemaIterables(final Schemas schemas,\n         // these are initialized on a clusterState change\n         routines = emptyList();\n         clusterService.addListener(this);\n+\n+        pgIndices = () -> tablesStream(schemas).filter(this::isPrimaryKey).map(this::pgIndex).iterator();\n+\n+        pgClasses = () -> concat(sequentialStream(relations).map(this::relationToPgClassEntry),\n+                                 sequentialStream(primaryKeys).map(this::primaryKeyToPgClassEntry)).iterator();\n+\n+    }\n+\n+    private boolean isPrimaryKey(RelationInfo relationInfo) {\n+        return relationInfo != null && (relationInfo.primaryKey().size() > 1 ||\n+                                        (relationInfo.primaryKey().size() == 1 &&\n+                                         !relationInfo.primaryKey().get(0).name().equals(\"_id\")));\n+    }\n+\n+    private PgClassTable.Entry relationToPgClassEntry(RelationInfo info) {\n+        return new PgClassTable.Entry(OidHash.relationOid(info),\n+                                      OidHash.schemaOid(info.ident().schema()),\n+                                      info.ident(),\n+                                      info.ident().name(),\n+                                      info.relationType(),\n+                                      info.columns().size(),\n+                                      info.primaryKey().size() > 0);\n+    }\n+\n+    private PgClassTable.Entry primaryKeyToPgClassEntry(RelationInfo info) {\n+        return new PgClassTable.Entry(OidHash.primaryKeyOid(info),\n+                                      OidHash.schemaOid(info.ident().schema()),\n+                                      info.ident(),\n+                                      info.ident().name() + \"_pkey\",\n+                                      info.relationType(),\n+                                      info.columns().size(),\n+                                      info.primaryKey().size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE0MTU3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozOTo0MlrOFyOf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozOTo0MlrOFyOf3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMDY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        var position = tableInfo.getReference(columnIdent).position();\n          \n          \n            \n                        var pkRef = tableInfo.getReference(columnIdent);\n          \n          \n            \n                        assert pkRef != null : \"`getReference(..)` must not return null for columns retrieved from `primaryKey()`\";\n          \n          \n            \n                        var position = pkRef.position();", "url": "https://github.com/crate/crate/pull/9717#discussion_r388210655", "createdAt": "2020-03-05T10:39:42Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -125,6 +130,50 @@ public InformationSchemaIterables(final Schemas schemas,\n         // these are initialized on a clusterState change\n         routines = emptyList();\n         clusterService.addListener(this);\n+\n+        pgIndices = () -> tablesStream(schemas).filter(this::isPrimaryKey).map(this::pgIndex).iterator();\n+\n+        pgClasses = () -> concat(sequentialStream(relations).map(this::relationToPgClassEntry),\n+                                 sequentialStream(primaryKeys).map(this::primaryKeyToPgClassEntry)).iterator();\n+\n+    }\n+\n+    private boolean isPrimaryKey(RelationInfo relationInfo) {\n+        return relationInfo != null && (relationInfo.primaryKey().size() > 1 ||\n+                                        (relationInfo.primaryKey().size() == 1 &&\n+                                         !relationInfo.primaryKey().get(0).name().equals(\"_id\")));\n+    }\n+\n+    private PgClassTable.Entry relationToPgClassEntry(RelationInfo info) {\n+        return new PgClassTable.Entry(OidHash.relationOid(info),\n+                                      OidHash.schemaOid(info.ident().schema()),\n+                                      info.ident(),\n+                                      info.ident().name(),\n+                                      info.relationType(),\n+                                      info.columns().size(),\n+                                      info.primaryKey().size() > 0);\n+    }\n+\n+    private PgClassTable.Entry primaryKeyToPgClassEntry(RelationInfo info) {\n+        return new PgClassTable.Entry(OidHash.primaryKeyOid(info),\n+                                      OidHash.schemaOid(info.ident().schema()),\n+                                      info.ident(),\n+                                      info.ident().name() + \"_pkey\",\n+                                      info.relationType(),\n+                                      info.columns().size(),\n+                                      info.primaryKey().size() > 0);\n+    }\n+\n+    private PgIndexTable.Entry pgIndex(TableInfo tableInfo) {\n+        var primaryKey = tableInfo.primaryKey();\n+        var positions = new ArrayList<Integer>();\n+        for (var columnIdent : primaryKey) {\n+            var position = tableInfo.getReference(columnIdent).position();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE0NTU4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MDo0OVrOFyOiMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MDo0OVrOFyOiMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMTI0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var primaryKey = relationInfo.primaryKey().stream().map(ColumnIdent::name).collect(Collectors.joining());\n          \n          \n            \n                    var primaryKey = Lists2.joinOn(\" \", relationInfo.primaryKey(), ColumnIdent::name);", "url": "https://github.com/crate/crate/pull/9717#discussion_r388211249", "createdAt": "2020-03-05T10:40:49Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -22,31 +22,41 @@\n \n package io.crate.metadata.pgcatalog;\n \n+import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationInfo;\n import org.apache.lucene.util.BytesRef;\n \n+import java.util.stream.Collectors;\n+\n import static org.apache.lucene.util.StringHelper.murmurhash3_x86_32;\n \n-final class OidHash {\n+public final class OidHash {\n \n     enum Type {\n         SCHEMA,\n         TABLE,\n         VIEW,\n-        CONSTRAINT\n+        CONSTRAINT,\n+        PRIMARY_KEY\n     }\n \n-    static int relationOid(RelationInfo relationInfo) {\n+    public static int relationOid(RelationInfo relationInfo) {\n         Type t = relationInfo.relationType() == RelationInfo.RelationType.VIEW ? Type.VIEW : Type.TABLE;\n         BytesRef b = new BytesRef(t.toString() + relationInfo.ident().fqn());\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    static int schemaOid(String name) {\n+    public static int schemaOid(String name) {\n         BytesRef b = new BytesRef(Type.SCHEMA.toString() + name);\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n+    public static int primaryKeyOid(RelationInfo relationInfo) {\n+        var primaryKey = relationInfo.primaryKey().stream().map(ColumnIdent::name).collect(Collectors.joining());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE1NTAwOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MzoyM1rOFyOn3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MzoyM1rOFyOn3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjcwMg==", "bodyText": "Would it make sense to reduce this to the columns that are relevant?", "url": "https://github.com/crate/crate/pull/9717#discussion_r388212702", "createdAt": "2020-03-05T10:43:23Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "diffHunk": "@@ -105,4 +111,25 @@ public void testPgSettingsTable() {\n             \"max_index_keys| 32| Shows the maximum number of index keys.| NULL| NULL\\n\"\n         ));\n     }\n+\n+    @Test\n+    public void test_primary_key_in_pg_index() {\n+        execute(\" select i.* from pg_index i, pg_class c where c.relname = 't1' and c.oid = i.indrelid;\");\n+\n+        assertThat(printedTable(response.rows()), is(\n+            \"false| NULL| NULL| NULL| -649073482| true| false| false| true| true| true| false| false| true| [1]| 0| NULL| NULL| 728874843\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE1NTUzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MzozMVrOFyOoNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MzozMVrOFyOoNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjc4OQ==", "bodyText": "Same here.", "url": "https://github.com/crate/crate/pull/9717#discussion_r388212789", "createdAt": "2020-03-05T10:43:31Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "diffHunk": "@@ -105,4 +111,25 @@ public void testPgSettingsTable() {\n             \"max_index_keys| 32| Shows the maximum number of index keys.| NULL| NULL\\n\"\n         ));\n     }\n+\n+    @Test\n+    public void test_primary_key_in_pg_index() {\n+        execute(\" select i.* from pg_index i, pg_class c where c.relname = 't1' and c.oid = i.indrelid;\");\n+\n+        assertThat(printedTable(response.rows()), is(\n+            \"false| NULL| NULL| NULL| -649073482| true| false| false| true| true| true| false| false| true| [1]| 0| NULL| NULL| 728874843\\n\"\n+        ));\n+    }\n+\n+    @Test\n+    public void test_primary_key_in_pg_class() {\n+\n+        execute(\"select ct.* from pg_class ct, (select * from pg_index i, pg_class c where c.relname = 't1' and c.oid = i.indrelid) i\" +\n+                \" where ct.oid = i.indexrelid;\");\n+\n+        assertThat(printedTable(response.rows()), is(\n+            \"-649073482| NULL| 0| 0| 0| 0| false| 0| false| false| true| false| false| false| false| true| false| r| 0| t1_pkey| -2048275947| 2| 0| NULL| 0| 0| NULL| p| p| false| 0| 0| -1.0| 0\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE1Njc5OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0Mzo0OFrOFyOo5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0Mzo0OFrOFyOo5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjk2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.carrotsearch.randomizedtesting.annotations.Repeat;", "url": "https://github.com/crate/crate/pull/9717#discussion_r388212965", "createdAt": "2020-03-05T10:43:48Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/PgCatalogITest.java", "diffHunk": "@@ -22,13 +22,19 @@\n \n package io.crate.integrationtests;\n \n+import com.carrotsearch.randomizedtesting.annotations.Repeat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601017b1c0a6900daaed79f060def0125dcb2529"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1620, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}