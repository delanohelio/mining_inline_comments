{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODU5Mjcz", "number": 10011, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MjoyMVrOEAGpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowNTowN1rOEAjRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTQ0MzAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MjoyMVrOGbLNQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MzozMFrOGbLQzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODM1Mw==", "bodyText": "probably cast(Object value, boolean explicitCast) should be ok?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431148353", "createdAt": "2020-05-27T13:52:21Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -82,6 +83,17 @@\n \n     public abstract Streamer<T> streamer();\n \n+    /**\n+     * Must be used only in the cast functions.\n+     *\n+     * @param value The value to cast to the target {@link DataType}.\n+     * @param mode  The {@link CastMode} mode.\n+     * @return The value of the target {@link DataType}.\n+     */\n+    public T cast(Object value, CastMode mode) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3394af88ce64c0024505b0e2b5f9d9af9cac31ca"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0OTI2Mw==", "bodyText": "Would also be okay. Or a new method? explicitCast and implicitCast ? explicitCast could default to implicitCast if there is no additional logic. Would at least help with readability on the call-sites (no guessing what false or true is referring to - without having a IDE that provides a hint what the parameter is called)", "url": "https://github.com/crate/crate/pull/10011#discussion_r431149263", "createdAt": "2020-05-27T13:53:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -82,6 +83,17 @@\n \n     public abstract Streamer<T> streamer();\n \n+    /**\n+     * Must be used only in the cast functions.\n+     *\n+     * @param value The value to cast to the target {@link DataType}.\n+     * @param mode  The {@link CastMode} mode.\n+     * @return The value of the target {@link DataType}.\n+     */\n+    public T cast(Object value, CastMode mode) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODM1Mw=="}, "originalCommit": {"oid": "3394af88ce64c0024505b0e2b5f9d9af9cac31ca"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODc3MTMzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/IpType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1OToxOVrOGbsCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyNzoyM1rOGbtBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4NjI1Nw==", "bodyText": "looks like the default impl so it could be removed.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431686257", "createdAt": "2020-05-28T08:59:19Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        return value(value);\n+    }\n+\n+    @Override\n+    public String explicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5ODI5Mg==", "bodyText": "thought so, but IpType extends the StringType so the String#explicitCast method will be invoked :/\nI'll split these types later.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431698292", "createdAt": "2020-05-28T09:20:18Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        return value(value);\n+    }\n+\n+    @Override\n+    public String explicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4NjI1Nw=="}, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMDU5Nw==", "bodyText": "Ah right. +1 to separate them completely.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431700597", "createdAt": "2020-05-28T09:24:19Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        return value(value);\n+    }\n+\n+    @Override\n+    public String explicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4NjI1Nw=="}, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMjM3Nw==", "bodyText": "\ud83d\udc4d I'll follow up on it in a separate PR.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431702377", "createdAt": "2020-05-28T09:27:23Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        return value(value);\n+    }\n+\n+    @Override\n+    public String explicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4NjI1Nw=="}, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODg2Mjc1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/Function.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyNjoyNVrOGbs_JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTo0MjoyM1rOGbtjMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMTc5Ng==", "bodyText": "I am not sure about this point, both implicit and explicit cast functions are printed under the same name cast now. I think it would be better to print implicit cast function under its own name _cast and adjust tests. wdyt?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431701796", "createdAt": "2020-05-28T09:26:25Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -364,7 +367,12 @@ private void printCastFunction(StringBuilder builder, Style style) {\n         } else {\n             asTypeName = \" AS \" + dataType.getName();\n         }\n-        builder.append(info.ident().name())\n+        var name = info.ident().name();\n+        // print cast implicit function under 'cast' name.\n+        if (name.equalsIgnoreCase(IMPLICIT_CAST_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzQyOQ==", "bodyText": "We could also consider to omit implicit casts when printing an expression, so that the printed expression is closer to the original input.\nMight make testing for casts a bit more troublesome, but we can use the isFunction matcher if we want to ensure that a certain cast happens", "url": "https://github.com/crate/crate/pull/10011#discussion_r431707429", "createdAt": "2020-05-28T09:36:01Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -364,7 +367,12 @@ private void printCastFunction(StringBuilder builder, Style style) {\n         } else {\n             asTypeName = \" AS \" + dataType.getName();\n         }\n-        builder.append(info.ident().name())\n+        var name = info.ident().name();\n+        // print cast implicit function under 'cast' name.\n+        if (name.equalsIgnoreCase(IMPLICIT_CAST_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMTc5Ng=="}, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcxMTAyNA==", "bodyText": "Some planner tests would still have to be adjusted to the generic way of printing the implicit cast function. Would it be ok? In most of the rest tests, we can go with isFunction.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431711024", "createdAt": "2020-05-28T09:42:23Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -364,7 +367,12 @@ private void printCastFunction(StringBuilder builder, Style style) {\n         } else {\n             asTypeName = \" AS \" + dataType.getName();\n         }\n-        builder.append(info.ident().name())\n+        var name = info.ident().name();\n+        // print cast implicit function under 'cast' name.\n+        if (name.equalsIgnoreCase(IMPLICIT_CAST_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMTc5Ng=="}, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDEyNTA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowMzowMFrOGb5jrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMTozOFrOGb6YVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzc1OQ==", "bodyText": "I wonder if we should make 3 concrete implementations instead.  At this point pretty much everything this function does is abstracted away.  WDYT?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431907759", "createdAt": "2020-05-28T15:03:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -55,45 +56,80 @@ public static void register(ScalarFunctionModule module) {\n                     parseTypeSignature(\"V\"),\n                     parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                },\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                }\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n         module.register(\n             Signature\n-                .scalar(TRY_CAST_NAME,\n-                        parseTypeSignature(\"E\"),\n-                        parseTypeSignature(\"V\"),\n-                        parseTypeSignature(\"V\"))\n+                .scalar(\n+                    TRY_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> Literal.NULL,\n-                (argument, returnType) -> null\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> Literal.NULL,\n+                    (argument, returnType) -> null\n+                );\n+            }\n+        );\n+        module.register(\n+            Signature\n+                .scalar(\n+                    IMPLICIT_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n+                .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(IMPLICIT_CAST_NAME, args), targetType),\n+                    targetType::implicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n     }\n \n \n     private final DataType<?> returnType;\n+    private final Function<Object, Object> cast;\n     private final FunctionInfo info;\n     private final Signature signature;\n     private final BiFunction<Symbol, DataType<?>, Symbol> onNormalizeException;\n     private final BiFunction<Object, DataType<?>, Object> onEvaluateException;\n \n     private CastFunction(FunctionInfo info,\n+                         Function<Object, Object> cast,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMTIzNg==", "bodyText": "yes, I thought of splitting it, but was dragged away by cast function printing stuff.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431921236", "createdAt": "2020-05-28T15:21:38Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -55,45 +56,80 @@ public static void register(ScalarFunctionModule module) {\n                     parseTypeSignature(\"V\"),\n                     parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                },\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                }\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n         module.register(\n             Signature\n-                .scalar(TRY_CAST_NAME,\n-                        parseTypeSignature(\"E\"),\n-                        parseTypeSignature(\"V\"),\n-                        parseTypeSignature(\"V\"))\n+                .scalar(\n+                    TRY_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> Literal.NULL,\n-                (argument, returnType) -> null\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> Literal.NULL,\n+                    (argument, returnType) -> null\n+                );\n+            }\n+        );\n+        module.register(\n+            Signature\n+                .scalar(\n+                    IMPLICIT_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n+                .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(IMPLICIT_CAST_NAME, args), targetType),\n+                    targetType::implicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n     }\n \n \n     private final DataType<?> returnType;\n+    private final Function<Object, Object> cast;\n     private final FunctionInfo info;\n     private final Signature signature;\n     private final BiFunction<Symbol, DataType<?>, Symbol> onNormalizeException;\n     private final BiFunction<Object, DataType<?>, Object> onEvaluateException;\n \n     private CastFunction(FunctionInfo info,\n+                         Function<Object, Object> cast,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzc1OQ=="}, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDEzMzgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/IpType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowNTowN1rOGb5ppg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNzo1MVrOGb6p5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTI4Ng==", "bodyText": "could this replace value already,  or should we look later into stripping down value?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431909286", "createdAt": "2020-05-28T15:05:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMjQ3OA==", "bodyText": "I'd prefer to follow up on it right after the varchar(length) implementation. Would it be ok?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431922478", "createdAt": "2020-05-28T15:23:26Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTI4Ng=="}, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNTczMg==", "bodyText": "Sure \ud83d\udc4d", "url": "https://github.com/crate/crate/pull/10011#discussion_r431925732", "createdAt": "2020-05-28T15:27:51Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTI4Ng=="}, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1358, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}