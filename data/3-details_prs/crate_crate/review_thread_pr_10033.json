{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjE4NzEw", "number": 10033, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MjoxN1rOECKcCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo1MzowOFrOECckqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzAzNjI1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MjoxN1rOGec3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MjoxN1rOGec3IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4MzMyOA==", "bodyText": "I think the default implementation should return the value as-is unchanged. Has a lower overhead and is closer to the prior behavior before the introduction of the method.\nWill also be easier to reason about what is happening.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434583328", "createdAt": "2020-06-03T13:52:17Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -105,6 +105,18 @@ public T explicitCast(Object value) throws IllegalArgumentException, ClassCastEx\n         return implicitCast(value);\n     }\n \n+    /**\n+     * To prepare a value of the same {@link DataType<T>} for insertion.\n+     * The method fall backs to the implicit cast if it is overwritten\n+     * by a data type subclass.\n+     *\n+     * @param value The value of the {@link DataType<T>}.\n+     * @return The prepared for insertion value of the {@link DataType<T>}.\n+     */\n+    public T valueForInsert(Object value) {\n+        return implicitCast(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA0MTg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MzoyN1rOGec60Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1MzoyN1rOGec60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NDI3Mw==", "bodyText": "Would it make sense to add a String.class entry to POJO_TYPE_MAPPING instead?", "url": "https://github.com/crate/crate/pull/10033#discussion_r434584273", "createdAt": "2020-06-03T13:53:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -253,6 +253,8 @@ public static void toStream(DataType type, StreamOutput out) throws IOException\n             return valueFromList((List) value);\n         } else if (value.getClass().isArray()) {\n             return valueFromList(Arrays.asList((Object[]) value));\n+        } else if (value instanceof StringType) {\n+            return STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA0NzEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/StringType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1NDozNVrOGec-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1NDozNVrOGec-Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NTA5NQ==", "bodyText": "Given that we already use readInt /writeInt instead of the vInt variants, couldn't we just write the MAX_VALUE directly and avoid the boolean?", "url": "https://github.com/crate/crate/pull/10033#discussion_r434585095", "createdAt": "2020-06-03T13:54:35Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -69,6 +70,18 @@ private StringType(int lengthLimit) {\n         this.lengthLimit = lengthLimit;\n     }\n \n+    public StringType(StreamInput in) throws IOException {\n+        if (in.getVersion().onOrAfter(Version.V_4_2_0)) {\n+            if (in.readBoolean()) { // see writeTo\n+                lengthLimit = Integer.MAX_VALUE;\n+            } else {\n+                lengthLimit = in.readInt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA1NTgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/StringType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1NjoyMlrOGedDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo1OTozMVrOGe6N9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA==", "bodyText": "I think we should be able to assert that the value is a String. Or even change the signature (valueForInsert(T value)) and not run the implicit cast logic.\nIf the value didn't match the target type, we would already have added an implicit cast, so the value at this point must already match the type.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434586478", "createdAt": "2020-06-03T13:56:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODI1Ng==", "bodyText": "I've added the assertion. Regarding the valueForInsert(T), I am not sure how to do that, it won't be probably possible to resolve the generic type, e.g. see https://github.com/crate/crate/pull/10033/files#diff-3bb55e4656a2a8f9d19f282021eff5f6R106 here the input argument has Object type.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434838256", "createdAt": "2020-06-03T20:36:18Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NDMxMQ==", "bodyText": "I am not sure how to do that, it won't be probably possible to resolve the generic type\n\nAh right, let's leave it as it is now then", "url": "https://github.com/crate/crate/pull/10033#discussion_r435064311", "createdAt": "2020-06-04T07:59:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NjQ3OA=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzA2MjIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/StringType.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzo1Nzo0M1rOGedHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyNTo1MlrOGeeaqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg==", "bodyText": "This may be fairly expensive for it does (copies the string) - to check if a region is blank.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434587506", "createdAt": "2020-06-03T13:57:43Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MDM3Mw==", "bodyText": "substring does not copy the string, it is just a view of the underlying char array, therefore, it is constant time complexity.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434590373", "createdAt": "2020-06-03T14:01:34Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MjkyOQ==", "bodyText": "Unfortunately not:\n    public String substring(int beginIndex) {\n        return substring(beginIndex, length());\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * </pre></blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @throws     IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length = length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen = endIndex - beginIndex;\n        if (beginIndex == 0 && endIndex == length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n\n    public static String newString(byte[] val, int index, int len) {\n        return new String(Arrays.copyOfRange(val, index, index + len),\n                          LATIN1);\n    }\n\n    public static String newString(byte[] val, int index, int len) {\n        if (String.COMPACT_STRINGS) {\n            byte[] buf = compress(val, index, len);\n            if (buf != null) {\n                return new String(buf, LATIN1);\n            }\n        }\n        int last = index + len;\n        return new String(Arrays.copyOfRange(val, index << 1, last << 1), UTF16);\n    }", "url": "https://github.com/crate/crate/pull/10033#discussion_r434592929", "createdAt": "2020-06-03T14:05:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5ODIyNg==", "bodyText": "indeed.. sorry, was super confident that it is not the case :/ it seems to be different in quite old java versions.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434598226", "createdAt": "2020-06-03T14:11:58Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMTczMg==", "bodyText": "Or maybe confused it with List#subList ? I think that is just a view.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434601732", "createdAt": "2020-06-03T14:16:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwODgwOA==", "bodyText": "anyways, it will be more efficient just to go through chars in the range of our interest.", "url": "https://github.com/crate/crate/pull/10033#discussion_r434608808", "createdAt": "2020-06-03T14:25:52Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +155,24 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        var string = convert(value);\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (string.substring(lengthLimit).isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU4NzUwNg=="}, "originalCommit": {"oid": "57fdeab1c6b095e2915122b6d80676d3701d4785"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDAwNzQ0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/StringType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzo1MzowOFrOGe6ADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyODowM1rOGe7Pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ==", "bodyText": "Maybe we could even include the value in the error message", "url": "https://github.com/crate/crate/pull/10033#discussion_r435060751", "createdAt": "2020-06-04T07:53:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MjUyOQ==", "bodyText": "The whole value or maybe trim it after few characters, e.g. fasfdsf... is to long for ...", "url": "https://github.com/crate/crate/pull/10033#discussion_r435062529", "createdAt": "2020-06-04T07:56:27Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}, "originalCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2NDkzMQ==", "bodyText": "Yes, trimming after a certain length may make sense. After 20 chars or so?", "url": "https://github.com/crate/crate/pull/10033#discussion_r435064931", "createdAt": "2020-06-04T08:00:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}, "originalCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTExNQ==", "bodyText": "20 sounds good \ud83d\udc4d", "url": "https://github.com/crate/crate/pull/10033#discussion_r435081115", "createdAt": "2020-06-04T08:28:03Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -142,6 +153,26 @@ public String explicitCast(Object value) throws IllegalArgumentException, ClassC\n         }\n     }\n \n+    @Override\n+    public String valueForInsert(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        assert value instanceof String\n+            : \"valueForInsert must be called only on objects of String type\";\n+        var string = (String) value;\n+        if (unbound() || string.length() <= lengthLimit) {\n+            return string;\n+        } else {\n+            if (isBlank(string, lengthLimit, string.length())) {\n+                return string.substring(0, lengthLimit);\n+            } else {\n+                throw new IllegalArgumentException(\n+                    \"The value is too long for text type of the length: \" + lengthLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2MDc1MQ=="}, "originalCommit": {"oid": "381a913da58eafe4cd8ef3f250ba0673b5f95aea"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1364, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}