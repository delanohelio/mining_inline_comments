{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDExNDMz", "number": 9887, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozMDoxMVrOD1zZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozMDoxMVrOD1zZzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzQzMzA5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozMDoxMlrOGLac2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozNDowN1rOGLaoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyMDg5MQ==", "bodyText": "Is there a way to avoid to catch a NullPointerException ?", "url": "https://github.com/crate/crate/pull/9887#discussion_r414620891", "createdAt": "2020-04-24T14:30:12Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "diffHunk": "@@ -295,139 +295,141 @@ public void addExpression(HashMap<ColumnIdent, RowCollectExpressionFactory<T>> e\n             return this;\n         }\n \n-        public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            private final P parent;\n-            private final ColumnIdent baseColumn;\n-            private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n+    }\n \n-            public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-            }\n+    public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n-                return add(new Column<>(baseColumn.append(column), type, getProperty));\n-            }\n+        private final P parent;\n+        private final ColumnIdent baseColumn;\n+        private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n \n-            @Override\n-            protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n-                columns.add(column);\n-                return this;\n-            }\n+        public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+        }\n \n-            public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n-                return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n-            }\n+        public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n+            return add(new Column<>(baseColumn.append(column), type, getProperty));\n+        }\n \n-            public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n-                return new ObjectBuilder<>(this, baseColumn.append(column));\n-            }\n+        @Override\n+        protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n+            columns.add(column);\n+            return this;\n+        }\n \n-            public P endObject() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n-                    }\n-                }\n-                for (var column : directChildren) {\n-                    typeBuilder.setInnerType(column.column.leafName(), column.type);\n-                }\n-                ObjectType objectType = typeBuilder.build();\n-                parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n-                for (Column<T, ?> column : columns) {\n-                    addColumnToParent(column);\n+        public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n+            return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n+        }\n+\n+        public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n+            return new ObjectBuilder<>(this, baseColumn.append(column));\n+        }\n+\n+        public P endObject() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n                 }\n-                return parent;\n             }\n-\n-            public <U> void addColumnToParent(Column<T, U> column) {\n-                parent.add(new Column<>(column.column, column.type, column.getProperty));\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n+            for (Column<T, ?> column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n+\n+        private <U> void addColumnToParent(Column<T, U> column) {\n+            parent.add(new Column<>(column.column, column.type, column.getProperty));\n         }\n+    }\n+\n+    public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n \n-        public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n+        private final P parent;\n+        private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n+        private final ColumnIdent baseColumn;\n+        private final Function<ParentItemType, List<ItemType>> getItems;\n \n-            private final P parent;\n-            private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n-            private final ColumnIdent baseColumn;\n-            private final Function<ParentItemType, List<ItemType>> getItems;\n+        public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+            this.getItems = getItems;\n+        }\n \n-            public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-                this.getItems = getItems;\n+        public P endObjectArray() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n+                }\n+            }\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, new ArrayType<>(objectType), getLeafColumnValues(directChildren)));\n+            for (var column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n \n-            public P endObjectArray() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n+        public Function<ParentItemType, List<Map<String, Object>>> getLeafColumnValues(ArrayList<Column<ItemType, ?>> directChildren) {\n+            return xs -> {\n+                var items = getItems.apply(xs);\n+                ArrayList<Map<String, Object>> result = new ArrayList<>(items.size());\n+                for (ItemType item : items) {\n+                    HashMap<String, Object> map = new HashMap<>(directChildren.size());\n+                    for (int i = 0; i < directChildren.size(); i++) {\n+                        Column<ItemType, ?> column = directChildren.get(i);\n+                        try {\n+                            Object value = column.getProperty.apply(item);\n+                            map.put(column.column.leafName(), value);\n+                        } catch (NullPointerException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyMzgxNg==", "bodyText": "Yes, by making sure that all the expressions we use to retrieve the properties handle null cases correctly.  Not sure if that's worth it. We could follow up on it but I'd keep it for now.", "url": "https://github.com/crate/crate/pull/9887#discussion_r414623816", "createdAt": "2020-04-24T14:34:07Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "diffHunk": "@@ -295,139 +295,141 @@ public void addExpression(HashMap<ColumnIdent, RowCollectExpressionFactory<T>> e\n             return this;\n         }\n \n-        public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            private final P parent;\n-            private final ColumnIdent baseColumn;\n-            private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n+    }\n \n-            public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-            }\n+    public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n-                return add(new Column<>(baseColumn.append(column), type, getProperty));\n-            }\n+        private final P parent;\n+        private final ColumnIdent baseColumn;\n+        private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n \n-            @Override\n-            protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n-                columns.add(column);\n-                return this;\n-            }\n+        public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+        }\n \n-            public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n-                return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n-            }\n+        public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n+            return add(new Column<>(baseColumn.append(column), type, getProperty));\n+        }\n \n-            public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n-                return new ObjectBuilder<>(this, baseColumn.append(column));\n-            }\n+        @Override\n+        protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n+            columns.add(column);\n+            return this;\n+        }\n \n-            public P endObject() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n-                    }\n-                }\n-                for (var column : directChildren) {\n-                    typeBuilder.setInnerType(column.column.leafName(), column.type);\n-                }\n-                ObjectType objectType = typeBuilder.build();\n-                parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n-                for (Column<T, ?> column : columns) {\n-                    addColumnToParent(column);\n+        public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n+            return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n+        }\n+\n+        public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n+            return new ObjectBuilder<>(this, baseColumn.append(column));\n+        }\n+\n+        public P endObject() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n                 }\n-                return parent;\n             }\n-\n-            public <U> void addColumnToParent(Column<T, U> column) {\n-                parent.add(new Column<>(column.column, column.type, column.getProperty));\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n+            for (Column<T, ?> column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n+\n+        private <U> void addColumnToParent(Column<T, U> column) {\n+            parent.add(new Column<>(column.column, column.type, column.getProperty));\n         }\n+    }\n+\n+    public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n \n-        public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n+        private final P parent;\n+        private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n+        private final ColumnIdent baseColumn;\n+        private final Function<ParentItemType, List<ItemType>> getItems;\n \n-            private final P parent;\n-            private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n-            private final ColumnIdent baseColumn;\n-            private final Function<ParentItemType, List<ItemType>> getItems;\n+        public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+            this.getItems = getItems;\n+        }\n \n-            public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-                this.getItems = getItems;\n+        public P endObjectArray() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n+                }\n+            }\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, new ArrayType<>(objectType), getLeafColumnValues(directChildren)));\n+            for (var column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n \n-            public P endObjectArray() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n+        public Function<ParentItemType, List<Map<String, Object>>> getLeafColumnValues(ArrayList<Column<ItemType, ?>> directChildren) {\n+            return xs -> {\n+                var items = getItems.apply(xs);\n+                ArrayList<Map<String, Object>> result = new ArrayList<>(items.size());\n+                for (ItemType item : items) {\n+                    HashMap<String, Object> map = new HashMap<>(directChildren.size());\n+                    for (int i = 0; i < directChildren.size(); i++) {\n+                        Column<ItemType, ?> column = directChildren.get(i);\n+                        try {\n+                            Object value = column.getProperty.apply(item);\n+                            map.put(column.column.leafName(), value);\n+                        } catch (NullPointerException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyMDg5MQ=="}, "originalCommit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e"}, "originalPosition": 159}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1432, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}