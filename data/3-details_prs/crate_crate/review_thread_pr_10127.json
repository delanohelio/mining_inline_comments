{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDk0NTAw", "number": 10127, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo1NTozNVrOEITJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo1NTozNVrOEITJzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTM3ODcwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo1NTozNVrOGoLScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo0NjowOVrOGoOnYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ==", "bodyText": "Do you think it makes sense to port this change back to master as well? I think the column-pruning optimization \"fixes\" this in master.", "url": "https://github.com/crate/crate/pull/10127#discussion_r444781171", "createdAt": "2020-06-24T09:55:35Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNjE2NA==", "bodyText": "Yes makes sense.", "url": "https://github.com/crate/crate/pull/10127#discussion_r444806164", "createdAt": "2020-06-24T10:44:35Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ=="}, "originalCommit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNTY4MA==", "bodyText": "Had a look, it's not the column pruning but also that we build the operators differently. sourcePlan.outputs() will never contain the table functions in the first place.", "url": "https://github.com/crate/crate/pull/10127#discussion_r444835680", "createdAt": "2020-06-24T11:46:09Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ=="}, "originalCommit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1286, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}