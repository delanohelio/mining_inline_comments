{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDQ5MTM4", "number": 9840, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozMDozM1rODt5Gsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNToyOFrODt5N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQ4MTE0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/ArrayAgg.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozMDozM1rOF_lEdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozMDozM1rOF_lEdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxMTk1OA==", "bodyText": "Maybe worth creating builder shortcuts like Signature.scalar() also for aggregates? I think this really improves readability. Also note the signature.withTypeVariableContraints() builder.", "url": "https://github.com/crate/crate/pull/9840#discussion_r402211958", "createdAt": "2020-04-02T10:30:33Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/ArrayAgg.java", "diffHunk": "@@ -42,19 +40,24 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n+\n public final class ArrayAgg extends AggregationFunction<List<Object>, List<Object>> {\n \n     public static final String NAME = \"array_agg\";\n \n     public static void register(AggregationImplModule module) {\n-        module.register(NAME, new BaseFunctionResolver(FuncParams.SINGLE_ANY) {\n-\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                var type = types.get(0);\n-                return new ArrayAgg(type);\n-            }\n-        });\n+        module.register(\n+            Signature.builder()\n+                .name(NAME)\n+                .kind(FunctionInfo.Type.AGGREGATE)\n+                .argumentTypes(parseTypeSignature(\"E\"))\n+                .typeVariableConstraints(typeVariable(\"E\"))\n+                .returnType(parseTypeSignature(\"array(E)\"))\n+                .build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f9230c347bedbb3170ffa8b07828d78d481a1b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDQ5OTQ3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/AbstractFunctionModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNToyOFrOF_lP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNToyOFrOF_lP1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDg2OQ==", "bodyText": "Can we mark the old register methods as deprecated?", "url": "https://github.com/crate/crate/pull/9840#discussion_r402214869", "createdAt": "2020-04-02T10:35:28Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -57,6 +61,13 @@ public void register(FunctionName qualifiedName, FunctionResolver functionResolv\n         resolver.put(qualifiedName, functionResolver);\n     }\n \n+    public void register(Signature signature, Function<List<DataType>, FunctionImplementation> factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f9230c347bedbb3170ffa8b07828d78d481a1b"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1581, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}