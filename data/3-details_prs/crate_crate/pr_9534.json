{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0Nzk5OTUw", "number": 9534, "title": "Add returning clause for sys-update usecase to storage engine", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis is pr adds an implementation of  a RETURNING clause to update system tables. The following statement is working should also explain the use case:\nupdate sys.node_checks set acknowledged = true where id = 1 returning id, acknowledged as ack\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-01-20T12:04:37Z", "url": "https://github.com/crate/crate/pull/9534", "merged": true, "mergeCommit": {"oid": "4ad79f29127141e2360f5a4735953800002c7f04"}, "closed": true, "closedAt": "2020-01-21T14:08:45Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8aaLxgFqTM0NTY0MjkzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8hC3dgBqjI5NjYxNjk0MDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NjQyOTM5", "url": "https://github.com/crate/crate/pull/9534#pullrequestreview-345642939", "createdAt": "2020-01-21T05:36:30Z", "commit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozNjozMFrOFfu4xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozNjozMFrOFfu4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxODM3Mw==", "bodyText": "Is it safe to mutate the expressions etc in a collector ? Does it have to be threadsafe here ?", "url": "https://github.com/crate/crate/pull/9534#discussion_r368818373", "createdAt": "2020-01-21T05:36:30Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/dml/SysUpdateResultSetProjector.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml;\n+\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.CollectionBucket;\n+import io.crate.data.Input;\n+import io.crate.data.Projector;\n+import io.crate.data.Row;\n+import io.crate.execution.engine.collect.NestableCollectExpression;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.StaticTableReferenceResolver;\n+import io.crate.expression.reference.sys.SysRowUpdater;\n+import io.crate.expression.reference.sys.check.node.SysNodeCheck;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.sys.SysNodeChecksTableInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collector;\n+\n+public class SysUpdateResultSetProjector implements Projector {\n+\n+    private final Consumer<Object> rowWriter;\n+    private final List<NestableCollectExpression<SysNodeCheck, ?>> expressions;\n+    private final List<Input<?>> inputs;\n+    private final SysRowUpdater<?> sysRowUpdater;\n+\n+    public SysUpdateResultSetProjector(SysRowUpdater<?> sysRowUpdater,\n+                                       Consumer<Object> rowWriter,\n+                                       Symbol[] returnValues,\n+                                       Functions functions,\n+                                       TransactionContext txnCtx) {\n+        this.sysRowUpdater = sysRowUpdater;\n+        this.rowWriter = rowWriter;\n+        InputFactory.Context<NestableCollectExpression<SysNodeCheck, ?>> cntx = new InputFactory(\n+            functions).ctxForRefs(\n+            txnCtx, new StaticTableReferenceResolver<>(SysNodeChecksTableInfo.expressions()));\n+        cntx.add(List.of(returnValues));\n+        this.expressions = cntx.expressions();\n+        this.inputs = cntx.topLevelInputs();\n+    }\n+\n+    @Override\n+    public BatchIterator<Row> apply(BatchIterator<Row> batchIterator) {\n+        return CollectingBatchIterator\n+            .newInstance(batchIterator,\n+                         Collector.of(\n+                             () -> new State(rowWriter),\n+                             (state, row) -> {\n+                                 Object sysNodeCheckId = row.get(0);\n+                                 //Update sysNodeCheck to the new value\n+                                 state.rowWriter.accept(sysNodeCheckId);\n+                                 //Retrieve updated sysNodeCheck and evaluate return values\n+                                 SysNodeCheck sysNodeCheck = (SysNodeCheck) sysRowUpdater.getRow(sysNodeCheckId);\n+                                 expressions.forEach(x -> x.setNextRow(sysNodeCheck));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NjQzMzM1", "url": "https://github.com/crate/crate/pull/9534#pullrequestreview-345643335", "createdAt": "2020-01-21T05:38:13Z", "commit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozODoxM1rOFfu6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozODoxM1rOFfu6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxODcwNQ==", "bodyText": "This could be merged with UpdateProjection and then dispatched using the ProjectionType to the designated Projector. What do you think ?", "url": "https://github.com/crate/crate/pull/9534#discussion_r368818705", "createdAt": "2020-01-21T05:38:13Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/dsl/projection/SysUpdateProjection.java", "diffHunk": "@@ -23,42 +23,98 @@\n package io.crate.execution.dsl.projection;\n \n import io.crate.expression.symbol.InputColumn;\n+import io.crate.expression.symbol.SelectSymbol;\n import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolVisitors;\n import io.crate.expression.symbol.Symbols;\n import io.crate.metadata.Reference;\n import io.crate.metadata.RowGranularity;\n-import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.elasticsearch.Version;\n import org.elasticsearch.common.io.stream.StreamInput;\n import org.elasticsearch.common.io.stream.StreamOutput;\n \n+import javax.annotation.Nullable;\n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n-public class SysUpdateProjection extends DMLProjection {\n+public class SysUpdateProjection extends Projection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NjQzNjE4", "url": "https://github.com/crate/crate/pull/9534#pullrequestreview-345643618", "createdAt": "2020-01-21T05:39:43Z", "commit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozOTo0M1rOFfu7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozOTo0M1rOFfu7Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxODk0Nw==", "bodyText": "I was wondering if it is a good idea to squeeze all the logic from SysUpdateResultSetProjector and SysUpdateProjector into 1 Projector using 2 different Collectors and States.", "url": "https://github.com/crate/crate/pull/9534#discussion_r368818947", "createdAt": "2020-01-21T05:39:43Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/dml/SysUpdateResultSetProjector.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml;\n+\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.CollectionBucket;\n+import io.crate.data.Input;\n+import io.crate.data.Projector;\n+import io.crate.data.Row;\n+import io.crate.execution.engine.collect.NestableCollectExpression;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.StaticTableReferenceResolver;\n+import io.crate.expression.reference.sys.SysRowUpdater;\n+import io.crate.expression.reference.sys.check.node.SysNodeCheck;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.sys.SysNodeChecksTableInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collector;\n+\n+public class SysUpdateResultSetProjector implements Projector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18cc2d8efecd83c96a5acf2b1c57bc1351aa11a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NzM4NjQz", "url": "https://github.com/crate/crate/pull/9534#pullrequestreview-345738643", "createdAt": "2020-01-21T09:35:49Z", "commit": {"oid": "6ecf1bf7f2e9fbc0b41a20010985ce45bfd0afcb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTozNTo1MFrOFfzggw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwOTozNTo1MFrOFfzggw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5NDA4Mw==", "bodyText": "Btw, if the lambda captures a variable from the outer scope it causes an allocation.\nShouldn't be a problem for updates on system tables, but something to keep in mind for logic that runs in an inner loop.", "url": "https://github.com/crate/crate/pull/9534#discussion_r368894083", "createdAt": "2020-01-21T09:35:50Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/dml/SysUpdateResultSetProjector.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml;\n+\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.CollectionBucket;\n+import io.crate.data.Input;\n+import io.crate.data.Projector;\n+import io.crate.data.Row;\n+import io.crate.execution.engine.collect.NestableCollectExpression;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.StaticTableReferenceResolver;\n+import io.crate.expression.reference.sys.SysRowUpdater;\n+import io.crate.expression.reference.sys.check.node.SysNodeCheck;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.sys.SysNodeChecksTableInfo;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collector;\n+\n+public class SysUpdateResultSetProjector implements Projector {\n+\n+    private final Consumer<Object> rowWriter;\n+    private final List<NestableCollectExpression<SysNodeCheck, ?>> expressions;\n+    private final List<Input<?>> inputs;\n+    private final SysRowUpdater<?> sysRowUpdater;\n+\n+    public SysUpdateResultSetProjector(SysRowUpdater<?> sysRowUpdater,\n+                                       Consumer<Object> rowWriter,\n+                                       Symbol[] returnValues,\n+                                       Functions functions,\n+                                       TransactionContext txnCtx) {\n+        this.sysRowUpdater = sysRowUpdater;\n+        this.rowWriter = rowWriter;\n+        InputFactory.Context<NestableCollectExpression<SysNodeCheck, ?>> cntx = new InputFactory(\n+            functions).ctxForRefs(\n+            txnCtx, new StaticTableReferenceResolver<>(SysNodeChecksTableInfo.expressions()));\n+        cntx.add(List.of(returnValues));\n+        this.expressions = cntx.expressions();\n+        this.inputs = cntx.topLevelInputs();\n+    }\n+\n+    @Override\n+    public BatchIterator<Row> apply(BatchIterator<Row> batchIterator) {\n+        return CollectingBatchIterator\n+            .newInstance(batchIterator,\n+                         Collector.of(\n+                             ArrayList<Object[]>::new,\n+                             (acc, row) -> {\n+                                 Object[] returnValues = evaluateReturnValues(row);\n+                                 acc.add(returnValues);\n+                             },\n+                             (state1, state2) -> {\n+                                 throw new UnsupportedOperationException(\n+                                     \"Combine not supported\");\n+                             },\n+                             CollectionBucket::new\n+                             ));\n+    }\n+\n+    private Object[] evaluateReturnValues(Row row) {\n+        Object sysNodeCheckId = row.get(0);\n+        //Update sysNodeCheck to the new value\n+        rowWriter.accept(sysNodeCheckId);\n+        //Retrieve updated sysNodeCheck and evaluate return values\n+        SysNodeCheck sysNodeCheck = (SysNodeCheck) sysRowUpdater.getRow(sysNodeCheckId);\n+        expressions.forEach(x -> x.setNextRow(sysNodeCheck));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecf1bf7f2e9fbc0b41a20010985ce45bfd0afcb"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1ODQxNjcz", "url": "https://github.com/crate/crate/pull/9534#pullrequestreview-345841673", "createdAt": "2020-01-21T12:31:35Z", "commit": {"oid": "6db9148b3539f3e3adb19475091e4df704f6e864"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjozMTozNlrOFf4Wdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMjozMjoxMFrOFf4XTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk3MzQzMA==", "bodyText": "Style nitpick and maybe something we should add a checkstyle rule for or change intellij defaults:\nCould put the arguments into a separate line to reduce the level of indentation, so that instead of\n#############################################################################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n                                                      #######################\n\nWe've\n#####################################################\n    #####################\n    #####################\n    #####################\n    ...\n\nMost people tend to read from left to right. Having the arguments further to\nthe left helps with skimming.", "url": "https://github.com/crate/crate/pull/9534#discussion_r368973430", "createdAt": "2020-01-21T12:31:36Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/consumer/UpdatePlanner.java", "diffHunk": "@@ -184,19 +200,48 @@ private static ExecutionPlan sysUpdate(PlannerContext plannerContext,\n                                            Map<Reference, Symbol> assignmentByTargetCol,\n                                            Symbol query,\n                                            Row params,\n-                                           SubQueryResults subQueryResults) {\n+                                           SubQueryResults subQueryResults,\n+                                           @Nullable List<Symbol> returnValues,\n+                                           @Nullable List<Field> outputFields) {\n         TableInfo tableInfo = table.tableInfo();\n         Reference idReference = requireNonNull(tableInfo.getReference(DocSysColumns.ID), \"Table must have a _id column\");\n-        SysUpdateProjection updateProjection = new SysUpdateProjection(idReference.valueType(), assignmentByTargetCol);\n+        Symbol[] outputSymbols;\n+        if (returnValues == null) {\n+            outputSymbols = new Symbol[]{new InputColumn(0, DataTypes.LONG)};\n+        } else {\n+            outputSymbols = new Symbol[outputFields.size()];\n+            for (int i = 0; i < outputFields.size(); i++) {\n+                outputSymbols[i] = new InputColumn(i, outputFields.get(i).valueType());\n+            }\n+        }\n+        SysUpdateProjection updateProjection = new SysUpdateProjection(new InputColumn(0, idReference.valueType()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db9148b3539f3e3adb19475091e4df704f6e864"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk3MzY0NQ==", "bodyText": "Shouldn't a test like this already exist somewhere?", "url": "https://github.com/crate/crate/pull/9534#discussion_r368973645", "createdAt": "2020-01-21T12:32:10Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -1001,4 +1003,30 @@ public void test_update_by_query_returning_multiple_results() throws Exception {\n         assertThat(response.rows()[1][1], is(3L));\n         assertThat(response.rows()[1][2], is(\"updated\"));\n     }\n+\n+    @Test\n+    public void test_update_sys_tables_returning_count() throws Exception {\n+        execute(\"update sys.node_checks set acknowledged = true where id = 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db9148b3539f3e3adb19475091e4df704f6e864"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84cd3e1a115bebca05bf3a68a3872abf792bb706", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/84cd3e1a115bebca05bf3a68a3872abf792bb706", "committedDate": "2020-01-21T12:47:27Z", "message": "Remove duplicated test"}, "afterCommit": {"oid": "42995ca521aa290e2ca304c647a27f5e05871c2c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/42995ca521aa290e2ca304c647a27f5e05871c2c", "committedDate": "2020-01-21T13:16:41Z", "message": "Add implementation for sys-table-update usecase to storage engine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a688b8c029130f6feffe8677c7aa6d70368f1a3", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/1a688b8c029130f6feffe8677c7aa6d70368f1a3", "committedDate": "2020-01-21T13:20:09Z", "message": "Add implementation for sys-table-update usecase to storage engine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42995ca521aa290e2ca304c647a27f5e05871c2c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/42995ca521aa290e2ca304c647a27f5e05871c2c", "committedDate": "2020-01-21T13:16:41Z", "message": "Add implementation for sys-table-update usecase to storage engine"}, "afterCommit": {"oid": "1a688b8c029130f6feffe8677c7aa6d70368f1a3", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/1a688b8c029130f6feffe8677c7aa6d70368f1a3", "committedDate": "2020-01-21T13:20:09Z", "message": "Add implementation for sys-table-update usecase to storage engine"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3923, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}