{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzQwMTMx", "number": 9745, "title": "Add column pruning", "bodyText": "Summary of the changes / Why this improves CrateDB\nFor cases like\nSELECT x FROM my_view\n\nWhere my_view resolves to SELECT x, y, z FROM tbl\nWe don't need to collect y and z.\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\nThis adds a new pruneOutputsExcept that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\nFor example in:\n  Limit\n    \u2514 Collect\n\nThe Limit operator itself doesn't know which outputs are needed\nwithout involving its parent.\nTODO\n\n Add pruning for TableFunction\n Add pruning for HashJoin\n Add pruning for NestedLoopJoin\n Figure out how to deal with subscripts in a better way\n Add pruning for Union\n\nFollow up\n\n Remove eager output propagation from LogicalPlanner (requires us to add _doc and other sys-columns to the TableRelation.outputs())\n\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-03-06T10:16:39Z", "url": "https://github.com/crate/crate/pull/9745", "merged": true, "mergeCommit": {"oid": "ba4ae1f595eaffdf3944747de33b8d95395df431"}, "closed": true, "closedAt": "2020-03-10T17:23:49Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK-BOxgBqjMxMDQ5MTI5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMVKfHABqjMxMTU1MDQwNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa11b95265b54032761fc7568b50c155513602f7", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/fa11b95265b54032761fc7568b50c155513602f7", "committedDate": "2020-03-06T10:16:08Z", "message": "WIP: Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}, "afterCommit": {"oid": "9e18b0037f0eddc9253879238ca7998f027ecbc3", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/9e18b0037f0eddc9253879238ca7998f027ecbc3", "committedDate": "2020-03-06T11:00:40Z", "message": "WIP: Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjE4MTg1", "url": "https://github.com/crate/crate/pull/9745#pullrequestreview-371218185", "createdAt": "2020-03-09T14:15:02Z", "commit": {"oid": "9558237c41bf80cc8a57c360715cd8c8bf7c8b5b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxNTowMlrOFzqXUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NTozNlrOFzrp5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxNTc5Mw==", "bodyText": "Would it be possible to define a class that extends DefaultTraversalSymbolVisitor in oder to visit all symbols from window function, such as we have exactly the same login in visitWindowFunction?", "url": "https://github.com/crate/crate/pull/9745#discussion_r389715793", "createdAt": "2020-03-09T14:15:02Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/planner/operators/WindowAgg.java", "diffHunk": "@@ -102,6 +104,43 @@ private WindowAgg(LogicalPlan source, WindowDefinition windowDefinition, List<Wi\n         this.standalone = standalone;\n     }\n \n+    @Override\n+    public LogicalPlan pruneOutputsExcept(Collection<Symbol> outputsToKeep) {\n+        HashSet<Symbol> toKeep = new HashSet<>(outputsToKeep);\n+        toKeep.removeAll(windowFunctions);\n+        List<Symbol> newStandalone = List.copyOf(toKeep);\n+        for (WindowFunction windowFunction : windowFunctions) {\n+            toKeep.addAll(windowFunction.arguments());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9558237c41bf80cc8a57c360715cd8c8bf7c8b5b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjkzMg==", "bodyText": "can you elaborate a bit here? if we use a ScopedSymbol instead of a subscript function, we basically do not need the logic in the loop bellow? how can a subscript function be mapped to scoped symbol?", "url": "https://github.com/crate/crate/pull/9745#discussion_r389736932", "createdAt": "2020-03-09T14:45:36Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/planner/operators/Rename.java", "diffHunk": "@@ -80,6 +84,58 @@ public RelationName name() {\n         return outputs;\n     }\n \n+    @Override\n+    public LogicalPlan pruneOutputsExcept(Collection<Symbol> outputsToKeep) {\n+        ArrayList<Symbol> mappedToKeep = new ArrayList<>();\n+        /* outputsToKeep may be scalars on top of the Rename result or subscripts\n+         * Eval: x > 1, obj['x']\n+         *  \u2514 Rename[x, obj]\n+         *      \u2514 Collect [x, obj]\n+         *\n+         * TODO: `obj['x']` can be a ScopedSymbol instead of a subscript function. Can we change that?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9558237c41bf80cc8a57c360715cd8c8bf7c8b5b"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9558237c41bf80cc8a57c360715cd8c8bf7c8b5b", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/9558237c41bf80cc8a57c360715cd8c8bf7c8b5b", "committedDate": "2020-03-09T12:42:32Z", "message": "fixup! WIP: Add column pruning"}, "afterCommit": {"oid": "465b1929ec29732f94450be53b7f0dd7cd55c1f0", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/465b1929ec29732f94450be53b7f0dd7cd55c1f0", "committedDate": "2020-03-09T14:58:30Z", "message": "fixup! WIP: Add column pruning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dd27a94b5346fcb3cf08076d21f10952cfadcde", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/4dd27a94b5346fcb3cf08076d21f10952cfadcde", "committedDate": "2020-03-09T16:12:25Z", "message": "fixup! fixup! WIP: Add column pruning"}, "afterCommit": {"oid": "f3cfbe376c03b8fad513da9fad51bf76b7ac01a6", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/f3cfbe376c03b8fad513da9fad51bf76b7ac01a6", "committedDate": "2020-03-09T16:35:25Z", "message": "fixup! fixup! WIP: Add column pruning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fece3fa292a79e773e07b08def37592020b3e1bb", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/fece3fa292a79e773e07b08def37592020b3e1bb", "committedDate": "2020-03-10T10:46:08Z", "message": "Add column pruning for NestedLoopJoin"}, "afterCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/78f449e71a831239f027f4dc1dda4e12f488fc60", "committedDate": "2020-03-10T10:50:08Z", "message": "Add column pruning for NestedLoopJoin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODUxOTk0", "url": "https://github.com/crate/crate/pull/9745#pullrequestreview-371851994", "createdAt": "2020-03-10T10:56:36Z", "commit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1NjozNlrOF0KC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1NjozNlrOF0KC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDg3Ng==", "bodyText": "I'm not too happy about having to resort to identity here, but I don't really have a better idea.", "url": "https://github.com/crate/crate/pull/9745#discussion_r390234876", "createdAt": "2020-03-10T10:56:36Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/Rename.java", "diffHunk": "@@ -80,6 +84,41 @@ public RelationName name() {\n         return outputs;\n     }\n \n+    @Override\n+    public LogicalPlan pruneOutputsExcept(Collection<Symbol> outputsToKeep) {\n+        /* In `SELECT * FROM (SELECT t1.*, t2.* FROM tbl AS t1, tbl AS t2) AS tjoin`\n+         * The `ScopedSymbol`s are ambiguous; To map them correctly this uses a IdentityHashMap\n+         */\n+        IdentityHashMap<Symbol, Symbol> parentToChildMap = new IdentityHashMap<>(outputs.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDUxODk0", "url": "https://github.com/crate/crate/pull/9745#pullrequestreview-372051894", "createdAt": "2020-03-10T15:17:22Z", "commit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoyMlrOF0Trfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoyMlrOF0Trfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjcwMw==", "bodyText": "minor: was wondering whether it is really necessary to create an instance of IntersectionVisitor on each intersection method invocation and whether it makes sense to reuse a visitor context to pass haystack and needle (but it is probably the same coz the context has to be created..)?", "url": "https://github.com/crate/crate/pull/9745#discussion_r390392703", "createdAt": "2020-03-10T15:17:22Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/symbol/SymbolVisitors.java", "diffHunk": "@@ -42,6 +48,127 @@ public static boolean any(Predicate<? super Symbol> symbolPredicate, Symbol symb\n         return symbol.accept(ANY_VISITOR, symbolPredicate);\n     }\n \n+    /**\n+     * Calls the given `consumer` for all intersection points between `needle` and `haystack`.\n+     * For example, in:\n+     * <pre>\n+     *     needle: x > 20 AND y = 2\n+     *     haystack: [x, y = 2]\n+     * </pre>\n+     *\n+     * The `consumer` would be called for `x` and for `y = 2`\n+     */\n+    public static <T> void intersection(Symbol needle, Collection<T> haystack, Consumer<T> consumer) {\n+        needle.accept(new IntersectionVisitor<>(haystack, consumer), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDg0MDQ3", "url": "https://github.com/crate/crate/pull/9745#pullrequestreview-372084047", "createdAt": "2020-03-10T15:50:47Z", "commit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1MDo0N1rOF0VPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1ODozMFrOF0VmHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxODIyMw==", "bodyText": "Why is this required? Or why not at AnalyzedView?", "url": "https://github.com/crate/crate/pull/9745#discussion_r390418223", "createdAt": "2020-03-10T15:50:47Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/relations/AliasedAnalyzedRelation.java", "diffHunk": "@@ -101,7 +108,7 @@ public RelationName relationName() {\n     @Nonnull\n     @Override\n     public List<Symbol> outputs() {\n-        return outputs;\n+        return List.copyOf(outputs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQyNDA5NQ==", "bodyText": "maybe worth adding the \"why\"", "url": "https://github.com/crate/crate/pull/9745#discussion_r390424095", "createdAt": "2020-03-10T15:58:30Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/planner/operators/LogicalPlan.java", "diffHunk": "@@ -112,6 +114,39 @@ default boolean preferShardProjections() {\n \n     LogicalPlan replaceSources(List<LogicalPlan> sources);\n \n+    /**\n+     * Request an operator to return a new version of itself with all outputs removed except the ones contained in `outputsToKeep`.\n+     * <p>\n+     *  Note that `outputsToKeep` can contain scalars on top of the outputs that the \"current\" operator outputs.\n+     *  This doesn't mean that the operator has to pull-down the scalar as well, but it means it has to provide all outputs\n+     *  that are required by the parent.\n+     *  Using {@link io.crate.expression.symbol.SymbolVisitors#intersection(Symbol, Collection, Consumer)} is an option\n+     *  To find the outputs required by the parent.\n+     * </p>\n+     *\n+     * Example:\n+     *\n+     * <pre>\n+     *     A: [substr(x, 0, 3), y]\n+     *     \u2514 B [x, y, z]              // Should provide `x` and `y` after the prune call.\n+     * </pre>\n+     *\n+     * <p>\n+     *   This must propagate down the tree:\n+     * </p>\n+     * <pre>\n+     *      root       A call to `root.pruneOutputsExcept(..)` must result in calls on all: A, B and C\n+     *       / \\\n+     *     A   C\n+     *     |\n+     *     B\n+     * </pre>\n+     * <p>\n+     *  If there are no outputs to prune and if the source also didn't change, `this` must be returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78f449e71a831239f027f4dc1dda4e12f488fc60", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/78f449e71a831239f027f4dc1dda4e12f488fc60", "committedDate": "2020-03-10T10:50:08Z", "message": "Add column pruning for NestedLoopJoin"}, "afterCommit": {"oid": "5a5be5d4c91a201160b15d356917af62830dd2d4", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/5a5be5d4c91a201160b15d356917af62830dd2d4", "committedDate": "2020-03-10T16:28:06Z", "message": "Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4565e95084540314c2bc8f9fe3f17685882147a5", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/4565e95084540314c2bc8f9fe3f17685882147a5", "committedDate": "2020-03-10T16:32:30Z", "message": "Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a5be5d4c91a201160b15d356917af62830dd2d4", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/5a5be5d4c91a201160b15d356917af62830dd2d4", "committedDate": "2020-03-10T16:28:06Z", "message": "Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}, "afterCommit": {"oid": "4565e95084540314c2bc8f9fe3f17685882147a5", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/4565e95084540314c2bc8f9fe3f17685882147a5", "committedDate": "2020-03-10T16:32:30Z", "message": "Add column pruning\n\nFor cases like\n\n```\nSELECT x FROM my_view\n```\n\nWhere `my_view` resolves to `SELECT x, y, z FROM tbl`\nWe don't need to collect `y` and `z`.\n\nThis was previously done implicitly to some degree with the fetch\noptimization, but it didn't work in all cases.\n\nThis adds a new `pruneOutputsExcept` that can be triggered on a root\nnode and propagates through the whole tree to remove any unused outputs.\n\nThis is not done as an optimization rule. Optimizations rule are ideal\nwhen an optimization decisicion can be done in isolation looking at a\nsmall sub-tree. But in the case of column pruning it is necessary to\nbuild a lot of context.\n\nFor example in:\n\n```\n  Limit\n    \u2514 Collect\n```\n\nThe `Limit` operator itself doesn't know which outputs are needed\nwithout involving its parent."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}