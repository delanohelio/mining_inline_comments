{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NDQyNTc2", "number": 9587, "title": "Fix error handling while consuming a next batch", "bodyText": "Changes the signature of BatchIterator.loadNextBatch to throw an exception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\nAnother option would be to adjust all loadNextBatch implementations to never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around.", "createdAt": "2020-01-29T09:01:06Z", "url": "https://github.com/crate/crate/pull/9587", "merged": true, "mergeCommit": {"oid": "9bc8337eb0aa29491f05aac96caf75ebacc96f36"}, "closed": true, "closedAt": "2020-01-29T16:24:30Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_CIweABqjI5ODg2NzgyNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_ICgQABqjI5OTAwNjA5Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5d5fe44d2190fe84bc4a206fc0367b9afd5bbaa", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/a5d5fe44d2190fe84bc4a206fc0367b9afd5bbaa", "committedDate": "2020-01-29T08:49:24Z", "message": "Fix error handling inside the distributed consumer\n\nAll exceptions on consuming must be caught and forwarded, otherwise\nthe exception may be swallowed, resulting in stuck operations."}, "afterCommit": {"oid": "32741829bb4a51b20c3a1d280182459a40100b14", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/32741829bb4a51b20c3a1d280182459a40100b14", "committedDate": "2020-01-29T09:01:23Z", "message": "Fix error handling inside the distributed consumer\n\nAll exceptions on consuming must be caught and forwarded, otherwise\nthe exception may be swallowed, resulting in stuck operations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32741829bb4a51b20c3a1d280182459a40100b14", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/32741829bb4a51b20c3a1d280182459a40100b14", "committedDate": "2020-01-29T09:01:23Z", "message": "Fix error handling inside the distributed consumer\n\nAll exceptions on consuming must be caught and forwarded, otherwise\nthe exception may be swallowed, resulting in stuck operations."}, "afterCommit": {"oid": "d3627f90b072cfe0dcccad161ae70213da415b0f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/d3627f90b072cfe0dcccad161ae70213da415b0f", "committedDate": "2020-01-29T14:24:13Z", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3627f90b072cfe0dcccad161ae70213da415b0f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/d3627f90b072cfe0dcccad161ae70213da415b0f", "committedDate": "2020-01-29T14:24:13Z", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around."}, "afterCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/0d43aea914e8928dcbd315d3508f9473b1e0c874", "committedDate": "2020-01-29T14:25:55Z", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTU0NTky", "url": "https://github.com/crate/crate/pull/9587#pullrequestreview-350154592", "createdAt": "2020-01-29T14:38:53Z", "commit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozODo1M1rOFjKrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0MjowMFrOFjKy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA==", "bodyText": "Couldn't we change uncheckedLoadNextBatch to throw an Exception as well? It's called within loadNextBatch.", "url": "https://github.com/crate/crate/pull/9587#discussion_r372419444", "createdAt": "2020-01-29T14:38:53Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "diffHunk": "@@ -128,10 +128,14 @@ private void concatRows(Iterator<? extends T> rows) {\n     private CompletionStage<?> uncheckedLoadNextBatch() {\n         CompletionStage<?> batchProcessResult = tryProcessBatchFromLoadedSource();\n         if (batchProcessResult == null) {\n-            if (source.allLoaded()) {\n-                return processRemaining();\n+            try {\n+                if (source.allLoaded()) {\n+                    return processRemaining();\n+                }\n+                return source.loadNextBatch().thenCompose(ignored -> this.uncheckedLoadNextBatch());\n+            } catch (Throwable t) {\n+                return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyMTMzNg==", "bodyText": "I guess this case is one of the downsides of the checked exception. supplyAsync would already handle the exception correctly :(", "url": "https://github.com/crate/crate/pull/9587#discussion_r372421336", "createdAt": "2020-01-29T14:42:00Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/CompositeBatchIterator.java", "diffHunk": "@@ -202,15 +202,25 @@ public boolean moveNext() {\n                     CompletableFuture<CompletableFuture> future = supplyAsync(() -> {\n                         ArrayList<CompletableFuture<?>> futures = new ArrayList<>(batchIterators.size());\n                         for (BatchIterator<T> batchIterator: batchIterators) {\n-                            futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            try {\n+                                futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            } catch (Throwable t) {\n+                                return CompletableFuture.failedFuture(t);\n+                            }\n                         }\n                         return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n                     }, executor);\n                     nestedFutures.add(future);\n                 }\n             } else {\n                 for (BatchIterator<T> iterator: itToLoad) {\n-                    nestedFutures.add(supplyAsync(() -> iterator.loadNextBatch().toCompletableFuture(), executor));\n+                    nestedFutures.add(supplyAsync(() -> {\n+                        try {\n+                            return iterator.loadNextBatch().toCompletableFuture();\n+                        } catch (Throwable t) {\n+                            return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMTk5NDcy", "url": "https://github.com/crate/crate/pull/9587#pullrequestreview-350199472", "createdAt": "2020-01-29T15:32:51Z", "commit": {"oid": "8e91a77b9cdd771c58de5bcb4747a63f3c9e00f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "committedDate": "2020-01-29T15:53:58Z", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e91a77b9cdd771c58de5bcb4747a63f3c9e00f2", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/8e91a77b9cdd771c58de5bcb4747a63f3c9e00f2", "committedDate": "2020-01-29T15:22:22Z", "message": "fixup! Fix error handling while consuming a next batch"}, "afterCommit": {"oid": "7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/7a6f20c8cb7c65b5a55fa9722c02454779b86eca", "committedDate": "2020-01-29T15:53:58Z", "message": "Fix error handling while consuming a next batch\n\nChanges the signature of `BatchIterator.loadNextBatch` to throw an\nexception in order to force all callers/consumers to handle it properly.\nSwallowed exceptions would otherwise lead to stuck queries.\n\nAnother option would be to adjust all `loadNextBatch` implementations\nto never throw any exception but return a failing future instead.\nAs this could not be enforced, we decided to go the other way around."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3959, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}