{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mjg3MTQ4", "number": 9833, "title": "Unify lookup methods in PKLookupOperation", "bodyText": "To have a (mostly) single code path for with/without projections.\nShould help against bugs like #9832\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-03-31T12:04:51Z", "url": "https://github.com/crate/crate/pull/9833", "merged": true, "mergeCommit": {"oid": "45be4c3e619b94c7e4d697422a10edc8ac33aa8d"}, "closed": true, "closedAt": "2020-03-31T13:56:41Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTCVQKAFqTM4NDY4NTYyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTC_G3gBqjMxODMyNjQxNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0Njg1NjIz", "url": "https://github.com/crate/crate/pull/9833#pullrequestreview-384685623", "createdAt": "2020-03-31T12:33:40Z", "commit": {"oid": "ae3cd47440ef75d363e53faf3405f8eb2ab449bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjozMzo0MFrOF-Thow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjozMzo0MFrOF-Thow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3NTkzOQ==", "bodyText": "isn't projectors.wrap(...) missing here?", "url": "https://github.com/crate/crate/pull/9833#discussion_r400875939", "createdAt": "2020-03-31T12:33:40Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/PKLookupOperation.java", "diffHunk": "@@ -177,60 +135,46 @@ public void runWithShardProjections(UUID jobId,\n                 }\n                 throw new ShardNotFoundException(shardId);\n             }\n-            try {\n-                shardAndIdsList.add(\n-                    new ShardAndIds(\n-                        shard,\n-                        shardCollectSource.getProjectorFactory(shardId),\n-                        idsByShardEntry.getValue()\n-                    ));\n-            } catch (ShardNotFoundException e) {\n-                if (ignoreMissing) {\n-                    continue;\n-                }\n-                throw e;\n-            }\n-        }\n-        ArrayList<BatchIterator<Row>> iterators = new ArrayList<>(shardAndIdsList.size());\n-        for (ShardAndIds shardAndIds : shardAndIdsList) {\n-            Stream<Row> rowStream = shardAndIds.value.stream()\n-                .map(pkAndVersion -> lookupDoc(shardAndIds.shard,\n-                                               pkAndVersion.id(),\n-                                               pkAndVersion.version(),\n-                                               pkAndVersion.seqNo(),\n-                                               pkAndVersion.primaryTerm()))\n+            Stream<Row> rowStream = idsByShardEntry.getValue().stream()\n+                .map(pkAndVersion -> lookupDoc(\n+                    shard,\n+                    pkAndVersion.id(),\n+                    pkAndVersion.version(),\n+                    VersionType.EXTERNAL,\n+                    pkAndVersion.seqNo(),\n+                    pkAndVersion.primaryTerm()))\n+                .filter(Objects::nonNull)\n                 .map(resultToRow);\n \n-            Projectors projectors = new Projectors(\n-                projections,\n-                jobId,\n-                txnCtx,\n-                ramAccountingSupplier.get(),\n-                memoryManagerSupplier.get(),\n-                shardAndIds.projectorFactory);\n-            final Iterable<Row> rowIterable;\n-            if (nodeConsumer.requiresScroll() && !projectors.providesIndependentScroll()) {\n-                rowIterable = rowStream.map(row -> new RowN(row.materialize())).collect(Collectors.toList());\n+            if (projections.isEmpty()) {\n+                final Iterable<Row> rowIterable = requiresScroll\n+                    ? rowStream.map(row -> new RowN(row.materialize())).collect(Collectors.toList())\n+                    : rowStream::iterator;\n+                iterators.add(InMemoryBatchIterator.of(rowIterable, SentinelRow.SENTINEL, true));\n             } else {\n-                rowIterable = rowStream::iterator;\n+                ProjectorFactory projectorFactory;\n+                try {\n+                    projectorFactory = shardCollectSource.getProjectorFactory(shardId);\n+                } catch (ShardNotFoundException e) {\n+                    if (ignoreMissing) {\n+                        continue;\n+                    }\n+                    throw e;\n+                }\n+                Projectors projectors = new Projectors(\n+                    projections,\n+                    jobId,\n+                    txnCtx,\n+                    ramAccountingSupplier.get(),\n+                    memoryManagerSupplier.get(),\n+                    projectorFactory);\n+                final Iterable<Row> rowIterable = requiresScroll && !projectors.providesIndependentScroll()\n+                    ? rowStream.map(row -> new RowN(row.materialize())).collect(Collectors.toList())\n+                    : rowStream::iterator;\n+                iterators.add(InMemoryBatchIterator.of(rowIterable, SentinelRow.SENTINEL, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae3cd47440ef75d363e53faf3405f8eb2ab449bc"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NzIxMTcx", "url": "https://github.com/crate/crate/pull/9833#pullrequestreview-384721171", "createdAt": "2020-03-31T13:17:02Z", "commit": {"oid": "f6106ea24b9029948ec46342ef198f11f2396916"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6888f778adb54c1d75ad4a798b206cdedd96a5f", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/e6888f778adb54c1d75ad4a798b206cdedd96a5f", "committedDate": "2020-03-31T13:19:12Z", "message": "Unify lookup methods in PKLookupOperation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e981d6ba25c66a1dd322da99d0d9e8cec9ed3b", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/12e981d6ba25c66a1dd322da99d0d9e8cec9ed3b", "committedDate": "2020-03-31T13:19:12Z", "message": "Use shard projections on top of PKLookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19016189901bd23981f446f140f2bdaf6e9b0cce", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/19016189901bd23981f446f140f2bdaf6e9b0cce", "committedDate": "2020-03-31T13:19:12Z", "message": "Use PKLookup for COPY TO if possible"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6106ea24b9029948ec46342ef198f11f2396916", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/f6106ea24b9029948ec46342ef198f11f2396916", "committedDate": "2020-03-31T13:00:56Z", "message": "Use PKLookup for COPY TO if possible"}, "afterCommit": {"oid": "19016189901bd23981f446f140f2bdaf6e9b0cce", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/19016189901bd23981f446f140f2bdaf6e9b0cce", "committedDate": "2020-03-31T13:19:12Z", "message": "Use PKLookup for COPY TO if possible"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}