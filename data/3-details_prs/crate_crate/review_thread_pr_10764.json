{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTg1MDU2", "number": 10764, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowNTozNlrOE3xN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowNTozNlrOE3xN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTEzNTA0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/PostgresITest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjowNTozNlrOHxToPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODowNDozM1rOHxunNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2Mzg3MA==", "bodyText": "do we need more than 2 iterations? couldn't this be tested by adding a duplicate id inside the ids array already?", "url": "https://github.com/crate/crate/pull/10764#discussion_r521463870", "createdAt": "2020-11-11T16:05:36Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/integrationtests/PostgresITest.java", "diffHunk": "@@ -905,6 +907,38 @@ public void test_each_non_array_pg_type_entry_can_be_joined_with_pg_proc() throw\n         }\n     }\n \n+    @Test\n+    public void test_insert_from_unnest_returning_which_inserts_duplicate_keys() throws Exception {\n+        try (var conn = DriverManager.getConnection(url(RW))) {\n+            var statement = conn.createStatement();\n+            statement.execute(\"create table tbl (id bigint primary key, val text)\");\n+            var textGenerator = DataTypeTesting.getDataGenerator(DataTypes.STRING);\n+            var insertUnnest = conn.prepareStatement(\n+                \"insert into tbl (id, val) (select id, val from unnest(?, ?) as t (id, val)) returning _id\");\n+\n+            for (int iteration = 0; iteration < randomIntBetween(2, 7); iteration++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc875708dda1d08e7b1377d9e030b9e2d2ea773"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUxMjc2OA==", "bodyText": "I was thinking of the threshold where jdbc switched to binary streaming to have that covered too - but it's actually already randomized in the PostgresITest setup, so I can fix it to 2 iterations here \ud83d\udc4d", "url": "https://github.com/crate/crate/pull/10764#discussion_r521512768", "createdAt": "2020-11-11T17:16:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/PostgresITest.java", "diffHunk": "@@ -905,6 +907,38 @@ public void test_each_non_array_pg_type_entry_can_be_joined_with_pg_proc() throw\n         }\n     }\n \n+    @Test\n+    public void test_insert_from_unnest_returning_which_inserts_duplicate_keys() throws Exception {\n+        try (var conn = DriverManager.getConnection(url(RW))) {\n+            var statement = conn.createStatement();\n+            statement.execute(\"create table tbl (id bigint primary key, val text)\");\n+            var textGenerator = DataTypeTesting.getDataGenerator(DataTypes.STRING);\n+            var insertUnnest = conn.prepareStatement(\n+                \"insert into tbl (id, val) (select id, val from unnest(?, ?) as t (id, val)) returning _id\");\n+\n+            for (int iteration = 0; iteration < randomIntBetween(2, 7); iteration++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2Mzg3MA=="}, "originalCommit": {"oid": "adc875708dda1d08e7b1377d9e030b9e2d2ea773"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNTk3NQ==", "bodyText": "@seut pushed a fixup. I tried to change it to have duplicate ids in just one request, but then the error doesn't occur. I think it only happens if there is no result rows at all.", "url": "https://github.com/crate/crate/pull/10764#discussion_r521905975", "createdAt": "2020-11-12T08:04:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/PostgresITest.java", "diffHunk": "@@ -905,6 +907,38 @@ public void test_each_non_array_pg_type_entry_can_be_joined_with_pg_proc() throw\n         }\n     }\n \n+    @Test\n+    public void test_insert_from_unnest_returning_which_inserts_duplicate_keys() throws Exception {\n+        try (var conn = DriverManager.getConnection(url(RW))) {\n+            var statement = conn.createStatement();\n+            statement.execute(\"create table tbl (id bigint primary key, val text)\");\n+            var textGenerator = DataTypeTesting.getDataGenerator(DataTypes.STRING);\n+            var insertUnnest = conn.prepareStatement(\n+                \"insert into tbl (id, val) (select id, val from unnest(?, ?) as t (id, val)) returning _id\");\n+\n+            for (int iteration = 0; iteration < randomIntBetween(2, 7); iteration++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ2Mzg3MA=="}, "originalCommit": {"oid": "adc875708dda1d08e7b1377d9e030b9e2d2ea773"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 904, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}