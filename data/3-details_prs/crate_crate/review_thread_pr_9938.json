{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjEyMzY2", "number": 9938, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTozN1rOD7lApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMjo1NFrOD7tApA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzk4OTQ4OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTozN1rOGT_J0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTozN1rOGT_J0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDgzMg==", "bodyText": "Could you change the test cases that test for errors to use expectedException.expectMessage(\"...\") and expectedException.expect(IllegalArgumentException.class) ?\nIf chr(0) would be changed to return an empty string, this test case as it is would still pass.", "url": "https://github.com/crate/crate/pull/9938#discussion_r423610832", "createdAt": "2020-05-12T09:55:37Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import org.junit.Test;\n+import java.lang.Exception;\n+import static org.junit.matchers.JUnitMatchers.*;\n+\n+public class ChrFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void test_zero_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(0)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"null character not permitted\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401b52f6be344ad22c45704f46c198589db01d07"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzk5MzQ2OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1Njo0N1rOGT_MYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1Njo0N1rOGT_MYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMTQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int i = 65;\n          \n      \n    \n    \n  \n\ni isn't used in this context", "url": "https://github.com/crate/crate/pull/9938#discussion_r423611491", "createdAt": "2020-05-12T09:56:47Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/expression/scalar/string/ChrFunctionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.expression.scalar.AbstractScalarFunctionsTest;\n+import org.junit.Test;\n+import java.lang.Exception;\n+import static org.junit.matchers.JUnitMatchers.*;\n+\n+public class ChrFunctionTest extends AbstractScalarFunctionsTest {\n+\n+    @Test\n+    public void test_zero_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(0)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"null character not permitted\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_negative_number_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(-1)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"requested character too large for encoding: -1\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_large_number_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr(1114112)\", \"\");\n+        }\n+        catch (IllegalArgumentException illegalArgumentException){\n+            assertThat(illegalArgumentException.getMessage(), containsString(\"requested character too large for encoding: 1114112\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_empty_value_throws_exception() throws Exception {\n+        try {\n+            assertEvaluate(\"chr()\", \"\");\n+        }\n+        catch (Exception exception){\n+            assertThat(exception.getMessage(), containsString(\"unknown function: chr()\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test_chr_positive_number() throws Exception {\n+        int i = 65;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401b52f6be344ad22c45704f46c198589db01d07"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTI5NzQ3OnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMjoyOFrOGUMCoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMjoyOFrOGUMCoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMTk4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Returns the Character with the given code. For UTF8 the argument is\n          \n          \n            \n            treated as a Unicode code point.\n          \n          \n            \n            Returns the Character with the given code. For UTF8 the argument is treated as\n          \n          \n            \n            a Unicode code point.\n          \n      \n    \n    \n  \n\nwrapped to 79 chars", "url": "https://github.com/crate/crate/pull/9938#discussion_r423821985", "createdAt": "2020-05-12T15:22:28Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -221,6 +221,26 @@ Returns: ``int``\n     +----+--------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar_chr:\n+\n+``chr(int)``\n+-----------------\n+\n+Returns the Character with the given code. For UTF8 the argument is\n+treated as a Unicode code point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401b52f6be344ad22c45704f46c198589db01d07"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTMwMDIwOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMjo1NFrOGUMEOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyMjo1NFrOGUMEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMjM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ``chr(int)``\n          \n          \n            \n            -----------------\n          \n          \n            \n            ``chr(int)``\n          \n          \n            \n            ------------\n          \n      \n    \n    \n  \n\nfixes underline length", "url": "https://github.com/crate/crate/pull/9938#discussion_r423822392", "createdAt": "2020-05-12T15:22:54Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -221,6 +221,26 @@ Returns: ``int``\n     +----+--------+\n     SELECT 1 row in set (... sec)\n \n+.. _scalar_chr:\n+\n+``chr(int)``\n+-----------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "401b52f6be344ad22c45704f46c198589db01d07"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1474, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}