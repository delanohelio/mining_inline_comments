{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMDkzNjQx", "number": 10599, "title": "Fix searcher double-release race condition", "bodyText": "Summary of the changes / Why this improves CrateDB\nThe incRef/release-on-zero pattern in the RefCountedItem didn't protect\nsufficently against double releases, because an already closed\nRefCountedItem could gain new refs and that would cause it to be closed\nmultiple times.\nA scenario where that can happen is a union or a join where the same\ntable is used more than one time.\nIf the table is small or the operation is fast, the close on the first\nuse of table A can happen before the second use of table A.\nThis fix here makes sure that a release happens only once, by discarding\nthe item and re-acquiring it if the refs reach zero.\nNote that this circumvents part of the motivation for the\nSharedShardContext - that is to re-use the same searchers across\noperations. We'd have to re-introduce a prepare/start split or similar\nto guarantee that all reference increments happen before the first close\ncan happen to ensure that searchers are truly shared.\nThis fixes flaky tests. An example that failed occassionally is:\n./gradlew :server:test -Dtests.seed=50DCF5AD232E645D -Dtests.class=io.crate.integrationtests.UnionIntegrationTest -Dtests.method=\"testUnionAllArrayAndObjectColumns\" -Dtests.locale=brx-IN -Dtests.timezone=America/Argentina/Rio_Gallegos -Dtests.iters=20 --fail-fast\n\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-09-25T13:55:52Z", "url": "https://github.com/crate/crate/pull/10599", "merged": true, "mergeCommit": {"oid": "9a3217c46ed8d69024c530cc7b22ea0e05f35ca3"}, "closed": true, "closedAt": "2020-09-25T16:06:00Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMWOJ_AH2gAyNDkzMDkzNjQxOjNlYmRhNGI3N2YwMzBiYThjNTVlZDFjZTkzMWNkZDM1Mzk4NTVjZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMXkQugH2gAyNDkzMDkzNjQxOmYwMGViMjI1NWYwMGIxNDMyNDE1Y2Q5MzZkMGU5ZWM2YmMxMDEwNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ebda4b77f030ba8c55ed1ce931cdd3539855cde", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/3ebda4b77f030ba8c55ed1ce931cdd3539855cde", "committedDate": "2020-09-25T13:57:42Z", "message": "Fix searcher double-release race condition\n\nThe incRef/release-on-zero pattern in the RefCountedItem didn't protect\nsufficently against double releases, because an already closed\nRefCountedItem could gain new refs and that would cause it to be closed\nmultiple times.\n\nA scenario where that can happen is a union or a join where the same\ntable is used more than one time.\n\nIf the table is small or the operation is fast, the close on the first\nuse of table A can happen before the second use of table A.\n\nThis fix here makes sure that a release happens only once, by discarding\nthe item and re-acquiring it if the refs reach zero.\n\nNote that this circumvents part of the motivation for the\nSharedShardContext - that is to re-use the same searchers across\noperations. We'd have to re-introduce a prepare/start split or similar\nto guarantee that all reference increments happen before the first close\ncan happen to ensure that searchers are truly shared.\n\nThis fixes flaky tests. An example that failed occassionally is:\n\n    ./gradlew :server:test -Dtests.seed=50DCF5AD232E645D -Dtests.class=io.crate.integrationtests.UnionIntegrationTest -Dtests.method=\"testUnionAllArrayAndObjectColumns\" -Dtests.locale=brx-IN -Dtests.timezone=America/Argentina/Rio_Gallegos -Dtests.iters=20 --fail-fast"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "100069169a3e6e57ee297ead4822d42ee400bee6", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/100069169a3e6e57ee297ead4822d42ee400bee6", "committedDate": "2020-09-25T13:50:23Z", "message": "Fix searcher double-release race condition\n\nThe incRef/release-on-zero pattern in the RefCountedItem didn't protect\nsufficently against double releases, because an already closed\nRefCountedItem could gain new refs and that would cause it to be closed\nmultiple times.\n\nA scenario where that can happen is a union or a join where the same\ntable is used more than one time.\n\nIf the table is small or the operation is fast, the close on the first\nuse of table A can happen before the second use of table A.\n\nThis fix here makes sure that a release happens only once, by discarding\nthe item and re-acquiring it if the refs reach zero.\n\nNote that this circumvents part of the motivation for the\nSharedShardContext - that is to re-use the same searchers across\noperations. We'd have to re-introduce a prepare/start split or similar\nto guarantee that all reference increments happen before the first close\ncan happen to ensure that searchers are truly shared."}, "afterCommit": {"oid": "3ebda4b77f030ba8c55ed1ce931cdd3539855cde", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/3ebda4b77f030ba8c55ed1ce931cdd3539855cde", "committedDate": "2020-09-25T13:57:42Z", "message": "Fix searcher double-release race condition\n\nThe incRef/release-on-zero pattern in the RefCountedItem didn't protect\nsufficently against double releases, because an already closed\nRefCountedItem could gain new refs and that would cause it to be closed\nmultiple times.\n\nA scenario where that can happen is a union or a join where the same\ntable is used more than one time.\n\nIf the table is small or the operation is fast, the close on the first\nuse of table A can happen before the second use of table A.\n\nThis fix here makes sure that a release happens only once, by discarding\nthe item and re-acquiring it if the refs reach zero.\n\nNote that this circumvents part of the motivation for the\nSharedShardContext - that is to re-use the same searchers across\noperations. We'd have to re-introduce a prepare/start split or similar\nto guarantee that all reference increments happen before the first close\ncan happen to ensure that searchers are truly shared.\n\nThis fixes flaky tests. An example that failed occassionally is:\n\n    ./gradlew :server:test -Dtests.seed=50DCF5AD232E645D -Dtests.class=io.crate.integrationtests.UnionIntegrationTest -Dtests.method=\"testUnionAllArrayAndObjectColumns\" -Dtests.locale=brx-IN -Dtests.timezone=America/Argentina/Rio_Gallegos -Dtests.iters=20 --fail-fast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDgyNDAy", "url": "https://github.com/crate/crate/pull/10599#pullrequestreview-496482402", "createdAt": "2020-09-25T14:36:45Z", "commit": {"oid": "3ebda4b77f030ba8c55ed1ce931cdd3539855cde"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDozNjo0NVrOHYGZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDozNjo0NVrOHYGZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAzMjYyOQ==", "bodyText": "do we need to clean it on close?", "url": "https://github.com/crate/crate/pull/10599#discussion_r495032629", "createdAt": "2020-09-25T14:36:45Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/common/collections/RefCountedItem.java", "diffHunk": "@@ -21,33 +21,56 @@\n \n package io.crate.common.collections;\n \n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.ArrayList;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n \n public class RefCountedItem<T> implements AutoCloseable {\n \n-    private final T item;\n-    private final Runnable onClose;\n-    private final AtomicInteger refs = new AtomicInteger(1);\n+    private final Function<String, T> itemFactory;\n+    private final Consumer<T> closeItem;\n+    private final ArrayList<String> sources = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ebda4b77f030ba8c55ed1ce931cdd3539855cde"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDg1ODUx", "url": "https://github.com/crate/crate/pull/10599#pullrequestreview-496485851", "createdAt": "2020-09-25T14:40:41Z", "commit": {"oid": "3ebda4b77f030ba8c55ed1ce931cdd3539855cde"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00eb2255f00b1432415cd936d0e9ec6bc101068", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/f00eb2255f00b1432415cd936d0e9ec6bc101068", "committedDate": "2020-09-25T15:31:45Z", "message": "Merge branch 'master' into j/acquire-searcher"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3789, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}