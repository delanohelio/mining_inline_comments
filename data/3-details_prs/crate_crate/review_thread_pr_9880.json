{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3Nzc1MzY2", "number": 9880, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMTowNVrOD1SwTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMjozOFrOD1SzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjA4Mzk3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMTowNVrOGKqHfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo0Mzo1N1rOGLK4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyODk4OQ==", "bodyText": "hm shall we really catch unsupported argument types here instead of just letting it throw an unsupported function exception? I wouldn't introduce (or take further) such a special pattern, we don't do that anywhere else afaik.", "url": "https://github.com/crate/crate/pull/9880#discussion_r413828989", "createdAt": "2020-04-23T14:11:05Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // with step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // generate_series(ts, ts, interval)\n+        for (var supportedType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                GenerateSeriesIntervals::new\n+            );\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                (signature, argTypes) -> {\n                     throw new IllegalArgumentException(\n-                        \"generate_series(start, stop) has type `\" + startType.getName() +\n+                        \"generate_series(start, stop) has type `\" + argTypes.get(0).getName() +\n                         \"` for start, but requires long/int values for start and stop, \" +\n                         \"or if used with timestamps, it requires a third argument for the step (interval)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aed97bff743ea8f74b7310cdea86f20ea12f4e3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg0NTE1NA==", "bodyText": "I am not sure about this case either. I did it to make this test pass \n  \n    \n      crate/sql/src/test/java/io/crate/expression/tablefunctions/GenerateSeriesTest.java\n    \n    \n         Line 155\n      in\n      c455f66\n    \n    \n    \n    \n\n        \n          \n           public void test_step_is_mandatory_for_timestamps() { \n        \n    \n  \n\n\nBefore doing that I tried out two approaches:\n\nI didn't register this function signature, then the generate_series(ts, ts) function call would result in generate_series(long, long). I am not sure whether this behaviour is acceptable? wdyt?\nI tried to forbid coercion on  generate_series(long, long) and  generate_series(int, int), then the generate_series(ts, ts) won't be resolved of course, but also function calls like generate_series(1, null) won't be resolved either.", "url": "https://github.com/crate/crate/pull/9880#discussion_r413845154", "createdAt": "2020-04-23T14:29:34Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // with step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // generate_series(ts, ts, interval)\n+        for (var supportedType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                GenerateSeriesIntervals::new\n+            );\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                (signature, argTypes) -> {\n                     throw new IllegalArgumentException(\n-                        \"generate_series(start, stop) has type `\" + startType.getName() +\n+                        \"generate_series(start, stop) has type `\" + argTypes.get(0).getName() +\n                         \"` for start, but requires long/int values for start and stop, \" +\n                         \"or if used with timestamps, it requires a third argument for the step (interval)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyODk4OQ=="}, "originalCommit": {"oid": "1aed97bff743ea8f74b7310cdea86f20ea12f4e3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg2NjA3Ng==", "bodyText": "Ah right, thx for the info.\nPitty, so we are missing a possibility to forbid coercion from a specific type. I wouldn't implement that now but will keep it in mind for maybe future adjustments.", "url": "https://github.com/crate/crate/pull/9880#discussion_r413866076", "createdAt": "2020-04-23T14:53:12Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // with step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // generate_series(ts, ts, interval)\n+        for (var supportedType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                GenerateSeriesIntervals::new\n+            );\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                (signature, argTypes) -> {\n                     throw new IllegalArgumentException(\n-                        \"generate_series(start, stop) has type `\" + startType.getName() +\n+                        \"generate_series(start, stop) has type `\" + argTypes.get(0).getName() +\n                         \"` for start, but requires long/int values for start and stop, \" +\n                         \"or if used with timestamps, it requires a third argument for the step (interval)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyODk4OQ=="}, "originalCommit": {"oid": "1aed97bff743ea8f74b7310cdea86f20ea12f4e3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4Nzc0NQ==", "bodyText": "Ah right, thx for the info.\nPitty, so we are missing a possibility to forbid coercion from a specific type. I wouldn't implement that now but will keep it in mind for maybe future adjustments.\n\nMaybe we can start a draft/meta issue for potential casting changes for 5.0 to gather examples like this.\nI think this is another case where the leniency causes trouble and we'd be better off making it more strict.", "url": "https://github.com/crate/crate/pull/9880#discussion_r413887745", "createdAt": "2020-04-23T15:18:04Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // with step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // generate_series(ts, ts, interval)\n+        for (var supportedType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                GenerateSeriesIntervals::new\n+            );\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                (signature, argTypes) -> {\n                     throw new IllegalArgumentException(\n-                        \"generate_series(start, stop) has type `\" + startType.getName() +\n+                        \"generate_series(start, stop) has type `\" + argTypes.get(0).getName() +\n                         \"` for start, but requires long/int values for start and stop, \" +\n                         \"or if used with timestamps, it requires a third argument for the step (interval)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyODk4OQ=="}, "originalCommit": {"oid": "1aed97bff743ea8f74b7310cdea86f20ea12f4e3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM2NTg3Nw==", "bodyText": "\ud83d\udc4d Yes, I can start with a draft for now and convert it into an issue after migrating few more functions.", "url": "https://github.com/crate/crate/pull/9880#discussion_r414365877", "createdAt": "2020-04-24T07:43:57Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // with step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                new RowType(List.of(DataTypes.INTEGER)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1, (x, y) -> x - y, Integer::sum, (x, y) -> x / y, Integer::compare)\n+        );\n+\n+        // generate_series(ts, ts, interval)\n+        for (var supportedType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                GenerateSeriesIntervals::new\n+            );\n+            module.register(\n+                Signature.table(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature(),\n+                    new RowType(List.of(supportedType)).getTypeSignature()),\n+                (signature, argTypes) -> {\n                     throw new IllegalArgumentException(\n-                        \"generate_series(start, stop) has type `\" + startType.getName() +\n+                        \"generate_series(start, stop) has type `\" + argTypes.get(0).getName() +\n                         \"` for start, but requires long/int values for start and stop, \" +\n                         \"or if used with timestamps, it requires a third argument for the step (interval)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgyODk4OQ=="}, "originalCommit": {"oid": "1aed97bff743ea8f74b7310cdea86f20ea12f4e3"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjA5MjkzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMjozOFrOGKqM1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNDoxMjozOFrOGKqM1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMDM1OQ==", "bodyText": "minor: I'd prefer having each argument in a dedicated line for improved readability (also related to the other registrations below).", "url": "https://github.com/crate/crate/pull/9880#discussion_r413830359", "createdAt": "2020-04-23T14:12:38Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/tablefunctions/GenerateSeries.java", "diffHunk": "@@ -71,69 +65,104 @@\n public final class GenerateSeries<T extends Number> extends TableFunctionImplementation<T> {\n \n     public static final FunctionName NAME = new FunctionName(PgCatalogSchemaInfo.NAME, \"generate_series\");\n-    private final FunctionInfo info;\n-    private final T defaultStep;\n-    private final BinaryOperator<T> minus;\n-    private final BinaryOperator<T> plus;\n-    private final BinaryOperator<T> divide;\n-    private final Comparator<T> comparator;\n-    private final RowType returnType;\n \n     public static void register(TableFunctionModule module) {\n-        Param startAndEnd = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP);\n-        Param stepType = Param.of(DataTypes.LONG, DataTypes.INTEGER, DataTypes.INTERVAL);\n-        FuncParams.Builder paramsBuilder = FuncParams\n-            .builder(startAndEnd, startAndEnd)\n-            .withVarArgs(stepType)\n-            .limitVarArgOccurrences(1);\n-        module.register(NAME, new BaseFunctionResolver(paramsBuilder.build()) {\n-            @Override\n-            public FunctionImplementation getForTypes(List<DataType> types) throws IllegalArgumentException {\n-                DataType<?> startType = types.get(0);\n-                DataType<?> stopType = types.get(1);\n-                assert startType.equals(stopType) : \"Start and stop type must be the same, got: \" + startType + \" and \" + stopType;\n-                if (types.size() == 2 && !startType.equals(DataTypes.INTEGER) && !startType.equals(DataTypes.LONG)) {\n+        // without step\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.LONG.getTypeSignature(),\n+                DataTypes.LONG.getTypeSignature(),\n+                new RowType(List.of(DataTypes.LONG)).getTypeSignature()),\n+            (signature, argTypes) -> new GenerateSeries<>(\n+                signature, argTypes, 1L, (x, y) -> x - y, Long::sum, (x, y) -> x / y, Long::compare)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0390c67e474834bd36db79fd822ece147df5e0"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1431, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}