{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTcxMjg4", "number": 9925, "title": "Use the new function registry for the subscript_obj function.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-06T09:09:59Z", "url": "https://github.com/crate/crate/pull/9925", "merged": true, "mergeCommit": {"oid": "d9a2c5dadb3ef2e45f9add61f30d4856f4ecddcc"}, "closed": true, "closedAt": "2020-05-06T11:00:59Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcek-25gH2gAyNDEzOTcxMjg4OmNkZWM3ZWUyMGQ4NWVlYTkxMDMxOTBlMGNlODJmMGE0Njg0OTY4YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcem742gFqTQwNjUxODQ5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/cdec7ee20d85eea9103190e0ce82f0a4684968aa", "committedDate": "2020-05-06T09:09:03Z", "message": "Use the new function registry for the subscript_obj function."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDk4Mjgz", "url": "https://github.com/crate/crate/pull/9925#pullrequestreview-406498283", "createdAt": "2020-05-06T10:50:04Z", "commit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTE4NDk5", "url": "https://github.com/crate/crate/pull/9925#pullrequestreview-406518499", "createdAt": "2020-05-06T11:22:56Z", "commit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMjo1NlrOGROfTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMjo1NlrOGROfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxNjM2Nw==", "bodyText": "There are no type variable constraints at the arguments or return types. what is this for?", "url": "https://github.com/crate/crate/pull/9925#discussion_r420716367", "createdAt": "2020-05-06T11:22:56Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptObjectFunction.java", "diffHunk": "@@ -26,51 +26,55 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n import io.crate.types.DataTypes;\n import io.crate.types.ObjectType;\n-import io.crate.types.StringType;\n \n import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+\n /**\n  * Scalar function to resolve elements inside a map.\n  */\n public class SubscriptObjectFunction extends Scalar<Object, Map<String, Object>> {\n \n     public static final String NAME = \"subscript_obj\";\n-    private static final FuncParams FUNCTION_PARAMS = FuncParams\n-        .builder(Param.of(ObjectType.untyped()), Param.of(StringType.INSTANCE))\n-        .withVarArgs(Param.of(StringType.INSTANCE))\n-        .build();\n \n-    private FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature\n+        .scalar(\n+            NAME,\n+            ObjectType.untyped().getTypeSignature(),\n+            DataTypes.STRING.getTypeSignature(),\n+            DataTypes.UNDEFINED.getTypeSignature())\n+        .withVariableArity()\n+        .withTypeVariableConstraints(typeVariable(\"text\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3342, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}