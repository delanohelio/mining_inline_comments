{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDAxMTEw", "number": 9554, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0ODo0N1rODbsvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0ODo0N1rODbsvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcxMDk0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo0ODo0N1rOFjValg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNzoxMFrOFjV8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTM1MA==", "bodyText": "Isn't this the part for which we added a breaking changes entry in master?", "url": "https://github.com/crate/crate/pull/9554#discussion_r372595350", "createdAt": "2020-01-29T19:48:47Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -105,15 +105,21 @@ public static PGType get(DataType type) {\n             DataType<?> innerType = ((CollectionType) type).innerType();\n             if (innerType instanceof CollectionType) {\n                 // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays with sub-arrays of different length\n+                // postgres binary format doesn't support multidimensional arrays\n+                // with sub-arrays of different length\n                 // (something like [ [1, 2], [3] ] is not supported)\n                 return JsonType.INSTANCE;\n+            } else if (innerType.id() == ObjectType.ID) {\n+                return PGArray.JSON_ARRAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d568694fbc30fd58ec4ad5114729a3ff6577d06"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMTQ4OQ==", "bodyText": "no, it is needed to resolve a pg type that corresponds to crate object or object array data type such as we implemented hashCode and equals in ObjectType and cannot use, for example, an instance of object data type with inner types to look up a pg type mapping in CRATE_TO_PG_TYPES.\nThese commits do not contain any breaking changes. The inner cast function signatures were changed, but it is still possible to resolve cast functions for the former signatures.", "url": "https://github.com/crate/crate/pull/9554#discussion_r372601489", "createdAt": "2020-01-29T20:01:38Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -105,15 +105,21 @@ public static PGType get(DataType type) {\n             DataType<?> innerType = ((CollectionType) type).innerType();\n             if (innerType instanceof CollectionType) {\n                 // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays with sub-arrays of different length\n+                // postgres binary format doesn't support multidimensional arrays\n+                // with sub-arrays of different length\n                 // (something like [ [1, 2], [3] ] is not supported)\n                 return JsonType.INSTANCE;\n+            } else if (innerType.id() == ObjectType.ID) {\n+                return PGArray.JSON_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTM1MA=="}, "originalCommit": {"oid": "8d568694fbc30fd58ec4ad5114729a3ff6577d06"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwNDAyOA==", "bodyText": "ah, but this line is wrong, it should be mapped to PGArray.JSON \n  \n    \n      crate/sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java\n    \n    \n         Line 69\n      in\n      8d56869\n    \n    \n    \n    \n\n        \n          \n           .put(new ArrayType(ObjectType.untyped()), JsonType.INSTANCE)", "url": "https://github.com/crate/crate/pull/9554#discussion_r372604028", "createdAt": "2020-01-29T20:07:10Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -105,15 +105,21 @@ public static PGType get(DataType type) {\n             DataType<?> innerType = ((CollectionType) type).innerType();\n             if (innerType instanceof CollectionType) {\n                 // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays with sub-arrays of different length\n+                // postgres binary format doesn't support multidimensional arrays\n+                // with sub-arrays of different length\n                 // (something like [ [1, 2], [3] ] is not supported)\n                 return JsonType.INSTANCE;\n+            } else if (innerType.id() == ObjectType.ID) {\n+                return PGArray.JSON_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NTM1MA=="}, "originalCommit": {"oid": "8d568694fbc30fd58ec4ad5114729a3ff6577d06"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1138, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}