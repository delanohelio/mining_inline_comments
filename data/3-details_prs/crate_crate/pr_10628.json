{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5Mjg0NTEw", "number": 10628, "title": "Backport of IndexServiceTest", "bodyText": "Summary of the changes / Why this improves CrateDB\nBackport of IndexServiceTest and depending elastic/elasticsearch@3c352a8\nSee individual commits.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-10-07T14:15:32Z", "url": "https://github.com/crate/crate/pull/10628", "merged": true, "mergeCommit": {"oid": "a3604df178374eb2fb6f28bc3b2ec32fe8c39327"}, "closed": true, "closedAt": "2020-10-13T16:12:41Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQehMfABqjM4NTQ1NDE3OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSKYl3gBqjM4NzIwNTk3MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8eeeabe780072102fa838603b4fa35530c4bf605", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8eeeabe780072102fa838603b4fa35530c4bf605", "committedDate": "2020-10-08T09:47:36Z", "message": "wip"}, "afterCommit": {"oid": "e708052d437125359f454586ff71c6ad042ca4d4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e708052d437125359f454586ff71c6ad042ca4d4", "committedDate": "2020-10-08T09:53:14Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "767335794884f3b46cc57e97faad7192bf98eeef", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/767335794884f3b46cc57e97faad7192bf98eeef", "committedDate": "2020-10-08T14:25:56Z", "message": "fix"}, "afterCommit": {"oid": "896a0ed779d2b46dcdf54f8c151a07036d3fd90b", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/896a0ed779d2b46dcdf54f8c151a07036d3fd90b", "committedDate": "2020-10-08T14:40:51Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7db6881ba75937bcdc3f1561e3d595232ab288de", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7db6881ba75937bcdc3f1561e3d595232ab288de", "committedDate": "2020-10-08T15:07:53Z", "message": "fix"}, "afterCommit": {"oid": "8adc61231bb65ddf630b747dd1e6b9f0d7d50caf", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8adc61231bb65ddf630b747dd1e6b9f0d7d50caf", "committedDate": "2020-10-08T15:15:38Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94bfaf933c1bf445b5e3513c5ba1d16a189a2016", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/94bfaf933c1bf445b5e3513c5ba1d16a189a2016", "committedDate": "2020-10-08T19:00:07Z", "message": "fix testAsyncTranslogTrimTaskOnClosedIndex"}, "afterCommit": {"oid": "05d1126f86ca0204b0a6bc1b7be80e3bc2564f39", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/05d1126f86ca0204b0a6bc1b7be80e3bc2564f39", "committedDate": "2020-10-09T09:57:04Z", "message": "Remove last flaky tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05d1126f86ca0204b0a6bc1b7be80e3bc2564f39", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/05d1126f86ca0204b0a6bc1b7be80e3bc2564f39", "committedDate": "2020-10-09T09:57:04Z", "message": "Remove last flaky tests"}, "afterCommit": {"oid": "5a46d6679568c23bf1a7becd3e414183e86fe74d", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5a46d6679568c23bf1a7becd3e414183e86fe74d", "committedDate": "2020-10-09T10:01:18Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a46d6679568c23bf1a7becd3e414183e86fe74d", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5a46d6679568c23bf1a7becd3e414183e86fe74d", "committedDate": "2020-10-09T10:01:18Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "8b28695dd039c739c63ca398d46bffe9a394cbfe", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8b28695dd039c739c63ca398d46bffe9a394cbfe", "committedDate": "2020-10-09T10:15:11Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b28695dd039c739c63ca398d46bffe9a394cbfe", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8b28695dd039c739c63ca398d46bffe9a394cbfe", "committedDate": "2020-10-09T10:15:11Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35", "committedDate": "2020-10-09T10:25:14Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NTUzNTMz", "url": "https://github.com/crate/crate/pull/10628#pullrequestreview-505553533", "createdAt": "2020-10-09T10:32:49Z", "commit": {"oid": "af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDozMjo0OVrOHfEQ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDozMjo0OVrOHfEQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNzc0Nw==", "bodyText": "Since translog.sync_interval is dynamic now we need to test against a different non dynamic setting.", "url": "https://github.com/crate/crate/pull/10628#discussion_r502337747", "createdAt": "2020-10-09T10:32:49Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/io/crate/integrationtests/TableSettingsTest.java", "diffHunk": "@@ -88,8 +88,8 @@ public void testSelectSettingsColumn() throws Exception {\n \n     @Test\n     public void testSetNonDynamicTableSetting() {\n-        assertThrows(() -> execute(\"alter table settings_table set (\\\"translog.sync_interval\\\"='10s')\"),\n-                     isSQLError(containsString(\"Can't update non dynamic settings [[index.translog.sync_interval]] for open indices\"),\n+        assertThrows(() -> execute(\"alter table settings_table set (\\\"soft_deletes.enabled\\\"='true')\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/af97277ec2b7a6e712dcdf0f5dbb8ef8fa953e35", "committedDate": "2020-10-09T10:25:14Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "e5e974e06661649d3017ffe3cb8440a717c17f10", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e5e974e06661649d3017ffe3cb8440a717c17f10", "committedDate": "2020-10-09T10:39:14Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5e974e06661649d3017ffe3cb8440a717c17f10", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e5e974e06661649d3017ffe3cb8440a717c17f10", "committedDate": "2020-10-09T10:39:14Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "55e6dea3402aa38096e77fb597f3ecd0010d4bdb", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/55e6dea3402aa38096e77fb597f3ecd0010d4bdb", "committedDate": "2020-10-09T10:40:43Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55e6dea3402aa38096e77fb597f3ecd0010d4bdb", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/55e6dea3402aa38096e77fb597f3ecd0010d4bdb", "committedDate": "2020-10-09T10:40:43Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "3f4b73e7fdddec5930a981448a05269551d12759", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/3f4b73e7fdddec5930a981448a05269551d12759", "committedDate": "2020-10-09T12:55:16Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f4b73e7fdddec5930a981448a05269551d12759", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/3f4b73e7fdddec5930a981448a05269551d12759", "committedDate": "2020-10-09T12:55:16Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "1eaad56ac78b9482ff6ed770a55371b02f1c24de", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/1eaad56ac78b9482ff6ed770a55371b02f1c24de", "committedDate": "2020-10-09T15:09:41Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a23d55ea1396b0f98542501ba0595163b3033730", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a23d55ea1396b0f98542501ba0595163b3033730", "committedDate": "2020-10-12T12:43:17Z", "message": "fix testRefreshActuallyWorks"}, "afterCommit": {"oid": "305d61096e4fca7ea770832f08302c508f1a20d8", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/305d61096e4fca7ea770832f08302c508f1a20d8", "committedDate": "2020-10-12T12:59:09Z", "message": "fix testRefreshActuallyWorks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0cbe4ed435cd833db791500d90d00c3d705e88c", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/d0cbe4ed435cd833db791500d90d00c3d705e88c", "committedDate": "2020-10-12T13:14:55Z", "message": "fix testUpdateSyncIntervalDynamically"}, "afterCommit": {"oid": "a12d98c9e96e979726ac11560691037087938cf3", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a12d98c9e96e979726ac11560691037087938cf3", "committedDate": "2020-10-12T14:02:49Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a12d98c9e96e979726ac11560691037087938cf3", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a12d98c9e96e979726ac11560691037087938cf3", "committedDate": "2020-10-12T14:02:49Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "8322e52ac7a26bdbe90e5c9bee9a3428c6c86794", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8322e52ac7a26bdbe90e5c9bee9a3428c6c86794", "committedDate": "2020-10-12T14:17:23Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f40c991a8b1e5653b1475171e39b90aacf8bbfa", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8f40c991a8b1e5653b1475171e39b90aacf8bbfa", "committedDate": "2020-10-12T14:51:49Z", "message": "simplify"}, "afterCommit": {"oid": "13ca785d4e7114b7f93573a95b53f1e2dc48cb66", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/13ca785d4e7114b7f93573a95b53f1e2dc48cb66", "committedDate": "2020-10-12T15:07:13Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzA4MTM1", "url": "https://github.com/crate/crate/pull/10628#pullrequestreview-506708135", "createdAt": "2020-10-12T15:13:50Z", "commit": {"oid": "13ca785d4e7114b7f93573a95b53f1e2dc48cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxMzo1MFrOHgC4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNToxMzo1MFrOHgC4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2MzYwMw==", "bodyText": "Last remaining flaky test. The flush operation does not always trigger the translog to be trimmed because the generation is not increased. I hope this is a test setup problem and not a issue in the engine. I was thinking to fix that in a follow up.", "url": "https://github.com/crate/crate/pull/10628#discussion_r503363603", "createdAt": "2020-10-12T15:13:50Z", "author": {"login": "mkleen"}, "path": "server/src/test/java/org/elasticsearch/index/IndexServiceTests.java", "diffHunk": "@@ -0,0 +1,480 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import io.crate.common.unit.TimeValue;\n+import io.crate.integrationtests.SQLHttpIntegrationTest;\n+import org.apache.lucene.search.MatchAllDocsQuery;\n+import org.apache.lucene.search.TopDocs;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.engine.EngineTestCase;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.IndexShardTestCase;\n+import org.elasticsearch.index.translog.Translog;\n+import org.elasticsearch.indices.IndicesService;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.junit.Ignore;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n+import static io.crate.testing.Asserts.assertThrows;\n+import static io.crate.testing.SQLErrorMatcher.isSQLError;\n+import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;\n+import static org.elasticsearch.index.shard.IndexShardTestCase.flushShard;\n+import static org.elasticsearch.index.shard.IndexShardTestCase.getEngine;\n+import static org.elasticsearch.test.InternalSettingsPlugin.TRANSLOG_RETENTION_CHECK_INTERVAL_SETTING;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+@ESIntegTestCase.ClusterScope(numDataNodes = 1, supportsDedicatedMasters = false)\n+public class IndexServiceTests extends SQLHttpIntegrationTest {\n+\n+    @Override\n+    protected Collection<Class<? extends Plugin>> nodePlugins() {\n+        var plugins = new ArrayList<>(super.nodePlugins());\n+        plugins.add(InternalSettingsPlugin.class);\n+        return plugins;\n+    }\n+\n+    public void testBaseAsyncTask() throws Exception {\n+        execute(\"create table test (x int) clustered into 1 shards\");\n+        IndexService indexService = getIndexService(\"test\");\n+\n+        AtomicReference<CountDownLatch> latch = new AtomicReference<>(new CountDownLatch(1));\n+        AtomicReference<CountDownLatch> latch2 = new AtomicReference<>(new CountDownLatch(1));\n+        final AtomicInteger count = new AtomicInteger();\n+        IndexService.BaseAsyncTask task = new IndexService.BaseAsyncTask(indexService, TimeValue.timeValueMillis(1)) {\n+            @Override\n+            protected void runInternal() {\n+                final CountDownLatch l1 = latch.get();\n+                final CountDownLatch l2 = latch2.get();\n+                count.incrementAndGet();\n+                assertTrue(\"generic threadpool is configured\", Thread.currentThread().getName().contains(\"[generic]\"));\n+                l1.countDown();\n+                try {\n+                    l2.await();\n+                } catch (InterruptedException e) {\n+                    fail(\"interrupted\");\n+                }\n+                if (randomBoolean()) { // task can throw exceptions!!\n+                    if (randomBoolean()) {\n+                        throw new RuntimeException(\"foo\");\n+                    } else {\n+                        throw new RuntimeException(\"bar\");\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            protected String getThreadPool() {\n+                return ThreadPool.Names.GENERIC;\n+            }\n+        };\n+\n+        latch.get().await();\n+        latch.set(new CountDownLatch(1));\n+        assertEquals(1, count.get());\n+        // here we need to swap first before we let it go otherwise threads might be very fast and run that task twice due to\n+        // random exception and the schedule interval is 1ms\n+        latch2.getAndSet(new CountDownLatch(1)).countDown();\n+        latch.get().await();\n+        assertEquals(2, count.get());\n+        task.close();\n+        latch2.get().countDown();\n+        assertEquals(2, count.get());\n+\n+        task = new IndexService.BaseAsyncTask(indexService, TimeValue.timeValueMillis(1000000)) {\n+            @Override\n+            protected void runInternal() {\n+\n+            }\n+        };\n+        assertTrue(task.mustReschedule());\n+\n+        // now close the index\n+        execute(\"alter table test close\");\n+        final Index index = indexService.index();\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+        final IndexService closedIndexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(indexService, closedIndexService);\n+        assertFalse(task.mustReschedule());\n+        assertFalse(task.isClosed());\n+        assertEquals(1000000, task.getInterval().millis());\n+\n+        assertNotSame(indexService, closedIndexService);\n+        assertFalse(task.mustReschedule());\n+        assertFalse(task.isClosed());\n+        assertEquals(1000000, task.getInterval().millis());\n+\n+        // now reopen the index\n+        execute(\"alter table test open\");\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+        indexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(closedIndexService, indexService);\n+\n+        task = new IndexService.BaseAsyncTask(indexService, TimeValue.timeValueMillis(100000)) {\n+            @Override\n+            protected void runInternal() {\n+\n+            }\n+        };\n+        assertTrue(task.mustReschedule());\n+        assertFalse(task.isClosed());\n+        assertTrue(task.isScheduled());\n+\n+        indexService.close(\"simon says\", false);\n+        assertFalse(\"no shards left\", task.mustReschedule());\n+        assertTrue(task.isScheduled());\n+        task.close();\n+        assertFalse(task.isScheduled());\n+    }\n+\n+    public void testRefreshTaskIsUpdated() throws Exception {\n+        execute(\"create table test (x int) clustered into 1 shards\");\n+        IndexService indexService = getIndexService(\"test\");\n+        var indexName = indexService.index().getName();\n+        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n+        assertEquals(1000, refreshTask.getInterval().millis());\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+\n+        // now disable\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n+        assertNotSame(refreshTask, indexService.getRefreshTask());\n+        assertTrue(refreshTask.isClosed());\n+        assertFalse(refreshTask.isScheduled());\n+\n+        // set it to 100ms\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(),  \"100ms\")).get();\n+        assertNotSame(refreshTask, indexService.getRefreshTask());\n+        assertTrue(refreshTask.isClosed());\n+\n+        refreshTask = indexService.getRefreshTask();\n+        assertTrue(refreshTask.mustReschedule());\n+        assertTrue(refreshTask.isScheduled());\n+        assertEquals(100, refreshTask.getInterval().millis());\n+\n+        // set it to 200ms\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n+        assertNotSame(refreshTask, indexService.getRefreshTask());\n+        assertTrue(refreshTask.isClosed());\n+\n+        refreshTask = indexService.getRefreshTask();\n+        assertTrue(refreshTask.mustReschedule());\n+        assertTrue(refreshTask.isScheduled());\n+        assertEquals(200, refreshTask.getInterval().millis());\n+\n+        // set it to 200ms again\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"200ms\")).get();\n+        assertSame(refreshTask, indexService.getRefreshTask());\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+        assertTrue(refreshTask.isScheduled());\n+        assertFalse(refreshTask.isClosed());\n+        assertEquals(200, refreshTask.getInterval().millis());\n+\n+        // now close the index\n+        execute(\"alter table test close\");\n+        final Index index = indexService.index();\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+\n+        final IndexService closedIndexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(indexService, closedIndexService);\n+        assertNotSame(refreshTask, closedIndexService.getRefreshTask());\n+        assertFalse(closedIndexService.getRefreshTask().mustReschedule());\n+        assertFalse(closedIndexService.getRefreshTask().isClosed());\n+        assertEquals(200, closedIndexService.getRefreshTask().getInterval().millis());\n+\n+        // now reopen the index\n+        execute(\"alter table test open\");\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+        indexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(closedIndexService, indexService);\n+        refreshTask = indexService.getRefreshTask();\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+        assertTrue(refreshTask.isScheduled());\n+        assertFalse(refreshTask.isClosed());\n+\n+        indexService.close(\"simon says\", false);\n+        assertFalse(refreshTask.isScheduled());\n+        assertTrue(refreshTask.isClosed());\n+    }\n+\n+    public void testFsyncTaskIsRunning() throws Exception {\n+        execute(\"create table test(x int) clustered into 1 shards with (\\\"translog.durability\\\" = 'ASYNC')\");\n+        IndexService indexService = getIndexService(\"test\");\n+        IndexService.AsyncTranslogFSync fsyncTask = indexService.getFsyncTask();\n+        assertNotNull(fsyncTask);\n+        assertEquals(5000, fsyncTask.getInterval().millis());\n+        assertTrue(fsyncTask.mustReschedule());\n+        assertTrue(fsyncTask.isScheduled());\n+\n+        // now close the index\n+        execute(\"alter table test close\");\n+        final Index index = indexService.index();\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+\n+        final IndexService closedIndexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(indexService, closedIndexService);\n+        assertNotSame(fsyncTask, closedIndexService.getFsyncTask());\n+        assertFalse(closedIndexService.getFsyncTask().mustReschedule());\n+        assertFalse(closedIndexService.getFsyncTask().isClosed());\n+        assertEquals(5000, closedIndexService.getFsyncTask().getInterval().millis());\n+\n+        // now reopen the index\n+        execute(\"alter table test open\");\n+        assertBusy(() -> assertTrue(\"Index not found: \" + index.getName(), getIndicesService().hasIndex(index)));\n+        indexService = getIndicesService().indexServiceSafe(index);\n+        assertNotSame(closedIndexService, indexService);\n+        fsyncTask = indexService.getFsyncTask();\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+        assertTrue(fsyncTask.isScheduled());\n+        assertFalse(fsyncTask.isClosed());\n+\n+        indexService.close(\"simon says\", false);\n+        assertFalse(fsyncTask.isScheduled());\n+        assertTrue(fsyncTask.isClosed());\n+\n+        execute(\"create table test1 (x int, data text)\");\n+        indexService = getIndexService(\"test1\");\n+        assertNull(indexService.getFsyncTask());\n+    }\n+\n+    public void testRefreshActuallyWorks() throws Exception {\n+        execute(\"create table test (x int, data text) clustered into 1 shards\");\n+        var indexService = getIndexService(\"test\");\n+        var indexName = indexService.index().getName();\n+        ensureGreen(indexName);\n+        IndexService.AsyncRefreshTask refreshTask = indexService.getRefreshTask();\n+        assertEquals(1000, refreshTask.getInterval().millis());\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+        IndexShard shard = indexService.getShard(0);\n+        execute(\"insert into test (x, data) values (1, 'foo')\");\n+        // now disable the refresh\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), -1)).get();\n+        // when we update we reschedule the existing task AND fire off an async refresh to make sure we make everything visible\n+        // before that this is why we need to wait for the refresh task to be unscheduled and the first doc to be visible\n+        assertTrue(refreshTask.isClosed());\n+        refreshTask = indexService.getRefreshTask();\n+        assertBusy(() -> {\n+            // this one either becomes visible due to a concurrently running scheduled refresh OR due to the force refresh\n+            // we are running on updateMetadata if the interval changes\n+            try (Engine.Searcher searcher = shard.acquireSearcher(indexName)) {\n+                TopDocs search = searcher.search(new MatchAllDocsQuery(), 10);\n+                assertEquals(1, search.totalHits.value);\n+            }\n+        });\n+        assertFalse(refreshTask.isClosed());\n+        // refresh every millisecond\n+        execute(\"insert into test (x, data) values (2, 'foo')\");\n+        client().admin().indices().prepareUpdateSettings(indexName)\n+            .setSettings(Settings.builder().put(IndexSettings.INDEX_REFRESH_INTERVAL_SETTING.getKey(), \"1ms\")).get();\n+        assertTrue(refreshTask.isClosed());\n+\n+        assertBusy(() -> {\n+            // this one becomes visible due to the force refresh we are running on updateMetadata if the interval changes\n+            try (Engine.Searcher searcher = shard.acquireSearcher(indexName)) {\n+                TopDocs search = searcher.search(new MatchAllDocsQuery(), 10);\n+                assertEquals(2, search.totalHits.value);\n+            }\n+        });\n+        execute(\"insert into test (x, data) values (3, 'foo')\");\n+\n+        assertBusy(() -> {\n+            // this one becomes visible due to the scheduled refresh\n+            try (Engine.Searcher searcher = shard.acquireSearcher(\"test\")) {\n+                TopDocs search = searcher.search(new MatchAllDocsQuery(), 10);\n+                assertEquals(3, search.totalHits.value);\n+            }\n+        });\n+    }\n+\n+    public void testAsyncFsyncActuallyWorks() throws Exception {\n+        execute(\"create table test(x int, data string) clustered into 1 shards with (\\\"translog.sync_interval\\\" = '100ms', \" +\n+                \"\\\"translog.durability\\\" = 'ASYNC')\");\n+        IndexService indexService = getIndexService(\"test\");\n+        var indexName = indexService.index().getName();\n+        ensureGreen(indexName);\n+        assertTrue(indexService.getRefreshTask().mustReschedule());\n+        execute(\"insert into test (x, data) values (1, 'foo')\");\n+        IndexShard shard = indexService.getShard(0);\n+        assertBusy(() -> assertFalse(shard.isSyncNeeded()));\n+    }\n+\n+    public void testRescheduleAsyncFsync() throws Exception {\n+        execute(\"create table test(x int, data string) clustered into 1 shards with (\\\"translog.sync_interval\\\" = '100ms', \\\"translog.durability\\\" = 'REQUEST')\");\n+        IndexService indexService = getIndexService(\"test\");\n+        var indexName = indexService.index().getName();\n+\n+        ensureGreen(indexName);\n+        assertNull(indexService.getFsyncTask());\n+\n+        execute(\"alter table test set (\\\"translog.durability\\\" = 'ASYNC')\");\n+\n+        assertNotNull(indexService.getFsyncTask());\n+        assertTrue(indexService.getFsyncTask().mustReschedule());\n+        execute(\"insert into test (x, data) values (1, 'foo')\");\n+        assertNotNull(indexService.getFsyncTask());\n+        final IndexShard shard = indexService.getShard(0);\n+        assertBusy(() -> assertFalse(shard.isSyncNeeded()));\n+\n+        execute(\"alter table test set (\\\"translog.durability\\\" = 'REQUEST')\");\n+        assertNull(indexService.getFsyncTask());\n+\n+        execute(\"alter table test set (\\\"translog.durability\\\" = 'ASYNC')\");\n+        assertNotNull(indexService.getFsyncTask());\n+    }\n+\n+    @Ignore(\"Flaky\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ca785d4e7114b7f93573a95b53f1e2dc48cb66"}, "originalPosition": 360}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTQyMjc3", "url": "https://github.com/crate/crate/pull/10628#pullrequestreview-507142277", "createdAt": "2020-10-13T07:29:17Z", "commit": {"oid": "13ca785d4e7114b7f93573a95b53f1e2dc48cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyOToxN1rOHgZAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyOToxN1rOHgZAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNjIyMg==", "bodyText": "Isn't the rescheduleFsyncTask method now unused?", "url": "https://github.com/crate/crate/pull/10628#discussion_r503726222", "createdAt": "2020-10-13T07:29:17Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/index/IndexService.java", "diffHunk": "@@ -566,10 +564,23 @@ public boolean isForceExecution() {\n                 });\n                 rescheduleRefreshTasks();\n             }\n-            final Translog.Durability durability = indexSettings.getTranslogDurability();\n-            if (durability != oldTranslogDurability) {\n-                rescheduleFsyncTask(durability);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ca785d4e7114b7f93573a95b53f1e2dc48cb66"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5075ab2cc45bf1b2fac951e0866dd069b8954124", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5075ab2cc45bf1b2fac951e0866dd069b8954124", "committedDate": "2020-10-13T07:49:23Z", "message": "Remove uneeded rescheduleFsyncTask"}, "afterCommit": {"oid": "ab40c91fdeb7116cf586d845c0fb05d01c90c345", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/ab40c91fdeb7116cf586d845c0fb05d01c90c345", "committedDate": "2020-10-13T08:41:48Z", "message": "Remove uneeded rescheduleFsyncTask"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68625c76166bb4bf1acbcf7b9f3e687b0fb2a109", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/68625c76166bb4bf1acbcf7b9f3e687b0fb2a109", "committedDate": "2020-10-13T11:28:34Z", "message": "Fix"}, "afterCommit": {"oid": "58373616fea60faa546a1331fc4bc791e13cedac", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/58373616fea60faa546a1331fc4bc791e13cedac", "committedDate": "2020-10-13T11:51:31Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58373616fea60faa546a1331fc4bc791e13cedac", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/58373616fea60faa546a1331fc4bc791e13cedac", "committedDate": "2020-10-13T11:51:31Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "ffb7da1ef3dbf84b7183570c255decdc325d7c0b", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/ffb7da1ef3dbf84b7183570c255decdc325d7c0b", "committedDate": "2020-10-13T13:38:56Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NTMwOTc1", "url": "https://github.com/crate/crate/pull/10628#pullrequestreview-507530975", "createdAt": "2020-10-13T14:58:56Z", "commit": {"oid": "ffb7da1ef3dbf84b7183570c255decdc325d7c0b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo1ODo1NlrOHgrJIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo1ODo1NlrOHgrJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAyMzMyOA==", "bodyText": "Any reason to use the SQLHttpIntegrationTest base class instead of SQLTransportIntegrationTest ?", "url": "https://github.com/crate/crate/pull/10628#discussion_r504023328", "createdAt": "2020-10-13T14:58:56Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/org/elasticsearch/index/IndexServiceTests.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.index;\n+\n+import io.crate.common.unit.TimeValue;\n+import io.crate.integrationtests.SQLHttpIntegrationTest;\n+import org.apache.lucene.search.MatchAllDocsQuery;\n+import org.apache.lucene.search.TopDocs;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.engine.EngineTestCase;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.IndexShardTestCase;\n+import org.elasticsearch.index.translog.Translog;\n+import org.elasticsearch.indices.IndicesService;\n+import org.elasticsearch.plugins.Plugin;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.InternalSettingsPlugin;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n+import static io.crate.testing.Asserts.assertThrows;\n+import static io.crate.testing.SQLErrorMatcher.isSQLError;\n+import static io.netty.handler.codec.http.HttpResponseStatus.BAD_REQUEST;\n+import static org.elasticsearch.index.shard.IndexShardTestCase.flushShard;\n+import static org.elasticsearch.index.shard.IndexShardTestCase.getEngine;\n+import static org.elasticsearch.test.InternalSettingsPlugin.TRANSLOG_RETENTION_CHECK_INTERVAL_SETTING;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+\n+@ESIntegTestCase.ClusterScope(numDataNodes = 1, supportsDedicatedMasters = false)\n+public class IndexServiceTests extends SQLHttpIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffb7da1ef3dbf84b7183570c255decdc325d7c0b"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea425734ff87c9b4430812ef130cac61b94aba1f", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/ea425734ff87c9b4430812ef130cac61b94aba1f", "committedDate": "2020-10-13T15:16:18Z", "message": "bp: Make setting index.translog.sync_interval be dynamic\n\nhttps://github.com/elastic/elasticsearch/commit/3c352a85963f47a8272025e1969982bbe64c6a87"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffb7da1ef3dbf84b7183570c255decdc325d7c0b", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/ffb7da1ef3dbf84b7183570c255decdc325d7c0b", "committedDate": "2020-10-13T13:38:56Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "4bace5917dc413b70550fecb009098d00cab74a9", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/4bace5917dc413b70550fecb009098d00cab74a9", "committedDate": "2020-10-13T15:16:18Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bace5917dc413b70550fecb009098d00cab74a9", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/4bace5917dc413b70550fecb009098d00cab74a9", "committedDate": "2020-10-13T15:16:18Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "fd7cd252a6a306fcfa85f333b812d91287b32d99", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/fd7cd252a6a306fcfa85f333b812d91287b32d99", "committedDate": "2020-10-13T15:17:54Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edae9805a636e72c8774542e82d760db1704bbaa", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/edae9805a636e72c8774542e82d760db1704bbaa", "committedDate": "2020-10-13T15:30:23Z", "message": "Add IndexServiceTest back to es test suite"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd7cd252a6a306fcfa85f333b812d91287b32d99", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/fd7cd252a6a306fcfa85f333b812d91287b32d99", "committedDate": "2020-10-13T15:17:54Z", "message": "Add IndexServiceTest back to es test suite"}, "afterCommit": {"oid": "edae9805a636e72c8774542e82d760db1704bbaa", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/edae9805a636e72c8774542e82d760db1704bbaa", "committedDate": "2020-10-13T15:30:23Z", "message": "Add IndexServiceTest back to es test suite"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3696, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}