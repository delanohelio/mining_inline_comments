{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNzczOTc2", "number": 10566, "title": "Port over ES OpenCloseIndexIT tests.", "bodyText": "Summary of the changes / Why this improves CrateDB\nES state: 704317da71c\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-09-22T08:24:34Z", "url": "https://github.com/crate/crate/pull/10566", "merged": true, "mergeCommit": {"oid": "e1a1dc6701553c0256c36eb1f25ed05e11336eaa"}, "closed": true, "closedAt": "2020-09-22T10:23:11Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLUB19gFqTQ5MzI0NzA5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLUz_7AH2gAyNDkwNzczOTc2OjQ3MDE3ODA0NDE1ZGU0NDU0YWNiNzdiM2JjNmVjNGE5NDNkNjhjYjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzMjQ3MDk3", "url": "https://github.com/crate/crate/pull/10566#pullrequestreview-493247097", "createdAt": "2020-09-22T08:47:22Z", "commit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo0NzoyM1rOHVwJ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo1MDowMlrOHVwQiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MTEzMQ==", "bodyText": "Is the UseJdbc(1) required here?", "url": "https://github.com/crate/crate/pull/10566#discussion_r492571131", "createdAt": "2020-09-22T08:47:23Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjQ3MA==", "bodyText": "Might be worth changing this to a single bulk insert with between(10, 20) to speed up the test case a bit.", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572470", "createdAt": "2020-09-22T08:49:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjY4Mw==", "bodyText": "same here", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572683", "createdAt": "2020-09-22T08:49:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read\", \"blocks.write\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+\n+                // Closing an index is not blocked\n+                execute(\"alter table test close\");\n+                assertThat(isClosed(\"test\"), is(true));\n+\n+                // Opening an index is not blocked\n+                execute(\"alter table test open\");\n+                ensureYellow();\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_close_is_blocked_with_read_only_and_metadata_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MjgwOQ==", "bodyText": "and here", "url": "https://github.com/crate/crate/pull/10566#discussion_r492572809", "createdAt": "2020-09-22T08:50:02Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/OpenCloseTableIntegrationTest.java", "diffHunk": "@@ -40,6 +45,160 @@ public void prepareClosedTable() {\n         execute(\"alter table t close\");\n     }\n \n+    @UseJdbc(1)\n+    @Test\n+    public void test_open_missing_table() {\n+        assertThrows(\n+            () -> execute(\"alter table test open\"),\n+            isSQLError(\n+                is(\"Relation 'test' unknown\"),\n+                UNDEFINED_TABLE,\n+                BAD_REQUEST,\n+                4007\n+            )\n+        );\n+    }\n+\n+    @Test\n+    public void test_open_already_opened_index() {\n+        execute(\"alter table t open\");\n+        execute(\"alter table t open\");\n+    }\n+\n+    @Test\n+    public void test_simple_close_open_with_records() {\n+        execute(\"alter table t open\");\n+        execute(\"insert into t values (1), (2)\");\n+        refresh();\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+\n+        execute(\"alter table t close\");\n+        execute(\"alter table t open\");\n+        ensureGreen();\n+\n+        execute(\"select * from t\");\n+        assertThat(response.rowCount(), is(2L));\n+    }\n+\n+    @Test\n+    public void test_get_translog_stats_after_close_and_open_table() throws Exception {\n+        execute(\"create table test (x int ) with (number_of_replicas = 0) \");\n+        long numberOfDocs = randomIntBetween(0, 50);\n+        long uncommittedOps = 0;\n+        for (long i = 0; i < numberOfDocs; i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+            if (rarely()) {\n+                execute(\"optimize table test with (flush = true)\");\n+                uncommittedOps = 0;\n+            } else {\n+                uncommittedOps += 1;\n+            }\n+        }\n+        final long uncommittedTranslogOps = uncommittedOps;\n+        assertBusy(() -> {\n+            execute(\n+                \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+                \"from sys.shards \" +\n+                \"where table_name = 'test' and primary = true \" +\n+                \"group by table_name, primary\");\n+            assertThat(response.rowCount(), greaterThan(0L));\n+            assertThat(response.rows()[0][0], is(numberOfDocs));\n+            assertThat(response.rows()[0][1], is(uncommittedTranslogOps));\n+        });\n+\n+        execute(\"alter table test close\");\n+        execute(\"alter table test open\");\n+        ensureYellow();\n+\n+        execute(\n+            \"select sum(translog_stats['number_of_operations']), sum(translog_stats['uncommitted_operations']) \" +\n+            \"from sys.shards \" +\n+            \"where table_name = 'test' and primary = true \" +\n+            \"group by table_name, primary\");\n+        assertThat(response.rowCount(), greaterThan(0L));\n+        assertThat(response.rows()[0][0], is(numberOfDocs));\n+        assertThat(response.rows()[0][1], is(0L));\n+    }\n+\n+    @Test\n+    public void test_open_close_is_not_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read\", \"blocks.write\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+\n+                // Closing an index is not blocked\n+                execute(\"alter table test close\");\n+                assertThat(isClosed(\"test\"), is(true));\n+\n+                // Opening an index is not blocked\n+                execute(\"alter table test open\");\n+                ensureYellow();\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_close_is_blocked_with_read_only_and_metadata_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }\n+        refresh();\n+\n+        for (String blockSetting : List.of(\"blocks.read_only\", \"blocks.metadata\")) {\n+            try {\n+                execute(\"alter table test set (\\\"\" + blockSetting + \"\\\" = true)\");\n+                execute(\"alter table test close\");\n+            } catch (Exception e) {\n+                assertThat(isClosed(\"test\"), is(false));\n+            } finally {\n+                execute(\"alter table test reset (\\\"\" + blockSetting + \"\\\")\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test_open_is_blocked_with_read_and_write_blocks_enabled() {\n+        execute(\"create table test (x int) with (number_of_replicas = 0) \");\n+        for (int i = 0; i < between(10, 20); i++) {\n+            execute(\"insert into test values (?)\", new Object[]{i});\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e2d13102b437ace1d4292f442644c74354f50d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/37e2d13102b437ace1d4292f442644c74354f50d", "committedDate": "2020-09-22T09:09:59Z", "message": "Port over ES OpenCloseIndexIT tests.\n\nes state: 704317da71c"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a97f20cfb8ec2d831d29c0c9b24905771483b86", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0a97f20cfb8ec2d831d29c0c9b24905771483b86", "committedDate": "2020-09-22T08:22:59Z", "message": "Port over ES OpenCloseIndexIT tests.\n\nes state: 704317da71c"}, "afterCommit": {"oid": "37e2d13102b437ace1d4292f442644c74354f50d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/37e2d13102b437ace1d4292f442644c74354f50d", "committedDate": "2020-09-22T09:09:59Z", "message": "Port over ES OpenCloseIndexIT tests.\n\nes state: 704317da71c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47017804415de4454acb77b3bc6ec4a943d68cb8", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/47017804415de4454acb77b3bc6ec4a943d68cb8", "committedDate": "2020-09-22T09:45:18Z", "message": "Merge branch 'master' into r/es-tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}