{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTQyMjI2", "number": 9630, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0MzozN1rODd2wqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToyOTozOFrODd9hKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjMyNDkwOnYy", "diffSide": "RIGHT", "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0MzozN1rOFmsxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjo0MzozN1rOFmsxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMzY1NQ==", "bodyText": "This and resolvePolyglotFunctionValue can be moved to the udf package of the sql module once we add support for more languages.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376123655", "createdAt": "2020-02-06T22:43:37Z", "author": {"login": "kovrus"}, "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This file is part of a module with proprietary Enterprise Features.\n+ *\n+ * Licensed to Crate.io Inc. (\"Crate.io\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.\n+ *\n+ * Unauthorized copying of this file, via any medium is strictly prohibited.\n+ *\n+ * To use this file, Crate.io must have given you permission to enable and\n+ * use such Enterprise Features and you must have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  If you enable or use the Enterprise\n+ * Features, you represent and warrant that you have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  Your use of the Enterprise Features\n+ * if governed by the terms and conditions of your Enterprise or Subscription\n+ * Agreement with Crate.io.\n+ */\n+\n+package io.crate.operation.language;\n+\n+import io.crate.data.Input;\n+import io.crate.types.ArrayType;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import io.crate.types.GeoPointType;\n+import io.crate.types.GeoShapeType;\n+import io.crate.types.ObjectType;\n+import org.graalvm.polyglot.TypeLiteral;\n+import org.graalvm.polyglot.Value;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+class PolyglotValuesConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6105b8c3c57be33da86ecd2fccc5dc24f6a0029b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzMzNDI1OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1NjowMlrOFm2JPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1NjowMlrOFm2JPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NzMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ``CREATE OR REPLACE FUNCTION`` will either create a new function, or replace\n          \n          \n            \n            ``CREATE OR REPLACE FUNCTION`` will either create a new function or replace", "url": "https://github.com/crate/crate/pull/9630#discussion_r376277311", "createdAt": "2020-02-07T08:56:02Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -37,12 +37,13 @@ These functions can be created like so::\n     +--------------------------------+\n     SELECT 1 row in set (... sec)\n \n-``OR REPLACE`` can be used to replace an existing function::\n+``CREATE OR REPLACE FUNCTION`` will either create a new function, or replace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6105b8c3c57be33da86ecd2fccc5dc24f6a0029b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzMzOTIyOnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1Nzo0NVrOFm2MUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1Nzo0NVrOFm2MUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3ODA5OA==", "bodyText": "this could be simplified with a little rewording. for instance:\n\"It is possible to use named function arguments in the function signature. For example, the calculate_distance function signature has two geo_point arguments named start and end:\"", "url": "https://github.com/crate/crate/pull/9630#discussion_r376278098", "createdAt": "2020-02-07T08:57:45Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -59,17 +60,18 @@ These functions can be created like so::\n     +---------------+\n     SELECT 1 row in set (... sec)\n \n-Arguments can be named in the function definition.\n-\n-For example, if you wanted two ``geo_point`` arguments named ``start_point``\n-and ``end_point``, you would do it like this::\n-\n-    cr> CREATE OR REPLACE FUNCTION calculate_distance(start_point geo_point, end_point geo_point)\n-    ...  RETURNS real\n-    ...  LANGUAGE JAVASCRIPT\n-    ...  AS 'function calculate_distance(start_point, end_point){\n-    ...        return Math.sqrt( Math.pow(end_point[0] - start_point[0], 2), Math.pow(end_point[1] - start_point[1], 2));\n-    ...      }';\n+It is possible to use named function arguments in the function signature. For\n+example, the ``calculate_distance`` function signature has two arguments of\n+the ``geo_point`` data type that are named as ``start`` and ``end``::", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a437a3b1d68f5ea56317494b64c9ba04d89c503d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM0MDM3OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1ODowOVrOFm2NCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1ODowOVrOFm2NCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3ODI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Arguments, and return data types of the function can be any of the CrateDB\n          \n          \n            \n            Arguments and return data types of the function can be any of the CrateDB", "url": "https://github.com/crate/crate/pull/9630#discussion_r376278281", "createdAt": "2020-02-07T08:58:09Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -105,9 +105,9 @@ You can explicitly assign a schema like this::\n Supported types\n ===============\n \n-The argument types, and the return type of the function can be any of the\n-CrateDB supported :ref:`data-types`. Data types of values passed into a\n-function must strictly correspond to its argument data types.\n+Arguments, and return data types of the function can be any of the CrateDB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a437a3b1d68f5ea56317494b64c9ba04d89c503d"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM0NzkwOnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMTowM1rOFm2Rsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMTowM1rOFm2Rsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3OTQ3NA==", "bodyText": "the first sentence of this para can be simplified a little. and the second sentence can be made a little more precise. for example:\n\"Function arguments and return values can be any supported :ref:data-types. The values passed into a function must strictly correspond to the specified argument data types.\"", "url": "https://github.com/crate/crate/pull/9630#discussion_r376279474", "createdAt": "2020-02-07T09:01:03Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -105,9 +105,9 @@ You can explicitly assign a schema like this::\n Supported types\n ===============\n \n-The argument types, and the return type of the function can be any of the\n-CrateDB supported :ref:`data-types`. Data types of values passed into a\n-function must strictly correspond to its argument data types.\n+Arguments and return data types of the function can be any of the CrateDB\n+supported :ref:`data-types`. Data types of values passed into the function\n+must strictly correspond to its argument data types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM1MjI2OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMjo0NlrOFm2UaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMjo0NlrOFm2UaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDE2OQ==", "bodyText": "\"VM\" should be expanded the first time it is used in a document, with the expanded version put into italics, like this:\n\nVirtual Machines (VMs)", "url": "https://github.com/crate/crate/pull/9630#discussion_r376280169", "createdAt": "2020-02-07T09:02:46Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM1MzU0OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMzoxNlrOFm2VQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMzoxNlrOFm2VQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n          \n          \n            \n            (guest language) is guaranteed by the GraalVM `GraalVM Polyglot API`_.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376280385", "createdAt": "2020-02-07T09:03:16Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM1Mzg5OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowMzoyNFrOFm2Vfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo1ODowOVrOFm34-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDQ0Nw==", "bodyText": "Would the old definition still work, or do users need to update their function definitions?", "url": "https://github.com/crate/crate/pull/9630#discussion_r376280447", "createdAt": "2020-02-07T09:03:24Z", "author": {"login": "mfussenegger"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -242,39 +259,39 @@ function must return a ``double precision`` array of size 2, ``WKT`` string or\n Here is an example of a JavaScript function returning a ``double array``::\n \n     cr> CREATE FUNCTION rotate_point(point geo_point, angle real)\n-    ...  RETURNS geo_point\n-    ...  LANGUAGE JAVASCRIPT\n-    ...  AS 'function rotate_point(point, angle) {\n-    ...        var cos = Math.cos(angle);\n-    ...        var sin = Math.sin(angle);\n-    ...        var x = cos * point[0] - sin * point[1];\n-    ...        var y = sin * point[0] + cos * point[1];\n-    ...        return [x, y];\n-    ...      }';\n+    ... RETURNS geo_point\n+    ... LANGUAGE JAVASCRIPT\n+    ... AS 'function rotate_point(point, angle) {\n+    ...       var cos = Math.cos(angle);\n+    ...       var sin = Math.sin(angle);\n+    ...       var x = cos * point[0] - sin * point[1];\n+    ...       var y = sin * point[0] + cos * point[1];\n+    ...       return [x, y];\n+    ...    }';\n     CREATE OK, 1 row affected  (... sec)\n \n Below is an example of a JavaScript function returning a ``WKT`` string, which\n will be cast to ``geo_point``::\n \n      cr> CREATE FUNCTION symmetric_point(point geo_point)\n-     ...  RETURNS geo_point\n-     ...  LANGUAGE JAVASCRIPT\n-     ...  AS 'function symmetric_point (point, angle) {\n-     ...        var x = - point[0],\n-     ...            y = - point[1];\n-     ...        return \"POINT (\\\" + x + \\\", \\\" + y +\\\")\";\n-     ...      }';\n+     ... RETURNS geo_point\n+     ... LANGUAGE JAVASCRIPT\n+     ... AS 'function symmetric_point (point, angle) {\n+     ...       var x = - point[0],\n+     ...           y = - point[1];\n+     ...       return \"POINT (\\\" + x + \\\", \\\" + y +\\\")\";\n+     ...    }';\n      CREATE OK, 1 row affected  (... sec)\n \n Similarly, if the function specifies the ``geo_shape`` return data type, then\n-the JavaScript function should return a ``GeoJson`` object or``WKT`` string::\n+the JavaScript function should return a ``GeoJson`` object or ``WKT`` string::\n \n-     cr> CREATE FUNCTION line(start_point array(double precision), end_point array(double precision))\n-     ...  RETURNS object\n-     ...  LANGUAGE JAVASCRIPT\n-     ...  AS 'function line(start_point, end_point) {\n+     cr> CREATE FUNCTION line(\"start\" array(double precision), \"end\" array(double precision))\n+     ... RETURNS object\n+     ... LANGUAGE JAVASCRIPT\n+     ... AS 'function line(start, end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwNTkxNQ==", "bodyText": "Function definitions stay the same. I updated it in the example to make it a bit more concise. There shouldn't be any issues with backward compatibility, such as we validate, register and compile functions on a startup by getting its definitions from metadata. I'll double check that.\nDon't have some presentable results, but will provide it a bit later before we merge this PR.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376305915", "createdAt": "2020-02-07T09:58:09Z", "author": {"login": "kovrus"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -242,39 +259,39 @@ function must return a ``double precision`` array of size 2, ``WKT`` string or\n Here is an example of a JavaScript function returning a ``double array``::\n \n     cr> CREATE FUNCTION rotate_point(point geo_point, angle real)\n-    ...  RETURNS geo_point\n-    ...  LANGUAGE JAVASCRIPT\n-    ...  AS 'function rotate_point(point, angle) {\n-    ...        var cos = Math.cos(angle);\n-    ...        var sin = Math.sin(angle);\n-    ...        var x = cos * point[0] - sin * point[1];\n-    ...        var y = sin * point[0] + cos * point[1];\n-    ...        return [x, y];\n-    ...      }';\n+    ... RETURNS geo_point\n+    ... LANGUAGE JAVASCRIPT\n+    ... AS 'function rotate_point(point, angle) {\n+    ...       var cos = Math.cos(angle);\n+    ...       var sin = Math.sin(angle);\n+    ...       var x = cos * point[0] - sin * point[1];\n+    ...       var y = sin * point[0] + cos * point[1];\n+    ...       return [x, y];\n+    ...    }';\n     CREATE OK, 1 row affected  (... sec)\n \n Below is an example of a JavaScript function returning a ``WKT`` string, which\n will be cast to ``geo_point``::\n \n      cr> CREATE FUNCTION symmetric_point(point geo_point)\n-     ...  RETURNS geo_point\n-     ...  LANGUAGE JAVASCRIPT\n-     ...  AS 'function symmetric_point (point, angle) {\n-     ...        var x = - point[0],\n-     ...            y = - point[1];\n-     ...        return \"POINT (\\\" + x + \\\", \\\" + y +\\\")\";\n-     ...      }';\n+     ... RETURNS geo_point\n+     ... LANGUAGE JAVASCRIPT\n+     ... AS 'function symmetric_point (point, angle) {\n+     ...       var x = - point[0],\n+     ...           y = - point[1];\n+     ...       return \"POINT (\\\" + x + \\\", \\\" + y +\\\")\";\n+     ...    }';\n      CREATE OK, 1 row affected  (... sec)\n \n Similarly, if the function specifies the ``geo_shape`` return data type, then\n-the JavaScript function should return a ``GeoJson`` object or``WKT`` string::\n+the JavaScript function should return a ``GeoJson`` object or ``WKT`` string::\n \n-     cr> CREATE FUNCTION line(start_point array(double precision), end_point array(double precision))\n-     ...  RETURNS object\n-     ...  LANGUAGE JAVASCRIPT\n-     ...  AS 'function line(start_point, end_point) {\n+     cr> CREATE FUNCTION line(\"start\" array(double precision), \"end\" array(double precision))\n+     ... RETURNS object\n+     ... LANGUAGE JAVASCRIPT\n+     ... AS 'function line(start, end) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDQ0Nw=="}, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM2MDgzOnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowNjowNVrOFm2ZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowNjowNVrOFm2ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MTU0MA==", "bodyText": "how about this:\n\nPlease note: CrateDB does not use the GraalVM JIT compiler. However, the stock host Java VM JIT compilers_ can JIT-compile, optimize, and execute the GraalVM JavaScript codebase to a certain extent.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376281540", "createdAt": "2020-02-07T09:06:05Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n+\n+Please note that CrateDB does not use the GraalVM JIT compiler as the\n+optimizing compile of the GraalVM JavaScript code as one might expect while\n+seeing usage of the GraalVM. The `stock host Java VM JIT compilers`_ still can\n+JIT-compile, execute and optimize the GraalVM JavaScript codebase to certain\n+extend.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM2NDA2OnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowNzoyNlrOFm2b3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTowNzoyNlrOFm2b3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MjA3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            restricted privileges, to allow for the execution of less trusted guest\n          \n          \n            \n            restricted privileges to allow for the execution of less trusted guest", "url": "https://github.com/crate/crate/pull/9630#discussion_r376282077", "createdAt": "2020-02-07T09:07:26Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n+\n+Please note that CrateDB does not use the GraalVM JIT compiler as the\n+optimizing compile of the GraalVM JavaScript code as one might expect while\n+seeing usage of the GraalVM. The `stock host Java VM JIT compilers`_ still can\n+JIT-compile, execute and optimize the GraalVM JavaScript codebase to certain\n+extend.\n+\n+The execution context for guest JavaScript language code is created with\n+restricted privileges, to allow for the execution of less trusted guest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e300cf657b4f5c6b9f15411a5ed80517ece320"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM4MTAwOnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxMjo1M1rOFm2mJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxODo1MVrOFm2xQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NDcxMQ==", "bodyText": "how about:\n\nThe execution context for guest JavaScript is created with restricted privileges to allow for the safe execution of less trusted guest language code. The guest language application context for each user-defined function is created with default access modifiers, so any access to managed resources is denied. The only exception is the host language interoperability configuration which explicitly allows access to Java lists and arrays. Please refer to GraalVM Security Guide_ for more detailed information.\n\nthis reads a little clearer to me. but have I preserved the correct meaning with my edit?", "url": "https://github.com/crate/crate/pull/9630#discussion_r376284711", "createdAt": "2020-02-07T09:12:53Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n+\n+Please note that CrateDB does not use the GraalVM JIT compiler as the\n+optimizing compile of the GraalVM JavaScript code as one might expect while\n+seeing usage of the GraalVM. The `stock host Java VM JIT compilers`_ still can\n+JIT-compile, execute and optimize the GraalVM JavaScript codebase to certain\n+extend.\n+\n+The execution context for guest JavaScript language code is created with\n+restricted privileges to allow for the execution of less trusted guest\n+language code. The guest language application context for each user-defined\n+function, that controls which resources of the host language can be accessed,\n+is created with default access modifiers meaning that the access to all\n+managed resources is denied. The exception is only the host language\n+interoperability configuration that explicitly allows the access to Java lists\n+and arrays. Please refer to `GraalVM Security Guide`_ for more detailed\n+information.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf77685cbe73c60142be0f60e4bc997440e75ba"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NzU1NA==", "bodyText": "The only exception is the host language interoperability configuration which explicitly allows access to Java lists and arrays.\n\nI was trying to say that all access configuration of the guest language context are set to default, except the host language interoperability configuration where we had to allow access to objects and lists of the host language.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376287554", "createdAt": "2020-02-07T09:18:51Z", "author": {"login": "kovrus"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n+\n+Please note that CrateDB does not use the GraalVM JIT compiler as the\n+optimizing compile of the GraalVM JavaScript code as one might expect while\n+seeing usage of the GraalVM. The `stock host Java VM JIT compilers`_ still can\n+JIT-compile, execute and optimize the GraalVM JavaScript codebase to certain\n+extend.\n+\n+The execution context for guest JavaScript language code is created with\n+restricted privileges to allow for the execution of less trusted guest\n+language code. The guest language application context for each user-defined\n+function, that controls which resources of the host language can be accessed,\n+is created with default access modifiers meaning that the access to all\n+managed resources is denied. The exception is only the host language\n+interoperability configuration that explicitly allows the access to Java lists\n+and arrays. Please refer to `GraalVM Security Guide`_ for more detailed\n+information.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NDcxMQ=="}, "originalCommit": {"oid": "fcf77685cbe73c60142be0f60e4bc997440e75ba"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM4MjQzOnYy", "diffSide": "RIGHT", "path": "docs/general/user-defined-functions.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxMzoxOFrOFm2m6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxMzoxOFrOFm2m6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4NDkwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (e.g. ``window``, ``console`` and so on) are are not available.\n          \n          \n            \n            (e.g. ``window``, ``console``, and so on) are not available.", "url": "https://github.com/crate/crate/pull/9630#discussion_r376284906", "createdAt": "2020-02-07T09:13:18Z", "author": {"login": "norosa"}, "path": "docs/general/user-defined-functions.rst", "diffHunk": "@@ -197,31 +197,48 @@ Optionally, you can provide a schema::\n Supported languages\n ===================\n \n-CrateDB currently only supports the UDF language ``javascript``.\n+CrateDB currently only supports the ``JavaScript`` user-defined functions.\n \n .. _udf_lang_js:\n \n JavaScript\n ----------\n \n-The UDF language ``javascript`` supports the `ECMAScript 5.1`_ standard.\n+The user defined function JavaScript is compatible with the `ECMAScript 2019`_\n+specification.\n \n .. NOTE::\n \n    The JavaScript language is an :ref:`enterprise feature\n    <enterprise-features>`.\n \n-CrateDB uses the Java built-in JavaScript engine Nashorn_ to interpret and\n-execute functions written in JavaScript. The engine is initialized using the\n-``--no-java`` option which basically restricts all access to Java APIs from\n-within the JavaScript context. CrateDB's engine also does not allow\n-non-standard syntax extensions (``--no-syntax-extensions``).\n+CrateDB uses the `GraalVM JavaScript`_ engine as a JavaScript (ECMAScript)\n+language execution runtime. The `GraalVM JavaScript`_ engine is a Java\n+application that works on the stock Java VMs. The interoperability between\n+Java code (host language) and JavaScript user-defined functions\n+(guest language) is guaranteed thtough the GraalVM `GraalVM Polyglot API`_.\n+\n+Please note that CrateDB does not use the GraalVM JIT compiler as the\n+optimizing compile of the GraalVM JavaScript code as one might expect while\n+seeing usage of the GraalVM. The `stock host Java VM JIT compilers`_ still can\n+JIT-compile, execute and optimize the GraalVM JavaScript codebase to certain\n+extend.\n+\n+The execution context for guest JavaScript language code is created with\n+restricted privileges to allow for the execution of less trusted guest\n+language code. The guest language application context for each user-defined\n+function, that controls which resources of the host language can be accessed,\n+is created with default access modifiers meaning that the access to all\n+managed resources is denied. The exception is only the host language\n+interoperability configuration that explicitly allows the access to Java lists\n+and arrays. Please refer to `GraalVM Security Guide`_ for more detailed\n+information.\n \n **This, however, does not mean that JavaScript is securely sandboxed.**\n \n-Also, even though Nashorn runs ECMA-complient JavaScript, objects that are\n-normally accessible with a web browser (e.g. ``window``, ``console`` and so on)\n-are are not available.\n+Also, even though user-defined functions implemented with ECMA-compliant\n+JavaScript, objects that are normally accessible with a web browser\n+(e.g. ``window``, ``console`` and so on) are are not available.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcf77685cbe73c60142be0f60e4bc997440e75ba"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzM5NTAyOnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNzoxMFrOFm2uRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToxNzoxMFrOFm2uRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4Njc4OA==", "bodyText": "how about:\n\nReplaced the Nashorn JavaScript engine with GraalVM for JavaScript\n:ref:user-defined functions <sql_administration_udf>. This change improves the performance of the JavaScript user-defined functions and upgrades ECMAScript support from 5.1 to 10.0.\n\n(slightly reworded first line and last line)", "url": "https://github.com/crate/crate/pull/9630#discussion_r376286788", "createdAt": "2020-02-07T09:17:10Z", "author": {"login": "norosa"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -65,6 +65,12 @@ None\n Changes\n =======\n \n+- Replaced the ``Nashorn`` by ``GraalVM`` JavaScript engine in the JavaScript\n+  :ref:`user-defined functions <sql_administration_udf>` implementation.\n+  This change improves the performance of the JavaScript user-defined\n+  functions and upgrades the ``ECMAScript`` specification version from ``5.1``\n+  to ``10.0``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da421acfa41968fccc3671ba9a80ff2bef81662b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzQzMjExOnYy", "diffSide": "RIGHT", "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToyOTozOFrOFm3FDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOToyOTozOFrOFm3FDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI5MjYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ArrayList<Object> items = new ArrayList<>();\n          \n          \n            \n                            ArrayList<Object> items = new ArrayList<>(value.getArraySize());", "url": "https://github.com/crate/crate/pull/9630#discussion_r376292623", "createdAt": "2020-02-07T09:29:38Z", "author": {"login": "mfussenegger"}, "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This file is part of a module with proprietary Enterprise Features.\n+ *\n+ * Licensed to Crate.io Inc. (\"Crate.io\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.\n+ *\n+ * Unauthorized copying of this file, via any medium is strictly prohibited.\n+ *\n+ * To use this file, Crate.io must have given you permission to enable and\n+ * use such Enterprise Features and you must have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  If you enable or use the Enterprise\n+ * Features, you represent and warrant that you have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  Your use of the Enterprise Features\n+ * if governed by the terms and conditions of your Enterprise or Subscription\n+ * Agreement with Crate.io.\n+ */\n+\n+package io.crate.operation.language;\n+\n+import io.crate.data.Input;\n+import io.crate.types.ArrayType;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import io.crate.types.GeoPointType;\n+import io.crate.types.GeoShapeType;\n+import io.crate.types.ObjectType;\n+import org.graalvm.polyglot.TypeLiteral;\n+import org.graalvm.polyglot.Value;\n+\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+class PolyglotValuesConverter {\n+\n+    private static final TypeLiteral<Number> NUMBER_TYPE_LITERAL = new TypeLiteral<>() {};\n+    private static final TypeLiteral<Map> MAP_TYPE_LITERAL = new TypeLiteral<>() {};\n+\n+    static Object toCrateObject(Value value, DataType<?> type) {\n+        if (value == null) {\n+            return null;\n+        }\n+        switch (type.id()) {\n+            case ArrayType.ID:\n+                ArrayList<Object> items = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da421acfa41968fccc3671ba9a80ff2bef81662b"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1056, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}