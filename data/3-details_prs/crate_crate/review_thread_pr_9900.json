{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Njg1MjM3", "number": 9900, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyODozMlrOD3hs9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTozMjo0NFrOD3jH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUwNDUyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyODozMlrOGN0vVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyODozMlrOGN0vVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0ODc1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!isSysColumn(field)) {\n          \n          \n            \n                                context.add(Symbols.pathFromSymbol(field), field);\n          \n          \n            \n                            }\n          \n          \n            \n                            var columnIdent = Symbols.pathFromSymbol(field)\n          \n          \n            \n                            if (!columnIdent.isSystemColumn()) {\n          \n          \n            \n                                context.add(columnIdent, field);\n          \n          \n            \n                            }", "url": "https://github.com/crate/crate/pull/9900#discussion_r417148759", "createdAt": "2020-04-29T08:28:32Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "diffHunk": "@@ -115,8 +118,21 @@ protected Void visitAllColumns(AllColumns node, SelectAnalysis context) {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                context.add(Symbols.pathFromSymbol(field), field);\n+                if (!isSysColumn(field)) {\n+                    context.add(Symbols.pathFromSymbol(field), field);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUwNTQ3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyODo0NlrOGN0v7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyODo0NlrOGN0v7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0ODkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isSysColumn(Symbol symbol) {\n          \n          \n            \n                    ColumnIdent columnIdent = null;\n          \n          \n            \n                    if (symbol instanceof ScopedSymbol) {\n          \n          \n            \n                        columnIdent = ((ScopedSymbol) symbol).column();\n          \n          \n            \n                    } else if (symbol instanceof Reference) {\n          \n          \n            \n                        columnIdent = ((Reference) symbol).column();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n          \n          \n            \n                    }\n          \n          \n            \n                    return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n          \n          \n            \n                }", "url": "https://github.com/crate/crate/pull/9900#discussion_r417148908", "createdAt": "2020-04-29T08:28:46Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/select/SelectAnalyzer.java", "diffHunk": "@@ -115,8 +118,21 @@ protected Void visitAllColumns(AllColumns node, SelectAnalysis context) {\n \n         private static void addAllFieldsFromRelation(SelectAnalysis context, AnalyzedRelation relation) {\n             for (Symbol field : relation.outputs()) {\n-                context.add(Symbols.pathFromSymbol(field), field);\n+                if (!isSysColumn(field)) {\n+                    context.add(Symbols.pathFromSymbol(field), field);\n+                }\n             }\n         }\n     }\n+    private static boolean isSysColumn(Symbol symbol) {\n+        ColumnIdent columnIdent = null;\n+        if (symbol instanceof ScopedSymbol) {\n+            columnIdent = ((ScopedSymbol) symbol).column();\n+        } else if (symbol instanceof Reference) {\n+            columnIdent = ((Reference) symbol).column();\n+        } else {\n+            throw new IllegalArgumentException(String.format(Locale.ENGLISH, \"Unknown column type %s\", symbol));\n+        }\n+        return DocSysColumns.COLUMN_IDENTS.containsKey(columnIdent);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUxMTQ2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMDoyMVrOGN0ziQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMDoyMVrOGN0ziQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0OTgzMw==", "bodyText": "I think this could be moved to DocSysColumn.forTable(Relationname) -> List<Reference>", "url": "https://github.com/crate/crate/pull/9900#discussion_r417149833", "createdAt": "2020-04-29T08:30:21Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUxMjE2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMDozNFrOGN0z-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMDozNFrOGN0z-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0OTk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Collection<Reference> sysColumns = buildSysColumns();", "url": "https://github.com/crate/crate/pull/9900#discussion_r417149947", "createdAt": "2020-04-29T08:30:34Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }\n+\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n+        Collection<Reference> sysColumns = buildSysColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUxMjg3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMDo0OVrOGN00bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMjozOVrOGN04Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sysColumns,\n          \n          \n            \n                        DocSysColumns.forTable(ident),", "url": "https://github.com/crate/crate/pull/9900#discussion_r417150063", "createdAt": "2020-04-29T08:30:49Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }\n+\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n+        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n+            sysColumns,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MTA1NA==", "bodyText": "Or maybe we can remove this from the DocTableInfo altogether, and instead create it ad-hoc in the DocTableRelation ? Not sure which way is better. Higher memory footprint vs. more ad-hoc allocations", "url": "https://github.com/crate/crate/pull/9900#discussion_r417151054", "createdAt": "2020-04-29T08:32:39Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/doc/DocTableInfoBuilder.java", "diffHunk": "@@ -161,13 +163,21 @@ private DocIndexMetaData buildDocIndexMetaDataFromTemplate(String index, String\n         return partitions;\n     }\n \n+    private Collection<Reference> buildSysColumns() {\n+        ArrayList<Reference> result = new ArrayList<>();\n+        DocSysColumns.forTable(this.ident, (c,r) -> result.add(r));\n+        return result;\n+    }\n+\n     public DocTableInfo build() {\n         DocIndexMetaData md = docIndexMetaData();\n         List<PartitionName> partitions = buildPartitions(md);\n+        Collection<Reference> sysColumns = buildSysColumns();\n \n         return new DocTableInfo(\n             ident,\n             md.columns(),\n+            sysColumns,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDA2Mw=="}, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUxNTY0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMTozNlrOGN02DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMTozNlrOGN02DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDQ3Nw==", "bodyText": "I think we could write a planner or analyzer test instead to see that the columns can be resolved despite aliased relation?", "url": "https://github.com/crate/crate/pull/9900#discussion_r417150477", "createdAt": "2020-04-29T08:31:36Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/SystemColumnIntegrationTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.integrationtests;\n+\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+\n+@ESIntegTestCase.ClusterScope(numClientNodes = 0, numDataNodes = 2, supportsDedicatedMasters = false)\n+public class SystemColumnIntegrationTest extends SQLTransportIntegrationTest {\n+\n+    @Test\n+    public void test_system_columns_on_aliased_table() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49143a3db1c062f3a0338cf2f28de5e16e3c046"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTczNzI3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTozMjo0NFrOGN2-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOTozMjo0NFrOGN2-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4NTM0Mg==", "bodyText": "Document why vs what:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Add additionally system columns to the output of the relation\n          \n          \n            \n                    // System columns are excluded  from `tableInfo.columns()` by default, but parent relations need to be able to see them so that they're selectable. E.g. in `select a._id from tbl as a`", "url": "https://github.com/crate/crate/pull/9900#discussion_r417185342", "createdAt": "2020-04-29T09:32:44Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/DocTableRelation.java", "diffHunk": "@@ -27,16 +27,19 @@\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.GeneratedReference;\n import io.crate.metadata.Reference;\n+import io.crate.metadata.doc.DocSysColumns;\n import io.crate.metadata.doc.DocTableInfo;\n import io.crate.metadata.table.Operation;\n \n import javax.annotation.Nullable;\n import java.util.List;\n+import static io.crate.common.collections.Lists2.concat;\n \n public class DocTableRelation extends AbstractTableRelation<DocTableInfo> {\n \n     public DocTableRelation(DocTableInfo tableInfo) {\n-        super(tableInfo);\n+        // Add additionally system columns to the output of the relation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c05311804c83437468c939ef0fc3e173dc7420"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1440, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}