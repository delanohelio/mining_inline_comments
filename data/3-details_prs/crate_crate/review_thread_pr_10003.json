{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzAwMTIy", "number": 10003, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowODo1OVrOD_9izg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowODo1OVrOD_9izg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk1MjE0OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowODo1OVrOGa8HkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoxMzo1MVrOGbCrqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void test_cast_int_to_bigint() {\n          \n          \n            \n                public void test_cast_literal_return_function() {\n          \n      \n    \n    \n  \n\nPreviously this test asserted the already removed special Literal.cast logic.\nI've kept it to assert the opposite, ensuring that no special literal cast logic exist.\nNot sure if we should keep it but I'd suggest a different name expressing the current intention.", "url": "https://github.com/crate/crate/pull/10003#discussion_r430901137", "createdAt": "2020-05-27T07:08:59Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eda863b2df7fe7f08aa845951b44f7c59dccea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzYzMg==", "bodyText": "i'll drop it then if it was an assertion for the special Literal.cast logic.", "url": "https://github.com/crate/crate/pull/10003#discussion_r430993632", "createdAt": "2020-05-27T09:47:23Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, "originalCommit": {"oid": "8eda863b2df7fe7f08aa845951b44f7c59dccea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5NDg5NQ==", "bodyText": "I'd prefer to keep it with a concrete name (sorry, I was thinking about this again and I think it's worth to keep it so we do not re-add anything special here ;)", "url": "https://github.com/crate/crate/pull/10003#discussion_r430994895", "createdAt": "2020-05-27T09:49:23Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, "originalCommit": {"oid": "8eda863b2df7fe7f08aa845951b44f7c59dccea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5ODgzNg==", "bodyText": "pushed the fixup, i am not sure about the name, i've named it test_cast_on_literal_is_not_evaluated_immediately, but maybe smth like test_cast_on_literal_is_not_normalized would be better?", "url": "https://github.com/crate/crate/pull/10003#discussion_r430998836", "createdAt": "2020-05-27T09:56:07Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, "originalCommit": {"oid": "8eda863b2df7fe7f08aa845951b44f7c59dccea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAwODY4MQ==", "bodyText": "The test ensures that a cast function is returned on casting literals. So the name should express it. After normalization or evaluation the cast literal (the cast function containing the literal) will be indeed converted to a new literal, which is not happening here.\nThats why it should be called test_cast_on_literal_returns_cast_function or similar.", "url": "https://github.com/crate/crate/pull/10003#discussion_r431008681", "createdAt": "2020-05-27T10:13:51Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/expression/symbol/LiteralTest.java", "diffHunk": "@@ -111,8 +110,14 @@ public void testCompareNestedArrayValues() throws Exception {\n     }\n \n     @Test\n-    public void testCasting() {\n+    public void test_cast_int_to_bigint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTEzNw=="}, "originalCommit": {"oid": "8eda863b2df7fe7f08aa845951b44f7c59dccea3"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}