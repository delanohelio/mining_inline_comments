{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjU0MjM0", "number": 9989, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOD_ZUqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOD_ZUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODAxNzY4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOGaCTEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOGaCTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzgxMA==", "bodyText": "This is only really for tests and won't work properly for integration tests. Currently we've only 2 tests that assert warnings, so not sure if it is worth to improve this now.", "url": "https://github.com/crate/crate/pull/9989#discussion_r429953810", "createdAt": "2020-05-25T14:07:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -19,91 +19,31 @@\n \n package org.elasticsearch.common.logging;\n \n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.Build;\n-import org.elasticsearch.Version;\n-import org.elasticsearch.common.SuppressLoggerChecks;\n-import org.elasticsearch.common.util.concurrent.ThreadContext;\n-\n-import java.nio.charset.Charset;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.time.format.DateTimeFormatterBuilder;\n-import java.time.format.SignStyle;\n-import java.util.BitSet;\n+import java.util.Arrays;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n-import java.util.Locale;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n-import static java.time.temporal.ChronoField.DAY_OF_MONTH;\n-import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n-import static java.time.temporal.ChronoField.HOUR_OF_DAY;\n-import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;\n-import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n-import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;\n-import static java.time.temporal.ChronoField.YEAR;\n+import com.google.common.collect.Lists;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.SuppressLoggerChecks;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n \n /**\n  * A logger that logs deprecation notices.\n  */\n public class DeprecationLogger {\n \n-    private final Logger logger;\n-\n-    /**\n-     * This is set once by the {@code Node} constructor, but it uses {@link CopyOnWriteArraySet} to ensure that tests can run in parallel.\n-     * <p>\n-     * Integration tests will create separate nodes within the same classloader, thus leading to a shared, {@code static} state.\n-     * In order for all tests to appropriately be handled, this must be able to remember <em>all</em> {@link ThreadContext}s that it is\n-     * given in a thread safe manner.\n-     * <p>\n-     * For actual usage, multiple nodes do not share the same JVM and therefore this will only be set once in practice.\n-     */\n-    private static final CopyOnWriteArraySet<ThreadContext> THREAD_CONTEXT = new CopyOnWriteArraySet<>();\n-\n-    /**\n-     * Set the {@link ThreadContext} used to add deprecation headers to network responses.\n-     * <p>\n-     * This is expected to <em>only</em> be invoked by the {@code Node}'s constructor (therefore once outside of tests).\n-     *\n-     * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})\n-     * @throws IllegalStateException if this {@code threadContext} has already been set\n-     */\n-    public static void setThreadContext(ThreadContext threadContext) {\n-        Objects.requireNonNull(threadContext, \"Cannot register a null ThreadContext\");\n-\n-        // add returning false means it _did_ have it already\n-        if (THREAD_CONTEXT.add(threadContext) == false) {\n-            throw new IllegalStateException(\"Double-setting ThreadContext not allowed!\");\n-        }\n-    }\n-\n-    /**\n-     * Remove the {@link ThreadContext} used to add deprecation headers to network responses.\n-     * <p>\n-     * This is expected to <em>only</em> be invoked by the {@code Node}'s {@code close} method (therefore once outside of tests).\n-     *\n-     * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})\n-     * @throws IllegalStateException if this {@code threadContext} is unknown (and presumably already unset before)\n-     */\n-    public static void removeThreadContext(ThreadContext threadContext) {\n-        assert threadContext != null;\n+    private static final ThreadLocal<RingBuffer<String>> RECENT_WARNINGS = ThreadLocal.withInitial(() -> new RingBuffer<String>(20));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df24c972d67f66fe5fa97aebff9932ee26518fc"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1520, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}