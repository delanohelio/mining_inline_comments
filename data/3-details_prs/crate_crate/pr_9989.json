{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjU0MjM0", "number": 9989, "title": "Remove most of the ThreadContext", "bodyText": "Summary of the changes / Why this improves CrateDB\nThe ThreadContext was used to preserve logged warnings across threads and\nnodes, to be able to return them to the client.\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-25T09:44:31Z", "url": "https://github.com/crate/crate/pull/9989", "merged": true, "mergeCommit": {"oid": "7ac48662cc8015b6ee14f063ca67daccc72c1bda"}, "closed": true, "closedAt": "2020-05-25T15:21:25Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcku_5hgBqjMzNzAwMzI1NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckxrXKAFqTQxNzc3NDgwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64f06b2f926a9ccc308e7e3dcc256c9d019859dd", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/64f06b2f926a9ccc308e7e3dcc256c9d019859dd", "committedDate": "2020-05-25T09:37:34Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}, "afterCommit": {"oid": "f8214ce0dee20a10ba0bf4730b067ddacaa9ee8a", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/f8214ce0dee20a10ba0bf4730b067ddacaa9ee8a", "committedDate": "2020-05-25T12:12:39Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8214ce0dee20a10ba0bf4730b067ddacaa9ee8a", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/f8214ce0dee20a10ba0bf4730b067ddacaa9ee8a", "committedDate": "2020-05-25T12:12:39Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}, "afterCommit": {"oid": "b9cc530d850c3dd2aadfa9bde19e8d2e410df791", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b9cc530d850c3dd2aadfa9bde19e8d2e410df791", "committedDate": "2020-05-25T13:12:05Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9cc530d850c3dd2aadfa9bde19e8d2e410df791", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b9cc530d850c3dd2aadfa9bde19e8d2e410df791", "committedDate": "2020-05-25T13:12:05Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}, "afterCommit": {"oid": "6df24c972d67f66fe5fa97aebff9932ee26518fc", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6df24c972d67f66fe5fa97aebff9932ee26518fc", "committedDate": "2020-05-25T14:04:57Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzM0MzEy", "url": "https://github.com/crate/crate/pull/9989#pullrequestreview-417734312", "createdAt": "2020-05-25T14:07:07Z", "commit": {"oid": "6df24c972d67f66fe5fa97aebff9932ee26518fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOGaCTEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNzowN1rOGaCTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzgxMA==", "bodyText": "This is only really for tests and won't work properly for integration tests. Currently we've only 2 tests that assert warnings, so not sure if it is worth to improve this now.", "url": "https://github.com/crate/crate/pull/9989#discussion_r429953810", "createdAt": "2020-05-25T14:07:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/common/logging/DeprecationLogger.java", "diffHunk": "@@ -19,91 +19,31 @@\n \n package org.elasticsearch.common.logging;\n \n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-import org.elasticsearch.Build;\n-import org.elasticsearch.Version;\n-import org.elasticsearch.common.SuppressLoggerChecks;\n-import org.elasticsearch.common.util.concurrent.ThreadContext;\n-\n-import java.nio.charset.Charset;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.time.format.DateTimeFormatter;\n-import java.time.format.DateTimeFormatterBuilder;\n-import java.time.format.SignStyle;\n-import java.util.BitSet;\n+import java.util.Arrays;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n-import java.util.Locale;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n-import java.util.concurrent.CopyOnWriteArraySet;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n-import static java.time.temporal.ChronoField.DAY_OF_MONTH;\n-import static java.time.temporal.ChronoField.DAY_OF_WEEK;\n-import static java.time.temporal.ChronoField.HOUR_OF_DAY;\n-import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;\n-import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n-import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;\n-import static java.time.temporal.ChronoField.YEAR;\n+import com.google.common.collect.Lists;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.common.SuppressLoggerChecks;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+\n \n /**\n  * A logger that logs deprecation notices.\n  */\n public class DeprecationLogger {\n \n-    private final Logger logger;\n-\n-    /**\n-     * This is set once by the {@code Node} constructor, but it uses {@link CopyOnWriteArraySet} to ensure that tests can run in parallel.\n-     * <p>\n-     * Integration tests will create separate nodes within the same classloader, thus leading to a shared, {@code static} state.\n-     * In order for all tests to appropriately be handled, this must be able to remember <em>all</em> {@link ThreadContext}s that it is\n-     * given in a thread safe manner.\n-     * <p>\n-     * For actual usage, multiple nodes do not share the same JVM and therefore this will only be set once in practice.\n-     */\n-    private static final CopyOnWriteArraySet<ThreadContext> THREAD_CONTEXT = new CopyOnWriteArraySet<>();\n-\n-    /**\n-     * Set the {@link ThreadContext} used to add deprecation headers to network responses.\n-     * <p>\n-     * This is expected to <em>only</em> be invoked by the {@code Node}'s constructor (therefore once outside of tests).\n-     *\n-     * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})\n-     * @throws IllegalStateException if this {@code threadContext} has already been set\n-     */\n-    public static void setThreadContext(ThreadContext threadContext) {\n-        Objects.requireNonNull(threadContext, \"Cannot register a null ThreadContext\");\n-\n-        // add returning false means it _did_ have it already\n-        if (THREAD_CONTEXT.add(threadContext) == false) {\n-            throw new IllegalStateException(\"Double-setting ThreadContext not allowed!\");\n-        }\n-    }\n-\n-    /**\n-     * Remove the {@link ThreadContext} used to add deprecation headers to network responses.\n-     * <p>\n-     * This is expected to <em>only</em> be invoked by the {@code Node}'s {@code close} method (therefore once outside of tests).\n-     *\n-     * @param threadContext The thread context owned by the {@code ThreadPool} (and implicitly a {@code Node})\n-     * @throws IllegalStateException if this {@code threadContext} is unknown (and presumably already unset before)\n-     */\n-    public static void removeThreadContext(ThreadContext threadContext) {\n-        assert threadContext != null;\n+    private static final ThreadLocal<RingBuffer<String>> RECENT_WARNINGS = ThreadLocal.withInitial(() -> new RingBuffer<String>(20));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df24c972d67f66fe5fa97aebff9932ee26518fc"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8da2875d38392a22e98fa733a6f73a35e132932", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/a8da2875d38392a22e98fa733a6f73a35e132932", "committedDate": "2020-05-25T14:34:41Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6df24c972d67f66fe5fa97aebff9932ee26518fc", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6df24c972d67f66fe5fa97aebff9932ee26518fc", "committedDate": "2020-05-25T14:04:57Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}, "afterCommit": {"oid": "a8da2875d38392a22e98fa733a6f73a35e132932", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/a8da2875d38392a22e98fa733a6f73a35e132932", "committedDate": "2020-05-25T14:34:41Z", "message": "Remove most of the ThreadContext\n\nThe ThreadContext was used to preserve logged warnings across threads\nand nodes, to be able to return them to the client.\n\nBut HTTP clients implementing a DB-API interface couldn't expose the\nwarnings and PostgreSQL clients never received the warnings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3Nzc0ODAz", "url": "https://github.com/crate/crate/pull/9989#pullrequestreview-417774803", "createdAt": "2020-05-25T15:20:04Z", "commit": {"oid": "a8da2875d38392a22e98fa733a6f73a35e132932"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3412, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}