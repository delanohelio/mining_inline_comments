{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NDQ1NjEz", "number": 10744, "title": "Add the `sys.snapshot_restore` table.", "bodyText": "Summary of the changes / Why this improves CrateDB\nA user can check the progress of the RESTORE SNAPSHOT statement\nby querying the sys.snapshot_restore.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-11-04T15:05:24Z", "url": "https://github.com/crate/crate/pull/10744", "merged": true, "mergeCommit": {"oid": "473400e096eb08c2cf12d590075627b6fe904157"}, "closed": true, "closedAt": "2020-11-05T10:36:33Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZPmfzAFqTUyMzQ3OTA3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZfaoKgBqjM5NjE1NDM3Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDc5MDcw", "url": "https://github.com/crate/crate/pull/10744#pullrequestreview-523479070", "createdAt": "2020-11-04T15:35:57Z", "commit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNTo1OFrOHtdmKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTozNTo1OFrOHtdmKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMjg3NA==", "bodyText": "Do you think it worth adding an integration test? It is essentially the same, I would have to build the RestoreInProgress and update the cluster state and then query the table. Another approach with running restore snapshot statements in the test and querying the sys.snapshot_restore table seems to be not feasible.", "url": "https://github.com/crate/crate/pull/10744#discussion_r517432874", "createdAt": "2020-11-04T15:35:58Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/reference/sys/snapshot/SysSnapshotRestoreTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.reference.sys.snapshot;\n+\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.RestoreInProgress;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.snapshots.Snapshot;\n+import org.elasticsearch.snapshots.SnapshotId;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SysSnapshotRestoreTest extends CrateDummyClusterServiceUnitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNDk5MDYw", "url": "https://github.com/crate/crate/pull/10744#pullrequestreview-523499060", "createdAt": "2020-11-04T15:56:33Z", "commit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTo1NjozM1rOHteiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTo1NjozM1rOHteiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ0ODI2Mw==", "bodyText": "I'm not sure if it is worth testing on this level if the clusterService and state is mocked.\nHow about changing the snapshotsRestoreInProgress method to take the ClusterState or even the RestoreInProgress as an argument? I think it could also move into the new SysSnapshotRestoreTableInfo class as a static method.\nSysTableDefinitions could then directly call that method - it already has a clusterService instance - and the new SysSnapshotsRestore class could be removed again.", "url": "https://github.com/crate/crate/pull/10744#discussion_r517448263", "createdAt": "2020-11-04T15:56:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/reference/sys/snapshot/SysSnapshotRestoreTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.reference.sys.snapshot;\n+\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.RestoreInProgress;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.collect.ImmutableOpenMap;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.snapshots.Snapshot;\n+import org.elasticsearch.snapshots.SnapshotId;\n+import org.junit.Test;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class SysSnapshotRestoreTest extends CrateDummyClusterServiceUnitTest {\n+\n+    @Test\n+    public void test_extract_and_convert_one_restore_in_progress_to_sys_restore_snapshot_context_type() {\n+        ImmutableOpenMap.Builder<ShardId, RestoreInProgress.ShardRestoreStatus> shardsBuilder\n+            = ImmutableOpenMap.builder();\n+        shardsBuilder.put(\n+            new ShardId(\"index\", \"_uuid\", 0),\n+            new RestoreInProgress.ShardRestoreStatus(\"nodeId\", RestoreInProgress.State.STARTED)\n+        );\n+        RestoreInProgress.Entry entry = new RestoreInProgress.Entry(\n+            \"_uuid\",\n+            new Snapshot(\n+                \"repository\",\n+                new SnapshotId(\"snapshot\", UUID.randomUUID().toString())),\n+            RestoreInProgress.State.SUCCESS,\n+            List.of(\"index\"),\n+            shardsBuilder.build()\n+        );\n+\n+        var clusterService = mock(ClusterService.class);\n+        var clusterState = mock(ClusterState.class);\n+        when(clusterState.custom(RestoreInProgress.TYPE))\n+            .thenReturn(new RestoreInProgress.Builder().add(entry).build());\n+        when(clusterService.state()).thenReturn(clusterState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTQwMDAy", "url": "https://github.com/crate/crate/pull/10744#pullrequestreview-523540002", "createdAt": "2020-11-04T16:39:58Z", "commit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1465126cfd791b9e311587671584aee4b9306d5d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/1465126cfd791b9e311587671584aee4b9306d5d", "committedDate": "2020-11-04T15:04:08Z", "message": "Add the `sys.snapshot_restore` table.\n\nA user can check the progress of the `RESTORE SNAPSHOT` statement\nby querying the `sys.snapshot_restore`."}, "afterCommit": {"oid": "5898c62b7a8d507e52d682a62b9a7c799b754373", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5898c62b7a8d507e52d682a62b9a7c799b754373", "committedDate": "2020-11-04T17:34:41Z", "message": "fixup! Add the `sys.snapshot_restore` table."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjMxODg4", "url": "https://github.com/crate/crate/pull/10744#pullrequestreview-523631888", "createdAt": "2020-11-04T18:33:51Z", "commit": {"oid": "5898c62b7a8d507e52d682a62b9a7c799b754373"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5898c62b7a8d507e52d682a62b9a7c799b754373", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5898c62b7a8d507e52d682a62b9a7c799b754373", "committedDate": "2020-11-04T17:34:41Z", "message": "fixup! Add the `sys.snapshot_restore` table."}, "afterCommit": {"oid": "0707cbb205bc6bc6d23b86c3a6df08b0a6e2c144", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0707cbb205bc6bc6d23b86c3a6df08b0a6e2c144", "committedDate": "2020-11-04T20:54:40Z", "message": "Add the `sys.snapshot_restore` table.\n\nA user can check the progress of the `RESTORE SNAPSHOT` statement\nby querying the `sys.snapshot_restore`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acf0fc9815e6ce9e4242d23cb519aefc3235c34", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6acf0fc9815e6ce9e4242d23cb519aefc3235c34", "committedDate": "2020-11-05T10:01:24Z", "message": "Add the `sys.snapshot_restore` table.\n\nA user can check the progress of the `RESTORE SNAPSHOT` statement\nby querying the `sys.snapshot_restore`."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0707cbb205bc6bc6d23b86c3a6df08b0a6e2c144", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0707cbb205bc6bc6d23b86c3a6df08b0a6e2c144", "committedDate": "2020-11-04T20:54:40Z", "message": "Add the `sys.snapshot_restore` table.\n\nA user can check the progress of the `RESTORE SNAPSHOT` statement\nby querying the `sys.snapshot_restore`."}, "afterCommit": {"oid": "6acf0fc9815e6ce9e4242d23cb519aefc3235c34", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6acf0fc9815e6ce9e4242d23cb519aefc3235c34", "committedDate": "2020-11-05T10:01:24Z", "message": "Add the `sys.snapshot_restore` table.\n\nA user can check the progress of the `RESTORE SNAPSHOT` statement\nby querying the `sys.snapshot_restore`."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3608, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}