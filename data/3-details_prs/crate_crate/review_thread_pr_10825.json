{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTcyNjg2", "number": 10825, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyODoyMVrOE9s2qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyODoyMVrOE9s2qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTMzNDgyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyODoyMVrOH6h5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzowMDoxNlrOH6i0IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNDkwNQ==", "bodyText": "Could we use the slow annotation here instead, or does it currently fail?", "url": "https://github.com/crate/crate/pull/10825#discussion_r531134905", "createdAt": "2020-11-26T16:28:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java", "diffHunk": "@@ -0,0 +1,585 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gateway;\n+\n+import io.crate.action.sql.SQLOperations;\n+import io.crate.common.unit.TimeValue;\n+import io.crate.integrationtests.SQLTransportIntegrationTest;\n+import io.crate.protocols.postgres.PostgresNetty;\n+import io.crate.testing.SQLTransportExecutor;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Requests;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexGraveyard;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.routing.IndexRoutingTable;\n+import org.elasticsearch.cluster.routing.IndexShardRoutingTable;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.common.CheckedConsumer;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.BoundTransportAddress;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.ESIntegTestCase.ClusterScope;\n+import org.elasticsearch.test.ESIntegTestCase.Scope;\n+import org.elasticsearch.test.InternalTestCluster.RestartCallback;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n+import static io.crate.testing.Asserts.assertThrows;\n+import static io.crate.testing.SQLErrorMatcher.isSQLError;\n+import static io.crate.testing.SQLTransportExecutor.REQUEST_TIMEOUT;\n+import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+import static org.elasticsearch.indices.ShardLimitValidator.SETTING_CLUSTER_MAX_SHARDS_PER_NODE;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@ClusterScope(scope = Scope.TEST, numDataNodes = 0)\n+public class GatewayIndexStateIT extends SQLTransportIntegrationTest {\n+\n+    private final Logger logger = LogManager.getLogger(GatewayIndexStateIT.class);\n+\n+    @Override\n+    protected boolean addMockInternalEngine() {\n+        // testRecoverBrokenIndexMetadata replies on the flushing on shutdown behavior which can be randomly disabled in MockInternalEngine.\n+        return false;\n+    }\n+\n+    public void testSimpleOpenClose() throws Exception {\n+        logger.info(\"--> starting 2 nodes\");\n+        internalCluster().startNodes(2);\n+\n+        logger.info(\"--> creating test index\");\n+\n+        int numPrimaries = 2;\n+        int numReplicas = 1;\n+        int totalNumShards = numPrimaries + (numPrimaries * numReplicas);\n+        var tableName = getFqn(\"test\");\n+\n+        execute(\"create table test (id int primary key) clustered into ? shards with (number_of_replicas = ?)\",\n+                new Object[]{numPrimaries, numReplicas});\n+\n+        logger.info(\"--> waiting for green status\");\n+        ensureGreen();\n+\n+        ClusterStateResponse stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> insert a simple document\");\n+        execute(\"insert into test (id) values (1)\");\n+\n+        logger.info(\"--> closing test index...\");\n+        execute(\"alter table test close\");\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        logger.info(\"--> trying to index into a closed index ...\");\n+        try {\n+            execute(\"insert into test (id) values (2)\");\n+            fail();\n+        } catch (Exception e) {\n+            // all is well\n+        }\n+\n+        logger.info(\"--> creating another index (test2) and indexing into it\");\n+        execute(\"create table test2 (id int primary key) with (number_of_replicas = 0)\");\n+        execute(\"insert into test2 (id) values (1)\");\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        logger.info(\"--> opening the first index again...\");\n+        execute(\"alter table test open\");\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> trying to get the indexed document on the first index\");\n+        execute(\"select id from test where id = 1\");\n+        assertThat(response.rowCount(), is(1L));\n+\n+\n+        logger.info(\"--> closing test index...\");\n+        execute(\"alter table test close\");\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> restarting nodes...\");\n+        internalCluster().fullRestart();\n+        logger.info(\"--> waiting for two nodes and green status\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> trying to index into a closed index ...\");\n+        try {\n+            execute(\"insert into test (id) values (2)\");\n+            fail();\n+        } catch (Exception e) {\n+            // all is well\n+        }\n+\n+        logger.info(\"--> opening index...\");\n+        execute(\"alter table test open\");\n+\n+        logger.info(\"--> waiting for green status\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> trying to get the indexed document on the first round (before close and shutdown)\");\n+        execute(\"select id from test where id = 1\");\n+        assertThat(response.rowCount(), is(1L));\n+\n+        logger.info(\"--> indexing a simple document\");\n+        execute(\"insert into test (id) values (2)\");\n+    }\n+\n+    @Test\n+    @Ignore(\"Creating a table without any data node will take very long as internally at CrateDB, a table creation\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a34fadd97d4c8536f1b1801c2a6abd1378f6c72"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0OTg1Ng==", "bodyText": "Was not sure if it's worth and maybe adds another flakiness. I've added a fixup.", "url": "https://github.com/crate/crate/pull/10825#discussion_r531149856", "createdAt": "2020-11-26T17:00:16Z", "author": {"login": "seut"}, "path": "server/src/test/java/org/elasticsearch/gateway/GatewayIndexStateIT.java", "diffHunk": "@@ -0,0 +1,585 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.elasticsearch.gateway;\n+\n+import io.crate.action.sql.SQLOperations;\n+import io.crate.common.unit.TimeValue;\n+import io.crate.integrationtests.SQLTransportIntegrationTest;\n+import io.crate.protocols.postgres.PostgresNetty;\n+import io.crate.testing.SQLTransportExecutor;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse;\n+import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Requests;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.metadata.IndexGraveyard;\n+import org.elasticsearch.cluster.metadata.IndexMetadata;\n+import org.elasticsearch.cluster.metadata.Metadata;\n+import org.elasticsearch.cluster.routing.IndexRoutingTable;\n+import org.elasticsearch.cluster.routing.IndexShardRoutingTable;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n+import org.elasticsearch.cluster.routing.ShardRoutingState;\n+import org.elasticsearch.cluster.routing.UnassignedInfo;\n+import org.elasticsearch.common.CheckedConsumer;\n+import org.elasticsearch.common.Priority;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.transport.BoundTransportAddress;\n+import org.elasticsearch.common.xcontent.XContentType;\n+import org.elasticsearch.env.NodeEnvironment;\n+import org.elasticsearch.node.Node;\n+import org.elasticsearch.test.ESIntegTestCase;\n+import org.elasticsearch.test.ESIntegTestCase.ClusterScope;\n+import org.elasticsearch.test.ESIntegTestCase.Scope;\n+import org.elasticsearch.test.InternalTestCluster.RestartCallback;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.crate.protocols.postgres.PGErrorStatus.INTERNAL_ERROR;\n+import static io.crate.testing.Asserts.assertThrows;\n+import static io.crate.testing.SQLErrorMatcher.isSQLError;\n+import static io.crate.testing.SQLTransportExecutor.REQUEST_TIMEOUT;\n+import static io.netty.handler.codec.http.HttpResponseStatus.INTERNAL_SERVER_ERROR;\n+import static org.elasticsearch.indices.ShardLimitValidator.SETTING_CLUSTER_MAX_SHARDS_PER_NODE;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@ClusterScope(scope = Scope.TEST, numDataNodes = 0)\n+public class GatewayIndexStateIT extends SQLTransportIntegrationTest {\n+\n+    private final Logger logger = LogManager.getLogger(GatewayIndexStateIT.class);\n+\n+    @Override\n+    protected boolean addMockInternalEngine() {\n+        // testRecoverBrokenIndexMetadata replies on the flushing on shutdown behavior which can be randomly disabled in MockInternalEngine.\n+        return false;\n+    }\n+\n+    public void testSimpleOpenClose() throws Exception {\n+        logger.info(\"--> starting 2 nodes\");\n+        internalCluster().startNodes(2);\n+\n+        logger.info(\"--> creating test index\");\n+\n+        int numPrimaries = 2;\n+        int numReplicas = 1;\n+        int totalNumShards = numPrimaries + (numPrimaries * numReplicas);\n+        var tableName = getFqn(\"test\");\n+\n+        execute(\"create table test (id int primary key) clustered into ? shards with (number_of_replicas = ?)\",\n+                new Object[]{numPrimaries, numReplicas});\n+\n+        logger.info(\"--> waiting for green status\");\n+        ensureGreen();\n+\n+        ClusterStateResponse stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> insert a simple document\");\n+        execute(\"insert into test (id) values (1)\");\n+\n+        logger.info(\"--> closing test index...\");\n+        execute(\"alter table test close\");\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        logger.info(\"--> trying to index into a closed index ...\");\n+        try {\n+            execute(\"insert into test (id) values (2)\");\n+            fail();\n+        } catch (Exception e) {\n+            // all is well\n+        }\n+\n+        logger.info(\"--> creating another index (test2) and indexing into it\");\n+        execute(\"create table test2 (id int primary key) with (number_of_replicas = 0)\");\n+        execute(\"insert into test2 (id) values (1)\");\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        logger.info(\"--> opening the first index again...\");\n+        execute(\"alter table test open\");\n+\n+        logger.info(\"--> verifying that the state is green\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> trying to get the indexed document on the first index\");\n+        execute(\"select id from test where id = 1\");\n+        assertThat(response.rowCount(), is(1L));\n+\n+\n+        logger.info(\"--> closing test index...\");\n+        execute(\"alter table test close\");\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> restarting nodes...\");\n+        internalCluster().fullRestart();\n+        logger.info(\"--> waiting for two nodes and green status\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet(REQUEST_TIMEOUT);\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.CLOSE));\n+        assertThat(stateResponse.getState().routingTable().index(tableName), notNullValue());\n+\n+        logger.info(\"--> trying to index into a closed index ...\");\n+        try {\n+            execute(\"insert into test (id) values (2)\");\n+            fail();\n+        } catch (Exception e) {\n+            // all is well\n+        }\n+\n+        logger.info(\"--> opening index...\");\n+        execute(\"alter table test open\");\n+\n+        logger.info(\"--> waiting for green status\");\n+        ensureGreen();\n+\n+        stateResponse = client().admin().cluster().prepareState().execute().actionGet();\n+        assertThat(stateResponse.getState().metadata().index(tableName).getState(), equalTo(IndexMetadata.State.OPEN));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shards().size(), equalTo(numPrimaries));\n+        assertThat(stateResponse.getState().routingTable().index(tableName).shardsWithState(ShardRoutingState.STARTED).size(),\n+            equalTo(totalNumShards));\n+\n+        logger.info(\"--> trying to get the indexed document on the first round (before close and shutdown)\");\n+        execute(\"select id from test where id = 1\");\n+        assertThat(response.rowCount(), is(1L));\n+\n+        logger.info(\"--> indexing a simple document\");\n+        execute(\"insert into test (id) values (2)\");\n+    }\n+\n+    @Test\n+    @Ignore(\"Creating a table without any data node will take very long as internally at CrateDB, a table creation\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNDkwNQ=="}, "originalCommit": {"oid": "1a34fadd97d4c8536f1b1801c2a6abd1378f6c72"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 935, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}