{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODg0MTUz", "number": 9982, "title": "Add cast support for the string type with the length limit.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-22T12:08:18Z", "url": "https://github.com/crate/crate/pull/9982", "merged": true, "mergeCommit": {"oid": "d5537fc9da4f2df83a28d8f57c6df014cff65492"}, "closed": true, "closedAt": "2020-05-25T09:12:31Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjxKHrABqjMzNjQ0NTI0NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABckr8ZzgFqTQxNzU1Mjk2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b2751a841021839e7432caa039c3aca05cdb9e8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/1b2751a841021839e7432caa039c3aca05cdb9e8", "committedDate": "2020-05-22T12:06:13Z", "message": "Add cast support for the string type with the length limit."}, "afterCommit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "committedDate": "2020-05-22T12:09:38Z", "message": "Add cast support for the string type with the length limit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODgwODY3", "url": "https://github.com/crate/crate/pull/9982#pullrequestreview-416880867", "createdAt": "2020-05-22T12:44:36Z", "commit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0NDozN1rOGZVwtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0NDozN1rOGZVwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNDExNg==", "bodyText": "maybe we can optimize by creating two a dedicated unbound string type?", "url": "https://github.com/crate/crate/pull/9982#discussion_r429224116", "createdAt": "2020-05-22T12:44:37Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -123,39 +123,37 @@ public String value(Object value) {\n         if (value == null) {\n             return null;\n         }\n+        final String str;\n         if (value instanceof String) {\n-            return (String) value;\n-        }\n-        if (value instanceof BytesRef) {\n-            return ((BytesRef) value).utf8ToString();\n-        }\n-        if (value instanceof Boolean) {\n-            if ((boolean) value) {\n-                return T;\n-            } else {\n-                return F;\n-            }\n-        }\n-        if (value instanceof Map) {\n+            str = (String) value;\n+        } else if (value instanceof BytesRef) {\n+            str = ((BytesRef) value).utf8ToString();\n+        } else if (value instanceof Boolean) {\n+            str = (boolean) value ? T : F;\n+        } else if (value instanceof Map) {\n             try {\n                 //noinspection unchecked\n-                return Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n+                str = Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n             } catch (IOException e) {\n                 throw new IllegalArgumentException(\"Cannot cast `\" + value + \"` to type TEXT\", e);\n             }\n-        }\n-        if (value instanceof Collection) {\n+        } else if (value instanceof Collection) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", value));\n-        }\n-        if (value.getClass().isArray()) {\n+        } else if (value.getClass().isArray()) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", Arrays.toString((Object[]) value)));\n+        } else if (value instanceof TimeValue) {\n+            str = ((TimeValue) value).getStringRep();\n+        } else {\n+            str = value.toString();\n         }\n-        if (value instanceof TimeValue) {\n-            return ((TimeValue) value).getStringRep();\n+\n+        if (unbound() || str.length() <= lengthLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODg4OTYx", "url": "https://github.com/crate/crate/pull/9982#pullrequestreview-416888961", "createdAt": "2020-05-22T12:57:52Z", "commit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo1Nzo1MlrOGZWJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo1Nzo1MlrOGZWJiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMDQ3Mg==", "bodyText": "Not sure if it is worth it. Maybe do a quick JMH benchmark to get a feeling of the impact?", "url": "https://github.com/crate/crate/pull/9982#discussion_r429230472", "createdAt": "2020-05-22T12:57:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/StringType.java", "diffHunk": "@@ -123,39 +123,37 @@ public String value(Object value) {\n         if (value == null) {\n             return null;\n         }\n+        final String str;\n         if (value instanceof String) {\n-            return (String) value;\n-        }\n-        if (value instanceof BytesRef) {\n-            return ((BytesRef) value).utf8ToString();\n-        }\n-        if (value instanceof Boolean) {\n-            if ((boolean) value) {\n-                return T;\n-            } else {\n-                return F;\n-            }\n-        }\n-        if (value instanceof Map) {\n+            str = (String) value;\n+        } else if (value instanceof BytesRef) {\n+            str = ((BytesRef) value).utf8ToString();\n+        } else if (value instanceof Boolean) {\n+            str = (boolean) value ? T : F;\n+        } else if (value instanceof Map) {\n             try {\n                 //noinspection unchecked\n-                return Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n+                str = Strings.toString(XContentFactory.jsonBuilder().map((Map<String, ?>) value));\n             } catch (IOException e) {\n                 throw new IllegalArgumentException(\"Cannot cast `\" + value + \"` to type TEXT\", e);\n             }\n-        }\n-        if (value instanceof Collection) {\n+        } else if (value instanceof Collection) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", value));\n-        }\n-        if (value.getClass().isArray()) {\n+        } else if (value.getClass().isArray()) {\n             throw new IllegalArgumentException(\n                 String.format(Locale.ENGLISH, \"Cannot cast %s to type TEXT\", Arrays.toString((Object[]) value)));\n+        } else if (value instanceof TimeValue) {\n+            str = ((TimeValue) value).getStringRep();\n+        } else {\n+            str = value.toString();\n         }\n-        if (value instanceof TimeValue) {\n-            return ((TimeValue) value).getStringRep();\n+\n+        if (unbound() || str.length() <= lengthLimit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNDExNg=="}, "originalCommit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "committedDate": "2020-05-22T14:06:24Z", "message": "Add cast support for the string type with the length limit."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/29b28869a2bbdfe2547c1059e2e97d7f87ca69ee", "committedDate": "2020-05-22T12:09:38Z", "message": "Add cast support for the string type with the length limit."}, "afterCommit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9", "committedDate": "2020-05-22T14:06:24Z", "message": "Add cast support for the string type with the length limit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTQwMjEw", "url": "https://github.com/crate/crate/pull/9982#pullrequestreview-416940210", "createdAt": "2020-05-22T14:08:25Z", "commit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDowODoyNVrOGZYd7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDowODoyNVrOGZYd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2ODQ2MQ==", "bodyText": "i've added another assertion with a string literal that contains whitespaces, but it shouldn't be different from any other literal at this point. I am not sure whether now it needs a dedicated use test scenario.", "url": "https://github.com/crate/crate/pull/9982#discussion_r429268461", "createdAt": "2020-05-22T14:08:25Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/types/StringTypeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.test.integration.CrateUnitTest;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StringTypeTest extends CrateUnitTest {\n+\n+    @Test\n+    public void test_convert_boolean_to_text() {\n+        assertThat(DataTypes.STRING.value(true), is(\"t\"));\n+        assertThat(DataTypes.STRING.value(false), is(\"f\"));\n+    }\n+\n+    @Test\n+    public void test_convert_long_to_text() {\n+        assertThat(DataTypes.STRING.value(123L), is(\"123\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_length_limit() {\n+        var stringDataType = StringType.of(10);\n+        assertThat(stringDataType.unbound(), is(false));\n+        assertThat(stringDataType.lengthLimit(), is(10));\n+    }\n+\n+    @Test\n+    public void test_text_type_without_length_limit_on_string_literal() {\n+        assertThat(StringType.INSTANCE.value(\"abc\"), is(\"abc\"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_gt_length_limit_truncates_chars() {\n+        assertThat(StringType.of(1).value(\"abcde\"), is(\"a\"));\n+        assertThat(StringType.of(2).value(\"a    \"), is(\"a \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTg2ODE4", "url": "https://github.com/crate/crate/pull/9982#pullrequestreview-416986818", "createdAt": "2020-05-22T15:10:27Z", "commit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxMDoyN1rOGZaqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxMDoyN1rOGZaqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDQ0Mg==", "bodyText": "I realize that the test case was just moved, but maybe for a separate commit or a follow up:\nMaybe the error could also give a hint on what would be correct. E.g. StringType can only have a single parameter value, received: ...\nAlso in the other error messages. E.g. with 0 it could point out that it must be > 0.", "url": "https://github.com/crate/crate/pull/9982#discussion_r429304442", "createdAt": "2020-05-22T15:10:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/types/StringTypeTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.test.integration.CrateUnitTest;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+\n+public class StringTypeTest extends CrateUnitTest {\n+\n+    @Test\n+    public void test_convert_boolean_to_text() {\n+        assertThat(DataTypes.STRING.value(true), is(\"t\"));\n+        assertThat(DataTypes.STRING.value(false), is(\"f\"));\n+    }\n+\n+    @Test\n+    public void test_convert_long_to_text() {\n+        assertThat(DataTypes.STRING.value(123L), is(\"123\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_length_limit() {\n+        var stringDataType = StringType.of(10);\n+        assertThat(stringDataType.unbound(), is(false));\n+        assertThat(stringDataType.lengthLimit(), is(10));\n+    }\n+\n+    @Test\n+    public void test_text_type_without_length_limit_on_string_literal() {\n+        assertThat(StringType.INSTANCE.value(\"abc\"), is(\"abc\"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_gt_length_limit_truncates_chars() {\n+        assertThat(StringType.of(1).value(\"abcde\"), is(\"a\"));\n+        assertThat(StringType.of(2).value(\"a    \"), is(\"a \"));\n+    }\n+\n+    @Test\n+    public void test_text_type_with_length_on_string_literal_of_length_lte_length() {\n+        assertThat(StringType.of(5).value(\"abc\"), is(\"abc\"));\n+        assertThat(StringType.of(1).value(\"a\"), is(\"a\"));\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_negative_length_limit_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"Invalid text data type length limit: -1\");\n+        StringType.of(-1);\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_zero_length_limit_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"Invalid text data type length limit: 0\");\n+        StringType.of(0);\n+    }\n+\n+    @Test\n+    public void test_create_text_type_with_wrong_number_of_parameters_throws_exception() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"The number of parameters for the text data is wrong: 2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8290d2ab39cf74534a4d4b99e28b18d1e2b07ec9"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "committedDate": "2020-05-25T08:33:03Z", "message": "Improve error messages for StringType#of preconditions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09e391e7b11e42291093c820f7b89a2205b4060f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/09e391e7b11e42291093c820f7b89a2205b4060f", "committedDate": "2020-05-25T08:24:26Z", "message": "Improve error messages for StringType#of preconditions."}, "afterCommit": {"oid": "1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67", "committedDate": "2020-05-25T08:33:03Z", "message": "Improve error messages for StringType#of preconditions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTUyOTYy", "url": "https://github.com/crate/crate/pull/9982#pullrequestreview-417552962", "createdAt": "2020-05-25T08:39:15Z", "commit": {"oid": "1f0c1ddbf5b6307e6cc8b41b6b28a30140e4ed67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3409, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}