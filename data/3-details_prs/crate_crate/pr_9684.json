{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTU3MjIz", "number": 9684, "title": "Deduplicate fields and outputs", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis is a early draft. Not sure if this is going to work out.\nRough outline:\n\n\nRemoves fields from AnalyzedRelation. There are only outputs\n\n\nChanges Field to ScopedSymbol, which is only added when a relation\nintroduces a new scope. (E.g. in SELECT t1.x, t2.x FROM t AS t1, t AS\nt2, it is necessary to distinguish between t1.x and t2.x, so AS t1\nneeds to introduce a scope)\n\n\nAdds AliasSymbol to preserve the AS <xy> information\n\n\nChanges the LogicalPlanner to only process the clauses of a relation that\nare really there. (Only QueriedSelectRelation can contain WHERE, GROUP BY,\nHAVING, etc...)\n\n\nMerged QueriedSelectRelation and MultiSourceSelect. Also changes\nQualifiedName usages to RelationName - so that everything is unified to\nRelationName after the Analyzer.\n\n\n??\n\n\nProfit\n\n\nThings that can be followed up on in later PRs:\n\n Remove WhereClause/HavingClause usage in the AnalyzedRelation and replace it with simple Symbols. It is trappy in the current state because the Filter operator drops partition information. (A non issue right now, but stab us in the back later)\n Remove SplitPoints and eager toCollect/outputs propagation in the PlanBuilder\n Subscript handling can likely be cleaned up more. (And optimized)\n Proper SymbolPrinting support for window functions and re-create COUNT(DISTINCT)\n Get rid of ExplainLeaf representation and use SymbolPrinter everywhere instead.\n Maybe introduce some common base class for ScopedSymbol and Reference, or make Reference extend ScopedSymbol, so that in many places we don't have to handle them both. Or maybe go the other route and have ScopedSymbol everywhere except the very last moment when building the execution plan.\n\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-02-17T14:10:44Z", "url": "https://github.com/crate/crate/pull/9684", "merged": true, "mergeCommit": {"oid": "f013bbeae63e7e73f11c6d96268d04faa46e8ed4"}, "closed": true, "closedAt": "2020-02-26T15:53:26Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFPU4KgBqjMwNDQyMjEyMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIIZBjgBqjMwNzQxOTg0MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1563bb8145fa0555ba3c339d6b44ba7bcd9fed4", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d1563bb8145fa0555ba3c339d6b44ba7bcd9fed4", "committedDate": "2020-02-17T14:10:08Z", "message": "WIP: Field \u2192 ScopedSymbol"}, "afterCommit": {"oid": "6ae22582cd75d4e6c84fbfbda31abdc255cd3603", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6ae22582cd75d4e6c84fbfbda31abdc255cd3603", "committedDate": "2020-02-17T15:46:55Z", "message": "WIP: R.I.P RelationBoundary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ae22582cd75d4e6c84fbfbda31abdc255cd3603", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6ae22582cd75d4e6c84fbfbda31abdc255cd3603", "committedDate": "2020-02-17T15:46:55Z", "message": "WIP: R.I.P RelationBoundary"}, "afterCommit": {"oid": "fe940e2560d16682ec9821c4a2c6926eb8f0a1b2", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/fe940e2560d16682ec9821c4a2c6926eb8f0a1b2", "committedDate": "2020-02-18T18:32:25Z", "message": "fixup! fixup! WIP: Deduplicate fields and outputs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe940e2560d16682ec9821c4a2c6926eb8f0a1b2", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/fe940e2560d16682ec9821c4a2c6926eb8f0a1b2", "committedDate": "2020-02-18T18:32:25Z", "message": "fixup! fixup! WIP: Deduplicate fields and outputs"}, "afterCommit": {"oid": "4cd0a7d7c931930913835fe87dd39e9a6a3a3965", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/4cd0a7d7c931930913835fe87dd39e9a6a3a3965", "committedDate": "2020-02-20T16:06:59Z", "message": "160 - LogicalPlanner new plan building"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88e874cb603729b736fab668c85812ef6fb36a64", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/88e874cb603729b736fab668c85812ef6fb36a64", "committedDate": "2020-02-20T16:38:57Z", "message": "147 - scopedSymbol in view"}, "afterCommit": {"oid": "870db421754f70de71c045e4e21c0f433604d83c", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/870db421754f70de71c045e4e21c0f433604d83c", "committedDate": "2020-02-21T23:00:25Z", "message": "139"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c25c6832d820ba6af311bcc70140cce92850a609", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c25c6832d820ba6af311bcc70140cce92850a609", "committedDate": "2020-02-24T14:09:44Z", "message": "27"}, "afterCommit": {"oid": "bae95c0a8769a4bdd3180dd768b0ebf3b03ca433", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/bae95c0a8769a4bdd3180dd768b0ebf3b03ca433", "committedDate": "2020-02-24T16:19:58Z", "message": "17"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e64da746607587e46fb9cdfd804b091189711fd", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/7e64da746607587e46fb9cdfd804b091189711fd", "committedDate": "2020-02-26T10:01:14Z", "message": "Fix doctests"}, "afterCommit": {"oid": "8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0", "committedDate": "2020-02-26T10:29:49Z", "message": "Deduplicate fields and outputs\n\nRough outline:\n\n- Removes `fields` from `AnalyzedRelation`. There are only `outputs`\n\n- Changes `Field` to `ScopedSymbol`, which is only added when a relation\n  introduces a new scope. (E.g. in SELECT t1.x, t2.x FROM t AS t1, t AS\n  t2, it is necessary to distinguish between t1.x and t2.x, so `AS t1`\n  needs to introduce a scope)\n\n- Adds `AliasSymbol` to preserve the `AS <xy>` information\n\n- Merges `QueriedSelectRelation` and `MultiSourceSelect`. Also changes\n  `QualifiedName` usages to `RelationName` - so that everything is unified to\n  `RelationName` after the Analyzer.\n\n- Changes the `LogicalPlanner` to only process the clauses of a relation that\n  are really there. (Only `QueriedSelectRelation` can contain WHERE, GROUP BY,\n  HAVING, etc...)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0", "committedDate": "2020-02-26T10:29:49Z", "message": "Deduplicate fields and outputs\n\nRough outline:\n\n- Removes `fields` from `AnalyzedRelation`. There are only `outputs`\n\n- Changes `Field` to `ScopedSymbol`, which is only added when a relation\n  introduces a new scope. (E.g. in SELECT t1.x, t2.x FROM t AS t1, t AS\n  t2, it is necessary to distinguish between t1.x and t2.x, so `AS t1`\n  needs to introduce a scope)\n\n- Adds `AliasSymbol` to preserve the `AS <xy>` information\n\n- Merges `QueriedSelectRelation` and `MultiSourceSelect`. Also changes\n  `QualifiedName` usages to `RelationName` - so that everything is unified to\n  `RelationName` after the Analyzer.\n\n- Changes the `LogicalPlanner` to only process the clauses of a relation that\n  are really there. (Only `QueriedSelectRelation` can contain WHERE, GROUP BY,\n  HAVING, etc...)"}, "afterCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d38b0dfc147be13b9d8421166b22a8c8d50ea666", "committedDate": "2020-02-26T11:59:28Z", "message": "fixup! Deduplicate fields and outputs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Nzg3NTU4", "url": "https://github.com/crate/crate/pull/9684#pullrequestreview-364787558", "createdAt": "2020-02-26T10:33:25Z", "commit": {"oid": "8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozMzoyNVrOFumSZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozMzoyNVrOFumSZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNjExNw==", "bodyText": "This is now supported", "url": "https://github.com/crate/crate/pull/9684#discussion_r384406117", "createdAt": "2020-02-26T10:33:25Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -93,12 +93,6 @@ The columns are named ``colN`` where N is a number starting at 1.\n     +------+----------+\n     SELECT 3 rows in set (... sec)\n \n-If an array with object literals is passed into unnest the object will be\n-regarded as a object with column policy ``ignored``. This means that it is not\n-possible to access values of the object using the subscript notation::\n-\n-    cr> select col1['x'] from unnest([{x=10}]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad0cf4b74cb0890e2765a6b3990b8c2ec0083d0"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTI3MTkw", "url": "https://github.com/crate/crate/pull/9684#pullrequestreview-364927190", "createdAt": "2020-02-26T14:10:43Z", "commit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDoxMDo0M1rOFus6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1MjowNFrOFuuk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNDczOQ==", "bodyText": "isn't this comment in general still valid/interesting?", "url": "https://github.com/crate/crate/pull/9684#discussion_r384514739", "createdAt": "2020-02-26T14:10:43Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/relations/UnionSelect.java", "diffHunk": "@@ -22,46 +22,36 @@\n \n package io.crate.analyze.relations;\n \n-import io.crate.analyze.Fields;\n-import io.crate.analyze.HavingClause;\n-import io.crate.analyze.OrderBy;\n-import io.crate.analyze.Relations;\n-import io.crate.analyze.WhereClause;\n import io.crate.exceptions.ColumnUnknownException;\n-import io.crate.expression.symbol.Field;\n+import io.crate.expression.symbol.ScopedSymbol;\n import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n import io.crate.metadata.ColumnIdent;\n+import io.crate.metadata.RelationName;\n import io.crate.metadata.table.Operation;\n-import io.crate.sql.tree.QualifiedName;\n+import org.elasticsearch.common.UUIDs;\n \n import javax.annotation.Nonnull;\n-import javax.annotation.Nullable;\n+import java.util.ArrayList;\n import java.util.List;\n \n public class UnionSelect implements AnalyzedRelation {\n \n-    private final Fields fields;\n     private final AnalyzedRelation left;\n     private final AnalyzedRelation right;\n-    private final List<Symbol> outputs;\n-    private final QualifiedName name;\n+    private final List<ScopedSymbol> outputs;\n+    private final RelationName name;\n \n     public UnionSelect(AnalyzedRelation left, AnalyzedRelation right) {\n         this.left = left;\n         this.right = right;\n-        this.name = left.getQualifiedName();\n-\n-        List<Field> fieldsFromLeft = left.fields();\n-        fields = new Fields(fieldsFromLeft.size());\n-        for (Field field : fieldsFromLeft) {\n-            // Creating a field that points to the field of the left relation isn't 100% accurate.\n-            // We're pointing to *two* symbols (both left AND right).\n-            // We could either use a `InputColumn` to do that (by pointing to a position) - (but might be confusing to have InputColumns in the analysis already)\n-            // Or introduce a `UnionSymbol` or `UnionField` which would take two symbols it is pointing to\n-            // Since this currently has no effect we go with the left symbol until there is a good reason to change it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUyMDM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert newArg1 != null : arg1 + \" became NULL, symbols must never conver to NULL\";\n          \n          \n            \n                    assert newArg1 != null : arg1 + \" became NULL, symbols must never convert to NULL\";", "url": "https://github.com/crate/crate/pull/9684#discussion_r384520340", "createdAt": "2020-02-26T14:19:30Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/symbol/FunctionCopyVisitor.java", "diffHunk": "@@ -84,10 +86,12 @@ private Function manyArgs(Function func, C context) {\n     private Function twoArgs(Function func, C context) {\n         assert func.arguments().size() == 2 : \"size of arguments must be two\";\n         Symbol arg1 = func.arguments().get(0);\n-        Symbol newArg1 = requireNonNull(arg1.accept(this, context), \"function arguments must never be NULL\");\n+        Symbol newArg1 = arg1.accept(this, context);\n+        assert newArg1 != null : arg1 + \" became NULL, symbols must never conver to NULL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUyMDQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assert newArg2 != null : arg2 + \" became NULL, symbols must never conver to NULL\";\n          \n          \n            \n                    assert newArg2 != null : arg2 + \" became NULL, symbols must never convert to NULL\";", "url": "https://github.com/crate/crate/pull/9684#discussion_r384520469", "createdAt": "2020-02-26T14:19:42Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/symbol/FunctionCopyVisitor.java", "diffHunk": "@@ -84,10 +86,12 @@ private Function manyArgs(Function func, C context) {\n     private Function twoArgs(Function func, C context) {\n         assert func.arguments().size() == 2 : \"size of arguments must be two\";\n         Symbol arg1 = func.arguments().get(0);\n-        Symbol newArg1 = requireNonNull(arg1.accept(this, context), \"function arguments must never be NULL\");\n+        Symbol newArg1 = arg1.accept(this, context);\n+        assert newArg1 != null : arg1 + \" became NULL, symbols must never conver to NULL\";\n \n         Symbol arg2 = func.arguments().get(1);\n-        Symbol newArg2 = requireNonNull(arg2.accept(this, context), \"function arguments must never be NULL\");\n+        Symbol newArg2 = arg2.accept(this, context);\n+        assert newArg2 != null : arg2 + \" became NULL, symbols must never conver to NULL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTQ4Mg==", "bodyText": "looks like renamed by mistake?", "url": "https://github.com/crate/crate/pull/9684#discussion_r384541482", "createdAt": "2020-02-26T14:51:24Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/expression/reference/sys/node/NodeStatsContextScopedSymbolResolverTest.java", "diffHunk": "@@ -55,7 +55,7 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-public class NodeStatsContextFieldResolverTest {\n+public class NodeStatsContextScopedSymbolResolverTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTkzNg==", "bodyText": "Renamed by mistake?", "url": "https://github.com/crate/crate/pull/9684#discussion_r384541936", "createdAt": "2020-02-26T14:52:04Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/analyze/relations/ExcludedScopedSymbolProviderTest.java", "diffHunk": "@@ -23,36 +23,34 @@\n package io.crate.analyze.relations;\n \n import io.crate.analyze.ValuesResolver;\n-import io.crate.expression.symbol.Field;\n-import io.crate.expression.symbol.InputColumn;\n import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.ScopedSymbol;\n import io.crate.metadata.ColumnIdent;\n+import io.crate.metadata.RelationName;\n import io.crate.metadata.table.Operation;\n import io.crate.sql.tree.QualifiedName;\n import io.crate.types.DataTypes;\n import org.junit.Test;\n-import org.mockito.Mockito;\n \n import static io.crate.testing.SymbolMatchers.isField;\n import static io.crate.testing.SymbolMatchers.isLiteral;\n-import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertThat;\n \n-public class ExcludedFieldProviderTest {\n+public class ExcludedScopedSymbolProviderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38b0dfc147be13b9d8421166b22a8c8d50ea666"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82af92faea7a5609de787095bf29630344dc6e0", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c82af92faea7a5609de787095bf29630344dc6e0", "committedDate": "2020-02-26T15:19:14Z", "message": "Deduplicate fields and outputs\n\nRough outline:\n\n- Removes `fields` from `AnalyzedRelation`. There are only `outputs`\n\n- Changes `Field` to `ScopedSymbol`, which is only added when a relation\n  introduces a new scope. (E.g. in SELECT t1.x, t2.x FROM t AS t1, t AS\n  t2, it is necessary to distinguish between t1.x and t2.x, so `AS t1`\n  needs to introduce a scope)\n\n- Adds `AliasSymbol` to preserve the `AS <xy>` information\n\n- Merges `QueriedSelectRelation` and `MultiSourceSelect`. Also changes\n  `QualifiedName` usages to `RelationName` - so that everything is unified to\n  `RelationName` after the Analyzer.\n\n- Changes the `LogicalPlanner` to only process the clauses of a relation that\n  are really there. (Only `QueriedSelectRelation` can contain WHERE, GROUP BY,\n  HAVING, etc...)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54bc66bb98df38149201cc006f5c65c1fdf1f003", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/54bc66bb98df38149201cc006f5c65c1fdf1f003", "committedDate": "2020-02-26T15:12:01Z", "message": "Update sql/src/main/java/io/crate/expression/symbol/FunctionCopyVisitor.java\n\nCo-Authored-By: Sebastian Utz <su@rtme.net>"}, "afterCommit": {"oid": "c82af92faea7a5609de787095bf29630344dc6e0", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c82af92faea7a5609de787095bf29630344dc6e0", "committedDate": "2020-02-26T15:19:14Z", "message": "Deduplicate fields and outputs\n\nRough outline:\n\n- Removes `fields` from `AnalyzedRelation`. There are only `outputs`\n\n- Changes `Field` to `ScopedSymbol`, which is only added when a relation\n  introduces a new scope. (E.g. in SELECT t1.x, t2.x FROM t AS t1, t AS\n  t2, it is necessary to distinguish between t1.x and t2.x, so `AS t1`\n  needs to introduce a scope)\n\n- Adds `AliasSymbol` to preserve the `AS <xy>` information\n\n- Merges `QueriedSelectRelation` and `MultiSourceSelect`. Also changes\n  `QualifiedName` usages to `RelationName` - so that everything is unified to\n  `RelationName` after the Analyzer.\n\n- Changes the `LogicalPlanner` to only process the clauses of a relation that\n  are really there. (Only `QueriedSelectRelation` can contain WHERE, GROUP BY,\n  HAVING, etc...)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3866, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}