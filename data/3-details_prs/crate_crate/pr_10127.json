{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MDk0NTAw", "number": 10127, "title": "Fix ORDER BY handling on table functions", "bodyText": "Summary of the changes / Why this improves CrateDB\nFixes #10122\nThis got already fixed in master with the changes to how the operator\ntree is built.\nIn 4.1 the standalone outputs contained the table-function un-evaluated\n(which is an Iterable<Row> value - for which there is no type and no\nsize estimator, which led to a runtime exception)\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-24T09:52:43Z", "url": "https://github.com/crate/crate/pull/10127", "merged": true, "mergeCommit": {"oid": "780c6a3e422cab8ace3bb87d0cd8cbf489fc63c1"}, "closed": true, "closedAt": "2020-06-24T11:21:14Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuW2T_AH2gAyNDM5MDk0NTAwOmNlNzE3MTg5NmE0NDZmODM2Njc5N2Y2NDQyYTU1ZDNhMGYwOWE4Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuX0kXAFqTQzNjUzMDg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/ce7171896a446f8366797f6442a55d3a0f09a837", "committedDate": "2020-06-24T09:43:50Z", "message": "Fix ORDER BY handling on table functions\n\nFixes https://github.com/crate/crate/issues/10122\n\nThis got already fixed in master with the changes to how the operator\ntree is built.\n\nIn 4.1 the standalone outputs contained the table-function un-evaluated\n(which is an `Iterable<Row>` value - for which there is no type and no\nsize estimator, which led to a runtime exception)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDk4NDky", "url": "https://github.com/crate/crate/pull/10127#pullrequestreview-436498492", "createdAt": "2020-06-24T09:55:35Z", "commit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo1NTozNVrOGoLScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo1NTozNVrOGoLScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ==", "bodyText": "Do you think it makes sense to port this change back to master as well? I think the column-pruning optimization \"fixes\" this in master.", "url": "https://github.com/crate/crate/pull/10127#discussion_r444781171", "createdAt": "2020-06-24T09:55:35Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTMwODcx", "url": "https://github.com/crate/crate/pull/10127#pullrequestreview-436530871", "createdAt": "2020-06-24T10:44:35Z", "commit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0NDozNVrOGoM0FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0NDozNVrOGoM0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwNjE2NA==", "bodyText": "Yes makes sense.", "url": "https://github.com/crate/crate/pull/10127#discussion_r444806164", "createdAt": "2020-06-24T10:44:35Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/planner/operators/ProjectSet.java", "diffHunk": "@@ -57,15 +58,9 @@\n             allUsedColumns.addAll(columnsUsedInTableFunctions);\n             LogicalPlan sourcePlan = source.build(tableStats, hints, allUsedColumns, params);\n \n-            // Use sourcePlan.outputs() as standalone to simply pass along all source outputs as well;\n-            // Parent operators will discard them if not required\n-            // The reason to do this is that we've no good way to detect what is required. E.g.\n-            // select tableFunction(agg), agg, x\n-            //  -> agg is used as argument in tableFunction, but is also standalone,\n-            //     so we can't simply discard any source outputs that are used as arguments for the table functions.\n-            //  -> x might be converted to _fetch by the Collect operator,\n-            //       so we don't necessarily \"get\" the outputs we would expect based on the select list.\n-            return new ProjectSet(sourcePlan, tableFunctions, sourcePlan.outputs());\n+            ArrayList<Symbol> standalone = new ArrayList<>(sourcePlan.outputs());\n+            standalone.removeAll(tableFunctions);\n+            return new ProjectSet(sourcePlan, tableFunctions, standalone);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTE3MQ=="}, "originalCommit": {"oid": "ce7171896a446f8366797f6442a55d3a0f09a837"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3148, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}