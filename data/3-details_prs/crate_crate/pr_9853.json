{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjA4Mjg5", "number": 9853, "title": "Add fast function lookup-by-signature support", "bodyText": "Summary of the changes / Why this improves CrateDB\nAdd support to lookup a function directly by its declared signature.\nBefore that, looking up a function which uses the signature based\nregistry, resulted in a full expensive signature match logic.\nThis improvement may fix related existing performance regressions.\nFunction implementations must carry the signature and also the signature\nmust be streamable in order for this to work.\nWe carry now both, a FunctionIdent and a Signature all through the\ncode base to be able to still support the old registry to migrate\nall functions iterative.\nEventually the FunctionInfo (and FunctionIdent) should be replaced\nby a Signature after all functions are migrated.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-04-03T14:31:02Z", "url": "https://github.com/crate/crate/pull/9853", "merged": true, "mergeCommit": {"oid": "280cb15b80b499f466edb69ab010c89a3225fd1d"}, "closed": true, "closedAt": "2020-04-23T09:52:11Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUB_1mABqjMxOTY3MTg4Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaZQrAgBqjMyNjQxNTAyMjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50a8ac1ac4c4d81a21515fb2cb2b76e980ad9fc6", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/50a8ac1ac4c4d81a21515fb2cb2b76e980ad9fc6", "committedDate": "2020-04-03T14:29:35Z", "message": "Add fast function lookup-by-signature support\n\nAdd support to lookup a function directly by its declared signature.\nBefore that, looking up a function which uses the signature based\nregistry, resulted in a full expensive signature match logic.\nThis improvement may fix related existing performance regressions.\n\nFunction implementations must carry the signature and also the signature\nmust be streamable in order for this to work.\n\nWe carry now both, a `FunctionIdent` and a `Signature` all through the\ncode base to be able to still support the old registry to migrate\nall functions iterative.\nEventually the `FunctionInfo` (and `FunctionIdent`) should be replaced\nby a `Signature` after all functions are migrated."}, "afterCommit": {"oid": "587aed21ca2d07e904b5c17482a0b6a2b92a972b", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/587aed21ca2d07e904b5c17482a0b6a2b92a972b", "committedDate": "2020-04-03T14:42:08Z", "message": "Add fast function lookup-by-signature support\n\nAdd support to lookup a function directly by its declared signature.\nBefore that, looking up a function which uses the signature based\nregistry, resulted in a full expensive signature match logic.\nThis improvement may fix related existing performance regressions.\n\nFunction implementations must carry the signature and also the signature\nmust be streamable in order for this to work.\n\nWe carry now both, a `FunctionIdent` and a `Signature` all through the\ncode base to be able to still support the old registry to migrate\nall functions iterative.\nEventually the `FunctionInfo` (and `FunctionIdent`) should be replaced\nby a `Signature` after all functions are migrated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDI5NDQz", "url": "https://github.com/crate/crate/pull/9853#pullrequestreview-387429443", "createdAt": "2020-04-03T17:01:20Z", "commit": {"oid": "f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowMToyMVrOGAeRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowMToyMVrOGAeRpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0OTIyMQ==", "bodyText": "Is this safe to stream TypeSignature like this? I think this could lose information if it's  ObjectParameterTypeSignature", "url": "https://github.com/crate/crate/pull/9853#discussion_r403149221", "createdAt": "2020-04-03T17:01:21Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -231,6 +237,29 @@ private Signature(FunctionName name,\n         this.allowCoercion = allowCoercion;\n     }\n \n+    public Signature(StreamInput in) throws IOException {\n+        name = new FunctionName(in);\n+        kind = FunctionInfo.Type.values()[in.readVInt()];\n+        int argsSize = in.readVInt();\n+        argumentTypes = new ArrayList<>(argsSize);\n+        for (int i = 0; i < argsSize; i++) {\n+            argumentTypes.add(new TypeSignature(in));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/f91eecbd1c14a1bd3aa6bf02d4d4a5962e40de54", "committedDate": "2020-04-03T16:43:18Z", "message": "fixup! Add fast function lookup-by-signature support"}, "afterCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/407255033a2e692c61cffba2ae3cdfd96e33307c", "committedDate": "2020-04-22T15:31:17Z", "message": "Move signature binding-only relevant info into own class\n\nThus only information required for looking up a function by signature\nwill be streamed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODEyMDc5", "url": "https://github.com/crate/crate/pull/9853#pullrequestreview-398812079", "createdAt": "2020-04-23T07:02:43Z", "commit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzowMjo0M1rOGKZ0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNzo0MlrOGKaU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2MTk5OA==", "bodyText": "This case will be removed once all functions are migrated,  right?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413561998", "createdAt": "2020-04-23T07:02:43Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -613,8 +614,15 @@ public AnalyzedRelation visitTableFunction(TableFunction node, StatementAnalysis\n         }\n         Function function = (Function) symbol;\n         FunctionIdent ident = function.info().ident();\n+        Signature signature = function.signature();\n \n-        FunctionImplementation functionImplementation = functions.getQualified(ident);\n+        FunctionImplementation functionImplementation;\n+        if (signature == null) {\n+            functionImplementation = functions.getQualified(ident);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NTc4Mw==", "bodyText": "This should probably be 4.2, no?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413565783", "createdAt": "2020-04-23T07:09:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "diffHunk": "@@ -66,10 +64,27 @@ public Aggregation(FunctionInfo functionInfo,\n \n         this.valueType = valueType;\n         this.functionInfo = functionInfo;\n+        this.signature = signature;\n         this.inputs = inputs;\n         this.filter = filter;\n     }\n \n+    public Aggregation(StreamInput in) throws IOException {\n+        functionInfo = new FunctionInfo(in);\n+        valueType = DataTypes.fromStream(in);\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0)) {\n+            filter = Symbols.fromStream(in);\n+        } else {\n+            filter = Literal.BOOLEAN_TRUE;\n+        }\n+        inputs = Symbols.listFromStream(in);\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0) && in.readBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NTkwNw==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/9853#discussion_r413565907", "createdAt": "2020-04-23T07:10:04Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Aggregation.java", "diffHunk": "@@ -105,7 +125,12 @@ public void writeTo(StreamOutput out) throws IOException {\n             Symbols.toStream(filter, out);\n         }\n         Symbols.toStream(inputs, out);\n-\n+        if (out.getVersion().onOrAfter(Version.V_4_1_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NjAzNQ==", "bodyText": "4.2", "url": "https://github.com/crate/crate/pull/9853#discussion_r413566035", "createdAt": "2020-04-23T07:10:20Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -98,17 +101,27 @@ public Function(StreamInput in) throws IOException {\n             filter = null;\n         }\n         arguments = List.copyOf(Symbols.listFromStream(in));\n+        if (in.getVersion().onOrAfter(Version.V_4_1_0) && in.readBoolean()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NjEzOQ==", "bodyText": "here as well", "url": "https://github.com/crate/crate/pull/9853#discussion_r413566139", "createdAt": "2020-04-23T07:10:33Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -191,6 +211,12 @@ public void writeTo(StreamOutput out) throws IOException {\n             Symbols.nullableToStream(filter, out);\n         }\n         Symbols.toStream(arguments, out);\n+        if (out.getVersion().onOrAfter(Version.V_4_1_0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2NzQ0OA==", "bodyText": "This can be nullable", "url": "https://github.com/crate/crate/pull/9853#discussion_r413567448", "createdAt": "2020-04-23T07:12:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/functions/Signature.java", "diffHunk": "@@ -269,25 +290,49 @@ public TypeSignature getReturnType() {\n         return returnType;\n     }\n \n-    public List<TypeVariableConstraint> getTypeVariableConstraints() {\n-        return typeVariableConstraints;\n+    public SignatureBindingInfo getBindingInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MDI3Nw==", "bodyText": "For Symbol and DataType we've static methods to handle the ordinal handling.\n    public static void toStream(DataType type, StreamOutput out) throws IOException {\n        out.writeVInt(type.id());\n        type.writeTo(out);\n    }\n\nDo you think it would make sense to follow that pattern here too?", "url": "https://github.com/crate/crate/pull/9853#discussion_r413570277", "createdAt": "2020-04-23T07:17:42Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -143,6 +157,16 @@ public String getBaseTypeName() {\n         return DataTypes.ofName(baseTypeName);\n     }\n \n+    @Override\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeString(baseTypeName);\n+        out.writeVInt(parameters.size());\n+        for (TypeSignature parameter : parameters) {\n+            out.writeVInt(parameter.type().ordinal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407255033a2e692c61cffba2ae3cdfd96e33307c"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTA0MzUz", "url": "https://github.com/crate/crate/pull/9853#pullrequestreview-398904353", "createdAt": "2020-04-23T09:06:46Z", "commit": {"oid": "9f43bbd6e63f7a1fa8332ee0d324baaa04bb0661"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3320aed7a3064a45c38f262c4419a73dbb72ea", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/1a3320aed7a3064a45c38f262c4419a73dbb72ea", "committedDate": "2020-04-23T09:12:31Z", "message": "Add fast function lookup-by-signature support\n\nAdd support to lookup a function directly by its declared signature.\nBefore that, looking up a function which uses the signature based\nregistry, resulted in a full expensive signature match logic.\nThis improvement may fix related existing performance regressions.\n\nFunction implementations must carry the signature and also the signature\nmust be streamable in order for this to work.\n\nWe carry now both, a `FunctionIdent` and a `Signature` all through the\ncode base to be able to still support the old registry to migrate\nall functions iterative.\nEventually the `FunctionInfo` (and `FunctionIdent`) should be replaced\nby a `Signature` after all functions are migrated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c34019e979307c33d782a88a6529765f7a82f5f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/4c34019e979307c33d782a88a6529765f7a82f5f", "committedDate": "2020-04-23T09:12:31Z", "message": "Raise error on registering functions with same signature\n\nAlso some signature properties are excluded from streaming to lower the\nfootprint and won\u2019t be taken into account when resolving functions by\nsignature. Thus registering functions which signatures only differ in\nthus properties should raise an error to avoid unexpected behaviour."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f43bbd6e63f7a1fa8332ee0d324baaa04bb0661", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/9f43bbd6e63f7a1fa8332ee0d324baaa04bb0661", "committedDate": "2020-04-23T08:33:59Z", "message": "Raise error on registering functions with same signature\n\nAlso some signature properties are excluded from streaming to lower the\nfootprint and won\u2019t be taken into account when resolving functions by\nsignature. Thus registering functions which signatures only differ in\nthus properties should raise an error to avoid unexpected behaviour."}, "afterCommit": {"oid": "4c34019e979307c33d782a88a6529765f7a82f5f", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/4c34019e979307c33d782a88a6529765f7a82f5f", "committedDate": "2020-04-23T09:12:31Z", "message": "Raise error on registering functions with same signature\n\nAlso some signature properties are excluded from streaming to lower the\nfootprint and won\u2019t be taken into account when resolving functions by\nsignature. Thus registering functions which signatures only differ in\nthus properties should raise an error to avoid unexpected behaviour."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3515, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}