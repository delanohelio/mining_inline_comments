{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODg1OTAw", "number": 10384, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzowMjo0NlrOEZVtXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzowMjo0NlrOEZVtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDA1NTMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/aggregation/impl/ArbitraryAggregation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzowMjo0NlrOHCGAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODo1NzowNFrOHCKH1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1NzY3Mw==", "bodyText": "I think we could use the value directly without the wrapper in this case. There is no primitive type involved, so it doesn't avoid boxing. Or am I missing something?", "url": "https://github.com/crate/crate/pull/10384#discussion_r471957673", "createdAt": "2020-08-18T07:02:46Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/aggregation/impl/ArbitraryAggregation.java", "diffHunk": "@@ -108,4 +125,97 @@ public Object reduce(RamAccounting ramAccounting, Object state1, Object state2)\n     public Object terminatePartial(RamAccounting ramAccounting, Object state) {\n         return state;\n     }\n+\n+    @Nullable\n+    @Override\n+    public DocValueAggregator<?> getDocValueAggregator(List<DataType<?>> argumentTypes,\n+                                                       List<MappedFieldType> fieldTypes) {\n+        var dataType = argumentTypes.get(0);\n+        switch (dataType.id()) {\n+            case ByteType.ID:\n+            case ShortType.ID:\n+            case IntegerType.ID:\n+            case LongType.ID:\n+            case TimestampType.ID_WITH_TZ:\n+            case TimestampType.ID_WITHOUT_TZ:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            state.setValue(values.nextValue());\n+                        }\n+                    }\n+                );\n+            case FloatType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableIntToFloat((int) values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case DoubleType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableLongToDouble(values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case IpType.ID:\n+            case StringType.ID:\n+                return new BinaryDocValueAggregator<>(\n+                    fieldTypes.get(0).name(),\n+                    MutableObject::new,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24950717d34dd3dc0d49651dbff77e9041a1f60d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyMzEwNA==", "bodyText": "But I still need to have the state represented by some kind of a reference holder, otherwise, if it would be e.g. just an object ref it won't be possible to set/point the state to the extracted doc value.", "url": "https://github.com/crate/crate/pull/10384#discussion_r472023104", "createdAt": "2020-08-18T08:53:51Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/execution/engine/aggregation/impl/ArbitraryAggregation.java", "diffHunk": "@@ -108,4 +125,97 @@ public Object reduce(RamAccounting ramAccounting, Object state1, Object state2)\n     public Object terminatePartial(RamAccounting ramAccounting, Object state) {\n         return state;\n     }\n+\n+    @Nullable\n+    @Override\n+    public DocValueAggregator<?> getDocValueAggregator(List<DataType<?>> argumentTypes,\n+                                                       List<MappedFieldType> fieldTypes) {\n+        var dataType = argumentTypes.get(0);\n+        switch (dataType.id()) {\n+            case ByteType.ID:\n+            case ShortType.ID:\n+            case IntegerType.ID:\n+            case LongType.ID:\n+            case TimestampType.ID_WITH_TZ:\n+            case TimestampType.ID_WITHOUT_TZ:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            state.setValue(values.nextValue());\n+                        }\n+                    }\n+                );\n+            case FloatType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableIntToFloat((int) values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case DoubleType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableLongToDouble(values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case IpType.ID:\n+            case StringType.ID:\n+                return new BinaryDocValueAggregator<>(\n+                    fieldTypes.get(0).name(),\n+                    MutableObject::new,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1NzY3Mw=="}, "originalCommit": {"oid": "24950717d34dd3dc0d49651dbff77e9041a1f60d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNTA0NQ==", "bodyText": "Ah right, the apply of the DocValueAggregator only works with side effects.", "url": "https://github.com/crate/crate/pull/10384#discussion_r472025045", "createdAt": "2020-08-18T08:57:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/aggregation/impl/ArbitraryAggregation.java", "diffHunk": "@@ -108,4 +125,97 @@ public Object reduce(RamAccounting ramAccounting, Object state1, Object state2)\n     public Object terminatePartial(RamAccounting ramAccounting, Object state) {\n         return state;\n     }\n+\n+    @Nullable\n+    @Override\n+    public DocValueAggregator<?> getDocValueAggregator(List<DataType<?>> argumentTypes,\n+                                                       List<MappedFieldType> fieldTypes) {\n+        var dataType = argumentTypes.get(0);\n+        switch (dataType.id()) {\n+            case ByteType.ID:\n+            case ShortType.ID:\n+            case IntegerType.ID:\n+            case LongType.ID:\n+            case TimestampType.ID_WITH_TZ:\n+            case TimestampType.ID_WITHOUT_TZ:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            state.setValue(values.nextValue());\n+                        }\n+                    }\n+                );\n+            case FloatType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableIntToFloat((int) values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case DoubleType.ID:\n+                return new ArbitraryNumericDocValueAggregator(\n+                    fieldTypes.get(0).name(),\n+                    dataType,\n+                    (values, state) -> {\n+                        if (!state.hasValue()) {\n+                            var value = NumericUtils.sortableLongToDouble(values.nextValue());\n+                            state.setValue(value);\n+                        }\n+                    }\n+                );\n+            case IpType.ID:\n+            case StringType.ID:\n+                return new BinaryDocValueAggregator<>(\n+                    fieldTypes.get(0).name(),\n+                    MutableObject::new,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk1NzY3Mw=="}, "originalCommit": {"oid": "24950717d34dd3dc0d49651dbff77e9041a1f60d"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1277, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}