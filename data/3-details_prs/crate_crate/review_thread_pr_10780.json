{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjMyNzY2", "number": 10780, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDo1NTozN1rOE6mvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDo1NTozN1rOE6mvbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5ODg3NTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDo1NTozN1rOH1xr9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTowMToxN1rOH1x-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1MDY0Ng==", "bodyText": "the signatures return types are now all undefined, is it because they are not used?", "url": "https://github.com/crate/crate/pull/10780#discussion_r526150646", "createdAt": "2020-11-18T14:55:37Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -167,34 +166,16 @@ public InformationSchemaIterables(final Schemas schemas,\n             Stream.concat(\n                 sequentialStream(PGTypes.pgTypes())\n                     .filter(t -> t.typArray() != 0)\n-                    .map(InformationSchemaIterables::typeToSignature)\n+                    .map(x -> x.typReceive().asDummySignature())\n                     .map(PgProcTable.Entry::of),\n \n                 // Don't generate array_recv entry from pgTypes to avoid duplicate entries\n                 // (We want 1 array_recv entry, not one per array type)\n-                Stream.of(\n-                    PgProcTable.Entry.of(\n-                        Signature.scalar(\n-                            \"array_recv\",\n-                            DataTypes.INTEGER.getTypeSignature(),\n-                            new ArrayType<>(DataTypes.UNDEFINED).getTypeSignature()\n-                        )\n-                    )\n-                )\n+                Stream.of(PgProcTable.Entry.of(Regproc.of(\"array_recv\").asDummySignature()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc5bf6f4071659a5adfc539311c1c21be101baf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1NTM5Mw==", "bodyText": "The signature is used in columns of the pg_proc table, but given that we don't have a real array_recv, or  <type>_in / <type>_out functions I think it should be alright to use a dummy value.\nIf it turns out that it causes problems we'll probably have to introduce some kind of registry for the dummy pg streaming functions.", "url": "https://github.com/crate/crate/pull/10780#discussion_r526155393", "createdAt": "2020-11-18T15:01:17Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -167,34 +166,16 @@ public InformationSchemaIterables(final Schemas schemas,\n             Stream.concat(\n                 sequentialStream(PGTypes.pgTypes())\n                     .filter(t -> t.typArray() != 0)\n-                    .map(InformationSchemaIterables::typeToSignature)\n+                    .map(x -> x.typReceive().asDummySignature())\n                     .map(PgProcTable.Entry::of),\n \n                 // Don't generate array_recv entry from pgTypes to avoid duplicate entries\n                 // (We want 1 array_recv entry, not one per array type)\n-                Stream.of(\n-                    PgProcTable.Entry.of(\n-                        Signature.scalar(\n-                            \"array_recv\",\n-                            DataTypes.INTEGER.getTypeSignature(),\n-                            new ArrayType<>(DataTypes.UNDEFINED).getTypeSignature()\n-                        )\n-                    )\n-                )\n+                Stream.of(PgProcTable.Entry.of(Regproc.of(\"array_recv\").asDummySignature()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1MDY0Ng=="}, "originalCommit": {"oid": "edc5bf6f4071659a5adfc539311c1c21be101baf"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 919, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}