{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NDM0Mzcz", "number": 10527, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1OTozMFrOEjB4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1OTozMFrOEjB4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY2NDkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo1OTozMFrOHRKYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0MDowNVrOHRL2QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1Nzk3OQ==", "bodyText": "Not sure about this. The additional 20% or at most 100MB rule is not strictly necessary.\nBut taking up several GB for bulk requests seems too much.\nOr maybe the 20% is still too aggressive and we should go with something like 5% or 10%:\nWith 10%\n128.0 GB   \u2192 12800 MB\n16.0 GB    \u2192  1600 MB\n 8.0 GB    \u2192   800 MB\n 2.0 GB    \u2192   200 MB\n 0.5 GB    \u2192    50 MB\n\nWith 5%\n128.0 GB    \u2192  6400 MB\n 16.0 GB    \u2192   800 MB\n  8.0 GB    \u2192   400 MB\n  2.0 GB    \u2192   100 MB\n  0.5 GB    \u2192    25 MB", "url": "https://github.com/crate/crate/pull/10527#discussion_r487757979", "createdAt": "2020-09-14T08:59:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -351,7 +358,18 @@ private void maybeSetInterrupt(@Nullable Exception failure) {\n \n         @Override\n         public final boolean test(ShardedRequests<?, ?> shardedRequests) {\n-            return shardedRequests.usedMemoryEstimate() > maxBytesUsableByShardedRequests;\n+            long usedMemoryEstimate = shardedRequests.ramBytesUsed();\n+            boolean requestsTooBig = usedMemoryEstimate > maxBytesUsableByShardedRequests\n+                || usedMemoryEstimate > MAX_MEMORY_PER_REQUEST_IN_BYTES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002c18f118b5c7dbee70412a46a484d8a3d68da7"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MTk1Mw==", "bodyText": "As the 100MB can be reached quite fast, I'd tend more to lower the percentage to 10% to allow more on higher HEAP configurations. Or would you still keep the 100MB hard limit even with a lower percentage based threshold?", "url": "https://github.com/crate/crate/pull/10527#discussion_r487781953", "createdAt": "2020-09-14T09:40:05Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -351,7 +358,18 @@ private void maybeSetInterrupt(@Nullable Exception failure) {\n \n         @Override\n         public final boolean test(ShardedRequests<?, ?> shardedRequests) {\n-            return shardedRequests.usedMemoryEstimate() > maxBytesUsableByShardedRequests;\n+            long usedMemoryEstimate = shardedRequests.ramBytesUsed();\n+            boolean requestsTooBig = usedMemoryEstimate > maxBytesUsableByShardedRequests\n+                || usedMemoryEstimate > MAX_MEMORY_PER_REQUEST_IN_BYTES;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1Nzk3OQ=="}, "originalCommit": {"oid": "002c18f118b5c7dbee70412a46a484d8a3d68da7"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1006, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}