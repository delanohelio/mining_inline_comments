{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjU5NzE1", "number": 10651, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0ODo0MlrOEsr8oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMzoyOFrOEta6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjkyODMyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0ODo0MlrOHgEI-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0ODo0MlrOHgEI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDMxNQ==", "bodyText": "This is flaky and sometimes result in 5000 instead, any idea why?", "url": "https://github.com/crate/crate/pull/10651#discussion_r503384315", "createdAt": "2020-10-12T15:48:42Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -344,4 +349,20 @@ public void test_pg_function_is_visible_when_oid_is_retrieved_from_column() thro\n         assertThat(response.rows()[0][0], is(true));\n         execute(\"drop table oid_test\");\n     }\n+\n+    @Test\n+    public void test_udf_used_inside_generated_column_definition_cannot_be_dropped() {\n+        execute(\"create function doc.foo(long) returns string language dummy_lang as\" +\n+            \" 'function foo(a) { return a; }'\");\n+        execute(\"create table doc.t1 (id long, l as doc.foo(id))\");\n+\n+        assertThrows(\n+            () -> execute(\"drop function doc.foo(long)\"),\n+            isSQLError(containsString(\n+                    \"Function 'doc.foo(bigint)' cannot be dropped because it is still in use as a generated column expression at: doc.t1.l AS doc.foo(id)\"),\n+                INTERNAL_ERROR,\n+                BAD_REQUEST,\n+                4003)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjkzMTM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0OTozMlrOHgEK3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNTo0OTozMlrOHgEK3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4NDc5Ng==", "bodyText": "We must pass in the schemas here instead of getting it as a guice singleton on the ctor to avoid circular dependencies.", "url": "https://github.com/crate/crate/pull/10651#discussion_r503384796", "createdAt": "2020-10-12T15:49:32Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -123,7 +133,8 @@ void dropFunction(final String schema,\n                       final List<DataType<?>> argumentTypes,\n                       final boolean ifExists,\n                       final ActionListener<AcknowledgedResponse> listener,\n-                      final TimeValue timeout) {\n+                      final TimeValue timeout,\n+                      Schemas schemas) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mjk4MTE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowMjoxMFrOHgEoxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNTo0Njo0M1rOHgtf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ==", "bodyText": "Shouldn't this operate on the currentState of the ClusterStateUpdateTask ?\nSchemas is updated via clusterChanged events and I think there could be some race conditions - e.g. UDF being dropped while concurrently a new table is created that uses it.", "url": "https://github.com/crate/crate/pull/10651#discussion_r503392455", "createdAt": "2020-10-12T16:02:10Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMjM5NA==", "bodyText": "right, also recognized just now. will come up with a new approach.", "url": "https://github.com/crate/crate/pull/10651#discussion_r503402394", "createdAt": "2020-10-12T16:20:26Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1NjYzOA==", "bodyText": "I've pushed a fixup solving this.", "url": "https://github.com/crate/crate/pull/10651#discussion_r503856638", "createdAt": "2020-10-13T10:55:50Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MTUzMw==", "bodyText": "Did you consider going through the metadata directly and use the DocTableInfoFactory or DocTableInfoBuilder builder to create the instances?\nIterating over schemas will include the built-in schemas which we know that they don't have generated columns. I think there's also more overhead involved as it adds the instances to internal maps and so on.\nAlso fine to keep it as is for me - given that dropping UDFs shouldn't be a common operation.", "url": "https://github.com/crate/crate/pull/10651#discussion_r503951533", "createdAt": "2020-10-13T13:28:47Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA2MTkzMA==", "bodyText": "good point, was even simple to do. pushed another fixup (this also reverts the commit before).", "url": "https://github.com/crate/crate/pull/10651#discussion_r504061930", "createdAt": "2020-10-13T15:46:43Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +263,37 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functions,\n+                                                             Schemas schemas) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functions.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtx = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functions.functionsMetadata().stream(), nodeCtx);\n+\n+        for (var schemaInfo : schemas) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5MjQ1NQ=="}, "originalCommit": {"oid": "147d5d8a52896d4657f796eaf623cc4865cb3515"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDAyMjE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMDozN1rOHhG5lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMjoyNlrOHhMqWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA==", "bodyText": "If we filter out all partitions, wouldn't we also need to go through the templates to make sure we also check that the UDF is not used within a partitioned table?", "url": "https://github.com/crate/crate/pull/10651#discussion_r504478100", "createdAt": "2020-10-14T08:00:37Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +266,49 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functionsMetadata,\n+                                                             ClusterState currentState) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functionsMetadata.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtxWithRemovedFunction = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functionsMetadata.functionsMetadata().stream(), nodeCtxWithRemovedFunction);\n+\n+        var metadata = currentState.metadata();\n+        var indices = Stream.of(metadata.getConcreteAllIndices()).filter(NO_BLOB_NOR_DANGLING)\n+            .map(IndexParts::new)\n+            .filter(indexParts -> !indexParts.isPartitioned())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6224e90ca1c1a1445135f204ac45525183bb3629"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5MzIzNQ==", "bodyText": "damn I forgot \ud83e\udd26", "url": "https://github.com/crate/crate/pull/10651#discussion_r504493235", "createdAt": "2020-10-14T08:25:09Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +266,49 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functionsMetadata,\n+                                                             ClusterState currentState) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functionsMetadata.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtxWithRemovedFunction = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functionsMetadata.functionsMetadata().stream(), nodeCtxWithRemovedFunction);\n+\n+        var metadata = currentState.metadata();\n+        var indices = Stream.of(metadata.getConcreteAllIndices()).filter(NO_BLOB_NOR_DANGLING)\n+            .map(IndexParts::new)\n+            .filter(indexParts -> !indexParts.isPartitioned())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA=="}, "originalCommit": {"oid": "6224e90ca1c1a1445135f204ac45525183bb3629"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjUwNA==", "bodyText": "fixup pushed", "url": "https://github.com/crate/crate/pull/10651#discussion_r504572504", "createdAt": "2020-10-14T10:32:26Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/udf/UserDefinedFunctionService.java", "diffHunk": "@@ -240,4 +266,49 @@ public FunctionProvider buildFunctionResolver(UserDefinedFunctionMetadata udf) {\n \n         return new FunctionProvider(signature, (s, args) -> scalar);\n     }\n+\n+    private void validateFunctionIsNotInUseByGeneratedColumn(String schema,\n+                                                             String functionName,\n+                                                             UserDefinedFunctionsMetadata functionsMetadata,\n+                                                             ClusterState currentState) {\n+        // The iteration of schemas/tables must happen on the node context WITHOUT the UDF already removed.\n+        // Otherwise the lazy table factories will already fail while evaluating generated functionsMetadata.\n+        // To avoid that, a copy of the node context with the removed UDF function is used on concrete expression evaluation.\n+        var nodeCtxWithRemovedFunction = new NodeContext(this.nodeCtx.functions().copyOf());\n+        updateImplementations(schema, functionsMetadata.functionsMetadata().stream(), nodeCtxWithRemovedFunction);\n+\n+        var metadata = currentState.metadata();\n+        var indices = Stream.of(metadata.getConcreteAllIndices()).filter(NO_BLOB_NOR_DANGLING)\n+            .map(IndexParts::new)\n+            .filter(indexParts -> !indexParts.isPartitioned())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODEwMA=="}, "originalCommit": {"oid": "6224e90ca1c1a1445135f204ac45525183bb3629"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYyMzMyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMzoyOVrOHhMsng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTo1MDo1MFrOHhPMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MzA4Ng==", "bodyText": "I've added unit tests by the latest fixup commit, shall we still keep this for the  full-stack test (testing that the validation code is triggered)?", "url": "https://github.com/crate/crate/pull/10651#discussion_r504573086", "createdAt": "2020-10-14T10:33:29Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -344,4 +349,20 @@ public void test_pg_function_is_visible_when_oid_is_retrieved_from_column() thro\n         assertThat(response.rows()[0][0], is(true));\n         execute(\"drop table oid_test\");\n     }\n+\n+    @Test\n+    public void test_udf_used_inside_generated_column_definition_cannot_be_dropped() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be7d5c42026192aeadc44e537ade8a8b6304d9e6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxNDAyNg==", "bodyText": "Yep would keep one integration test \ud83d\udc4d", "url": "https://github.com/crate/crate/pull/10651#discussion_r504614026", "createdAt": "2020-10-14T11:50:50Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/UserDefinedFunctionsIntegrationTest.java", "diffHunk": "@@ -344,4 +349,20 @@ public void test_pg_function_is_visible_when_oid_is_retrieved_from_column() thro\n         assertThat(response.rows()[0][0], is(true));\n         execute(\"drop table oid_test\");\n     }\n+\n+    @Test\n+    public void test_udf_used_inside_generated_column_definition_cannot_be_dropped() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MzA4Ng=="}, "originalCommit": {"oid": "be7d5c42026192aeadc44e537ade8a8b6304d9e6"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 967, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}