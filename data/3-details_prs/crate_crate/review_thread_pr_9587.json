{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NDQyNTc2", "number": 9587, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozODo1M1rODbmA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0MjowMFrODbmFnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjYwOTY1OnYy", "diffSide": "RIGHT", "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDozODo1M1rOFjKrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo1MjowNFrOFjLL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA==", "bodyText": "Couldn't we change uncheckedLoadNextBatch to throw an Exception as well? It's called within loadNextBatch.", "url": "https://github.com/crate/crate/pull/9587#discussion_r372419444", "createdAt": "2020-01-29T14:38:53Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "diffHunk": "@@ -128,10 +128,14 @@ private void concatRows(Iterator<? extends T> rows) {\n     private CompletionStage<?> uncheckedLoadNextBatch() {\n         CompletionStage<?> batchProcessResult = tryProcessBatchFromLoadedSource();\n         if (batchProcessResult == null) {\n-            if (source.allLoaded()) {\n-                return processRemaining();\n+            try {\n+                if (source.allLoaded()) {\n+                    return processRemaining();\n+                }\n+                return source.loadNextBatch().thenCompose(ignored -> this.uncheckedLoadNextBatch());\n+            } catch (Throwable t) {\n+                return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNTkxMg==", "bodyText": "Yes right, although the nested uncheckedLoadNextBatch call must be caught then..", "url": "https://github.com/crate/crate/pull/9587#discussion_r372425912", "createdAt": "2020-01-29T14:49:06Z", "author": {"login": "seut"}, "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "diffHunk": "@@ -128,10 +128,14 @@ private void concatRows(Iterator<? extends T> rows) {\n     private CompletionStage<?> uncheckedLoadNextBatch() {\n         CompletionStage<?> batchProcessResult = tryProcessBatchFromLoadedSource();\n         if (batchProcessResult == null) {\n-            if (source.allLoaded()) {\n-                return processRemaining();\n+            try {\n+                if (source.allLoaded()) {\n+                    return processRemaining();\n+                }\n+                return source.loadNextBatch().thenCompose(ignored -> this.uncheckedLoadNextBatch());\n+            } catch (Throwable t) {\n+                return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA=="}, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNzc1Ng==", "bodyText": "Hm k, let's keep it as is then.", "url": "https://github.com/crate/crate/pull/9587#discussion_r372427756", "createdAt": "2020-01-29T14:52:04Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/AsyncOperationBatchIterator.java", "diffHunk": "@@ -128,10 +128,14 @@ private void concatRows(Iterator<? extends T> rows) {\n     private CompletionStage<?> uncheckedLoadNextBatch() {\n         CompletionStage<?> batchProcessResult = tryProcessBatchFromLoadedSource();\n         if (batchProcessResult == null) {\n-            if (source.allLoaded()) {\n-                return processRemaining();\n+            try {\n+                if (source.allLoaded()) {\n+                    return processRemaining();\n+                }\n+                return source.loadNextBatch().thenCompose(ignored -> this.uncheckedLoadNextBatch());\n+            } catch (Throwable t) {\n+                return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxOTQ0NA=="}, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjYyMTc1OnYy", "diffSide": "RIGHT", "path": "dex/src/main/java/io/crate/data/CompositeBatchIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0MjowMFrOFjKy2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0MjowMFrOFjKy2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyMTMzNg==", "bodyText": "I guess this case is one of the downsides of the checked exception. supplyAsync would already handle the exception correctly :(", "url": "https://github.com/crate/crate/pull/9587#discussion_r372421336", "createdAt": "2020-01-29T14:42:00Z", "author": {"login": "mfussenegger"}, "path": "dex/src/main/java/io/crate/data/CompositeBatchIterator.java", "diffHunk": "@@ -202,15 +202,25 @@ public boolean moveNext() {\n                     CompletableFuture<CompletableFuture> future = supplyAsync(() -> {\n                         ArrayList<CompletableFuture<?>> futures = new ArrayList<>(batchIterators.size());\n                         for (BatchIterator<T> batchIterator: batchIterators) {\n-                            futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            try {\n+                                futures.add(batchIterator.loadNextBatch().toCompletableFuture());\n+                            } catch (Throwable t) {\n+                                return CompletableFuture.failedFuture(t);\n+                            }\n                         }\n                         return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]));\n                     }, executor);\n                     nestedFutures.add(future);\n                 }\n             } else {\n                 for (BatchIterator<T> iterator: itToLoad) {\n-                    nestedFutures.add(supplyAsync(() -> iterator.loadNextBatch().toCompletableFuture(), executor));\n+                    nestedFutures.add(supplyAsync(() -> {\n+                        try {\n+                            return iterator.loadNextBatch().toCompletableFuture();\n+                        } catch (Throwable t) {\n+                            return CompletableFuture.failedFuture(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d43aea914e8928dcbd315d3508f9473b1e0c874"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}