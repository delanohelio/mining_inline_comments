{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjkzODk0", "number": 10700, "title": "Implement \"CREATE TABLE AS\"", "bodyText": "\u2026with column constraints then inserts the subquery results\nSummary of the changes / Why this improves CrateDB\nThis is regarding #9999\ndocumentation remaining\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-10-24T00:33:43Z", "url": "https://github.com/crate/crate/pull/10700", "merged": true, "mergeCommit": {"oid": "7bd68efedd6a07d28000294a0c7a637f9cc415f2"}, "closed": true, "closedAt": "2021-02-22T16:34:38Z", "author": {"login": "jeeminso"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWmP0BAFqTUxNzUzOTM1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd8p2bdgH2gAyNTA5MjkzODk0OjY4NGJiZDJlYmU4MDQ0ODhmNTQ3NWI0MDBjNzNjZTU1NTU5Y2NkOTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTM5MzUw", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-517539350", "createdAt": "2020-10-27T10:15:27Z", "commit": {"oid": "a710cf7fc738b1693dd666a63e3de49a00e6d872"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxNToyN1rOHo0hhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxNToyN1rOHo0hhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NTYzNw==", "bodyText": "I think this logic here may break if the query isn't a simple select ... from tbl because it assumes there is a QuerySpecification and that the relations are Table instances.\nI think to support all kinds of query it would be possible to use the RelationAnalyzer to analyze the query, and then to create the required table elements from the outputs of the AnalyzedRelation.", "url": "https://github.com/crate/crate/pull/10700#discussion_r512565637", "createdAt": "2020-10-27T10:15:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/CreateTableAsAnalyzer.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package io.crate.analyze;\n+\n+import io.crate.analyze.relations.RelationAnalyzer;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.RelationName;\n+import io.crate.metadata.Schemas;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.metadata.table.Operation;\n+import io.crate.sql.tree.AllColumns;\n+import io.crate.sql.tree.ColumnDefinition;\n+import io.crate.sql.tree.CreateTable;\n+import io.crate.sql.tree.CreateTableAs;\n+import io.crate.sql.tree.Expression;\n+import io.crate.sql.tree.GenericProperties;\n+import io.crate.sql.tree.Insert;\n+import io.crate.sql.tree.QualifiedName;\n+import io.crate.sql.tree.QualifiedNameReference;\n+import io.crate.sql.tree.Query;\n+import io.crate.sql.tree.QuerySpecification;\n+import io.crate.sql.tree.Relation;\n+import io.crate.sql.tree.SelectItem;\n+import io.crate.sql.tree.SingleColumn;\n+import io.crate.sql.tree.Table;\n+import io.crate.sql.tree.TableElement;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public final class CreateTableAsAnalyzer {\n+\n+    private final CreateTableStatementAnalyzer createTableStatementAnalyzer;\n+    private final InsertAnalyzer insertAnalyzer;\n+    private final RelationAnalyzer relationAnalyzer;\n+    private final Schemas schemas;\n+\n+    public CreateTableAsAnalyzer(CreateTableStatementAnalyzer createTableStatementAnalyzer,\n+                                 InsertAnalyzer insertAnalyzer,\n+                                 RelationAnalyzer relationAnalyzer,\n+                                 Schemas schemas) {\n+        this.createTableStatementAnalyzer = createTableStatementAnalyzer;\n+        this.insertAnalyzer = insertAnalyzer;\n+        this.relationAnalyzer = relationAnalyzer;\n+        this.schemas = schemas;\n+    }\n+\n+    public AnalyzedCreateTableAs analyze(CreateTableAs createTableAs,\n+                                         ParamTypeHints paramTypeHints,\n+                                         CoordinatorTxnCtx txnCtx) {\n+        RelationName relationName = RelationName.of(\n+            createTableAs.name().getName(), txnCtx.sessionContext().searchPath().currentSchema()\n+        );\n+        relationName.ensureValidForRelationCreation();\n+\n+        List<TableElement<Expression>> tableElements = getTableElementsFromSourceQuery(\n+            createTableAs.query(), txnCtx\n+        );\n+        CreateTable<Expression> createTable = new CreateTable<Expression>(\n+            createTableAs.name(),\n+            tableElements,\n+            Optional.empty(),\n+            Optional.empty(),\n+            GenericProperties.empty(),\n+            false\n+        );\n+\n+        //postponing the analysis of the insert statement, since the table has not been created yet.\n+        Supplier<AnalyzedInsertStatement> postponedInsertAnalysis = () -> {\n+                Insert<Expression> insert = new Insert<>(\n+                    createTableAs.name(),\n+                    createTableAs.query(),\n+                    Collections.emptyList(),\n+                    Collections.emptyList(),\n+                    Insert.DuplicateKeyContext.none()\n+                );\n+                return insertAnalyzer.analyze(insert, paramTypeHints, txnCtx);\n+            };\n+\n+        return new AnalyzedCreateTableAs(\n+            createTableStatementAnalyzer.analyze(createTable, paramTypeHints, txnCtx),\n+            postponedInsertAnalysis\n+        );\n+    }\n+\n+    private DocTableInfo resolveTableInfo(Table table,\n+                             CoordinatorTxnCtx txnCtx) {\n+        return (DocTableInfo) schemas.resolveTableInfo(\n+            table.getName(),\n+            Operation.INSERT,\n+            txnCtx.sessionContext().sessionUser(),\n+            txnCtx.sessionContext().searchPath()\n+        );\n+    }\n+\n+    private List<TableElement<Expression>> getTableElementsFromSourceQuery (Query sourceQuery,\n+                                                                            CoordinatorTxnCtx txnCtx) {\n+        var querySpec = (QuerySpecification) sourceQuery.getQueryBody();\n+        List<Relation> relations = querySpec.getFrom();\n+        List<SelectItem> selectItems = querySpec.getSelect().getSelectItems();\n+\n+        List<TableElement<Expression>> allTableElements = relations.stream()\n+            .map(relation -> (Table)relation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a710cf7fc738b1693dd666a63e3de49a00e6d872"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a710cf7fc738b1693dd666a63e3de49a00e6d872", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/a710cf7fc738b1693dd666a63e3de49a00e6d872", "committedDate": "2020-10-24T00:38:43Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "9c0637fa43357325e0d331ed224fdcbf49eae776", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/9c0637fa43357325e0d331ed224fdcbf49eae776", "committedDate": "2020-11-16T19:04:10Z", "message": "create-table-as 2nd commit\n\nnow ColumnDefinitions are recovered by traversing analyzedRelations and converting its outputs.\ncreated an Extractor class for it and few sample test cases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c0637fa43357325e0d331ed224fdcbf49eae776", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/9c0637fa43357325e0d331ed224fdcbf49eae776", "committedDate": "2020-11-16T19:04:10Z", "message": "create-table-as 2nd commit\n\nnow ColumnDefinitions are recovered by traversing analyzedRelations and converting its outputs.\ncreated an Extractor class for it and few sample test cases."}, "afterCommit": {"oid": "402c8af45fce5f9d5a335137567bee387e9928e1", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/402c8af45fce5f9d5a335137567bee387e9928e1", "committedDate": "2020-11-18T19:26:43Z", "message": "create-table-as: code re-formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzQ2ODgy", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-537346882", "createdAt": "2020-11-24T10:23:54Z", "commit": {"oid": "726f3f48e5d463ed4f188337b1dfbdfe07b2570d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMzo1NFrOH441wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyMzo1NFrOH441wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxMzU2OQ==", "bodyText": "The \"Compatibility\" section of the respective PostgreSQL documentation about \"CREATE TABLE AS\" says [1]:\n\nCREATE TABLE AS conforms to the SQL standard. The following are nonstandard extensions:\n\nThe standard requires parentheses around the subquery clause; in PostgreSQL, these parentheses are optional.\n\n\nAccording to @seut, this can be implemented like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                | CREATE TABLE table AS '(' query ')'                                            #createTableAs\n          \n          \n            \n                | CREATE TABLE table AS insertSource                                             #createTableAs\n          \n      \n    \n    \n  \n\nCan you adjust this bit here?\n[1] https://www.postgresql.org/docs/current/sql-createtableas.html#id-1.9.3.86.9", "url": "https://github.com/crate/crate/pull/10700#discussion_r529413569", "createdAt": "2020-11-24T10:23:54Z", "author": {"login": "amotl"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -478,6 +478,7 @@ createStmt\n     : CREATE TABLE (IF NOT EXISTS)? table\n         '(' tableElement (',' tableElement)* ')'\n          partitionedByOrClusteredInto withProperties?                                #createTable\n+    | CREATE TABLE table AS '(' query ')'                                            #createTableAs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726f3f48e5d463ed4f188337b1dfbdfe07b2570d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzQ3ODg0", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-537347884", "createdAt": "2020-11-24T10:24:59Z", "commit": {"oid": "fbb0ee1906f5e0b9de1e64defca7bf883064e814"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyNDo1OVrOH447gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDoyNDo1OVrOH447gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQxNTA0MA==", "bodyText": "I think I don't really understand why the visiting of the relations is necessary.\nWouldn't it be sufficient to do something like this:\nreturn Lists2.map(analyzedRelation.outputs(), this::outputToColumnDefinition)\nAnd outputToColumnDefinition would look something like this:\npublic static ColumnDefinition<Expression> outputToColumnDefinition(Symbol symbol) {\n    ColumnIdent column = Symbols.pathFromSymbol(symbol);\n\n    var type = MetadataToASTNodeResolver.dataTypeToColumnType(...);\n    return new ColumnDefinition<>(\n      column.name(),\n      null,       // default expression is always null\n      null,       // generated expression is always null\n      type,\n      List.of()   // constraints are always empty\n    )\n}\nIt looks like constraints are never copied from the source, so the above should be sufficient to handle all source relations in a generic way.\nPostgreSQL:\npsql=# create table tbl (x int default 10);\nTime: 16.267 ms\npsql=# create table copy as (select * from tbl);\nTime: 3.355 ms\npsql=# \\d copy\n                Table \"public.copy\"\n Column |  Type   | Collation | Nullable | Default\n--------+---------+-----------+----------+---------\n x      | integer |           |          |", "url": "https://github.com/crate/crate/pull/10700#discussion_r529415040", "createdAt": "2020-11-24T10:24:59Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/ColumnDefinitionExtractor.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.analyze.relations.AliasedAnalyzedRelation;\n+import io.crate.analyze.relations.AnalyzedRelation;\n+import io.crate.analyze.relations.AnalyzedRelationVisitor;\n+import io.crate.analyze.relations.AnalyzedView;\n+import io.crate.analyze.relations.DocTableRelation;\n+import io.crate.analyze.relations.TableFunctionRelation;\n+import io.crate.analyze.relations.UnionSelect;\n+import io.crate.expression.symbol.AliasSymbol;\n+import io.crate.expression.symbol.Function;\n+import io.crate.expression.symbol.ScopedSymbol;\n+import io.crate.expression.symbol.SymbolVisitor;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.RelationName;\n+import io.crate.metadata.Schemas;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.sql.tree.ColumnDefinition;\n+import io.crate.sql.tree.ColumnType;\n+import io.crate.sql.tree.Expression;\n+import io.crate.sql.tree.TableElement;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/*\n+ *  For the given Query(type: analyzedRelation), a list of tableElements will be returned according to its fields.\n+ */\n+public class ColumnDefinitionExtractor {\n+\n+    private final Schemas schemas;\n+    //along the traversal, TableIdents or Aliases and its TableElements are stored for re-use\n+    private final Map<RelationName, List<TableElement<Expression>>> TableIdentsToTableElementsMap = new HashMap<>();\n+    private final QueryAnalyzedRelationVisitor queryAnalyzedRelationVisitor = new QueryAnalyzedRelationVisitor();\n+    private final FieldsAstVisitor fieldsAstVisitor = new FieldsAstVisitor();\n+\n+\n+    public ColumnDefinitionExtractor(Schemas schemas) {\n+        this.schemas = schemas;\n+    }\n+\n+    public List<TableElement<Expression>> extractFrom(AnalyzedRelation analyzedRelation){\n+        return analyzedRelation.accept(queryAnalyzedRelationVisitor,null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb0ee1906f5e0b9de1e64defca7bf883064e814"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c48a10a744be286e643aec8f7a467ed227800e9c", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/c48a10a744be286e643aec8f7a467ed227800e9c", "committedDate": "2020-11-30T23:57:05Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "3295e29dd3d3a2ffec114b8b7378371afa84c2e8", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/3295e29dd3d3a2ffec114b8b7378371afa84c2e8", "committedDate": "2020-12-01T00:35:53Z", "message": "refactored createTableAsAnalyzer, added unittesting for symbolToColDefConverter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "159afdc80f0774ceae430addb3d35d0200804462", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/159afdc80f0774ceae430addb3d35d0200804462", "committedDate": "2020-12-01T00:46:39Z", "message": "Delete Symbols.java"}, "afterCommit": {"oid": "660cf8a105c9a5e57406c7ddc881eeb4457c7df7", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/660cf8a105c9a5e57406c7ddc881eeb4457c7df7", "committedDate": "2020-12-01T00:53:52Z", "message": "refactored createTableAsAnalyzer, added unittesting for symbolToColDefConverter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MTg0NTEy", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-565184512", "createdAt": "2021-01-11T09:33:25Z", "commit": {"oid": "660cf8a105c9a5e57406c7ddc881eeb4457c7df7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTozMzoyNVrOIRNdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTozODoxNVrOIRNn2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxNzE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ColumnDefinition<Expression> convert(Symbol symbol) {\n          \n          \n            \n                    return symbolToColumnDefinition(symbol);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nI think going with just symbolToColumnDefinition directly should be good enough?", "url": "https://github.com/crate/crate/pull/10700#discussion_r554917159", "createdAt": "2021-01-11T09:33:25Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/SymbolToColumnDefinitionConverter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.metadata.ColumnIdent;\n+import io.crate.sql.tree.CollectionColumnType;\n+import io.crate.sql.tree.ColumnDefinition;\n+import io.crate.sql.tree.ColumnPolicy;\n+import io.crate.sql.tree.ColumnType;\n+import io.crate.sql.tree.Expression;\n+import io.crate.sql.tree.ObjectColumnType;\n+import io.crate.types.ArrayType;\n+import io.crate.types.DataType;\n+import io.crate.types.ObjectType;\n+import io.crate.types.StringType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SymbolToColumnDefinitionConverter {\n+\n+    private static final ColumnPolicy OBJECT_TYPE_DEFAULT_COLUMN_POLICY = ColumnPolicy.STRICT;\n+\n+    public static ColumnDefinition<Expression> convert(Symbol symbol) {\n+        return symbolToColumnDefinition(symbol);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cf8a105c9a5e57406c7ddc881eeb4457c7df7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkxOTg5OQ==", "bodyText": "Would it be possible to adapt the code in MetadataToASTNodeResolver to use a shared version?", "url": "https://github.com/crate/crate/pull/10700#discussion_r554919899", "createdAt": "2021-01-11T09:38:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/SymbolToColumnDefinitionConverter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.metadata.ColumnIdent;\n+import io.crate.sql.tree.CollectionColumnType;\n+import io.crate.sql.tree.ColumnDefinition;\n+import io.crate.sql.tree.ColumnPolicy;\n+import io.crate.sql.tree.ColumnType;\n+import io.crate.sql.tree.Expression;\n+import io.crate.sql.tree.ObjectColumnType;\n+import io.crate.types.ArrayType;\n+import io.crate.types.DataType;\n+import io.crate.types.ObjectType;\n+import io.crate.types.StringType;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SymbolToColumnDefinitionConverter {\n+\n+    private static final ColumnPolicy OBJECT_TYPE_DEFAULT_COLUMN_POLICY = ColumnPolicy.STRICT;\n+\n+    public static ColumnDefinition<Expression> convert(Symbol symbol) {\n+        return symbolToColumnDefinition(symbol);\n+    }\n+\n+    private static ColumnDefinition<Expression> symbolToColumnDefinition(Symbol symbol) {\n+\n+        final ColumnIdent column = Symbols.pathFromSymbol(symbol);\n+        final DataType<?> dataType = symbol.valueType();\n+        var columnType = dataTypeToColumnType(dataType);\n+\n+        //handles the case when an ObjectType's field is to be re-constructed.\n+        String columnName = (column.path().isEmpty()) ? column.name() : column.path().get(column.path().size() - 1);\n+\n+        return new ColumnDefinition<>(\n+            columnName,\n+            null,\n+            null,\n+            columnType,\n+            List.of());\n+    }\n+\n+    //The original version from MetadataToASTNodeResolver depends on its private Extractor\n+    // that makes use of extractColumnDefinitions() and DocTableInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "660cf8a105c9a5e57406c7ddc881eeb4457c7df7"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe41da43a139be72b9201b0dbe9bf20f8b68bbab", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/fe41da43a139be72b9201b0dbe9bf20f8b68bbab", "committedDate": "2021-01-21T13:05:21Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "7056f7485ef4d2074be3a65c8a30031fc220b9f9", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/7056f7485ef4d2074be3a65c8a30031fc220b9f9", "committedDate": "2021-01-21T13:19:45Z", "message": "shared ver. of dataTypeToColumnType, and addressed few other minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2NTgxMDMw", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-576581030", "createdAt": "2021-01-26T17:20:35Z", "commit": {"oid": "0914192b5f46550ca2b26aba9745aebebfd9500b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNzoyMDozNVrOIah6ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxNzoyMzoxMVrOIaiCAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY4OTU5NA==", "bodyText": "Looks like this file as added by accident. Could you remove it?", "url": "https://github.com/crate/crate/pull/10700#discussion_r564689594", "createdAt": "2021-01-26T17:20:35Z", "author": {"login": "mfussenegger"}, "path": "resolv.conf", "diffHunk": "@@ -0,0 +1 @@\n+../run/systemd/resolve/resolv.conf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0914192b5f46550ca2b26aba9745aebebfd9500b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY5MDg2Mw==", "bodyText": "Why did this change to lowercase?", "url": "https://github.com/crate/crate/pull/10700#discussion_r564690863", "createdAt": "2021-01-26T17:22:24Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/MetadataToASTNodeResolver.java", "diffHunk": "@@ -109,7 +124,7 @@ public static Expression expressionFromColumn(ColumnIdent ident) {\n             if (stringType.unbound()) {\n                 return new ColumnType<>(type.getName());\n             } else {\n-                return new ColumnType<>(\"VARCHAR\", List.of(stringType.lengthLimit()));\n+                return new ColumnType<>(\"varchar\", List.of(stringType.lengthLimit()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0914192b5f46550ca2b26aba9745aebebfd9500b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY5MTM5NA==", "bodyText": "Could you revert the unrelated formatting changes here?", "url": "https://github.com/crate/crate/pull/10700#discussion_r564691394", "createdAt": "2021-01-26T17:23:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/MetadataToASTNodeResolver.java", "diffHunk": "@@ -283,9 +313,9 @@ public Extractor(DocTableInfo tableInfo) {\n             GenericProperties<Expression> properties = new GenericProperties<>();\n             Expression numReplicas = new StringLiteral(tableInfo.numberOfReplicas());\n             properties.add(new GenericProperty<>(\n-                TableParameters.NUMBER_OF_REPLICAS.getKey(),\n-                numReplicas\n-                )\n+                               TableParameters.NUMBER_OF_REPLICAS.getKey(),\n+                               numReplicas\n+                           )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0914192b5f46550ca2b26aba9745aebebfd9500b"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDY5MTQ1OA==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10700#discussion_r564691458", "createdAt": "2021-01-26T17:23:11Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/MetadataToASTNodeResolver.java", "diffHunk": "@@ -294,9 +324,9 @@ public Extractor(DocTableInfo tableInfo) {\n             );\n             for (Map.Entry<String, Object> entry : tableParameters.entrySet()) {\n                 properties.add(new GenericProperty<>(\n-                        TableParameters.stripIndexPrefix(entry.getKey()),\n-                        Literal.fromObject(entry.getValue())\n-                    )\n+                                   TableParameters.stripIndexPrefix(entry.getKey()),\n+                                   Literal.fromObject(entry.getValue())\n+                               )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0914192b5f46550ca2b26aba9745aebebfd9500b"}, "originalPosition": 170}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a3c91b2480055f7b21003940aa5b4912f902fb2", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/2a3c91b2480055f7b21003940aa5b4912f902fb2", "committedDate": "2021-02-01T21:07:50Z", "message": "integration tests and minor fixes"}, "afterCommit": {"oid": "d3d37094f757de540fa7bf9091c24ba7b6a34745", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/d3d37094f757de540fa7bf9091c24ba7b6a34745", "committedDate": "2021-02-01T21:17:25Z", "message": "integration tests and minor fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3d37094f757de540fa7bf9091c24ba7b6a34745", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/d3d37094f757de540fa7bf9091c24ba7b6a34745", "committedDate": "2021-02-01T21:17:25Z", "message": "integration tests and minor fixes"}, "afterCommit": {"oid": "de3d68dc2f2b952e04fc0cb36549b56226244122", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/de3d68dc2f2b952e04fc0cb36549b56226244122", "committedDate": "2021-02-01T21:19:19Z", "message": "integration tests and minor fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef28a3058c785b8c46deb8743eaaaad392215aed", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/ef28a3058c785b8c46deb8743eaaaad392215aed", "committedDate": "2021-02-01T21:42:40Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "aa8407a3b4cafd4cc6d80dfb582b2ecb26588be8", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/aa8407a3b4cafd4cc6d80dfb582b2ecb26588be8", "committedDate": "2021-02-02T03:31:35Z", "message": "create-table-as docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa8407a3b4cafd4cc6d80dfb582b2ecb26588be8", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/aa8407a3b4cafd4cc6d80dfb582b2ecb26588be8", "committedDate": "2021-02-02T03:31:35Z", "message": "create-table-as docs"}, "afterCommit": {"oid": "afcbadb1455da60df029605d4ed6f75c37bfbbb0", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/afcbadb1455da60df029605d4ed6f75c37bfbbb0", "committedDate": "2021-02-02T04:12:52Z", "message": "create-table-as docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0545b253ef887b32ee72bbe776b0803836a83f1", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/e0545b253ef887b32ee72bbe776b0803836a83f1", "committedDate": "2021-02-02T04:13:39Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "847c4e03bb3cb38e021fa3d9d8d2b8d79a4f0a43", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/847c4e03bb3cb38e021fa3d9d8d2b8d79a4f0a43", "committedDate": "2021-02-02T05:05:58Z", "message": "create-table-as docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyMjIzNDA3", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-592223407", "createdAt": "2021-02-17T14:01:49Z", "commit": {"oid": "546a0f62549909f289c1914e6374e2dc3517fdd0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxNDowMTo0OVrOIm399Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxNDowMTo0OVrOIm399Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzYzMzc4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - added support for handling create-table-as statement.\n          \n          \n            \n            - Added support for the :ref:`CREATE TABLE AS <ref-create-table-as>` statement.", "url": "https://github.com/crate/crate/pull/10700#discussion_r577633781", "createdAt": "2021-02-17T14:01:49Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -53,7 +53,7 @@ None\n Changes\n =======\n \n-None\n+- added support for handling create-table-as statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "546a0f62549909f289c1914e6374e2dc3517fdd0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMTg1MTIz", "url": "https://github.com/crate/crate/pull/10700#pullrequestreview-593185123", "createdAt": "2021-02-18T12:59:39Z", "commit": {"oid": "f40d231e9a1542e1838e3fdd7092961dfddd3b33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "192076579e8b9a83e76ccca1e1072624d4069831", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/192076579e8b9a83e76ccca1e1072624d4069831", "committedDate": "2021-02-22T15:21:37Z", "message": "Add the CREATE TABLE AS statement"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6285280c78fd230de20a06ff8d20c8afa0ed4b5", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/e6285280c78fd230de20a06ff8d20c8afa0ed4b5", "committedDate": "2021-02-19T00:42:54Z", "message": "Merge branch 'master' into create-table-as"}, "afterCommit": {"oid": "192076579e8b9a83e76ccca1e1072624d4069831", "author": {"user": {"login": "jeeminso", "name": null}}, "url": "https://github.com/crate/crate/commit/192076579e8b9a83e76ccca1e1072624d4069831", "committedDate": "2021-02-22T15:21:37Z", "message": "Add the CREATE TABLE AS statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "684bbd2ebe804488f5475b400c73ce55559ccd99", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/684bbd2ebe804488f5475b400c73ce55559ccd99", "committedDate": "2021-02-22T15:58:15Z", "message": "Merge branch 'master' into create-table-as"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}