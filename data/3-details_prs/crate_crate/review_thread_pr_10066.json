{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODc3NTY4", "number": 10066, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDowM1rOED8kLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OToyN1rOEELzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTczNDg0OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDowM1rOGhQ4Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxNzowOFrOGhsRFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjcxOQ==", "bodyText": "Maybe also elaborate that for most clients this shouldn't be an issue - since for HTTP it was JSON serialized, and for PostgreSQL clients there is often a typed getLong, etc..", "url": "https://github.com/crate/crate/pull/10066#discussion_r437532719", "createdAt": "2020-06-09T15:44:03Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -61,6 +61,10 @@ Breaking Changes\n   execution is only available via the ``results`` array represented by a\n   row count for each bulk operation.\n \n+- Numeric literals fitting into the ``integer`` range will be detected now as\n+  ``integer`` literals instead of ``bigint`` literals. Thus a statement like\n+  ``select 1`` will return an ``integer`` column type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4MTQ2MA==", "bodyText": "Added your suggestion, please check.", "url": "https://github.com/crate/crate/pull/10066#discussion_r437981460", "createdAt": "2020-06-10T09:17:08Z", "author": {"login": "seut"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -61,6 +61,10 @@ Breaking Changes\n   execution is only available via the ``results`` array represented by a\n   row count for each bulk operation.\n \n+- Numeric literals fitting into the ``integer`` range will be detected now as\n+  ``integer`` literals instead of ``bigint`` literals. Thus a statement like\n+  ``select 1`` will return an ``integer`` column type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjcxOQ=="}, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTczOTM0OnYy", "diffSide": "RIGHT", "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NToxMlrOGhQ7QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMjoxNVrOGhsFvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n          \n          \n            \n                        builder.append(Integer.toString(node.getValue()));\n          \n      \n    \n    \n  \n\nCheaper than going through String.format", "url": "https://github.com/crate/crate/pull/10066#discussion_r437533505", "createdAt": "2020-06-09T15:45:12Z", "author": {"login": "mfussenegger"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -679,6 +680,12 @@ protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n             return null;\n         }\n \n+        @Override\n+        protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n+            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODU1Ng==", "bodyText": "Afaik it could be just builder.append(node.getValue()) as the StringBuilder is already doing similar.", "url": "https://github.com/crate/crate/pull/10066#discussion_r437978556", "createdAt": "2020-06-10T09:12:15Z", "author": {"login": "seut"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -679,6 +680,12 @@ protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n             return null;\n         }\n \n+        @Override\n+        protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n+            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ=="}, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODIzMDQ2OnYy", "diffSide": "RIGHT", "path": "libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OToyN1rOGhpWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OToyN1rOGhpWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzYxOA==", "bodyText": "\ud83d\udc4d\nreally minor, probably it can just return value to avoid integer boxing with Objects.hash or use Integer#hashCode.", "url": "https://github.com/crate/crate/pull/10066#discussion_r437933618", "createdAt": "2020-06-10T07:59:27Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import java.util.Objects;\n+\n+public class IntegerLiteral extends Literal {\n+\n+    private final int value;\n+\n+    public IntegerLiteral(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitIntegerLiteral(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        IntegerLiteral that = (IntegerLiteral) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1393, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}