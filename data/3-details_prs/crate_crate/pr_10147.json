{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzgyODgz", "number": 10147, "title": "Make sure there is an entry in pg_proc for each pg_type typreceive", "bodyText": "Summary of the changes / Why this improves CrateDB\nEach pg_type entry must be able to join with an entry in pg_proc for\nclients like npgsql.\n(Except arrays, they've a generic array_recv value)\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-29T12:37:03Z", "url": "https://github.com/crate/crate/pull/10147", "merged": true, "mergeCommit": {"oid": "f4a33d119463e78943f86f23f508ad7f5bb18600"}, "closed": true, "closedAt": "2020-06-29T14:38:59Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwAt8nAFqTQzOTEyMDg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwA88kgFqTQzOTEzNTU1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTIwODUz", "url": "https://github.com/crate/crate/pull/10147#pullrequestreview-439120853", "createdAt": "2020-06-29T13:04:38Z", "commit": {"oid": "badccd716ca7dffd249e02fff2f5d684a291488c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNDozOFrOGqP8UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNDozOFrOGqP8UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NDU3Ng==", "bodyText": "Are you sure about all the types? I've added this check coz some types, like any (maybe it is actually the only type) don't have typreceive,  typoutput, and typinput. See\ntemplate1=# select typreceive from pg_type where oid = 2276;\n typreceive\n------------\n -\n(1 row)", "url": "https://github.com/crate/crate/pull/10147#discussion_r446954576", "createdAt": "2020-06-29T13:04:38Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/PgTypeTable.java", "diffHunk": "@@ -64,31 +62,10 @@\n             .add(\"typtypmod\", INTEGER, c -> -1)\n             .add(\"typnamespace\", INTEGER, c -> TYPE_NAMESPACE_OID)\n             .add(\"typarray\", INTEGER, PGType::typArray)\n-            .add(\"typinput\", REGPROC, t -> {\n-                if (t.typArray() == 0) {\n-                    return Regproc.of(\"array_in\");\n-                } else {\n-                    return regprocForMetaFunction(t, \"_in\");\n-                }\n-            })\n-            .add(\"typoutput\", REGPROC, t -> {\n-                if (t.typArray() == 0) {\n-                    return Regproc.of(\"array_out\");\n-                } else {\n-                    return regprocForMetaFunction(t, \"_out\");\n-                }\n-            })\n-            .add(\"typreceive\", REGPROC, t -> regprocForMetaFunction(t, \"recv\"))\n+            .add(\"typinput\", REGPROC, PGType::typInput)\n+            .add(\"typoutput\", REGPROC, PGType::typOutput)\n+            .add(\"typreceive\", REGPROC, PGType::typReceive)\n             .add(\"typnotnull\", BOOLEAN, c -> false)\n             .build();\n     }\n-\n-    private static Regproc regprocForMetaFunction(PGType<?> type,\n-                                                  String suffix) {\n-        if (PGTypes.fromOID(type.oid()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "badccd716ca7dffd249e02fff2f5d684a291488c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTIzMTEy", "url": "https://github.com/crate/crate/pull/10147#pullrequestreview-439123112", "createdAt": "2020-06-29T13:07:15Z", "commit": {"oid": "8e2912c278436d1a974a822532615097b2452d80"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNzoxNVrOGqQC7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNzoxNVrOGqQC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NjI2OQ==", "bodyText": "\ud83d\udc4d\nlgtm", "url": "https://github.com/crate/crate/pull/10147#discussion_r446956269", "createdAt": "2020-06-29T13:07:15Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/InformationSchemaIterables.java", "diffHunk": "@@ -160,21 +162,40 @@ public InformationSchemaIterables(final Schemas schemas,\n             .flatMap(List::stream)\n             .map(this::pgProc)\n             .iterator();\n-        pgTypeReceiveFunctions = () -> sequentialStream(PGTypes.pgTypes())\n-            .filter(pgType -> PGTypes.fromOID(pgType.oid()) != null)\n-            .map(\n-                type -> Signature.scalar(\n-                    type.typName() + \"recv\",\n-                    Objects.requireNonNullElse(\n-                        PGTypes.fromOID(type.oid()),\n-                        DataTypes.UNDEFINED\n-                    ).getTypeSignature()\n+\n+        pgTypeReceiveFunctions = () ->\n+            Stream.concat(\n+                sequentialStream(PGTypes.pgTypes())\n+                    .filter(t -> t.typArray() != 0)\n+                    .map(InformationSchemaIterables::typeToSignature)\n+                    .map(PgProcTable.Entry::of),\n+\n+                // Don't generate array_recv entry from pgTypes to avoid duplicate entries\n+                // (We want 1 array_recv entry, not one per array type)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2912c278436d1a974a822532615097b2452d80"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eee2ae2fcf6892fe3f64013385f1c134c6b6610a", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/eee2ae2fcf6892fe3f64013385f1c134c6b6610a", "committedDate": "2020-06-29T13:16:07Z", "message": "fixup! fixup! Make sure there is an entry in pg_proc for each pg_type typreceive"}, "afterCommit": {"oid": "40af2f92b2032ae14f5ed1d7b9aa476f3a0a6c17", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/40af2f92b2032ae14f5ed1d7b9aa476f3a0a6c17", "committedDate": "2020-06-29T13:16:53Z", "message": "fixup! fixup! Make sure there is an entry in pg_proc for each pg_type typreceive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b21eaa7399bd85d68e29a53eb545172be4d4670", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/1b21eaa7399bd85d68e29a53eb545172be4d4670", "committedDate": "2020-06-29T13:20:39Z", "message": "Make sure there is an entry in pg_proc for each pg_type typreceive\n\nEach pg_type entry must be able to join with an entry in pg_proc for\nclients like npgsql.\n\n(Except arrays, they've a generic `array_recv` value)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40af2f92b2032ae14f5ed1d7b9aa476f3a0a6c17", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/40af2f92b2032ae14f5ed1d7b9aa476f3a0a6c17", "committedDate": "2020-06-29T13:16:53Z", "message": "fixup! fixup! Make sure there is an entry in pg_proc for each pg_type typreceive"}, "afterCommit": {"oid": "1b21eaa7399bd85d68e29a53eb545172be4d4670", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/1b21eaa7399bd85d68e29a53eb545172be4d4670", "committedDate": "2020-06-29T13:20:39Z", "message": "Make sure there is an entry in pg_proc for each pg_type typreceive\n\nEach pg_type entry must be able to join with an entry in pg_proc for\nclients like npgsql.\n\n(Except arrays, they've a generic `array_recv` value)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MTM1NTU5", "url": "https://github.com/crate/crate/pull/10147#pullrequestreview-439135559", "createdAt": "2020-06-29T13:21:01Z", "commit": {"oid": "1b21eaa7399bd85d68e29a53eb545172be4d4670"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3167, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}