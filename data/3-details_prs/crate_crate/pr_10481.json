{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODU4NTc4", "number": 10481, "title": "Use doc values aggregators in the group by iterator.", "bodyText": "Summary of the changes / Why this improves CrateDB\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregate functions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctions signatures, to perform the required aggregations.\nFollow up:\n\n probably consider the group by key cardinality-ratio to decide whether to use the DocValuesGroupByOptimizedIterator\n check a potential double-close searcher issue, see #10481 (comment)\n\nBenchmarks. See the first 3 queries, the current optimization targets them.\nFork 1:\n# Results (server side duration in ms)\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4 (master)\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      638.100 \u00b1  325.566 |    211.815 |    482.160 |    932.585 |   3125.512 |\n|   V2    |      373.246 \u00b1  196.211 |    124.022 |    277.423 |    549.255 |   1615.749 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  52.38%                           -  53.91%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 52.38%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      452.103 \u00b1  218.103 |    151.666 |    345.346 |    667.845 |   1006.138 |\n|   V2    |      185.711 \u00b1   85.982 |     53.151 |    145.821 |    266.296 |    450.111 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  83.53%                           -  81.25%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 83.53%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2103.870 \u00b1 1050.969 |    497.677 |   1709.958 |   3193.367 |   4763.876 |\n|   V2    |     1859.424 \u00b1  942.139 |    414.991 |   1486.976 |   2866.043 |   3878.281 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  12.34%                           -  13.95%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 12.34%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      381.050 \u00b1  208.475 |    104.771 |    396.171 |    480.988 |   1456.100 |\n|   V2    |      416.578 \u00b1  230.937 |    111.100 |    421.884 |    525.586 |   1559.578 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   8.91%                           +   6.29%   \nThere is a 98.92% probability that the observed difference is not random, and the best estimate of that difference is 8.91%\nThe test has statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      436.798 \u00b1  612.384 |     54.301 |    187.792 |    264.789 |   2168.169 |\n|   V2    |      394.126 \u00b1  455.784 |     47.463 |    236.423 |    321.290 |   1533.854 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  10.27%                           +  22.93%   \nThere is a 42.32% probability that the observed difference is not random, and the best estimate of that difference is 10.27%\nThe test has no statistical significance\n\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC     \n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  218     2.60     1.91 |    0     0.00     0.00 |     2147      123 |  2092.40     278781\n V2 |  262     2.60     1.76 |    0     0.00     0.00 |     2147       52 |  2113.17     336127\n    \nV1 top allocation frames\n  BytesRef.utf8ToString():89196875640\n  StringUTF16.compress(...):55279245409\n  GroupingCollector.evalKeyInputs(List):46236358862\n  Float.valueOf(float):43693361381\n  ArrayList.<init>(int):43296970152\nV2 top allocation frames\n  BytesRef.utf8ToString():121696878465\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):60725497291\n  StringUTF16.compress(...):60709561912\n  ArrayList.<init>(int):60696946969\n  Float.valueOf(float):30925578229\n\nFork 2:\n# Results (server side duration in ms)\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      627.276 \u00b1  323.706 |    203.951 |    487.295 |    903.655 |   2906.228 |\n|   V2    |      388.223 \u00b1  197.518 |    116.546 |    301.322 |    558.523 |   1762.430 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  47.08%                           -  47.16%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 47.08%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      451.690 \u00b1  221.454 |    125.472 |    348.700 |    662.175 |   1000.080 |\n|   V2    |      192.836 \u00b1   88.972 |     64.655 |    149.921 |    274.790 |    442.393 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  80.32%                           -  79.73%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 80.32%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2079.348 \u00b1 1044.993 |    495.792 |   1676.263 |   3131.831 |   4460.352 |\n|   V2    |     1704.987 \u00b1  867.730 |    524.969 |   1371.779 |   2606.440 |   3615.633 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  19.78%                           -  19.98%   \nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 19.78%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      378.446 \u00b1  214.287 |     93.080 |    381.851 |    479.441 |   1599.552 |\n|   V2    |      400.246 \u00b1  221.596 |     94.236 |    414.554 |    502.667 |   1517.380 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   5.60%                           +   8.21%   \nThere is a 88.59% probability that the observed difference is not random, and the best estimate of that difference is 5.60%\nThe test has no statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      393.347 \u00b1  541.522 |     57.325 |    180.287 |    264.866 |   1774.064 |\n|   V2    |      387.077 \u00b1  445.272 |     72.646 |    223.795 |    308.072 |   1514.709 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -   1.61%                           +  21.53%   \nThere is a 7.12% probability that the observed difference is not random, and the best estimate of that difference is 1.61%\nThe test has no statistical significance\n\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC     \n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  222     2.58     1.78 |    0     0.00     0.00 |     2147      142 |  2086.78     285677\n V2 |  267     2.65     1.86 |    0     0.00     0.00 |     2147      119 |  2265.55     341691\n    \nV1 top allocation frames\n  BytesRef.utf8ToString():91912280845\n  StringUTF16.compress(...):56726976288\n  GroupingCollector.evalKeyInputs(List):47236453620\n  ArrayList.<init>(int):44709349392\n  Float.valueOf(float):44008357601\nV2 top allocation frames\n  BytesRef.utf8ToString():123668417096\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):62053305301\n  ArrayList.<init>(int):61975513304\n  StringUTF16.compress(...):61710976368\n  Float.valueOf(float):30948726637\n\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-09-02T14:25:31Z", "url": "https://github.com/crate/crate/pull/10481", "merged": true, "mergeCommit": {"oid": "fa5f5fe077e57b553c03641db4d1e77e258139cf"}, "closed": true, "closedAt": "2020-09-08T09:21:29Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE9ac5ABqjM3MjAzMTg5NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGyjSvgBqjM3Mzk1MDc3MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ebf10b4fccc3c9822ae64956273bfefcf3f98c9", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6ebf10b4fccc3c9822ae64956273bfefcf3f98c9", "committedDate": "2020-09-02T14:24:46Z", "message": "WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "5a71405bd7c1088f013a8d336fadd48c2da3dde8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5a71405bd7c1088f013a8d336fadd48c2da3dde8", "committedDate": "2020-09-02T15:05:53Z", "message": "WIP: Use doc values aggregators in group by."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a71405bd7c1088f013a8d336fadd48c2da3dde8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5a71405bd7c1088f013a8d336fadd48c2da3dde8", "committedDate": "2020-09-02T15:05:53Z", "message": "WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "81930a0e5d7725f854f74735b0268b309137bcbd", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/81930a0e5d7725f854f74735b0268b309137bcbd", "committedDate": "2020-09-03T11:47:00Z", "message": "WIP: Use doc values aggregators in group by."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81930a0e5d7725f854f74735b0268b309137bcbd", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/81930a0e5d7725f854f74735b0268b309137bcbd", "committedDate": "2020-09-03T11:47:00Z", "message": "WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "f5b34c4fea03ab27f65926e8ee0b3d86069b329f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/f5b34c4fea03ab27f65926e8ee0b3d86069b329f", "committedDate": "2020-09-03T14:31:33Z", "message": "WIP: Use doc values aggregators in group by."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5b34c4fea03ab27f65926e8ee0b3d86069b329f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/f5b34c4fea03ab27f65926e8ee0b3d86069b329f", "committedDate": "2020-09-03T14:31:33Z", "message": "WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "50ebbee3473dda7c3994e1ffaa9989c71e43b91f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/50ebbee3473dda7c3994e1ffaa9989c71e43b91f", "committedDate": "2020-09-04T08:17:17Z", "message": "WIP: Use doc values aggregators in group by."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1af1ea7dc0c542077a55fd65dd2c5df70ae93f85", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/1af1ea7dc0c542077a55fd65dd2c5df70ae93f85", "committedDate": "2020-09-04T13:28:24Z", "message": "fixup! WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "7a781f2ce9e0508a1fbbe8f8aca4316b497ee684", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/7a781f2ce9e0508a1fbbe8f8aca4316b497ee684", "committedDate": "2020-09-07T09:43:37Z", "message": "WIP: Use doc values aggregators in group by."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a781f2ce9e0508a1fbbe8f8aca4316b497ee684", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/7a781f2ce9e0508a1fbbe8f8aca4316b497ee684", "committedDate": "2020-09-07T09:43:37Z", "message": "WIP: Use doc values aggregators in group by."}, "afterCommit": {"oid": "36e01218d333bcb2651e43c62e05e00a84f61d0b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/36e01218d333bcb2651e43c62e05e00a84f61d0b", "committedDate": "2020-09-07T12:51:11Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36e01218d333bcb2651e43c62e05e00a84f61d0b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/36e01218d333bcb2651e43c62e05e00a84f61d0b", "committedDate": "2020-09-07T12:51:11Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations."}, "afterCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/51cdf90b27b898703066979b6ab2e4fb99b0e916", "committedDate": "2020-09-07T13:39:38Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations.\n\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      638.100 \u00b1  325.566 |    211.815 |    482.160 |    932.585 |   3125.512 |\n|   V2    |      373.246 \u00b1  196.211 |    124.022 |    277.423 |    549.255 |   1615.749 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  52.38%                           -  53.91%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 52.38%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      452.103 \u00b1  218.103 |    151.666 |    345.346 |    667.845 |   1006.138 |\n|   V2    |      185.711 \u00b1   85.982 |     53.151 |    145.821 |    266.296 |    450.111 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  83.53%                           -  81.25%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 83.53%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2103.870 \u00b1 1050.969 |    497.677 |   1709.958 |   3193.367 |   4763.876 |\n|   V2    |     1859.424 \u00b1  942.139 |    414.991 |   1486.976 |   2866.043 |   3878.281 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  12.34%                           -  13.95%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 12.34%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      381.050 \u00b1  208.475 |    104.771 |    396.171 |    480.988 |   1456.100 |\n|   V2    |      416.578 \u00b1  230.937 |    111.100 |    421.884 |    525.586 |   1559.578 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   8.91%                           +   6.29%\nThere is a 98.92% probability that the observed difference is not random, and the best estimate of that difference is 8.91%\nThe test has statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      436.798 \u00b1  612.384 |     54.301 |    187.792 |    264.789 |   2168.169 |\n|   V2    |      394.126 \u00b1  455.784 |     47.463 |    236.423 |    321.290 |   1533.854 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  10.27%                           +  22.93%\nThere is a 42.32% probability that the observed difference is not random, and the best estimate of that difference is 10.27%\nThe test has no statistical significance\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  218     2.60     1.91 |    0     0.00     0.00 |     2147      123 |  2092.40     278781\n V2 |  262     2.60     1.76 |    0     0.00     0.00 |     2147       52 |  2113.17     336127\n\nV1 top allocation frames\n  BytesRef.utf8ToString():89196875640\n  StringUTF16.compress(...):55279245409\n  GroupingCollector.evalKeyInputs(List):46236358862\n  Float.valueOf(float):43693361381\n  ArrayList.<init>(int):43296970152\nV2 top allocation frames\n  BytesRef.utf8ToString():121696878465\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):60725497291\n  StringUTF16.compress(...):60709561912\n  ArrayList.<init>(int):60696946969\n  Float.valueOf(float):30925578229"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTc0MzM2", "url": "https://github.com/crate/crate/pull/10481#pullrequestreview-483574336", "createdAt": "2020-09-07T13:57:27Z", "commit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1NzoyN1rOHOAThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1NzoyN1rOHOAThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NzExMQ==", "bodyText": "there are already pretty many group by integrations tests already.", "url": "https://github.com/crate/crate/pull/10481#discussion_r484447111", "createdAt": "2020-09-07T13:57:27Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/execution/engine/collect/DocValuesGroupByOptimizedIteratorTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.collect;\n+\n+import io.crate.breaker.RamAccounting;\n+import io.crate.data.BatchIterator;\n+import io.crate.data.Row;\n+import io.crate.execution.engine.aggregation.impl.SumAggregation;\n+import io.crate.expression.reference.doc.lucene.BytesRefColumnReference;\n+import io.crate.expression.reference.doc.lucene.CollectorContext;\n+import io.crate.expression.reference.doc.lucene.LongColumnReference;\n+import io.crate.expression.reference.doc.lucene.LuceneCollectorExpression;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.ReferenceIdent;\n+import io.crate.metadata.RelationName;\n+import io.crate.metadata.RowGranularity;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import io.crate.testing.TestingRowConsumer;\n+import io.crate.types.DataTypes;\n+import org.apache.lucene.document.Document;\n+import org.apache.lucene.document.NumericDocValuesField;\n+import org.apache.lucene.document.SortedSetDocValuesField;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexWriter;\n+import org.apache.lucene.index.IndexWriterConfig;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.MatchAllDocsQuery;\n+import org.apache.lucene.store.ByteBuffersDirectory;\n+import org.elasticsearch.common.lucene.BytesRefs;\n+import org.elasticsearch.index.mapper.NumberFieldMapper;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+\n+import static io.crate.testing.TestingHelpers.createNodeContext;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.instanceOf;\n+\n+public class DocValuesGroupByOptimizedIteratorTest extends CrateDummyClusterServiceUnitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNTczNDQx", "url": "https://github.com/crate/crate/pull/10481#pullrequestreview-483573441", "createdAt": "2020-09-07T13:56:03Z", "commit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1NjowM1rOHOAQkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1NjowM1rOHOAQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NjM1NA==", "bodyText": "I wonder if we have a potential double-close issue here. I think after the collectTask.addSearcher(sharedShardContext.readerId(), searcher); call the searcher will be closed as part of the collectTask.\nThis is probably also the case in the other places where we have the same setup pattern - so may not be exclusively to this PR now and we can also follow up on it later.", "url": "https://github.com/crate/crate/pull/10481#discussion_r484446354", "createdAt": "2020-09-07T13:56:03Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/DocValuesGroupByOptimizedIterator.java", "diffHunk": "@@ -0,0 +1,428 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.collect;\n+\n+import io.crate.breaker.MultiSizeEstimator;\n+import io.crate.breaker.RamAccounting;\n+import io.crate.breaker.SizeEstimatorFactory;\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.common.collections.Lists2;\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.exceptions.Exceptions;\n+import io.crate.execution.dsl.phases.RoutedCollectPhase;\n+import io.crate.execution.dsl.projection.GroupProjection;\n+import io.crate.execution.dsl.projection.Projection;\n+import io.crate.execution.engine.aggregation.DocValueAggregator;\n+import io.crate.execution.engine.aggregation.GroupByMaps;\n+import io.crate.execution.jobs.SharedShardContext;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.doc.lucene.CollectorContext;\n+import io.crate.expression.reference.doc.lucene.LuceneCollectorExpression;\n+import io.crate.expression.symbol.AggregateMode;\n+import io.crate.expression.symbol.InputColumn;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.lucene.FieldTypeLookup;\n+import io.crate.lucene.LuceneQueryBuilder;\n+import io.crate.metadata.DocReferences;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.doc.DocSysColumns;\n+import io.crate.metadata.doc.DocTableInfo;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.Weight;\n+import org.apache.lucene.util.Bits;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardId;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static io.crate.execution.dsl.projection.Projections.shardProjections;\n+import static io.crate.execution.engine.collect.LuceneShardCollectorProvider.formatSource;\n+\n+final class DocValuesGroupByOptimizedIterator {\n+\n+    @Nullable\n+    static BatchIterator<Row> tryOptimize(Functions functions,\n+                                          IndexShard indexShard,\n+                                          DocTableInfo table,\n+                                          LuceneQueryBuilder luceneQueryBuilder,\n+                                          FieldTypeLookup fieldTypeLookup,\n+                                          DocInputFactory docInputFactory,\n+                                          RoutedCollectPhase collectPhase,\n+                                          CollectTask collectTask) {\n+        Collection<? extends Projection> shardProjections = shardProjections(collectPhase.projections());\n+        GroupProjection groupProjection = getSinglePartialGroupProjection(shardProjections);\n+        if (groupProjection == null) {\n+            return null;\n+        }\n+\n+        ArrayList<Reference> docKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var key : groupProjection.keys()) {\n+            var keyRef = getKeyRef(collectPhase.toCollect(), key);\n+            if (keyRef == null) {\n+                return null; // group by on non-reference\n+            } else {\n+                docKeyRefs.add(keyRef);\n+            }\n+        }\n+\n+        ArrayList<Reference> columnKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var keyRef : docKeyRefs) {\n+            var keyColumnRef = (Reference) DocReferences.inverseSourceLookup(keyRef);\n+            MappedFieldType keyFieldType = fieldTypeLookup.get(keyRef.column().fqn());\n+            if (keyFieldType == null || !keyFieldType.hasDocValues()) {\n+                return null;\n+            } else {\n+                columnKeyRefs.add(keyColumnRef);\n+            }\n+        }\n+\n+        //noinspection rawtypes\n+        List<DocValueAggregator> aggregators = DocValuesAggregates.createAggregators(\n+            functions,\n+            groupProjection.values(),\n+            fieldTypeLookup,\n+            collectPhase.toCollect(),\n+            collectTask.txnCtx().sessionSettings().searchPath()\n+        );\n+        if (aggregators == null) {\n+            return null;\n+        }\n+\n+        if (Symbols.containsColumn(collectPhase.toCollect(), DocSysColumns.SCORE)\n+            || Symbols.containsColumn(collectPhase.where(), DocSysColumns.SCORE)) {\n+            return null;\n+        }\n+\n+        ShardId shardId = indexShard.shardId();\n+        SharedShardContext sharedShardContext = collectTask.sharedShardContexts().getOrCreateContext(shardId);\n+        Engine.Searcher searcher = sharedShardContext.acquireSearcher(formatSource(collectPhase));\n+\n+        try {\n+            QueryShardContext queryShardContext = sharedShardContext.indexService().newQueryShardContext();\n+            collectTask.addSearcher(sharedShardContext.readerId(), searcher);\n+\n+            InputFactory.Context<? extends LuceneCollectorExpression<?>> docCtx\n+                = docInputFactory.getCtx(collectTask.txnCtx());\n+            docCtx.add(columnKeyRefs);\n+            List<? extends LuceneCollectorExpression<?>> keyExpressions = docCtx.expressions();\n+\n+            LuceneQueryBuilder.Context queryContext = luceneQueryBuilder.convert(\n+                collectPhase.where(),\n+                collectTask.txnCtx(),\n+                indexShard.mapperService(),\n+                indexShard.shardId().getIndexName(),\n+                queryShardContext,\n+                table,\n+                sharedShardContext.indexService().cache()\n+            );\n+\n+            var ramAccounting = collectTask.getRamAccounting();\n+            if (columnKeyRefs.size() == 1) {\n+                return GroupByIterator.forSingleKey(\n+                    aggregators,\n+                    searcher,\n+                    columnKeyRefs.get(0),\n+                    keyExpressions,\n+                    ramAccounting,\n+                    queryContext.query(),\n+                    new CollectorContext(sharedShardContext.readerId())\n+                );\n+            } else {\n+                return GroupByIterator.forManyKeys(\n+                    aggregators,\n+                    searcher,\n+                    columnKeyRefs,\n+                    keyExpressions,\n+                    ramAccounting,\n+                    queryContext.query(),\n+                    new CollectorContext(sharedShardContext.readerId())\n+                );\n+            }\n+        } catch (Throwable t) {\n+            searcher.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "originalPosition": 185}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjIzNDI4", "url": "https://github.com/crate/crate/pull/10481#pullrequestreview-483623428", "createdAt": "2020-09-07T15:12:03Z", "commit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNToxMjowM1rOHOCs6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNToxMzo0MVrOHOCvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4NjM3OA==", "bodyText": "this could be merged-into the loop below and thus would eliminate the docKeyRefs list and would avoid another loop.", "url": "https://github.com/crate/crate/pull/10481#discussion_r484486378", "createdAt": "2020-09-07T15:12:03Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/collect/DocValuesGroupByOptimizedIterator.java", "diffHunk": "@@ -0,0 +1,428 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.collect;\n+\n+import io.crate.breaker.MultiSizeEstimator;\n+import io.crate.breaker.RamAccounting;\n+import io.crate.breaker.SizeEstimatorFactory;\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.common.collections.Lists2;\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.exceptions.Exceptions;\n+import io.crate.execution.dsl.phases.RoutedCollectPhase;\n+import io.crate.execution.dsl.projection.GroupProjection;\n+import io.crate.execution.dsl.projection.Projection;\n+import io.crate.execution.engine.aggregation.DocValueAggregator;\n+import io.crate.execution.engine.aggregation.GroupByMaps;\n+import io.crate.execution.jobs.SharedShardContext;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.doc.lucene.CollectorContext;\n+import io.crate.expression.reference.doc.lucene.LuceneCollectorExpression;\n+import io.crate.expression.symbol.AggregateMode;\n+import io.crate.expression.symbol.InputColumn;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.lucene.FieldTypeLookup;\n+import io.crate.lucene.LuceneQueryBuilder;\n+import io.crate.metadata.DocReferences;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.doc.DocSysColumns;\n+import io.crate.metadata.doc.DocTableInfo;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.Weight;\n+import org.apache.lucene.util.Bits;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardId;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static io.crate.execution.dsl.projection.Projections.shardProjections;\n+import static io.crate.execution.engine.collect.LuceneShardCollectorProvider.formatSource;\n+\n+final class DocValuesGroupByOptimizedIterator {\n+\n+    @Nullable\n+    static BatchIterator<Row> tryOptimize(Functions functions,\n+                                          IndexShard indexShard,\n+                                          DocTableInfo table,\n+                                          LuceneQueryBuilder luceneQueryBuilder,\n+                                          FieldTypeLookup fieldTypeLookup,\n+                                          DocInputFactory docInputFactory,\n+                                          RoutedCollectPhase collectPhase,\n+                                          CollectTask collectTask) {\n+        Collection<? extends Projection> shardProjections = shardProjections(collectPhase.projections());\n+        GroupProjection groupProjection = getSinglePartialGroupProjection(shardProjections);\n+        if (groupProjection == null) {\n+            return null;\n+        }\n+\n+        ArrayList<Reference> docKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var key : groupProjection.keys()) {\n+            var keyRef = getKeyRef(collectPhase.toCollect(), key);\n+            if (keyRef == null) {\n+                return null; // group by on non-reference\n+            } else {\n+                docKeyRefs.add(keyRef);\n+            }\n+        }\n+\n+        ArrayList<Reference> columnKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var keyRef : docKeyRefs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ4NzEwMg==", "bodyText": "I think this could be checked at the very first to avoid unnecessary logic", "url": "https://github.com/crate/crate/pull/10481#discussion_r484487102", "createdAt": "2020-09-07T15:13:41Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/collect/DocValuesGroupByOptimizedIterator.java", "diffHunk": "@@ -0,0 +1,428 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.collect;\n+\n+import io.crate.breaker.MultiSizeEstimator;\n+import io.crate.breaker.RamAccounting;\n+import io.crate.breaker.SizeEstimatorFactory;\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.common.collections.Lists2;\n+import io.crate.data.BatchIterator;\n+import io.crate.data.CollectingBatchIterator;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.exceptions.Exceptions;\n+import io.crate.execution.dsl.phases.RoutedCollectPhase;\n+import io.crate.execution.dsl.projection.GroupProjection;\n+import io.crate.execution.dsl.projection.Projection;\n+import io.crate.execution.engine.aggregation.DocValueAggregator;\n+import io.crate.execution.engine.aggregation.GroupByMaps;\n+import io.crate.execution.jobs.SharedShardContext;\n+import io.crate.expression.InputFactory;\n+import io.crate.expression.reference.doc.lucene.CollectorContext;\n+import io.crate.expression.reference.doc.lucene.LuceneCollectorExpression;\n+import io.crate.expression.symbol.AggregateMode;\n+import io.crate.expression.symbol.InputColumn;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.Symbols;\n+import io.crate.lucene.FieldTypeLookup;\n+import io.crate.lucene.LuceneQueryBuilder;\n+import io.crate.metadata.DocReferences;\n+import io.crate.metadata.Functions;\n+import io.crate.metadata.Reference;\n+import io.crate.metadata.doc.DocSysColumns;\n+import io.crate.metadata.doc.DocTableInfo;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.search.DocIdSetIterator;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.ScoreMode;\n+import org.apache.lucene.search.Scorer;\n+import org.apache.lucene.search.Weight;\n+import org.apache.lucene.util.Bits;\n+import org.elasticsearch.index.engine.Engine;\n+import org.elasticsearch.index.mapper.MappedFieldType;\n+import org.elasticsearch.index.query.QueryShardContext;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.ShardId;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static io.crate.execution.dsl.projection.Projections.shardProjections;\n+import static io.crate.execution.engine.collect.LuceneShardCollectorProvider.formatSource;\n+\n+final class DocValuesGroupByOptimizedIterator {\n+\n+    @Nullable\n+    static BatchIterator<Row> tryOptimize(Functions functions,\n+                                          IndexShard indexShard,\n+                                          DocTableInfo table,\n+                                          LuceneQueryBuilder luceneQueryBuilder,\n+                                          FieldTypeLookup fieldTypeLookup,\n+                                          DocInputFactory docInputFactory,\n+                                          RoutedCollectPhase collectPhase,\n+                                          CollectTask collectTask) {\n+        Collection<? extends Projection> shardProjections = shardProjections(collectPhase.projections());\n+        GroupProjection groupProjection = getSinglePartialGroupProjection(shardProjections);\n+        if (groupProjection == null) {\n+            return null;\n+        }\n+\n+        ArrayList<Reference> docKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var key : groupProjection.keys()) {\n+            var keyRef = getKeyRef(collectPhase.toCollect(), key);\n+            if (keyRef == null) {\n+                return null; // group by on non-reference\n+            } else {\n+                docKeyRefs.add(keyRef);\n+            }\n+        }\n+\n+        ArrayList<Reference> columnKeyRefs = new ArrayList<>(groupProjection.keys().size());\n+        for (var keyRef : docKeyRefs) {\n+            var keyColumnRef = (Reference) DocReferences.inverseSourceLookup(keyRef);\n+            MappedFieldType keyFieldType = fieldTypeLookup.get(keyRef.column().fqn());\n+            if (keyFieldType == null || !keyFieldType.hasDocValues()) {\n+                return null;\n+            } else {\n+                columnKeyRefs.add(keyColumnRef);\n+            }\n+        }\n+\n+        //noinspection rawtypes\n+        List<DocValueAggregator> aggregators = DocValuesAggregates.createAggregators(\n+            functions,\n+            groupProjection.values(),\n+            fieldTypeLookup,\n+            collectPhase.toCollect(),\n+            collectTask.txnCtx().sessionSettings().searchPath()\n+        );\n+        if (aggregators == null) {\n+            return null;\n+        }\n+\n+        if (Symbols.containsColumn(collectPhase.toCollect(), DocSysColumns.SCORE)\n+            || Symbols.containsColumn(collectPhase.where(), DocSysColumns.SCORE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916"}, "originalPosition": 135}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51cdf90b27b898703066979b6ab2e4fb99b0e916", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/51cdf90b27b898703066979b6ab2e4fb99b0e916", "committedDate": "2020-09-07T13:39:38Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations.\n\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      638.100 \u00b1  325.566 |    211.815 |    482.160 |    932.585 |   3125.512 |\n|   V2    |      373.246 \u00b1  196.211 |    124.022 |    277.423 |    549.255 |   1615.749 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  52.38%                           -  53.91%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 52.38%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      452.103 \u00b1  218.103 |    151.666 |    345.346 |    667.845 |   1006.138 |\n|   V2    |      185.711 \u00b1   85.982 |     53.151 |    145.821 |    266.296 |    450.111 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  83.53%                           -  81.25%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 83.53%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2103.870 \u00b1 1050.969 |    497.677 |   1709.958 |   3193.367 |   4763.876 |\n|   V2    |     1859.424 \u00b1  942.139 |    414.991 |   1486.976 |   2866.043 |   3878.281 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  12.34%                           -  13.95%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 12.34%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      381.050 \u00b1  208.475 |    104.771 |    396.171 |    480.988 |   1456.100 |\n|   V2    |      416.578 \u00b1  230.937 |    111.100 |    421.884 |    525.586 |   1559.578 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   8.91%                           +   6.29%\nThere is a 98.92% probability that the observed difference is not random, and the best estimate of that difference is 8.91%\nThe test has statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      436.798 \u00b1  612.384 |     54.301 |    187.792 |    264.789 |   2168.169 |\n|   V2    |      394.126 \u00b1  455.784 |     47.463 |    236.423 |    321.290 |   1533.854 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  10.27%                           +  22.93%\nThere is a 42.32% probability that the observed difference is not random, and the best estimate of that difference is 10.27%\nThe test has no statistical significance\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  218     2.60     1.91 |    0     0.00     0.00 |     2147      123 |  2092.40     278781\n V2 |  262     2.60     1.76 |    0     0.00     0.00 |     2147       52 |  2113.17     336127\n\nV1 top allocation frames\n  BytesRef.utf8ToString():89196875640\n  StringUTF16.compress(...):55279245409\n  GroupingCollector.evalKeyInputs(List):46236358862\n  Float.valueOf(float):43693361381\n  ArrayList.<init>(int):43296970152\nV2 top allocation frames\n  BytesRef.utf8ToString():121696878465\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):60725497291\n  StringUTF16.compress(...):60709561912\n  ArrayList.<init>(int):60696946969\n  Float.valueOf(float):30925578229"}, "afterCommit": {"oid": "76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34", "committedDate": "2020-09-07T20:59:10Z", "message": "fixup! Use doc values aggregators in the group by iterator."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODM2Mjkw", "url": "https://github.com/crate/crate/pull/10481#pullrequestreview-483836290", "createdAt": "2020-09-08T06:44:17Z", "commit": {"oid": "76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjo0NDoxN1rOHOO2dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjo0NDoxN1rOHOO2dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4NTQzMQ==", "bodyText": "why not as the very first check even before checking for shard projections?", "url": "https://github.com/crate/crate/pull/10481#discussion_r484685431", "createdAt": "2020-09-08T06:44:17Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/collect/DocValuesGroupByOptimizedIterator.java", "diffHunk": "@@ -98,24 +97,23 @@\n             return null;\n         }\n \n-        ArrayList<Reference> docKeyRefs = new ArrayList<>(groupProjection.keys().size());\n-        for (var key : groupProjection.keys()) {\n-            var keyRef = getKeyRef(collectPhase.toCollect(), key);\n-            if (keyRef == null) {\n-                return null; // group by on non-reference\n-            } else {\n-                docKeyRefs.add(keyRef);\n-            }\n+        if (Symbols.containsColumn(collectPhase.toCollect(), DocSysColumns.SCORE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa89c5a4f0160159007745b5c90f6cc5fce582a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/daa89c5a4f0160159007745b5c90f6cc5fce582a", "committedDate": "2020-09-08T07:34:19Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations.\n\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      638.100 \u00b1  325.566 |    211.815 |    482.160 |    932.585 |   3125.512 |\n|   V2    |      373.246 \u00b1  196.211 |    124.022 |    277.423 |    549.255 |   1615.749 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  52.38%                           -  53.91%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 52.38%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      452.103 \u00b1  218.103 |    151.666 |    345.346 |    667.845 |   1006.138 |\n|   V2    |      185.711 \u00b1   85.982 |     53.151 |    145.821 |    266.296 |    450.111 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  83.53%                           -  81.25%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 83.53%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2103.870 \u00b1 1050.969 |    497.677 |   1709.958 |   3193.367 |   4763.876 |\n|   V2    |     1859.424 \u00b1  942.139 |    414.991 |   1486.976 |   2866.043 |   3878.281 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  12.34%                           -  13.95%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 12.34%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      381.050 \u00b1  208.475 |    104.771 |    396.171 |    480.988 |   1456.100 |\n|   V2    |      416.578 \u00b1  230.937 |    111.100 |    421.884 |    525.586 |   1559.578 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   8.91%                           +   6.29%\nThere is a 98.92% probability that the observed difference is not random, and the best estimate of that difference is 8.91%\nThe test has statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      436.798 \u00b1  612.384 |     54.301 |    187.792 |    264.789 |   2168.169 |\n|   V2    |      394.126 \u00b1  455.784 |     47.463 |    236.423 |    321.290 |   1533.854 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  10.27%                           +  22.93%\nThere is a 42.32% probability that the observed difference is not random, and the best estimate of that difference is 10.27%\nThe test has no statistical significance\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  218     2.60     1.91 |    0     0.00     0.00 |     2147      123 |  2092.40     278781\n V2 |  262     2.60     1.76 |    0     0.00     0.00 |     2147       52 |  2113.17     336127\n\nV1 top allocation frames\n  BytesRef.utf8ToString():89196875640\n  StringUTF16.compress(...):55279245409\n  GroupingCollector.evalKeyInputs(List):46236358862\n  Float.valueOf(float):43693361381\n  ArrayList.<init>(int):43296970152\nV2 top allocation frames\n  BytesRef.utf8ToString():121696878465\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):60725497291\n  StringUTF16.compress(...):60709561912\n  ArrayList.<init>(int):60696946969\n  Float.valueOf(float):30925578229"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/76cf692f5cb2a8fbd82e5d2c4368f33e167a8f34", "committedDate": "2020-09-07T20:59:10Z", "message": "fixup! Use doc values aggregators in the group by iterator."}, "afterCommit": {"oid": "daa89c5a4f0160159007745b5c90f6cc5fce582a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/daa89c5a4f0160159007745b5c90f6cc5fce582a", "committedDate": "2020-09-08T07:34:19Z", "message": "Use doc values aggregators in the group by iterator.\n\nDocValuesGroupByOptimizedIterator is kicked in when the group by keys and\naggregatefunctions fields utilize doc values. This optimization won't replace\nthe group by a single string key optimization. The optimization uses the\nDocValuesAggregator implementations, if any exists for the used aggregation\nfunctionis signatures, to perform the required aggregations.\n\nV1: 4.3.0-91eab4079418606c6800b03f9b438adabb1cb7f4\nV2: 4.3.0-7a781f2ce9e0508a1fbbe8f8aca4316b497ee684\n\nQ: select avg(\"adRevenue\"), sum(\"adRevenue\"), min(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      638.100 \u00b1  325.566 |    211.815 |    482.160 |    932.585 |   3125.512 |\n|   V2    |      373.246 \u00b1  196.211 |    124.022 |    277.423 |    549.255 |   1615.749 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  52.38%                           -  53.91%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 52.38%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      452.103 \u00b1  218.103 |    151.666 |    345.346 |    667.845 |   1006.138 |\n|   V2    |      185.711 \u00b1   85.982 |     53.151 |    145.821 |    266.296 |    450.111 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  83.53%                           -  81.25%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 83.53%\nThe test has statistical significance\n\nQ: select avg(\"adRevenue\") from uservisits group by \"cCode\", \"duration\"\nC: 10\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |     2103.870 \u00b1 1050.969 |    497.677 |   1709.958 |   3193.367 |   4763.876 |\n|   V2    |     1859.424 \u00b1  942.139 |    414.991 |   1486.976 |   2866.043 |   3878.281 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  12.34%                           -  13.95%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 12.34%\nThe test has statistical significance\n\nQ: select \"cCode\", avg(\"adRevenue\") from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      381.050 \u00b1  208.475 |    104.771 |    396.171 |    480.988 |   1456.100 |\n|   V2    |      416.578 \u00b1  230.937 |    111.100 |    421.884 |    525.586 |   1559.578 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               +   8.91%                           +   6.29%\nThere is a 98.92% probability that the observed difference is not random, and the best estimate of that difference is 8.91%\nThe test has statistical significance\n\nQ: select \"cCode\", count(*) from uservisits group by \"cCode\"\nC: 15\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |      436.798 \u00b1  612.384 |     54.301 |    187.792 |    264.789 |   2168.169 |\n|   V2    |      394.126 \u00b1  455.784 |     47.463 |    236.423 |    321.290 |   1533.854 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  10.27%                           +  22.93%\nThere is a 42.32% probability that the observed difference is not random, and the best estimate of that difference is 10.27%\nThe test has no statistical significance\n\nSystem/JVM Metrics (durations in ms, byte-values in MB)\n    |    YOUNG GC            |       OLD GC           |      HEAP         |     ALLOC\n    |  cnt      avg      max |  cnt      avg      max |  initial     used |     rate      total\n V1 |  218     2.60     1.91 |    0     0.00     0.00 |     2147      123 |  2092.40     278781\n V2 |  262     2.60     1.76 |    0     0.00     0.00 |     2147       52 |  2113.17     336127\n\nV1 top allocation frames\n  BytesRef.utf8ToString():89196875640\n  StringUTF16.compress(...):55279245409\n  GroupingCollector.evalKeyInputs(List):46236358862\n  Float.valueOf(float):43693361381\n  ArrayList.<init>(int):43296970152\nV2 top allocation frames\n  BytesRef.utf8ToString():121696878465\n  DocValuesGroupByOptimizedIterator$GroupByIterator.lambda$forManyKeys$2(List, List):60725497291\n  StringUTF16.compress(...):60709561912\n  ArrayList.<init>(int):60696946969\n  Float.valueOf(float):30925578229"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3048, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}