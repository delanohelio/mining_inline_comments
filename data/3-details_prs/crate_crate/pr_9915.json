{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzY1ODMy", "number": 9915, "title": "New TimeTZType to be returned by scalar function current_time", "bodyText": "Type for time of day, no date, with time zone, and microsecond resolution.\nLow value: 00:00:00+18:00\nMax value: 24:00:00-18:00\nType name: time with time zone\nType size: 12 bytes\nNote: Postgres type supports precision definition, we use max (1e6).\nPostgres doc.\nIn postgres:\nselect current_timestamp, round(extract(epoch from current_timestamp) * 1000), current_time, round(extract(epoch from current_time) * 1000000);\n\n      current_timestamp       |     round     |   current_time    |    round\n------------------------------+---------------+-------------------+-------------\n 2020-05-27 11:39:54.97238+02 | 1590572394972 | 11:39:54.97238+02 | 34794972380", "createdAt": "2020-05-04T06:41:20Z", "url": "https://github.com/crate/crate/pull/9915", "merged": true, "mergeCommit": {"oid": "62165ce0c3c07b8460c45b492974c876c95b20a1"}, "closed": true, "closedAt": "2020-06-16T09:58:08Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcesGUUABqjMzMDk1MTg5MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrxwuuABqjM0NDgwNjc1NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4568e82a46bddbb246425e1e51358d5385b50d4c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4568e82a46bddbb246425e1e51358d5385b50d4c", "committedDate": "2020-05-06T17:11:46Z", "message": "Fix postgres.rst"}, "afterCommit": {"oid": "bbc4d8db07481bc91999ce5627d4978bc31661c9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/bbc4d8db07481bc91999ce5627d4978bc31661c9", "committedDate": "2020-05-06T17:26:05Z", "message": "Fix postgres.rst"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbc4d8db07481bc91999ce5627d4978bc31661c9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/bbc4d8db07481bc91999ce5627d4978bc31661c9", "committedDate": "2020-05-06T17:26:05Z", "message": "Fix postgres.rst"}, "afterCommit": {"oid": "b347cb1b845a7143bdf102b0d9540a0d38d5909c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b347cb1b845a7143bdf102b0d9540a0d38d5909c", "committedDate": "2020-05-06T17:37:21Z", "message": "Fist idea on how to implement TimeType on an Integer, WIP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjM1NzMw", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-407235730", "createdAt": "2020-05-07T08:01:11Z", "commit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOGRy8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMjo1OVrOGRzt5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxMzcwNQ==", "bodyText": "Why is BOOLEAN allowed here?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421313705", "createdAt": "2020-05-07T08:01:11Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -169,6 +174,7 @@\n         entry(IP.id(), Set.of(STRING.id())),\n         entry(TIMESTAMPZ.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMP.id())),\n         entry(TIMESTAMP.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMPZ.id())),\n+        entry(TIME.id(), Set.of(BOOLEAN.id(), STRING.id(), INTEGER.id())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDI2Ng==", "bodyText": "Is  float -> time really a safe (lossless) conversion?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421314266", "createdAt": "2020-05-07T08:02:07Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -181,11 +187,11 @@\n      * used to store the value)\n      */\n     private static final Map<Integer, Set<DataType>> SAFE_CONVERSIONS = Map.of(\n-        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n+        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n         LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, DOUBLE),\n-        FLOAT.id(), Set.of(DOUBLE));\n+        FLOAT.id(), Set.of(TIME, DOUBLE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final int id;\n          \n          \n            \n                private final String name;\n          \n      \n    \n    \n  \n\nGiven that there is only a single instance with fixed types we can remove the attributes and just return the constants. Reduces the memory footprint a bit.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421316049", "createdAt": "2020-05-07T08:05:17Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {\n+\n+    public static final int ID = 19;\n+    public static final String NAME = \"time without time zone\";\n+    public static final TimeType INSTANCE = new TimeType(ID, NAME);\n+\n+\n+    private final int id;\n+    private final String name;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjQwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static int translateFrom(@Nonnull Float number) {\n          \n          \n            \n                public static int translateFrom(float number) {", "url": "https://github.com/crate/crate/pull/9915#discussion_r421316409", "createdAt": "2020-05-07T08:05:58Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {\n+\n+    public static final int ID = 19;\n+    public static final String NAME = \"time without time zone\";\n+    public static final TimeType INSTANCE = new TimeType(ID, NAME);\n+\n+\n+    private final int id;\n+    private final String name;\n+\n+    private TimeType(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public int id() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIME;\n+    }\n+\n+    @Override\n+    public Streamer<Integer> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(Integer val1, Integer val2) {\n+        return Integer.compare(val1, val2);\n+    }\n+\n+    @Override\n+    public Integer readValueFrom(StreamInput in) throws IOException {\n+        return in.readBoolean() ? null : in.readInt();\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, Integer v) throws IOException {\n+        out.writeBoolean(v == null);\n+        if (v != null) {\n+            out.writeInt(v);\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return IntegerType.INTEGER_SIZE;\n+    }\n+\n+    @Override\n+    public Integer value(Object value) throws ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof String) {\n+            return parseTime((String) value);\n+        }\n+        // float values are treated as \"seconds.milliseconds\"\n+        if (value instanceof Double) {\n+            Double n = (Double) value;\n+            if (n.doubleValue() < Float.MAX_VALUE) {\n+                return translateFrom(n.floatValue());\n+            }\n+            throw new IllegalArgumentException(String.format(\n+                Locale.ENGLISH,\n+                \"value too large [%f] if does not fit in a float\",\n+                value));\n+        }\n+        if (value instanceof Float) {\n+            return translateFrom((Float) value);\n+        }\n+        return value instanceof Integer ? (Integer) value : ((Number) value).intValue();\n+    }\n+\n+    public static int translateFrom(@Nonnull Float number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzcyNg==", "bodyText": "Could you add some docs that explain the allowed input formats and the internal storage format a bit?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421317726", "createdAt": "2020-05-07T08:08:21Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxODc4NQ==", "bodyText": "I think CURRENT_TIME could be explained without referencing to CURRENT_TIMESTAMP - would be easier to understand as you don't need to piggy-back onto existing knowledge of CURRENT_TIMESTAMP", "url": "https://github.com/crate/crate/pull/9915#discussion_r421318785", "createdAt": "2020-05-07T08:10:13Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,6 +69,9 @@ None\n Changes\n =======\n \n+- Added the scalar function ``CURRENT_TIME``, which returns the time portion\n+  of ``CURRENT_TIMESTAMP`` in absolute milliseconds, see :ref:`current_time`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTA2NA==", "bodyText": "Same here. Please make the primary explanation without reference to CURRENT_TIMESTAMP", "url": "https://github.com/crate/crate/pull/9915#discussion_r421319064", "createdAt": "2020-05-07T08:10:43Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -816,6 +816,22 @@ are given.\n    ``System.currentTimeMillis()``. So its actual result depends on the\n    underlying operating system.\n \n+.. _current_time:\n+\n+``CURRENT_TIME``\n+----------------\n+\n+The ``CURRENT_TIME`` expression returns the time portion of ``CURRENT_TIMESTAMP``\n+in absolute milliseconds. The same time value is returned for every invocation of\n+a single statement, and will match the time portion of invocations to\n+``CURRENT_TIMESTAMP`` in the same statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTM5NA==", "bodyText": "This is missing the typtype column? That can't be working, no?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421319394", "createdAt": "2020-05-07T08:11:16Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -159,42 +159,42 @@ table available in CrateDB::\n     cr> SELECT oid, typname, typarray, typelem, typlen, typtype, typcategory\n     ... FROM pg_catalog.pg_type\n     ... ORDER BY oid;\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    |  oid | typname                      | typarray | typelem | typlen | typtype | typcategory |\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    |   16 | bool                         |     1000 |       0 |      1 | b       | N           |\n-    |   18 | char                         |     1002 |       0 |      1 | b       | S           |\n-    |   19 | name                         |       -1 |       0 |     64 | b       | S           |\n-    |   20 | int8                         |     1016 |       0 |      8 | b       | N           |\n-    |   21 | int2                         |     1005 |       0 |      2 | b       | N           |\n-    |   23 | int4                         |     1007 |       0 |      4 | b       | N           |\n-    |  114 | json                         |      199 |       0 |     -1 | b       | U           |\n-    |  199 | _json                        |        0 |     114 |     -1 | b       | A           |\n-    |  600 | point                        |     1017 |       0 |     16 | b       | G           |\n-    |  700 | float4                       |     1021 |       0 |      4 | b       | N           |\n-    |  701 | float8                       |     1022 |       0 |      8 | b       | N           |\n-    | 1000 | _bool                        |        0 |      16 |     -1 | b       | A           |\n-    | 1002 | _char                        |        0 |      18 |     -1 | b       | A           |\n-    | 1005 | _int2                        |        0 |      21 |     -1 | b       | A           |\n-    | 1007 | _int4                        |        0 |      23 |     -1 | b       | A           |\n-    | 1015 | _varchar                     |        0 |    1043 |     -1 | b       | A           |\n-    | 1016 | _int8                        |        0 |      20 |     -1 | b       | A           |\n-    | 1017 | _point                       |        0 |     600 |     -1 | b       | A           |\n-    | 1021 | _float4                      |        0 |     700 |     -1 | b       | A           |\n-    | 1022 | _float8                      |        0 |     701 |     -1 | b       | A           |\n-    | 1043 | varchar                      |     1015 |       0 |     -1 | b       | S           |\n-    | 1114 | timestamp without time zone  |     1115 |       0 |      8 | b       | D           |\n-    | 1115 | _timestamp without time zone |        0 |    1114 |     -1 | b       | A           |\n-    | 1184 | timestamptz                  |     1185 |       0 |      8 | b       | D           |\n-    | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n-    | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n-    | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n-    | 2249 | record                       |     2287 |       0 |     -1 | p       | P           |\n-    | 2276 | any                          |        0 |       0 |      4 | p       | P           |\n-    | 2277 | anyarray                     |        0 |    2276 |     -1 | p       | P           |\n-    | 2287 | _record                      |        0 |    2249 |     -1 | p       | A           |\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    SELECT 31 rows in set (... sec)\n+    \n+    +------+------------------------------+----------+---------+--------+-------------+\n+    |  oid | typname                      | typarray | typelem | typlen | typcategory |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDEzMw==", "bodyText": "The conditions seem a bit redundant - maybe this could be changed to avoid the duplicate isTime checks - I think then it would also be easier to read.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421320133", "createdAt": "2020-05-07T08:12:32Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -448,13 +449,15 @@ protected Symbol visitExpression(Expression node, ExpressionAnalysisContext cont\n \n         @Override\n         protected Symbol visitCurrentTime(CurrentTime node, ExpressionAnalysisContext context) {\n-            if (!node.getType().equals(CurrentTime.Type.TIMESTAMP)) {\n+            boolean isTime = node.getType().equals(CurrentTime.Type.TIME);\n+            if (!(node.getType().equals(CurrentTime.Type.TIMESTAMP) || isTime)) {\n                 visitExpression(node, context);\n             }\n+            String functionName = isTime ? CurrentTimeFunction.NAME : CurrentTimestampFunction.NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMTMxMA==", "bodyText": "Why does this return Long and TIMESTAMPZ ? Shouldn't this return the new time type?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421321310", "createdAt": "2020-05-07T08:14:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.timestamp;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+import javax.annotation.Nullable;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CurrentTimeFunction extends Scalar<Long, Integer> {\n+\n+    public static final String NAME = \"current_time\";\n+\n+    public static final FunctionInfo INFO = new FunctionInfo(\n+        new FunctionIdent(NAME, List.of(DataTypes.INTEGER)),\n+        DataTypes.TIMESTAMPZ,\n+        FunctionInfo.Type.SCALAR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMzEwNQ==", "bodyText": "Using Instant may be a bit expensive for what it does", "url": "https://github.com/crate/crate/pull/9915#discussion_r421323105", "createdAt": "2020-05-07T08:17:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.timestamp;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+import javax.annotation.Nullable;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CurrentTimeFunction extends Scalar<Long, Integer> {\n+\n+    public static final String NAME = \"current_time\";\n+\n+    public static final FunctionInfo INFO = new FunctionInfo(\n+        new FunctionIdent(NAME, List.of(DataTypes.INTEGER)),\n+        DataTypes.TIMESTAMPZ,\n+        FunctionInfo.Type.SCALAR,\n+        Collections.emptySet());\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.TIMESTAMPZ.getTypeSignature()\n+            ),\n+            (signature, args) -> new CurrentTimeFunction(signature)\n+        );\n+    }\n+\n+    private final Signature signature;\n+\n+    public CurrentTimeFunction(Signature signature) {\n+        this.signature = signature;\n+    }\n+\n+    @Override\n+    @SafeVarargs\n+    public final Long evaluate(TransactionContext txnCtx, Input<Integer>... args) {\n+        long now = txnCtx.currentTimeMillis();\n+        long justDate = Instant\n+            .ofEpochMilli(now)\n+            .atZone(ZoneOffset.UTC)\n+            .truncatedTo(ChronoUnit.DAYS)\n+            .toInstant()\n+            .toEpochMilli();\n+        return CurrentTimestampFunction.applyPrecision(now - justDate, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTA1OQ==", "bodyText": "In PostgreSQL the typlen is 8. Which would imply that we use less storage and that the streaming implementation is not compatible.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421325059", "createdAt": "2020-05-07T08:20:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+import static io.crate.types.TimeType.parseTime;\n+import static io.crate.types.TimeType.formatTime;\n+\n+\n+final class TimeType extends PGType<Integer> {\n+\n+    public static final PGType<Integer> INSTANCE = new TimeType();\n+\n+    private static final int OID = 1083;\n+    private static final int TYPE_MOD = -1;\n+    private static final int TYPE_LEN = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTk5OQ==", "bodyText": "Why is this necessary?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421325999", "createdAt": "2020-05-07T08:22:28Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -313,7 +314,10 @@ public void testWhereNotEqualAnyWithLargeArray() throws Exception {\n \n     @Test\n     public void testNullOperators() throws Exception {\n-        DataType<?> type = randomType();\n+        DataType<?> type;\n+        do {\n+           type = randomType();\n+        } while (type == DataTypes.INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNjMwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ensureYellow();\n          \n      \n    \n    \n  \n\nensureYellow is implicit on CREATE TABLE", "url": "https://github.com/crate/crate/pull/9915#discussion_r421326308", "createdAt": "2020-05-07T08:22:59Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "diffHunk": "@@ -575,4 +575,15 @@ public void testInsertTimestampPreferMillis() {\n         assertThat((Long) response.rows()[0][0], is(1000L));\n         assertThat((Long) response.rows()[1][0], is(2016L));\n     }\n+\n+    @Test\n+    public void test_insert_time_without_time_zone() {\n+        execute(\"create table eons_table (dt time) \" +\n+                \"clustered into 2 shards with (number_of_replicas=0)\");\n+        ensureYellow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9c039c0436c10d2017eed7295ed74f94aec82d2b", "committedDate": "2020-05-06T17:46:34Z", "message": "Add missing method"}, "afterCommit": {"oid": "f746ad18c19dc0b43e5f56312dfa6c2f74af433f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f746ad18c19dc0b43e5f56312dfa6c2f74af433f", "committedDate": "2020-05-11T10:09:11Z", "message": "Add missing method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f746ad18c19dc0b43e5f56312dfa6c2f74af433f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f746ad18c19dc0b43e5f56312dfa6c2f74af433f", "committedDate": "2020-05-11T10:09:11Z", "message": "Add missing method"}, "afterCommit": {"oid": "7d4c28784b2faa7212a193ea6382c4de450bd61f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/7d4c28784b2faa7212a193ea6382c4de450bd61f", "committedDate": "2020-05-21T08:20:30Z", "message": "Add missing method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4662abd17512d25f9112929dc34cbde352c1a8f2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4662abd17512d25f9112929dc34cbde352c1a8f2", "committedDate": "2020-05-21T11:00:52Z", "message": "Fix TimeType wiring in DataTypes, paying attention to conversions and mapping to lucene long"}, "afterCommit": {"oid": "b37861c93ef185dd14de0f637ef7dd92120ed5de", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b37861c93ef185dd14de0f637ef7dd92120ed5de", "committedDate": "2020-05-21T11:50:08Z", "message": "Fix TimeType wiring in DataTypes, paying attention to conversions and mapping to lucene long"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8f2e585abbd6d040c994f37691e197fa2d793a6", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d8f2e585abbd6d040c994f37691e197fa2d793a6", "committedDate": "2020-05-21T15:38:28Z", "message": "Correct names on mappings to crate types"}, "afterCommit": {"oid": "e262734e8d3c08935e8c85e04175c08b0306830e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e262734e8d3c08935e8c85e04175c08b0306830e", "committedDate": "2020-05-22T10:22:16Z", "message": "Remove unnecessary translateFrom"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8395786734aabc70ab2a864c11bc998070b1b1a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a8395786734aabc70ab2a864c11bc998070b1b1a", "committedDate": "2020-05-22T14:48:06Z", "message": "Fix wrong expected class for exception"}, "afterCommit": {"oid": "9fd0ca5b4ed1de4c7c7bb84365381d0c92b722ba", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9fd0ca5b4ed1de4c7c7bb84365381d0c92b722ba", "committedDate": "2020-05-23T18:22:05Z", "message": "Improve parser, add tests, document the class for clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjI4MjYz", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-417628263", "createdAt": "2020-05-25T10:49:02Z", "commit": {"oid": "0d88b70f89c6a30a168b07bf3edad0055064f025"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDo0OTowMlrOGZ9JJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDo0OTowMlrOGZ9JJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTM0OQ==", "bodyText": "it can be removed, the defined data type rule is used to define types that cannot be matched with ident, e.g. data types with whitespaces.", "url": "https://github.com/crate/crate/pull/9915#discussion_r429869349", "createdAt": "2020-05-25T10:49:02Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -548,6 +548,8 @@ definedDataType\n     : DOUBLE PRECISION\n     | TIMESTAMP WITHOUT TIME ZONE\n     | TIMESTAMP WITH TIME ZONE\n+    | TIME WITHOUT TIME ZONE\n+    | TIME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d88b70f89c6a30a168b07bf3edad0055064f025"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e2aab3a6f3a83fcc4866bc3ad00025ad0abc92c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4e2aab3a6f3a83fcc4866bc3ad00025ad0abc92c", "committedDate": "2020-05-25T10:56:46Z", "message": "Remove redundant definedDataType"}, "afterCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/09bec9092ab9c13daadeb2ae73d3f87ffad7481b", "committedDate": "2020-05-25T15:07:24Z", "message": "Conversions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODI0MDM1", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-417824035", "createdAt": "2020-05-25T17:36:25Z", "commit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzozNjoyNVrOGaG4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzozNjoyNVrOGaG4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyOTA0OA==", "bodyText": "Where is this difference in precision coming from?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430029048", "createdAt": "2020-05-25T17:36:25Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as milliseconds from Jan 1st 1970 (EPOCH), ignoring\n+ * the date portion, the time zone, and storing the value as UTC long.\n+ * <p>\n+ * Accepts two kinds of literal:\n+ * <ol>\n+ *    <li><b>numeric:</b>\n+ *      <ul>\n+ *        <li>short, integer and long values are taken at face value\n+ *        and range checked.</li>\n+ *        <li>double and float values are interpreted as seconds.millis\n+ *        and are range checked. float values loose some precision (milliseconds).\n+ *        </li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>hhmmss: e.g. 23:12:21</li>\n+ *        <li>hhmm: e.g. 23:12:00</li>\n+ *        <li>hh: e.g. 23:00:00</li>\n+ *        <li>hhmmss.ffffff: e.g. 23:12:21.999</li>\n+ *        <li>hhmm.ffffff: e.g. 23:12:00.999</li>\n+ *        <li>hh.ffffff: e.g. 23:00:00.999</li>\n+ *        <li>any ISO-8601 extended local time format</li>\n+ *      </ul>\n+ *    </li>\n+ * </ol>\n+ *\n+ * Precision is milli seconds (10e3 in a second, unlike postgres which is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/09bec9092ab9c13daadeb2ae73d3f87ffad7481b", "committedDate": "2020-05-25T15:07:24Z", "message": "Conversions"}, "afterCommit": {"oid": "76ceeaeafd74cb56f1b360a6c9037ab3458bdea6", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/76ceeaeafd74cb56f1b360a6c9037ab3458bdea6", "committedDate": "2020-05-26T13:40:38Z", "message": "Cannot create/alter table if column definition of type time"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76ceeaeafd74cb56f1b360a6c9037ab3458bdea6", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/76ceeaeafd74cb56f1b360a6c9037ab3458bdea6", "committedDate": "2020-05-26T13:40:38Z", "message": "Cannot create/alter table if column definition of type time"}, "afterCommit": {"oid": "693bc0d6eb7e0a6a978f63d61bb68ef2d1b73d2e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/693bc0d6eb7e0a6a978f63d61bb68ef2d1b73d2e", "committedDate": "2020-05-26T18:31:08Z", "message": "Time is now internally stored as micros"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTE5NjQ5", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-418919649", "createdAt": "2020-05-27T07:21:06Z", "commit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTowNlrOGa8e8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNzowMFrOGa8rlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzEyMg==", "bodyText": "I think I'd rather be restrictive here for now and not allow any casts unless required for PostgreSQL compatibility (e.g. casting the string to time, but only if done explicitly)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907122", "createdAt": "2020-05-27T07:21:06Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -170,6 +175,7 @@\n         entry(IP.id(), Set.of(STRING.id())),\n         entry(TIMESTAMPZ.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMP.id())),\n         entry(TIMESTAMP.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMPZ.id())),\n+        entry(TIME.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzM2NQ==", "bodyText": "Similar here. I'd leave TIME out for now.", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907365", "createdAt": "2020-05-27T07:21:34Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -182,10 +188,11 @@\n      * used to store the value)\n      */\n     private static final Map<Integer, Set<DataType>> SAFE_CONVERSIONS = Map.of(\n-        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, DOUBLE),\n+        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, TIME, DOUBLE),\n+        DOUBLE.id(), Set.of(TIME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzg5Nw==", "bodyText": "Given that we don't want to support storage yet, can we remove this entry?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907897", "createdAt": "2020-05-27T07:22:28Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -380,6 +390,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     );\n \n     private static final Map<Integer, String> TYPE_IDS_TO_MAPPINGS = Map.ofEntries(\n+        entry(TIME.id(), \"long\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTY2Mg==", "bodyText": "PostgreSQL doesn't support numeric conversion to time:\nselect 231221.999::time;\nERROR:  42846: cannot cast type numeric to time without time zone\nLINE 1: select 231221.999::time\n\nI think we should also restrict this and not support it.\nCompared to using a string literal, which is supported:\n# select '231221.999'::time;\n     time\n--------------\n 23:12:21.999\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430909662", "createdAt": "2020-05-27T07:25:42Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.time.temporal.ChronoField;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as microseconds from midnight, ignoring the time\n+ * zone and storing the value as UTC <b>long</b>.\n+ *\n+ * <p>\n+ *\n+ * There are 1000_000 microseconds in one second:\n+ *\n+ * <pre>\n+ *     (24 * 3600 + 59 * 60 + 59) * 1000_000L > Integer.MAX_VALUE\n+ * </pre>\n+ *\n+ * Thus the range for time values is 0 .. 86400000000 (max number\n+ * of micros in a day), where both extremes are equivalent to\n+ * '00:00:00:000000' and '24:00:00.000000' respectively.\n+ *\n+ * <p>\n+ *\n+ * Accepts four kinds of literal:\n+ * <ol>\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>'hhmmss': e.g. '232121', equivalent to '23:12:21'</li>\n+ *        <li>'hhmm': e.g. '2312', equivalent to '23:12:00'</li>\n+ *        <li>'hh': e.g. '23', equivalent to '23:00:00'</li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>numeric:\n+ *      <ul>\n+ *        <li>integer and long values are first interpreted as\n+ *        'text'. Failing this they are kept as is, representing\n+ *        microseconds from midnight, ignoring the time zone\n+ *        and storing the value as UTC.\n+ *    </li>\n+ *\n+ *    <li>text high precision:\n+ *      <p>\n+ *      Expects up to six digits after the floating point (number of\n+ *      micro seconds), and it will right pad with zeroes if this is\n+ *      not the case. For instance the examples below are all padded\n+ *      to 999000 micro seconds.\n+ *      <ul>\n+ *        <li>'hhmmss.ffffff': e.g. '231221.999', equivalent to '23:12:21.999'</li>\n+ *        <li>'hhmm.ffffff': e.g. '2312.999', equivalent to '23:12:00.999'</li>\n+ *        <li>'hh.ffffff': e.g. '23.999', equivalent to '23:00:00.999'</li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>numeric high precision:\n+ *      <ul>\n+ *        <li>double and float values are interpreted as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDM1OQ==", "bodyText": "PostgreSQL also seems to support : inbetween:\nselect '14:32'::time;\n   time\n----------\n 14:32:00\n(1 row)\n\nCan we extend this?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430910359", "createdAt": "2020-05-27T07:27:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.time.temporal.ChronoField;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as microseconds from midnight, ignoring the time\n+ * zone and storing the value as UTC <b>long</b>.\n+ *\n+ * <p>\n+ *\n+ * There are 1000_000 microseconds in one second:\n+ *\n+ * <pre>\n+ *     (24 * 3600 + 59 * 60 + 59) * 1000_000L > Integer.MAX_VALUE\n+ * </pre>\n+ *\n+ * Thus the range for time values is 0 .. 86400000000 (max number\n+ * of micros in a day), where both extremes are equivalent to\n+ * '00:00:00:000000' and '24:00:00.000000' respectively.\n+ *\n+ * <p>\n+ *\n+ * Accepts four kinds of literal:\n+ * <ol>\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>'hhmmss': e.g. '232121', equivalent to '23:12:21'</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTE5OTk4", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-418919998", "createdAt": "2020-05-27T07:21:37Z", "commit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTozN1rOGa8gBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMjozNFrOGa827Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzM5OA==", "bodyText": "i think we do not need two entries for one type in the precedence", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907398", "createdAt": "2020-05-27T07:21:37Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -52,6 +52,8 @@\n         BYTE,\n         BOOLEAN,\n         SHORT,\n+        TIME_WITHOUT_TIME_ZONE,\n+        TIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzc1Mg==", "bodyText": "in pg it is just time\ntemplate1=# select typname from pg_catalog.pg_type where oid = 1083;\n typname\n---------\n time\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907752", "createdAt": "2020-05-27T07:22:13Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+import static io.crate.types.TimeType.parseTime;\n+import static io.crate.types.TimeType.formatTime;\n+\n+\n+final class TimeType extends PGType<Long> {\n+\n+    public static final PGType<Long> INSTANCE = new TimeType();\n+\n+    private static final int OID = 1083;\n+    private static final int TYPE_MOD = -1;\n+    private static final int TYPE_LEN = 8;\n+    private static final String TYPE_NAME = \"time without time zone\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODU4NQ==", "bodyText": "should be removed ?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430908585", "createdAt": "2020-05-27T07:23:47Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/planner/selectivity/SelectivityFunctionsTest.java", "diffHunk": "@@ -24,6 +25,7 @@\n \n public class SelectivityFunctionsTest extends CrateDummyClusterServiceUnitTest {\n \n+    @Seed(\"BAAF67D01CA68AAE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTUwMA==", "bodyText": "maybe extends CrateUnitTest, you also will get  ExpectedException from base class", "url": "https://github.com/crate/crate/pull/9915#discussion_r430909500", "createdAt": "2020-05-27T07:25:25Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package io.crate.types;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.function.Function;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class TimeTypeTest {\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDYwNw==", "bodyText": "this test case has around 60 assertions, is it possible to reduce or split it?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430910607", "createdAt": "2020-05-27T07:27:26Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package io.crate.types;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.function.Function;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class TimeTypeTest {\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void test_parse_time_range_overflow() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [86400000001] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(String.valueOf(24 * 3600 * 1000_000L + 1));\n+    }\n+\n+    @Test\n+    public void test_parse_time_range_underflow() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [-86400000000] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(String.valueOf(-24 * 3600 * 1000_000L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hh() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [25] is out of range for 'hh' [0, 24]\");\n+        TimeType.parseTime(\"25\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmm() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'mm' [0, 59]\");\n+        TimeType.parseTime(\"1778\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmmss() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'ss' [0, 59]\");\n+        TimeType.parseTime(\"175978\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hh_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [25] is out of range for 'hh' [0, 24]\");\n+        TimeType.parseTime(\"25.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmm_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'mm' [0, 59]\");\n+        TimeType.parseTime(\"1778.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmmss_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'ss' [0, 59]\");\n+        TimeType.parseTime(\"175978.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_micros_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [9999999] is out of range for 'micros' [0, 999999]\");\n+        TimeType.parseTime(\"00.9999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_range_overflow_take_two() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [86400999000] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(\"240000.999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_midnight_when_ISO_parser_does_not_like_it() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [24:00:00.000] is not a valid literal for TimeType\");\n+        TimeType.parseTime(\"24:00:00.000\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_midnight_when_ISO_parser_does_like_it() {\n+        assertThat(TimeType.parseTime(\"240000.000\"), is(24 * 60 * 60 * 1000_000L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_should_always_ignore_time_zone() {\n+        assertThat(TimeType.parseTime(\"01:00:00Z\"), is(3600000000L));\n+        assertThat(TimeType.parseTime(\"01:00:00+00\"), is(3600000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00-03:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00+0300\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00+03:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789+03:00\"), is(14400123456L));\n+        assertThat(TimeType.parseTime(\"04:00:00+0000\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789-0000\"), is(14400123456L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_no_time_zone_explicitly_mentioned() {\n+        assertThat(TimeType.parseTime(\"04:00:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"14400000\"), is(14400000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789\"), is(14400123456L));\n+        assertThat(TimeType.parseTime(\"14400123\"), is(14400123L));\n+    }\n+\n+    @Test\n+    public void test_format_time() {\n+        assertThat(TimeType.formatTime(14400000000L), is(\"04:00:00\"));\n+        assertThat(TimeType.formatTime(14400123000L), is(\"04:00:00.123\"));\n+    }\n+\n+    @Test\n+    public void test_value() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMjEwMg==", "bodyText": "is there a mapping with the time without time zonename?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430912102", "createdAt": "2020-05-27T07:30:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,7 +369,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n-        entry(\"date\", DataTypes.TIMESTAMPZ),\n+        entry(\"time\", DataTypes.TIME),\n+        entry(DataTypes.TIME.getName(), DataTypes.TIME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2MQ==", "bodyText": "why date is removed?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430913261", "createdAt": "2020-05-27T07:32:34Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,7 +369,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n-        entry(\"date\", DataTypes.TIMESTAMPZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODM4NDcy", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-417838472", "createdAt": "2020-05-25T18:30:16Z", "commit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMDoxNlrOGaHr7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMDoxNlrOGaHr7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjA5Mw==", "bodyText": "I store milliseconds from EPOCH, instead of microseconds from midnight (0L). Although I suppose that as EPOCH is also 0L, it would just be a matter of interpretation of the value. I went for milliseconds from epoch to make time look like a timestamp with no date.\nShould I try microseconds?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430042093", "createdAt": "2020-05-25T18:30:16Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as milliseconds from Jan 1st 1970 (EPOCH), ignoring\n+ * the date portion, the time zone, and storing the value as UTC long.\n+ * <p>\n+ * Accepts two kinds of literal:\n+ * <ol>\n+ *    <li><b>numeric:</b>\n+ *      <ul>\n+ *        <li>short, integer and long values are taken at face value\n+ *        and range checked.</li>\n+ *        <li>double and float values are interpreted as seconds.millis\n+ *        and are range checked. float values loose some precision (milliseconds).\n+ *        </li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>hhmmss: e.g. 23:12:21</li>\n+ *        <li>hhmm: e.g. 23:12:00</li>\n+ *        <li>hh: e.g. 23:00:00</li>\n+ *        <li>hhmmss.ffffff: e.g. 23:12:21.999</li>\n+ *        <li>hhmm.ffffff: e.g. 23:12:00.999</li>\n+ *        <li>hh.ffffff: e.g. 23:00:00.999</li>\n+ *        <li>any ISO-8601 extended local time format</li>\n+ *      </ul>\n+ *    </li>\n+ * </ol>\n+ *\n+ * Precision is milli seconds (10e3 in a second, unlike postgres which is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyOTA0OA=="}, "originalCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2996392c1d65dc0eed65ce12a3c8465a2e62d5a0", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/2996392c1d65dc0eed65ce12a3c8465a2e62d5a0", "committedDate": "2020-05-28T19:04:15Z", "message": "Fix style"}, "afterCommit": {"oid": "918d137534f32ff19b17e360e2d27467ac187cbe", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/918d137534f32ff19b17e360e2d27467ac187cbe", "committedDate": "2020-05-28T19:06:57Z", "message": "Fix style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2fec317a09efebf0d968753e9ea36b5edbd8062", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a2fec317a09efebf0d968753e9ea36b5edbd8062", "committedDate": "2020-05-29T06:20:37Z", "message": "Fix postgres.rst"}, "afterCommit": {"oid": "8700fd3699eff185f7416a200f8f7b5fe1f163e8", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8700fd3699eff185f7416a200f8f7b5fe1f163e8", "committedDate": "2020-06-01T07:29:12Z", "message": "Make TimeTZType a 12 byte structure, long for micros from midnight, int for secs from UTC (WIP)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4369f7804402926871f1d9b11f2c631570253dd4", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4369f7804402926871f1d9b11f2c631570253dd4", "committedDate": "2020-06-01T09:35:58Z", "message": "Fix Cast issue"}, "afterCommit": {"oid": "830673911fdaeae8e8686f9ea589c504f964b46e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/830673911fdaeae8e8686f9ea589c504f964b46e", "committedDate": "2020-06-02T16:37:48Z", "message": "Fixup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "950dd3c08b234bd0e5d1299eb658fa9aed060303", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/950dd3c08b234bd0e5d1299eb658fa9aed060303", "committedDate": "2020-06-02T16:41:01Z", "message": "Remove unused imports"}, "afterCommit": {"oid": "e6da852a73a8a9d14255471e2b013dcdee638410", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e6da852a73a8a9d14255471e2b013dcdee638410", "committedDate": "2020-06-03T08:35:47Z", "message": "Cosmetics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6da852a73a8a9d14255471e2b013dcdee638410", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e6da852a73a8a9d14255471e2b013dcdee638410", "committedDate": "2020-06-03T08:35:47Z", "message": "Cosmetics"}, "afterCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/684e366e25824529b81d578a35e94b841e08e1e3", "committedDate": "2020-06-03T09:23:03Z", "message": "Fix indentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzc0MzM4", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-423374338", "createdAt": "2020-06-03T09:24:17Z", "commit": {"oid": "e6da852a73a8a9d14255471e2b013dcdee638410"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyNjowMlrOGeTm1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozODozM1rOGeUE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTcwMA==", "bodyText": "does this time with time zone mapping exist?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434431700", "createdAt": "2020-06-03T09:26:02Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,6 +366,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n+        entry(DataTypes.TIMETZ.getName(), DataTypes.TIMETZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNzUzNA==", "bodyText": "Maybe TimeTZParser.formatTime, because of class TimeTZType extends DataType<TimeTZ>?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434437534", "createdAt": "2020-06-03T09:35:38Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZ.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import java.util.Objects;\n+\n+\n+public final class TimeTZ implements Comparable<TimeTZ> {\n+\n+    private final long microsFromMidnight;\n+    private final int secondsFromUTC;\n+\n+    public TimeTZ(long microsFromMidnight, int secondsFromUTC) {\n+        this.microsFromMidnight = microsFromMidnight;\n+        this.secondsFromUTC = secondsFromUTC;\n+    }\n+\n+    public long getMicrosFromMidnight() {\n+        return microsFromMidnight;\n+    }\n+\n+    public int getSecondsFromUTC() {\n+        return secondsFromUTC;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof TimeTZ) {\n+            return false;\n+        }\n+        TimeTZ that = (TimeTZ) o;\n+        return microsFromMidnight == that.microsFromMidnight && secondsFromUTC == that.secondsFromUTC;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(microsFromMidnight, secondsFromUTC);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TimeTZType.formatTime(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzOTQxMg==", "bodyText": "should it be timetz?\ntemplate1=# select typname from pg_catalog.pg_type where oid = 1266;\n typname\n---------\n timetz\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r434439412", "createdAt": "2020-06-03T09:38:33Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -191,12 +191,14 @@ table available in CrateDB::\n     | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n     | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n+    | 1266 | time with time zone          |     1270 |       0 |     12 | b       | D           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c8a4502c035d90b3faa7803e5154b3faa39ffca", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6c8a4502c035d90b3faa7803e5154b3faa39ffca", "committedDate": "2020-06-03T09:54:28Z", "message": "Fix test, TimeTZ is not a primitive type, nor are we testing casting it"}, "afterCommit": {"oid": "b6abf87a63a616deeaccfd37c8ed3252a7427923", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b6abf87a63a616deeaccfd37c8ed3252a7427923", "committedDate": "2020-06-03T12:28:49Z", "message": "Remove non existing mapping"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3feaef0b36f4cb1e3f9dd01a5274bbc7f15f1205", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3feaef0b36f4cb1e3f9dd01a5274bbc7f15f1205", "committedDate": "2020-06-03T12:43:11Z", "message": "Fix oid name"}, "afterCommit": {"oid": "8847d6d6c27e55f135fb9368a84c4085fb079019", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8847d6d6c27e55f135fb9368a84c4085fb079019", "committedDate": "2020-06-03T13:46:17Z", "message": "Fix oid name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01ad1a5ae65a007b87f31299513a860662e555a3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/01ad1a5ae65a007b87f31299513a860662e555a3", "committedDate": "2020-06-03T14:28:18Z", "message": "Missing alias"}, "afterCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/57a24eb2d64e801b5e2092f4a5af5e54ecc82143", "committedDate": "2020-06-03T15:05:14Z", "message": "Fix message, holly molly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjgzMDcz", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-423683073", "createdAt": "2020-06-03T15:41:03Z", "commit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0MTowNFrOGeh0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0NToxOFrOGeiANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NDUyMQ==", "bodyText": "Not sure if there is much value in re-exporting these functions here. Either TimeTZ could have a formatTime directly, or TimeTZParser.formatTime could be used directly.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434664521", "createdAt": "2020-06-03T15:41:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return parseTime((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    public static String formatTime(@Nonnull TimeTZ time) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NTExNg==", "bodyText": "Same here. Consumers could use TimeTZParser.parse directly, or maybe there could be a TimeTZ.parse and the TimeTZParser could become package private.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434665116", "createdAt": "2020-06-03T15:41:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return parseTime((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    public static String formatTime(@Nonnull TimeTZ time) {\n+        return TimeTZParser.formatTime(time);\n+    }\n+\n+    public static TimeTZ parseTime(@Nonnull String time) {\n+        return TimeTZParser.parse(time);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NTg1OA==", "bodyText": "I still don't really undestand why this change became necessary within this PR? That interval cannot be stored isn't new. Did randomType change in some unrelated way?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434665858", "createdAt": "2020-06-03T15:42:54Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -313,7 +314,10 @@ public void testWhereNotEqualAnyWithLargeArray() throws Exception {\n \n     @Test\n     public void testNullOperators() throws Exception {\n-        DataType<?> type = randomType();\n+        DataType<?> type;\n+        do {\n+           type = randomType();\n+        } while (type == DataTypes.INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NzU3Mw==", "bodyText": "These additions here shouldn't be necessary anymore, since TIMETZ is no longer part of the allowed conversions for BYTE.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434667573", "createdAt": "2020-06-03T15:45:18Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -97,6 +98,8 @@ public void numberConversionTest() throws Exception {\n                 var t = DataTypes.fromId(id);\n                 if (t.equals(DataTypes.IP)) {\n                     byteVal = (byte) Math.abs(byteVal == Byte.MIN_VALUE ? byteVal >> 1 : byteVal);\n+                } else if (t.equals(DataTypes.TIMETZ)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/57a24eb2d64e801b5e2092f4a5af5e54ecc82143", "committedDate": "2020-06-03T15:05:14Z", "message": "Fix message, holly molly"}, "afterCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b2ce6b01172c13642e76c620b62c792d6e828707", "committedDate": "2020-06-03T19:14:33Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTY2NTEz", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-423966513", "createdAt": "2020-06-03T21:57:39Z", "commit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NzozOVrOGevBXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NzozOVrOGevBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MDg2Mw==", "bodyText": "TIMETZ name does not contain spaces.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434880863", "createdAt": "2020-06-03T21:57:39Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -90,6 +92,7 @@\n     public static Set<String> PRIMITIVE_TYPE_NAMES_WITH_SPACES = Set.of(\n         TIMESTAMPZ.getName(),\n         TIMESTAMP.getName(),\n+        TIMETZ.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjM2MDU3", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-424236057", "createdAt": "2020-06-04T08:53:07Z", "commit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MzowN1rOGe8KJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MzowN1rOGe8KJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NjEwMg==", "bodyText": "btw, do we need to document it in the data types documentation https://github.com/crate/crate/blame/master/docs/general/ddl/data-types.rst#L210?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435096102", "createdAt": "2020-06-04T08:53:07Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -191,12 +191,14 @@ table available in CrateDB::\n     | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n     | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n+    | 1266 | timetz                       |     1270 |       0 |     12 | b       | D           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b2ce6b01172c13642e76c620b62c792d6e828707", "committedDate": "2020-06-03T19:14:33Z", "message": "Fix tests"}, "afterCommit": {"oid": "b73bf96560090896774dd93ab9dddb20da1a3b7b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b73bf96560090896774dd93ab9dddb20da1a3b7b", "committedDate": "2020-06-04T10:37:52Z", "message": "Simplify parser/formatter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDk4MTky", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-425098192", "createdAt": "2020-06-05T08:27:54Z", "commit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNzo1NVrOGflLqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMToxM1rOGflS3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2ODIzNQ==", "bodyText": "Could you move this into the relevant sub-section ?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435768235", "createdAt": "2020-06-05T08:27:55Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -71,6 +71,10 @@ Deprecations\n Changes\n =======\n \n+- Added new type :ref:`time with time zone <time-data-type>`, a.k.a `timetz`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2ODU1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ``timetz`` is a valid alias for `time with time zone`.\n          \n          \n            \n            ``timetz`` is an alias for `time with time zone`.\n          \n      \n    \n    \n  \n\nThere is no sense in an invalid alias, so pointing out that it is valid is not necessary", "url": "https://github.com/crate/crate/pull/9915#discussion_r435768559", "createdAt": "2020-06-05T08:28:30Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2OTA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Internally, time values are mapped to microseconds since midnight and seconds\n          \n          \n            \n            as a signed offset from UTC for the time zone, that is a `bigint` followed by\n          \n          \n            \n            an `integer`, or 12 bytes.\n          \n      \n    \n    \n  \n\nThe storage / range is already present in the table further above, we don't need to document further internals. (Would also restrict us in making changes in the future ..)", "url": "https://github.com/crate/crate/pull/9915#discussion_r435769075", "createdAt": "2020-06-05T08:29:28Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.\n+\n+Internally, time values are mapped to microseconds since midnight and seconds\n+as a signed offset from UTC for the time zone, that is a `bigint` followed by\n+an `integer`, or 12 bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2OTUyMA==", "bodyText": "Maybe add a sentence first that time with time zone values can be constructed using a string literal and a cast, before jumping to the syntax for it.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435769520", "createdAt": "2020-06-05T08:30:15Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.\n+\n+Internally, time values are mapped to microseconds since midnight and seconds\n+as a signed offset from UTC for the time zone, that is a `bigint` followed by\n+an `integer`, or 12 bytes.\n+\n+The syntax for time string literals is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MDA3Nw==", "bodyText": "We should probably point out that this type cannot be used in CREATE TABLE statements.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435770077", "createdAt": "2020-06-05T08:31:13Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDkzMTcz", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-425093173", "createdAt": "2020-06-05T08:20:35Z", "commit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMDozNVrOGfk8PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMzoxMVrOGflXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDI4NA==", "bodyText": "Shouldn't the type name be time with time zone, see https://www.postgresql.org/docs/9.1/datatype-datetime.html and timetz would be an alias?\n\ntimetz is a valid alias for time with time zone.\n\nYou have documented it as it supposedly has to be, but in implementation it is another way around.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435764284", "createdAt": "2020-06-05T08:20:35Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -346,6 +350,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"string\", STRING),\n         entry(\"varchar\", STRING),\n         entry(\"character varying\", STRING),\n+        entry(\"time with time zone\", TIMETZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NjMwNA==", "bodyText": "maybe add it to the table with aliases https://github.com/crate/crate/pull/9915/files#diff-2e33689810bcdd9ac3b65fd85893a637L1176", "url": "https://github.com/crate/crate/pull/9915#discussion_r435766304", "createdAt": "2020-06-05T08:24:19Z", "author": {"login": "kovrus"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTI3NQ==", "bodyText": "You catch only NumberFormatException which could be thrown by Long.valueOf, but timeTZOf-> checkRange could throw IllegalArgumentException that is not handled.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435771275", "createdAt": "2020-06-05T08:33:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return TimeTZParser.parse((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MTAyMzU2", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-425102356", "createdAt": "2020-06-05T08:33:31Z", "commit": {"oid": "2b3bebd0f04dee6dd40e008fc3208cd953d6cd63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMzozMVrOGflYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMzozMVrOGflYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTQ4Nw==", "bodyText": "I'm not sure if this is the best representation for HTTP.\n@seut Do you have any inputs here how we should represent time with time zone to users via HTTP?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435771487", "createdAt": "2020-06-05T08:33:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypeXContentExtension.java", "diffHunk": "@@ -63,6 +63,13 @@\n                     b.value(row.get(i));\n                 }\n                 b.endArray();\n+            }),\n+            Map.entry(TimeTZ.class, (b, v) -> {\n+                TimeTZ timetz = (TimeTZ) v;\n+                b.startArray();\n+                b.value(timetz.getMicrosFromMidnight());\n+                b.value(timetz.getSecondsFromUTC());\n+                b.endArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3bebd0f04dee6dd40e008fc3208cd953d6cd63"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/2bd296f89274f987f54d87f0a4d6f7049ccb2e24", "committedDate": "2020-06-04T15:44:19Z", "message": "Fix docu"}, "afterCommit": {"oid": "1fd3f603f226529804c48352df5a217b3c37621e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1fd3f603f226529804c48352df5a217b3c37621e", "committedDate": "2020-06-05T08:46:50Z", "message": "Mention that timetz cannot be used in create/alter statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "885765c8bd0f53b6906b1400f32ad3bfffeabd52", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/885765c8bd0f53b6906b1400f32ad3bfffeabd52", "committedDate": "2020-06-05T09:25:26Z", "message": "Make the type name be `time with time zone` and `timetz` an alias"}, "afterCommit": {"oid": "d65e18a7846053ee99a3e40191d0c6abac87d5cc", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d65e18a7846053ee99a3e40191d0c6abac87d5cc", "committedDate": "2020-06-07T18:05:16Z", "message": "Make the type name be `time with time zone` and `timetz` an alias"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d65e18a7846053ee99a3e40191d0c6abac87d5cc", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d65e18a7846053ee99a3e40191d0c6abac87d5cc", "committedDate": "2020-06-07T18:05:16Z", "message": "Make the type name be `time with time zone` and `timetz` an alias"}, "afterCommit": {"oid": "f2d8d7ee21d4bc05efe635cf1e26c70cc8b59b83", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f2d8d7ee21d4bc05efe635cf1e26c70cc8b59b83", "committedDate": "2020-06-08T14:29:50Z", "message": "Improve javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzQ5NTg2", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-426349586", "createdAt": "2020-06-08T15:19:56Z", "commit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxOTo1NlrOGgjh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxOTo1NlrOGgjh6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4OTczOA==", "bodyText": "Maybe we should start describing the format as well?", "url": "https://github.com/crate/crate/pull/9915#discussion_r436789738", "createdAt": "2020-06-08T15:19:56Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/http.rst", "diffHunk": "@@ -267,6 +267,8 @@ ID    Data Type\n ----- -------------------\n 15    Unchecked Object\n ----- -------------------\n+19    Time with time zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/864e4981b1ba96f7df8f27f1965d51456a4c093d", "committedDate": "2020-06-08T14:38:28Z", "message": "Add the type to http.rst"}, "afterCommit": {"oid": "e741d79ca700d214fe4e34812bddd47a604ffa9f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e741d79ca700d214fe4e34812bddd47a604ffa9f", "committedDate": "2020-06-09T19:38:27Z", "message": "Reformat table to 'list-table' and describe timetz lazily"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e741d79ca700d214fe4e34812bddd47a604ffa9f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e741d79ca700d214fe4e34812bddd47a604ffa9f", "committedDate": "2020-06-09T19:38:27Z", "message": "Reformat table to 'list-table' and describe timetz lazily"}, "afterCommit": {"oid": "048aabf85ea6a6c24a509cfc55527f293a526b62", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/048aabf85ea6a6c24a509cfc55527f293a526b62", "committedDate": "2020-06-10T18:29:11Z", "message": "Change timetz type's id to 20"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "048aabf85ea6a6c24a509cfc55527f293a526b62", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/048aabf85ea6a6c24a509cfc55527f293a526b62", "committedDate": "2020-06-10T18:29:11Z", "message": "Change timetz type's id to 20"}, "afterCommit": {"oid": "8f7c141b9d1870e238715397f3e155d4355c0ea9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8f7c141b9d1870e238715397f3e155d4355c0ea9", "committedDate": "2020-06-11T08:36:42Z", "message": "Change timetz type's id to 20"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzE4NjYw", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-428718660", "createdAt": "2020-06-11T08:54:28Z", "commit": {"oid": "8f7c141b9d1870e238715397f3e155d4355c0ea9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NDoyOFrOGiUdig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NToxOVrOGiUfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDAxMA==", "bodyText": "Maybe this part can be moved into the method that is responsible for the cast now https://github.com/crate/crate/blob/master/server/src/main/java/io/crate/types/DataType.java#L93 It is the correct place for the cast routine and would simplify future refactoring/removing/renaming of the DataType#value.\nand the DataType#value can be probably just or smth like that\npublic TimeTZ value(Object value) {\n        if (value == null) {\n            return null;\n        }\n        return (TimeTZ) value;\n}", "url": "https://github.com/crate/crate/pull/9915#discussion_r438640010", "createdAt": "2020-06-11T08:54:28Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 20;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"time with time zone\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7c141b9d1870e238715397f3e155d4355c0ea9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDU3Mw==", "bodyText": "is it needed?", "url": "https://github.com/crate/crate/pull/9915#discussion_r438640573", "createdAt": "2020-06-11T08:55:19Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -24,6 +24,7 @@\n import com.carrotsearch.randomizedtesting.annotations.Seed;\n import io.crate.testing.DataTypeTesting;\n import io.crate.types.DataType;\n+import io.crate.types.DataTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b66904d3c51d996939b741ea44a9cab836f5a6c"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b66904d3c51d996939b741ea44a9cab836f5a6c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0b66904d3c51d996939b741ea44a9cab836f5a6c", "committedDate": "2020-06-11T08:53:05Z", "message": "Fix documentation"}, "afterCommit": {"oid": "946b493745c0071ddf47ee07eeccce414a81cff1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/946b493745c0071ddf47ee07eeccce414a81cff1", "committedDate": "2020-06-11T09:59:32Z", "message": "Make use of implicitCast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTEyODEx", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-428912811", "createdAt": "2020-06-11T13:32:11Z", "commit": {"oid": "946b493745c0071ddf47ee07eeccce414a81cff1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMjoxMVrOGidLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMjoxMVrOGidLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4Mjg1MA==", "bodyText": "DataType#value must not call DataType#implicitCast and perform the casting.\nYou would probably also have to adjust tests accordingly.\nI'll copy-paste jordi's comment from the slack discussion regarding refactoring DataType and splitting\nDataType#value for a better context.\nBasically what I'm proposing is to split up value into multiple use cases because\nright now it is a bit overloaded:\n- cast, with a comment that this is only to be used via the cast function\n CastFunction, supports explicit/try/implicit\n- valueForInsert - for the new implicit whitespace truncation case\n- santizeType - for the cases where we currently use dataType#value to fix\na type read from source or so where an integer might have been stored as long\n(This is mostly in the reference resolvers / column expression implementations)\n\nFor the timetz it seems that it'd be enough to implement the implicitCast, which is done already and keep the DataType#value as it was suggested in the previous comment.", "url": "https://github.com/crate/crate/pull/9915#discussion_r438782850", "createdAt": "2020-06-11T13:32:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 20;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"time with time zone\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ implicitCast(Object value) {\n+        if (value instanceof String) {\n+            try {\n+                return TimeTZParser.parse((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return value instanceof TimeTZ ? (TimeTZ) value : implicitCast(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946b493745c0071ddf47ee07eeccce414a81cff1"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDYyOTY0", "url": "https://github.com/crate/crate/pull/9915#pullrequestreview-430462964", "createdAt": "2020-06-15T09:16:11Z", "commit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNjoxMVrOGjp4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoxOVrOGjp9rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                This type cannot be created in `CREATE TABLE` or `ALTER` statements, as\n          \n          \n            \n                This type cannot be used in `CREATE TABLE` or `ALTER` statements, as\n          \n      \n    \n    \n  \n\ntypes themselves are not created via CREATE TABLE or ALTER TABLE.", "url": "https://github.com/crate/crate/pull/9915#discussion_r440039555", "createdAt": "2020-06-15T09:16:11Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -437,6 +443,69 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is an alias for `time with time zone`.\n+\n+`time with time zone` literals can be constructed using a string literal\n+and a cast. The syntax for string literal is as follows:\n+\n+.. code-block:: text\n+\n+    time-element [offset]\n+\n+    time-element: time-only [fraction]\n+    time-only:    HH[[:][mm[:]ss]]\n+    fraction:     '.' digit+\n+    offset:       {+ | -} time-only | geo-region\n+    geo-region:   As defined by ISO 8601.\n+\n+\n+Where `time-only` can contain optional seconds, or optional minutes and seconds,\n+and can use `:` as a separator optionally.\n+\n+`fraction` accepts up to 6 digits, as precision is in micro seconds.\n+\n+Time zone syntax as defined by `ISO 8601 time zone designators`_.\n+\n+.. NOTE::\n+\n+    This type cannot be created in `CREATE TABLE` or `ALTER` statements, as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDg3Ng==", "bodyText": "Not sure about the wording here. Maybe the second sentence could be omitted altogether.", "url": "https://github.com/crate/crate/pull/9915#discussion_r440040876", "createdAt": "2020-06-15T09:18:19Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -437,6 +443,69 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is an alias for `time with time zone`.\n+\n+`time with time zone` literals can be constructed using a string literal\n+and a cast. The syntax for string literal is as follows:\n+\n+.. code-block:: text\n+\n+    time-element [offset]\n+\n+    time-element: time-only [fraction]\n+    time-only:    HH[[:][mm[:]ss]]\n+    fraction:     '.' digit+\n+    offset:       {+ | -} time-only | geo-region\n+    geo-region:   As defined by ISO 8601.\n+\n+\n+Where `time-only` can contain optional seconds, or optional minutes and seconds,\n+and can use `:` as a separator optionally.\n+\n+`fraction` accepts up to 6 digits, as precision is in micro seconds.\n+\n+Time zone syntax as defined by `ISO 8601 time zone designators`_.\n+\n+.. NOTE::\n+\n+    This type cannot be created in `CREATE TABLE` or `ALTER` statements, as\n+    it is meant to be used as parameter and return type for time related", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/14c3bf338b22e0a67269d5287f56d4877706805f", "committedDate": "2020-06-11T16:35:39Z", "message": "Fix TimeTZType.value and tests"}, "afterCommit": {"oid": "923e57475fb62e221621a623ceeb7510c8dd182e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/923e57475fb62e221621a623ceeb7510c8dd182e", "committedDate": "2020-06-15T10:16:47Z", "message": "Correct documentation, note regarding use of type in create/alter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "489cb41f036c8c8bda06f1f033c89be90817322c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/489cb41f036c8c8bda06f1f033c89be90817322c", "committedDate": "2020-06-15T11:01:22Z", "message": "Fixup!!!"}, "afterCommit": {"oid": "16174e93b7807b92025e09b4c1fec121fe121352", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/16174e93b7807b92025e09b4c1fec121fe121352", "committedDate": "2020-06-15T11:08:04Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16174e93b7807b92025e09b4c1fec121fe121352", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/16174e93b7807b92025e09b4c1fec121fe121352", "committedDate": "2020-06-15T11:08:04Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}, "afterCommit": {"oid": "6b165196499a5657448094dedd485d53bc820673", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6b165196499a5657448094dedd485d53bc820673", "committedDate": "2020-06-16T08:29:18Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe8a7371a0fb45d0f2e350cbccc391bec898e32", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/cbe8a7371a0fb45d0f2e350cbccc391bec898e32", "committedDate": "2020-06-16T09:23:15Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b165196499a5657448094dedd485d53bc820673", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6b165196499a5657448094dedd485d53bc820673", "committedDate": "2020-06-16T08:29:18Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}, "afterCommit": {"oid": "cbe8a7371a0fb45d0f2e350cbccc391bec898e32", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/cbe8a7371a0fb45d0f2e350cbccc391bec898e32", "committedDate": "2020-06-16T09:23:15Z", "message": "Add type \"time with time zone\", alias timetz\n\nThis type is used as return value for time related functions, such as\n\"current_time\".\nLiterals can be constructed using a string literal and a cast. Syntax\nfor the string literal:\n\ntime-element [offset]\n\n    time-element: time-only [fraction]\n    time-only:    HH[[:][mm[:]ss]]\n    fraction:     '.' digit+\n    offset:       {+ | -} time-only | geo-region\n    geo-region:   As defined by ISO 8601.\n\nfraction accepts up to 6 digits, delivering microsecond precision.\nThe type cannot be used in CREATE/ALTER statements."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3328, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}