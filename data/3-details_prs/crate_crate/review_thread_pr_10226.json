{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTYyMTY1", "number": 10226, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NTozNVrOEQ832A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1NTowNlrOERDpmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjEwMDA4OnYy", "diffSide": "RIGHT", "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NTozNVrOG1Y2gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0NTo1MFrOG1jIzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDg4Mg==", "bodyText": "Why not call type.implicitCast directly? Maybe I'm missing something here \ud83e\udd14", "url": "https://github.com/crate/crate/pull/10226#discussion_r458634882", "createdAt": "2020-07-22T08:45:35Z", "author": {"login": "mfussenegger"}, "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "diffHunk": "@@ -40,27 +41,28 @@ static Object toCrateObject(Value value, DataType<?> type) {\n         if (value == null) {\n             return null;\n         }\n+        Function<Object, ?> convert = type::implicitCast;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMzQwNQ==", "bodyText": "removed. it is just unnecessary indirection.", "url": "https://github.com/crate/crate/pull/10226#discussion_r458803405", "createdAt": "2020-07-22T13:45:50Z", "author": {"login": "kovrus"}, "path": "enterprise/lang-js/src/main/java/io/crate/operation/language/PolyglotValuesConverter.java", "diffHunk": "@@ -40,27 +41,28 @@ static Object toCrateObject(Value value, DataType<?> type) {\n         if (value == null) {\n             return null;\n         }\n+        Function<Object, ?> convert = type::implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDg4Mg=="}, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQwMTQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowNTo1M1rOG1bwHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0NTowNlrOG1jG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjM5Ng==", "bodyText": "Not sure if this is safe or whether we need the implicit cast here. Does this work for cases where a primary key column is a bigint or something like that?", "url": "https://github.com/crate/crate/pull/10226#discussion_r458682396", "createdAt": "2020-07-22T10:05:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -63,31 +63,31 @@ public String getId(TransactionContext txnCtx, Functions functions, Row params,\n             return idFunction.apply(\n                 LazyMapList.of(\n                     key.subList(0, width),\n-                    s -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n+                    s -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMjkxMQ==", "bodyText": "it was working before coz of b27d1dc#diff-d9273c5d03d846ae406a74ae5af32ad5L196 i dropped the .toString now.", "url": "https://github.com/crate/crate/pull/10226#discussion_r458802911", "createdAt": "2020-07-22T13:45:06Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -63,31 +63,31 @@ public String getId(TransactionContext txnCtx, Functions functions, Row params,\n             return idFunction.apply(\n                 LazyMapList.of(\n                     key.subList(0, width),\n-                    s -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))\n+                    s -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, s, params, subQueryResults))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjM5Ng=="}, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQwMzU5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowNjoyOFrOG1bxaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowNjoyOFrOG1bxaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MjcyOQ==", "bodyText": "Similar here. Partition by columns could have a different type, I'm not sure if sanitizeValue is enough here", "url": "https://github.com/crate/crate/pull/10226#discussion_r458682729", "createdAt": "2020-07-22T10:06:28Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -102,7 +102,7 @@ public String getId(TransactionContext txnCtx, Functions functions, Row params,\n             }\n             return Lists2.map(\n                 partitionIdx,\n-                pIdx -> DataTypes.STRING.value(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));\n+                pIdx -> DataTypes.STRING.sanitizeValue(SymbolEvaluator.evaluate(txnCtx, functions, key.get(pIdx), params, subQueryResults)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQzMzk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxNTozMVrOG1cEBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxNTozMVrOG1cEBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NzQ5Mw==", "bodyText": "I think we should add some docs to clarify the difference between implicitCast and sanitizeValue", "url": "https://github.com/crate/crate/pull/10226#discussion_r458687493", "createdAt": "2020-07-22T10:15:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -117,7 +124,7 @@ public T valueForInsert(Object value) {\n         return (T) value;\n     }\n \n-    public abstract T value(Object value) throws IllegalArgumentException, ClassCastException;\n+    public abstract T sanitizeValue(Object value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQzODUyOnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/crate/types/FloatType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxNjo1NFrOG1cG0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxNjo1NFrOG1cG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4ODIxMQ==", "bodyText": "Might still be worth to keep this early as a \"common case\" - assuming the input is likey to already be a Float (not sure if that is still really the case often)", "url": "https://github.com/crate/crate/pull/10226#discussion_r458688211", "createdAt": "2020-07-22T10:16:54Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/FloatType.java", "diffHunk": "@@ -58,21 +58,32 @@ public String getName() {\n     }\n \n     @Override\n-    public Float value(Object value) {\n+    public Float implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n         if (value == null) {\n             return null;\n-        }\n-        if (value instanceof Float) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQ0NDc3OnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/crate/types/TimestampType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxODo1NlrOG1cKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDoxODo1NlrOG1cKwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4OTIxNw==", "bodyText": "Could we keep the indentation? The additional structure reflects the start / end markers", "url": "https://github.com/crate/crate/pull/10226#discussion_r458689217", "createdAt": "2020-07-22T10:18:56Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimestampType.java", "diffHunk": "@@ -187,12 +195,12 @@ static long parseTimestampIgnoreTimeZone(String timestamp) {\n         .parseCaseInsensitive()\n         .append(ISO_LOCAL_DATE)\n         .optionalStart()\n-            .padNext(1)\n-                .optionalStart()\n-                    .appendLiteral('T')\n-                .optionalEnd()\n-            .append(ISO_LOCAL_TIME)\n-            .optionalStart()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b832ae0347869f1115c2c7841a86809743b356a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzIxMDQ4OnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1NTowNlrOG1jkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1NTowNlrOG1jkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMDUyMA==", "bodyText": "implicitCast here because the undefined type is also represented as varchar", "url": "https://github.com/crate/crate/pull/10226#discussion_r458810520", "createdAt": "2020-07-22T13:55:06Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/VarCharType.java", "diffHunk": "@@ -66,7 +66,7 @@ public String typeCategory() {\n \n     @Override\n     public int writeAsBinary(ByteBuf buffer, @Nonnull Object value) {\n-        byte[] bytes = DataTypes.STRING.sanitizeValue(value).getBytes(StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55942945ac9df0087bc38b45f2936966ba8b650c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1338, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}