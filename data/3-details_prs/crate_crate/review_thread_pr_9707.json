{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzc2NTYw", "number": 9707, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozOTo1OVrODjW9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozOTo1OVrODjW9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDAyODc4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzozOTo1OVrOFvH1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODowMTowOFrOFvIU0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTcwMQ==", "bodyText": "minor: we could store this into a local var to avoid checking for NULL twice", "url": "https://github.com/crate/crate/pull/9707#discussion_r384955701", "createdAt": "2020-02-27T07:39:59Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -333,14 +332,13 @@ protected AnalyzedRelation visitQuerySpecification(QuerySpecification node, Stat\n \n         boolean isDistinct = node.getSelect().isDistinct();\n         Symbol querySymbol = expressionAnalyzer.generateQuerySymbol(node.getWhere(), expressionAnalysisContext);\n-        WhereClause whereClause = new WhereClause(querySymbol);\n-        WhereClauseValidator.validate(whereClause.queryOrFallback());\n+        WhereClauseValidator.validate(querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol);\n         QueriedSelectRelation relation = new QueriedSelectRelation(\n             isDistinct,\n             List.copyOf(context.sources().values()),\n             context.joinPairs(),\n             selectAnalysis.outputSymbols(),\n-            whereClause,\n+            querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79bb29358d446b7051b95625735845f309f57912"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MTU2MQ==", "bodyText": "@seut pushed a fixup to make generateQuerySymbol not return null in the first place.", "url": "https://github.com/crate/crate/pull/9707#discussion_r384961561", "createdAt": "2020-02-27T07:55:38Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -333,14 +332,13 @@ protected AnalyzedRelation visitQuerySpecification(QuerySpecification node, Stat\n \n         boolean isDistinct = node.getSelect().isDistinct();\n         Symbol querySymbol = expressionAnalyzer.generateQuerySymbol(node.getWhere(), expressionAnalysisContext);\n-        WhereClause whereClause = new WhereClause(querySymbol);\n-        WhereClauseValidator.validate(whereClause.queryOrFallback());\n+        WhereClauseValidator.validate(querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol);\n         QueriedSelectRelation relation = new QueriedSelectRelation(\n             isDistinct,\n             List.copyOf(context.sources().values()),\n             context.joinPairs(),\n             selectAnalysis.outputSymbols(),\n-            whereClause,\n+            querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTcwMQ=="}, "originalCommit": {"oid": "79bb29358d446b7051b95625735845f309f57912"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2Mzc5Mg==", "bodyText": "\ud83d\udc4d even better!", "url": "https://github.com/crate/crate/pull/9707#discussion_r384963792", "createdAt": "2020-02-27T08:01:08Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -333,14 +332,13 @@ protected AnalyzedRelation visitQuerySpecification(QuerySpecification node, Stat\n \n         boolean isDistinct = node.getSelect().isDistinct();\n         Symbol querySymbol = expressionAnalyzer.generateQuerySymbol(node.getWhere(), expressionAnalysisContext);\n-        WhereClause whereClause = new WhereClause(querySymbol);\n-        WhereClauseValidator.validate(whereClause.queryOrFallback());\n+        WhereClauseValidator.validate(querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol);\n         QueriedSelectRelation relation = new QueriedSelectRelation(\n             isDistinct,\n             List.copyOf(context.sources().values()),\n             context.joinPairs(),\n             selectAnalysis.outputSymbols(),\n-            whereClause,\n+            querySymbol == null ? Literal.BOOLEAN_TRUE : querySymbol,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NTcwMQ=="}, "originalCommit": {"oid": "79bb29358d446b7051b95625735845f309f57912"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1095, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}