{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjE3MDY1", "number": 9941, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoxMzo0MlrOD8CWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoxMzo0MlrOD8CWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjc5NTYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/reference/doc/lucene/BooleanColumnReference.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoxMzo0MlrOGUumzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMjozM1rOGUw3cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODMwMQ==", "bodyText": "Looks like we could remove the exception annotation from the parent class?", "url": "https://github.com/crate/crate/pull/9941#discussion_r424388301", "createdAt": "2020-05-13T12:13:42Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/reference/doc/lucene/BooleanColumnReference.java", "diffHunk": "@@ -29,38 +29,41 @@\n import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n \n import java.io.IOException;\n+import java.io.UncheckedIOException;\n \n public class BooleanColumnReference extends LuceneCollectorExpression<Boolean> {\n \n     private static final BytesRef TRUE_BYTESREF = new BytesRef(\"1\");\n     private final String columnName;\n     private SortedBinaryDocValues values;\n-    private Boolean value;\n+    private int docId;\n \n     public BooleanColumnReference(String columnName) {\n         this.columnName = columnName;\n     }\n \n     @Override\n     public Boolean value() {\n-        return value;\n+        try {\n+            if (values.advanceExact(docId)) {\n+                switch (values.docValueCount()) {\n+                    case 1:\n+                        return values.nextValue().compareTo(TRUE_BYTESREF) == 0;\n+\n+                    default:\n+                        throw new GroupByOnArrayUnsupportedException(columnName);\n+                }\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n     }\n \n     @Override\n     public void setNextDocId(int docId) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe64bbb6162b7c795a312211b8717e4d13591819"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTMzMA==", "bodyText": "yep you're right. I actually had also missed the short column reference. Pushed a fixup", "url": "https://github.com/crate/crate/pull/9941#discussion_r424425330", "createdAt": "2020-05-13T13:12:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/reference/doc/lucene/BooleanColumnReference.java", "diffHunk": "@@ -29,38 +29,41 @@\n import org.elasticsearch.index.fielddata.SortedBinaryDocValues;\n \n import java.io.IOException;\n+import java.io.UncheckedIOException;\n \n public class BooleanColumnReference extends LuceneCollectorExpression<Boolean> {\n \n     private static final BytesRef TRUE_BYTESREF = new BytesRef(\"1\");\n     private final String columnName;\n     private SortedBinaryDocValues values;\n-    private Boolean value;\n+    private int docId;\n \n     public BooleanColumnReference(String columnName) {\n         this.columnName = columnName;\n     }\n \n     @Override\n     public Boolean value() {\n-        return value;\n+        try {\n+            if (values.advanceExact(docId)) {\n+                switch (values.docValueCount()) {\n+                    case 1:\n+                        return values.nextValue().compareTo(TRUE_BYTESREF) == 0;\n+\n+                    default:\n+                        throw new GroupByOnArrayUnsupportedException(columnName);\n+                }\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n     }\n \n     @Override\n     public void setNextDocId(int docId) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODMwMQ=="}, "originalCommit": {"oid": "fe64bbb6162b7c795a312211b8717e4d13591819"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1480, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}