{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjMyMDY2", "number": 10560, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNTo0M1rOEoHAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1MDo1NVrOEoeN6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDkzMzgyOnYy", "diffSide": "LEFT", "path": "server/src/test/java/io/crate/execution/engine/collect/CollectTaskTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNTo0M1rOHZAsBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozNTo0M1rOHZAsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzcxNg==", "bodyText": "Replaced this with multiple test_kill_after_start variants - see further below", "url": "https://github.com/crate/crate/pull/10560#discussion_r495987716", "createdAt": "2020-09-28T14:35:43Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/collect/CollectTaskTest.java", "diffHunk": "@@ -94,58 +115,10 @@ public void testAddingSameContextTwice() throws Exception {\n             assertFalse(true); // second addContext call should have raised an exception\n         } catch (IllegalArgumentException e) {\n             verify(mock1, times(1)).close();\n-            verify(mock2, times(1)).close();\n+            verify(mock2, times(0)).close(); // would be closed via `kill` on the context\n         }\n     }\n \n-    @Test\n-    public void testInnerCloseClosesSearchContexts() throws Exception {\n-        RefCountedItem mock1 = mock(RefCountedItem.class);\n-        RefCountedItem mock2 = mock(RefCountedItem.class);\n-\n-        collectTask.addSearcher(1, mock1);\n-        collectTask.addSearcher(2, mock2);\n-\n-        collectTask.innerClose();\n-\n-        verify(mock1, times(1)).close();\n-        verify(mock2, times(1)).close();\n-    }\n-\n-    @Test\n-    public void testKillOnJobCollectContextPropagatesToCrateCollectors() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd95d6925152f214fba9d086ddb65332e8f4f4ae"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODcwOTcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo0NDoyMFrOHZlFKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoxNzowOFrOHZmSfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng==", "bodyText": "shouldn't this be volatile as it may be read and written from different threads?", "url": "https://github.com/crate/crate/pull/10560#discussion_r496583976", "createdAt": "2020-09-29T09:44:20Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -60,16 +64,20 @@\n     private final SharedShardContexts sharedShardContexts;\n \n     private final IntObjectHashMap<RefCountedItem<? extends IndexSearcher>> searchers = new IntObjectHashMap<>();\n-    private final Object subContextLock = new Object();\n     private final RowConsumer consumer;\n     private final int ramAccountingBlockSizeInBytes;\n+\n+    @GuardedBy(\"searchers\")\n     private final ArrayList<MemoryManager> memoryManagers = new ArrayList<>();\n     private final Version minNodeVersion;\n+    private final CompletableFuture<Void> consumerCompleted;\n+    private final CompletableFuture<BatchIterator<Row>> batchIterator = new CompletableFuture<>();\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n \n-    private BatchIterator<Row> batchIterator = null;\n+    private boolean releasedResources = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU5NTQ4Mg==", "bodyText": "It's always within a synchronized block and synchronized causes memory visibility, so the volatile is not necessary. Should I add a @GuardedBy annotation?", "url": "https://github.com/crate/crate/pull/10560#discussion_r496595482", "createdAt": "2020-09-29T10:02:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -60,16 +64,20 @@\n     private final SharedShardContexts sharedShardContexts;\n \n     private final IntObjectHashMap<RefCountedItem<? extends IndexSearcher>> searchers = new IntObjectHashMap<>();\n-    private final Object subContextLock = new Object();\n     private final RowConsumer consumer;\n     private final int ramAccountingBlockSizeInBytes;\n+\n+    @GuardedBy(\"searchers\")\n     private final ArrayList<MemoryManager> memoryManagers = new ArrayList<>();\n     private final Version minNodeVersion;\n+    private final CompletableFuture<Void> consumerCompleted;\n+    private final CompletableFuture<BatchIterator<Row>> batchIterator = new CompletableFuture<>();\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n \n-    private BatchIterator<Row> batchIterator = null;\n+    private boolean releasedResources = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng=="}, "originalCommit": {"oid": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwMzc3Mg==", "bodyText": "Added the annotation", "url": "https://github.com/crate/crate/pull/10560#discussion_r496603772", "createdAt": "2020-09-29T10:17:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -60,16 +64,20 @@\n     private final SharedShardContexts sharedShardContexts;\n \n     private final IntObjectHashMap<RefCountedItem<? extends IndexSearcher>> searchers = new IntObjectHashMap<>();\n-    private final Object subContextLock = new Object();\n     private final RowConsumer consumer;\n     private final int ramAccountingBlockSizeInBytes;\n+\n+    @GuardedBy(\"searchers\")\n     private final ArrayList<MemoryManager> memoryManagers = new ArrayList<>();\n     private final Version minNodeVersion;\n+    private final CompletableFuture<Void> consumerCompleted;\n+    private final CompletableFuture<BatchIterator<Row>> batchIterator = new CompletableFuture<>();\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n \n-    private BatchIterator<Row> batchIterator = null;\n+    private boolean releasedResources = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4Mzk3Ng=="}, "originalCommit": {"oid": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODczNTc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1MDo1NVrOHZlVpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTo1MDo1NVrOHZlVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4ODE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // the atomicBoolean call is not enough, because without syncronization\n          \n          \n            \n                    // an atomicBoolean call would not be enough, because without syncronization", "url": "https://github.com/crate/crate/pull/10560#discussion_r496588197", "createdAt": "2020-09-29T09:50:55Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/collect/CollectTask.java", "diffHunk": "@@ -212,10 +261,24 @@ static String threadPoolName(CollectPhase phase, boolean involvedIO) {\n \n     public MemoryManager memoryManager() {\n         MemoryManager memoryManager = memoryManagerFactory.apply(ramAccounting);\n-        synchronized (memoryManagers) {\n-            memoryManagers.add(memoryManager);\n+        // the atomicBoolean call is not enough, because without syncronization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d53eb8fb7bb37ece300f10a5467d744fa3dd28e"}, "originalPosition": 269}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1018, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}