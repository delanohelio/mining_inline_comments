{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjA0MzIx", "number": 9831, "title": "CONSTRAINT CHECK feature (create table, alter table add column check, alter table drop constraint)", "bodyText": "Scenario: move logic into the database to avoid having to de-duplicate business constraints among all consumers, e.g. prevent users from inserting x > 15 into a table.\nThis PR tracks a feature branch.\nRefer: https://trello.com/c/lIAaJ26v/85-5-check-constraint-for-create-table", "createdAt": "2020-03-31T09:41:35Z", "url": "https://github.com/crate/crate/pull/9831", "merged": true, "mergeCommit": {"oid": "0099bde632c45cd8023f970dae3508a3bbb8f65a"}, "closed": true, "closedAt": "2020-04-20T21:14:20Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTYrnIABqjMxODgyMTQ3NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZlebrgBqjMyNTM1NDA4NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ba79d7684a5466e009082ff7fe26490695ce3bc7", "committedDate": "2020-03-31T09:25:27Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "fab1e8e96db68c2b224b5a2c1a3e4d76b21ea476", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fab1e8e96db68c2b224b5a2c1a3e4d76b21ea476", "committedDate": "2020-04-01T14:35:47Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fab1e8e96db68c2b224b5a2c1a3e4d76b21ea476", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fab1e8e96db68c2b224b5a2c1a3e4d76b21ea476", "committedDate": "2020-04-01T14:35:47Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "c491de2fe8fdc554c49a5acf0a91ebd1edc29dfa", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c491de2fe8fdc554c49a5acf0a91ebd1edc29dfa", "committedDate": "2020-04-01T16:14:07Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c491de2fe8fdc554c49a5acf0a91ebd1edc29dfa", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c491de2fe8fdc554c49a5acf0a91ebd1edc29dfa", "committedDate": "2020-04-01T16:14:07Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "9c9c0760603fd42924b5a5bba46b92bd30959831", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9c9c0760603fd42924b5a5bba46b92bd30959831", "committedDate": "2020-04-02T09:59:22Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c9c0760603fd42924b5a5bba46b92bd30959831", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9c9c0760603fd42924b5a5bba46b92bd30959831", "committedDate": "2020-04-02T09:59:22Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "e8565ae7ea4617f4a1e34394cb5b29bcfa1721dd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e8565ae7ea4617f4a1e34394cb5b29bcfa1721dd", "committedDate": "2020-04-02T13:59:38Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e4b2675cee22b808b5edf923d6460bd15e1c6ca", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3e4b2675cee22b808b5edf923d6460bd15e1c6ca", "committedDate": "2020-04-02T14:01:09Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}, "afterCommit": {"oid": "1dd3a562d49cc880c3b0549a4f42f0989d79a8c3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1dd3a562d49cc880c3b0549a4f42f0989d79a8c3", "committedDate": "2020-04-03T11:41:25Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dd3a562d49cc880c3b0549a4f42f0989d79a8c3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1dd3a562d49cc880c3b0549a4f42f0989d79a8c3", "committedDate": "2020-04-03T11:41:25Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}, "afterCommit": {"oid": "e0eea3f7e9584be56c864542e9718d98d0a0aa56", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e0eea3f7e9584be56c864542e9718d98d0a0aa56", "committedDate": "2020-04-03T13:28:48Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0eea3f7e9584be56c864542e9718d98d0a0aa56", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e0eea3f7e9584be56c864542e9718d98d0a0aa56", "committedDate": "2020-04-03T13:28:48Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}, "afterCommit": {"oid": "85d856f65e23bae9235e9b90cd6e7d4d6dc4ebc1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/85d856f65e23bae9235e9b90cd6e7d4d6dc4ebc1", "committedDate": "2020-04-03T14:38:23Z", "message": "Add syntax ALTER TABLE t DROP CHECK CONSTRAINT name\n\nWhich will remove the constraint from the table if it exists."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzM1OTQy", "url": "https://github.com/crate/crate/pull/9831#pullrequestreview-387335942", "createdAt": "2020-04-03T15:00:21Z", "commit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDoyMVrOGAZUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDozOVrOGAZU9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2Nzk1Ng==", "bodyText": "I would not do this / thing, I don't think it adds clarity. A general plural (\"values\", \"columns\") is fine.", "url": "https://github.com/crate/crate/pull/9831#discussion_r403067956", "createdAt": "2020-04-03T15:00:21Z", "author": {"login": "matthijskrul"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,14 +69,18 @@ None\n Changes\n =======\n \n+- Add the :ref:`CHECK <check_constraint>` constraint syntax, which specifies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2ODE1MQ==", "bodyText": "As above", "url": "https://github.com/crate/crate/pull/9831#discussion_r403068151", "createdAt": "2020-04-03T15:00:39Z", "author": {"login": "matthijskrul"}, "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,96 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a8e5ac8e452e9b7c8b2a2b48d37589887fed205", "author": {"user": {"login": "matthijskrul", "name": "Matthijs Krul"}}, "url": "https://github.com/crate/crate/commit/0a8e5ac8e452e9b7c8b2a2b48d37589887fed205", "committedDate": "2020-04-03T15:05:54Z", "message": "Update constraints.rst\n\nStyle fixes"}, "afterCommit": {"oid": "8efa15d0d21b5f2917ca0f6124ab1e099e2a027c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8efa15d0d21b5f2917ca0f6124ab1e099e2a027c", "committedDate": "2020-04-06T08:32:40Z", "message": "Add unreleased notes and documentation on the constraints section"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8efa15d0d21b5f2917ca0f6124ab1e099e2a027c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8efa15d0d21b5f2917ca0f6124ab1e099e2a027c", "committedDate": "2020-04-06T08:32:40Z", "message": "Add unreleased notes and documentation on the constraints section"}, "afterCommit": {"oid": "eefcb809c5e1ebbcb8434ae2dbe9cb3839750a0c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/eefcb809c5e1ebbcb8434ae2dbe9cb3839750a0c", "committedDate": "2020-04-06T08:39:22Z", "message": "Add unreleased notes and documentation on the constraints section"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbf845e2599f0ef93297a8877bd53af45efdca14", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fbf845e2599f0ef93297a8877bd53af45efdca14", "committedDate": "2020-04-06T09:23:15Z", "message": "Fix reference"}, "afterCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/71f91a67f0c2ee89f299ddc46d9868b90f11e2f7", "committedDate": "2020-04-06T11:21:48Z", "message": "Fix reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4OTA0ODM5", "url": "https://github.com/crate/crate/pull/9831#pullrequestreview-388904839", "createdAt": "2020-04-07T08:40:24Z", "commit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0MDoyNFrOGB5Gxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNjoyNlrOGB6gNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNzM4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A check constraint allows you to specify that the values in a  certain column\n          \n          \n            \n            A check constraint allows you to specify that the values in a certain column", "url": "https://github.com/crate/crate/pull/9831#discussion_r404637383", "createdAt": "2020-04-07T08:40:24Z", "author": {"login": "seut"}, "path": "docs/general/ddl/constraints.rst", "diffHunk": "@@ -65,9 +65,37 @@ Example::\n     ... );\n     CREATE OK, 1 row affected (... sec)\n \n+.. NOTE::\n+\n+   For further details see :ref:`not_null_constraint`.\n+\n+Check\n+=====\n+\n+A check constraint allows you to specify that the values in a  certain column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTg1NQ==", "bodyText": "Maybe worth adding a note or warning that it cannot be re-added to an existing table once dropped.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404639855", "createdAt": "2020-04-07T08:44:23Z", "author": {"login": "seut"}, "path": "docs/sql/statements/drop-constraint.rst", "diffHunk": "@@ -0,0 +1,33 @@\n+.. _drop-constraint:\n+\n+===================\n+``DROP CONSTRAINT``\n+===================\n+\n+Remove a :ref:`check_constraint` constraint from a table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTg2Ng==", "bodyText": "Could we use a simple string concat here instead? this avoids unnecessary goggle common dependencies.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404641866", "createdAt": "2020-04-07T08:47:29Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        consumer.accept(expression);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MjA4OQ==", "bodyText": "same here, pls use string concat instead.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404642089", "createdAt": "2020-04-07T08:47:51Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    @Nullable\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, @Nullable String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name) &&\n+               Objects.equal(columnName, that.columnName);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        consumer.accept(expression);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MjU3NA==", "bodyText": "and here ;) string concatenation would we preferable.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404642574", "createdAt": "2020-04-07T08:48:35Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/DropCheckConstraint.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+public class DropCheckConstraint<T> extends Statement {\n+\n+    private final Table<T> table;\n+    private final String name;\n+\n+    public DropCheckConstraint(Table<T> table, String name) {\n+        this.table = table;\n+        this.name = name;\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Table<T> table() {\n+        return table;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitDropCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(table, name);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (false == obj instanceof DropCheckConstraint) {\n+            return false;\n+        }\n+        DropCheckConstraint<T> that = (DropCheckConstraint<T>) obj;\n+        return name.equals(that.name) && table.equals(that.table);\n+\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODczOA==", "bodyText": "when using a normal for loop above, this additional loop could be avoided.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404648738", "createdAt": "2020-04-07T08:58:00Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -85,6 +91,15 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n                 return symbol;\n             }));\n         }\n+        List<TableElement<Symbol>> analyzedCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> x instanceof CheckConstraint)\n+            .map(x -> (CheckConstraint<Expression>) x)\n+            .map(x -> x.map(y -> exprAnalyzerWithReferences.convert(y, exprCtx)))\n+            .collect(Collectors.toList());\n+        tableElementsWithExpressions.addAll(analyzedCheckConstraints);\n+        analyzedCreateTable.tableElements().addAll(analyzedCheckConstraints);\n+        analyzedCheckConstraints.forEach(c -> analyzedTableElements.addCheckConstraint(relationName, (CheckConstraint<Symbol>) c));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MTM4OA==", "bodyText": "why is this needed? if needed, could this maybe solved without mutating?", "url": "https://github.com/crate/crate/pull/9831#discussion_r404651388", "createdAt": "2020-04-07T09:01:57Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -94,4 +109,39 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n             analyzedTableElementsWithExpressions\n         );\n     }\n+\n+    private static List<TableElement<Symbol>> analyzeButCheckConstraints(CreateTable<Expression> createTable,\n+                                                                         ExpressionAnalyzer exprAnalyzerWithFieldsAsString,\n+                                                                         ExpressionAnalysisContext exprCtx) {\n+        List<TableElement<Expression>> notCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> false == x instanceof CheckConstraint)\n+            .collect(Collectors.toList());\n+        List<TableElement<Symbol>> analyzed = new ArrayList<>(notCheckConstraints.size());\n+        Set<CheckColumnConstraint<Expression>> checkColumnConstraints = new HashSet<>(notCheckConstraints.size());\n+        for (int i = 0; i < notCheckConstraints.size(); i++) {\n+            TableElement<Expression> te = notCheckConstraints.get(i);\n+            if (te instanceof ColumnDefinition) {\n+                ColumnDefinition<Expression> def = (ColumnDefinition<Expression>) te;\n+                List<ColumnConstraint<Expression>> constraints = def.constraints();\n+                for (int j = 0; j < constraints.size(); j++) {\n+                    ColumnConstraint<Expression> cc = constraints.get(j);\n+                    if (cc instanceof CheckColumnConstraint) {\n+                        CheckColumnConstraint<Expression> check = (CheckColumnConstraint<Expression>) cc;\n+                        checkColumnConstraints.add(check);\n+                        // Re-frame the column constraint as a table constraint\n+                        createTable.tableElements().add(new CheckConstraint<>(\n+                            check.name(),\n+                            def.ident(),\n+                            check.expression(),\n+                            check.expressionStr()\n+                        ));\n+                    }\n+                }\n+                def.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MjA4MQ==", "bodyText": "minor (maybe personal preference): could be also done with simple for(var checkContraint : checkConstraints)", "url": "https://github.com/crate/crate/pull/9831#discussion_r404652081", "createdAt": "2020-04-07T09:03:15Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/DropCheckConstraintAnalyzer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.common.collections.Lists2;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.Schemas;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.metadata.table.Operation;\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Table;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+class DropCheckConstraintAnalyzer {\n+\n+    private final Schemas schemas;\n+\n+    DropCheckConstraintAnalyzer(Schemas schemas) {\n+        this.schemas = schemas;\n+    }\n+\n+    public AnalyzedAlterTableDropCheckConstraint analyze(Table<?> table, String name, CoordinatorTxnCtx txnCtx) {\n+        DocTableInfo tableInfo = (DocTableInfo) schemas.resolveTableInfo(\n+            table.getName(),\n+            Operation.ALTER,\n+            txnCtx.sessionContext().user(),\n+            txnCtx.sessionContext().searchPath());\n+        List<CheckConstraint<Symbol>> checkConstraints = tableInfo.checkConstraints();\n+        for (int i = 0; i < checkConstraints.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw==", "bodyText": "maybe worth adding an assertion to ensure its a boolean? Is this ensured somewhere else? otherwise it should throw an exception here.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404653927", "createdAt": "2020-04-07T09:06:14Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1ODIzMw==", "bodyText": "isn't this a duplicate of https://github.com/crate/crate/pull/9831/files#diff-288536de2bb838c7a805c32bcc63f8ddR397", "url": "https://github.com/crate/crate/pull/9831#discussion_r404658233", "createdAt": "2020-04-07T09:13:15Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1204,6 +1221,43 @@ private void assertDuplicatePrimaryKey(String stmt) {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithCheckConstraints() {\n+        String stmt = \"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\";\n+        BoundCreateTable analysis = analyze(stmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_id_ge_zero\")));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_qty_gt_zero\")));\n+    }\n+\n+    @Test\n+    public void testAlterTableAddColumnWithCheckConstraint() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDI3OA==", "bodyText": "sqlExecutor, docTableInfo and  tnxCtx can be all a local variables.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404660278", "createdAt": "2020-04-07T09:16:26Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.expression.InputFactory;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import io.crate.testing.SQLExecutor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Testing {@linkplain io.crate.execution.dml.upsert.CheckConstraints},\n+ * as well as various cases related to:\n+ *\n+ * <pre>\n+ *     CONSTRAINT &lt;name&gt; CHECK &lt;boolean expression&gt;\n+ * </pre>\n+ */\n+public class CheckConstraintsTest extends CrateDummyClusterServiceUnitTest {\n+\n+    private SQLExecutor sqlExecutor;\n+    private DocTableInfo docTableInfo;\n+    private CheckConstraints checkConstraints;\n+    private TransactionContext txnCtx;\n+\n+    @Before\n+    public void setUpExecutor() throws Exception {\n+        sqlExecutor = SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int,\" +\n+                      \"    qty int,\" +\n+                      \"    sentinel boolean CONSTRAINT sentinel CHECK(sentinel),\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+        docTableInfo = sqlExecutor.resolveTableInfo(\"t\");\n+        txnCtx = CoordinatorTxnCtx.systemTransactionContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65976d4e931fb8c203adf196fc588c8e02842f56", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/65976d4e931fb8c203adf196fc588c8e02842f56", "committedDate": "2020-04-07T16:48:51Z", "message": "Undo"}, "afterCommit": {"oid": "a7a3a2ca80cca799d916730764ec1ae09e1b4ea7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a7a3a2ca80cca799d916730764ec1ae09e1b4ea7", "committedDate": "2020-04-08T08:30:46Z", "message": "Change style of loop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNjAyMzQ3", "url": "https://github.com/crate/crate/pull/9831#pullrequestreview-390602347", "createdAt": "2020-04-09T08:44:50Z", "commit": {"oid": "c0cc534d5078166a8195e08c0da6c7709f6f1201"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NDo1MFrOGDPWmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0Njo1NFrOGDPbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MDQ1Nw==", "bodyText": "I don't think that this complexity is really worth it for simple toString methods. Also, most IDE's have nice toString method generators.", "url": "https://github.com/crate/crate/pull/9831#discussion_r406050457", "createdAt": "2020-04-09T08:44:50Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/common/StringUtils.java", "diffHunk": "@@ -24,11 +24,31 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n public final class StringUtils {\n \n+    public static String toString(Class<?> clazz, Object...attributes) {\n+        if (attributes.length % 2 != 0) {\n+            throw new IllegalArgumentException(\"expected event number of entries\");\n+        }\n+        StringBuilder sb = new StringBuilder(32);\n+        sb.append(clazz.getClass().getName()).append('{');\n+        if (attributes.length > 0) {\n+            for (int i = 0; i <= attributes.length / 2; i += 2) {\n+                sb.append(Objects.requireNonNull(attributes[i]))\n+                    .append(\"=\")\n+                    .append(attributes[i + 1])\n+                    .append(\", \");\n+            }\n+            sb.setLength(sb.length() - 2);\n+        }\n+        sb.append(\"}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0cc534d5078166a8195e08c0da6c7709f6f1201"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA==", "bodyText": "is it expected behaviour that this is now possible?", "url": "https://github.com/crate/crate/pull/9831#discussion_r406051648", "createdAt": "2020-04-09T08:46:54Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9701b937d0bf7ad1123272b20137f74675384cb9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9701b937d0bf7ad1123272b20137f74675384cb9", "committedDate": "2020-04-08T14:43:14Z", "message": "Fix rendering of class name... a fixup"}, "afterCommit": {"oid": "c510c1d9ded76c7014efa37c678182dbcfb1ac22", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c510c1d9ded76c7014efa37c678182dbcfb1ac22", "committedDate": "2020-04-10T08:01:51Z", "message": "Make toString something simple for the classes in this PR"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c510c1d9ded76c7014efa37c678182dbcfb1ac22", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c510c1d9ded76c7014efa37c678182dbcfb1ac22", "committedDate": "2020-04-10T08:01:51Z", "message": "Make toString something simple for the classes in this PR"}, "afterCommit": {"oid": "cdff9466a1ae82c24a27efade35a6b159cbe7fb2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/cdff9466a1ae82c24a27efade35a6b159cbe7fb2", "committedDate": "2020-04-15T10:34:29Z", "message": "A generated column cannot be based on a generated column"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "507556c8645ace807e45f672ba14648813b10583", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/507556c8645ace807e45f672ba14648813b10583", "committedDate": "2020-04-15T10:46:54Z", "message": "Remove dependency to com.google.common.base.Objects"}, "afterCommit": {"oid": "75c0b3ed94ab34b7de9e8a7d36c748f7250ed149", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/75c0b3ed94ab34b7de9e8a7d36c748f7250ed149", "committedDate": "2020-04-20T10:04:38Z", "message": "Assert that the boolean expression value's is a boolean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MzQ1NDk3", "url": "https://github.com/crate/crate/pull/9831#pullrequestreview-396345497", "createdAt": "2020-04-20T10:52:49Z", "commit": {"oid": "75c0b3ed94ab34b7de9e8a7d36c748f7250ed149"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0099bde632c45cd8023f970dae3508a3bbb8f65a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0099bde632c45cd8023f970dae3508a3bbb8f65a", "committedDate": "2020-04-20T20:53:30Z", "message": "Add CHECK constraint syntax to create table statement\n\nA check constraint allows you to specify that the values in a\ncertain column must satisfy a boolean expression. This can be\nused to ensure data integrity.\n\nSyntax:\n\n  [CONSTRAINT check_name] CHECK (boolean_expression)\n\nE.g.:\n\n    create table metrics (\n       id TEXT PRIMARY KEY,\n       weight double CHECK (weight >= 0)\n    )"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75c0b3ed94ab34b7de9e8a7d36c748f7250ed149", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/75c0b3ed94ab34b7de9e8a7d36c748f7250ed149", "committedDate": "2020-04-20T10:04:38Z", "message": "Assert that the boolean expression value's is a boolean"}, "afterCommit": {"oid": "0099bde632c45cd8023f970dae3508a3bbb8f65a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0099bde632c45cd8023f970dae3508a3bbb8f65a", "committedDate": "2020-04-20T20:53:30Z", "message": "Add CHECK constraint syntax to create table statement\n\nA check constraint allows you to specify that the values in a\ncertain column must satisfy a boolean expression. This can be\nused to ensure data integrity.\n\nSyntax:\n\n  [CONSTRAINT check_name] CHECK (boolean_expression)\n\nE.g.:\n\n    create table metrics (\n       id TEXT PRIMARY KEY,\n       weight double CHECK (weight >= 0)\n    )"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3472, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}