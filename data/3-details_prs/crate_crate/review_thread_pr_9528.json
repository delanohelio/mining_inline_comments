{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDczODk5", "number": 9528, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzowMTozMlrODYz2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoyOToyNFrODY0RPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzQxOTI0OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzowMTozMlrOFe4TNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzowMTozMlrOFe4TNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkyNDAyMw==", "bodyText": "I was not sure whether expressions implicit cast are more of a new feature or a fix. I am more inclined to have it as a fix on the same line with null.", "url": "https://github.com/crate/crate/pull/9528#discussion_r367924023", "createdAt": "2020-01-17T13:01:32Z", "author": {"login": "kovrus"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -57,6 +57,9 @@ None\n Fixes\n =====\n \n+- Fixed an issue in :ref:`ref-values` that would not allow combining expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9727b9a2a1bc69b1fd426bd42b204bb8b535315"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzQ4Nzk5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoyOToyNFrOFe49Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzoyOToyNFrOFe49Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNDczMA==", "bodyText": "Which type will this end up using? Couldn't this lead to ClassCastExceptions due to a mixture of types?\nIn the other branch we've type precedence logic integrated. See https://github.com/crate/crate/pull/9465/files#diff-bf12c5e61f9b0fe950aa518b1ed601abR807", "url": "https://github.com/crate/crate/pull/9528#discussion_r367934730", "createdAt": "2020-01-17T13:29:24Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -750,7 +750,8 @@ public AnalyzedRelation visitValues(Values values, StatementAnalysisContext cont\n                 for (int i = 0; i < firstRow.size(); i++) {\n                     var typeOfFirstRowAtPos = firstRow.get(i).valueType();\n                     var typeOfCurrentRowAtPos = columns.get(i).valueType();\n-                    if (!typeOfCurrentRowAtPos.equals(typeOfFirstRowAtPos)) {\n+                    if (!typeOfFirstRowAtPos.isConvertableTo(typeOfCurrentRowAtPos)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9727b9a2a1bc69b1fd426bd42b204bb8b535315"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1121, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}