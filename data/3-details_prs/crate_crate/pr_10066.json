{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODc3NTY4", "number": 10066, "title": "Detect Integer literal values at the sql parser", "bodyText": "Summary of the changes / Why this improves CrateDB\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like select 1 will now return integer instead of long.\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\nint_col + 1 -> integer.\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-09T15:17:08Z", "url": "https://github.com/crate/crate/pull/10066", "merged": true, "mergeCommit": {"oid": "fef664c5a92bdbef181f14b6adcad379ffd4e683"}, "closed": true, "closedAt": "2020-06-10T10:54:18Z", "author": {"login": "seut"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpmxGaABqjM0MjU0ODM2OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp266eABqjM0Mjg5Mjk1OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc05a8f82ce5b70dddb5604538e9ef88526708f9", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/cc05a8f82ce5b70dddb5604538e9ef88526708f9", "committedDate": "2020-06-09T14:59:51Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a \nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on \nfunction matching while keeping the existing behaviour of \n``int_col + 1 -> integer``."}, "afterCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/d5bad6f60cd0243ee9f62b85640433af117e67fd", "committedDate": "2020-06-09T15:26:38Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mjk2NDM5", "url": "https://github.com/crate/crate/pull/10066#pullrequestreview-427296439", "createdAt": "2020-06-09T15:44:03Z", "commit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDowM1rOGhQ4Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NToxMlrOGhQ7QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjcxOQ==", "bodyText": "Maybe also elaborate that for most clients this shouldn't be an issue - since for HTTP it was JSON serialized, and for PostgreSQL clients there is often a typed getLong, etc..", "url": "https://github.com/crate/crate/pull/10066#discussion_r437532719", "createdAt": "2020-06-09T15:44:03Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -61,6 +61,10 @@ Breaking Changes\n   execution is only available via the ``results`` array represented by a\n   row count for each bulk operation.\n \n+- Numeric literals fitting into the ``integer`` range will be detected now as\n+  ``integer`` literals instead of ``bigint`` literals. Thus a statement like\n+  ``select 1`` will return an ``integer`` column type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzUwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));\n          \n          \n            \n                        builder.append(Integer.toString(node.getValue()));\n          \n      \n    \n    \n  \n\nCheaper than going through String.format", "url": "https://github.com/crate/crate/pull/10066#discussion_r437533505", "createdAt": "2020-06-09T15:45:12Z", "author": {"login": "mfussenegger"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/SqlFormatter.java", "diffHunk": "@@ -679,6 +680,12 @@ protected Void visitLongLiteral(LongLiteral node, Integer indent) {\n             return null;\n         }\n \n+        @Override\n+        protected Void visitIntegerLiteral(IntegerLiteral node, Integer indent) {\n+            builder.append(String.format(Locale.ENGLISH, \"%d\", node.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODAzNjA5", "url": "https://github.com/crate/crate/pull/10066#pullrequestreview-427803609", "createdAt": "2020-06-10T07:59:27Z", "commit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OToyN1rOGhpWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OToyN1rOGhpWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzYxOA==", "bodyText": "\ud83d\udc4d\nreally minor, probably it can just return value to avoid integer boxing with Objects.hash or use Integer#hashCode.", "url": "https://github.com/crate/crate/pull/10066#discussion_r437933618", "createdAt": "2020-06-10T07:59:27Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/tree/IntegerLiteral.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import java.util.Objects;\n+\n+public class IntegerLiteral extends Literal {\n+\n+    private final int value;\n+\n+    public IntegerLiteral(int value) {\n+        this.value = value;\n+    }\n+\n+    public int getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitIntegerLiteral(this, context);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        IntegerLiteral that = (IntegerLiteral) o;\n+        return value == that.value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5bad6f60cd0243ee9f62b85640433af117e67fd"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODc5MzY1", "url": "https://github.com/crate/crate/pull/10066#pullrequestreview-427879365", "createdAt": "2020-06-10T09:30:30Z", "commit": {"oid": "b66f9582e0bcd57383e6b3c98fd4b0708847eec6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b66f9582e0bcd57383e6b3c98fd4b0708847eec6", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/b66f9582e0bcd57383e6b3c98fd4b0708847eec6", "committedDate": "2020-06-10T09:27:23Z", "message": "fixup! Detect Integer literal values at the sql parser"}, "afterCommit": {"oid": "8d4464b377757997ebc9a84a375894fe3c10199c", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/8d4464b377757997ebc9a84a375894fe3c10199c", "committedDate": "2020-06-10T09:36:51Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "committedDate": "2020-06-10T10:15:58Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d4464b377757997ebc9a84a375894fe3c10199c", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/8d4464b377757997ebc9a84a375894fe3c10199c", "committedDate": "2020-06-10T09:36:51Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``."}, "afterCommit": {"oid": "db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "author": {"user": {"login": "seut", "name": "Sebastian Utz"}}, "url": "https://github.com/crate/crate/commit/db8a73cd55099e9ad6074b93fbb4d91e5cbe3107", "committedDate": "2020-06-10T10:15:58Z", "message": "Detect Integer literal values at the sql parser\n\nIntroduce an integer literal object which will be used instead of a\nlong literal if the value fits into the integer range.\nQueries like ``select 1`` will now return ``integer`` instead of ``long``.\n\nThis allows us to later remove the special literal downcast logic on\nfunction matching while keeping the existing behaviour of\n``int_col + 1 -> integer``."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3258, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}