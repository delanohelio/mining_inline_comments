{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTQ1ODc1", "number": 9836, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODozMlrODtbcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzo0OVrODt3LXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTYyMTQxOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODozMlrOF-2CtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMjozMlrOF_h5Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA==", "bodyText": "I have not changed the second argument, such is I restrict it function.getValue().getTypeSignature() then we won't much a function that takes as the second argument an object type with inner types. the generic V for the second argument works in this case. I also tried to drop coercion and explicitly provide the type info for the second argument, but then it loses the inner type info.\nImho, i'd keep it like that. Anyways, this signature will be superseded later by smth like _cast(E, V) -> V", "url": "https://github.com/crate/crate/pull/9836#discussion_r401441460", "createdAt": "2020-04-01T08:28:32Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0NzcxNw==", "bodyText": "We could  (and maybe must) add a special case for targetType = ObjectType with a more concrete signature of parseTypeSignature(\"object(text, V)\") (including a variableArityGroup of text, V).\nCurrently all signature are the same and it will  always select the first one (with a probably wrong return type).\nSee https://github.com/crate/crate/blob/master/sql/src/main/java/io/crate/metadata/Functions.java#L262.\n(This is btw. currently wrong, it should fail if multiple functions match, I'll provide a fix soon).\nLoosing the innerType should not happen with your fix to createType() + getTypeSignature().", "url": "https://github.com/crate/crate/pull/9836#discussion_r401447717", "createdAt": "2020-04-01T08:38:54Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MjYzNQ==", "bodyText": "What about my comment here?", "url": "https://github.com/crate/crate/pull/9836#discussion_r401682635", "createdAt": "2020-04-01T14:59:13Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMDY1MA==", "bodyText": "it is not possible to parse parseTypeSignature(\"object(text, V)\") and call create type on it later on due to the assertion in the createType method. Also, there are probably also other cases, like array(object), etc.\nHm but all function signatures are different, coz they encode the return type name into their names. For object type matching parseTypeSignature(\"V\") works fine, and inner types are still there when matched any.\nWith this signature matching for two arguments here, it feels that we are trying to provide a correct solution on top of the existing workaround for the return type in the CastFunctionResolver.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401710650", "createdAt": "2020-04-01T15:36:17Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1OTg4Ng==", "bodyText": "it is not possible to parse parseTypeSignature(\"object(text, V)\") and call create type on it later on due to the assertion in the createType method\n\nRight but this should (and currently will) never happen. createType() should only be called on bound argument types which won't be the defined type signatures.\n\nHm but all function signatures are different, coz they encode the return type name into their names.\n\nAh right, missed the different function names.\nAs we've discussed this looks like we should get rid of these different function names eventually as all will end up in the same signature + implementation. But yes, lets do this later.", "url": "https://github.com/crate/crate/pull/9836#discussion_r402159886", "createdAt": "2020-04-02T09:02:32Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY2MjExOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/TypeSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTozMFrOF-2cdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTozMFrOF-2cdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODA1NA==", "bodyText": "This should never happen. We should add an assertion.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448054", "createdAt": "2020-04-01T08:39:30Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -132,7 +132,13 @@ public String getBaseTypeName() {\n             var builder = ObjectType.builder();\n             for (int i = 0; i < parameters.size() - 1;) {\n                 var valTypeSignature = parameters.get(i + 1);\n-                builder.setInnerType(String.valueOf(i), valTypeSignature.createType());\n+                final String innerTypeName;\n+                if (valTypeSignature instanceof NamedTypeSignature) {\n+                    innerTypeName = ((NamedTypeSignature) valTypeSignature).parameterName();\n+                } else {\n+                    innerTypeName = String.valueOf(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY2NDAzOnYy", "diffSide": "LEFT", "path": "common/src/main/java/io/crate/types/TypeSignature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDowMlrOF-2dmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo1MjoyM1rOF-26ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODM0Ng==", "bodyText": "why is this removed?", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448346", "createdAt": "2020-04-01T08:40:02Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -160,7 +166,7 @@ public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n         }\n-        if (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ1NTc3OQ==", "bodyText": "I was about to ask a question here. Did it to be able to compare the parameters with NamedTypeSignature and TypeSignature, which should probably never be compared.\neg. parseSignature(object(text int)) is(ObjectType.getSignature)\nwill adjust tests.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401455779", "createdAt": "2020-04-01T08:52:23Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -160,7 +166,7 @@ public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n         }\n-        if (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODM0Ng=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTY2NjkxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/NamedTypeSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDo1NVrOF-2ffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDo1NVrOF-2ffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODgyOA==", "bodyText": "I would name this more concrete to avoid confusion. E.g. ObjectParameterTypeSignature.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448828", "createdAt": "2020-04-01T08:40:55Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/NamedTypeSignature.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+class NamedTypeSignature extends TypeSignature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTEyNjk0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMDoxMFrOF_Ezzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMDoxMFrOF_Ezzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MzQwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)\n          \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(),\n          \n          \n            \n                              DataTypes.STRING)", "url": "https://github.com/crate/crate/pull/9836#discussion_r401683406", "createdAt": "2020-04-01T15:00:10Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "diffHunk": "@@ -239,15 +241,19 @@ public void testMap() {\n             .build();\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"text\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTEyODA1OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMDoyM1rOF_E0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMDoyM1rOF_E0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MzU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.LONG)\n          \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(),\n          \n          \n            \n                              DataTypes.LONG)", "url": "https://github.com/crate/crate/pull/9836#discussion_r401683585", "createdAt": "2020-04-01T15:00:23Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "diffHunk": "@@ -239,15 +241,19 @@ public void testMap() {\n             .build();\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"text\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)\n             .produces(new BoundVariables(\n                 Map.of(\n                     \"K\", type(\"text\"),\n                     \"V\", type(\"bigint\"))\n             ));\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"bigint\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.LONG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE2NTQyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzo1MFrOF_h8Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0OToyMFrOF_lsFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MDY2Nw==", "bodyText": "this check can be removed, the signature binder will already take care of this (if not its a bug ;-).", "url": "https://github.com/crate/crate/pull/9836#discussion_r402160667", "createdAt": "2020-04-02T09:03:50Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))\n+                    .returnType(function.getValue().getTypeSignature())\n+                    .forbidCoercion()\n+                    .build(),\n+                args -> {\n+                    DataType<?> sourceType = args.get(0);\n+                    DataType<?> targetType = args.get(1);\n+                    if (!sourceType.isConvertableTo(targetType)) {\n+                        throw new ConversionException(sourceType, targetType);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNjk0OA==", "bodyText": "hm looked at it a bit, I am not sure whether it is in the scope of the signature binding. It looks like it is part of the cast logic, checking whether the first argument of the function can be converted to the second. Maybe it can be even moved into the CastFunctionReolver and checked based in tryCast flag.", "url": "https://github.com/crate/crate/pull/9836#discussion_r402216948", "createdAt": "2020-04-02T10:39:14Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))\n+                    .returnType(function.getValue().getTypeSignature())\n+                    .forbidCoercion()\n+                    .build(),\n+                args -> {\n+                    DataType<?> sourceType = args.get(0);\n+                    DataType<?> targetType = args.get(1);\n+                    if (!sourceType.isConvertableTo(targetType)) {\n+                        throw new ConversionException(sourceType, targetType);\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MDY2Nw=="}, "originalCommit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMjEwMQ==", "bodyText": "Ah right, these are 2 different type variables.", "url": "https://github.com/crate/crate/pull/9836#discussion_r402222101", "createdAt": "2020-04-02T10:49:20Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))\n+                    .returnType(function.getValue().getTypeSignature())\n+                    .forbidCoercion()\n+                    .build(),\n+                args -> {\n+                    DataType<?> sourceType = args.get(0);\n+                    DataType<?> targetType = args.get(1);\n+                    if (!sourceType.isConvertableTo(targetType)) {\n+                        throw new ConversionException(sourceType, targetType);\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MDY2Nw=="}, "originalCommit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1578, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}