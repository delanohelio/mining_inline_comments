{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODQ0MTE0", "number": 10286, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1NzoyMlrOETKTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNDoxNVrOEb_LFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI3MTYzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1NzoyMlrOG4vLEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1NzoyMlrOG4vLEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NjMyMA==", "bodyText": "why you fetch only one signature, a function can be overloaded and can have more than one signature.", "url": "https://github.com/crate/crate/pull/10286#discussion_r462146320", "createdAt": "2020-07-29T08:57:22Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -50,9 +59,41 @@ public void register(Signature signature, BiFunction<Signature, Signature, Funct\n             throw new IllegalStateException(\n                 \"A function already exists for signature = \" + signature);\n         }\n+        signatureByOid.put(signature.getOid(), signature);\n+        signatureByName.put(signature.getName(), signature);\n+        schemas.add(signature.getName().schema());\n         functions.add(new FunctionProvider(signature, factory));\n     }\n \n+    public Signature getFunctionSignatureByOid(Integer funcOid) {\n+        if (funcOid == null) {\n+            new IllegalArgumentException(\"function oid cannot be null\");\n+        }\n+        return signatureByOid.get(funcOid);\n+    }\n+\n+    public Signature getFunctionSignaturesByName(String funcName) {\n+        if (funcName == null) {\n+            new IllegalArgumentException(\"function name cannot be null\");\n+        }\n+        int dot = funcName.indexOf(\".\");\n+        if (dot != -1) {\n+            String [] parts = funcName.split(\"\\\\.\");\n+            if (parts.length != 2) {\n+                new IllegalArgumentException(String.format(\n+                    Locale.ENGLISH, \"unrecognised function name format\", funcName));\n+            }\n+            return signatureByName.get(new FunctionName(parts[0], parts[1]));\n+        }\n+        Optional<Signature> maybeSignature = schemas // [null, pg_catalog ...]\n+            .stream()\n+            .map(sch -> new FunctionName(sch, funcName))\n+            .map(signatureByName::get)\n+            .filter(Objects::nonNull)\n+            .findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI3ODY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1ODo1NVrOG4vPRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1ODo1NVrOG4vPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzM5Nw==", "bodyText": "would this still work fine with UDF functions that can be added and removed?", "url": "https://github.com/crate/crate/pull/10286#discussion_r462147397", "createdAt": "2020-07-29T08:58:55Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -32,14 +32,23 @@\n \n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.function.BiFunction;\n \n public abstract class AbstractFunctionModule<T extends FunctionImplementation> extends AbstractModule {\n \n     private HashMap<FunctionName, List<FunctionProvider>> functionImplementations = new HashMap<>();\n     private MapBinder<FunctionName, List<FunctionProvider>> implementationsBinder;\n+    private Map<Integer, Signature> signatureByOid = new HashMap<>();\n+    private Map<FunctionName, Signature> signatureByName = new HashMap<>();\n+    private Set<String> schemas = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQ0NTM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNDoyMVrOG773Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNDoyMVrOG773Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5OTk0Mg==", "bodyText": "Having this as global static kinda defeats the purpose of using guice/injection for the functions.\nI think this should move into Functions. Then the evaluate of a Scalar somehow needs to get access to it, or to a subset / narrower interface.\nI'm also not sure if it is worth to pre-populate a full map given the use case. I suppose pg_function_is_visible won't be called too often, so we could consider doing the lookup and oid calculation on the fly and trade increased memory footprint with a higher compute demand when it is actually used.", "url": "https://github.com/crate/crate/pull/10286#discussion_r465499942", "createdAt": "2020-08-05T06:24:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -34,10 +38,16 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n \n public abstract class AbstractFunctionModule<T extends FunctionImplementation> extends AbstractModule {\n \n+    private static ConcurrentMap<Integer, Signature> SYSTEM_FUNCTION_SIGNATURES_BY_OID = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9c070ccbd5555183f3e5441c35998470ad53bd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE0NjYwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyOVrOG8ymzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzozMDoyMVrOG8zmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg3Nw==", "bodyText": "The BytesRef creation could be avoided I think. This is probably only doing a utf-16 to utf-8 conversion? Could likely call .getBytes(...) on the String directly to get the bytes.", "url": "https://github.com/crate/crate/pull/10286#discussion_r466396877", "createdAt": "2020-08-06T13:05:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -63,12 +67,37 @@ static int constraintOid(String relationName, String constraintName, String cons\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    public static int functionOid(FunctionName functionName) {\n-        BytesRef b = new BytesRef(Type.PROC.toString() + functionName.schema() + functionName.name());\n+    public static int regprocOid(FunctionName name) {\n+        BytesRef b = new BytesRef(Type.PROC.toString() + name.schema() + name.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMzExNA==", "bodyText": "does this extend to all the methods in OidHash? I mimicked the code.", "url": "https://github.com/crate/crate/pull/10286#discussion_r466413114", "createdAt": "2020-08-06T13:30:21Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -63,12 +67,37 @@ static int constraintOid(String relationName, String constraintName, String cons\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    public static int functionOid(FunctionName functionName) {\n-        BytesRef b = new BytesRef(Type.PROC.toString() + functionName.schema() + functionName.name());\n+    public static int regprocOid(FunctionName name) {\n+        BytesRef b = new BytesRef(Type.PROC.toString() + name.schema() + name.name());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg3Nw=="}, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE0NzQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNTo0MFrOG8ynWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNTo0MFrOG8ynWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NzAxOQ==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r466397019", "createdAt": "2020-08-06T13:05:40Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -63,12 +67,37 @@ static int constraintOid(String relationName, String constraintName, String cons\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    public static int functionOid(FunctionName functionName) {\n-        BytesRef b = new BytesRef(Type.PROC.toString() + functionName.schema() + functionName.name());\n+    public static int regprocOid(FunctionName name) {\n+        BytesRef b = new BytesRef(Type.PROC.toString() + name.schema() + name.name());\n+        return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n+    }\n+\n+    public static int regprocOid(String name) {\n+        return regprocOid(new FunctionName(null, name));\n+    }\n+\n+    public static int functionOid(Signature sig) {\n+        FunctionName name = sig.getName();\n+        BytesRef b = new BytesRef(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE1NjgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoyMVrOG8ytaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoxMjo1OFrOHCWiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ==", "bodyText": "I'm not sure if the functions fit into the TransactionContext - as the name implies it should contain state that is bound to the lifecycle of a transaction.\nThe Functions have a different lifecycle or scope. Maybe we should instead extend the evaluate method to take the Functions directly - or introduce some kind of NodeContext. Afaik we'll have other functions later that require access to the Schemas\n@kovrus @seut what your take here?", "url": "https://github.com/crate/crate/pull/10286#discussion_r466398571", "createdAt": "2020-08-06T13:08:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMDczNQ==", "bodyText": "I am not sure about extending the Scalar#evaluate method with the Functions argument, that would result in something like: Register a function -> AbstractFunctionModule -> inject into Functions -> function evaluate(..., Functions) which seems kind of cyclic and also, as you mention, won't be helpful when implementing the functions that need access to Schemas. I'd probably prefer some NodeContext that would have Functions injected and later Schemas.", "url": "https://github.com/crate/crate/pull/10286#discussion_r466410735", "createdAt": "2020-08-06T13:27:01Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ=="}, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODE0OQ==", "bodyText": "I would need some feedback to continue.\n\nNodeContext contains a reference to Functions and is passed to Scalar.(evaluate, evaluateIfLiterals) and FunctionImplementation.normalizeSymbol (because of Scalar.evaluateIfLiterals' signature).\nFrom there, I notise Analyzer's constructor creates all analyzers, and these could take NodeContext as a parameter, to have access to Functions. I could add Schemas to NodeContext, now or at a later PR.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472038149", "createdAt": "2020-08-18T09:18:32Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ=="}, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0NTkyNA==", "bodyText": "left some comments. I think it would be good to also get the input from @seut because the interface change touches a lot of components", "url": "https://github.com/crate/crate/pull/10286#discussion_r472045924", "createdAt": "2020-08-18T09:31:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ=="}, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyODU1Mw==", "bodyText": "As I understand this proposal, NodeContext will superseed the usage of Functions as it will hold a reference to it. So I think, NodeContext should be used in a same ways than Functions.\nIn detail:\n\nNodeContext should be a singleton\nmost (if not any) usages of Functions should be replaced by NodeContext.getFunctions()\nI'd prefer to wrapSchemas into NodeContext later on when required to lower the scope of this PR\n\nOther than that, this looks good to me.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472228553", "createdAt": "2020-08-18T14:12:58Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ=="}, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU5NjM5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/action/sql/Session.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMzo1M1rOHCLHaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMDoyODo1MFrOHCNUwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTMyMQ==", "bodyText": "I think the NodeContext could be created eagerly in the constructor - it should be valid over the life-time of a node.\nWe could even consider making it a (injected?) singleton.\nThis likely affects a lot of the other choices in the diff as well.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472041321", "createdAt": "2020-08-18T09:23:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/action/sql/Session.java", "diffHunk": "@@ -170,6 +171,7 @@ public void quickExec(String statement, ResultReceiver<?> resultReceiver, Row pa\n      */\n     public void quickExec(String statement, Function<String, Statement> parse, ResultReceiver<?> resultReceiver, Row params) {\n         CoordinatorTxnCtx txnCtx = new CoordinatorTxnCtx(sessionContext);\n+        NodeContext nodeCtx = new NodeContext(planner.functions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NzUwNQ==", "bodyText": "In the MetadataModule class we bind functions/schemas as eager singletons, can I make NodeContext encapsulate both?", "url": "https://github.com/crate/crate/pull/10286#discussion_r472077505", "createdAt": "2020-08-18T10:28:50Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/action/sql/Session.java", "diffHunk": "@@ -170,6 +171,7 @@ public void quickExec(String statement, ResultReceiver<?> resultReceiver, Row pa\n      */\n     public void quickExec(String statement, Function<String, Statement> parse, ResultReceiver<?> resultReceiver, Row params) {\n         CoordinatorTxnCtx txnCtx = new CoordinatorTxnCtx(sessionContext);\n+        NodeContext nodeCtx = new NodeContext(planner.functions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTMyMQ=="}, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDYxMjcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/Analyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyODoxNVrOHCLRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyODoxNVrOHCLRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MzkxNQ==", "bodyText": "Would be cool if we could avoid this. Using a class as both (not encapsulated) data carrier and as a component that provides some other fucntionality is a sign that it breaks separation of concerns.\nI get that this may be convenient and \"easier\" - as less changes necessary and less to type, but it may make changes more difficult down the road.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472043915", "createdAt": "2020-08-18T09:28:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/Analyzer.java", "diffHunk": "@@ -188,6 +191,10 @@ public Analyzer(Schemas schemas,\n         this.resetStatementAnalyzer = new ResetStatementAnalyzer(functions);\n     }\n \n+    public NodeContext nodeContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTcwODg4OnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1OTozMlrOHCV9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1OTozMlrOHCV9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxODg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            name and argument type list.\n          \n          \n            \n            name, and argument type list.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472218881", "createdAt": "2020-08-18T13:59:32Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2642,6 +2642,34 @@ Example:\n     +---------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_function_is_visible:\n+\n+``pg_function_is_visible``\n+--------------------------\n+\n+The function ``pg_function_is_visible`` returns true for OIDs that refer to a system\n+or a user defined function. A function's OID is calculated as a hash over its schema,\n+name and argument type list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjAxNTYzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODozMDo0NFrOHEig-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo0ODozNFrOHEqLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMTg1MQ==", "bodyText": "Couldn't the builder construct the NodeContext itself, similar how it created the Functions itself before?\nWould simplify all the call-sites which use it.", "url": "https://github.com/crate/crate/pull/10286#discussion_r474521851", "createdAt": "2020-08-21T08:30:44Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "diffHunk": "@@ -228,6 +227,7 @@ public PlannerContext getPlannerContext(ClusterState clusterState, Random random\n         private SessionSettingRegistry sessionSettingRegistry = new SessionSettingRegistry(Set.of(loadedRules));\n \n         private Builder(ClusterService clusterService,\n+                        NodeContext nodeCtx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwODA4MA==", "bodyText": "I found that both SqlExpressions and SqlExecutor do require access to  NodeContext. Some tests make use of SqlExpressions, other use SqlExecutor, others both, as for instance ExpressionAnalyzerTest. In the later cases, I was faced with a chicken and egg problem https://github.com/crate/crate/blob/master/server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java#L98 . Given than NodeContext is a unique instance, I went for injecting it for tests as well.", "url": "https://github.com/crate/crate/pull/10286#discussion_r474608080", "createdAt": "2020-08-21T10:16:52Z", "author": {"login": "marregui"}, "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "diffHunk": "@@ -228,6 +227,7 @@ public PlannerContext getPlannerContext(ClusterState clusterState, Random random\n         private SessionSettingRegistry sessionSettingRegistry = new SessionSettingRegistry(Set.of(loadedRules));\n \n         private Builder(ClusterService clusterService,\n+                        NodeContext nodeCtx,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMTg1MQ=="}, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYyNzYxMA==", "bodyText": "Yes they require it, but it can construct it by itself - given that it's a test utility the requirement to have a single instance doesn't apply. Think of SQLExecutor as a kind of \"mini\" Node - it already sets up most of the component it requires for the analyzer and planner by itself.", "url": "https://github.com/crate/crate/pull/10286#discussion_r474627610", "createdAt": "2020-08-21T11:00:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "diffHunk": "@@ -228,6 +227,7 @@ public PlannerContext getPlannerContext(ClusterState clusterState, Random random\n         private SessionSettingRegistry sessionSettingRegistry = new SessionSettingRegistry(Set.of(loadedRules));\n \n         private Builder(ClusterService clusterService,\n+                        NodeContext nodeCtx,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMTg1MQ=="}, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY0NzUwMQ==", "bodyText": "Ok, I will! thank you", "url": "https://github.com/crate/crate/pull/10286#discussion_r474647501", "createdAt": "2020-08-21T11:48:34Z", "author": {"login": "marregui"}, "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "diffHunk": "@@ -228,6 +227,7 @@ public PlannerContext getPlannerContext(ClusterState clusterState, Random random\n         private SessionSettingRegistry sessionSettingRegistry = new SessionSettingRegistry(Set.of(loadedRules));\n \n         private Builder(ClusterService clusterService,\n+                        NodeContext nodeCtx,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMTg1MQ=="}, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjAyMDUxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/testing/SqlExpressions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODozMTo0MVrOHEikIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODozMTo0MVrOHEikIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMjY1OA==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r474522658", "createdAt": "2020-08-21T08:31:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/testing/SqlExpressions.java", "diffHunk": "@@ -64,54 +54,40 @@\n \n     private final ExpressionAnalyzer expressionAnalyzer;\n     private final ExpressionAnalysisContext expressionAnalysisCtx;\n-    private final Injector injector;\n     private final CoordinatorTxnCtx coordinatorTxnCtx;\n     private final EvaluatingNormalizer normalizer;\n-    private final Functions functions;\n+    public final NodeContext nodeCtx;\n \n-    public SqlExpressions(Map<RelationName, AnalyzedRelation> sources) {\n-        this(sources, null, User.CRATE_USER);\n+    public SqlExpressions(Map<RelationName, AnalyzedRelation> sources, NodeContext nodeCtx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzY3MTExOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1OTowNVrOHGOf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1OTowNVrOHGOf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5MTAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or a user defined function. A function's OID is calculated as a hash over its schema,\n          \n          \n            \n            name, and argument type list.\n          \n          \n            \n            or a user defined function.\n          \n      \n    \n    \n  \n\nWould omit this as it's implementation detail. Instead it could tell users how to get the oid of a function.", "url": "https://github.com/crate/crate/pull/10286#discussion_r476291036", "createdAt": "2020-08-25T08:59:05Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2642,6 +2642,34 @@ Example:\n     +---------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_function_is_visible:\n+\n+``pg_function_is_visible``\n+--------------------------\n+\n+The function ``pg_function_is_visible`` returns true for OIDs that refer to a system\n+or a user defined function. A function's OID is calculated as a hash over its schema,\n+name, and argument type list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzcxMTA2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/collect/sources/TableFunctionCollectSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowNTo1MVrOHGO3mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyODoyNFrOHGPs9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NzExNA==", "bodyText": "The nodeCtx should be used here instead of passing null", "url": "https://github.com/crate/crate/pull/10286#discussion_r476297114", "createdAt": "2020-08-25T09:05:51Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/TableFunctionCollectSource.java", "diffHunk": "@@ -87,7 +87,7 @@ public TableFunctionCollectSource(Functions functions) {\n             topLevelInputs.add(ctx.add(symbol));\n         }\n \n-        Iterable<Row> result = functionImplementation.evaluate(txnCtx, inputs.toArray(new Input[0]));\n+        Iterable<Row> result = functionImplementation.evaluate(txnCtx, null, inputs.toArray(new Input[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDc3Mw==", "bodyText": "well spotted! thank you very much.", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310773", "createdAt": "2020-08-25T09:28:24Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/TableFunctionCollectSource.java", "diffHunk": "@@ -87,7 +87,7 @@ public TableFunctionCollectSource(Functions functions) {\n             topLevelInputs.add(ctx.add(symbol));\n         }\n \n-        Iterable<Row> result = functionImplementation.evaluate(txnCtx, inputs.toArray(new Input[0]));\n+        Iterable<Row> result = functionImplementation.evaluate(txnCtx, null, inputs.toArray(new Input[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NzExNA=="}, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzcxNTkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/operator/AndOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowNzowOFrOHGO6lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTowNzowOFrOHGO6lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5Nzg3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return Literal.of(evaluate(txnCtx, null, (Input) left, (Input) right));\n          \n          \n            \n                        return Literal.of(evaluate(txnCtx, nodeCtx, (Input) left, (Input) right));", "url": "https://github.com/crate/crate/pull/10286#discussion_r476297876", "createdAt": "2020-08-25T09:07:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/operator/AndOperator.java", "diffHunk": "@@ -70,15 +71,15 @@ public Signature boundSignature() {\n     }\n \n     @Override\n-    public Symbol normalizeSymbol(Function function, TransactionContext txnCtx) {\n+    public Symbol normalizeSymbol(Function function, TransactionContext txnCtx, NodeContext nodeCtx) {\n         assert function != null : \"function must not be null\";\n         assert function.arguments().size() == 2 : \"number of args must be 2\";\n \n         Symbol left = function.arguments().get(0);\n         Symbol right = function.arguments().get(1);\n \n         if (left instanceof Input && right instanceof Input) {\n-            return Literal.of(evaluate(txnCtx, (Input) left, (Input) right));\n+            return Literal.of(evaluate(txnCtx, null, (Input) left, (Input) right));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzczNTY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/Functions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMjoyOVrOHGPHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMjoyOVrOHGPHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTA3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Nullable", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301074", "createdAt": "2020-08-25T09:12:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzczNjQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/Functions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMjo0MVrOHGPHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMjo0MVrOHGPHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {\n          \n          \n            \n                private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, int oid) {", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301189", "createdAt": "2020-08-25T09:12:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n \n+    private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzczODQyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/Functions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMzoxMlrOHGPIug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxMzoxMlrOHGPIug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTQ5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Signature findFunctionSignatureByOid(Integer oid) {\n          \n          \n            \n                @Nullable\n          \n          \n            \n                public Signature findFunctionByOid(int oid) {", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301498", "createdAt": "2020-08-25T09:13:12Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n \n+    private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {\n+        for (Map.Entry<FunctionName, List<FunctionProvider>> func : functions.entrySet()) {\n+            for (FunctionProvider sig : func.getValue()) {\n+                if (Objects.equals(oid, OidHash.functionOid(sig.getSignature()))) {\n+                    return sig.getSignature();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public Signature findFunctionSignatureByOid(Integer oid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc1MDUxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxNjozN1rOHGPQXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxNjozN1rOHGPQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMzQ1Mw==", "bodyText": "Due to the varargs this results in an array allocation. I think in most call-sites we could just go for string concat using  + and then do the .getBytes call to avoid some overhead.", "url": "https://github.com/crate/crate/pull/10286#discussion_r476303453", "createdAt": "2020-08-25T09:16:37Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -41,34 +48,55 @@\n         PROC\n     }\n \n+    private static int oid(String... keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc4MzUyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNDo0MFrOHGPkFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNDo0MFrOHGPkFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODUwMg==", "bodyText": "Why all the formatting changes in this file?\nCould you revert them to keep the scope of the PR narrower?", "url": "https://github.com/crate/crate/pull/10286#discussion_r476308502", "createdAt": "2020-08-25T09:24:40Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "diffHunk": "@@ -789,7 +791,7 @@ public void testInnerJoinSyntaxDoesNotExtendsWhereClause() throws Exception {\n             \"select * from users inner join users_multi_pk on users.id = users_multi_pk.id\");\n         assertThat(mss.where(), isLiteral(true));\n         assertThat(mss.joinPairs().get(0).condition(),\n-            isSQL(\"(doc.users.id = doc.users_multi_pk.id)\"));\n+                   isSQL(\"(doc.users.id = doc.users_multi_pk.id)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc4OTU4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/execution/dml/upsert/TransportShardUpsertActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNjoxNVrOHGPn6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNjoxNVrOHGPn6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTQ4Mw==", "bodyText": "Please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476309483", "createdAt": "2020-08-25T09:26:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/dml/upsert/TransportShardUpsertActionTest.java", "diffHunk": "@@ -156,16 +155,16 @@ public void prepare() throws Exception {\n         when(schemas.getTableInfo(any(RelationName.class), eq(Operation.INSERT))).thenReturn(tableInfo);\n \n         transportShardUpsertAction = new TestingTransportShardUpsertAction(\n-            mock(ThreadPool.class),\n-            clusterService,\n-            MockTransportService.createNewService(Settings.EMPTY, Version.ES_V_6_5_1, THREAD_POOL, clusterService.getClusterSettings()),\n-            mock(SchemaUpdateClient.class),\n-            mock(TasksService.class),\n-            indicesService,\n-            mock(ShardStateAction.class),\n-            functions,\n-            schemas,\n-            mock(IndexNameExpressionResolver.class)\n+                mock(ThreadPool.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc5NDE5OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/execution/engine/collect/GroupByOptimizedIteratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNzozMlrOHGPq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNzozMlrOHGPq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDI2Mg==", "bodyText": "Could use a local variable, the class attribute is not used as far as I can tell", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310262", "createdAt": "2020-08-25T09:27:32Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/collect/GroupByOptimizedIteratorTest.java", "diffHunk": "@@ -73,9 +74,11 @@\n     private String columnName;\n     private InputCollectExpression inExpr;\n     private List<AggregationContext> aggregationContexts;\n+    private NodeContext nodeCtx;\n \n     @Before\n     public void prepare() throws Exception {\n+        nodeCtx = createNodeContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc5NzIzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/execution/engine/fetch/FetchRowsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyODoyMlrOHGPs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyODoyMlrOHGPs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDc0NA==", "bodyText": "Please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310744", "createdAt": "2020-08-25T09:28:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/fetch/FetchRowsTest.java", "diffHunk": "@@ -67,10 +68,10 @@ public void test_fetch_rows_can_map_inputs_and_buckets_to_outputs() throws Excep\n             t2.ident(), fetchSource2\n         );\n         var fetchRows = FetchRows.create(\n-            CoordinatorTxnCtx.systemTransactionContext(),\n-            e.functions(),\n-            fetchSources,\n-            List.of(\n+                CoordinatorTxnCtx.systemTransactionContext(),\n+                createNodeContext(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Nzc5ODMxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/execution/engine/indexing/IndexWriterProjectorUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyODozOFrOHGPtiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyODozOFrOHGPtiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDkyMA==", "bodyText": "please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310920", "createdAt": "2020-08-25T09:28:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/indexing/IndexWriterProjectorUnitTest.java", "diffHunk": "@@ -96,32 +96,32 @@ public void testNullPKValue() throws Throwable {\n \n         TransportCreatePartitionsAction transportCreatePartitionsAction = mock(TransportCreatePartitionsAction.class);\n         IndexWriterProjector indexWriter = new IndexWriterProjector(\n-            clusterService,\n-            new NodeJobsCounter(),\n-            scheduler,\n-            executor,\n-            CoordinatorTxnCtx.systemTransactionContext(),\n-            TestingHelpers.getFunctions(),\n-            Settings.EMPTY,\n-            5,\n-            1,\n-            transportCreatePartitionsAction,\n-            (request, listener) -> {},\n-            IndexNameResolver.forTable(BULK_IMPORT_IDENT),\n-            RAW_SOURCE_REFERENCE,\n-            Collections.singletonList(ID_IDENT),\n-            Collections.<Symbol>singletonList(new InputColumn(1)),\n-            null,\n-            null,\n-            sourceInput,\n-            collectExpressions,\n-            20,\n-            null,\n-            null,\n-            false,\n-            false,\n-            UUID.randomUUID(),\n-            UpsertResultContext.forRowCount());\n+                clusterService,\n+                new NodeJobsCounter(),\n+                scheduler,\n+                executor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgwMjAwOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyOTozMVrOHGPvnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyOTozMVrOHGPvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMTQ1Mw==", "bodyText": "please use the nodeCtx instead of passing in null", "url": "https://github.com/crate/crate/pull/10286#discussion_r476311453", "createdAt": "2020-08-25T09:29:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "diffHunk": "@@ -200,15 +196,15 @@ public void assertNormalize(String functionExpression, Matcher<? super Symbol> e\n             Input<?> input = ctx.add(arg);\n             arguments[i] = new AssertMax1ValueCallInput(input);\n         }\n-        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, (Input[]) arguments);\n+        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, null, (Input[]) arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgwMjQ2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyOTozOFrOHGPv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyOTozOFrOHGPv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMTUyOQ==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r476311529", "createdAt": "2020-08-25T09:29:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "diffHunk": "@@ -200,15 +196,15 @@ public void assertNormalize(String functionExpression, Matcher<? super Symbol> e\n             Input<?> input = ctx.add(arg);\n             arguments[i] = new AssertMax1ValueCallInput(input);\n         }\n-        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, (Input[]) arguments);\n+        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, null, (Input[]) arguments);\n         assertThat((T) actualValue, expectedValue);\n \n         // Reset calls\n         for (AssertMax1ValueCallInput argument : arguments) {\n             argument.calls = 0;\n         }\n \n-        actualValue = scalar.evaluate(txnCtx, arguments);\n+        actualValue = scalar.evaluate(txnCtx, null, arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgxNzYxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/planner/node/ddl/UpdateSettingsPlanTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozMzoyN1rOHGP4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozMzoyN1rOHGP4-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMzg1MQ==", "bodyText": "Please revert indentation changes", "url": "https://github.com/crate/crate/pull/10286#discussion_r476313851", "createdAt": "2020-08-25T09:33:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/planner/node/ddl/UpdateSettingsPlanTest.java", "diffHunk": "@@ -45,19 +45,19 @@\n import java.util.function.Function;\n \n import static io.crate.planner.node.ddl.UpdateSettingsPlan.buildSettingsFrom;\n-import static io.crate.testing.TestingHelpers.getFunctions;\n+import static io.crate.testing.TestingHelpers.createNodeContext;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.is;\n \n public class UpdateSettingsPlanTest extends ESTestCase {\n \n     private Function<Symbol, Object> symbolEvaluator(Row row) {\n         return x -> SymbolEvaluator.evaluate(\n-            TransactionContext.of(new SessionSettings(\"\", SearchPath.createSearchPathFrom(\"\"))),\n-            getFunctions(),\n-            x,\n-            row,\n-            SubQueryResults.EMPTY);\n+                TransactionContext.of(new SessionSettings(\"\", SearchPath.createSearchPathFrom(\"\"))),\n+                createNodeContext(),\n+                x,\n+                row,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzgyMDM3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNDoxNVrOHGP60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNDoxNVrOHGP60g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNDMyMg==", "bodyText": "please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476314322", "createdAt": "2020-08-25T09:34:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java", "diffHunk": "@@ -88,13 +88,14 @@\n     public void prepare() {\n         SQLExecutor e = SQLExecutor.builder(clusterService).build();\n         sqlOperations = new SQLOperations(\n-            e.analyzer,\n-            e.planner,\n-            () -> mock(DependencyCarrier.class),\n-            new JobsLogs(() -> true),\n-            Settings.EMPTY,\n-            clusterService,\n-            USER_MANAGER_PROVIDER\n+                e.nodeCtx,\n+                e.analyzer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}