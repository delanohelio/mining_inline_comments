{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzc3MjMx", "number": 9975, "title": "Reduce usage of guava in the server module.", "bodyText": "Summary of the changes / Why this improves CrateDB\nFollow-ups:\n\nmulti maps and lists\nmemorizing and caching data structures\nset operations\ncomparators\n\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-20T14:10:18Z", "url": "https://github.com/crate/crate/pull/9975", "merged": true, "mergeCommit": {"oid": "4a1c1f4fae2718f1935cb443c6c21b7a53ea6443"}, "closed": true, "closedAt": "2020-05-22T14:34:57Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjJz4rgFqTQxNTM4NDUwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjyvXKgBqjMzNjQ4MDc3NzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Mzg0NTA5", "url": "https://github.com/crate/crate/pull/9975#pullrequestreview-415384509", "createdAt": "2020-05-20T14:17:49Z", "commit": {"oid": "4135f87f472158357d71d68e3f60083dfe8c860c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo0OVrOGYOFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo0OVrOGYOFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc1Nw==", "bodyText": "This is Objects.requireNonNullElse, no?", "url": "https://github.com/crate/crate/pull/9975#discussion_r428049757", "createdAt": "2020-05-20T14:17:49Z", "author": {"login": "mfussenegger"}, "path": "libs/shared/src/main/java/io/crate/common/Objects.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common;\n+\n+import javax.annotation.Nullable;\n+\n+public class Objects {\n+\n+    /**\n+     * Returns the first of two given parameters that is not {@code null}, if either is,\n+     * or otherwise throws a {@link NullPointerException}.\n+     *\n+     * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n+     * @throws NullPointerException if both {@code first} and {@code second} are null\n+     */\n+    public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4135f87f472158357d71d68e3f60083dfe8c860c"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4135f87f472158357d71d68e3f60083dfe8c860c", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/4135f87f472158357d71d68e3f60083dfe8c860c", "committedDate": "2020-05-20T14:09:31Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}, "afterCommit": {"oid": "e00384e15268852804bf77291ed7c8c29fd67a05", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e00384e15268852804bf77291ed7c8c29fd67a05", "committedDate": "2020-05-21T12:40:52Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e00384e15268852804bf77291ed7c8c29fd67a05", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e00384e15268852804bf77291ed7c8c29fd67a05", "committedDate": "2020-05-21T12:40:52Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}, "afterCommit": {"oid": "e38fccfcd5a501658b21ef067243bbddf7f04231", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e38fccfcd5a501658b21ef067243bbddf7f04231", "committedDate": "2020-05-21T12:54:19Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e38fccfcd5a501658b21ef067243bbddf7f04231", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e38fccfcd5a501658b21ef067243bbddf7f04231", "committedDate": "2020-05-21T12:54:19Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}, "afterCommit": {"oid": "8f96597472c93c339643ccbf715f2beba9647fb5", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8f96597472c93c339643ccbf715f2beba9647fb5", "committedDate": "2020-05-22T09:02:37Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f96597472c93c339643ccbf715f2beba9647fb5", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8f96597472c93c339643ccbf715f2beba9647fb5", "committedDate": "2020-05-22T09:02:37Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}, "afterCommit": {"oid": "8bfe8c73e1323f38407ff48dd13ca72e328295f0", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8bfe8c73e1323f38407ff48dd13ca72e328295f0", "committedDate": "2020-05-22T09:34:26Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bfe8c73e1323f38407ff48dd13ca72e328295f0", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/8bfe8c73e1323f38407ff48dd13ca72e328295f0", "committedDate": "2020-05-22T09:34:26Z", "message": "Reduce the usage of guava in the server module.\n\nFollow up:\n- multimap, multilists\n- memorizing and caching data structures\n- set operations\n- comparators"}, "afterCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/abcf2dbf9a458830ad8a89cc80e80068aa40232b", "committedDate": "2020-05-22T09:53:26Z", "message": "Reduce usage of guava in the server module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODQ5NDQ3", "url": "https://github.com/crate/crate/pull/9975#pullrequestreview-416849447", "createdAt": "2020-05-22T11:47:04Z", "commit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NzowNFrOGZUThA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODozMFrOGZUVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDI2MA==", "bodyText": "Maybe for cases like this where the list is only consumed once it would make sense to add a mapLazy that is based on something like this:\nstatic class LazyMapList<I, O> extends AbstractList<O> {\n\n    private final List<I> list;\n    private final Function<? super I, ? extends O> mapper;\n\n    public LazyMapList(List<I> list, Function<? super I, ? extends O> mapper) {\n        this.list = list;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public O get(int index) {\n        return mapper.apply(list.get(index));\n    }\n\n    @Override\n    public int size() {\n        return list.size();\n    }\n}", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200260", "createdAt": "2020-05-22T11:47:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -62,7 +60,7 @@ private DocKey(int pos) {\n \n         public String getId(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n             return idFunction.apply(\n-                Lists.transform(\n+                Lists2.map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDQzMQ==", "bodyText": "Similar here mapLazy might be better here.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200431", "createdAt": "2020-05-22T11:47:35Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java", "diffHunk": "@@ -149,7 +149,8 @@ public RemoteCollectorFactory(ClusterService clusterService,\n             );\n             remoteCollector.doCollect();\n         }\n-        return consumer.completionFuture().thenApply(rows -> Lists.transform(rows, Buckets.arrayToSharedRow()::apply));\n+        return consumer.completionFuture()\n+            .thenApply(rows -> Lists2.map(rows, Buckets.arrayToSharedRow()::apply));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDgwNA==", "bodyText": "Maybe also a case for mapLazy, or otherwise we should also change the function name, because the View implied that the structure is lazy.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200804", "createdAt": "2020-05-22T11:48:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/Symbols.java", "diffHunk": "@@ -49,7 +49,7 @@\n     public static final Predicate<Symbol> IS_GENERATED_COLUMN = input -> input instanceof GeneratedReference;\n \n     public static List<DataType> typeView(List<? extends Symbol> symbols) {\n-        return Lists.transform(symbols, Symbol::valueType);\n+        return Lists2.map(symbols, Symbol::valueType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29986157d703adae1f542e49d2770325107ac689", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/29986157d703adae1f542e49d2770325107ac689", "committedDate": "2020-05-22T13:18:53Z", "message": "fixup! Reduce usage of guava in the server module."}, "afterCommit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5ae3af8da5e813226fefb4fab412f63c62e1198d", "committedDate": "2020-05-22T13:22:27Z", "message": "fixup! Reduce usage of guava in the server module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTI1MTU5", "url": "https://github.com/crate/crate/pull/9975#pullrequestreview-416925159", "createdAt": "2020-05-22T13:50:20Z", "commit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTI2NDkx", "url": "https://github.com/crate/crate/pull/9975#pullrequestreview-416926491", "createdAt": "2020-05-22T13:52:08Z", "commit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjowOFrOGZX38Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjowOFrOGZX38Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODczNw==", "bodyText": "Btw I'm not sure if this restriction is necessary. E.g. if you look at the implementation of get of LinkedList there is no \"extra\" slow-down caused by using LazyMapList", "url": "https://github.com/crate/crate/pull/9975#discussion_r429258737", "createdAt": "2020-05-22T13:52:08Z", "author": {"login": "mfussenegger"}, "path": "libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common.collections;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+import java.util.RandomAccess;\n+import java.util.function.Function;\n+\n+/**\n+ * {@code LazyMapList} is a wrapper around a random access list that lazily\n+ * applies the {@code mapper} {@code Function} on each item when it is accessed.\n+ */\n+public class LazyMapList<I, O> extends AbstractList<O> implements RandomAccess {\n+\n+    private final List<I> list;\n+    private final Function<? super I, ? extends O> mapper;\n+\n+    public static <I, O> LazyMapList<I, O> of(List<I> list, Function<? super I, ? extends O> mapper) {\n+        if (!(list instanceof RandomAccess)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37da8429aad2723f2a26653e0049ea593fd05034", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/37da8429aad2723f2a26653e0049ea593fd05034", "committedDate": "2020-05-22T13:59:51Z", "message": "Reduce usage of guava in the server module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5ae3af8da5e813226fefb4fab412f63c62e1198d", "committedDate": "2020-05-22T13:22:27Z", "message": "fixup! Reduce usage of guava in the server module."}, "afterCommit": {"oid": "37da8429aad2723f2a26653e0049ea593fd05034", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/37da8429aad2723f2a26653e0049ea593fd05034", "committedDate": "2020-05-22T13:59:51Z", "message": "Reduce usage of guava in the server module."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3406, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}