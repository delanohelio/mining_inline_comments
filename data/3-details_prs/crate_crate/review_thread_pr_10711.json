{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzQ2MjA4", "number": 10711, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMjozN1rOEytz5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo1MDoxNVrOEyuxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE0ODIxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMjozN1rOHpgZ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxNDo1NlrOHpgflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDU5MA==", "bodyText": "Not sure if these additional tests here adds something here compared to the new signature binder and type tests. Also no strong opinion here..", "url": "https://github.com/crate/crate/pull/10711#discussion_r513284590", "createdAt": "2020-10-28T09:12:37Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -360,4 +364,26 @@ public void test_partial_quoted_subscript() {\n         symbol = executor.asSymbol(\"nested_obj.\\\"myObj['x']\\\"['AbC']\");\n         assertThat(symbol, isReference(\"myObj['x']['AbC']\"));\n     }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_length_limit_and_unbound() throws IOException {\n+        var e = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table tbl (str varchar(3))\")\n+            .build();\n+        var eq = (Function) e.asSymbol(\"tbl.str = 'abc'\");\n+        assertThat(\n+            Lists2.map(eq.arguments(), Symbol::valueType),\n+            contains(DataTypes.STRING, DataTypes.STRING));\n+    }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_different_limit_length() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2b5820a4ff4730f8cc7d501a05673eaf334922"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NjAzOA==", "bodyText": "can drop it", "url": "https://github.com/crate/crate/pull/10711#discussion_r513286038", "createdAt": "2020-10-28T09:14:56Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/analyze/expressions/ExpressionAnalyzerTest.java", "diffHunk": "@@ -360,4 +364,26 @@ public void test_partial_quoted_subscript() {\n         symbol = executor.asSymbol(\"nested_obj.\\\"myObj['x']\\\"['AbC']\");\n         assertThat(symbol, isReference(\"myObj['x']['AbC']\"));\n     }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_length_limit_and_unbound() throws IOException {\n+        var e = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table tbl (str varchar(3))\")\n+            .build();\n+        var eq = (Function) e.asSymbol(\"tbl.str = 'abc'\");\n+        assertThat(\n+            Lists2.map(eq.arguments(), Symbol::valueType),\n+            contains(DataTypes.STRING, DataTypes.STRING));\n+    }\n+\n+    @Test\n+    public void test_resolve_eq_function_for_text_types_with_different_limit_length() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NDU5MA=="}, "originalCommit": {"oid": "ec2b5820a4ff4730f8cc7d501a05673eaf334922"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjE1MDk4OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMzoyNlrOHpgbww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToxMzoyNlrOHpgbww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NTA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Fixed an issue that would prevent functions resolution for the arguments\n          \n          \n            \n            - Fixed an issue that would prevent function resolution for arguments", "url": "https://github.com/crate/crate/pull/10711#discussion_r513285059", "createdAt": "2020-10-28T09:13:26Z", "author": {"login": "seut"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -60,6 +60,13 @@ Changes\n Fixes\n =====\n \n+- Fixed an issue that would prevent functions resolution for the arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2b5820a4ff4730f8cc7d501a05673eaf334922"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjMwNjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo1MDoxNVrOHph6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo1MDoxNVrOHph6iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwOTMyMw==", "bodyText": "It would also be possible to return the instance with the higher length to avoid creating a new one.\nI doubt it has any significant impact, but the logic wouldn't really be more complicated either.", "url": "https://github.com/crate/crate/pull/10711#discussion_r513309323", "createdAt": "2020-10-28T09:50:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TypeCompatibility.java", "diffHunk": "@@ -94,8 +94,20 @@\n         if (fromTypeParameters.size() != toTypeParameters.size()) {\n             if (fromType.id() == ObjectType.ID && toType.id() == ObjectType.ID) {\n                 return fromTypeParameters.size() > toTypeParameters.size() ? fromType : toType;\n+            } else if (fromType.id() == StringType.ID && toType.id() == StringType.ID) {\n+                if (((StringType) fromType).unbound() || ((StringType) toType).unbound()) {\n+                    return StringType.INSTANCE;\n+                }\n             }\n             return null;\n+        } else {\n+            if (fromType.id() == StringType.ID && toType.id() == StringType.ID) {\n+                var highestLengthLimit = Math.max(\n+                    ((StringType) fromType).lengthLimit(),\n+                    ((StringType) toType).lengthLimit()\n+                );\n+                return StringType.of(highestLengthLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "163939d47fe562748f54131b6ed63eabb853aeff"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 993, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}