{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzU2ODU3", "number": 9769, "title": "Migrate SysOperationsLogTableInfo, SysSummitsTableInfo and SysSnapshotsTableInfo to SystemTable", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-03-17T10:40:56Z", "url": "https://github.com/crate/crate/pull/9769", "merged": true, "mergeCommit": {"oid": "12aa7eb24b75d5f14a86b8c2428241d19e7d934c"}, "closed": true, "closedAt": "2020-03-18T15:12:16Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOgek_gBqjMxMzY3OTgzMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO4TPHgBqjMxNDE3NDMwMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f919c0b8071f4e7f2f0000e77b451ebbde5c60d4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/f919c0b8071f4e7f2f0000e77b451ebbde5c60d4", "committedDate": "2020-03-17T10:39:24Z", "message": " Migrate SysOperationsLogTableInfo to SystemTable"}, "afterCommit": {"oid": "97d07e8b5abf56e0a53ffddffbd7132238935c6a", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/97d07e8b5abf56e0a53ffddffbd7132238935c6a", "committedDate": "2020-03-17T10:51:01Z", "message": " Migrate SysOperationsLogTableInfo to SystemTable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97d07e8b5abf56e0a53ffddffbd7132238935c6a", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/97d07e8b5abf56e0a53ffddffbd7132238935c6a", "committedDate": "2020-03-17T10:51:01Z", "message": " Migrate SysOperationsLogTableInfo to SystemTable"}, "afterCommit": {"oid": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/2f63afb0ca19fb52e7604bcf2c4d685479b709b5", "committedDate": "2020-03-17T11:35:03Z", "message": " Migrate SysOperationsLogTableInfo to SystemTable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDA2NzIz", "url": "https://github.com/crate/crate/pull/9769#pullrequestreview-376006723", "createdAt": "2020-03-17T12:56:57Z", "commit": {"oid": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1Njo1OFrOF3a_Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMjo1NzoxM1rOF3a_zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODE5NQ==", "bodyText": "The SystemTable defaults to routing on a single node, so you need to add an override.", "url": "https://github.com/crate/crate/pull/9769#discussion_r393658195", "createdAt": "2020-03-17T12:56:58Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/sys/SysOperationsLogTableInfo.java", "diffHunk": "@@ -21,65 +21,26 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.operation.OperationContextLog;\n-import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n-\n-import java.util.Map;\n-\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n+import io.crate.metadata.SystemTable;\n import static io.crate.types.DataTypes.LONG;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysOperationsLogTableInfo extends StaticTableInfo<OperationContextLog> {\n+public class SysOperationsLogTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"operations_log\");\n \n-    public static Map<ColumnIdent, RowCollectExpressionFactory<OperationContextLog>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<OperationContextLog> columnRegistrar() {\n-        return new ColumnRegistrar<OperationContextLog>(IDENT, RowGranularity.DOC)\n-            .register(\"id\", STRING, () -> forFunction(l -> String.valueOf(l.id())))\n-            .register(\"job_id\", STRING, () -> forFunction(l -> l.jobId().toString()))\n-            .register(\"name\", STRING, () -> forFunction(OperationContextLog::name))\n-            .register(\"started\", TIMESTAMPZ, () -> forFunction(OperationContextLog::started))\n-            .register(\"ended\", TIMESTAMPZ, () -> forFunction(OperationContextLog::ended))\n-            .register(\"used_bytes\", LONG, () -> forFunction(OperationContextLog::usedBytes))\n-            .register(\"error\", STRING, () -> forFunction(OperationContextLog::errorMessage));\n-    }\n-\n-    SysOperationsLogTableInfo() {\n-        super(IDENT, columnRegistrar());\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return RowGranularity.DOC;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n-\n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n-        return Routing.forTableOnAllNodes(IDENT, clusterState.getNodes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1ODMxNw==", "bodyText": "This custom routing behavior needs to be preserved.", "url": "https://github.com/crate/crate/pull/9769#discussion_r393658317", "createdAt": "2020-03-17T12:57:13Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java", "diffHunk": "@@ -21,73 +21,29 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.snapshot.SysSnapshot;\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n-import io.crate.metadata.Routing;\n-import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n-\n-import java.util.Map;\n-\n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n+import io.crate.metadata.SystemTable;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysSnapshotsTableInfo extends StaticTableInfo<SysSnapshot> {\n+public class SysSnapshotsTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"snapshots\");\n-    private static final RowGranularity GRANULARITY = RowGranularity.DOC;\n-\n-    public static class Columns {\n-        public static final ColumnIdent NAME = new ColumnIdent(\"name\");\n-    }\n-\n-    static Map<ColumnIdent, RowCollectExpressionFactory<SysSnapshot>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<SysSnapshot> columnRegistrar() {\n-        return new ColumnRegistrar<SysSnapshot>(IDENT, GRANULARITY)\n-          .register(\"name\", STRING, () -> forFunction(SysSnapshot::name))\n-          .register(\"repository\", STRING, () -> forFunction(SysSnapshot::repository))\n-          .register(\"concrete_indices\", STRING_ARRAY, () -> forFunction(SysSnapshot::concreteIndices))\n-          .register(\"started\", TIMESTAMPZ, () -> forFunction(SysSnapshot::started))\n-          .register(\"finished\", TIMESTAMPZ, () -> forFunction(SysSnapshot::finished))\n-          .register(\"version\", STRING, () -> forFunction(SysSnapshot::version))\n-          .register(\"state\", STRING, () -> forFunction(SysSnapshot::state))\n-          .register(\"failures\", STRING_ARRAY, () -> forFunction(SysSnapshot::failures));\n-    }\n-\n-    SysSnapshotsTableInfo() {\n-        super(IDENT, columnRegistrar(), \"name\",\"repository\");\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return GRANULARITY;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n \n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n-        // route to random master or data node,\n-        // because RepositoriesService (and so snapshots info) is only available there\n-        return routingProvider.forRandomMasterOrDataNode(IDENT, clusterState.getNodes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f63afb0ca19fb52e7604bcf2c4d685479b709b5"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTE2MjYy", "url": "https://github.com/crate/crate/pull/9769#pullrequestreview-376116262", "createdAt": "2020-03-17T14:58:50Z", "commit": {"oid": "76e1a4fd5afbf4971790ae3ed1f7c8b4e241bcc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1ODo1MFrOF3gJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1ODo1MFrOF3gJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0MjYyOQ==", "bodyText": "I think we should extend the SystemTable getRouting method and add the routingProvider argument.\nThe routingProvider is initialized once per plan/query with the same seed, so that we have a stable routing result within one query.\nMay not matter much for system tables, but I think otherwise the difference in behavior could be confusing.", "url": "https://github.com/crate/crate/pull/9769#discussion_r393742629", "createdAt": "2020-03-17T14:58:50Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/sys/SysSnapshotsTableInfo.java", "diffHunk": "@@ -21,73 +21,43 @@\n \n package io.crate.metadata.sys;\n \n-import io.crate.action.sql.SessionContext;\n-import io.crate.analyze.WhereClause;\n import io.crate.expression.reference.sys.snapshot.SysSnapshot;\n import io.crate.metadata.ColumnIdent;\n import io.crate.metadata.RelationName;\n import io.crate.metadata.Routing;\n import io.crate.metadata.RoutingProvider;\n-import io.crate.metadata.RowGranularity;\n-import io.crate.metadata.expressions.RowCollectExpressionFactory;\n-import io.crate.metadata.table.ColumnRegistrar;\n-import io.crate.metadata.table.StaticTableInfo;\n-import org.elasticsearch.cluster.ClusterState;\n+import io.crate.metadata.SystemTable;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n \n-import java.util.Map;\n+import java.util.List;\n+import java.util.Random;\n \n-import static io.crate.execution.engine.collect.NestableCollectExpression.forFunction;\n import static io.crate.types.DataTypes.STRING;\n import static io.crate.types.DataTypes.STRING_ARRAY;\n import static io.crate.types.DataTypes.TIMESTAMPZ;\n \n-public class SysSnapshotsTableInfo extends StaticTableInfo<SysSnapshot> {\n+public class SysSnapshotsTableInfo {\n \n     public static final RelationName IDENT = new RelationName(SysSchemaInfo.NAME, \"snapshots\");\n-    private static final RowGranularity GRANULARITY = RowGranularity.DOC;\n \n-    public static class Columns {\n-        public static final ColumnIdent NAME = new ColumnIdent(\"name\");\n+    static SystemTable<SysSnapshot> create() {\n+        return SystemTable.<SysSnapshot>builder()\n+            .add(\"name\", STRING, SysSnapshot::name)\n+            .add(\"repository\", STRING, SysSnapshot::repository)\n+            .add(\"concrete_indices\", STRING_ARRAY, SysSnapshot::concreteIndices)\n+            .add(\"started\", TIMESTAMPZ, SysSnapshot::started)\n+            .add(\"finished\", TIMESTAMPZ, SysSnapshot::finished)\n+            .add(\"version\", STRING, SysSnapshot::version)\n+            .add(\"state\", STRING, SysSnapshot::state)\n+            .add(\"failures\", STRING_ARRAY, SysSnapshot::failures)\n+            .setPrimaryKeys(new ColumnIdent(\"name\"), new ColumnIdent(\"repository\"))\n+            .withRouting(SysSnapshotsTableInfo::getRouting)\n+            .build(IDENT);\n     }\n \n-    static Map<ColumnIdent, RowCollectExpressionFactory<SysSnapshot>> expressions() {\n-        return columnRegistrar().expressions();\n-    }\n-\n-    private static ColumnRegistrar<SysSnapshot> columnRegistrar() {\n-        return new ColumnRegistrar<SysSnapshot>(IDENT, GRANULARITY)\n-          .register(\"name\", STRING, () -> forFunction(SysSnapshot::name))\n-          .register(\"repository\", STRING, () -> forFunction(SysSnapshot::repository))\n-          .register(\"concrete_indices\", STRING_ARRAY, () -> forFunction(SysSnapshot::concreteIndices))\n-          .register(\"started\", TIMESTAMPZ, () -> forFunction(SysSnapshot::started))\n-          .register(\"finished\", TIMESTAMPZ, () -> forFunction(SysSnapshot::finished))\n-          .register(\"version\", STRING, () -> forFunction(SysSnapshot::version))\n-          .register(\"state\", STRING, () -> forFunction(SysSnapshot::state))\n-          .register(\"failures\", STRING_ARRAY, () -> forFunction(SysSnapshot::failures));\n-    }\n-\n-    SysSnapshotsTableInfo() {\n-        super(IDENT, columnRegistrar(), \"name\",\"repository\");\n-    }\n-\n-    @Override\n-    public RowGranularity rowGranularity() {\n-        return GRANULARITY;\n-    }\n-\n-    @Override\n-    public RelationName ident() {\n-        return IDENT;\n-    }\n-\n-    @Override\n-    public Routing getRouting(ClusterState clusterState,\n-                              RoutingProvider routingProvider,\n-                              WhereClause whereClause,\n-                              RoutingProvider.ShardSelection shardSelection,\n-                              SessionContext sessionContext) {\n+    private static Routing getRouting(DiscoveryNodes nodes) {\n         // route to random master or data node,\n         // because RepositoriesService (and so snapshots info) is only available there\n-        return routingProvider.forRandomMasterOrDataNode(IDENT, clusterState.getNodes());\n+        return new RoutingProvider(new Random().nextInt(), List.of()).forRandomMasterOrDataNode(IDENT, nodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e1a4fd5afbf4971790ae3ed1f7c8b4e241bcc5"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTk5MTA1", "url": "https://github.com/crate/crate/pull/9769#pullrequestreview-376199105", "createdAt": "2020-03-17T16:26:19Z", "commit": {"oid": "222f38099684704531e989cdf4d480d5aa1bfedc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoyNjoyMFrOF3kGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoyNjoyMFrOF3kGVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNzQ0Nw==", "bodyText": "I'm wondering if we should remove this overload and force all users of SystemTable to use the other variant.\nBy keeping this, we have another indirection, due to the (node, routingProvider) -> getRouting.apply(node).", "url": "https://github.com/crate/crate/pull/9769#discussion_r393807447", "createdAt": "2020-03-17T16:26:20Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "diffHunk": "@@ -171,9 +172,14 @@ public String toString() {\n \n         private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n         private List<ColumnIdent> primaryKeys = List.of();\n-        private Function<DiscoveryNodes, Routing> getRouting;\n+        private BiFunction<DiscoveryNodes, RoutingProvider, Routing> getRouting;\n \n         public RelationBuilder<T> withRouting(Function<DiscoveryNodes, Routing> getRouting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f38099684704531e989cdf4d480d5aa1bfedc"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bccda1af0e6f413c9a1d4720d8a1869c910c494", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/8bccda1af0e6f413c9a1d4720d8a1869c910c494", "committedDate": "2020-03-17T17:30:53Z", "message": "Remove overloading on routing in SystemTable"}, "afterCommit": {"oid": "c503158f2b52f3ee4e89275157fd324ee3e73261", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c503158f2b52f3ee4e89275157fd324ee3e73261", "committedDate": "2020-03-18T14:33:05Z", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ca651eca60ce983cfc889757dfed96ef6d6266", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/22ca651eca60ce983cfc889757dfed96ef6d6266", "committedDate": "2020-03-18T14:36:19Z", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c503158f2b52f3ee4e89275157fd324ee3e73261", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c503158f2b52f3ee4e89275157fd324ee3e73261", "committedDate": "2020-03-18T14:33:05Z", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable approach"}, "afterCommit": {"oid": "22ca651eca60ce983cfc889757dfed96ef6d6266", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/22ca651eca60ce983cfc889757dfed96ef6d6266", "committedDate": "2020-03-18T14:36:19Z", "message": "Migrate tables snapshots, summits and operations_log to new SystemTable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3415, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}