{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODQ0MTE0", "number": 10286, "title": "Add pg_function_is_visible scalar required to run conn.getMetaData().getFunctions", "bodyText": "The function's OID is for internal use. In the case of functions, as they can be overloaded, we need to discriminate not only by schema/name but also by signature.\nSystem functions are registered on startup, it is appropriate to calculate their oid/signature mapping when the various modules do register them. For symmetry, user defined options are also oid/signature mapped, but this is done by monitoring the cluster registration/deregistration flow.\nSpecifically, the query executed to retrieve function information:\nSELECT current_database() AS FUNCTION_CAT, \n       n.nspname AS FUNCTION_SCHEM, \n       p.proname AS FUNCTION_NAME,  \n       d.description AS REMARKS,  \n       CASE    \n           WHEN (format_type(p.prorettype, null) = 'unknown') THEN 0   \n           WHEN (substring(pg_get_function_result(p.oid) from 0 for 6) = 'TABLE') OR (substring(pg_get_function_result(p.oid) from 0 for 6) = 'SETOF') THEN 2   \n           ELSE 1 \n       END AS FUNCTION_TYPE,  \n       p.proname || '_' || p.oid AS SPECIFIC_NAME \nFROM pg_catalog.pg_proc p INNER JOIN pg_catalog.pg_namespace n ON p.pronamespace=n.oid LEFT JOIN pg_catalog.pg_description d ON p.oid=d.objoid \nWHERE pg_function_is_visible(p.oid) \nORDER BY FUNCTION_SCHEM, FUNCTION_NAME, p.oid::text", "createdAt": "2020-07-28T14:22:07Z", "url": "https://github.com/crate/crate/pull/10286", "merged": true, "mergeCommit": {"oid": "3f2711710f6f3f32242e80fb4b020c783a3db57a"}, "closed": true, "closedAt": "2020-08-25T16:29:15Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5nOk1gFqTQ1NzMyNjIyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCZWc5ABqjM2OTA4MTA2ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzI2MjI1", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-457326225", "createdAt": "2020-07-29T08:57:22Z", "commit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1NzoyMlrOG4vLEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1ODo1NVrOG4vPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NjMyMA==", "bodyText": "why you fetch only one signature, a function can be overloaded and can have more than one signature.", "url": "https://github.com/crate/crate/pull/10286#discussion_r462146320", "createdAt": "2020-07-29T08:57:22Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -50,9 +59,41 @@ public void register(Signature signature, BiFunction<Signature, Signature, Funct\n             throw new IllegalStateException(\n                 \"A function already exists for signature = \" + signature);\n         }\n+        signatureByOid.put(signature.getOid(), signature);\n+        signatureByName.put(signature.getName(), signature);\n+        schemas.add(signature.getName().schema());\n         functions.add(new FunctionProvider(signature, factory));\n     }\n \n+    public Signature getFunctionSignatureByOid(Integer funcOid) {\n+        if (funcOid == null) {\n+            new IllegalArgumentException(\"function oid cannot be null\");\n+        }\n+        return signatureByOid.get(funcOid);\n+    }\n+\n+    public Signature getFunctionSignaturesByName(String funcName) {\n+        if (funcName == null) {\n+            new IllegalArgumentException(\"function name cannot be null\");\n+        }\n+        int dot = funcName.indexOf(\".\");\n+        if (dot != -1) {\n+            String [] parts = funcName.split(\"\\\\.\");\n+            if (parts.length != 2) {\n+                new IllegalArgumentException(String.format(\n+                    Locale.ENGLISH, \"unrecognised function name format\", funcName));\n+            }\n+            return signatureByName.get(new FunctionName(parts[0], parts[1]));\n+        }\n+        Optional<Signature> maybeSignature = schemas // [null, pg_catalog ...]\n+            .stream()\n+            .map(sch -> new FunctionName(sch, funcName))\n+            .map(signatureByName::get)\n+            .filter(Objects::nonNull)\n+            .findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NzM5Nw==", "bodyText": "would this still work fine with UDF functions that can be added and removed?", "url": "https://github.com/crate/crate/pull/10286#discussion_r462147397", "createdAt": "2020-07-29T08:58:55Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -32,14 +32,23 @@\n \n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n import java.util.function.BiFunction;\n \n public abstract class AbstractFunctionModule<T extends FunctionImplementation> extends AbstractModule {\n \n     private HashMap<FunctionName, List<FunctionProvider>> functionImplementations = new HashMap<>();\n     private MapBinder<FunctionName, List<FunctionProvider>> implementationsBinder;\n+    private Map<Integer, Signature> signatureByOid = new HashMap<>();\n+    private Map<FunctionName, Signature> signatureByName = new HashMap<>();\n+    private Set<String> schemas = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MzMxODI0", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-457331824", "createdAt": "2020-07-29T09:04:12Z", "commit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1272c8fa94a898bba39447fae15ff1e0905351d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c1272c8fa94a898bba39447fae15ff1e0905351d", "committedDate": "2020-07-28T14:15:46Z", "message": "WIP: As a template to initiate discussion on approach. Static registration is lazy though."}, "afterCommit": {"oid": "c3cff9cb74eb7c151fb7328a14f4380d8a410bde", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c3cff9cb74eb7c151fb7328a14f4380d8a410bde", "committedDate": "2020-07-31T08:14:28Z", "message": "Save state, but this will not build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3cff9cb74eb7c151fb7328a14f4380d8a410bde", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c3cff9cb74eb7c151fb7328a14f4380d8a410bde", "committedDate": "2020-07-31T08:14:28Z", "message": "Save state, but this will not build"}, "afterCommit": {"oid": "bcfffe24d92322e19efc0aeb1ef53dd00a242503", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/bcfffe24d92322e19efc0aeb1ef53dd00a242503", "committedDate": "2020-07-31T08:35:11Z", "message": "Reduce to function PgFunctionIsVisible which is a simpler case"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ae67be901414c7916f2997eeb325e1674485369", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/2ae67be901414c7916f2997eeb325e1674485369", "committedDate": "2020-07-31T11:53:33Z", "message": "Remove debris, still missing tests and rename the function"}, "afterCommit": {"oid": "eb0388366c3afdb423593a293dba0526cef7239c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/eb0388366c3afdb423593a293dba0526cef7239c", "committedDate": "2020-08-03T11:37:33Z", "message": "Regproc represents many OIDs, for functions these are built based on signature"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9debdc483087bba0a20b57f35d68b6d3540e6532", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/9debdc483087bba0a20b57f35d68b6d3540e6532", "committedDate": "2020-08-03T12:29:52Z", "message": "Style"}, "afterCommit": {"oid": "330b405039dcfa03fd175e16d521a63d209c91b1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/330b405039dcfa03fd175e16d521a63d209c91b1", "committedDate": "2020-08-03T14:48:22Z", "message": "Add support for user defined functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1c77780f815efa913f01cb0a919f78a469c5a2c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a1c77780f815efa913f01cb0a919f78a469c5a2c", "committedDate": "2020-08-03T14:53:18Z", "message": "Undo formatting"}, "afterCommit": {"oid": "ce45641a129936eea96fea373ce3034d0ed90ab8", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ce45641a129936eea96fea373ce3034d0ed90ab8", "committedDate": "2020-08-03T16:56:37Z", "message": "Add support for user defined functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce45641a129936eea96fea373ce3034d0ed90ab8", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ce45641a129936eea96fea373ce3034d0ed90ab8", "committedDate": "2020-08-03T16:56:37Z", "message": "Add support for user defined functions"}, "afterCommit": {"oid": "4e0398ccdc1076080abbf8ee82040d348a336826", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4e0398ccdc1076080abbf8ee82040d348a336826", "committedDate": "2020-08-04T08:47:09Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash on its schema, name, arg types list.\nSystem functions are declared on startup, as the various modules are registered,\nregistering in turn the system functions.\nUser defined functions, UDF, are registered/deregistered dinamically with SQL\nstatements CREATE/DROP FUNCTION.\nUsers can 'select function pg_function_is_visible(<oid>)' to check that the\nfunction with <oid> OID is visible.\nAll system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e0398ccdc1076080abbf8ee82040d348a336826", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4e0398ccdc1076080abbf8ee82040d348a336826", "committedDate": "2020-08-04T08:47:09Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash on its schema, name, arg types list.\nSystem functions are declared on startup, as the various modules are registered,\nregistering in turn the system functions.\nUser defined functions, UDF, are registered/deregistered dinamically with SQL\nstatements CREATE/DROP FUNCTION.\nUsers can 'select function pg_function_is_visible(<oid>)' to check that the\nfunction with <oid> OID is visible.\nAll system and UDF functions are visible."}, "afterCommit": {"oid": "2d9c070ccbd5555183f3e5441c35998470ad53bd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/2d9c070ccbd5555183f3e5441c35998470ad53bd", "committedDate": "2020-08-04T09:28:30Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzcxNjc5", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-461371679", "createdAt": "2020-08-05T06:24:21Z", "commit": {"oid": "2d9c070ccbd5555183f3e5441c35998470ad53bd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNDoyMVrOG773Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjoyNDoyMVrOG773Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5OTk0Mg==", "bodyText": "Having this as global static kinda defeats the purpose of using guice/injection for the functions.\nI think this should move into Functions. Then the evaluate of a Scalar somehow needs to get access to it, or to a subset / narrower interface.\nI'm also not sure if it is worth to pre-populate a full map given the use case. I suppose pg_function_is_visible won't be called too often, so we could consider doing the lookup and oid calculation on the fly and trade increased memory footprint with a higher compute demand when it is actually used.", "url": "https://github.com/crate/crate/pull/10286#discussion_r465499942", "createdAt": "2020-08-05T06:24:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/AbstractFunctionModule.java", "diffHunk": "@@ -34,10 +38,16 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n \n public abstract class AbstractFunctionModule<T extends FunctionImplementation> extends AbstractModule {\n \n+    private static ConcurrentMap<Integer, Signature> SYSTEM_FUNCTION_SIGNATURES_BY_OID = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9c070ccbd5555183f3e5441c35998470ad53bd"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d9c070ccbd5555183f3e5441c35998470ad53bd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/2d9c070ccbd5555183f3e5441c35998470ad53bd", "committedDate": "2020-08-04T09:28:30Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "57c2ed241cad660186794c6ffc5c3cc14f89f8b4", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/57c2ed241cad660186794c6ffc5c3cc14f89f8b4", "committedDate": "2020-08-05T20:32:06Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57c2ed241cad660186794c6ffc5c3cc14f89f8b4", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/57c2ed241cad660186794c6ffc5c3cc14f89f8b4", "committedDate": "2020-08-05T20:32:06Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "60ccfdb01e7a5531eaffc0b26d6aa5ba747e201a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/60ccfdb01e7a5531eaffc0b26d6aa5ba747e201a", "committedDate": "2020-08-05T20:34:30Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60ccfdb01e7a5531eaffc0b26d6aa5ba747e201a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/60ccfdb01e7a5531eaffc0b26d6aa5ba747e201a", "committedDate": "2020-08-05T20:34:30Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "8fb82117f064893388812d2388fc86e25e918b4b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8fb82117f064893388812d2388fc86e25e918b4b", "committedDate": "2020-08-05T20:41:18Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fb82117f064893388812d2388fc86e25e918b4b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8fb82117f064893388812d2388fc86e25e918b4b", "committedDate": "2020-08-05T20:41:18Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "62fd3105496cf13c6e4a658c61bad6e0e57e2894", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/62fd3105496cf13c6e4a658c61bad6e0e57e2894", "committedDate": "2020-08-05T20:47:04Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62fd3105496cf13c6e4a658c61bad6e0e57e2894", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/62fd3105496cf13c6e4a658c61bad6e0e57e2894", "committedDate": "2020-08-05T20:47:04Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "7ca5e6b70a9e355d3e474d63b8347909beff3053", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/7ca5e6b70a9e355d3e474d63b8347909beff3053", "committedDate": "2020-08-05T20:52:45Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ca5e6b70a9e355d3e474d63b8347909beff3053", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/7ca5e6b70a9e355d3e474d63b8347909beff3053", "committedDate": "2020-08-05T20:52:45Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "ad8fd54149d28df29568e9353572c871186560d9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ad8fd54149d28df29568e9353572c871186560d9", "committedDate": "2020-08-05T21:58:08Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad8fd54149d28df29568e9353572c871186560d9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ad8fd54149d28df29568e9353572c871186560d9", "committedDate": "2020-08-05T21:58:08Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "53db3ee2a26c8ce76bc8e1ef7460b92906dad881", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/53db3ee2a26c8ce76bc8e1ef7460b92906dad881", "committedDate": "2020-08-06T10:41:07Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53db3ee2a26c8ce76bc8e1ef7460b92906dad881", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/53db3ee2a26c8ce76bc8e1ef7460b92906dad881", "committedDate": "2020-08-06T10:41:07Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "31670a248bf48bf0f64e84ae47b391580ba0bbd9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/31670a248bf48bf0f64e84ae47b391580ba0bbd9", "committedDate": "2020-08-06T10:49:46Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31670a248bf48bf0f64e84ae47b391580ba0bbd9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/31670a248bf48bf0f64e84ae47b391580ba0bbd9", "committedDate": "2020-08-06T10:49:46Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "6fccbab92f50ba0f1100069988615bdd87c86490", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6fccbab92f50ba0f1100069988615bdd87c86490", "committedDate": "2020-08-06T11:20:46Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fccbab92f50ba0f1100069988615bdd87c86490", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/6fccbab92f50ba0f1100069988615bdd87c86490", "committedDate": "2020-08-06T11:20:46Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "d81dfd547e0a68f0a3042e9b920537d280edb640", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d81dfd547e0a68f0a3042e9b920537d280edb640", "committedDate": "2020-08-06T11:28:51Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d81dfd547e0a68f0a3042e9b920537d280edb640", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d81dfd547e0a68f0a3042e9b920537d280edb640", "committedDate": "2020-08-06T11:28:51Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "5bd712847ac4cd243fe69a206c1f715742fa80cd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5bd712847ac4cd243fe69a206c1f715742fa80cd", "committedDate": "2020-08-06T11:42:11Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bd712847ac4cd243fe69a206c1f715742fa80cd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5bd712847ac4cd243fe69a206c1f715742fa80cd", "committedDate": "2020-08-06T11:42:11Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "31a96487c4e7cf21aea12429b69aa170fe6da5d9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/31a96487c4e7cf21aea12429b69aa170fe6da5d9", "committedDate": "2020-08-06T11:48:20Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "31a96487c4e7cf21aea12429b69aa170fe6da5d9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/31a96487c4e7cf21aea12429b69aa170fe6da5d9", "committedDate": "2020-08-06T11:48:20Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "c868b1aed114a8e2a425b02427caa1b84bb8d9bf", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c868b1aed114a8e2a425b02427caa1b84bb8d9bf", "committedDate": "2020-08-06T11:53:50Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c868b1aed114a8e2a425b02427caa1b84bb8d9bf", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c868b1aed114a8e2a425b02427caa1b84bb8d9bf", "committedDate": "2020-08-06T11:53:50Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dc688cac79890aa42e2e3364bf47c1e384a207d1", "committedDate": "2020-08-06T12:11:02Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDk4MDQz", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-462498043", "createdAt": "2020-08-06T13:05:29Z", "commit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowNToyOVrOG8ymzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowODoyMVrOG8ytaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5Njg3Nw==", "bodyText": "The BytesRef creation could be avoided I think. This is probably only doing a utf-16 to utf-8 conversion? Could likely call .getBytes(...) on the String directly to get the bytes.", "url": "https://github.com/crate/crate/pull/10286#discussion_r466396877", "createdAt": "2020-08-06T13:05:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -63,12 +67,37 @@ static int constraintOid(String relationName, String constraintName, String cons\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    public static int functionOid(FunctionName functionName) {\n-        BytesRef b = new BytesRef(Type.PROC.toString() + functionName.schema() + functionName.name());\n+    public static int regprocOid(FunctionName name) {\n+        BytesRef b = new BytesRef(Type.PROC.toString() + name.schema() + name.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5NzAxOQ==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r466397019", "createdAt": "2020-08-06T13:05:40Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -63,12 +67,37 @@ static int constraintOid(String relationName, String constraintName, String cons\n         return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n     }\n \n-    public static int functionOid(FunctionName functionName) {\n-        BytesRef b = new BytesRef(Type.PROC.toString() + functionName.schema() + functionName.name());\n+    public static int regprocOid(FunctionName name) {\n+        BytesRef b = new BytesRef(Type.PROC.toString() + name.schema() + name.name());\n+        return murmurhash3_x86_32(b.bytes, b.offset, b.length, 0);\n+    }\n+\n+    public static int regprocOid(String name) {\n+        return regprocOid(new FunctionName(null, name));\n+    }\n+\n+    public static int functionOid(Signature sig) {\n+        FunctionName name = sig.getName();\n+        BytesRef b = new BytesRef(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5ODU3MQ==", "bodyText": "I'm not sure if the functions fit into the TransactionContext - as the name implies it should contain state that is bound to the lifecycle of a transaction.\nThe Functions have a different lifecycle or scope. Maybe we should instead extend the evaluate method to take the Functions directly - or introduce some kind of NodeContext. Afaik we'll have other functions later that require access to the Schemas\n@kovrus @seut what your take here?", "url": "https://github.com/crate/crate/pull/10286#discussion_r466398571", "createdAt": "2020-08-06T13:08:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/TransactionContext.java", "diffHunk": "@@ -29,20 +29,28 @@\n public interface TransactionContext {\n \n     static TransactionContext of(SessionSettings sessionSettings) {\n-        return new StaticTransactionContext(sessionSettings);\n+        return of(sessionSettings, null);\n+    }\n+\n+    static TransactionContext of(SessionSettings sessionSettings, Functions functions) {\n+        return new StaticTransactionContext(sessionSettings, functions);\n     }\n \n     Instant currentInstant();\n \n     SessionSettings sessionSettings();\n \n+    Functions functions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc688cac79890aa42e2e3364bf47c1e384a207d1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dc688cac79890aa42e2e3364bf47c1e384a207d1", "committedDate": "2020-08-06T12:11:02Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "04adcad744952dfcf0d5e74e9d5aecdeb4bf0aa9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/04adcad744952dfcf0d5e74e9d5aecdeb4bf0aa9", "committedDate": "2020-08-06T17:54:27Z", "message": "Remove use of BytesRef and improve the code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb7ab043310ac05e726778a719ff0b96f4c29dfe", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/eb7ab043310ac05e726778a719ff0b96f4c29dfe", "committedDate": "2020-08-06T18:29:43Z", "message": "Fixup"}, "afterCommit": {"oid": "ec03b81092717adf088a81c3b7b72658938c4087", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ec03b81092717adf088a81c3b7b72658938c4087", "committedDate": "2020-08-06T18:47:07Z", "message": "Remove use of BytesRef and improve the code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec03b81092717adf088a81c3b7b72658938c4087", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ec03b81092717adf088a81c3b7b72658938c4087", "committedDate": "2020-08-06T18:47:07Z", "message": "Remove use of BytesRef and improve the code"}, "afterCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3d228aa4123a83aeafe9f3d2b47e85e570cb9880", "committedDate": "2020-08-17T20:28:55Z", "message": "WIP: Following backwards from adding NodeContext to Scalar evaluate,evaluateIfLiterals, and FunctionImplementation normalizeSymbol"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTQ4MzU3", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-469148357", "createdAt": "2020-08-18T09:23:53Z", "commit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMzo1M1rOHCLHaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyODoxNVrOHCLRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTMyMQ==", "bodyText": "I think the NodeContext could be created eagerly in the constructor - it should be valid over the life-time of a node.\nWe could even consider making it a (injected?) singleton.\nThis likely affects a lot of the other choices in the diff as well.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472041321", "createdAt": "2020-08-18T09:23:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/action/sql/Session.java", "diffHunk": "@@ -170,6 +171,7 @@ public void quickExec(String statement, ResultReceiver<?> resultReceiver, Row pa\n      */\n     public void quickExec(String statement, Function<String, Statement> parse, ResultReceiver<?> resultReceiver, Row params) {\n         CoordinatorTxnCtx txnCtx = new CoordinatorTxnCtx(sessionContext);\n+        NodeContext nodeCtx = new NodeContext(planner.functions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MzkxNQ==", "bodyText": "Would be cool if we could avoid this. Using a class as both (not encapsulated) data carrier and as a component that provides some other fucntionality is a sign that it breaks separation of concerns.\nI get that this may be convenient and \"easier\" - as less changes necessary and less to type, but it may make changes more difficult down the road.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472043915", "createdAt": "2020-08-18T09:28:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/Analyzer.java", "diffHunk": "@@ -188,6 +191,10 @@ public Analyzer(Schemas schemas,\n         this.resetStatementAnalyzer = new ResetStatementAnalyzer(functions);\n     }\n \n+    public NodeContext nodeContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NDgzODk0", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-469483894", "createdAt": "2020-08-18T13:59:32Z", "commit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1OTozMlrOHCV9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzo1OTozMlrOHCV9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxODg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            name and argument type list.\n          \n          \n            \n            name, and argument type list.", "url": "https://github.com/crate/crate/pull/10286#discussion_r472218881", "createdAt": "2020-08-18T13:59:32Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2642,6 +2642,34 @@ Example:\n     +---------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_function_is_visible:\n+\n+``pg_function_is_visible``\n+--------------------------\n+\n+The function ``pg_function_is_visible`` returns true for OIDs that refer to a system\n+or a user defined function. A function's OID is calculated as a hash over its schema,\n+name and argument type list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NDg0MjY1", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-469484265", "createdAt": "2020-08-18T13:59:54Z", "commit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d228aa4123a83aeafe9f3d2b47e85e570cb9880", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3d228aa4123a83aeafe9f3d2b47e85e570cb9880", "committedDate": "2020-08-17T20:28:55Z", "message": "WIP: Following backwards from adding NodeContext to Scalar evaluate,evaluateIfLiterals, and FunctionImplementation normalizeSymbol"}, "afterCommit": {"oid": "80d56b3d2eac592670fc098d85401a379f395735", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/80d56b3d2eac592670fc098d85401a379f395735", "committedDate": "2020-08-19T10:32:03Z", "message": "Make NodeContext an injected singleton and replace uses of Function with it"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd481538648b7a3fac3d451ce7b23fece5af0b98", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dd481538648b7a3fac3d451ce7b23fece5af0b98", "committedDate": "2020-08-19T10:36:12Z", "message": "Nomi's suggestion"}, "afterCommit": {"oid": "88b6d40cc196e9ae4f317df8efb569b83cbb3234", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/88b6d40cc196e9ae4f317df8efb569b83cbb3234", "committedDate": "2020-08-19T12:04:31Z", "message": "Nomi's suggestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88b6d40cc196e9ae4f317df8efb569b83cbb3234", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/88b6d40cc196e9ae4f317df8efb569b83cbb3234", "committedDate": "2020-08-19T12:04:31Z", "message": "Nomi's suggestion"}, "afterCommit": {"oid": "63642e17e6d59b049f433ac2fb7fa0fdf3f6d4fa", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/63642e17e6d59b049f433ac2fb7fa0fdf3f6d4fa", "committedDate": "2020-08-19T14:47:27Z", "message": "Nomi's suggestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63642e17e6d59b049f433ac2fb7fa0fdf3f6d4fa", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/63642e17e6d59b049f433ac2fb7fa0fdf3f6d4fa", "committedDate": "2020-08-19T14:47:27Z", "message": "Nomi's suggestion"}, "afterCommit": {"oid": "a1f85c308870e4c21219e80ca981d578b721a1fe", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a1f85c308870e4c21219e80ca981d578b721a1fe", "committedDate": "2020-08-19T15:07:20Z", "message": "Nomi's suggestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1f85c308870e4c21219e80ca981d578b721a1fe", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a1f85c308870e4c21219e80ca981d578b721a1fe", "committedDate": "2020-08-19T15:07:20Z", "message": "Nomi's suggestion"}, "afterCommit": {"oid": "36ee8c88a949accbbd4cd352376474268c7716e3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/36ee8c88a949accbbd4cd352376474268c7716e3", "committedDate": "2020-08-19T15:54:23Z", "message": "Nomi's suggestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36ee8c88a949accbbd4cd352376474268c7716e3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/36ee8c88a949accbbd4cd352376474268c7716e3", "committedDate": "2020-08-19T15:54:23Z", "message": "Nomi's suggestion"}, "afterCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3abebcb8e13fa1b0ba3acc2e770927b08cd3408a", "committedDate": "2020-08-19T17:50:10Z", "message": "Nomi's suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMzAzNzQx", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-472303741", "createdAt": "2020-08-21T08:30:44Z", "commit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODozMDo0NFrOHEig-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwODozMTo0MVrOHEikIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMTg1MQ==", "bodyText": "Couldn't the builder construct the NodeContext itself, similar how it created the Functions itself before?\nWould simplify all the call-sites which use it.", "url": "https://github.com/crate/crate/pull/10286#discussion_r474521851", "createdAt": "2020-08-21T08:30:44Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/testing/SQLExecutor.java", "diffHunk": "@@ -228,6 +227,7 @@ public PlannerContext getPlannerContext(ClusterState clusterState, Random random\n         private SessionSettingRegistry sessionSettingRegistry = new SessionSettingRegistry(Set.of(loadedRules));\n \n         private Builder(ClusterService clusterService,\n+                        NodeContext nodeCtx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDUyMjY1OA==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r474522658", "createdAt": "2020-08-21T08:31:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/testing/SqlExpressions.java", "diffHunk": "@@ -64,54 +54,40 @@\n \n     private final ExpressionAnalyzer expressionAnalyzer;\n     private final ExpressionAnalysisContext expressionAnalysisCtx;\n-    private final Injector injector;\n     private final CoordinatorTxnCtx coordinatorTxnCtx;\n     private final EvaluatingNormalizer normalizer;\n-    private final Functions functions;\n+    public final NodeContext nodeCtx;\n \n-    public SqlExpressions(Map<RelationName, AnalyzedRelation> sources) {\n-        this(sources, null, User.CRATE_USER);\n+    public SqlExpressions(Map<RelationName, AnalyzedRelation> sources, NodeContext nodeCtx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3abebcb8e13fa1b0ba3acc2e770927b08cd3408a"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fa1d01bb3666a82bcdb4d0771a41da789fd725b", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5fa1d01bb3666a82bcdb4d0771a41da789fd725b", "committedDate": "2020-08-21T13:29:00Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}, "afterCommit": {"oid": "ae364aba6c5021f0ee5f2b8d75c0f5f10931f49c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ae364aba6c5021f0ee5f2b8d75c0f5f10931f49c", "committedDate": "2020-08-21T13:39:53Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae364aba6c5021f0ee5f2b8d75c0f5f10931f49c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ae364aba6c5021f0ee5f2b8d75c0f5f10931f49c", "committedDate": "2020-08-21T13:39:53Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}, "afterCommit": {"oid": "28cb2daf36de0717f293f7930da9aa747685d55d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/28cb2daf36de0717f293f7930da9aa747685d55d", "committedDate": "2020-08-21T13:55:48Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28cb2daf36de0717f293f7930da9aa747685d55d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/28cb2daf36de0717f293f7930da9aa747685d55d", "committedDate": "2020-08-21T13:55:48Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}, "afterCommit": {"oid": "50faf851f11e9876d9f8dd57be51872502b49dd2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/50faf851f11e9876d9f8dd57be51872502b49dd2", "committedDate": "2020-08-22T18:57:04Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50faf851f11e9876d9f8dd57be51872502b49dd2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/50faf851f11e9876d9f8dd57be51872502b49dd2", "committedDate": "2020-08-22T18:57:04Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}, "afterCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fb34f88cb7221130cbd44299e9e755bba7047fc4", "committedDate": "2020-08-25T08:36:37Z", "message": "Make QueryTester, SqlExecutor and SqlExpressions produce their own NodeContext"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Mjc4NDg5", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-474278489", "createdAt": "2020-08-25T08:59:05Z", "commit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODo1OTowNVrOHGOf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxNjozN1rOHGPQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5MTAzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or a user defined function. A function's OID is calculated as a hash over its schema,\n          \n          \n            \n            name, and argument type list.\n          \n          \n            \n            or a user defined function.\n          \n      \n    \n    \n  \n\nWould omit this as it's implementation detail. Instead it could tell users how to get the oid of a function.", "url": "https://github.com/crate/crate/pull/10286#discussion_r476291036", "createdAt": "2020-08-25T08:59:05Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -2642,6 +2642,34 @@ Example:\n     +---------------+\n     SELECT 1 row in set (... sec)\n \n+.. _pg_function_is_visible:\n+\n+``pg_function_is_visible``\n+--------------------------\n+\n+The function ``pg_function_is_visible`` returns true for OIDs that refer to a system\n+or a user defined function. A function's OID is calculated as a hash over its schema,\n+name, and argument type list.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5NzExNA==", "bodyText": "The nodeCtx should be used here instead of passing null", "url": "https://github.com/crate/crate/pull/10286#discussion_r476297114", "createdAt": "2020-08-25T09:05:51Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/sources/TableFunctionCollectSource.java", "diffHunk": "@@ -87,7 +87,7 @@ public TableFunctionCollectSource(Functions functions) {\n             topLevelInputs.add(ctx.add(symbol));\n         }\n \n-        Iterable<Row> result = functionImplementation.evaluate(txnCtx, inputs.toArray(new Input[0]));\n+        Iterable<Row> result = functionImplementation.evaluate(txnCtx, null, inputs.toArray(new Input[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI5Nzg3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return Literal.of(evaluate(txnCtx, null, (Input) left, (Input) right));\n          \n          \n            \n                        return Literal.of(evaluate(txnCtx, nodeCtx, (Input) left, (Input) right));", "url": "https://github.com/crate/crate/pull/10286#discussion_r476297876", "createdAt": "2020-08-25T09:07:08Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/operator/AndOperator.java", "diffHunk": "@@ -70,15 +71,15 @@ public Signature boundSignature() {\n     }\n \n     @Override\n-    public Symbol normalizeSymbol(Function function, TransactionContext txnCtx) {\n+    public Symbol normalizeSymbol(Function function, TransactionContext txnCtx, NodeContext nodeCtx) {\n         assert function != null : \"function must not be null\";\n         assert function.arguments().size() == 2 : \"number of args must be 2\";\n \n         Symbol left = function.arguments().get(0);\n         Symbol right = function.arguments().get(1);\n \n         if (left instanceof Input && right instanceof Input) {\n-            return Literal.of(evaluate(txnCtx, (Input) left, (Input) right));\n+            return Literal.of(evaluate(txnCtx, null, (Input) left, (Input) right));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTA3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                @Nullable", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301074", "createdAt": "2020-08-25T09:12:29Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTE4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {\n          \n          \n            \n                private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, int oid) {", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301189", "createdAt": "2020-08-25T09:12:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n \n+    private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Signature findFunctionSignatureByOid(Integer oid) {\n          \n          \n            \n                @Nullable\n          \n          \n            \n                public Signature findFunctionByOid(int oid) {", "url": "https://github.com/crate/crate/pull/10286#discussion_r476301498", "createdAt": "2020-08-25T09:13:12Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/Functions.java", "diffHunk": "@@ -87,6 +88,22 @@ public void deregisterUdfResolversForSchema(String schema) {\n             .removeIf(function -> schema.equals(function.schema()));\n     }\n \n+    private static Signature findSignatureByOid(Map<FunctionName, List<FunctionProvider>> functions, Integer oid) {\n+        for (Map.Entry<FunctionName, List<FunctionProvider>> func : functions.entrySet()) {\n+            for (FunctionProvider sig : func.getValue()) {\n+                if (Objects.equals(oid, OidHash.functionOid(sig.getSignature()))) {\n+                    return sig.getSignature();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public Signature findFunctionSignatureByOid(Integer oid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMzQ1Mw==", "bodyText": "Due to the varargs this results in an array allocation. I think in most call-sites we could just go for string concat using  + and then do the .getBytes call to avoid some overhead.", "url": "https://github.com/crate/crate/pull/10286#discussion_r476303453", "createdAt": "2020-08-25T09:16:37Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/metadata/pgcatalog/OidHash.java", "diffHunk": "@@ -41,34 +48,55 @@\n         PROC\n     }\n \n+    private static int oid(String... keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Mjk5NTY4", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-474299568", "createdAt": "2020-08-25T09:24:39Z", "commit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToyNDo0MFrOHGPkFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTozNDoxNVrOHGP60g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwODUwMg==", "bodyText": "Why all the formatting changes in this file?\nCould you revert them to keep the scope of the PR narrower?", "url": "https://github.com/crate/crate/pull/10286#discussion_r476308502", "createdAt": "2020-08-25T09:24:40Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "diffHunk": "@@ -789,7 +791,7 @@ public void testInnerJoinSyntaxDoesNotExtendsWhereClause() throws Exception {\n             \"select * from users inner join users_multi_pk on users.id = users_multi_pk.id\");\n         assertThat(mss.where(), isLiteral(true));\n         assertThat(mss.joinPairs().get(0).condition(),\n-            isSQL(\"(doc.users.id = doc.users_multi_pk.id)\"));\n+                   isSQL(\"(doc.users.id = doc.users_multi_pk.id)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwOTQ4Mw==", "bodyText": "Please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476309483", "createdAt": "2020-08-25T09:26:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/dml/upsert/TransportShardUpsertActionTest.java", "diffHunk": "@@ -156,16 +155,16 @@ public void prepare() throws Exception {\n         when(schemas.getTableInfo(any(RelationName.class), eq(Operation.INSERT))).thenReturn(tableInfo);\n \n         transportShardUpsertAction = new TestingTransportShardUpsertAction(\n-            mock(ThreadPool.class),\n-            clusterService,\n-            MockTransportService.createNewService(Settings.EMPTY, Version.ES_V_6_5_1, THREAD_POOL, clusterService.getClusterSettings()),\n-            mock(SchemaUpdateClient.class),\n-            mock(TasksService.class),\n-            indicesService,\n-            mock(ShardStateAction.class),\n-            functions,\n-            schemas,\n-            mock(IndexNameExpressionResolver.class)\n+                mock(ThreadPool.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDI2Mg==", "bodyText": "Could use a local variable, the class attribute is not used as far as I can tell", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310262", "createdAt": "2020-08-25T09:27:32Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/collect/GroupByOptimizedIteratorTest.java", "diffHunk": "@@ -73,9 +74,11 @@\n     private String columnName;\n     private InputCollectExpression inExpr;\n     private List<AggregationContext> aggregationContexts;\n+    private NodeContext nodeCtx;\n \n     @Before\n     public void prepare() throws Exception {\n+        nodeCtx = createNodeContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDc0NA==", "bodyText": "Please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310744", "createdAt": "2020-08-25T09:28:22Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/fetch/FetchRowsTest.java", "diffHunk": "@@ -67,10 +68,10 @@ public void test_fetch_rows_can_map_inputs_and_buckets_to_outputs() throws Excep\n             t2.ident(), fetchSource2\n         );\n         var fetchRows = FetchRows.create(\n-            CoordinatorTxnCtx.systemTransactionContext(),\n-            e.functions(),\n-            fetchSources,\n-            List.of(\n+                CoordinatorTxnCtx.systemTransactionContext(),\n+                createNodeContext(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMDkyMA==", "bodyText": "please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476310920", "createdAt": "2020-08-25T09:28:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/execution/engine/indexing/IndexWriterProjectorUnitTest.java", "diffHunk": "@@ -96,32 +96,32 @@ public void testNullPKValue() throws Throwable {\n \n         TransportCreatePartitionsAction transportCreatePartitionsAction = mock(TransportCreatePartitionsAction.class);\n         IndexWriterProjector indexWriter = new IndexWriterProjector(\n-            clusterService,\n-            new NodeJobsCounter(),\n-            scheduler,\n-            executor,\n-            CoordinatorTxnCtx.systemTransactionContext(),\n-            TestingHelpers.getFunctions(),\n-            Settings.EMPTY,\n-            5,\n-            1,\n-            transportCreatePartitionsAction,\n-            (request, listener) -> {},\n-            IndexNameResolver.forTable(BULK_IMPORT_IDENT),\n-            RAW_SOURCE_REFERENCE,\n-            Collections.singletonList(ID_IDENT),\n-            Collections.<Symbol>singletonList(new InputColumn(1)),\n-            null,\n-            null,\n-            sourceInput,\n-            collectExpressions,\n-            20,\n-            null,\n-            null,\n-            false,\n-            false,\n-            UUID.randomUUID(),\n-            UpsertResultContext.forRowCount());\n+                clusterService,\n+                new NodeJobsCounter(),\n+                scheduler,\n+                executor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMTQ1Mw==", "bodyText": "please use the nodeCtx instead of passing in null", "url": "https://github.com/crate/crate/pull/10286#discussion_r476311453", "createdAt": "2020-08-25T09:29:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "diffHunk": "@@ -200,15 +196,15 @@ public void assertNormalize(String functionExpression, Matcher<? super Symbol> e\n             Input<?> input = ctx.add(arg);\n             arguments[i] = new AssertMax1ValueCallInput(input);\n         }\n-        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, (Input[]) arguments);\n+        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, null, (Input[]) arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMTUyOQ==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10286#discussion_r476311529", "createdAt": "2020-08-25T09:29:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/scalar/AbstractScalarFunctionsTest.java", "diffHunk": "@@ -200,15 +196,15 @@ public void assertNormalize(String functionExpression, Matcher<? super Symbol> e\n             Input<?> input = ctx.add(arg);\n             arguments[i] = new AssertMax1ValueCallInput(input);\n         }\n-        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, (Input[]) arguments);\n+        Object actualValue = scalar.compile(function.arguments()).evaluate(txnCtx, null, (Input[]) arguments);\n         assertThat((T) actualValue, expectedValue);\n \n         // Reset calls\n         for (AssertMax1ValueCallInput argument : arguments) {\n             argument.calls = 0;\n         }\n \n-        actualValue = scalar.evaluate(txnCtx, arguments);\n+        actualValue = scalar.evaluate(txnCtx, null, arguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMzg1MQ==", "bodyText": "Please revert indentation changes", "url": "https://github.com/crate/crate/pull/10286#discussion_r476313851", "createdAt": "2020-08-25T09:33:27Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/planner/node/ddl/UpdateSettingsPlanTest.java", "diffHunk": "@@ -45,19 +45,19 @@\n import java.util.function.Function;\n \n import static io.crate.planner.node.ddl.UpdateSettingsPlan.buildSettingsFrom;\n-import static io.crate.testing.TestingHelpers.getFunctions;\n+import static io.crate.testing.TestingHelpers.createNodeContext;\n import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.is;\n \n public class UpdateSettingsPlanTest extends ESTestCase {\n \n     private Function<Symbol, Object> symbolEvaluator(Row row) {\n         return x -> SymbolEvaluator.evaluate(\n-            TransactionContext.of(new SessionSettings(\"\", SearchPath.createSearchPathFrom(\"\"))),\n-            getFunctions(),\n-            x,\n-            row,\n-            SubQueryResults.EMPTY);\n+                TransactionContext.of(new SessionSettings(\"\", SearchPath.createSearchPathFrom(\"\"))),\n+                createNodeContext(),\n+                x,\n+                row,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxNDMyMg==", "bodyText": "please revert indentation change", "url": "https://github.com/crate/crate/pull/10286#discussion_r476314322", "createdAt": "2020-08-25T09:34:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/protocols/postgres/PostgresWireProtocolTest.java", "diffHunk": "@@ -88,13 +88,14 @@\n     public void prepare() {\n         SQLExecutor e = SQLExecutor.builder(clusterService).build();\n         sqlOperations = new SQLOperations(\n-            e.analyzer,\n-            e.planner,\n-            () -> mock(DependencyCarrier.class),\n-            new JobsLogs(() -> true),\n-            Settings.EMPTY,\n-            clusterService,\n-            USER_MANAGER_PROVIDER\n+                e.nodeCtx,\n+                e.analyzer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb34f88cb7221130cbd44299e9e755bba7047fc4"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa96435dcfbbd57d2adbae538272ef03c0128dce", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/fa96435dcfbbd57d2adbae538272ef03c0128dce", "committedDate": "2020-08-25T09:44:01Z", "message": "Jordi's review"}, "afterCommit": {"oid": "f5632d18968562cbbbaf5ebca586926444304d9c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f5632d18968562cbbbaf5ebca586926444304d9c", "committedDate": "2020-08-25T10:34:04Z", "message": "Jordi's review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NDM2MjQ5", "url": "https://github.com/crate/crate/pull/10286#pullrequestreview-474436249", "createdAt": "2020-08-25T12:37:02Z", "commit": {"oid": "f5632d18968562cbbbaf5ebca586926444304d9c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5632d18968562cbbbaf5ebca586926444304d9c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f5632d18968562cbbbaf5ebca586926444304d9c", "committedDate": "2020-08-25T10:34:04Z", "message": "Jordi's review"}, "afterCommit": {"oid": "c5a3eca4ad03899ba07726bf503c8ed793323921", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c5a3eca4ad03899ba07726bf503c8ed793323921", "committedDate": "2020-08-25T12:53:31Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5a3eca4ad03899ba07726bf503c8ed793323921", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c5a3eca4ad03899ba07726bf503c8ed793323921", "committedDate": "2020-08-25T12:53:31Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "8d963df4d62a007a3e8764c902d5ba8822d4c75d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8d963df4d62a007a3e8764c902d5ba8822d4c75d", "committedDate": "2020-08-25T14:34:17Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d963df4d62a007a3e8764c902d5ba8822d4c75d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/8d963df4d62a007a3e8764c902d5ba8822d4c75d", "committedDate": "2020-08-25T14:34:17Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n.\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "dceb388a74e5d68319873a0d440e5e8f1bcfac07", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dceb388a74e5d68319873a0d440e5e8f1bcfac07", "committedDate": "2020-08-25T14:36:55Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dceb388a74e5d68319873a0d440e5e8f1bcfac07", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dceb388a74e5d68319873a0d440e5e8f1bcfac07", "committedDate": "2020-08-25T14:36:55Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "789ffa3b6610e1242d924d018b9ed116a7b898c7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/789ffa3b6610e1242d924d018b9ed116a7b898c7", "committedDate": "2020-08-25T15:41:06Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d499b87928d3b9f7eb986a334ee91c5fb54b1dbc", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d499b87928d3b9f7eb986a334ee91c5fb54b1dbc", "committedDate": "2020-08-25T15:57:01Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "789ffa3b6610e1242d924d018b9ed116a7b898c7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/789ffa3b6610e1242d924d018b9ed116a7b898c7", "committedDate": "2020-08-25T15:41:06Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}, "afterCommit": {"oid": "d499b87928d3b9f7eb986a334ee91c5fb54b1dbc", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d499b87928d3b9f7eb986a334ee91c5fb54b1dbc", "committedDate": "2020-08-25T15:57:01Z", "message": "Add scalar function pg_function_is_visible(OID)\n\nA function's OID is calculated as a hash over its schema, name, and argument type\nlist. System functions are declared on startup, as the various modules are registered.\nUser defined functions, UDF, are registered/deregistered dynamically CREATE/DROP FUNCTION\nstatements respectively.\n\nUsers can 'select function pg_function_is_visible(OID)' to check that the function\nrefered to by the OID is visible. All system and UDF functions are visible."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3094, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}