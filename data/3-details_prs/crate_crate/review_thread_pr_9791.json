{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTM2NzA1", "number": 9791, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowMDoxN1rODqjaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowMDoxN1rODqjaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ2OTMzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowMDoxN1rOF6X5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTowMDoxN1rOF6X5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzMyMw==", "bodyText": "Maybe use FALLBACK_SIZE?\n(this suggestion, seems I forgot to send ;-)", "url": "https://github.com/crate/crate/pull/9791#discussion_r396753323", "createdAt": "2020-03-23T21:00:17Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/execution/engine/join/RamBlockSizeCalculatorTest.java", "diffHunk": "@@ -39,48 +39,88 @@\n     public void testCalculationOfBlockSize() {\n         when(circuitBreaker.getLimit()).thenReturn(110L);\n         when(circuitBreaker.getUsed()).thenReturn(10L);\n-        RamBlockSizeCalculator blockCalculator100leftRows = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 5, 100);\n+        RamBlockSizeCalculator blockCalculator100leftRows = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            5,\n+            100\n+        );\n         assertThat(blockCalculator100leftRows.getAsInt(), is(20));\n-        RamBlockSizeCalculator blockCalculator10LeftRows = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 5, 10);\n+        RamBlockSizeCalculator blockCalculator10LeftRows = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            5,\n+            10\n+        );\n         assertThat(blockCalculator10LeftRows.getAsInt(), is(10));\n     }\n \n     @Test\n     public void testCalculationOfBlockSizeWithMissingStats() {\n         when(circuitBreaker.getLimit()).thenReturn(-1L);\n-        RamBlockSizeCalculator blockSizeCalculator = new RamBlockSizeCalculator(defaultBlockSize, circuitBreaker, 10, 10);\n-        assertThat(blockSizeCalculator.getAsInt(), is(defaultBlockSize));\n+        RamBlockSizeCalculator blockSizeCalculator = new RamBlockSizeCalculator(\n+            defaultBlockSize,\n+            circuitBreaker,\n+            10,\n+            10\n+        );\n+        assertThat(blockSizeCalculator.getAsInt(), is(500));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c78392f22c02e134a9bcf43cc6330b5f41cb98"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1542, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}