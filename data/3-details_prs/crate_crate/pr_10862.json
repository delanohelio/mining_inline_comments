{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTY3ODg3", "number": 10862, "title": "Optimize fetch performance for sequential value retrieval", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis addresses a performance regression from the Lucene 8.7.0 upgrade. The fetch performance can be optimized for the case\nwhere the retrival is in sequential order by leveraging the merge instances of stored fields readers that are optimized for sequential access. The idea comes from  elastic/elasticsearch#62509\nQ: SELECT * FROM uservisits LIMIT 1000\nC: 1\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |       43.509 \u00b1    9.050 |     34.549 |     42.470 |     46.479 |    255.659 |\n|   V2    |        9.481 \u00b1    6.594 |      7.322 |      8.460 |      9.279 |    197.222 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               - 128.43%                           - 133.56%\nThere is a 100.00% probability that the observed difference is not random, and the best estimate of that difference is 128.43%\nThe test has statistical significance\n\nQ: select * from articles inner join colors on articles.id = colors.id order by articles.id limit 1000\nC: 1\n| Version |         Mean \u00b1    Stdev |        Min |     Median |         Q3 |        Max |\n|   V1    |       57.408 \u00b1   34.947 |     47.715 |     51.859 |     54.174 |    525.007 |\n|   V2    |       47.619 \u00b1   28.969 |     39.616 |     42.811 |     45.897 |    440.282 |\n\u251c---------\u2534-------------------------\u2534------------\u2534------------\u2534------------\u2534------------\u2518\n|               -  18.64%                           -  19.12%\nThere is a 99.76% probability that the observed difference is not random, and the best estimate of that difference is 18.64%\nThe test has statistical significance\n\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-12-13T15:18:58Z", "url": "https://github.com/crate/crate/pull/10862", "merged": true, "mergeCommit": {"oid": "4963714a2a4d29d519d43d3a58881818861a5c4d"}, "closed": true, "closedAt": "2020-12-17T18:28:43Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdly2iDgBqjQxMDYxMzAyNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnHXc9AH2gAyNTM4OTY3ODg3OjZiNDc4NTcyZjdjYzcyMTlkOTYwMDBhMzMwODgzZDRiMmU3YzI5NjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff220c709b599f5c7b7866ffda8898237e8c8990", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/ff220c709b599f5c7b7866ffda8898237e8c8990", "committedDate": "2020-12-13T15:09:16Z", "message": "fix"}, "afterCommit": {"oid": "4e47f87dcbab40cbdb337459128e934b68915b95", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/4e47f87dcbab40cbdb337459128e934b68915b95", "committedDate": "2020-12-13T15:24:48Z", "message": "Clean up and optimize document access pattern"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d976098a8d0f4034781ce9e8c6283e708542fc8", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7d976098a8d0f4034781ce9e8c6283e708542fc8", "committedDate": "2020-12-14T09:31:01Z", "message": "Cleanup"}, "afterCommit": {"oid": "9a1158ee57b9aa805f8d5172be1caf496d216a38", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/9a1158ee57b9aa805f8d5172be1caf496d216a38", "committedDate": "2020-12-14T09:43:56Z", "message": "Cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2748699724476f5f7afc9f9caf34d163c212bcf9", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/2748699724476f5f7afc9f9caf34d163c212bcf9", "committedDate": "2020-12-14T09:59:26Z", "message": "Simplify"}, "afterCommit": {"oid": "023a9706e9397467eb80fa066bc47e19088bac67", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/023a9706e9397467eb80fa066bc47e19088bac67", "committedDate": "2020-12-14T10:48:50Z", "message": "Simplify"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57cff6d4fcc58e3b0195eaaa60242e1642a8f1f4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/57cff6d4fcc58e3b0195eaaa60242e1642a8f1f4", "committedDate": "2020-12-15T15:34:23Z", "message": "fix"}, "afterCommit": {"oid": "b4ccc7543f9be02e05f053d91bce5e536eecf319", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/b4ccc7543f9be02e05f053d91bce5e536eecf319", "committedDate": "2020-12-15T15:41:41Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere documents to retrieve are in sequential order."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4ccc7543f9be02e05f053d91bce5e536eecf319", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/b4ccc7543f9be02e05f053d91bce5e536eecf319", "committedDate": "2020-12-15T15:41:41Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere documents to retrieve are in sequential order."}, "afterCommit": {"oid": "66baa660dcdc9cdb6937cd5566ab55277f5084ab", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/66baa660dcdc9cdb6937cd5566ab55277f5084ab", "committedDate": "2020-12-15T15:48:50Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere the documents to retrieve are in sequential order."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66baa660dcdc9cdb6937cd5566ab55277f5084ab", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/66baa660dcdc9cdb6937cd5566ab55277f5084ab", "committedDate": "2020-12-15T15:48:50Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0\nupgrade. The fetch performance can be optimized for the case\nwhere the documents to retrieve are in sequential order."}, "afterCommit": {"oid": "d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "committedDate": "2020-12-15T16:01:06Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/d62095eb4c8ca295e5c215361e8cae851bb8f2d5", "committedDate": "2020-12-15T16:01:06Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "14a92736b077e50a7bc777f5cce9285513af8c30", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/14a92736b077e50a7bc777f5cce9285513af8c30", "committedDate": "2020-12-15T16:02:21Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14a92736b077e50a7bc777f5cce9285513af8c30", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/14a92736b077e50a7bc777f5cce9285513af8c30", "committedDate": "2020-12-15T16:02:21Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "422a85ed31103c863fe4114411c9d7d8afa552be", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/422a85ed31103c863fe4114411c9d7d8afa552be", "committedDate": "2020-12-15T16:50:18Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bddcc2b08d3192be2ac57dd2851f75d7a09930e6", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/bddcc2b08d3192be2ac57dd2851f75d7a09930e6", "committedDate": "2020-12-15T17:16:04Z", "message": "Simplify"}, "afterCommit": {"oid": "138a1c56236b92814b941024270dcb85cccfc65e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/138a1c56236b92814b941024270dcb85cccfc65e", "committedDate": "2020-12-15T18:16:09Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6b0809897afbe83d32a2a6332d67b804657ef39", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/b6b0809897afbe83d32a2a6332d67b804657ef39", "committedDate": "2020-12-16T08:15:25Z", "message": "fix"}, "afterCommit": {"oid": "db7fbe18cafe3b4b90032bf1d02020f37475a821", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/db7fbe18cafe3b4b90032bf1d02020f37475a821", "committedDate": "2020-12-16T09:32:08Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db7fbe18cafe3b4b90032bf1d02020f37475a821", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/db7fbe18cafe3b4b90032bf1d02020f37475a821", "committedDate": "2020-12-16T09:32:08Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "a2a62cea7994e28b259475157199215c68770121", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a2a62cea7994e28b259475157199215c68770121", "committedDate": "2020-12-16T10:11:22Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2a62cea7994e28b259475157199215c68770121", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a2a62cea7994e28b259475157199215c68770121", "committedDate": "2020-12-16T10:11:22Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "committedDate": "2020-12-16T10:13:40Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/f3a098ee7c4b86e33dd5e952bf3711b9819a6e37", "committedDate": "2020-12-16T10:13:40Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "cb5f583b2e761719de564b2b344883c9684c9d40", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/cb5f583b2e761719de564b2b344883c9684c9d40", "committedDate": "2020-12-16T10:16:45Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb5f583b2e761719de564b2b344883c9684c9d40", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/cb5f583b2e761719de564b2b344883c9684c9d40", "committedDate": "2020-12-16T10:16:45Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "committedDate": "2020-12-16T10:19:30Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/79c2f09bc6c283db7aaee5ffad619e0bfb8509b4", "committedDate": "2020-12-16T10:19:30Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "10e6a886bb074ccd3d09a7a5e5a003b397744720", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/10e6a886bb074ccd3d09a7a5e5a003b397744720", "committedDate": "2020-12-16T10:23:01Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10e6a886bb074ccd3d09a7a5e5a003b397744720", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/10e6a886bb074ccd3d09a7a5e5a003b397744720", "committedDate": "2020-12-16T10:23:01Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7de913fb3cf47b165ac86d761d2dbfb5de988b23", "committedDate": "2020-12-16T10:25:08Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTkxMDg2", "url": "https://github.com/crate/crate/pull/10862#pullrequestreview-553591086", "createdAt": "2020-12-16T11:22:02Z", "commit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMjowMlrOIHAezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyMjowMlrOIHAezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxODgyOQ==", "bodyText": "I experimented with smaller values as size theshold since the amount of doc ids can be less due to parallel fetch execution in comparison to elasticsearch. However,  the performance goes worse with smaller batches.", "url": "https://github.com/crate/crate/pull/10862#discussion_r544218829", "createdAt": "2020-12-16T11:22:02Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/execution/engine/fetch/FetchCollector.java", "diffHunk": "@@ -67,27 +71,59 @@\n \n     }\n \n-    private void setNextDocId(LeafReaderContext readerContext, int doc) throws IOException {\n+    private void setNextDocId(ReaderContext readerContext, int doc) throws IOException {\n         for (LuceneCollectorExpression<?> e : collectorExpressions) {\n             e.setNextReader(readerContext);\n             e.setNextDocId(doc);\n         }\n     }\n \n     public StreamBucket collect(IntContainer docIds) {\n+        if (docIds.size() >= 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzM3ODIz", "url": "https://github.com/crate/crate/pull/10862#pullrequestreview-554737823", "createdAt": "2020-12-17T15:52:13Z", "commit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo1MjoxM1rOIH8NEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjowMjowNFrOIH8r7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE5NzMzMA==", "bodyText": "The null check on every document could be avoided by defining a BiConsumer on the ctor.", "url": "https://github.com/crate/crate/pull/10862#discussion_r545197330", "createdAt": "2020-12-17T15:52:13Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/fetch/ReaderContext.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.engine.fetch;\n+\n+import org.apache.lucene.codecs.StoredFieldsReader;\n+import org.apache.lucene.index.LeafReader;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.apache.lucene.index.StoredFieldVisitor;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+\n+public class ReaderContext {\n+\n+    private final LeafReaderContext leafReaderContext;\n+    @Nullable\n+    private final StoredFieldsReader storedFieldsReader;\n+\n+    public ReaderContext(LeafReaderContext leafReaderContext, @Nullable StoredFieldsReader storedFieldsReader) {\n+        this.leafReaderContext = leafReaderContext;\n+        this.storedFieldsReader = storedFieldsReader;\n+    }\n+\n+    public ReaderContext(LeafReaderContext leafReaderContext) {\n+        this(leafReaderContext, null);\n+    }\n+\n+    public void visitDocument(int docId, StoredFieldVisitor visitor) throws IOException {\n+        if (storedFieldsReader == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIwNTIyOQ==", "bodyText": "I wonder why this change is needed as the related ES commit does not change anything here?", "url": "https://github.com/crate/crate/pull/10862#discussion_r545205229", "createdAt": "2020-12-17T16:02:04Z", "author": {"login": "seut"}, "path": "server/src/main/java/org/elasticsearch/common/lucene/index/ElasticsearchLeafReader.java", "diffHunk": "@@ -50,7 +52,7 @@ public ShardId shardId() {\n     }\n \n     @Override\n-    public CacheHelper getCoreCacheHelper() {\n+    public IndexReader.CacheHelper getCoreCacheHelper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de913fb3cf47b165ac86d761d2dbfb5de988b23"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Nzk3NDI4", "url": "https://github.com/crate/crate/pull/10862#pullrequestreview-554797428", "createdAt": "2020-12-17T16:55:29Z", "commit": {"oid": "7efb8d7739caa68975ae6892224bbf2790a7ebf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7efb8d7739caa68975ae6892224bbf2790a7ebf3", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7efb8d7739caa68975ae6892224bbf2790a7ebf3", "committedDate": "2020-12-17T16:29:18Z", "message": "Revert return type in getCoreCacheHelper"}, "afterCommit": {"oid": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/19bdf6c6025bca7d09623d40e37ef17918ccdb75", "committedDate": "2020-12-17T16:56:51Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "committedDate": "2020-12-17T17:22:13Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19bdf6c6025bca7d09623d40e37ef17918ccdb75", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/19bdf6c6025bca7d09623d40e37ef17918ccdb75", "committedDate": "2020-12-17T16:56:51Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}, "afterCommit": {"oid": "bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/bf8d27a7c99923fe2d470d479a4e8a2d89f958fc", "committedDate": "2020-12-17T17:22:13Z", "message": "Optimize fetch performance for sequential value retrieval\n\nThis addresses the performance regression from the Lucene 8.7.0 upgrade.\nThe fetch performance can be optimized for the case where the retrival\nis in sequential order by leveraging the merge instances of stored fields\nreaders that are optimized for sequential access."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b478572f7cc7219d96000a330883d4b2e7c2960", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/6b478572f7cc7219d96000a330883d4b2e7c2960", "committedDate": "2020-12-17T17:55:14Z", "message": "Merge branch 'master' into mkleen/improve_ordered_fetch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3585, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}