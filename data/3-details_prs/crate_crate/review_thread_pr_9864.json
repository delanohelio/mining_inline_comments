{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NDE1OTM0", "number": 9864, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NjowM1rODy1mcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1MTozMFrODy2zcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjMzNTg1OnYy", "diffSide": "LEFT", "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/IntervalFunctionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NjowM1rOGHHZEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NjowM1rOGHHZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMyMA==", "bodyText": "only + and - should be allowed", "url": "https://github.com/crate/crate/pull/9864#discussion_r410114320", "createdAt": "2020-04-17T09:46:03Z", "author": {"login": "kovrus"}, "path": "sql/src/test/java/io/crate/expression/scalar/arithmetic/IntervalFunctionTest.java", "diffHunk": "@@ -50,14 +51,15 @@ public void test_out_of_range_value() {\n     public void test_null_interval() {\n         assertEvaluate(\"null + interval '1 second'\", Matchers.nullValue());\n         assertEvaluate(\"null - interval '1 second'\", Matchers.nullValue());\n-        assertEvaluate(\"null * interval '1 second'\", Matchers.nullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb21a265147bc015a4cf523d4daf316635e6734"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjUzMjk2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/IntervalTimestampArithmeticScalar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1MTozMFrOGHJWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToxNjo0NlrOGHKAwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjMxMg==", "bodyText": "Timestamp + interval should return a timestamp,  no?", "url": "https://github.com/crate/crate/pull/9864#discussion_r410146312", "createdAt": "2020-04-17T10:51:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/IntervalTimestampArithmeticScalar.java", "diffHunk": "@@ -23,29 +23,82 @@\n package io.crate.expression.scalar.arithmetic;\n \n import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n import io.crate.types.IntervalType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n \n-import java.util.Arrays;\n+import java.util.List;\n import java.util.function.BiFunction;\n \n-public class IntervalTimestampScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+public class IntervalTimestampArithmeticScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        for (var timestampType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    timestampType.getTypeSignature(),\n+                    timestampType.getTypeSignature()\n+                ).withForbiddenCoercion(),\n+                args -> new IntervalTimestampArithmeticScalar(\n+                    \"+\",\n+                    ArithmeticFunctions.Names.ADD,\n+                    args,\n+                    args.get(1))\n+            );\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    timestampType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abb21a265147bc015a4cf523d4daf316635e6734"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NzI0OA==", "bodyText": "yes, that's right, pushed the fixup. it wasn't failing coz the return type of signature is not used. instead, we use the first arg data type like b6348ce#diff-97b9d1e99e7fb4ad3e7374a71e373f83L70", "url": "https://github.com/crate/crate/pull/9864#discussion_r410157248", "createdAt": "2020-04-17T11:16:46Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/IntervalTimestampArithmeticScalar.java", "diffHunk": "@@ -23,29 +23,82 @@\n package io.crate.expression.scalar.arithmetic;\n \n import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n import io.crate.types.IntervalType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n \n-import java.util.Arrays;\n+import java.util.List;\n import java.util.function.BiFunction;\n \n-public class IntervalTimestampScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+public class IntervalTimestampArithmeticScalar extends Scalar<Long, Object> implements BiFunction<Long, Period, Long> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        for (var timestampType : List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ)) {\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    timestampType.getTypeSignature(),\n+                    timestampType.getTypeSignature()\n+                ).withForbiddenCoercion(),\n+                args -> new IntervalTimestampArithmeticScalar(\n+                    \"+\",\n+                    ArithmeticFunctions.Names.ADD,\n+                    args,\n+                    args.get(1))\n+            );\n+            module.register(\n+                Signature.scalar(\n+                    ArithmeticFunctions.Names.ADD,\n+                    timestampType.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature(),\n+                    DataTypes.INTERVAL.getTypeSignature()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE0NjMxMg=="}, "originalCommit": {"oid": "abb21a265147bc015a4cf523d4daf316635e6734"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}