{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxODAyOTI3", "number": 9627, "title": "Support using table functions with multiple columns in select list", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-02-06T09:50:14Z", "url": "https://github.com/crate/crate/pull/9627", "merged": true, "mergeCommit": {"oid": "fb67ef81e3d829e2da17b288c7f276b44b6e3f96"}, "closed": true, "closedAt": "2020-02-10T14:34:35Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBoaisABqjMwMTMzNzcxNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC9gKOABqjMwMjI3OTE5NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "986889c032970fc19463086ed6958fe0b4347cc3", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/986889c032970fc19463086ed6958fe0b4347cc3", "committedDate": "2020-02-06T09:49:38Z", "message": "fixup! WIP: RowType"}, "afterCommit": {"oid": "d0fa54010037b45c3c120dbd2161f6a552d74f27", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d0fa54010037b45c3c120dbd2161f6a552d74f27", "committedDate": "2020-02-06T10:45:05Z", "message": "fixup! WIP: RowType"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0fa54010037b45c3c120dbd2161f6a552d74f27", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d0fa54010037b45c3c120dbd2161f6a552d74f27", "committedDate": "2020-02-06T10:45:05Z", "message": "fixup! WIP: RowType"}, "afterCommit": {"oid": "5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "committedDate": "2020-02-07T14:21:18Z", "message": "WIP: Support using table functions with multiple columns in select list"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/5e70d320e0ad6da98017d2e2da588e9aa52f3eab", "committedDate": "2020-02-07T14:21:18Z", "message": "WIP: Support using table functions with multiple columns in select list"}, "afterCommit": {"oid": "bb87916f9cf89bbf5ba5d8ec689e5bb59e469181", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/bb87916f9cf89bbf5ba5d8ec689e5bb59e469181", "committedDate": "2020-02-07T15:00:50Z", "message": "WIP: Support using table functions with multiple columns in select list"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4115aad8419785945d17d46e4a035e2590c72399", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/4115aad8419785945d17d46e4a035e2590c72399", "committedDate": "2020-02-07T16:13:51Z", "message": "fixup! WIP: Support using table functions with multiple columns in select list"}, "afterCommit": {"oid": "8297dc06463d08b181ece40956ae24ea999cde50", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/8297dc06463d08b181ece40956ae24ea999cde50", "committedDate": "2020-02-10T11:31:41Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8297dc06463d08b181ece40956ae24ea999cde50", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/8297dc06463d08b181ece40956ae24ea999cde50", "committedDate": "2020-02-10T11:31:41Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}, "afterCommit": {"oid": "b13951783beb9900de6bc58f41ec49983b10a575", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b13951783beb9900de6bc58f41ec49983b10a575", "committedDate": "2020-02-10T11:41:47Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b13951783beb9900de6bc58f41ec49983b10a575", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b13951783beb9900de6bc58f41ec49983b10a575", "committedDate": "2020-02-10T11:41:47Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}, "afterCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d13b82e5d655f522b98fc185617d153c38750349", "committedDate": "2020-02-10T12:03:12Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTAzMDQ3", "url": "https://github.com/crate/crate/pull/9627#pullrequestreview-355903047", "createdAt": "2020-02-10T12:37:33Z", "commit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjozNzozM1rOFnkhGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo0NDoyN1rOFnktGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNzA4MA==", "bodyText": "Do we need to handle the array of row type separately, such as we have a special handling for RowType.", "url": "https://github.com/crate/crate/pull/9627#discussion_r377037080", "createdAt": "2020-02-10T12:37:33Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/PGTypes.java", "diffHunk": "@@ -97,31 +102,46 @@\n         return TYPES;\n     }\n \n-    public static DataType fromOID(int oid) {\n+    public static DataType<?> fromOID(int oid) {\n         return PG_TYPES_TO_CRATE_TYPE.get(oid);\n     }\n \n-    public static PGType get(DataType type) {\n-        if (type.id() == ArrayType.ID) {\n-            DataType<?> innerType = ((ArrayType) type).innerType();\n-            if (innerType.id() == ArrayType.ID) {\n-                // if this is a nested collection stream it as JSON because\n-                // postgres binary format doesn't support multidimensional arrays\n-                // with sub-arrays of different length\n-                // (something like [ [1, 2], [3] ] is not supported)\n+    public static PGType get(DataType<?> type) {\n+        switch (type.id()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTAyMA==", "bodyText": "should we have some pre condition here to be more safe and get a better exception message if we get out of bound exception.", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039020", "createdAt": "2020-02-10T12:41:49Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzOTk5Mg==", "bodyText": "not sure, maybe we can first check Row#numColumns of val1 and val2?", "url": "https://github.com/crate/crate/pull/9627#discussion_r377039992", "createdAt": "2020-02-10T12:44:03Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/RowType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public final class RowType extends DataType<Row> implements Streamer<Row> {\n+\n+    public static final int ID = 18;\n+    public static final String NAME = \"record\";\n+    private final List<DataType<?>> fieldTypes;\n+    private final List<String> fieldNames;\n+\n+    /**\n+     * @param fieldTypes the types of the fields within a Row\n+     * @param fieldNames the names of the fields. This can be empty in which case defaults will be created (colX ... colN)\n+     */\n+    public RowType(List<DataType<?>> fieldTypes, List<String> fieldNames) {\n+        assert fieldNames.isEmpty() || fieldNames.size() == fieldTypes.size()\n+            : \"fieldNames must either be empty or have the same length as fieldTypes\";\n+        this.fieldTypes = fieldTypes;\n+        if (fieldNames.isEmpty() && !fieldTypes.isEmpty()) {\n+            ArrayList<String> generatedFieldNames = new ArrayList<>(fieldTypes.size());\n+            for (int i = 0; i < fieldTypes.size(); i++) {\n+                generatedFieldNames.add(\"col\" + (i + 1));\n+            }\n+            this.fieldNames = List.copyOf(generatedFieldNames);\n+        } else {\n+            this.fieldNames = List.copyOf(fieldNames);\n+        }\n+    }\n+\n+    public RowType(List<DataType<?>> fieldTypes) {\n+        this(fieldTypes, List.of());\n+    }\n+\n+    public RowType(StreamInput in) throws IOException {\n+        int numFields = in.readVInt();\n+        ArrayList<DataType<?>> fieldTypes = new ArrayList<>(numFields);\n+        ArrayList<String> fieldNames = new ArrayList<>(numFields);\n+        for (int i = 0; i < numFields; i++) {\n+            fieldTypes.add(DataTypes.fromStream(in));\n+            fieldNames.add(in.readString());\n+        }\n+        this.fieldTypes = List.copyOf(fieldTypes);\n+        this.fieldNames = List.copyOf(fieldNames);\n+    }\n+\n+    public void writeTo(StreamOutput out) throws IOException {\n+        out.writeVInt(fieldTypes.size());\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            DataTypes.toStream(fieldTypes.get(i), out);\n+            out.writeString(fieldNames.get(i));\n+        }\n+    }\n+\n+    public int numElements() {\n+        return fieldTypes.size();\n+    }\n+\n+    public DataType<?> getFieldType(int position) {\n+        return fieldTypes.get(position);\n+    }\n+\n+    public String getFieldName(int position) {\n+        return fieldNames.get(position);\n+    }\n+\n+    public List<String> fieldNames() {\n+        return fieldNames;\n+    }\n+\n+    public List<DataType<?>> fieldTypes() {\n+        return fieldTypes;\n+    }\n+\n+    @Override\n+    public Row readValueFrom(StreamInput in) throws IOException {\n+        Object[] values = new Object[fieldTypes.size()];\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            values[i] = fieldTypes.get(i).streamer().readValueFrom(in);\n+        }\n+        return new RowN(values);\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public void writeValueTo(StreamOutput out, Row row) throws IOException {\n+        assert row.numColumns() == fieldTypes.size()\n+            : \"Row that should be streamed must have the same number of columns as the rowType contains fieldTypes\";\n+        for (int i = 0; i < fieldTypes.size(); i++) {\n+            Streamer streamer = fieldTypes.get(i).streamer();\n+            streamer.writeValueTo(out, row.get(i));\n+        }\n+    }\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TableType;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Streamer<Row> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Row value(Object value) throws IllegalArgumentException, ClassCastException {\n+        return (Row) value;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    @Override\n+    public int compareValueTo(Row val1, Row val2) {\n+        for (int i = 0; i < fieldTypes.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0MDE1Mw==", "bodyText": "shall we add regproc to aliases in data-types.rst?", "url": "https://github.com/crate/crate/pull/9627#discussion_r377040153", "createdAt": "2020-02-10T12:44:27Z", "author": {"login": "kovrus"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -314,6 +315,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"int4\", INTEGER),\n         entry(\"int8\", LONG),\n         entry(\"name\", STRING),\n+        entry(\"regproc\", STRING),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d13b82e5d655f522b98fc185617d153c38750349", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d13b82e5d655f522b98fc185617d153c38750349", "committedDate": "2020-02-10T12:03:12Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}, "afterCommit": {"oid": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c771db214bcc7517a4f24b698dcc8e6d58a7029c", "committedDate": "2020-02-10T13:31:53Z", "message": "fixup! Support using table functions with multiple columns in select list"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c771db214bcc7517a4f24b698dcc8e6d58a7029c", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c771db214bcc7517a4f24b698dcc8e6d58a7029c", "committedDate": "2020-02-10T13:31:53Z", "message": "fixup! Support using table functions with multiple columns in select list"}, "afterCommit": {"oid": "6d04c2dfb767d1e500bec4207c3dee185bc7615f", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6d04c2dfb767d1e500bec4207c3dee185bc7615f", "committedDate": "2020-02-10T13:34:00Z", "message": "fixup! Support using table functions with multiple columns in select list"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d04c2dfb767d1e500bec4207c3dee185bc7615f", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/6d04c2dfb767d1e500bec4207c3dee185bc7615f", "committedDate": "2020-02-10T13:34:00Z", "message": "fixup! Support using table functions with multiple columns in select list"}, "afterCommit": {"oid": "9a1bedd52b7c2cc1317385b29576ecce655261be", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/9a1bedd52b7c2cc1317385b29576ecce655261be", "committedDate": "2020-02-10T13:34:20Z", "message": "fixup! Support using table functions with multiple columns in select list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTM5MTI0", "url": "https://github.com/crate/crate/pull/9627#pullrequestreview-355939124", "createdAt": "2020-02-10T13:36:02Z", "commit": {"oid": "9a1bedd52b7c2cc1317385b29576ecce655261be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a1bedd52b7c2cc1317385b29576ecce655261be", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/9a1bedd52b7c2cc1317385b29576ecce655261be", "committedDate": "2020-02-10T13:34:20Z", "message": "fixup! Support using table functions with multiple columns in select list"}, "afterCommit": {"oid": "b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "committedDate": "2020-02-10T13:36:50Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d525e44fd7c7d148f55b81071521f047dd97a098", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d525e44fd7c7d148f55b81071521f047dd97a098", "committedDate": "2020-02-10T13:53:07Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b24e93c4e9a9bb4e3ae14ce129503d1948ca0466", "committedDate": "2020-02-10T13:36:50Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}, "afterCommit": {"oid": "d525e44fd7c7d148f55b81071521f047dd97a098", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/d525e44fd7c7d148f55b81071521f047dd97a098", "committedDate": "2020-02-10T13:53:07Z", "message": "Support using table functions with multiple columns in select list\n\nThis introduces a new `RowType` that represents expressions which have a\n`Row` as value. This is necessary to supporting using table functions\nwith multiple columns in the select list of a statement."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3825, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}