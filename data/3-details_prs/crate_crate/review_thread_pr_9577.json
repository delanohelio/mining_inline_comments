{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDU1NDc0", "number": 9577, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjozMzowNlrODbSdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjozMzowNlrODbSdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTQwNTMyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/CeilFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNjozMzowNlrOFir78A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1NjoxOFrOFiwrUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkxNTc2MA==", "bodyText": "lgtm\nJust a minor note, maybe we can use BaseFunctionResolver to remove a bit of code like the getSignature method override and the first condition in the getForTypes method", "url": "https://github.com/crate/crate/pull/9577#discussion_r371915760", "createdAt": "2020-01-28T16:33:06Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/CeilFunction.java", "diffHunk": "@@ -35,29 +35,40 @@\n \n public final class CeilFunction {\n \n-    public static final String NAME = \"ceil\";\n+    public static final String CEIL = \"ceil\";\n+    public static final String CEILING = \"ceiling\";\n \n     public static void register(ScalarFunctionModule module) {\n-        module.register(NAME, new FunctionResolver() {\n-            @Nullable\n-            @Override\n-            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n-                return FuncParams.SINGLE_NUMERIC.match(funcArgs);\n-            }\n+        module.register(CEIL, new CeilFunctionResolver(CEIL));\n+        module.register(CEILING, new CeilFunctionResolver(CEILING));\n+    }\n+\n+    private static class CeilFunctionResolver implements FunctionResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76205e588f5f4e74a96ce0e5990c09740a0e1a09"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5MzQyNg==", "bodyText": "Yep I was considering it, but felt like it would go too far within the same commit. I might follow up later.", "url": "https://github.com/crate/crate/pull/9577#discussion_r371993426", "createdAt": "2020-01-28T18:56:18Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/CeilFunction.java", "diffHunk": "@@ -35,29 +35,40 @@\n \n public final class CeilFunction {\n \n-    public static final String NAME = \"ceil\";\n+    public static final String CEIL = \"ceil\";\n+    public static final String CEILING = \"ceiling\";\n \n     public static void register(ScalarFunctionModule module) {\n-        module.register(NAME, new FunctionResolver() {\n-            @Nullable\n-            @Override\n-            public List<DataType> getSignature(List<? extends FuncArg> funcArgs) {\n-                return FuncParams.SINGLE_NUMERIC.match(funcArgs);\n-            }\n+        module.register(CEIL, new CeilFunctionResolver(CEIL));\n+        module.register(CEILING, new CeilFunctionResolver(CEILING));\n+    }\n+\n+    private static class CeilFunctionResolver implements FunctionResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkxNTc2MA=="}, "originalCommit": {"oid": "76205e588f5f4e74a96ce0e5990c09740a0e1a09"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1151, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}