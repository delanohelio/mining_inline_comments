{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTcxMjg4", "number": 9925, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMjo1NlrOD5xYcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMjo1NlrOD5xYcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTA0NDk2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptObjectFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMToyMjo1NlrOGROfTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo1MjozOFrOGRPZcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxNjM2Nw==", "bodyText": "There are no type variable constraints at the arguments or return types. what is this for?", "url": "https://github.com/crate/crate/pull/9925#discussion_r420716367", "createdAt": "2020-05-06T11:22:56Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptObjectFunction.java", "diffHunk": "@@ -26,51 +26,55 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n import io.crate.types.DataTypes;\n import io.crate.types.ObjectType;\n-import io.crate.types.StringType;\n \n import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+\n /**\n  * Scalar function to resolve elements inside a map.\n  */\n public class SubscriptObjectFunction extends Scalar<Object, Map<String, Object>> {\n \n     public static final String NAME = \"subscript_obj\";\n-    private static final FuncParams FUNCTION_PARAMS = FuncParams\n-        .builder(Param.of(ObjectType.untyped()), Param.of(StringType.INSTANCE))\n-        .withVarArgs(Param.of(StringType.INSTANCE))\n-        .build();\n \n-    private FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature\n+        .scalar(\n+            NAME,\n+            ObjectType.untyped().getTypeSignature(),\n+            DataTypes.STRING.getTypeSignature(),\n+            DataTypes.UNDEFINED.getTypeSignature())\n+        .withVariableArity()\n+        .withTypeVariableConstraints(typeVariable(\"text\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczMTI0OA==", "bodyText": "as discussed, i'll, of course, remove it. it is just some impl artifact..", "url": "https://github.com/crate/crate/pull/9925#discussion_r420731248", "createdAt": "2020-05-06T11:52:38Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/SubscriptObjectFunction.java", "diffHunk": "@@ -26,51 +26,55 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n import io.crate.types.DataTypes;\n import io.crate.types.ObjectType;\n-import io.crate.types.StringType;\n \n import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+\n /**\n  * Scalar function to resolve elements inside a map.\n  */\n public class SubscriptObjectFunction extends Scalar<Object, Map<String, Object>> {\n \n     public static final String NAME = \"subscript_obj\";\n-    private static final FuncParams FUNCTION_PARAMS = FuncParams\n-        .builder(Param.of(ObjectType.untyped()), Param.of(StringType.INSTANCE))\n-        .withVarArgs(Param.of(StringType.INSTANCE))\n-        .build();\n \n-    private FunctionInfo info;\n+    public static final Signature SIGNATURE = Signature\n+        .scalar(\n+            NAME,\n+            ObjectType.untyped().getTypeSignature(),\n+            DataTypes.STRING.getTypeSignature(),\n+            DataTypes.UNDEFINED.getTypeSignature())\n+        .withVariableArity()\n+        .withTypeVariableConstraints(typeVariable(\"text\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcxNjM2Nw=="}, "originalCommit": {"oid": "cdec7ee20d85eea9103190e0ce82f0a4684968aa"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1462, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}