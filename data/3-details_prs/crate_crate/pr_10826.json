{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTc2MzUw", "number": 10826, "title": "Add to_char scalar function", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis adds the to_char data formatting function (addresses part of #9663). This function takes an expression of either a timestamp, interval or numeric type and a string that describes how that expression should be formatted.\n\nTimestamps are formatted according to the syntax described in Java's DateTimeFormatter (https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html)\nNumeric values are formatted according to the syntax described in Java's DecimalFormat (https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html)\nInterval values are just formatted according to the Joda default interval formatter, as the interval formatting builder has no string tokens -> formatter builder (we could, though, roll our own according to the syntax of DateTimeFormatter).\n\nAlso: should this be commited straight to master, or would a feature branch be more desirable?\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-11-26T16:26:05Z", "url": "https://github.com/crate/crate/pull/10826", "merged": true, "mergeCommit": {"oid": "889819324623dbbba5af459a963ab5bf8c4e5cef"}, "closed": true, "closedAt": "2020-12-01T14:02:10Z", "author": {"login": "autophagy"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgWWj9AFqTUzOTQ3ODg2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh58JIgBqjQwNTcxODgwMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDc4ODY4", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-539478868", "createdAt": "2020-11-26T17:23:31Z", "commit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyMzozMVrOH6jbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyNDo1OFrOH6jd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1OTg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The ``to_char`` function converts a timestamp, interval or numeric value to\n          \n          \n            \n            The ``to_char`` function converts a timestamp, interval, or numeric value to", "url": "https://github.com/crate/crate/pull/10826#discussion_r531159856", "createdAt": "2020-11-26T17:23:31Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1086,6 +1086,181 @@ It has two variants depending on the type of ``timestamp``:\n     +--------------+------------------+\n     SELECT 1 row in set (... sec)\n \n+\n+``to_char(expression, format_string)``\n+--------------------------------------\n+\n+The ``to_char`` function converts a timestamp, interval or numeric value to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1OTk5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a timezone), ``interval`` or a ``numeric`` type.\n          \n          \n            \n            a timezone), ``interval``, or a ``numeric`` type.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531159990", "createdAt": "2020-11-26T17:23:46Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1086,6 +1086,181 @@ It has two variants depending on the type of ``timestamp``:\n     +--------------+------------------+\n     SELECT 1 row in set (... sec)\n \n+\n+``to_char(expression, format_string)``\n+--------------------------------------\n+\n+The ``to_char`` function converts a timestamp, interval or numeric value to\n+a string, based on a given format string.\n+\n+Returns: ``text``\n+\n+Synopsis\n+........\n+\n+::\n+\n+    TO_CHAR( expression, format_string )\n+\n+``expression`` can be any value with the type of ``timestamp`` (with or without\n+a timezone), ``interval`` or a ``numeric`` type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDI5OA==", "bodyText": "it might be a good idea to mark up all the tokens as literals here?", "url": "https://github.com/crate/crate/pull/10826#discussion_r531160298", "createdAt": "2020-11-26T17:24:25Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1086,6 +1086,181 @@ It has two variants depending on the type of ``timestamp``:\n     +--------------+------------------+\n     SELECT 1 row in set (... sec)\n \n+\n+``to_char(expression, format_string)``\n+--------------------------------------\n+\n+The ``to_char`` function converts a timestamp, interval or numeric value to\n+a string, based on a given format string.\n+\n+Returns: ``text``\n+\n+Synopsis\n+........\n+\n+::\n+\n+    TO_CHAR( expression, format_string )\n+\n+``expression`` can be any value with the type of ``timestamp`` (with or without\n+a timezone), ``interval`` or a ``numeric`` type.\n+\n+Format\n+......\n+\n+The syntax for the ``format_string`` differs based the type of the expression.\n+For ``timestamp`` expressions, the syntax follows that of the `Java DateTimeFormatter`_.\n+For reference, the table of permitted tokens is replicated below:\n+\n++-------+------------------------------+------------------------------------------------+\n+| Token | Meaning                      | Examples                                       |\n++=======+==============================+================================================+\n+| G     | Era                          | AD; Anno Domini; A                             |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDM4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For documentation on how to achieve the short, full and narrow forms of the\n          \n          \n            \n            For documentation on how to achieve the short, full, and narrow forms of the", "url": "https://github.com/crate/crate/pull/10826#discussion_r531160388", "createdAt": "2020-11-26T17:24:39Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1086,6 +1086,181 @@ It has two variants depending on the type of ``timestamp``:\n     +--------------+------------------+\n     SELECT 1 row in set (... sec)\n \n+\n+``to_char(expression, format_string)``\n+--------------------------------------\n+\n+The ``to_char`` function converts a timestamp, interval or numeric value to\n+a string, based on a given format string.\n+\n+Returns: ``text``\n+\n+Synopsis\n+........\n+\n+::\n+\n+    TO_CHAR( expression, format_string )\n+\n+``expression`` can be any value with the type of ``timestamp`` (with or without\n+a timezone), ``interval`` or a ``numeric`` type.\n+\n+Format\n+......\n+\n+The syntax for the ``format_string`` differs based the type of the expression.\n+For ``timestamp`` expressions, the syntax follows that of the `Java DateTimeFormatter`_.\n+For reference, the table of permitted tokens is replicated below:\n+\n++-------+------------------------------+------------------------------------------------+\n+| Token | Meaning                      | Examples                                       |\n++=======+==============================+================================================+\n+| G     | Era                          | AD; Anno Domini; A                             |\n++-------+------------------------------+------------------------------------------------+\n+| u     | Year                         | 2020; 20                                       |\n++-------+------------------------------+------------------------------------------------+\n+| y     | Year of Era                  | 2020; 20                                       |\n++-------+------------------------------+------------------------------------------------+\n+| D     | Day of Year                  | 201                                            |\n++-------+------------------------------+------------------------------------------------+\n+| M     | Month of Year (Numeric/Text) | 6; 06; Jul; July                               |\n++-------+------------------------------+------------------------------------------------+\n+| L     | Month of Year (Narrow Text)  | J                                              |\n++-------+------------------------------+------------------------------------------------+\n+| d     | Day of Month                 | 20                                             |\n++-------+------------------------------+------------------------------------------------+\n+| Q     | Quarter of Year (Numeric)    | 2; 02                                          |\n++-------+------------------------------+------------------------------------------------+\n+| q     | Quarter of Year (Text)       | Q2; 2nd quarter                                |\n++-------+------------------------------+------------------------------------------------+\n+| Y     | Week Based Year              | 1996; 96                                       |\n++-------+------------------------------+------------------------------------------------+\n+| w     | Week of Week Based Year      | 27                                             |\n++-------+------------------------------+------------------------------------------------+\n+| W     | Week of Month                | 3                                              |\n++-------+------------------------------+------------------------------------------------+\n+| E     | Day of Week                  | Tue; Tuesday; T                                |\n++-------+------------------------------+------------------------------------------------+\n+| e     | Day of Week (Numeric)        | 2; 02                                          |\n++-------+------------------------------+------------------------------------------------+\n+| F     | Week of Month                | 3                                              |\n++-------+------------------------------+------------------------------------------------+\n+| a     | AM/PM of Day                 | PM                                             |\n++-------+------------------------------+------------------------------------------------+\n+| h     | Clock Hour (1-12)            | 11                                             |\n++-------+------------------------------+------------------------------------------------+\n+| K     | Hour (0-11)                  | 0                                              |\n++-------+------------------------------+------------------------------------------------+\n+| k     | Clock Hour (1-24)            | 23                                             |\n++-------+------------------------------+------------------------------------------------+\n+| H     | Hour of Day (0-23)           | 14                                             |\n++-------+------------------------------+------------------------------------------------+\n+| m     | Minute of Hour               | 30                                             |\n++-------+------------------------------+------------------------------------------------+\n+| s     | Second of Minute             | 55                                             |\n++-------+------------------------------+------------------------------------------------+\n+| S     | Fraction of Second           | 978                                            |\n++-------+------------------------------+------------------------------------------------+\n+| A     | Millisecond of Day           | 1234                                           |\n++-------+------------------------------+------------------------------------------------+\n+| n     | Nanosecond of Second         | 987654321                                      |\n++-------+------------------------------+------------------------------------------------+\n+| N     | Nanosecond of Day            | 1234000000                                     |\n++-------+------------------------------+------------------------------------------------+\n+| V     | Timezone ID                  | America/Los_Angeles; Z; -08:30                 |\n++-------+------------------------------+------------------------------------------------+\n+| z     | Timezone Name                | Pacific Standard Time: PST                     |\n++-------+------------------------------+------------------------------------------------+\n+| O     | Localized Zone-Offset        | GMT+8; GMT+08:00; UTC-08:00;                   |\n++-------+------------------------------+------------------------------------------------+\n+| X     | Zone Offset (Z for zero)     | Z; -08; -0830; -08:30; -083015; -08:30:15;     |\n++-------+------------------------------+------------------------------------------------+\n+| x     | Zone Offset                  | +0000; -08; -0830; -08:30; -083015; -08:30:15; |\n++-------+------------------------------+------------------------------------------------+\n+| Z     | Zone Offset                  | +0000; -0800; -08:00;                          |\n++-------+------------------------------+------------------------------------------------+\n+| p     | Pad Next                     | 1                                              |\n++-------+------------------------------+------------------------------------------------+\n+| '     | Escape for Text              |                                                |\n++-------+------------------------------+------------------------------------------------+\n+| ''    | Single Quote                 | '                                              |\n++-------+------------------------------+------------------------------------------------+\n+| [     | Begin Optional Section       |                                                |\n++-------+------------------------------+------------------------------------------------+\n+| ]     | End Optional Section         |                                                |\n++-------+------------------------------+------------------------------------------------+\n+\n+For documentation on how to achieve the short, full and narrow forms of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2MDUzNA==", "bodyText": "same comment as above re marking up symbols as literals", "url": "https://github.com/crate/crate/pull/10826#discussion_r531160534", "createdAt": "2020-11-26T17:24:58Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1086,6 +1086,181 @@ It has two variants depending on the type of ``timestamp``:\n     +--------------+------------------+\n     SELECT 1 row in set (... sec)\n \n+\n+``to_char(expression, format_string)``\n+--------------------------------------\n+\n+The ``to_char`` function converts a timestamp, interval or numeric value to\n+a string, based on a given format string.\n+\n+Returns: ``text``\n+\n+Synopsis\n+........\n+\n+::\n+\n+    TO_CHAR( expression, format_string )\n+\n+``expression`` can be any value with the type of ``timestamp`` (with or without\n+a timezone), ``interval`` or a ``numeric`` type.\n+\n+Format\n+......\n+\n+The syntax for the ``format_string`` differs based the type of the expression.\n+For ``timestamp`` expressions, the syntax follows that of the `Java DateTimeFormatter`_.\n+For reference, the table of permitted tokens is replicated below:\n+\n++-------+------------------------------+------------------------------------------------+\n+| Token | Meaning                      | Examples                                       |\n++=======+==============================+================================================+\n+| G     | Era                          | AD; Anno Domini; A                             |\n++-------+------------------------------+------------------------------------------------+\n+| u     | Year                         | 2020; 20                                       |\n++-------+------------------------------+------------------------------------------------+\n+| y     | Year of Era                  | 2020; 20                                       |\n++-------+------------------------------+------------------------------------------------+\n+| D     | Day of Year                  | 201                                            |\n++-------+------------------------------+------------------------------------------------+\n+| M     | Month of Year (Numeric/Text) | 6; 06; Jul; July                               |\n++-------+------------------------------+------------------------------------------------+\n+| L     | Month of Year (Narrow Text)  | J                                              |\n++-------+------------------------------+------------------------------------------------+\n+| d     | Day of Month                 | 20                                             |\n++-------+------------------------------+------------------------------------------------+\n+| Q     | Quarter of Year (Numeric)    | 2; 02                                          |\n++-------+------------------------------+------------------------------------------------+\n+| q     | Quarter of Year (Text)       | Q2; 2nd quarter                                |\n++-------+------------------------------+------------------------------------------------+\n+| Y     | Week Based Year              | 1996; 96                                       |\n++-------+------------------------------+------------------------------------------------+\n+| w     | Week of Week Based Year      | 27                                             |\n++-------+------------------------------+------------------------------------------------+\n+| W     | Week of Month                | 3                                              |\n++-------+------------------------------+------------------------------------------------+\n+| E     | Day of Week                  | Tue; Tuesday; T                                |\n++-------+------------------------------+------------------------------------------------+\n+| e     | Day of Week (Numeric)        | 2; 02                                          |\n++-------+------------------------------+------------------------------------------------+\n+| F     | Week of Month                | 3                                              |\n++-------+------------------------------+------------------------------------------------+\n+| a     | AM/PM of Day                 | PM                                             |\n++-------+------------------------------+------------------------------------------------+\n+| h     | Clock Hour (1-12)            | 11                                             |\n++-------+------------------------------+------------------------------------------------+\n+| K     | Hour (0-11)                  | 0                                              |\n++-------+------------------------------+------------------------------------------------+\n+| k     | Clock Hour (1-24)            | 23                                             |\n++-------+------------------------------+------------------------------------------------+\n+| H     | Hour of Day (0-23)           | 14                                             |\n++-------+------------------------------+------------------------------------------------+\n+| m     | Minute of Hour               | 30                                             |\n++-------+------------------------------+------------------------------------------------+\n+| s     | Second of Minute             | 55                                             |\n++-------+------------------------------+------------------------------------------------+\n+| S     | Fraction of Second           | 978                                            |\n++-------+------------------------------+------------------------------------------------+\n+| A     | Millisecond of Day           | 1234                                           |\n++-------+------------------------------+------------------------------------------------+\n+| n     | Nanosecond of Second         | 987654321                                      |\n++-------+------------------------------+------------------------------------------------+\n+| N     | Nanosecond of Day            | 1234000000                                     |\n++-------+------------------------------+------------------------------------------------+\n+| V     | Timezone ID                  | America/Los_Angeles; Z; -08:30                 |\n++-------+------------------------------+------------------------------------------------+\n+| z     | Timezone Name                | Pacific Standard Time: PST                     |\n++-------+------------------------------+------------------------------------------------+\n+| O     | Localized Zone-Offset        | GMT+8; GMT+08:00; UTC-08:00;                   |\n++-------+------------------------------+------------------------------------------------+\n+| X     | Zone Offset (Z for zero)     | Z; -08; -0830; -08:30; -083015; -08:30:15;     |\n++-------+------------------------------+------------------------------------------------+\n+| x     | Zone Offset                  | +0000; -08; -0830; -08:30; -083015; -08:30:15; |\n++-------+------------------------------+------------------------------------------------+\n+| Z     | Zone Offset                  | +0000; -0800; -08:00;                          |\n++-------+------------------------------+------------------------------------------------+\n+| p     | Pad Next                     | 1                                              |\n++-------+------------------------------+------------------------------------------------+\n+| '     | Escape for Text              |                                                |\n++-------+------------------------------+------------------------------------------------+\n+| ''    | Single Quote                 | '                                              |\n++-------+------------------------------+------------------------------------------------+\n+| [     | Begin Optional Section       |                                                |\n++-------+------------------------------+------------------------------------------------+\n+| ]     | End Optional Section         |                                                |\n++-------+------------------------------+------------------------------------------------+\n+\n+For documentation on how to achieve the short, full and narrow forms of the\n+token outputs, please consult the `Java DateTimeFormatter`_ documentation.\n+\n+::\n+\n+    cr> select to_char(timestamp '1970-01-01T17:31:12', 'EEEE, LLLL d - h:m a uuuu G') as ts;\n+    +---------------------------------------+\n+    | ts                                    |\n+    +---------------------------------------+\n+    | Thursday, January 1 - 5:31 PM 1970 AD |\n+    +---------------------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+For ``interval`` expressions, the formatting string is discard and the interval\n+is returned in a standard form:\n+\n+::\n+\n+    cr> select to_char(interval '1-2 3 4:5:6', '') as interval;\n+    +------------------------------------------------------------+\n+    | interval                                                   |\n+    +------------------------------------------------------------+\n+    | 1 year, 2 months, 3 days, 4 hours, 5 minutes and 6 seconds |\n+    +------------------------------------------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+For ``numeric`` expressions, the syntax follows that of the `Java DecimalFormat`_.\n+For reference, the table of permitted tokens is replicated below:\n+\n++--------+---------------------+----------------------------------------------------------------------+\n+| Symbol | Location            | Meaning                                                              |\n++========+=====================+======================================================================+\n+| 0      | Number              | Digit                                                                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODQyMzE4", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-539842318", "createdAt": "2020-11-27T09:51:04Z", "commit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1MTowNVrOH63uyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo1NjozNFrOH637JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MjU1Mg==", "bodyText": "is it absolutely necessary to use joda time? I think we were actually moving away from it in favour of java time.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531492552", "createdAt": "2020-11-27T09:51:05Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.IntervalType;\n+import org.joda.time.Period;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NDkzMQ==", "bodyText": "What do you think of using BinaryScalar and keeping the evaluate logic a bit more separated instead of having a generic function and then check for the type in the evaluate each time when it is executed? See CoordinateFunction or RoundFunction.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531494931", "createdAt": "2020-11-27T09:55:19Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.IntervalType;\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+import io.crate.types.TimestampType;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.stream.Stream;\n+\n+public class ToCharFunction extends Scalar<String, Object> {\n+\n+    public static final String NAME = \"to_char\";\n+\n+    public static void register(ScalarFunctionModule module) {\n+        Stream.of(DataTypes.NUMERIC_PRIMITIVE_TYPES, List.of(DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP, DataTypes.INTERVAL))\n+            .flatMap(Collection::stream)\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ), ToCharFunction::new\n+                );\n+            });\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    public ToCharFunction(Signature signature, Signature boundSignature) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<Object>... args) {\n+        Literal expression = (Literal) args[0];\n+        int dataType = expression.valueType().id();\n+        if (TimestampType.ID_WITH_TZ == dataType) {\n+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(String.valueOf(args[1].value()),\n+                                                                      Locale.ENGLISH);\n+            Long ts = DataTypes.TIMESTAMPZ.sanitizeValue(args[0].value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5NTcxNw==", "bodyText": "it can result in NPE. You would have to do the null check yourself or if you use BinaryScalar, this case will be already taken care of.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531495717", "createdAt": "2020-11-27T09:56:34Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.IntervalType;\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+import io.crate.types.TimestampType;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.stream.Stream;\n+\n+public class ToCharFunction extends Scalar<String, Object> {\n+\n+    public static final String NAME = \"to_char\";\n+\n+    public static void register(ScalarFunctionModule module) {\n+        Stream.of(DataTypes.NUMERIC_PRIMITIVE_TYPES, List.of(DataTypes.TIMESTAMPZ, DataTypes.TIMESTAMP, DataTypes.INTERVAL))\n+            .flatMap(Collection::stream)\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ), ToCharFunction::new\n+                );\n+            });\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    public ToCharFunction(Signature signature, Signature boundSignature) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<Object>... args) {\n+        Literal expression = (Literal) args[0];\n+        int dataType = expression.valueType().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTYyNjQy", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-539962642", "createdAt": "2020-11-27T13:00:15Z", "commit": {"oid": "82758a538ff1f330fc1f1a928b866ce761e8b164"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzowMDoxNVrOH69lig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzowMzoyNlrOH69q6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4ODQ5MA==", "bodyText": "maybe we can add some tests for the corner cases, like null handling, etc.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531588490", "createdAt": "2020-11-27T13:00:15Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/expression/scalar/ToCharFunctionTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import org.junit.Test;\n+\n+\n+public class ToCharFunctionTest extends AbstractScalarFunctionsTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82758a538ff1f330fc1f1a928b866ce761e8b164"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4OTg2Nw==", "bodyText": "Yes, it was used there because it seems that it was hard to go with java time in that case, but in I think the general rule we follow is going with java time if it is possible.", "url": "https://github.com/crate/crate/pull/10826#discussion_r531589867", "createdAt": "2020-11-27T13:03:26Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+import io.crate.types.IntervalType;\n+import org.joda.time.Period;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ5MjU1Mg=="}, "originalCommit": {"oid": "608b67d42fdffcabfe1e399338d69c86427c0e69"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd432be5dda8ec9af228259ebe265a70b17d3df8", "author": {"user": {"login": "autophagy", "name": "Mika"}}, "url": "https://github.com/crate/crate/commit/fd432be5dda8ec9af228259ebe265a70b17d3df8", "committedDate": "2020-11-30T11:03:05Z", "message": "Address nomi's comments"}, "afterCommit": {"oid": "5b1e622cd5916a7b2f49497bcbcb517818f8762f", "author": {"user": {"login": "autophagy", "name": "Mika"}}, "url": "https://github.com/crate/crate/commit/5b1e622cd5916a7b2f49497bcbcb517818f8762f", "committedDate": "2020-11-30T11:17:57Z", "message": "Address nomi's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODg4ODA0", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-540888804", "createdAt": "2020-11-30T13:05:34Z", "commit": {"oid": "5b1e622cd5916a7b2f49497bcbcb517818f8762f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowNTozNFrOH76OYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowNTozNFrOH76OYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MTk4NQ==", "bodyText": "you do not really have to pass the argument type explicitly, you can already get it from the bound signature.\nassert boundSignature.getArgumentDataTypes().size() == 1\nboundSignature.getArgumentDataTypes().get(0)", "url": "https://github.com/crate/crate/pull/10826#discussion_r532581985", "createdAt": "2020-11-30T13:05:34Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.function.BiFunction;\n+\n+public class ToCharFunction extends Scalar<String, Object> {\n+\n+    public static final String NAME = \"to_char\";\n+\n+    public static void register(ScalarFunctionModule module) {\n+        List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ).stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            type,\n+                            ToCharFunction::evaluateTimestamp\n+                        )\n+                );\n+            });\n+\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.INTERVAL.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            (signature, boundSignature) ->\n+                new ToCharFunction(\n+                    signature,\n+                    boundSignature,\n+                    DataTypes.INTERVAL,\n+                    ToCharFunction::evaluateInterval\n+                )\n+        );\n+\n+        DataTypes.NUMERIC_PRIMITIVE_TYPES.stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            type,\n+                            ToCharFunction::evaluateNumber\n+                        )\n+                );\n+            });\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final DataType expressionType;\n+    private final BiFunction<Object, String, String> evaluatorFunc;\n+\n+    public ToCharFunction(Signature signature, Signature boundSignature, DataType expressionType, BiFunction<Object, String, String> evaluatorFunc) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.expressionType = expressionType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e622cd5916a7b2f49497bcbcb517818f8762f"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODg5NzYx", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-540889761", "createdAt": "2020-11-30T13:06:49Z", "commit": {"oid": "5b1e622cd5916a7b2f49497bcbcb517818f8762f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowNjo0OVrOH76RNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzowNjo0OVrOH76RNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU4MjcxMQ==", "bodyText": "maybe we can reuse an instance of PeriodFormatter instead of initializing it on each function call.", "url": "https://github.com/crate/crate/pull/10826#discussion_r532582711", "createdAt": "2020-11-30T13:06:49Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.function.BiFunction;\n+\n+public class ToCharFunction extends Scalar<String, Object> {\n+\n+    public static final String NAME = \"to_char\";\n+\n+    public static void register(ScalarFunctionModule module) {\n+        List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ).stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            type,\n+                            ToCharFunction::evaluateTimestamp\n+                        )\n+                );\n+            });\n+\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.INTERVAL.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            (signature, boundSignature) ->\n+                new ToCharFunction(\n+                    signature,\n+                    boundSignature,\n+                    DataTypes.INTERVAL,\n+                    ToCharFunction::evaluateInterval\n+                )\n+        );\n+\n+        DataTypes.NUMERIC_PRIMITIVE_TYPES.stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            type,\n+                            ToCharFunction::evaluateNumber\n+                        )\n+                );\n+            });\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final DataType expressionType;\n+    private final BiFunction<Object, String, String> evaluatorFunc;\n+\n+    public ToCharFunction(Signature signature, Signature boundSignature, DataType expressionType, BiFunction<Object, String, String> evaluatorFunc) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.expressionType = expressionType;\n+        this.evaluatorFunc = evaluatorFunc;\n+    }\n+\n+    private static String evaluateTimestamp(Object timestamp, String pattern) {\n+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern,\n+                                                                  Locale.ENGLISH);\n+        Long ts = DataTypes.TIMESTAMPZ.sanitizeValue(timestamp);\n+        LocalDateTime dateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(ts),\n+                                                         TimeZone.getTimeZone(\"UTC\").toZoneId());\n+        return formatter.format(dateTime);\n+    }\n+\n+    private static String evaluateInterval(Object interval, String pattern) {\n+        PeriodFormatter formatter = PeriodFormat.getDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b1e622cd5916a7b2f49497bcbcb517818f8762f"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzkxNTQw", "url": "https://github.com/crate/crate/pull/10826#pullrequestreview-541791540", "createdAt": "2020-12-01T11:10:15Z", "commit": {"oid": "30297ccccde26a4641aadf9675c472e1d37eaaa1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToxMDoxNlrOH8nthQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToxMDoxNlrOH8nthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNzIzNw==", "bodyText": "maybe add a message to the assertion, otherwise ack", "url": "https://github.com/crate/crate/pull/10826#discussion_r533327237", "createdAt": "2020-12-01T11:10:16Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/ToCharFunction.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar;\n+\n+import io.crate.data.Input;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataType;\n+import io.crate.types.DataTypes;\n+import org.joda.time.Period;\n+import org.joda.time.format.PeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n+\n+import java.text.DecimalFormat;\n+import java.text.NumberFormat;\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.util.function.BiFunction;\n+\n+public class ToCharFunction extends Scalar<String, Object> {\n+\n+    public static final String NAME = \"to_char\";\n+\n+    public static void register(ScalarFunctionModule module) {\n+        List.of(DataTypes.TIMESTAMP, DataTypes.TIMESTAMPZ).stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            ToCharFunction::evaluateTimestamp\n+                        )\n+                );\n+            });\n+\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.INTERVAL.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            (signature, boundSignature) ->\n+                new ToCharFunction(\n+                    signature,\n+                    boundSignature,\n+                    ToCharFunction::evaluateInterval\n+                )\n+        );\n+\n+        DataTypes.NUMERIC_PRIMITIVE_TYPES.stream()\n+            .forEach(type -> {\n+                module.register(\n+                    Signature.scalar(\n+                        NAME,\n+                        type.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature(),\n+                        DataTypes.STRING.getTypeSignature()\n+                    ),\n+                    (signature, boundSignature) ->\n+                        new ToCharFunction(\n+                            signature,\n+                            boundSignature,\n+                            ToCharFunction::evaluateNumber\n+                        )\n+                );\n+            });\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private final DataType expressionType;\n+    private final BiFunction<Object, String, String> evaluatorFunc;\n+\n+    private static final PeriodFormatter PERIOD_FORMATTER = PeriodFormat.getDefault();\n+\n+    public ToCharFunction(Signature signature, Signature boundSignature, BiFunction<Object, String, String> evaluatorFunc) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+\n+        assert boundSignature.getArgumentDataTypes().size() == 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30297ccccde26a4641aadf9675c472e1d37eaaa1"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16e3ab2403f909184e002c1ee144d4c25d17f81", "author": {"user": {"login": "autophagy", "name": "Mika"}}, "url": "https://github.com/crate/crate/commit/f16e3ab2403f909184e002c1ee144d4c25d17f81", "committedDate": "2020-12-01T13:26:17Z", "message": "Add to_char scalar function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01686ee0b78e759a0b745baa597719fa2ec245c9", "author": {"user": {"login": "autophagy", "name": "Mika"}}, "url": "https://github.com/crate/crate/commit/01686ee0b78e759a0b745baa597719fa2ec245c9", "committedDate": "2020-12-01T13:25:49Z", "message": "fixup! Use static final period formatter for interval formatting"}, "afterCommit": {"oid": "f16e3ab2403f909184e002c1ee144d4c25d17f81", "author": {"user": {"login": "autophagy", "name": "Mika"}}, "url": "https://github.com/crate/crate/commit/f16e3ab2403f909184e002c1ee144d4c25d17f81", "committedDate": "2020-12-01T13:26:17Z", "message": "Add to_char scalar function"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3664, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}