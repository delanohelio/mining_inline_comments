{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODQ1NjAx", "number": 9817, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDoyN1rODssPaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDoxM1rODsshrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg4Nzc2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDoyN1rOF9rncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDoyN1rOF9rncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjA2NQ==", "bodyText": "Please don't mutate AST structures,  they can be cached via prepared statements and should be immutable", "url": "https://github.com/crate/crate/pull/9817#discussion_r400222065", "createdAt": "2020-03-30T14:10:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -72,6 +86,12 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n         // convert and validate the column name\n         ExpressionToColumnIdentVisitor.convert(tableElement.name());\n \n+        // 1st phase, exclude check constraints (their expressions contain column references)\n+        List<ColumnConstraint<Expression>> checkColumnConstraints = tableElement.constraints()\n+            .stream()\n+            .filter(CheckColumnConstraint.class::isInstance)\n+            .collect(Collectors.toList());\n+        tableElement.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg5OTg1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMzowMVrOF9rvJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMzowMVrOF9rvJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNDAzOA==", "bodyText": "Could use Lists2.map", "url": "https://github.com/crate/crate/pull/9817#discussion_r400224038", "createdAt": "2020-03-30T14:13:01Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -82,8 +102,66 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n             x -> exprAnalyzerWithReferenceResolver.convert(x, exprCtx));\n         AnalyzedTableElements<Symbol> analyzedTableElementsWithExpressions = TableElementsAnalyzer.analyze(\n             singletonList(addColumnDefinitionWithExpression), tableInfo.ident(), tableInfo);\n+        // now analyze possible check expressions\n+        var checkColumnConstraintsAnalyzer = new ExpressionAnalyzer(\n+            functions,\n+            txnCtx,\n+            paramTypeHints,\n+            new SelfReferenceFieldProvider(\n+                tableInfo.ident(), referenceResolver, analyzedTableElementsWithExpressions.columns()),\n+            null);\n+        List<ColumnConstraint<Symbol>> analyzedCheckColumnConstraints = checkColumnConstraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkxNzUyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNjo0MVrOF9r6bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNjo0MVrOF9r6bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNjkyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // exposed for testing\n          \n          \n            \n                @VisibleForTesting", "url": "https://github.com/crate/crate/pull/9817#discussion_r400226925", "createdAt": "2020-03-30T14:16:41Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkyMTMwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNzoyN1rOF9r8yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNzoyN1rOF9r8yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNzUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();\n          \n          \n            \n                    return Map.<String, String>copyOf(checkConstraints);", "url": "https://github.com/crate/crate/pull/9817#discussion_r400227530", "createdAt": "2020-03-30T14:17:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing\n+    Map<String, String> getCheckConstraints() {\n+        return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkzMjI5OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxOTo0NFrOF9sDlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxOTo0NFrOF9sDlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTI2OA==", "bodyText": "Maybe use Maps.getByPath", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229268", "createdAt": "2020-03-30T14:19:44Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1204,6 +1214,52 @@ private void assertDuplicatePrimaryKey(String stmt) {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithCheckConstraints() {\n+        String stmt = \"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\";\n+        BoundCreateTable analysis = analyze(stmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+    }\n+\n+    @Test\n+    public void testAlterTableAddColumnWithCheckConstraint() throws Exception {\n+        SQLExecutor executor = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\")\n+            .build();\n+        String alterStmt = \"alter table t add column bazinga int constraint bazinga_check check(bazinga != 42);\";\n+        BoundAddColumn analysis = analyze(alterStmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+        assertEquals(checkConstraints.get(\"bazinga_check\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"bazinga_check\"));\n+    }\n+\n+    private static String fetchMapping(Map<String, Object> root, String... path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkzNDUzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDoxM1rOF9sE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDoxM1rOF9sE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTYyNw==", "bodyText": "This could be an analyzer test. No execution layer necessary.", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229627", "createdAt": "2020-03-30T14:20:13Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -356,6 +356,24 @@ public void test_create_table_with_check_fail_on_update() {\n         execute(\"update t set qty = -1 where id = 0\");\n     }\n \n+    @Test\n+    public void test_alter_table_add_column_fails_because_check_constaint_refers_to_other_columns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1556, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}