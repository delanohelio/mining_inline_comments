{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNjIzNjI0", "number": 10578, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODo1M1rOEmdC4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoyNFrOEme1Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzU3MjE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODo1M1rOHWe8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0NjoyNVrOHWhxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg==", "bodyText": "I'm not sure if this is the behavior we want? Maybe if wantedBytes is less than minAcceptableBytes we should fail?", "url": "https://github.com/crate/crate/pull/10578#discussion_r493337612", "createdAt": "2020-09-23T08:58:53Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -136,7 +136,7 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes == wantedBytes) {\n+        if (minAcceptableBytes >= wantedBytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8569de2be095910a60ee4557ce2874ca11cecf3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM2MzYwNw==", "bodyText": "Maybe if wantedBytes is less than minAcceptableBytes we should fail?\n\nSounds valid, otherwise it seems that the minAcceptableBytes intention is somehow by-passed.", "url": "https://github.com/crate/crate/pull/10578#discussion_r493363607", "createdAt": "2020-09-23T09:25:46Z", "author": {"login": "seut"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -136,7 +136,7 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes == wantedBytes) {\n+        if (minAcceptableBytes >= wantedBytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg=="}, "originalCommit": {"oid": "8569de2be095910a60ee4557ce2874ca11cecf3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4Mzk0Mg==", "bodyText": "@seut pushed a fixup.\nAdded a IllegalArgument case to the CircuitBreaker and raise the CircuitBreakingException outside. Felt like the more accurate separation of concerns. If the callee of addBytesRangeAndMaybeBreak needs less bytes than what it declares as acceptable, it is doing something wrong and needs to handle that case itself.", "url": "https://github.com/crate/crate/pull/10578#discussion_r493383942", "createdAt": "2020-09-23T09:46:25Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/org/elasticsearch/common/breaker/ChildMemoryCircuitBreaker.java", "diffHunk": "@@ -136,7 +136,7 @@ public double addEstimateBytesAndMaybeBreak(long bytes, String label) throws Cir\n \n     @Override\n     public long addBytesRangeAndMaybeBreak(long minAcceptableBytes, long wantedBytes, String label) throws CircuitBreakingException {\n-        if (minAcceptableBytes == wantedBytes) {\n+        if (minAcceptableBytes >= wantedBytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzYxMg=="}, "originalCommit": {"oid": "8569de2be095910a60ee4557ce2874ca11cecf3c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Nzg2NDY3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0ODoyNFrOHWh4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo1MzoxNFrOHWiKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTc3OA==", "bodyText": "If free is > 5 MB, but  free * 0.15 isn't, we should probably still allow it?", "url": "https://github.com/crate/crate/pull/10578#discussion_r493385778", "createdAt": "2020-09-23T09:48:24Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -254,15 +256,33 @@ private boolean shouldPauseOnPartitionCreation(ShardedRequests<ShardUpsertReques\n         return false;\n     }\n \n+    static long reserveBytes(CircuitBreaker circuitBreaker) {\n+        long minAcceptableBytes = ByteSizeUnit.MB.toBytes(5);\n+        long free = circuitBreaker.getFree();\n+        long wantedBytes = (long) (free * BREAKER_LIMIT_PERCENTAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d3bdbaccfaa5da1b163fdfb7de83e7fe47c7820"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM5MDUxMg==", "bodyText": "\ud83d\udc4d  good point", "url": "https://github.com/crate/crate/pull/10578#discussion_r493390512", "createdAt": "2020-09-23T09:53:14Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/execution/engine/indexing/ShardingUpsertExecutor.java", "diffHunk": "@@ -254,15 +256,33 @@ private boolean shouldPauseOnPartitionCreation(ShardedRequests<ShardUpsertReques\n         return false;\n     }\n \n+    static long reserveBytes(CircuitBreaker circuitBreaker) {\n+        long minAcceptableBytes = ByteSizeUnit.MB.toBytes(5);\n+        long free = circuitBreaker.getFree();\n+        long wantedBytes = (long) (free * BREAKER_LIMIT_PERCENTAGE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NTc3OA=="}, "originalCommit": {"oid": "5d3bdbaccfaa5da1b163fdfb7de83e7fe47c7820"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1022, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}