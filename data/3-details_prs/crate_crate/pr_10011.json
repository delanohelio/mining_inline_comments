{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODU5Mjcz", "number": 10011, "title": "Introduce clear boundaries between implicit, explicit and try cast functions.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-27T13:38:45Z", "url": "https://github.com/crate/crate/pull/10011", "merged": true, "mergeCommit": {"oid": "b772cfdccf9dec566827e18e7728f589152d2469"}, "closed": true, "closedAt": "2020-06-02T07:54:10Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclZnxggFqTQxOTIzMDAyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnPlr2AH2gAyNDIzODU5MjczOjAyNzU0N2E3MTI5NTMwZjM1MTc2OWQ2YmEzZWQ3MzZhNDZlNTdkZWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjMwMDIw", "url": "https://github.com/crate/crate/pull/10011#pullrequestreview-419230020", "createdAt": "2020-05-27T13:52:21Z", "commit": {"oid": "3394af88ce64c0024505b0e2b5f9d9af9cac31ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MjoyMVrOGbLNQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MjoyMVrOGbLNQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODM1Mw==", "bodyText": "probably cast(Object value, boolean explicitCast) should be ok?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431148353", "createdAt": "2020-05-27T13:52:21Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -82,6 +83,17 @@\n \n     public abstract Streamer<T> streamer();\n \n+    /**\n+     * Must be used only in the cast functions.\n+     *\n+     * @param value The value to cast to the target {@link DataType}.\n+     * @param mode  The {@link CastMode} mode.\n+     * @return The value of the target {@link DataType}.\n+     */\n+    public T cast(Object value, CastMode mode) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3394af88ce64c0024505b0e2b5f9d9af9cac31ca"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8fb4941c2a57efa368cedd6448ee2578fe22d47", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e8fb4941c2a57efa368cedd6448ee2578fe22d47", "committedDate": "2020-05-27T15:37:35Z", "message": "fixup! WIP: Add a dedicated DataType#cast method."}, "afterCommit": {"oid": "598d77e76bf1e96cc4d34cc353427ba439be8140", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/598d77e76bf1e96cc4d34cc353427ba439be8140", "committedDate": "2020-05-28T08:47:45Z", "message": "fixup! Add explicit and explicit cast methods for data types."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "598d77e76bf1e96cc4d34cc353427ba439be8140", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/598d77e76bf1e96cc4d34cc353427ba439be8140", "committedDate": "2020-05-28T08:47:45Z", "message": "fixup! Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "5704e9d2ac75140a2303313b3070f0c4fdcb080e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5704e9d2ac75140a2303313b3070f0c4fdcb080e", "committedDate": "2020-05-28T08:49:57Z", "message": "Add explicit and explicit cast methods for data types."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5704e9d2ac75140a2303313b3070f0c4fdcb080e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5704e9d2ac75140a2303313b3070f0c4fdcb080e", "committedDate": "2020-05-28T08:49:57Z", "message": "Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/a8af99e7cc866e2a2b1b2996d3fc128870880385", "committedDate": "2020-05-28T08:50:56Z", "message": "Add explicit and explicit cast methods for data types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTExODU0", "url": "https://github.com/crate/crate/pull/10011#pullrequestreview-419911854", "createdAt": "2020-05-28T08:59:19Z", "commit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1OToxOVrOGbsCcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1OToxOVrOGbsCcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4NjI1Nw==", "bodyText": "looks like the default impl so it could be removed.", "url": "https://github.com/crate/crate/pull/10011#discussion_r431686257", "createdAt": "2020-05-28T08:59:19Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        return value(value);\n+    }\n+\n+    @Override\n+    public String explicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTMyNTM5", "url": "https://github.com/crate/crate/pull/10011#pullrequestreview-419932539", "createdAt": "2020-05-28T09:26:25Z", "commit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyNjoyNVrOGbs_JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToyNjoyNVrOGbs_JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwMTc5Ng==", "bodyText": "I am not sure about this point, both implicit and explicit cast functions are printed under the same name cast now. I think it would be better to print implicit cast function under its own name _cast and adjust tests. wdyt?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431701796", "createdAt": "2020-05-28T09:26:25Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/symbol/Function.java", "diffHunk": "@@ -364,7 +367,12 @@ private void printCastFunction(StringBuilder builder, Style style) {\n         } else {\n             asTypeName = \" AS \" + dataType.getName();\n         }\n-        builder.append(info.ident().name())\n+        var name = info.ident().name();\n+        // print cast implicit function under 'cast' name.\n+        if (name.equalsIgnoreCase(IMPLICIT_CAST_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8af99e7cc866e2a2b1b2996d3fc128870880385", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/a8af99e7cc866e2a2b1b2996d3fc128870880385", "committedDate": "2020-05-28T08:50:56Z", "message": "Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "bdece1fe7ede8465cd663d1bb68f89a23daacfe2", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/bdece1fe7ede8465cd663d1bb68f89a23daacfe2", "committedDate": "2020-05-28T13:27:50Z", "message": "Add explicit and explicit cast methods for data types."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdece1fe7ede8465cd663d1bb68f89a23daacfe2", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/bdece1fe7ede8465cd663d1bb68f89a23daacfe2", "committedDate": "2020-05-28T13:27:50Z", "message": "Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/87e7c819d475d5ab69c968f923c869c3af05f07f", "committedDate": "2020-05-28T13:47:50Z", "message": "Add explicit and explicit cast methods for data types."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjA1MDc1", "url": "https://github.com/crate/crate/pull/10011#pullrequestreview-420205075", "createdAt": "2020-05-28T15:03:00Z", "commit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowMzowMFrOGb5jrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTowNTowN1rOGb5ppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNzc1OQ==", "bodyText": "I wonder if we should make 3 concrete implementations instead.  At this point pretty much everything this function does is abstracted away.  WDYT?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431907759", "createdAt": "2020-05-28T15:03:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -55,45 +56,80 @@ public static void register(ScalarFunctionModule module) {\n                     parseTypeSignature(\"V\"),\n                     parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                },\n-                (argument, returnType) -> {\n-                    throw new ConversionException(argument, returnType);\n-                }\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n         module.register(\n             Signature\n-                .scalar(TRY_CAST_NAME,\n-                        parseTypeSignature(\"E\"),\n-                        parseTypeSignature(\"V\"),\n-                        parseTypeSignature(\"V\"))\n+                .scalar(\n+                    TRY_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n                 .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n-            (signature, args) -> new CastFunction(\n-                new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), args.get(1)),\n-                signature,\n-                (argument, returnType) -> Literal.NULL,\n-                (argument, returnType) -> null\n-            )\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(TRY_CAST_NAME, args), targetType),\n+                    targetType::explicitCast,\n+                    signature,\n+                    (argument, returnType) -> Literal.NULL,\n+                    (argument, returnType) -> null\n+                );\n+            }\n+        );\n+        module.register(\n+            Signature\n+                .scalar(\n+                    IMPLICIT_CAST_NAME,\n+                    parseTypeSignature(\"E\"),\n+                    parseTypeSignature(\"V\"),\n+                    parseTypeSignature(\"V\"))\n+                .withTypeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\")),\n+            (signature, args) -> {\n+                var targetType = args.get(1);\n+                return new CastFunction(\n+                    new FunctionInfo(new FunctionIdent(IMPLICIT_CAST_NAME, args), targetType),\n+                    targetType::implicitCast,\n+                    signature,\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    },\n+                    (argument, returnType) -> {\n+                        throw new ConversionException(argument, returnType);\n+                    }\n+                );\n+            }\n         );\n     }\n \n \n     private final DataType<?> returnType;\n+    private final Function<Object, Object> cast;\n     private final FunctionInfo info;\n     private final Signature signature;\n     private final BiFunction<Symbol, DataType<?>, Symbol> onNormalizeException;\n     private final BiFunction<Object, DataType<?>, Object> onEvaluateException;\n \n     private CastFunction(FunctionInfo info,\n+                         Function<Object, Object> cast,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwOTI4Ng==", "bodyText": "could this replace value already,  or should we look later into stripping down value?", "url": "https://github.com/crate/crate/pull/10011#discussion_r431909286", "createdAt": "2020-05-28T15:05:07Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/IpType.java", "diffHunk": "@@ -35,6 +35,16 @@ public int id() {\n         return ID;\n     }\n \n+    @Override\n+    public String implicitCast(Object value) throws IllegalArgumentException, ClassCastException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e7c819d475d5ab69c968f923c869c3af05f07f"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df0cb794006b25ee43a8dcbdeda37e3c9bde42c6", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/df0cb794006b25ee43a8dcbdeda37e3c9bde42c6", "committedDate": "2020-05-29T09:51:59Z", "message": "fixup! Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "ae09ff1589eccfb334944e6ceb42e6e5d9bed8a1", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ae09ff1589eccfb334944e6ceb42e6e5d9bed8a1", "committedDate": "2020-05-29T10:44:45Z", "message": "fixup! Add explicit and explicit cast methods for data types."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae09ff1589eccfb334944e6ceb42e6e5d9bed8a1", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ae09ff1589eccfb334944e6ceb42e6e5d9bed8a1", "committedDate": "2020-05-29T10:44:45Z", "message": "fixup! Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "73dcae2ce2b081c13511cb326b662c0a91743b2b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/73dcae2ce2b081c13511cb326b662c0a91743b2b", "committedDate": "2020-05-29T10:46:23Z", "message": "fixup! Add explicit and explicit cast methods for data types."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ffd91fb80b613ed950445c6ba838f741d6def4a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3ffd91fb80b613ed950445c6ba838f741d6def4a", "committedDate": "2020-05-29T15:02:27Z", "message": "Replace `Symbol#cast` cast mode flags with the CastMode enum."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fbec16dc24a980961a86f3a23ffaa27eb6beea6", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/5fbec16dc24a980961a86f3a23ffaa27eb6beea6", "committedDate": "2020-05-29T15:02:27Z", "message": "Split cast functions into implicit, explicit, try cast functions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73dcae2ce2b081c13511cb326b662c0a91743b2b", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/73dcae2ce2b081c13511cb326b662c0a91743b2b", "committedDate": "2020-05-29T10:46:23Z", "message": "fixup! Add explicit and explicit cast methods for data types."}, "afterCommit": {"oid": "3ea995a95866457747caf36a7f14393bdcb054d3", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3ea995a95866457747caf36a7f14393bdcb054d3", "committedDate": "2020-05-29T15:02:27Z", "message": "Make the second _cast argument to accept the target type as a string."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ea995a95866457747caf36a7f14393bdcb054d3", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3ea995a95866457747caf36a7f14393bdcb054d3", "committedDate": "2020-05-29T15:02:27Z", "message": "Make the second _cast argument to accept the target type as a string."}, "afterCommit": {"oid": "83d67b0e9ede40147511cd2953a5fd15fb7074e6", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/83d67b0e9ede40147511cd2953a5fd15fb7074e6", "committedDate": "2020-05-29T15:09:36Z", "message": "Make the second _cast argument to accept the target type as a string."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe6a17b0db1954a06956deefefc85a69e50015a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0fe6a17b0db1954a06956deefefc85a69e50015a", "committedDate": "2020-05-29T15:28:18Z", "message": "Make the second _cast argument to accept the target type as a string."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83d67b0e9ede40147511cd2953a5fd15fb7074e6", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/83d67b0e9ede40147511cd2953a5fd15fb7074e6", "committedDate": "2020-05-29T15:09:36Z", "message": "Make the second _cast argument to accept the target type as a string."}, "afterCommit": {"oid": "0fe6a17b0db1954a06956deefefc85a69e50015a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0fe6a17b0db1954a06956deefefc85a69e50015a", "committedDate": "2020-05-29T15:28:18Z", "message": "Make the second _cast argument to accept the target type as a string."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzk3OTk0", "url": "https://github.com/crate/crate/pull/10011#pullrequestreview-421397994", "createdAt": "2020-05-30T11:16:42Z", "commit": {"oid": "0fe6a17b0db1954a06956deefefc85a69e50015a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027547a7129530f351769d6ba3ed736a46e57ded", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/027547a7129530f351769d6ba3ed736a46e57ded", "committedDate": "2020-06-02T07:18:52Z", "message": "Merge branch 'master' into r/varchar-data-type-cast-method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}