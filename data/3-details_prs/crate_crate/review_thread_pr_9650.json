{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzI1MDg5", "number": 9650, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNzo1NlrODe2hdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNjozMFrODfIGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc3MTc0OnYy", "diffSide": "RIGHT", "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNzo1NlrOFoN2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozNzo1NlrOFoN2kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNDMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                                Consumer<Throwable> beforeExceptional) {\n          \n          \n            \n                                                                Consumer<Throwable> onKill) {", "url": "https://github.com/crate/crate/pull/9650#discussion_r377714321", "createdAt": "2020-02-11T15:37:56Z", "author": {"login": "mfussenegger"}, "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "diffHunk": "@@ -57,4 +67,349 @@ private CompletableFutures() {\n         }\n     }\n \n+    public static <T> CompletionStage<T> asKillable(CompletableFuture<T> delegate,\n+                                                    Consumer<Throwable> beforeExceptional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc4MDA1OnYy", "diffSide": "RIGHT", "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozOTo1OFrOFoN74A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxOTo1N1rOFoPk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTY4MA==", "bodyText": "Just curious, what's the forbidden part here?", "url": "https://github.com/crate/crate/pull/9650#discussion_r377715680", "createdAt": "2020-02-11T15:39:58Z", "author": {"login": "mfussenegger"}, "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "diffHunk": "@@ -57,4 +67,349 @@ private CompletableFutures() {\n         }\n     }\n \n+    public static <T> CompletionStage<T> asKillable(CompletableFuture<T> delegate,\n+                                                    Consumer<Throwable> beforeExceptional) {\n+        return new KillableCompletableFuture<>(delegate, beforeExceptional);\n+    }\n+\n+    @SuppressForbidden", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MjU1Ng==", "bodyText": "See https://github.com/crate/crate/blob/master/gradle/forbidden-signatures.txt#L5", "url": "https://github.com/crate/crate/pull/9650#discussion_r377742556", "createdAt": "2020-02-11T16:19:57Z", "author": {"login": "seut"}, "path": "shared/src/main/java/io/crate/concurrent/CompletableFutures.java", "diffHunk": "@@ -57,4 +67,349 @@ private CompletableFutures() {\n         }\n     }\n \n+    public static <T> CompletionStage<T> asKillable(CompletableFuture<T> delegate,\n+                                                    Consumer<Throwable> beforeExceptional) {\n+        return new KillableCompletableFuture<>(delegate, beforeExceptional);\n+    }\n+\n+    @SuppressForbidden", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTY4MA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgwMzg4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NToyMFrOFoOKeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNjowNFrOFoP0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTQxNw==", "bodyText": "I am not sure if we need both of these to be volatile.\nWe could probably remove the check here https://github.com/crate/crate/pull/9650/files#diff-1360f05e99db1b25d5f53dec74c7abb2R137 and always depend on the kill raising via the Collector. I think the operations happening between those actions are cheap enough to ignore.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377719417", "createdAt": "2020-02-11T15:45:20Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -72,6 +79,11 @@\n     private int batchSize;\n     private boolean batchSizeReduced = false;\n \n+    @Nullable\n+    private volatile KillableCollector currentCollector;\n+\n+    @Nullable\n+    private volatile Throwable killed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NjM1Ng==", "bodyText": "I am not sure if we need both of these to be volatile.\n\nBoth can be set and used from different threads.\n    t1                       t2\n                          OrderedDocCollector\n                          -> collect()\n                            -> set currentCollector\n                            -> check killed and raise\n\n  kill()\n      ------------------> OrderedDocCollector\n                        -> set killed\n                        -> check currentCollector and call kill()  if set", "url": "https://github.com/crate/crate/pull/9650#discussion_r377746356", "createdAt": "2020-02-11T16:25:44Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -72,6 +79,11 @@\n     private int batchSize;\n     private boolean batchSizeReduced = false;\n \n+    @Nullable\n+    private volatile KillableCollector currentCollector;\n+\n+    @Nullable\n+    private volatile Throwable killed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTQxNw=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NjU4OQ==", "bodyText": "We could probably remove the check here https://github.com/crate/crate/pull/9650/files#diff-1360f05e99db1b25d5f53dec74c7abb2R137 and always depend on the kill raising via the Collector. I think the operations happening between those actions are cheap enough to ignore.\n\nYep agree.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377746589", "createdAt": "2020-02-11T16:26:04Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -72,6 +79,11 @@\n     private int batchSize;\n     private boolean batchSizeReduced = false;\n \n+    @Nullable\n+    private volatile KillableCollector currentCollector;\n+\n+    @Nullable\n+    private volatile Throwable killed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTQxNw=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgzMDQ0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MTo0MlrOFoObGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDoyMzo0OVrOFopF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA==", "bodyText": "I think there is a race condition between getLeafCollector and kill:\nt1: Is before `killed = t;`\nt2: Is past `raiseIfKilled(killed);` but hasn`t done the assignment to `currentLeafCollector`\n\nIn that case the kill would be swallowed I think. Could probably be solved with a compare and set operation", "url": "https://github.com/crate/crate/pull/9650#discussion_r377723674", "createdAt": "2020-02-11T15:51:42Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MTk5Nw==", "bodyText": "I don't think so as killed is passed to the leaf collector ctor.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377741997", "createdAt": "2020-02-11T16:19:04Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNzEwMg==", "bodyText": "Yes, but only if killed has been assigned before the leaf collector is created.\nThe scenario I have in mind is that killed hasn't been assignd to yet, and the other thread read the volatile (unassigned) 'killed' but didn't finish the 'currentLeafCollector'  assignment yet.\nHow about having a final AtomicReference in the top most class and the collector + leaf collector receive a reference to that? That would replace the individual killed attributes.", "url": "https://github.com/crate/crate/pull/9650#discussion_r378127102", "createdAt": "2020-02-12T09:24:02Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0OTkzNw==", "bodyText": "Right, there is still a race condition, good catch.\n\nHow about having a final AtomicReference in the top most class and the collector + leaf collector receive a reference to that? That would replace the individual killed attributes.\n\nYep, sounds good.", "url": "https://github.com/crate/crate/pull/9650#discussion_r378149937", "createdAt": "2020-02-12T10:04:17Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MDYwOA==", "bodyText": "Pushed a fixup.", "url": "https://github.com/crate/crate/pull/9650#discussion_r378160608", "createdAt": "2020-02-12T10:23:49Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -205,4 +231,83 @@ private Query query(FieldDoc lastDoc) {\n         searchAfterQuery.add(optimizedQuery, BooleanClause.Occur.MUST_NOT);\n         return searchAfterQuery.build();\n     }\n+\n+    private static void raiseIfKilled(@Nullable Throwable t) {\n+        if (t != null) {\n+            Exceptions.rethrowUnchecked(t);\n+        }\n+    }\n+\n+    private static class KillableCollector implements Collector, Killable {\n+\n+        private final Collector delegate;\n+\n+        @Nullable\n+        private volatile KillableLeafCollector currentLeafCollector;\n+\n+        @Nullable\n+        private volatile Throwable killed;\n+\n+        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+            this.delegate = delegate;\n+            this.killed = killed;\n+        }\n+\n+        @Override\n+        public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n+            raiseIfKilled(killed);\n+            currentLeafCollector = new KillableLeafCollector(delegate.getLeafCollector(context), killed);\n+            return currentLeafCollector;\n+        }\n+\n+        @Override\n+        public ScoreMode scoreMode() {\n+            return delegate.scoreMode();\n+        }\n+\n+        @Override\n+        public void kill(@Nonnull Throwable t) {\n+            if (killed != null) {\n+                return;\n+            }\n+            killed = t;\n+            var leafCollector = currentLeafCollector;\n+            if (leafCollector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMzY3NA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg0MTcwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/OrderedLuceneBatchIteratorFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1NDozMFrOFoOiSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxMDo1OVrOFoPOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNTUxNA==", "bodyText": "I think here we could actually return the new KillableCompletableFuture. Otherwise the call-site has to know that this might implement Killable, that is not very common.\nBy changing the interface to return CompletionStage I was referring to loadNextBatch, but that could probably be a dedicated PR, as it isn't involved here at all.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377725514", "createdAt": "2020-02-11T15:54:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/OrderedLuceneBatchIteratorFactory.java", "diffHunk": "@@ -102,22 +104,24 @@\n             );\n         }\n \n-        private CompletableFuture<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {\n+        private CompletionStage<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNTA3MQ==", "bodyText": "Or maybe we expose a KillableCompletionStage here?", "url": "https://github.com/crate/crate/pull/9650#discussion_r377735071", "createdAt": "2020-02-11T16:08:28Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/OrderedLuceneBatchIteratorFactory.java", "diffHunk": "@@ -102,22 +104,24 @@\n             );\n         }\n \n-        private CompletableFuture<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {\n+        private CompletionStage<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNTUxNA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjcyOA==", "bodyText": "By changing the interface to return CompletionStage I was referring to loadNextBatch\n\nThat's already in place.", "url": "https://github.com/crate/crate/pull/9650#discussion_r377736728", "createdAt": "2020-02-11T16:10:59Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/OrderedLuceneBatchIteratorFactory.java", "diffHunk": "@@ -102,22 +104,24 @@\n             );\n         }\n \n-        private CompletableFuture<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {\n+        private CompletionStage<List<KeyIterable<ShardId, Row>>> tryFetchMore(ShardId shardId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNTUxNA=="}, "originalCommit": {"oid": "063d6f3a73eb39336ced0ce957ec440a97f39a16"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTY1MTE4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNjozMFrOFopg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDozNjozMFrOFopg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NzUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public KillableCollector(Collector delegate, Consumer<Void> raiseIfKilled) {\n          \n          \n            \n                    public KillableCollector(Collector delegate, Runnable raiseIfKilled) {", "url": "https://github.com/crate/crate/pull/9650#discussion_r378167538", "createdAt": "2020-02-12T10:36:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/collect/collectors/LuceneOrderedDocCollector.java", "diffHunk": "@@ -231,82 +222,55 @@ private Query query(FieldDoc lastDoc) {\n         return searchAfterQuery.build();\n     }\n \n-    private static void raiseIfKilled(@Nullable Throwable t) {\n+    private void raiseIfKilled() {\n+        var t = killed.get();\n         if (t != null) {\n             Exceptions.rethrowUnchecked(t);\n         }\n     }\n \n-    private static class KillableCollector implements Collector, Killable {\n+    private static class KillableCollector implements Collector {\n \n         private final Collector delegate;\n+        private final Consumer<Void> raiseIfKilled;\n \n-        @Nullable\n-        private volatile KillableLeafCollector currentLeafCollector;\n-\n-        @Nullable\n-        private volatile Throwable killed;\n-\n-        public KillableCollector(Collector delegate, @Nullable Throwable killed) {\n+        public KillableCollector(Collector delegate, Consumer<Void> raiseIfKilled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f68cde661b0a04409a7fa8f2a0a45f9c7c916221"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1066, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}