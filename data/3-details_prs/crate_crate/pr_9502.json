{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDAxODM2", "number": 9502, "title": "Add implementation for returning clause for update-by-query usecase to storage engine", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis pr provides an implementation for an optional returning clause for the update query including a where clause. e.g.\nupdate test set foo='foo' where bar='baz' returning id\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-01-13T08:54:56Z", "url": "https://github.com/crate/crate/pull/9502", "merged": true, "mergeCommit": {"oid": "f7d307a3f8d8d41d7f405a410795361fabd0343f"}, "closed": true, "closedAt": "2020-01-17T16:01:46Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb54fxcABqjI5NDIzMTc4Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7QX05ABqjI5NTg1MTY2Njc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7740f7273dcd3ff500f4722530992dab73787305", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7740f7273dcd3ff500f4722530992dab73787305", "committedDate": "2020-01-13T08:53:42Z", "message": "Merge all result row logic into ShardDMLExecutor"}, "afterCommit": {"oid": "5c3d2dbad1ec8aa44a4d9a273bef2b6be285f868", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/5c3d2dbad1ec8aa44a4d9a273bef2b6be285f868", "committedDate": "2020-01-13T08:57:49Z", "message": "Merge all result row logic into ShardDMLExecutor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNzg5ODgy", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-341789882", "createdAt": "2020-01-13T11:48:02Z", "commit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0ODowM1rOFc0aDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0ODowM1rOFc0aDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MzA4NQ==", "bodyText": "I am not really happy with this solution, it smells like MultiActionListener in a bad way. but it is still better than moving 8 lambdas around. Any good idea here ? Could be of course also just an interface with 2 implementation for each result type.", "url": "https://github.com/crate/crate/pull/9502#discussion_r365763085", "createdAt": "2020-01-13T11:48:03Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/engine/indexing/ShardDMLExecutor.java", "diffHunk": "@@ -155,12 +160,78 @@ private static String getLocalNodeId(ClusterService clusterService) {\n         return nodeId;\n     }\n \n-    private static long processShardResponse(ShardResponse shardResponse) {\n+    private static List<Object[]> intialResultRows() {\n+        return new ArrayList<>();\n+    }\n+\n+    private static long initialRowCount() {\n+        return 0L;\n+    }\n+\n+    private static long processRowCount(ShardResponse shardResponse) {\n+        return processResponse(shardResponse, ShardResponse::successRowCount);\n+    }\n+\n+    private static long combineRowCounts(long a, long b) {\n+        return a + b;\n+    }\n+\n+    private static Iterable<Row> finishRowCount(Long rowCount) {\n+        return Collections.singletonList(new Row1(rowCount == null ? 0L : rowCount));\n+    }\n+\n+    private static List<Object[]> combineResultRows(List<Object[]> a, List<Object[]> b) {\n+        var result = new ArrayList<Object[]>();\n+        result.addAll(a);\n+        result.addAll(b);\n+        return result;\n+    }\n+\n+    private static Iterable<Row> finishResultRows(List<Object[]> result) {\n+        return Lists2.map(result, RowN::new);\n+    }\n+\n+    private static List<Object[]> processResulRows(ShardResponse shardResponse) {\n+        return processResponse(shardResponse, ShardResponse::getResultRows);\n+    }\n+\n+    private static <A> A processResponse(ShardResponse shardResponse, Function<ShardResponse, A> f) {\n         Exception failure = shardResponse.failure();\n         if (failure != null) {\n             Throwables.throwIfUnchecked(failure);\n             throw new RuntimeException(failure);\n         }\n-        return shardResponse.successRowCount();\n+        return f.apply(shardResponse);\n+    }\n+\n+    public static final ResultProcessing<Long> ROW_COUNT_PROCESSING = new ResultProcessing<>(\n+        ShardDMLExecutor.initialRowCount(),\n+        ShardDMLExecutor::processRowCount,\n+        ShardDMLExecutor::combineRowCounts,\n+        ShardDMLExecutor::finishRowCount\n+    );\n+\n+    public static final ResultProcessing<List<Object[]>> RESULT_ROW_PROCESSING = new ResultProcessing<>(\n+        ShardDMLExecutor.intialResultRows(),\n+        ShardDMLExecutor::processResulRows,\n+        ShardDMLExecutor::combineResultRows,\n+        ShardDMLExecutor::finishResultRows\n+    );\n+\n+    public static class ResultProcessing<Result> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNzkxNTc1", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-341791575", "createdAt": "2020-01-13T11:51:23Z", "commit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1MToyM1rOFc0e5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1MToyM1rOFc0e5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2NDMyNQ==", "bodyText": "I don't like it, to return a value of a super class when the current value is null. One solution would be to not extend from DMLProjection and just handle the return types accordingly here.", "url": "https://github.com/crate/crate/pull/9502#discussion_r365764325", "createdAt": "2020-01-13T11:51:23Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/dsl/projection/UpdateProjection.java", "diffHunk": "@@ -118,6 +136,14 @@ public ProjectionType projectionType() {\n         return visitor.visitUpdateProjection(this, context);\n     }\n \n+    @Override\n+    public List<? extends Symbol> outputs() {\n+        if (output == null) {\n+            return super.outputs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNzk4OTg2", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-341798986", "createdAt": "2020-01-13T12:06:30Z", "commit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjowNjozMVrOFc00mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMjowNjozMVrOFc00mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2OTg4MQ==", "bodyText": "My bad, stupid copy paste bug from my last pr.", "url": "https://github.com/crate/crate/pull/9502#discussion_r365769881", "createdAt": "2020-01-13T12:06:31Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/execution/dsl/projection/UpdateProjection.java", "diffHunk": "@@ -82,11 +93,18 @@ public UpdateProjection(StreamInput in) throws IOException {\n         if (allOn4_1) {\n             int returnValuesSize = in.readVInt();\n             if (returnValuesSize > 0) {\n-                returnValues = new Symbol[assignmentsSize];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffb5aecb8d7a030aeb8a13bc34ae0e47c2ae0c1f"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxODI2NTIy", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-341826522", "createdAt": "2020-01-13T13:01:35Z", "commit": {"oid": "ada60739fb425e5470fc794c8f39f15aa3b017a8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzowMTozNVrOFc2HPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMzowMzo0OFrOFc2KlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MTAzOA==", "bodyText": "In most cases we put the responsibility to built the InputColumn symbols to who-ever is creating the projection and then add an assertion that the symbols in the arguments must not contain Field/Reference. See FilterProjection for an example.", "url": "https://github.com/crate/crate/pull/9502#discussion_r365791038", "createdAt": "2020-01-13T13:01:35Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/dsl/projection/UpdateProjection.java", "diffHunk": "@@ -48,14 +53,20 @@ public UpdateProjection(Symbol uidSymbol,\n                             Symbol[] assignments,\n                             Version version,\n                             @Nullable Symbol[] returnValues,\n+                            @Nullable Field[] output,\n                             @Nullable Long requiredVersion) {\n         super(uidSymbol);\n         this.assignmentsColumns = assignmentsColumns;\n         this.assignments = assignments;\n         this.allOn4_1 = version.onOrAfter(Version.V_4_1_0);\n         this.returnValues = returnValues;\n+        if (output != null) {\n+            this.output = new Symbol[output.length];\n+            for (int i = 0; i < output.length; i++) {\n+                this.output[i] = (new InputColumn(i, output[i].valueType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada60739fb425e5470fc794c8f39f15aa3b017a8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc5MTg5Mw==", "bodyText": "This looks very much like a java.util.stream.Collector, could we maybe utilize something there?", "url": "https://github.com/crate/crate/pull/9502#discussion_r365791893", "createdAt": "2020-01-13T13:03:48Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/indexing/ShardDMLExecutor.java", "diffHunk": "@@ -155,12 +160,78 @@ private static String getLocalNodeId(ClusterService clusterService) {\n         return nodeId;\n     }\n \n-    private static long processShardResponse(ShardResponse shardResponse) {\n+    private static List<Object[]> intialResultRows() {\n+        return new ArrayList<>();\n+    }\n+\n+    private static long initialRowCount() {\n+        return 0L;\n+    }\n+\n+    private static long processRowCount(ShardResponse shardResponse) {\n+        return processResponse(shardResponse, ShardResponse::successRowCount);\n+    }\n+\n+    private static long combineRowCounts(long a, long b) {\n+        return a + b;\n+    }\n+\n+    private static Iterable<Row> finishRowCount(Long rowCount) {\n+        return Collections.singletonList(new Row1(rowCount == null ? 0L : rowCount));\n+    }\n+\n+    private static List<Object[]> combineResultRows(List<Object[]> a, List<Object[]> b) {\n+        var result = new ArrayList<Object[]>();\n+        result.addAll(a);\n+        result.addAll(b);\n+        return result;\n+    }\n+\n+    private static Iterable<Row> finishResultRows(List<Object[]> result) {\n+        return Lists2.map(result, RowN::new);\n+    }\n+\n+    private static List<Object[]> processResulRows(ShardResponse shardResponse) {\n+        return processResponse(shardResponse, ShardResponse::getResultRows);\n+    }\n+\n+    private static <A> A processResponse(ShardResponse shardResponse, Function<ShardResponse, A> f) {\n         Exception failure = shardResponse.failure();\n         if (failure != null) {\n             Throwables.throwIfUnchecked(failure);\n             throw new RuntimeException(failure);\n         }\n-        return shardResponse.successRowCount();\n+        return f.apply(shardResponse);\n+    }\n+\n+    public static final ResultProcessing<Long> ROW_COUNT_PROCESSING = new ResultProcessing<>(\n+        ShardDMLExecutor.initialRowCount(),\n+        ShardDMLExecutor::processRowCount,\n+        ShardDMLExecutor::combineRowCounts,\n+        ShardDMLExecutor::finishRowCount\n+    );\n+\n+    public static final ResultProcessing<List<Object[]>> RESULT_ROW_PROCESSING = new ResultProcessing<>(\n+        ShardDMLExecutor.intialResultRows(),\n+        ShardDMLExecutor::processResulRows,\n+        ShardDMLExecutor::combineResultRows,\n+        ShardDMLExecutor::finishResultRows\n+    );\n+\n+    public static class ResultProcessing<Result> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada60739fb425e5470fc794c8f39f15aa3b017a8"}, "originalPosition": 169}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0891ffafd092c84b9cf351dd630b5e510140a899", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/0891ffafd092c84b9cf351dd630b5e510140a899", "committedDate": "2020-01-14T14:04:32Z", "message": "Cleaning up types on ShardDMLExecutor"}, "afterCommit": {"oid": "9cccb9dbfd1cf7a25b0fbc132a0d3a73af70ff42", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/9cccb9dbfd1cf7a25b0fbc132a0d3a73af70ff42", "committedDate": "2020-01-14T14:10:33Z", "message": "Clean up types on ShardDMLExecutor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cccb9dbfd1cf7a25b0fbc132a0d3a73af70ff42", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/9cccb9dbfd1cf7a25b0fbc132a0d3a73af70ff42", "committedDate": "2020-01-14T14:10:33Z", "message": "Clean up types on ShardDMLExecutor"}, "afterCommit": {"oid": "68046c09adb835a738898c4e5805093be7cbfd5d", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/68046c09adb835a738898c4e5805093be7cbfd5d", "committedDate": "2020-01-14T14:16:16Z", "message": "Clean up types on ShardDMLExecutor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "115a62df0af11bbc9a389a0115b07836e653d3c9", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/115a62df0af11bbc9a389a0115b07836e653d3c9", "committedDate": "2020-01-16T14:35:32Z", "message": "Make outputs nullable"}, "afterCommit": {"oid": "3c8ee76b047f9c938e26a1e5102834b411c02a92", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/3c8ee76b047f9c938e26a1e5102834b411c02a92", "committedDate": "2020-01-16T14:42:39Z", "message": "Make outputs nullable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c8ee76b047f9c938e26a1e5102834b411c02a92", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/3c8ee76b047f9c938e26a1e5102834b411c02a92", "committedDate": "2020-01-16T14:42:39Z", "message": "Make outputs nullable"}, "afterCommit": {"oid": "a1f9b82f0069a161f19ef3cf14bfe3fca4e81958", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/a1f9b82f0069a161f19ef3cf14bfe3fca4e81958", "committedDate": "2020-01-16T14:47:25Z", "message": "Make outputs nullable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37a0370ccb7fe80d6bee856c7b957cfd53262460", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/37a0370ccb7fe80d6bee856c7b957cfd53262460", "committedDate": "2020-01-16T14:49:24Z", "message": "Fix"}, "afterCommit": {"oid": "73fcc91d5caf75c2dd28ca446975859414957ad1", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/73fcc91d5caf75c2dd28ca446975859414957ad1", "committedDate": "2020-01-16T15:02:06Z", "message": "Make outputs nullable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NDU5ODY5", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-344459869", "createdAt": "2020-01-17T09:39:31Z", "commit": {"oid": "4133de61bb48c67288ff4ea89ed995c79963fa64"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTozOTozMVrOFezenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwOTo0MToyNlrOFezh5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0NTAyMw==", "bodyText": "I think it would be possible to use CollectionBucket here to avoid the copy operation.", "url": "https://github.com/crate/crate/pull/9502#discussion_r367845023", "createdAt": "2020-01-17T09:39:31Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/engine/indexing/ShardDMLExecutor.java", "diffHunk": "@@ -155,12 +166,41 @@ private static String getLocalNodeId(ClusterService clusterService) {\n         return nodeId;\n     }\n \n-    private static long processShardResponse(ShardResponse shardResponse) {\n+    private static <A> A processResponse(ShardResponse shardResponse, Function<ShardResponse, A> f) {\n         Exception failure = shardResponse.failure();\n         if (failure != null) {\n             Throwables.throwIfUnchecked(failure);\n             throw new RuntimeException(failure);\n         }\n-        return shardResponse.successRowCount();\n+        return f.apply(shardResponse);\n+    }\n+\n+    private static Long toRowCount(ShardResponse shardResponse) {\n+        return Long.valueOf(processResponse(shardResponse, ShardResponse::successRowCount));\n+    }\n+\n+    private static List<Object[]> toResultRows(ShardResponse shardResponse) {\n+        List<Object[]> result = processResponse(shardResponse, ShardResponse::getResultRows);\n+        return result == null ? List.of() : result;\n     }\n+\n+    public static final Collector<ShardResponse, long[], Iterable<Row>> ROW_COUNT_COLLECTOR = Collector.of(\n+        () -> new long[]{0L},\n+        (a, b) -> a[0] += toRowCount(b),\n+        (a, b) -> {\n+            a[0] += b[0];\n+            return a;\n+        },\n+        a -> List.of(new Row1(a[0]))\n+    );\n+\n+    public static final Collector<ShardResponse, List<Object[]>, Iterable<Row>> RESULT_ROW_COLLECTOR = Collector.of(\n+        ArrayList::new,\n+        (a, b) -> a.addAll(toResultRows(b)),\n+        (a, b) -> {\n+            a.addAll(b);\n+            return a;\n+        },\n+        a -> Lists2.map(a, RowN::new)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4133de61bb48c67288ff4ea89ed995c79963fa64"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg0NTg2MA==", "bodyText": "Maybe we could also add _seq_no or so to the RETURNING clause here. As that is one of the use cases we want to enable", "url": "https://github.com/crate/crate/pull/9502#discussion_r367845860", "createdAt": "2020-01-17T09:41:26Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -943,4 +944,52 @@ public void test_update_by_id_where_no_row_is_matching() throws Exception {\n         assertThat(response.cols()[0], is(\"id\"));\n         assertThat(response.rowCount(), is(0L));\n     }\n+\n+    @Test\n+    public void test_update_by_query_returning_single_field_with_outputputname() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where message='msg' returning message as message_renamed\");\n+\n+        assertThat((response.rowCount()), is(1L));\n+        assertThat((response.cols()[0]), is(\"message_renamed\"));\n+        assertThat(response.rows()[0][0], is(\"updated\"));\n+    }\n+\n+\n+    @Test\n+    public void test_update_by_query_with_subquery_returning_multiple_fields() throws Exception {\n+        execute(\"create table test (id int primary key, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where message= (select 'msg') returning id, message\");\n+\n+        assertThat((response.rowCount()), is(1L));\n+        assertThat((response.cols()[0]), is(\"id\"));\n+        assertThat((response.cols()[1]), is(\"message\"));\n+        assertThat(response.rows()[0][0], is(1));\n+        assertThat(response.rows()[0][1], is(\"updated\"));\n+\n+    }\n+\n+    @Test\n+    public void test_update_by_query_returning_multiple_results() throws Exception {\n+        execute(\"create table test (id int primary key, x int, message string) clustered into 2 shards\");\n+        execute(\"insert into test values(1, 1, 'msg');\");\n+        execute(\"insert into test values(2, 1, 'msg');\");\n+        assertEquals(1, response.rowCount());\n+        refresh();\n+\n+        execute(\"update test set message='updated' where message='msg' and x > 0 returning message as message_renamed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4133de61bb48c67288ff4ea89ed995c79963fa64"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NTE4NzIw", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-344518720", "createdAt": "2020-01-17T11:27:11Z", "commit": {"oid": "0b39d14915c5259eac9875afbd6c6db0adcaa7e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyNzoxMVrOFe2SOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMToyNzoxMVrOFe2SOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MTAwMw==", "bodyText": "Shouldn't this be > 0, as _seq_no starts out at 0 initially?", "url": "https://github.com/crate/crate/pull/9502#discussion_r367891003", "createdAt": "2020-01-17T11:27:11Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/UpdateIntegrationTest.java", "diffHunk": "@@ -985,11 +985,20 @@ public void test_update_by_query_returning_multiple_results() throws Exception {\n         assertEquals(1, response.rowCount());\n         refresh();\n \n-        execute(\"update test set message='updated' where message='msg' and x > 0 returning message as message_renamed\");\n+        execute(\"update test set message='updated' where message='msg' and x > 0 \" +\n+                \"returning _docid, _seq_no as seq, message as message_renamed\");\n \n-        assertThat((response.rowCount()), is(2L ));\n-        assertThat((response.cols()[0]), is(\"message_renamed\"));\n-        assertThat(response.rows()[0][0], is(\"updated\"));\n-        assertThat(response.rows()[1][0], is(\"updated\"));\n+        assertThat((response.rowCount()), is(2L));\n+        assertThat((response.cols()[0]), is(\"_docid\"));\n+        assertThat((response.cols()[1]), is(\"seq\"));\n+        assertThat((response.cols()[2]), is(\"message_renamed\"));\n+\n+        assertThat(response.rows()[0][0], is(0));\n+        assertThat(response.rows()[0][1], is(0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b39d14915c5259eac9875afbd6c6db0adcaa7e4"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2943690368a246b193e37d5f74268ca1c3fa16b2", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/2943690368a246b193e37d5f74268ca1c3fa16b2", "committedDate": "2020-01-17T13:01:51Z", "message": "Fix seq_no/version processing for return values"}, "afterCommit": {"oid": "76bf2c78066dac7635e0e8f6a2bf0f32bd17489f", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/76bf2c78066dac7635e0e8f6a2bf0f32bd17489f", "committedDate": "2020-01-17T14:47:01Z", "message": "Fix seq_no/version processing for return values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NjM5MTkx", "url": "https://github.com/crate/crate/pull/9502#pullrequestreview-344639191", "createdAt": "2020-01-17T15:06:26Z", "commit": {"oid": "76bf2c78066dac7635e0e8f6a2bf0f32bd17489f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e89e79501860d66f163102c2020795670eb90615", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e89e79501860d66f163102c2020795670eb90615", "committedDate": "2020-01-17T15:20:32Z", "message": "Add implementation for update-by-query usecase to storage engine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76bf2c78066dac7635e0e8f6a2bf0f32bd17489f", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/76bf2c78066dac7635e0e8f6a2bf0f32bd17489f", "committedDate": "2020-01-17T14:47:01Z", "message": "Fix seq_no/version processing for return values"}, "afterCommit": {"oid": "e89e79501860d66f163102c2020795670eb90615", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/e89e79501860d66f163102c2020795670eb90615", "committedDate": "2020-01-17T15:20:32Z", "message": "Add implementation for update-by-query usecase to storage engine"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3898, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}