{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODQ1MDc3", "number": 10064, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NToxMFrOED6ktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNDozOFrOEET2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQwODUyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/RegprocType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NToxMFrOGhNqxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NToxMFrOGhNqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEzNA==", "bodyText": "'<text>'::regproc in PostgreSQL the cast function will try to look up for the function that corresponds to the string literal. For now, I allowed this cast but it just creates a Regproc object with oid and name, should we forbid the text to regproc cast or keep it?", "url": "https://github.com/crate/crate/pull/10064#discussion_r437480134", "createdAt": "2020-06-09T14:45:10Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.metadata.pgcatalog.OidHash.functionOid;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 20;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());\n+        } else if (value instanceof String) {\n+            var name = (String) value;\n+            return Regproc.of(functionOid(name), name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cecc73f430c8a499e61d1acac61a1b797ac277c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA4NDc1OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMDoyNFrOGhx0xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMDoyNFrOGhx0xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MjUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For compatibil  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n          \n          \n            \n            For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "url": "https://github.com/crate/crate/pull/10064#discussion_r438072519", "createdAt": "2020-06-10T12:10:24Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -155,7 +155,7 @@ following tables:\n Some clients require the ``pg_catalog.pg_type`` in order to be able to stream\n arrays or other non-primitive types.\n \n-For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n+For compatibil  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA5MDMzOnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjowNFrOGhx4NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMjowNFrOGhx4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            tables. The ``oid`` type is currently mapped to the CrateDB internal the\n          \n          \n            \n            four-byte :ref:`integer <data-type-numeric>` data type.\n          \n          \n            \n            tables. The ``oid`` type is currently mapped to the :ref:`integer <data-type-numeric>` data type", "url": "https://github.com/crate/crate/pull/10064#discussion_r438073397", "createdAt": "2020-06-10T12:12:04Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -196,14 +198,31 @@ table available in CrateDB::\n     | 2277 | anyarray                     |        0 |    2276 |     -1 | p       | P           |\n     | 2287 | _record                      |        0 |    2249 |     -1 | p       | A           |\n     +------+------------------------------+----------+---------+--------+---------+-------------+\n-    SELECT 31 rows in set (... sec)\n+    SELECT 33 rows in set (... sec)\n \n .. NOTE::\n \n    This is just a snapshot of the table.\n    Check table :ref:`information_schema.columns <information_schema_columns>`\n    to get information for all supported columns.\n \n+.. _postgres_pg_oid:\n+\n+Object Identifier Types\n+~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Object identifiers are used internally by PostgreSQL for various system\n+tables. The ``oid`` type is currently mapped to the CrateDB internal the\n+four-byte :ref:`integer <data-type-numeric>` data type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTExNTA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/protocols/postgres/types/RegprocType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxOToyMVrOGhyHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjozNTo0MVrOGhyrxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NzM4OA==", "bodyText": "Shouldn't the name here be the function-name instead of the oid as string? We'd need some kind of reverse lookup, right?", "url": "https://github.com/crate/crate/pull/10064#discussion_r438077388", "createdAt": "2020-06-10T12:19:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.crate.types.Regproc;\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+class RegprocType extends PGType<Regproc> {\n+\n+    static final int OID = 24;\n+\n+    private static final int TYPE_LEN = 4;\n+    private static final int TYPE_MOD = -1;\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+\n+    private RegprocType() {\n+        super(OID, TYPE_LEN, TYPE_MOD, \"regproc\");\n+    }\n+\n+    @Override\n+    public int typArray() {\n+        return PGArray.REGPROC_ARRAY.oid();\n+    }\n+\n+    @Override\n+    public String typeCategory() {\n+        return TypeCategory.NUMERIC.code();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return Type.BASE.code();\n+    }\n+\n+    @Override\n+    public int writeAsBinary(ByteBuf buffer, @Nonnull Regproc value) {\n+        buffer.writeInt(TYPE_LEN);\n+        buffer.writeInt(value.oid());\n+        return INT32_BYTE_SIZE + TYPE_LEN;\n+    }\n+\n+    @Override\n+    public Regproc readBinaryValue(ByteBuf buffer, int valueLength) {\n+        var oid = buffer.readInt();\n+        return Regproc.of(oid, String.valueOf(oid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NjU5OA==", "bodyText": "yes, but I am not sure how it is possible, PgType#readBinaryValue should know about registered functions then :/", "url": "https://github.com/crate/crate/pull/10064#discussion_r438086598", "createdAt": "2020-06-10T12:35:41Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.crate.types.Regproc;\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+class RegprocType extends PGType<Regproc> {\n+\n+    static final int OID = 24;\n+\n+    private static final int TYPE_LEN = 4;\n+    private static final int TYPE_MOD = -1;\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+\n+    private RegprocType() {\n+        super(OID, TYPE_LEN, TYPE_MOD, \"regproc\");\n+    }\n+\n+    @Override\n+    public int typArray() {\n+        return PGArray.REGPROC_ARRAY.oid();\n+    }\n+\n+    @Override\n+    public String typeCategory() {\n+        return TypeCategory.NUMERIC.code();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return Type.BASE.code();\n+    }\n+\n+    @Override\n+    public int writeAsBinary(ByteBuf buffer, @Nonnull Regproc value) {\n+        buffer.writeInt(TYPE_LEN);\n+        buffer.writeInt(value.oid());\n+        return INT32_BYTE_SIZE + TYPE_LEN;\n+    }\n+\n+    @Override\n+    public Regproc readBinaryValue(ByteBuf buffer, int valueLength) {\n+        var oid = buffer.readInt();\n+        return Regproc.of(oid, String.valueOf(oid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NzM4OA=="}, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTEyNDIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/RegprocType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoyMjowMFrOGhyNig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1NjowOVrOGhzdIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10064#discussion_r438078858", "createdAt": "2020-06-10T12:22:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDk3Ng==", "bodyText": "It is actually the behaviour postgresql has, when we cast oid to regproc then it becomes a name as well. See (1::regproc)::text\ntemplate1=# select 1::regproc, (1::regproc)::text, pg_typeof(1::regproc);\n regproc | text | pg_typeof\n---------+------+-----------\n 1       | 1    | regproc", "url": "https://github.com/crate/crate/pull/10064#discussion_r438084976", "createdAt": "2020-06-10T12:32:35Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NjYzNw==", "bodyText": "Only for unknown functions:\nselect 1242::regproc, 1::regproc;\n regproc | regproc\n---------+---------\n boolin  | 1\n(1 row)\n\nNot sure if this is problematic, given that clients don't send regproc values and that the joins happen on the oid value anyways.\nMaybe we add a comment explaining this behavior for now and follow up if it turns out to be necessary for compatiblity reasons.", "url": "https://github.com/crate/crate/pull/10064#discussion_r438096637", "createdAt": "2020-06-10T12:52:02Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5OTIzMw==", "bodyText": "as i see, i'll update the type documentation. It is also the case for casting a string literal to regproc.", "url": "https://github.com/crate/crate/pull/10064#discussion_r438099233", "createdAt": "2020-06-10T12:56:09Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA=="}, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTUzMjQyOnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowMDoyOFrOGh2P5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowODozOFrOGh2m7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For compatibility  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n          \n          \n            \n            For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "url": "https://github.com/crate/crate/pull/10064#discussion_r438144999", "createdAt": "2020-06-10T14:00:28Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -155,7 +155,7 @@ following tables:\n Some clients require the ``pg_catalog.pg_type`` in order to be able to stream\n arrays or other non-primitive types.\n \n-For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n+For compatibility  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MDg5NA==", "bodyText": "\ud83e\udd26", "url": "https://github.com/crate/crate/pull/10064#discussion_r438150894", "createdAt": "2020-06-10T14:08:38Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -155,7 +155,7 @@ following tables:\n Some clients require the ``pg_catalog.pg_type`` in order to be able to stream\n arrays or other non-primitive types.\n \n-For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n+For compatibility  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDk5OQ=="}, "originalCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTU1MDM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/Regproc.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNDozOFrOGh2bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNDozOFrOGh2bpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }\n          \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    // To match PostgreSQL behavior 1:1 this would need to lookup the\n          \n          \n            \n                    // function name by oid and fallback to using the oid as name if there is\n          \n          \n            \n                    // no match.\n          \n          \n            \n            \n          \n          \n            \n                    // It looks like for compatibility with clients it is good enough\n          \n          \n            \n                    // to not mirror this behavior\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }", "url": "https://github.com/crate/crate/pull/10064#discussion_r438148007", "createdAt": "2020-06-10T14:04:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/Regproc.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.metadata.pgcatalog.OidHash;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+public class Regproc {\n+\n+    private final int oid;\n+    private final String name;\n+\n+    public static Regproc of(@Nonnull String name) {\n+        return new Regproc(OidHash.functionOid(name), name);\n+    }\n+\n+    public static Regproc of(int oid, @Nonnull String name) {\n+        return new Regproc(oid, name);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1390, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}