{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjA0MzIx", "number": 9831, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDoyMVrODuajgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0Njo1NFrODwUDDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTk2MTYwOnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDoyMVrOGAZUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDoyMVrOGAZUNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2Nzk1Ng==", "bodyText": "I would not do this / thing, I don't think it adds clarity. A general plural (\"values\", \"columns\") is fine.", "url": "https://github.com/crate/crate/pull/9831#discussion_r403067956", "createdAt": "2020-04-03T15:00:21Z", "author": {"login": "matthijskrul"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,14 +69,18 @@ None\n Changes\n =======\n \n+- Add the :ref:`CHECK <check_constraint>` constraint syntax, which specifies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTk2MjkwOnYy", "diffSide": "RIGHT", "path": "docs/sql/general/constraints.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTowMDozOVrOGAZU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozOTo1M1rOGBNYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2ODE1MQ==", "bodyText": "As above", "url": "https://github.com/crate/crate/pull/9831#discussion_r403068151", "createdAt": "2020-04-03T15:00:39Z", "author": {"login": "matthijskrul"}, "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,96 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyMDk0OA==", "bodyText": "thank you! both corrected to plural then.", "url": "https://github.com/crate/crate/pull/9831#discussion_r403920948", "createdAt": "2020-04-06T08:39:53Z", "author": {"login": "marregui"}, "path": "docs/sql/general/constraints.rst", "diffHunk": "@@ -53,6 +53,96 @@ constraint or a table constraint.\n For further details about the meaning of the options see\n :ref:`indices_and_fulltext`.\n \n+.. _check_constraint:\n+\n+``CHECK``\n+---------\n+\n+The CHECK constraint specifies that the value/s of certain column/s must satisfy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2ODE1MQ=="}, "originalCommit": {"oid": "a880343c623174910a113e74635b6586631786c8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkwNDkyOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/constraints.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0MDoyNFrOGB5Gxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0MDoyNFrOGB5Gxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzNzM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A check constraint allows you to specify that the values in a  certain column\n          \n          \n            \n            A check constraint allows you to specify that the values in a certain column", "url": "https://github.com/crate/crate/pull/9831#discussion_r404637383", "createdAt": "2020-04-07T08:40:24Z", "author": {"login": "seut"}, "path": "docs/general/ddl/constraints.rst", "diffHunk": "@@ -65,9 +65,37 @@ Example::\n     ... );\n     CREATE OK, 1 row affected (... sec)\n \n+.. NOTE::\n+\n+   For further details see :ref:`not_null_constraint`.\n+\n+Check\n+=====\n+\n+A check constraint allows you to specify that the values in a  certain column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkyMDE4OnYy", "diffSide": "RIGHT", "path": "docs/sql/statements/drop-constraint.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NDoyM1rOGB5Qbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NDoyM1rOGB5Qbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTg1NQ==", "bodyText": "Maybe worth adding a note or warning that it cannot be re-added to an existing table once dropped.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404639855", "createdAt": "2020-04-07T08:44:23Z", "author": {"login": "seut"}, "path": "docs/sql/statements/drop-constraint.rst", "diffHunk": "@@ -0,0 +1,33 @@\n+.. _drop-constraint:\n+\n+===================\n+``DROP CONSTRAINT``\n+===================\n+\n+Remove a :ref:`check_constraint` constraint from a table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkzMzA2OnYy", "diffSide": "RIGHT", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NzoyOVrOGB5YSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NzoyOVrOGB5YSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTg2Ng==", "bodyText": "Could we use a simple string concat here instead? this avoids unnecessary goggle common dependencies.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404641866", "createdAt": "2020-04-07T08:47:29Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckColumnConstraint.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckColumnConstraint<T> extends ColumnConstraint<T> {\n+\n+    @Nullable\n+    private final String name;\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckColumnConstraint(@Nullable String name, String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (null == o || false == o instanceof CheckColumnConstraint) {\n+            return false;\n+        }\n+        CheckColumnConstraint that = (CheckColumnConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(columnName, that.columnName) &&\n+               Objects.equal(name, that.name);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckColumnConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> ColumnConstraint<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckColumnConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        consumer.accept(expression);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkzNDQ0OnYy", "diffSide": "RIGHT", "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0Nzo1MVrOGB5ZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0Nzo1MVrOGB5ZKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MjA4OQ==", "bodyText": "same here, pls use string concat instead.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404642089", "createdAt": "2020-04-07T08:47:51Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/CheckConstraint.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public class CheckConstraint<T> extends TableElement<T> {\n+\n+    @Nullable\n+    private final String name;\n+    @Nullable\n+    private final String columnName;\n+    private final T expression;\n+    private final String expressionStr;\n+\n+    public CheckConstraint(@Nullable String name, @Nullable String columnName, T expression, String expressionStr) {\n+        this.name = name;\n+        this.columnName = columnName;\n+        this.expression = expression;\n+        this.expressionStr = expressionStr;\n+    }\n+\n+    @Nullable\n+    public String name() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String columnName() {\n+        return columnName;\n+    }\n+\n+    public T expression() {\n+        return expression;\n+    }\n+\n+    public String expressionStr() {\n+        return expressionStr;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(name, columnName, expression);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof CheckConstraint) {\n+            return false;\n+        }\n+        CheckConstraint that = (CheckConstraint) o;\n+        return Objects.equal(expression, that.expression) &&\n+               Objects.equal(name, that.name) &&\n+               Objects.equal(columnName, that.columnName);\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public <U> TableElement<U> map(Function<? super T, ? extends U> mapper) {\n+        return new CheckConstraint<>(name, columnName, mapper.apply(expression), expressionStr);\n+    }\n+\n+    @Override\n+    public void visit(Consumer<? super T> consumer) {\n+        consumer.accept(expression);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkzNzM3OnYy", "diffSide": "RIGHT", "path": "sql-parser/src/main/java/io/crate/sql/tree/DropCheckConstraint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0ODozNVrOGB5bDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0ODozNVrOGB5bDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MjU3NA==", "bodyText": "and here ;) string concatenation would we preferable.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404642574", "createdAt": "2020-04-07T08:48:35Z", "author": {"login": "seut"}, "path": "sql-parser/src/main/java/io/crate/sql/tree/DropCheckConstraint.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n+\n+public class DropCheckConstraint<T> extends Statement {\n+\n+    private final Table<T> table;\n+    private final String name;\n+\n+    public DropCheckConstraint(Table<T> table, String name) {\n+        this.table = table;\n+        this.name = name;\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public Table<T> table() {\n+        return table;\n+    }\n+\n+    @Override\n+    public <R, C> R accept(AstVisitor<R, C> visitor, C context) {\n+        return visitor.visitDropCheckConstraint(this, context);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(table, name);\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (false == obj instanceof DropCheckConstraint) {\n+            return false;\n+        }\n+        DropCheckConstraint<T> that = (DropCheckConstraint<T>) obj;\n+        return name.equals(that.name) && table.equals(that.table);\n+\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk3NTI3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODowMFrOGB5zIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1ODowMFrOGB5zIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODczOA==", "bodyText": "when using a normal for loop above, this additional loop could be avoided.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404648738", "createdAt": "2020-04-07T08:58:00Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -85,6 +91,15 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n                 return symbol;\n             }));\n         }\n+        List<TableElement<Symbol>> analyzedCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> x instanceof CheckConstraint)\n+            .map(x -> (CheckConstraint<Expression>) x)\n+            .map(x -> x.map(y -> exprAnalyzerWithReferences.convert(y, exprCtx)))\n+            .collect(Collectors.toList());\n+        tableElementsWithExpressions.addAll(analyzedCheckConstraints);\n+        analyzedCreateTable.tableElements().addAll(analyzedCheckConstraints);\n+        analyzedCheckConstraints.forEach(c -> analyzedTableElements.addCheckConstraint(relationName, (CheckConstraint<Symbol>) c));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk5MTUxOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowMTo1N1rOGB59fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoxOTowN1rOGCQUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MTM4OA==", "bodyText": "why is this needed? if needed, could this maybe solved without mutating?", "url": "https://github.com/crate/crate/pull/9831#discussion_r404651388", "createdAt": "2020-04-07T09:01:57Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -94,4 +109,39 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n             analyzedTableElementsWithExpressions\n         );\n     }\n+\n+    private static List<TableElement<Symbol>> analyzeButCheckConstraints(CreateTable<Expression> createTable,\n+                                                                         ExpressionAnalyzer exprAnalyzerWithFieldsAsString,\n+                                                                         ExpressionAnalysisContext exprCtx) {\n+        List<TableElement<Expression>> notCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> false == x instanceof CheckConstraint)\n+            .collect(Collectors.toList());\n+        List<TableElement<Symbol>> analyzed = new ArrayList<>(notCheckConstraints.size());\n+        Set<CheckColumnConstraint<Expression>> checkColumnConstraints = new HashSet<>(notCheckConstraints.size());\n+        for (int i = 0; i < notCheckConstraints.size(); i++) {\n+            TableElement<Expression> te = notCheckConstraints.get(i);\n+            if (te instanceof ColumnDefinition) {\n+                ColumnDefinition<Expression> def = (ColumnDefinition<Expression>) te;\n+                List<ColumnConstraint<Expression>> constraints = def.constraints();\n+                for (int j = 0; j < constraints.size(); j++) {\n+                    ColumnConstraint<Expression> cc = constraints.get(j);\n+                    if (cc instanceof CheckColumnConstraint) {\n+                        CheckColumnConstraint<Expression> check = (CheckColumnConstraint<Expression>) cc;\n+                        checkColumnConstraints.add(check);\n+                        // Re-frame the column constraint as a table constraint\n+                        createTable.tableElements().add(new CheckConstraint<>(\n+                            check.name(),\n+                            def.ident(),\n+                            check.expression(),\n+                            check.expressionStr()\n+                        ));\n+                    }\n+                }\n+                def.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MDAzOQ==", "bodyText": "In this case, what we are doing is treating a check constraint definition at the column level as if it were defined at the table level. During the first pass of the analysis we cannot process check constraints because we do not have references to the columns yet (they are being created).", "url": "https://github.com/crate/crate/pull/9831#discussion_r404850039", "createdAt": "2020-04-07T14:24:12Z", "author": {"login": "marregui"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -94,4 +109,39 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n             analyzedTableElementsWithExpressions\n         );\n     }\n+\n+    private static List<TableElement<Symbol>> analyzeButCheckConstraints(CreateTable<Expression> createTable,\n+                                                                         ExpressionAnalyzer exprAnalyzerWithFieldsAsString,\n+                                                                         ExpressionAnalysisContext exprCtx) {\n+        List<TableElement<Expression>> notCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> false == x instanceof CheckConstraint)\n+            .collect(Collectors.toList());\n+        List<TableElement<Symbol>> analyzed = new ArrayList<>(notCheckConstraints.size());\n+        Set<CheckColumnConstraint<Expression>> checkColumnConstraints = new HashSet<>(notCheckConstraints.size());\n+        for (int i = 0; i < notCheckConstraints.size(); i++) {\n+            TableElement<Expression> te = notCheckConstraints.get(i);\n+            if (te instanceof ColumnDefinition) {\n+                ColumnDefinition<Expression> def = (ColumnDefinition<Expression>) te;\n+                List<ColumnConstraint<Expression>> constraints = def.constraints();\n+                for (int j = 0; j < constraints.size(); j++) {\n+                    ColumnConstraint<Expression> cc = constraints.get(j);\n+                    if (cc instanceof CheckColumnConstraint) {\n+                        CheckColumnConstraint<Expression> check = (CheckColumnConstraint<Expression>) cc;\n+                        checkColumnConstraints.add(check);\n+                        // Re-frame the column constraint as a table constraint\n+                        createTable.tableElements().add(new CheckConstraint<>(\n+                            check.name(),\n+                            def.ident(),\n+                            check.expression(),\n+                            check.expressionStr()\n+                        ));\n+                    }\n+                }\n+                def.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MTM4OA=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNzY1Nw==", "bodyText": "will have a better look at this", "url": "https://github.com/crate/crate/pull/9831#discussion_r405017657", "createdAt": "2020-04-07T18:19:07Z", "author": {"login": "marregui"}, "path": "sql/src/main/java/io/crate/analyze/CreateTableStatementAnalyzer.java", "diffHunk": "@@ -94,4 +109,39 @@ public AnalyzedCreateTable analyze(CreateTable<Expression> createTable,\n             analyzedTableElementsWithExpressions\n         );\n     }\n+\n+    private static List<TableElement<Symbol>> analyzeButCheckConstraints(CreateTable<Expression> createTable,\n+                                                                         ExpressionAnalyzer exprAnalyzerWithFieldsAsString,\n+                                                                         ExpressionAnalysisContext exprCtx) {\n+        List<TableElement<Expression>> notCheckConstraints = createTable.tableElements()\n+            .stream()\n+            .filter(x -> false == x instanceof CheckConstraint)\n+            .collect(Collectors.toList());\n+        List<TableElement<Symbol>> analyzed = new ArrayList<>(notCheckConstraints.size());\n+        Set<CheckColumnConstraint<Expression>> checkColumnConstraints = new HashSet<>(notCheckConstraints.size());\n+        for (int i = 0; i < notCheckConstraints.size(); i++) {\n+            TableElement<Expression> te = notCheckConstraints.get(i);\n+            if (te instanceof ColumnDefinition) {\n+                ColumnDefinition<Expression> def = (ColumnDefinition<Expression>) te;\n+                List<ColumnConstraint<Expression>> constraints = def.constraints();\n+                for (int j = 0; j < constraints.size(); j++) {\n+                    ColumnConstraint<Expression> cc = constraints.get(j);\n+                    if (cc instanceof CheckColumnConstraint) {\n+                        CheckColumnConstraint<Expression> check = (CheckColumnConstraint<Expression>) cc;\n+                        checkColumnConstraints.add(check);\n+                        // Re-frame the column constraint as a table constraint\n+                        createTable.tableElements().add(new CheckConstraint<>(\n+                            check.name(),\n+                            def.ident(),\n+                            check.expression(),\n+                            check.expressionStr()\n+                        ));\n+                    }\n+                }\n+                def.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MTM4OA=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk5NTg1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/DropCheckConstraintAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowMzoxNVrOGB6AMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowMzoxNVrOGB6AMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MjA4MQ==", "bodyText": "minor (maybe personal preference): could be also done with simple for(var checkContraint : checkConstraints)", "url": "https://github.com/crate/crate/pull/9831#discussion_r404652081", "createdAt": "2020-04-07T09:03:15Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/analyze/DropCheckConstraintAnalyzer.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.analyze;\n+\n+import io.crate.common.collections.Lists2;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.Schemas;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.metadata.table.Operation;\n+import io.crate.sql.tree.CheckConstraint;\n+import io.crate.sql.tree.Table;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+class DropCheckConstraintAnalyzer {\n+\n+    private final Schemas schemas;\n+\n+    DropCheckConstraintAnalyzer(Schemas schemas) {\n+        this.schemas = schemas;\n+    }\n+\n+    public AnalyzedAlterTableDropCheckConstraint analyze(Table<?> table, String name, CoordinatorTxnCtx txnCtx) {\n+        DocTableInfo tableInfo = (DocTableInfo) schemas.resolveTableInfo(\n+            table.getName(),\n+            Operation.ALTER,\n+            txnCtx.sessionContext().user(),\n+            txnCtx.sessionContext().searchPath());\n+        List<CheckConstraint<Symbol>> checkConstraints = tableInfo.checkConstraints();\n+        for (int i = 0; i < checkConstraints.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAwNzA4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowNjoxNFrOGB6HZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMDoxODoyOVrOGINdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw==", "bodyText": "maybe worth adding an assertion to ensure its a boolean? Is this ensured somewhere else? otherwise it should throw an exception here.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404653927", "createdAt": "2020-04-07T09:06:14Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2MzYwMA==", "bodyText": "the grammar makes it be the result of a boolean expression, so it will always be boolean", "url": "https://github.com/crate/crate/pull/9831#discussion_r404863600", "createdAt": "2020-04-07T14:41:44Z", "author": {"login": "marregui"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMTU4Mw==", "bodyText": "I think it's worth adding an assertion or inline comment that clarifies that", "url": "https://github.com/crate/crate/pull/9831#discussion_r406121583", "createdAt": "2020-04-09T10:52:19Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4ODE4OQ==", "bodyText": "Yes lets please add at least a comment, I'd even add an assertion.", "url": "https://github.com/crate/crate/pull/9831#discussion_r411188189", "createdAt": "2020-04-20T08:24:51Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI2MjIzNg==", "bodyText": "Assertion added.", "url": "https://github.com/crate/crate/pull/9831#discussion_r411262236", "createdAt": "2020-04-20T10:18:29Z", "author": {"login": "marregui"}, "path": "sql/src/main/java/io/crate/execution/dml/upsert/CheckConstraints.java", "diffHunk": "@@ -71,5 +78,22 @@ public void validate(T values) {\n                 throw new IllegalArgumentException(\"\\\"\" + notNullColumns.get(i) + \"\\\" must not be null\");\n             }\n         }\n+        for (int i = 0; i < checkConstraints.size(); i++) {\n+            Tuple<? extends Input<?>, CheckConstraint<Symbol>> checkEntry = checkConstraints.get(i);\n+            Input<?> checkInput = checkEntry.v1();\n+            Boolean value = (Boolean) checkInput.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzkyNw=="}, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAzMzcwOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxMzoxNVrOGB6YOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxMzoxNVrOGB6YOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1ODIzMw==", "bodyText": "isn't this a duplicate of https://github.com/crate/crate/pull/9831/files#diff-288536de2bb838c7a805c32bcc63f8ddR397", "url": "https://github.com/crate/crate/pull/9831#discussion_r404658233", "createdAt": "2020-04-07T09:13:15Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1204,6 +1221,43 @@ private void assertDuplicatePrimaryKey(String stmt) {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithCheckConstraints() {\n+        String stmt = \"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\";\n+        BoundCreateTable analysis = analyze(stmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_id_ge_zero\")));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     Maps.getByPath(mapping, Arrays.asList(\"_meta\", \"check_constraints\", \"check_qty_gt_zero\")));\n+    }\n+\n+    @Test\n+    public void testAlterTableAddColumnWithCheckConstraint() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA0NjI4OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNjoyNlrOGB6gNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNjoyNlrOGB6gNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2MDI3OA==", "bodyText": "sqlExecutor, docTableInfo and  tnxCtx can be all a local variables.", "url": "https://github.com/crate/crate/pull/9831#discussion_r404660278", "createdAt": "2020-04-07T09:16:26Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/execution/dml/upsert/CheckConstraintsTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.execution.dml.upsert;\n+\n+import io.crate.expression.InputFactory;\n+import io.crate.metadata.CoordinatorTxnCtx;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.doc.DocTableInfo;\n+import io.crate.test.integration.CrateDummyClusterServiceUnitTest;\n+import io.crate.testing.SQLExecutor;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Testing {@linkplain io.crate.execution.dml.upsert.CheckConstraints},\n+ * as well as various cases related to:\n+ *\n+ * <pre>\n+ *     CONSTRAINT &lt;name&gt; CHECK &lt;boolean expression&gt;\n+ * </pre>\n+ */\n+public class CheckConstraintsTest extends CrateDummyClusterServiceUnitTest {\n+\n+    private SQLExecutor sqlExecutor;\n+    private DocTableInfo docTableInfo;\n+    private CheckConstraints checkConstraints;\n+    private TransactionContext txnCtx;\n+\n+    @Before\n+    public void setUpExecutor() throws Exception {\n+        sqlExecutor = SQLExecutor.builder(clusterService)\n+            .addTable(\"CREATE TABLE t (\" +\n+                      \"    id int,\" +\n+                      \"    qty int,\" +\n+                      \"    sentinel boolean CONSTRAINT sentinel CHECK(sentinel),\" +\n+                      \"    CONSTRAINT id_is_even CHECK(id % 2 = 0))\")\n+            .build();\n+        docTableInfo = sqlExecutor.resolveTableInfo(\"t\");\n+        txnCtx = CoordinatorTxnCtx.systemTransactionContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f91a67f0c2ee89f299ddc46d9868b90f11e2f7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg1OTYyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/common/StringUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NDo1MFrOGDPWmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0NDo1MFrOGDPWmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MDQ1Nw==", "bodyText": "I don't think that this complexity is really worth it for simple toString methods. Also, most IDE's have nice toString method generators.", "url": "https://github.com/crate/crate/pull/9831#discussion_r406050457", "createdAt": "2020-04-09T08:44:50Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/common/StringUtils.java", "diffHunk": "@@ -24,11 +24,31 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n import javax.annotation.Nullable;\n \n public final class StringUtils {\n \n+    public static String toString(Class<?> clazz, Object...attributes) {\n+        if (attributes.length % 2 != 0) {\n+            throw new IllegalArgumentException(\"expected event number of entries\");\n+        }\n+        StringBuilder sb = new StringBuilder(32);\n+        sb.append(clazz.getClass().getName()).append('{');\n+        if (attributes.length > 0) {\n+            for (int i = 0; i <= attributes.length / 2; i += 2) {\n+                sb.append(Objects.requireNonNull(attributes[i]))\n+                    .append(\"=\")\n+                    .append(attributes[i + 1])\n+                    .append(\", \");\n+            }\n+            sb.setLength(sb.length() - 2);\n+        }\n+        sb.append(\"}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0cc534d5078166a8195e08c0da6c7709f6f1201"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTg2NzAwOnYy", "diffSide": "LEFT", "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo0Njo1NFrOGDPbQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToxNDoyOFrOGFw5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA==", "bodyText": "is it expected behaviour that this is now possible?", "url": "https://github.com/crate/crate/pull/9831#discussion_r406051648", "createdAt": "2020-04-09T08:46:54Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyMDc3NQ==", "bodyText": "I'd be in favour of reverting this behavior change and do it in a separate PR - together with change log entry + dedicated tests (also for the execution layer)", "url": "https://github.com/crate/crate/pull/9831#discussion_r406120775", "createdAt": "2020-04-09T10:50:31Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA=="}, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1MTc0OQ==", "bodyText": "nope, that was corrected, restoring original behaviour, apologies for the confusion", "url": "https://github.com/crate/crate/pull/9831#discussion_r406651749", "createdAt": "2020-04-10T08:04:21Z", "author": {"login": "marregui"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA=="}, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NDQ0MQ==", "bodyText": "Hi @mfussenegger,  just so that I have it correct:\n create table foo (\n   ts timestamp with time zone,\n   day as date_trunc('day', ts),\n   date_string as cast(day as string))\n\nyou are saying that column date_string cannot be defined because is defined from day?\nwith my solution you may. Should I revert that?\nThank you", "url": "https://github.com/crate/crate/pull/9831#discussion_r406654441", "createdAt": "2020-04-10T08:12:21Z", "author": {"login": "marregui"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA=="}, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5NzM0MA==", "bodyText": "I will revert this.", "url": "https://github.com/crate/crate/pull/9831#discussion_r408697340", "createdAt": "2020-04-15T09:14:28Z", "author": {"login": "marregui"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1086,8 +1087,6 @@ public void testCreateTableGeneratedColumnWithMatch() {\n \n     @Test\n     public void testCreateTableGeneratedColumnBasedOnGeneratedColumn() {\n-        expectedException.expect(IllegalArgumentException.class);\n-        expectedException.expectMessage(\"A generated column cannot be based on a generated column\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1MTY0OA=="}, "originalCommit": {"oid": "09a25b17d6e8706474db95749e82f23785ea47e1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1570, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}