{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTY3NDgy", "number": 9937, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowNTo1NFrOD7iYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxMDoyM1rOD7ifHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzU1ODg2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/Dummy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowNTo1NFrOGT64Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxNjozM1rOGT7Rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MDc2Mw==", "bodyText": "Is this actually used?", "url": "https://github.com/crate/crate/pull/9937#discussion_r423540763", "createdAt": "2020-05-12T08:05:54Z", "author": {"login": "seut"}, "path": "server/src/test/java/Dummy.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+class Dummy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e33aed126d2a55acb48c16b8d8ee592143d01e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NzMyNw==", "bodyText": "Yes, there are some tests that load this class dynamically.", "url": "https://github.com/crate/crate/pull/9937#discussion_r423547327", "createdAt": "2020-05-12T08:16:33Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/Dummy.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+class Dummy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MDc2Mw=="}, "originalCommit": {"oid": "27e33aed126d2a55acb48c16b8d8ee592143d01e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzU3NTk4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxMDoyM1rOGT7DAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODoxNzoxNlrOGT7TnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MzU1NQ==", "bodyText": "Should this be removed or re-enabled?", "url": "https://github.com/crate/crate/pull/9937#discussion_r423543555", "createdAt": "2020-05-12T08:10:23Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java", "diffHunk": "@@ -1444,34 +1441,33 @@ public void testNumericScriptOnAllTypes() {\n \n     @Test\n     public void testWhereColumnEqColumnAndFunctionEqFunction() throws Exception {\n-        this.setup.setUpLocations();\n-        ensureYellow();\n-        refresh();\n+        execute(\"create table tbl (name text)\");\n+        execute(\"insert into tbl (name) values ('Arthur'), ('Trillian')\");\n+        execute(\"refresh table tbl\");\n \n-        execute(\"select name from locations where name = name\");\n-        assertThat(response.rowCount(), is(13L));\n+        execute(\"select name from tbl where name = name\");\n+        assertThat(response.rowCount(), is(2L));\n \n-        execute(\"select name from locations where substr(name, 1, 1) = substr(name, 1, 1)\");\n-        assertThat(response.rowCount(), is(13L));\n+        execute(\"select name from tbl where substr(name, 1, 1) = substr(name, 1, 1)\");\n+        assertThat(response.rowCount(), is(2L));\n     }\n \n     @Test\n     public void testNewColumn() throws Exception {\n         execute(\"create table t (name string) with (number_of_replicas=0, column_policy = 'dynamic')\");\n-        ensureYellow();\n         execute(\"insert into t (name, score) values ('Ford', 1.2)\");\n     }\n \n     @Test\n     public void testESGetSourceColumns() throws Exception {\n-        this.setup.setUpLocations();\n-        ensureYellow();\n+        execute(\"create table tbl (id int primary key, x int)\");\n+        execute(\"insert into tbl (id, x) values (1, 1), (2, 2), (3, 3)\");\n         refresh();\n \n-        execute(\"select _id, _version from locations where id=2\");\n-        assertNotNull(response.rows()[0][0]);\n-        assertNotNull(response.rows()[0][1]);\n+        execute(\"select _id, _version from tbl where id = 2\");\n+        assertThat(printedTable(response.rows()), is(\"2| 1\\n\"));\n \n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18162d2e31894c03ca2181e068cf0451fe8ee894"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NzgwNQ==", "bodyText": "They should be re-enabled, thanks for catching", "url": "https://github.com/crate/crate/pull/9937#discussion_r423547805", "createdAt": "2020-05-12T08:17:16Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/TransportSQLActionTest.java", "diffHunk": "@@ -1444,34 +1441,33 @@ public void testNumericScriptOnAllTypes() {\n \n     @Test\n     public void testWhereColumnEqColumnAndFunctionEqFunction() throws Exception {\n-        this.setup.setUpLocations();\n-        ensureYellow();\n-        refresh();\n+        execute(\"create table tbl (name text)\");\n+        execute(\"insert into tbl (name) values ('Arthur'), ('Trillian')\");\n+        execute(\"refresh table tbl\");\n \n-        execute(\"select name from locations where name = name\");\n-        assertThat(response.rowCount(), is(13L));\n+        execute(\"select name from tbl where name = name\");\n+        assertThat(response.rowCount(), is(2L));\n \n-        execute(\"select name from locations where substr(name, 1, 1) = substr(name, 1, 1)\");\n-        assertThat(response.rowCount(), is(13L));\n+        execute(\"select name from tbl where substr(name, 1, 1) = substr(name, 1, 1)\");\n+        assertThat(response.rowCount(), is(2L));\n     }\n \n     @Test\n     public void testNewColumn() throws Exception {\n         execute(\"create table t (name string) with (number_of_replicas=0, column_policy = 'dynamic')\");\n-        ensureYellow();\n         execute(\"insert into t (name, score) values ('Ford', 1.2)\");\n     }\n \n     @Test\n     public void testESGetSourceColumns() throws Exception {\n-        this.setup.setUpLocations();\n-        ensureYellow();\n+        execute(\"create table tbl (id int primary key, x int)\");\n+        execute(\"insert into tbl (id, x) values (1, 1), (2, 2), (3, 3)\");\n         refresh();\n \n-        execute(\"select _id, _version from locations where id=2\");\n-        assertNotNull(response.rows()[0][0]);\n-        assertNotNull(response.rows()[0][1]);\n+        execute(\"select _id, _version from tbl where id = 2\");\n+        assertThat(printedTable(response.rows()), is(\"2| 1\\n\"));\n \n+        /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MzU1NQ=="}, "originalCommit": {"oid": "18162d2e31894c03ca2181e068cf0451fe8ee894"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1471, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}