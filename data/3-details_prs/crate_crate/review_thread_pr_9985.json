{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTYxMDIw", "number": 9985, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0NzoxNVrOD_SvrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDoxOFrOD_TEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjkzOTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo0NzoxNVrOGZ34Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzo1NToyOFrOGZ4IJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4MzA4Ng==", "bodyText": "Would it be possible to remove the isEagerNormalizationAllowed flag now altogether?\nWe've afaik only 2 places where it is disabled (for using literals as table function and in the values case), in those cases we could call expression.accept.. directly instead of going through convert.", "url": "https://github.com/crate/crate/pull/9985#discussion_r429783086", "createdAt": "2020-05-25T07:47:15Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -215,7 +216,12 @@ public ExpressionAnalyzer(Functions functions,\n      * Functions with constants will be normalized.\n      */\n     public Symbol convert(Expression expression, ExpressionAnalysisContext expressionAnalysisContext) {\n-        return expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var symbol = expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var normalizer = EvaluatingNormalizer.functionOnlyNormalizer(\n+            functions,\n+            f -> expressionAnalysisContext.isEagerNormalizationAllowed() && f.info().isDeterministic()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4NzE3NQ==", "bodyText": "Nevermind. I think then it wouldn't apply for inner convert calls. Guess we have to keep it.", "url": "https://github.com/crate/crate/pull/9985#discussion_r429787175", "createdAt": "2020-05-25T07:55:28Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -215,7 +216,12 @@ public ExpressionAnalyzer(Functions functions,\n      * Functions with constants will be normalized.\n      */\n     public Symbol convert(Expression expression, ExpressionAnalysisContext expressionAnalysisContext) {\n-        return expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var symbol = expression.accept(innerAnalyzer, expressionAnalysisContext);\n+        var normalizer = EvaluatingNormalizer.functionOnlyNormalizer(\n+            functions,\n+            f -> expressionAnalysisContext.isEagerNormalizationAllowed() && f.info().isDeterministic()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4MzA4Ng=="}, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Njk5MzQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNDoxOFrOGZ4Y9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNzoxMlrOGZ4eYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTQ3Ng==", "bodyText": "explicitCast is not used at all in isConvertableTo", "url": "https://github.com/crate/crate/pull/9985#discussion_r429791476", "createdAt": "2020-05-25T08:04:18Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -107,7 +107,7 @@ public boolean precedes(DataType other) {\n      * @param other the DataType to check conversion to\n      * @return true or false\n      */\n-    public boolean isConvertableTo(DataType<?> other) {\n+    public boolean isConvertableTo(DataType<?> other, boolean explicitCast) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjQ1OA==", "bodyText": "It is: https://github.com/crate/crate/pull/9985/files#diff-932a1ef471972a95b5dfde013523b515R186", "url": "https://github.com/crate/crate/pull/9985#discussion_r429792458", "createdAt": "2020-05-25T08:06:17Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -107,7 +107,7 @@ public boolean precedes(DataType other) {\n      * @param other the DataType to check conversion to\n      * @return true or false\n      */\n-    public boolean isConvertableTo(DataType<?> other) {\n+    public boolean isConvertableTo(DataType<?> other, boolean explicitCast) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTQ3Ng=="}, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjcwNA==", "bodyText": "Or here: https://github.com/crate/crate/pull/9985/files#diff-d9273c5d03d846ae406a74ae5af32ad5R109", "url": "https://github.com/crate/crate/pull/9985#discussion_r429792704", "createdAt": "2020-05-25T08:06:52Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -107,7 +107,7 @@ public boolean precedes(DataType other) {\n      * @param other the DataType to check conversion to\n      * @return true or false\n      */\n-    public boolean isConvertableTo(DataType<?> other) {\n+    public boolean isConvertableTo(DataType<?> other, boolean explicitCast) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTQ3Ng=="}, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5Mjg2NA==", "bodyText": "ah i see, tnx", "url": "https://github.com/crate/crate/pull/9985#discussion_r429792864", "createdAt": "2020-05-25T08:07:12Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -107,7 +107,7 @@ public boolean precedes(DataType other) {\n      * @param other the DataType to check conversion to\n      * @return true or false\n      */\n-    public boolean isConvertableTo(DataType<?> other) {\n+    public boolean isConvertableTo(DataType<?> other, boolean explicitCast) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MTQ3Ng=="}, "originalCommit": {"oid": "68141748f43ab2d419bc7e1fad69061d65c63464"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1518, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}