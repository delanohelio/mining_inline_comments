{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzY1ODMy", "number": 9915, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOD6Irxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoxOVrOEFdO0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg2Mjc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOGRy8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMToxMVrOGRy8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxMzcwNQ==", "bodyText": "Why is BOOLEAN allowed here?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421313705", "createdAt": "2020-05-07T08:01:11Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -169,6 +174,7 @@\n         entry(IP.id(), Set.of(STRING.id())),\n         entry(TIMESTAMPZ.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMP.id())),\n         entry(TIMESTAMP.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMPZ.id())),\n+        entry(TIME.id(), Set.of(BOOLEAN.id(), STRING.id(), INTEGER.id())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg2NjUyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMjowN1rOGRy-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowMjowN1rOGRy-2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDI2Ng==", "bodyText": "Is  float -> time really a safe (lossless) conversion?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421314266", "createdAt": "2020-05-07T08:02:07Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -181,11 +187,11 @@\n      * used to store the value)\n      */\n     private static final Map<Integer, Set<DataType>> SAFE_CONVERSIONS = Map.of(\n-        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n+        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n         LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, DOUBLE),\n-        FLOAT.id(), Set.of(DOUBLE));\n+        FLOAT.id(), Set.of(TIME, DOUBLE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg3Nzc3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNToxN1rOGRzF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNToxN1rOGRzF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjA0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final int id;\n          \n          \n            \n                private final String name;\n          \n      \n    \n    \n  \n\nGiven that there is only a single instance with fixed types we can remove the attributes and just return the constants. Reduces the memory footprint a bit.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421316049", "createdAt": "2020-05-07T08:05:17Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {\n+\n+    public static final int ID = 19;\n+    public static final String NAME = \"time without time zone\";\n+    public static final TimeType INSTANCE = new TimeType(ID, NAME);\n+\n+\n+    private final int id;\n+    private final String name;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg3OTk4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNTo1OFrOGRzHOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowNTo1OFrOGRzHOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static int translateFrom(@Nonnull Float number) {\n          \n          \n            \n                public static int translateFrom(float number) {", "url": "https://github.com/crate/crate/pull/9915#discussion_r421316409", "createdAt": "2020-05-07T08:05:58Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {\n+\n+    public static final int ID = 19;\n+    public static final String NAME = \"time without time zone\";\n+    public static final TimeType INSTANCE = new TimeType(ID, NAME);\n+\n+\n+    private final int id;\n+    private final String name;\n+\n+    private TimeType(int id, String name) {\n+        this.id = id;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public int id() {\n+        return id;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIME;\n+    }\n+\n+    @Override\n+    public Streamer<Integer> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(Integer val1, Integer val2) {\n+        return Integer.compare(val1, val2);\n+    }\n+\n+    @Override\n+    public Integer readValueFrom(StreamInput in) throws IOException {\n+        return in.readBoolean() ? null : in.readInt();\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, Integer v) throws IOException {\n+        out.writeBoolean(v == null);\n+        if (v != null) {\n+            out.writeInt(v);\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return IntegerType.INTEGER_SIZE;\n+    }\n+\n+    @Override\n+    public Integer value(Object value) throws ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof String) {\n+            return parseTime((String) value);\n+        }\n+        // float values are treated as \"seconds.milliseconds\"\n+        if (value instanceof Double) {\n+            Double n = (Double) value;\n+            if (n.doubleValue() < Float.MAX_VALUE) {\n+                return translateFrom(n.floatValue());\n+            }\n+            throw new IllegalArgumentException(String.format(\n+                Locale.ENGLISH,\n+                \"value too large [%f] if does not fit in a float\",\n+                value));\n+        }\n+        if (value instanceof Float) {\n+            return translateFrom((Float) value);\n+        }\n+        return value instanceof Integer ? (Integer) value : ((Number) value).intValue();\n+    }\n+\n+    public static int translateFrom(@Nonnull Float number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg4ODA5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowODoyMVrOGRzMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODowODoyMVrOGRzMXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzcyNg==", "bodyText": "Could you add some docs that explain the allowed input formats and the internal storage format a bit?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421317726", "createdAt": "2020-05-07T08:08:21Z", "author": {"login": "mfussenegger"}, "path": "common/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+\n+public final class TimeType extends DataType<Integer> implements FixedWidthType, Streamer<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg5NDkwOnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMDoxM1rOGRzQgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMDoxM1rOGRzQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxODc4NQ==", "bodyText": "I think CURRENT_TIME could be explained without referencing to CURRENT_TIMESTAMP - would be easier to understand as you don't need to piggy-back onto existing knowledge of CURRENT_TIMESTAMP", "url": "https://github.com/crate/crate/pull/9915#discussion_r421318785", "createdAt": "2020-05-07T08:10:13Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -69,6 +69,9 @@ None\n Changes\n =======\n \n+- Added the scalar function ``CURRENT_TIME``, which returns the time portion\n+  of ``CURRENT_TIMESTAMP`` in absolute milliseconds, see :ref:`current_time`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg5NjU2OnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMDo0M1rOGRzRmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMDo0M1rOGRzRmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTA2NA==", "bodyText": "Same here. Please make the primary explanation without reference to CURRENT_TIMESTAMP", "url": "https://github.com/crate/crate/pull/9915#discussion_r421319064", "createdAt": "2020-05-07T08:10:43Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -816,6 +816,22 @@ are given.\n    ``System.currentTimeMillis()``. So its actual result depends on the\n    underlying operating system.\n \n+.. _current_time:\n+\n+``CURRENT_TIME``\n+----------------\n+\n+The ``CURRENT_TIME`` expression returns the time portion of ``CURRENT_TIMESTAMP``\n+in absolute milliseconds. The same time value is returned for every invocation of\n+a single statement, and will match the time portion of invocations to\n+``CURRENT_TIMESTAMP`` in the same statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjg5ODY5OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMToxNlrOGRzS4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMToxNlrOGRzS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTM5NA==", "bodyText": "This is missing the typtype column? That can't be working, no?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421319394", "createdAt": "2020-05-07T08:11:16Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -159,42 +159,42 @@ table available in CrateDB::\n     cr> SELECT oid, typname, typarray, typelem, typlen, typtype, typcategory\n     ... FROM pg_catalog.pg_type\n     ... ORDER BY oid;\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    |  oid | typname                      | typarray | typelem | typlen | typtype | typcategory |\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    |   16 | bool                         |     1000 |       0 |      1 | b       | N           |\n-    |   18 | char                         |     1002 |       0 |      1 | b       | S           |\n-    |   19 | name                         |       -1 |       0 |     64 | b       | S           |\n-    |   20 | int8                         |     1016 |       0 |      8 | b       | N           |\n-    |   21 | int2                         |     1005 |       0 |      2 | b       | N           |\n-    |   23 | int4                         |     1007 |       0 |      4 | b       | N           |\n-    |  114 | json                         |      199 |       0 |     -1 | b       | U           |\n-    |  199 | _json                        |        0 |     114 |     -1 | b       | A           |\n-    |  600 | point                        |     1017 |       0 |     16 | b       | G           |\n-    |  700 | float4                       |     1021 |       0 |      4 | b       | N           |\n-    |  701 | float8                       |     1022 |       0 |      8 | b       | N           |\n-    | 1000 | _bool                        |        0 |      16 |     -1 | b       | A           |\n-    | 1002 | _char                        |        0 |      18 |     -1 | b       | A           |\n-    | 1005 | _int2                        |        0 |      21 |     -1 | b       | A           |\n-    | 1007 | _int4                        |        0 |      23 |     -1 | b       | A           |\n-    | 1015 | _varchar                     |        0 |    1043 |     -1 | b       | A           |\n-    | 1016 | _int8                        |        0 |      20 |     -1 | b       | A           |\n-    | 1017 | _point                       |        0 |     600 |     -1 | b       | A           |\n-    | 1021 | _float4                      |        0 |     700 |     -1 | b       | A           |\n-    | 1022 | _float8                      |        0 |     701 |     -1 | b       | A           |\n-    | 1043 | varchar                      |     1015 |       0 |     -1 | b       | S           |\n-    | 1114 | timestamp without time zone  |     1115 |       0 |      8 | b       | D           |\n-    | 1115 | _timestamp without time zone |        0 |    1114 |     -1 | b       | A           |\n-    | 1184 | timestamptz                  |     1185 |       0 |      8 | b       | D           |\n-    | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n-    | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n-    | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n-    | 2249 | record                       |     2287 |       0 |     -1 | p       | P           |\n-    | 2276 | any                          |        0 |       0 |      4 | p       | P           |\n-    | 2277 | anyarray                     |        0 |    2276 |     -1 | p       | P           |\n-    | 2287 | _record                      |        0 |    2249 |     -1 | p       | A           |\n-    +------+------------------------------+----------+---------+--------+---------+-------------+\n-    SELECT 31 rows in set (... sec)\n+    \n+    +------+------------------------------+----------+---------+--------+-------------+\n+    |  oid | typname                      | typarray | typelem | typlen | typcategory |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkwMzE0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMjozMlrOGRzVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoyMTo1N1rOGYtw9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDEzMw==", "bodyText": "The conditions seem a bit redundant - maybe this could be changed to avoid the duplicate isTime checks - I think then it would also be easier to read.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421320133", "createdAt": "2020-05-07T08:12:32Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -448,13 +449,15 @@ protected Symbol visitExpression(Expression node, ExpressionAnalysisContext cont\n \n         @Override\n         protected Symbol visitCurrentTime(CurrentTime node, ExpressionAnalysisContext context) {\n-            if (!node.getType().equals(CurrentTime.Type.TIMESTAMP)) {\n+            boolean isTime = node.getType().equals(CurrentTime.Type.TIME);\n+            if (!(node.getType().equals(CurrentTime.Type.TIMESTAMP) || isTime)) {\n                 visitExpression(node, context);\n             }\n+            String functionName = isTime ? CurrentTimeFunction.NAME : CurrentTimestampFunction.NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2ODgyMw==", "bodyText": "I have removed the implementation of CurrentTimeFunction from this PR.\nIt was dragged in by mistake, as I rebased from the branch I use for it.\nThe plan is to get TimeType in and then use it to move forward with the function. I'd rather not mix.", "url": "https://github.com/crate/crate/pull/9915#discussion_r428568823", "createdAt": "2020-05-21T10:21:57Z", "author": {"login": "marregui"}, "path": "sql/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -448,13 +449,15 @@ protected Symbol visitExpression(Expression node, ExpressionAnalysisContext cont\n \n         @Override\n         protected Symbol visitCurrentTime(CurrentTime node, ExpressionAnalysisContext context) {\n-            if (!node.getType().equals(CurrentTime.Type.TIMESTAMP)) {\n+            boolean isTime = node.getType().equals(CurrentTime.Type.TIME);\n+            if (!(node.getType().equals(CurrentTime.Type.TIMESTAMP) || isTime)) {\n                 visitExpression(node, context);\n             }\n+            String functionName = isTime ? CurrentTimeFunction.NAME : CurrentTimestampFunction.NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDEzMw=="}, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkxMDI0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNDoyN1rOGRzaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNDoyN1rOGRzaXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMTMxMA==", "bodyText": "Why does this return Long and TIMESTAMPZ ? Shouldn't this return the new time type?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421321310", "createdAt": "2020-05-07T08:14:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.timestamp;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+import javax.annotation.Nullable;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CurrentTimeFunction extends Scalar<Long, Integer> {\n+\n+    public static final String NAME = \"current_time\";\n+\n+    public static final FunctionInfo INFO = new FunctionInfo(\n+        new FunctionIdent(NAME, List.of(DataTypes.INTEGER)),\n+        DataTypes.TIMESTAMPZ,\n+        FunctionInfo.Type.SCALAR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkyMTQ5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNzozMFrOGRzhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxNzozMFrOGRzhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMzEwNQ==", "bodyText": "Using Instant may be a bit expensive for what it does", "url": "https://github.com/crate/crate/pull/9915#discussion_r421323105", "createdAt": "2020-05-07T08:17:30Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/expression/scalar/timestamp/CurrentTimeFunction.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.scalar.timestamp;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+import javax.annotation.Nullable;\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class CurrentTimeFunction extends Scalar<Long, Integer> {\n+\n+    public static final String NAME = \"current_time\";\n+\n+    public static final FunctionInfo INFO = new FunctionInfo(\n+        new FunctionIdent(NAME, List.of(DataTypes.INTEGER)),\n+        DataTypes.TIMESTAMPZ,\n+        FunctionInfo.Type.SCALAR,\n+        Collections.emptySet());\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\n+                NAME,\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.TIMESTAMPZ.getTypeSignature()\n+            ),\n+            (signature, args) -> new CurrentTimeFunction(signature)\n+        );\n+    }\n+\n+    private final Signature signature;\n+\n+    public CurrentTimeFunction(Signature signature) {\n+        this.signature = signature;\n+    }\n+\n+    @Override\n+    @SafeVarargs\n+    public final Long evaluate(TransactionContext txnCtx, Input<Integer>... args) {\n+        long now = txnCtx.currentTimeMillis();\n+        long justDate = Instant\n+            .ofEpochMilli(now)\n+            .atZone(ZoneOffset.UTC)\n+            .truncatedTo(ChronoUnit.DAYS)\n+            .toInstant()\n+            .toEpochMilli();\n+        return CurrentTimestampFunction.applyPrecision(now - justDate, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjkzNDAyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMDo1MVrOGRzpAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMDo1MVrOGRzpAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTA1OQ==", "bodyText": "In PostgreSQL the typlen is 8. Which would imply that we use less storage and that the streaming implementation is not compatible.", "url": "https://github.com/crate/crate/pull/9915#discussion_r421325059", "createdAt": "2020-05-07T08:20:51Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+import static io.crate.types.TimeType.parseTime;\n+import static io.crate.types.TimeType.formatTime;\n+\n+\n+final class TimeType extends PGType<Integer> {\n+\n+    public static final PGType<Integer> INSTANCE = new TimeType();\n+\n+    private static final int OID = 1083;\n+    private static final int TYPE_MOD = -1;\n+    private static final int TYPE_LEN = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjk0MDA0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMjoyOFrOGRzsrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoyODowNVrOGYt72Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTk5OQ==", "bodyText": "Why is this necessary?", "url": "https://github.com/crate/crate/pull/9915#discussion_r421325999", "createdAt": "2020-05-07T08:22:28Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -313,7 +314,10 @@ public void testWhereNotEqualAnyWithLargeArray() throws Exception {\n \n     @Test\n     public void testNullOperators() throws Exception {\n-        DataType<?> type = randomType();\n+        DataType<?> type;\n+        do {\n+           type = randomType();\n+        } while (type == DataTypes.INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTYwOQ==", "bodyText": "Because you cannot have a column of type interval.\ncr> create table t1(c interval);\nSQLActionException[SQLParseException: Cannot use the type `interval` for column: c]\n\nSQLActionException: 400 Bad Request 4000 SQLParseException: Cannot use the type `interval` for column: c\n\tat io.crate.analyze.AnalyzedColumnDefinition.validate(AnalyzedColumnDefinition.java:369)\n\tat io.crate.analyze.AnalyzedTableElements.finalizeAndValidate(AnalyzedTableElements.java:319)\n\tat io.crate.planner.node.ddl.CreateTablePlan.bind(CreateTablePlan.java:150)\n\tat io.crate.planner.node.ddl.CreateTablePlan.executeOrFail(CreateTablePlan.java:97)\n\tat io.crate.planner.Plan.execute(Plan.java:74)\n       ...", "url": "https://github.com/crate/crate/pull/9915#discussion_r428571609", "createdAt": "2020-05-21T10:28:05Z", "author": {"login": "marregui"}, "path": "sql/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -313,7 +314,10 @@ public void testWhereNotEqualAnyWithLargeArray() throws Exception {\n \n     @Test\n     public void testNullOperators() throws Exception {\n-        DataType<?> type = randomType();\n+        DataType<?> type;\n+        do {\n+           type = randomType();\n+        } while (type == DataTypes.INTERVAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTk5OQ=="}, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjk0MjAzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMjo1OVrOGRzt5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMjo1OVrOGRzt5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNjMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ensureYellow();\n          \n      \n    \n    \n  \n\nensureYellow is implicit on CREATE TABLE", "url": "https://github.com/crate/crate/pull/9915#discussion_r421326308", "createdAt": "2020-05-07T08:22:59Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/SQLTypeMappingTest.java", "diffHunk": "@@ -575,4 +575,15 @@ public void testInsertTimestampPreferMillis() {\n         assertThat((Long) response.rows()[0][0], is(1000L));\n         assertThat((Long) response.rows()[1][0], is(2016L));\n     }\n+\n+    @Test\n+    public void test_insert_time_without_time_zone() {\n+        execute(\"create table eons_table (dt time) \" +\n+                \"clustered into 2 shards with (number_of_replicas=0)\");\n+        ensureYellow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c039c0436c10d2017eed7295ed74f94aec82d2b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzQ4MjE4OnYy", "diffSide": "RIGHT", "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDo0OTowMlrOGZ9JJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDo1NTozM1rOGZ9THQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTM0OQ==", "bodyText": "it can be removed, the defined data type rule is used to define types that cannot be matched with ident, e.g. data types with whitespaces.", "url": "https://github.com/crate/crate/pull/9915#discussion_r429869349", "createdAt": "2020-05-25T10:49:02Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -548,6 +548,8 @@ definedDataType\n     : DOUBLE PRECISION\n     | TIMESTAMP WITHOUT TIME ZONE\n     | TIMESTAMP WITH TIME ZONE\n+    | TIME WITHOUT TIME ZONE\n+    | TIME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d88b70f89c6a30a168b07bf3edad0055064f025"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTkwMQ==", "bodyText": "remove time ?", "url": "https://github.com/crate/crate/pull/9915#discussion_r429871901", "createdAt": "2020-05-25T10:55:33Z", "author": {"login": "marregui"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -548,6 +548,8 @@ definedDataType\n     : DOUBLE PRECISION\n     | TIMESTAMP WITHOUT TIME ZONE\n     | TIMESTAMP WITH TIME ZONE\n+    | TIME WITHOUT TIME ZONE\n+    | TIME", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTM0OQ=="}, "originalCommit": {"oid": "0d88b70f89c6a30a168b07bf3edad0055064f025"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODQ5Njk0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzozNjoyNVrOGaG4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxODozMDoxNlrOGaHr7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyOTA0OA==", "bodyText": "Where is this difference in precision coming from?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430029048", "createdAt": "2020-05-25T17:36:25Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as milliseconds from Jan 1st 1970 (EPOCH), ignoring\n+ * the date portion, the time zone, and storing the value as UTC long.\n+ * <p>\n+ * Accepts two kinds of literal:\n+ * <ol>\n+ *    <li><b>numeric:</b>\n+ *      <ul>\n+ *        <li>short, integer and long values are taken at face value\n+ *        and range checked.</li>\n+ *        <li>double and float values are interpreted as seconds.millis\n+ *        and are range checked. float values loose some precision (milliseconds).\n+ *        </li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>hhmmss: e.g. 23:12:21</li>\n+ *        <li>hhmm: e.g. 23:12:00</li>\n+ *        <li>hh: e.g. 23:00:00</li>\n+ *        <li>hhmmss.ffffff: e.g. 23:12:21.999</li>\n+ *        <li>hhmm.ffffff: e.g. 23:12:00.999</li>\n+ *        <li>hh.ffffff: e.g. 23:00:00.999</li>\n+ *        <li>any ISO-8601 extended local time format</li>\n+ *      </ul>\n+ *    </li>\n+ * </ol>\n+ *\n+ * Precision is milli seconds (10e3 in a second, unlike postgres which is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0MjA5Mw==", "bodyText": "I store milliseconds from EPOCH, instead of microseconds from midnight (0L). Although I suppose that as EPOCH is also 0L, it would just be a matter of interpretation of the value. I went for milliseconds from epoch to make time look like a timestamp with no date.\nShould I try microseconds?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430042093", "createdAt": "2020-05-25T18:30:16Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as milliseconds from Jan 1st 1970 (EPOCH), ignoring\n+ * the date portion, the time zone, and storing the value as UTC long.\n+ * <p>\n+ * Accepts two kinds of literal:\n+ * <ol>\n+ *    <li><b>numeric:</b>\n+ *      <ul>\n+ *        <li>short, integer and long values are taken at face value\n+ *        and range checked.</li>\n+ *        <li>double and float values are interpreted as seconds.millis\n+ *        and are range checked. float values loose some precision (milliseconds).\n+ *        </li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>hhmmss: e.g. 23:12:21</li>\n+ *        <li>hhmm: e.g. 23:12:00</li>\n+ *        <li>hh: e.g. 23:00:00</li>\n+ *        <li>hhmmss.ffffff: e.g. 23:12:21.999</li>\n+ *        <li>hhmm.ffffff: e.g. 23:12:00.999</li>\n+ *        <li>hh.ffffff: e.g. 23:00:00.999</li>\n+ *        <li>any ISO-8601 extended local time format</li>\n+ *      </ul>\n+ *    </li>\n+ * </ol>\n+ *\n+ * Precision is milli seconds (10e3 in a second, unlike postgres which is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyOTA0OA=="}, "originalCommit": {"oid": "09bec9092ab9c13daadeb2ae73d3f87ffad7481b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk4ODcwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTowNlrOGa8e8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTowNlrOGa8e8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzEyMg==", "bodyText": "I think I'd rather be restrictive here for now and not allow any casts unless required for PostgreSQL compatibility (e.g. casting the string to time, but only if done explicitly)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907122", "createdAt": "2020-05-27T07:21:06Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -170,6 +175,7 @@\n         entry(IP.id(), Set.of(STRING.id())),\n         entry(TIMESTAMPZ.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMP.id())),\n         entry(TIMESTAMP.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id(), TIMESTAMPZ.id())),\n+        entry(TIME.id(), Set.of(DOUBLE.id(), LONG.id(), STRING.id())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk5MDE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTozNFrOGa8f5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTozNFrOGa8f5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzM2NQ==", "bodyText": "Similar here. I'd leave TIME out for now.", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907365", "createdAt": "2020-05-27T07:21:34Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -182,10 +188,11 @@\n      * used to store the value)\n      */\n     private static final Map<Integer, Set<DataType>> SAFE_CONVERSIONS = Map.of(\n-        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, FLOAT, DOUBLE),\n-        LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, DOUBLE),\n+        BYTE.id(), Set.of(SHORT, INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        SHORT.id(), Set.of(INTEGER, LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        INTEGER.id(), Set.of(LONG, TIMESTAMPZ, TIMESTAMP, TIME, FLOAT, DOUBLE),\n+        LONG.id(), Set.of(TIMESTAMPZ, TIMESTAMP, TIME, DOUBLE),\n+        DOUBLE.id(), Set.of(TIME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk5MDM4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTozN1rOGa8gBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMTozN1rOGa8gBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzM5OA==", "bodyText": "i think we do not need two entries for one type in the precedence", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907398", "createdAt": "2020-05-27T07:21:37Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataType.java", "diffHunk": "@@ -52,6 +52,8 @@\n         BYTE,\n         BOOLEAN,\n         SHORT,\n+        TIME_WITHOUT_TIME_ZONE,\n+        TIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk5Mjc0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMjoxM1rOGa8haA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMjoxM1rOGa8haA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzc1Mg==", "bodyText": "in pg it is just time\ntemplate1=# select typname from pg_catalog.pg_type where oid = 1083;\n typname\n---------\n time\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907752", "createdAt": "2020-05-27T07:22:13Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/TimeType.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Locale;\n+\n+import static io.crate.types.TimeType.parseTime;\n+import static io.crate.types.TimeType.formatTime;\n+\n+\n+final class TimeType extends PGType<Long> {\n+\n+    public static final PGType<Long> INSTANCE = new TimeType();\n+\n+    private static final int OID = 1083;\n+    private static final int TYPE_MOD = -1;\n+    private static final int TYPE_LEN = 8;\n+    private static final String TYPE_NAME = \"time without time zone\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk5MzU4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMjoyOFrOGa8h-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMjoyOFrOGa8h-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwNzg5Nw==", "bodyText": "Given that we don't want to support storage yet, can we remove this entry?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430907897", "createdAt": "2020-05-27T07:22:28Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -380,6 +390,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     );\n \n     private static final Map<Integer, String> TYPE_IDS_TO_MAPPINGS = Map.ofEntries(\n+        entry(TIME.id(), \"long\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk5NzgxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/planner/selectivity/SelectivityFunctionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMzo0N1rOGa8kqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMzo0N1rOGa8kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODU4NQ==", "bodyText": "should be removed ?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430908585", "createdAt": "2020-05-27T07:23:47Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/planner/selectivity/SelectivityFunctionsTest.java", "diffHunk": "@@ -24,6 +25,7 @@\n \n public class SelectivityFunctionsTest extends CrateDummyClusterServiceUnitTest {\n \n+    @Seed(\"BAAF67D01CA68AAE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAwMzk1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNToyNVrOGa8oPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNToyNVrOGa8oPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTUwMA==", "bodyText": "maybe extends CrateUnitTest, you also will get  ExpectedException from base class", "url": "https://github.com/crate/crate/pull/9915#discussion_r430909500", "createdAt": "2020-05-27T07:25:25Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package io.crate.types;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.function.Function;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class TimeTypeTest {\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAwNDkxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNTo0MlrOGa8o3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNTo0MlrOGa8o3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwOTY2Mg==", "bodyText": "PostgreSQL doesn't support numeric conversion to time:\nselect 231221.999::time;\nERROR:  42846: cannot cast type numeric to time without time zone\nLINE 1: select 231221.999::time\n\nI think we should also restrict this and not support it.\nCompared to using a string literal, which is supported:\n# select '231221.999'::time;\n     time\n--------------\n 23:12:21.999\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r430909662", "createdAt": "2020-05-27T07:25:42Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.time.temporal.ChronoField;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as microseconds from midnight, ignoring the time\n+ * zone and storing the value as UTC <b>long</b>.\n+ *\n+ * <p>\n+ *\n+ * There are 1000_000 microseconds in one second:\n+ *\n+ * <pre>\n+ *     (24 * 3600 + 59 * 60 + 59) * 1000_000L > Integer.MAX_VALUE\n+ * </pre>\n+ *\n+ * Thus the range for time values is 0 .. 86400000000 (max number\n+ * of micros in a day), where both extremes are equivalent to\n+ * '00:00:00:000000' and '24:00:00.000000' respectively.\n+ *\n+ * <p>\n+ *\n+ * Accepts four kinds of literal:\n+ * <ol>\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>'hhmmss': e.g. '232121', equivalent to '23:12:21'</li>\n+ *        <li>'hhmm': e.g. '2312', equivalent to '23:12:00'</li>\n+ *        <li>'hh': e.g. '23', equivalent to '23:00:00'</li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>numeric:\n+ *      <ul>\n+ *        <li>integer and long values are first interpreted as\n+ *        'text'. Failing this they are kept as is, representing\n+ *        microseconds from midnight, ignoring the time zone\n+ *        and storing the value as UTC.\n+ *    </li>\n+ *\n+ *    <li>text high precision:\n+ *      <p>\n+ *      Expects up to six digits after the floating point (number of\n+ *      micro seconds), and it will right pad with zeroes if this is\n+ *      not the case. For instance the examples below are all padded\n+ *      to 999000 micro seconds.\n+ *      <ul>\n+ *        <li>'hhmmss.ffffff': e.g. '231221.999', equivalent to '23:12:21.999'</li>\n+ *        <li>'hhmm.ffffff': e.g. '2312.999', equivalent to '23:12:00.999'</li>\n+ *        <li>'hh.ffffff': e.g. '23.999', equivalent to '23:00:00.999'</li>\n+ *      </ul>\n+ *    </li>\n+ *\n+ *    <li>numeric high precision:\n+ *      <ul>\n+ *        <li>double and float values are interpreted as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAwOTA4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNzowMFrOGa8rlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNzowMFrOGa8rlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDM1OQ==", "bodyText": "PostgreSQL also seems to support : inbetween:\nselect '14:32'::time;\n   time\n----------\n 14:32:00\n(1 row)\n\nCan we extend this?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430910359", "createdAt": "2020-05-27T07:27:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeType.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.DateTimeParseException;\n+import java.time.format.ResolverStyle;\n+import java.time.temporal.ChronoField;\n+import java.util.Locale;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Represents time as microseconds from midnight, ignoring the time\n+ * zone and storing the value as UTC <b>long</b>.\n+ *\n+ * <p>\n+ *\n+ * There are 1000_000 microseconds in one second:\n+ *\n+ * <pre>\n+ *     (24 * 3600 + 59 * 60 + 59) * 1000_000L > Integer.MAX_VALUE\n+ * </pre>\n+ *\n+ * Thus the range for time values is 0 .. 86400000000 (max number\n+ * of micros in a day), where both extremes are equivalent to\n+ * '00:00:00:000000' and '24:00:00.000000' respectively.\n+ *\n+ * <p>\n+ *\n+ * Accepts four kinds of literal:\n+ * <ol>\n+ *    <li>text:\n+ *      <ul>\n+ *        <li>'hhmmss': e.g. '232121', equivalent to '23:12:21'</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAxMDYzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNzoyNlrOGa8sjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyNzoyNlrOGa8sjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMDYwNw==", "bodyText": "this test case has around 60 assertions, is it possible to reduce or split it?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430910607", "createdAt": "2020-05-27T07:27:26Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/types/TimeTypeTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package io.crate.types;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.function.Function;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+\n+public class TimeTypeTest {\n+\n+    @Rule\n+    public ExpectedException expectedException = ExpectedException.none();\n+\n+    @Test\n+    public void test_parse_time_range_overflow() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [86400000001] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(String.valueOf(24 * 3600 * 1000_000L + 1));\n+    }\n+\n+    @Test\n+    public void test_parse_time_range_underflow() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [-86400000000] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(String.valueOf(-24 * 3600 * 1000_000L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hh() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [25] is out of range for 'hh' [0, 24]\");\n+        TimeType.parseTime(\"25\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmm() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'mm' [0, 59]\");\n+        TimeType.parseTime(\"1778\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmmss() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'ss' [0, 59]\");\n+        TimeType.parseTime(\"175978\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hh_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [25] is out of range for 'hh' [0, 24]\");\n+        TimeType.parseTime(\"25.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmm_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'mm' [0, 59]\");\n+        TimeType.parseTime(\"1778.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_hhmmss_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [78] is out of range for 'ss' [0, 59]\");\n+        TimeType.parseTime(\"175978.999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_out_of_range_micros_floating_point() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [9999999] is out of range for 'micros' [0, 999999]\");\n+        TimeType.parseTime(\"00.9999999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_range_overflow_take_two() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [86400999000] is out of range for 'TimeType' [0, 86400000000]\");\n+        TimeType.parseTime(\"240000.999\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_midnight_when_ISO_parser_does_not_like_it() {\n+        expectedException.expect(IllegalArgumentException.class);\n+        expectedException.expectMessage(\"value [24:00:00.000] is not a valid literal for TimeType\");\n+        TimeType.parseTime(\"24:00:00.000\");\n+    }\n+\n+    @Test\n+    public void test_parse_time_midnight_when_ISO_parser_does_like_it() {\n+        assertThat(TimeType.parseTime(\"240000.000\"), is(24 * 60 * 60 * 1000_000L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_should_always_ignore_time_zone() {\n+        assertThat(TimeType.parseTime(\"01:00:00Z\"), is(3600000000L));\n+        assertThat(TimeType.parseTime(\"01:00:00+00\"), is(3600000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00-03:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00+0300\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00+03:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789+03:00\"), is(14400123456L));\n+        assertThat(TimeType.parseTime(\"04:00:00+0000\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789-0000\"), is(14400123456L));\n+    }\n+\n+    @Test\n+    public void test_parse_time_no_time_zone_explicitly_mentioned() {\n+        assertThat(TimeType.parseTime(\"04:00:00\"), is(14400000000L));\n+        assertThat(TimeType.parseTime(\"14400000\"), is(14400000L));\n+        assertThat(TimeType.parseTime(\"04:00:00.123456789\"), is(14400123456L));\n+        assertThat(TimeType.parseTime(\"14400123\"), is(14400123L));\n+    }\n+\n+    @Test\n+    public void test_format_time() {\n+        assertThat(TimeType.formatTime(14400000000L), is(\"04:00:00\"));\n+        assertThat(TimeType.formatTime(14400123000L), is(\"04:00:00.123\"));\n+    }\n+\n+    @Test\n+    public void test_value() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAxOTk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMDoxMVrOGa8yZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMDoxMVrOGa8yZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMjEwMg==", "bodyText": "is there a mapping with the time without time zonename?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430912102", "createdAt": "2020-05-27T07:30:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,7 +369,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n-        entry(\"date\", DataTypes.TIMESTAMPZ),\n+        entry(\"time\", DataTypes.TIME),\n+        entry(DataTypes.TIME.getName(), DataTypes.TIME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAyNzEyOnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMjozNFrOGa827Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozMjozNFrOGa827Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMzI2MQ==", "bodyText": "why date is removed?", "url": "https://github.com/crate/crate/pull/9915#discussion_r430913261", "createdAt": "2020-05-27T07:32:34Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,7 +369,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n-        entry(\"date\", DataTypes.TIMESTAMPZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c87e68a1a2ab5892ca3f18da647d52ee1e45f6"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjEwMTQ3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyNjowMlrOGeTm1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjoyOTo0MlrOGeZkpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTcwMA==", "bodyText": "does this time with time zone mapping exist?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434431700", "createdAt": "2020-06-03T09:26:02Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,6 +366,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n+        entry(DataTypes.TIMETZ.getName(), DataTypes.TIMETZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyOTQ0NA==", "bodyText": "Nope, with the question I realised, thank you:\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html", "url": "https://github.com/crate/crate/pull/9915#discussion_r434529444", "createdAt": "2020-06-03T12:29:42Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -360,6 +366,8 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n     }\n \n     private static final Map<String, DataType> MAPPING_NAMES_TO_TYPES = Map.ofEntries(\n+        entry(DataTypes.TIMETZ.getName(), DataTypes.TIMETZ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMTcwMA=="}, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjEzNjk4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZ.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNTozOFrOGeT9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjozMjoxMVrOGeZqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNzUzNA==", "bodyText": "Maybe TimeTZParser.formatTime, because of class TimeTZType extends DataType<TimeTZ>?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434437534", "createdAt": "2020-06-03T09:35:38Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZ.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import java.util.Objects;\n+\n+\n+public final class TimeTZ implements Comparable<TimeTZ> {\n+\n+    private final long microsFromMidnight;\n+    private final int secondsFromUTC;\n+\n+    public TimeTZ(long microsFromMidnight, int secondsFromUTC) {\n+        this.microsFromMidnight = microsFromMidnight;\n+        this.secondsFromUTC = secondsFromUTC;\n+    }\n+\n+    public long getMicrosFromMidnight() {\n+        return microsFromMidnight;\n+    }\n+\n+    public int getSecondsFromUTC() {\n+        return secondsFromUTC;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof TimeTZ) {\n+            return false;\n+        }\n+        TimeTZ that = (TimeTZ) o;\n+        return microsFromMidnight == that.microsFromMidnight && secondsFromUTC == that.secondsFromUTC;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(microsFromMidnight, secondsFromUTC);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TimeTZType.formatTime(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUzMDg1Nw==", "bodyText": "keen eye!", "url": "https://github.com/crate/crate/pull/9915#discussion_r434530857", "createdAt": "2020-06-03T12:32:11Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/TimeTZ.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import java.util.Objects;\n+\n+\n+public final class TimeTZ implements Comparable<TimeTZ> {\n+\n+    private final long microsFromMidnight;\n+    private final int secondsFromUTC;\n+\n+    public TimeTZ(long microsFromMidnight, int secondsFromUTC) {\n+        this.microsFromMidnight = microsFromMidnight;\n+        this.secondsFromUTC = secondsFromUTC;\n+    }\n+\n+    public long getMicrosFromMidnight() {\n+        return microsFromMidnight;\n+    }\n+\n+    public int getSecondsFromUTC() {\n+        return secondsFromUTC;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || false == o instanceof TimeTZ) {\n+            return false;\n+        }\n+        TimeTZ that = (TimeTZ) o;\n+        return microsFromMidnight == that.microsFromMidnight && secondsFromUTC == that.secondsFromUTC;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(microsFromMidnight, secondsFromUTC);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return TimeTZType.formatTime(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNzUzNA=="}, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE0ODk2OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozODozM1rOGeUE9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozODozM1rOGeUE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzOTQxMg==", "bodyText": "should it be timetz?\ntemplate1=# select typname from pg_catalog.pg_type where oid = 1266;\n typname\n---------\n timetz\n(1 row)", "url": "https://github.com/crate/crate/pull/9915#discussion_r434439412", "createdAt": "2020-06-03T09:38:33Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -191,12 +191,14 @@ table available in CrateDB::\n     | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n     | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n+    | 1266 | time with time zone          |     1270 |       0 |     12 | b       | D           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "684e366e25824529b81d578a35e94b841e08e1e3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzUzNjc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0MTowNFrOGeh0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0MTowNFrOGeh0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NDUyMQ==", "bodyText": "Not sure if there is much value in re-exporting these functions here. Either TimeTZ could have a formatTime directly, or TimeTZParser.formatTime could be used directly.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434664521", "createdAt": "2020-06-03T15:41:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return parseTime((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    public static String formatTime(@Nonnull TimeTZ time) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzU0MDQxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0MTo1MlrOGeh2nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0MTo1MlrOGeh2nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NTExNg==", "bodyText": "Same here. Consumers could use TimeTZParser.parse directly, or maybe there could be a TimeTZ.parse and the TimeTZParser could become package private.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434665116", "createdAt": "2020-06-03T15:41:52Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return parseTime((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    public static String formatTime(@Nonnull TimeTZ time) {\n+        return TimeTZParser.formatTime(time);\n+    }\n+\n+    public static TimeTZ parseTime(@Nonnull String time) {\n+        return TimeTZParser.parse(time);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzU0NTAyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0Mjo1NFrOGeh5gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0Mjo1NFrOGeh5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NTg1OA==", "bodyText": "I still don't really undestand why this change became necessary within this PR? That interval cannot be stored isn't new. Did randomType change in some unrelated way?", "url": "https://github.com/crate/crate/pull/9915#discussion_r434665858", "createdAt": "2020-06-03T15:42:54Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -313,7 +314,10 @@ public void testWhereNotEqualAnyWithLargeArray() throws Exception {\n \n     @Test\n     public void testNullOperators() throws Exception {\n-        DataType<?> type = randomType();\n+        DataType<?> type;\n+        do {\n+           type = randomType();\n+        } while (type == DataTypes.INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzU1NTc3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/types/TypeConversionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0NToxOFrOGeiANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTo0NToxOFrOGeiANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2NzU3Mw==", "bodyText": "These additions here shouldn't be necessary anymore, since TIMETZ is no longer part of the allowed conversions for BYTE.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434667573", "createdAt": "2020-06-03T15:45:18Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/types/TypeConversionTest.java", "diffHunk": "@@ -97,6 +98,8 @@ public void numberConversionTest() throws Exception {\n                 var t = DataTypes.fromId(id);\n                 if (t.equals(DataTypes.IP)) {\n                     byteVal = (byte) Math.abs(byteVal == Byte.MIN_VALUE ? byteVal >> 1 : byteVal);\n+                } else if (t.equals(DataTypes.TIMETZ)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a24eb2d64e801b5e2092f4a5af5e54ecc82143"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODg1OTYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NzozOVrOGevBXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NzozOVrOGevBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MDg2Mw==", "bodyText": "TIMETZ name does not contain spaces.", "url": "https://github.com/crate/crate/pull/9915#discussion_r434880863", "createdAt": "2020-06-03T21:57:39Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -90,6 +92,7 @@\n     public static Set<String> PRIMITIVE_TYPE_NAMES_WITH_SPACES = Set.of(\n         TIMESTAMPZ.getName(),\n         TIMESTAMP.getName(),\n+        TIMETZ.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDIyMzE2OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/postgres.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MzowN1rOGe8KJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo0MDowMVrOGe_-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NjEwMg==", "bodyText": "btw, do we need to document it in the data types documentation https://github.com/crate/crate/blame/master/docs/general/ddl/data-types.rst#L210?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435096102", "createdAt": "2020-06-04T08:53:07Z", "author": {"login": "kovrus"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -191,12 +191,14 @@ table available in CrateDB::\n     | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n     | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n+    | 1266 | timetz                       |     1270 |       0 |     12 | b       | D           |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1ODUzNA==", "bodyText": "yes, on it", "url": "https://github.com/crate/crate/pull/9915#discussion_r435158534", "createdAt": "2020-06-04T10:40:01Z", "author": {"login": "marregui"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -191,12 +191,14 @@ table available in CrateDB::\n     | 1185 | _timestamptz                 |        0 |    1184 |     -1 | b       | A           |\n     | 1186 | interval                     |     1187 |       0 |     16 | b       | T           |\n     | 1187 | _interval                    |        0 |    1186 |     -1 | b       | A           |\n+    | 1266 | timetz                       |     1270 |       0 |     12 | b       | D           |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NjEwMg=="}, "originalCommit": {"oid": "b2ce6b01172c13642e76c620b62c792d6e828707"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM2Njg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyMDozNVrOGfk8PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODo1MzozMVrOGfmDoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDI4NA==", "bodyText": "Shouldn't the type name be time with time zone, see https://www.postgresql.org/docs/9.1/datatype-datetime.html and timetz would be an alias?\n\ntimetz is a valid alias for time with time zone.\n\nYou have documented it as it supposedly has to be, but in implementation it is another way around.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435764284", "createdAt": "2020-06-05T08:20:35Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -346,6 +350,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"string\", STRING),\n         entry(\"varchar\", STRING),\n         entry(\"character varying\", STRING),\n+        entry(\"time with time zone\", TIMETZ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MjU2MA==", "bodyText": "ok, yes, I suppose I need to declare it as time with time zone, but make sure that it ends up as timetz in here.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435782560", "createdAt": "2020-06-05T08:53:31Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -346,6 +350,7 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         entry(\"string\", STRING),\n         entry(\"varchar\", STRING),\n         entry(\"character varying\", STRING),\n+        entry(\"time with time zone\", TIMETZ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NDI4NA=="}, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM3OTIyOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNDoxOVrOGflEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNDoxOVrOGflEIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NjMwNA==", "bodyText": "maybe add it to the table with aliases https://github.com/crate/crate/pull/9915/files#diff-2e33689810bcdd9ac3b65fd85893a637L1176", "url": "https://github.com/crate/crate/pull/9915#discussion_r435766304", "createdAt": "2020-06-05T08:24:19Z", "author": {"login": "kovrus"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM5MTI1OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNzo1NVrOGflLqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNzo1NVrOGflLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2ODIzNQ==", "bodyText": "Could you move this into the relevant sub-section ?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435768235", "createdAt": "2020-06-05T08:27:55Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -71,6 +71,10 @@ Deprecations\n Changes\n =======\n \n+- Added new type :ref:`time with time zone <time-data-type>`, a.k.a `timetz`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM5MzIxOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyODozMFrOGflM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyODozMFrOGflM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2ODU1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ``timetz`` is a valid alias for `time with time zone`.\n          \n          \n            \n            ``timetz`` is an alias for `time with time zone`.\n          \n      \n    \n    \n  \n\nThere is no sense in an invalid alias, so pointing out that it is valid is not necessary", "url": "https://github.com/crate/crate/pull/9915#discussion_r435768559", "createdAt": "2020-06-05T08:28:30Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM5NjA2OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyOToyOFrOGflO8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyOToyOFrOGflO8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2OTA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Internally, time values are mapped to microseconds since midnight and seconds\n          \n          \n            \n            as a signed offset from UTC for the time zone, that is a `bigint` followed by\n          \n          \n            \n            an `integer`, or 12 bytes.\n          \n      \n    \n    \n  \n\nThe storage / range is already present in the table further above, we don't need to document further internals. (Would also restrict us in making changes in the future ..)", "url": "https://github.com/crate/crate/pull/9915#discussion_r435769075", "createdAt": "2020-06-05T08:29:28Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.\n+\n+Internally, time values are mapped to microseconds since midnight and seconds\n+as a signed offset from UTC for the time zone, that is a `bigint` followed by\n+an `integer`, or 12 bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDM5ODcyOnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMDoxNVrOGflQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMDoxNVrOGflQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2OTUyMA==", "bodyText": "Maybe add a sentence first that time with time zone values can be constructed using a string literal and a cast, before jumping to the syntax for it.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435769520", "createdAt": "2020-06-05T08:30:15Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is a valid alias for `time with time zone`.\n+\n+Internally, time values are mapped to microseconds since midnight and seconds\n+as a signed offset from UTC for the time zone, that is a `bigint` followed by\n+an `integer`, or 12 bytes.\n+\n+The syntax for time string literals is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDQwMjE1OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMToxM1rOGflS3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMToxM1rOGflS3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MDA3Nw==", "bodyText": "We should probably point out that this type cannot be used in CREATE TABLE statements.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435770077", "createdAt": "2020-06-05T08:31:13Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -347,6 +351,66 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDQxMDA0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMzoxMVrOGflXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODo1OToxNVrOGfmQOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTI3NQ==", "bodyText": "You catch only NumberFormatException which could be thrown by Long.valueOf, but timeTZOf-> checkRange could throw IllegalArgumentException that is not handled.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435771275", "createdAt": "2020-06-05T08:33:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return TimeTZParser.parse((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NTc4NA==", "bodyText": "IllegalArgumentException is what I throw to issue a problem with the format, including range fail:\n static IllegalArgumentException exceptionForInvalidLiteral(Object literal) {\n        throw new IllegalArgumentException(String.format(\n            Locale.ENGLISH,\n            \"value [%s] is not a valid literal for %s\",\n            literal, TimeTZType.class.getSimpleName()));\n    }", "url": "https://github.com/crate/crate/pull/9915#discussion_r435785784", "createdAt": "2020-06-05T08:59:15Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 19;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"timetz\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {\n+            try {\n+                return TimeTZParser.parse((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTI3NQ=="}, "originalCommit": {"oid": "2bd296f89274f987f54d87f0a4d6f7049ccb2e24"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDQxMTU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/DataTypeXContentExtension.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODozMzozMVrOGflYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjowNDoxMlrOGfrwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTQ4Nw==", "bodyText": "I'm not sure if this is the best representation for HTTP.\n@seut Do you have any inputs here how we should represent time with time zone to users via HTTP?", "url": "https://github.com/crate/crate/pull/9915#discussion_r435771487", "createdAt": "2020-06-05T08:33:31Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypeXContentExtension.java", "diffHunk": "@@ -63,6 +63,13 @@\n                     b.value(row.get(i));\n                 }\n                 b.endArray();\n+            }),\n+            Map.entry(TimeTZ.class, (b, v) -> {\n+                TimeTZ timetz = (TimeTZ) v;\n+                b.startArray();\n+                b.value(timetz.getMicrosFromMidnight());\n+                b.value(timetz.getSecondsFromUTC());\n+                b.endArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b3bebd0f04dee6dd40e008fc3208cd953d6cd63"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3NzA0OA==", "bodyText": "I was not sure either, but as it makes the micros offset, as well as the seconds offset, explicit, I went with it. Please let me know your thoughts.", "url": "https://github.com/crate/crate/pull/9915#discussion_r435777048", "createdAt": "2020-06-05T08:43:46Z", "author": {"login": "marregui"}, "path": "server/src/main/java/io/crate/types/DataTypeXContentExtension.java", "diffHunk": "@@ -63,6 +63,13 @@\n                     b.value(row.get(i));\n                 }\n                 b.endArray();\n+            }),\n+            Map.entry(TimeTZ.class, (b, v) -> {\n+                TimeTZ timetz = (TimeTZ) v;\n+                b.startArray();\n+                b.value(timetz.getMicrosFromMidnight());\n+                b.value(timetz.getSecondsFromUTC());\n+                b.endArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTQ4Nw=="}, "originalCommit": {"oid": "2b3bebd0f04dee6dd40e008fc3208cd953d6cd63"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NjA0MQ==", "bodyText": "I guess it makes sense to keep it in a format that is easy to parse for clients - we do the same for timestamp (long instead of text format)\nWe also have to extend the documentation here:\n\n  \n    \n      crate/docs/interfaces/http.rst\n    \n    \n        Lines 233 to 237\n      in\n      e09e00d\n    \n    \n    \n    \n\n        \n          \n           IDs of all currently available data types: \n        \n\n        \n          \n            \n        \n\n        \n          \n           ===== =================== \n        \n\n        \n          \n           ID    Data Type \n        \n\n        \n          \n           ===== =================== \n        \n    \n  \n\n\nand we should probably also follow up:\n\nAdd the time to the python client (mapping it to datetime.time)\ninterpreting it in the Admin UI. (To have a human readable display as well)\n\ncc @autophagy", "url": "https://github.com/crate/crate/pull/9915#discussion_r435876041", "createdAt": "2020-06-05T12:04:12Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypeXContentExtension.java", "diffHunk": "@@ -63,6 +63,13 @@\n                     b.value(row.get(i));\n                 }\n                 b.endArray();\n+            }),\n+            Map.entry(TimeTZ.class, (b, v) -> {\n+                TimeTZ timetz = (TimeTZ) v;\n+                b.startArray();\n+                b.value(timetz.getMicrosFromMidnight());\n+                b.value(timetz.getSecondsFromUTC());\n+                b.endArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MTQ4Nw=="}, "originalCommit": {"oid": "2b3bebd0f04dee6dd40e008fc3208cd953d6cd63"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTA2ODE0OnYy", "diffSide": "RIGHT", "path": "docs/interfaces/http.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToxOTo1NlrOGgjh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozOTowN1rOGgkWGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4OTczOA==", "bodyText": "Maybe we should start describing the format as well?", "url": "https://github.com/crate/crate/pull/9915#discussion_r436789738", "createdAt": "2020-06-08T15:19:56Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/http.rst", "diffHunk": "@@ -267,6 +267,8 @@ ID    Data Type\n ----- -------------------\n 15    Unchecked Object\n ----- -------------------\n+19    Time with time zone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NjM0Mw==", "bodyText": "sure! for all types in the table?", "url": "https://github.com/crate/crate/pull/9915#discussion_r436796343", "createdAt": "2020-06-08T15:29:19Z", "author": {"login": "marregui"}, "path": "docs/interfaces/http.rst", "diffHunk": "@@ -267,6 +267,8 @@ ID    Data Type\n ----- -------------------\n 15    Unchecked Object\n ----- -------------------\n+19    Time with time zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4OTczOA=="}, "originalCommit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMzA5OQ==", "bodyText": "I guess for all to make it consistent. I'd also change the table syntax to list, so that it is easier to edit.", "url": "https://github.com/crate/crate/pull/9915#discussion_r436803099", "createdAt": "2020-06-08T15:39:07Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/http.rst", "diffHunk": "@@ -267,6 +267,8 @@ ID    Data Type\n ----- -------------------\n 15    Unchecked Object\n ----- -------------------\n+19    Time with time zone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4OTczOA=="}, "originalCommit": {"oid": "864e4981b1ba96f7df8f27f1965d51456a4c093d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU3ODYxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NDoyOFrOGiUdig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NDoyOFrOGiUdig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDAxMA==", "bodyText": "Maybe this part can be moved into the method that is responsible for the cast now https://github.com/crate/crate/blob/master/server/src/main/java/io/crate/types/DataType.java#L93 It is the correct place for the cast routine and would simplify future refactoring/removing/renaming of the DataType#value.\nand the DataType#value can be probably just or smth like that\npublic TimeTZ value(Object value) {\n        if (value == null) {\n            return null;\n        }\n        return (TimeTZ) value;\n}", "url": "https://github.com/crate/crate/pull/9915#discussion_r438640010", "createdAt": "2020-06-11T08:54:28Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 20;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"time with time zone\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof TimeTZ) {\n+            return (TimeTZ) value;\n+        }\n+        if (value instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7c141b9d1870e238715397f3e155d4355c0ea9"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU4MjEyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NToxOVrOGiUfvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NToxOVrOGiUfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDU3Mw==", "bodyText": "is it needed?", "url": "https://github.com/crate/crate/pull/9915#discussion_r438640573", "createdAt": "2020-06-11T08:55:19Z", "author": {"login": "kovrus"}, "path": "server/src/test/java/io/crate/integrationtests/LuceneQueryBuilderIntegrationTest.java", "diffHunk": "@@ -24,6 +24,7 @@\n import com.carrotsearch.randomizedtesting.annotations.Seed;\n import io.crate.testing.DataTypeTesting;\n import io.crate.types.DataType;\n+import io.crate.types.DataTypes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b66904d3c51d996939b741ea44a9cab836f5a6c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ1MjA1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/types/TimeTZType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMjoxMVrOGidLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozMjoxMVrOGidLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4Mjg1MA==", "bodyText": "DataType#value must not call DataType#implicitCast and perform the casting.\nYou would probably also have to adjust tests accordingly.\nI'll copy-paste jordi's comment from the slack discussion regarding refactoring DataType and splitting\nDataType#value for a better context.\nBasically what I'm proposing is to split up value into multiple use cases because\nright now it is a bit overloaded:\n- cast, with a comment that this is only to be used via the cast function\n CastFunction, supports explicit/try/implicit\n- valueForInsert - for the new implicit whitespace truncation case\n- santizeType - for the cases where we currently use dataType#value to fix\na type read from source or so where an integer might have been stored as long\n(This is mostly in the reference resolvers / column expression implementations)\n\nFor the timetz it seems that it'd be enough to implement the implicitCast, which is done already and keep the DataType#value as it was suggested in the previous comment.", "url": "https://github.com/crate/crate/pull/9915#discussion_r438782850", "createdAt": "2020-06-11T13:32:11Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/TimeTZType.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.types.TimeTZParser.timeTZOf;\n+import static io.crate.types.TimeTZParser.exceptionForInvalidLiteral;\n+\n+public final class TimeTZType extends DataType<TimeTZ> implements FixedWidthType, Streamer<TimeTZ> {\n+\n+    public static final int ID = 20;\n+    public static final int TYPE_LEN = 12;\n+    public static final String NAME = \"time with time zone\";\n+    public static final TimeTZType INSTANCE = new TimeTZType();\n+\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.TIMETZ;\n+    }\n+\n+    @Override\n+    public Streamer<TimeTZ> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public int compare(TimeTZ val1, TimeTZ val2) {\n+        return val1.compareTo(val2);\n+    }\n+\n+    @Override\n+    public TimeTZ readValueFrom(StreamInput in) throws IOException {\n+        if (in.readBoolean()) {\n+            return null;\n+        }\n+        return new TimeTZ(in.readLong(), in.readInt());\n+    }\n+\n+    @Override\n+    public void writeValueTo(StreamOutput out, TimeTZ tz) throws IOException {\n+        out.writeBoolean(tz == null);\n+        if (tz != null) {\n+            out.writeLong(tz.getMicrosFromMidnight());\n+            out.writeInt(tz.getSecondsFromUTC());\n+        }\n+    }\n+\n+    @Override\n+    public int fixedSize() {\n+        return TYPE_LEN;\n+    }\n+\n+    @Override\n+    public TimeTZ implicitCast(Object value) {\n+        if (value instanceof String) {\n+            try {\n+                return TimeTZParser.parse((String) value);\n+            } catch (IllegalArgumentException e0) {\n+                try {\n+                    return timeTZOf(\n+                        TimeTZType.class.getSimpleName(),\n+                        Long.valueOf((String) value));\n+                } catch (NumberFormatException e1) {\n+                    throw exceptionForInvalidLiteral(value);\n+                }\n+            }\n+        }\n+        throw exceptionForInvalidLiteral(value);\n+    }\n+\n+    @Override\n+    public TimeTZ value(Object value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return value instanceof TimeTZ ? (TimeTZ) value : implicitCast(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946b493745c0071ddf47ee07eeccce414a81cff1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU2NDQ0OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNjoxMVrOGjp4gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNjoxMVrOGjp4gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzOTU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                This type cannot be created in `CREATE TABLE` or `ALTER` statements, as\n          \n          \n            \n                This type cannot be used in `CREATE TABLE` or `ALTER` statements, as\n          \n      \n    \n    \n  \n\ntypes themselves are not created via CREATE TABLE or ALTER TABLE.", "url": "https://github.com/crate/crate/pull/9915#discussion_r440039555", "createdAt": "2020-06-15T09:16:11Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -437,6 +443,69 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is an alias for `time with time zone`.\n+\n+`time with time zone` literals can be constructed using a string literal\n+and a cast. The syntax for string literal is as follows:\n+\n+.. code-block:: text\n+\n+    time-element [offset]\n+\n+    time-element: time-only [fraction]\n+    time-only:    HH[[:][mm[:]ss]]\n+    fraction:     '.' digit+\n+    offset:       {+ | -} time-only | geo-region\n+    geo-region:   As defined by ISO 8601.\n+\n+\n+Where `time-only` can contain optional seconds, or optional minutes and seconds,\n+and can use `:` as a separator optionally.\n+\n+`fraction` accepts up to 6 digits, as precision is in micro seconds.\n+\n+Time zone syntax as defined by `ISO 8601 time zone designators`_.\n+\n+.. NOTE::\n+\n+    This type cannot be created in `CREATE TABLE` or `ALTER` statements, as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU3MjY1OnYy", "diffSide": "RIGHT", "path": "docs/general/ddl/data-types.rst", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoxOVrOGjp9rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoxOVrOGjp9rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDg3Ng==", "bodyText": "Not sure about the wording here. Maybe the second sentence could be omitted altogether.", "url": "https://github.com/crate/crate/pull/9915#discussion_r440040876", "createdAt": "2020-06-15T09:18:19Z", "author": {"login": "mfussenegger"}, "path": "docs/general/ddl/data-types.rst", "diffHunk": "@@ -437,6 +443,69 @@ In these expressions, the desired time zone is specified as a string\n The scalar function :ref:`TIMEZONE <scalar-timezone>` (zone, timestamp) is\n equivalent to the SQL-conforming construct timestamp AT TIME ZONE zone.\n \n+.. _time-data-type:\n+\n+time with time zone\n+-------------------\n+\n+The time type consist of time followed by an optional time zone.\n+\n+``timetz`` is an alias for `time with time zone`.\n+\n+`time with time zone` literals can be constructed using a string literal\n+and a cast. The syntax for string literal is as follows:\n+\n+.. code-block:: text\n+\n+    time-element [offset]\n+\n+    time-element: time-only [fraction]\n+    time-only:    HH[[:][mm[:]ss]]\n+    fraction:     '.' digit+\n+    offset:       {+ | -} time-only | geo-region\n+    geo-region:   As defined by ISO 8601.\n+\n+\n+Where `time-only` can contain optional seconds, or optional minutes and seconds,\n+and can use `:` as a separator optionally.\n+\n+`fraction` accepts up to 6 digits, as precision is in micro seconds.\n+\n+Time zone syntax as defined by `ISO 8601 time zone designators`_.\n+\n+.. NOTE::\n+\n+    This type cannot be created in `CREATE TABLE` or `ALTER` statements, as\n+    it is meant to be used as parameter and return type for time related", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c3bf338b22e0a67269d5287f56d4877706805f"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1453, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}