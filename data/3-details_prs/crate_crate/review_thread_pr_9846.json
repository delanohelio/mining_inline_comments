{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NjEwODQ4", "number": 9846, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMDozMVrODznBeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozNjowN1rODznLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQzMzIyOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MaximumAggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMDozMVrOGIJLeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMDozMVrOGIJLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjE4NQ==", "bodyText": "minor: We could decide this outside of the factory method to avoid \"on-call/on-demand\" instanceof checks", "url": "https://github.com/crate/crate/pull/9846#discussion_r411192185", "createdAt": "2020-04-20T08:30:31Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MaximumAggregation.java", "diffHunk": "@@ -45,15 +45,26 @@\n     private final FunctionInfo info;\n \n     public static void register(AggregationImplModule mod) {\n-        for (final DataType dataType : DataTypes.PRIMITIVE_TYPES) {\n-            FunctionInfo functionInfo = new FunctionInfo(\n-                new FunctionIdent(NAME, ImmutableList.of(dataType)), dataType, FunctionInfo.Type.AGGREGATE);\n-\n-            if (dataType instanceof FixedWidthType) {\n-                mod.register(new FixedMaximumAggregation(functionInfo));\n-            } else {\n-                mod.register(new VariableMaximumAggregation(functionInfo));\n-            }\n+        for (var supportedType : DataTypes.PRIMITIVE_TYPES) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),\n+                args -> {\n+                    var arg = args.get(0); // f(x) -> x\n+                    var info = new FunctionInfo(\n+                        new FunctionIdent(NAME, args),\n+                        arg,\n+                        FunctionInfo.Type.AGGREGATE\n+                    );\n+                    if (arg instanceof FixedWidthType) {\n+                        return new FixedMaximumAggregation(info);\n+                    } else {\n+                        return new VariableMaximumAggregation(info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b65d9cabfe1939558024903f11458158af3599"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQzNjI0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MinimumAggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMTowOFrOGIJNNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMTowOFrOGIJNNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjYyOA==", "bodyText": "same here: could be decided outside of the factory", "url": "https://github.com/crate/crate/pull/9846#discussion_r411192628", "createdAt": "2020-04-20T08:31:08Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/MinimumAggregation.java", "diffHunk": "@@ -45,15 +45,26 @@\n     private final FunctionInfo info;\n \n     public static void register(AggregationImplModule mod) {\n-        for (final DataType dataType : DataTypes.PRIMITIVE_TYPES) {\n-            FunctionInfo functionInfo = new FunctionInfo(new FunctionIdent(NAME, ImmutableList.of(dataType)),\n-                dataType, FunctionInfo.Type.AGGREGATE);\n-\n-            if (dataType instanceof FixedWidthType) {\n-                mod.register(new FixedMinimumAggregation(functionInfo));\n-            } else {\n-                mod.register(new VariableMinimumAggregation(functionInfo));\n-            }\n+        for (var supportedType : DataTypes.PRIMITIVE_TYPES) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),\n+                args -> {\n+                    var arg = args.get(0); // f(x) -> x\n+                    var info = new FunctionInfo(\n+                        new FunctionIdent(NAME, args),\n+                        arg,\n+                        FunctionInfo.Type.AGGREGATE\n+                    );\n+                    if (arg instanceof FixedWidthType) {\n+                        return new FixedMinimumAggregation(info);\n+                    } else {\n+                        return new VariableMinimumAggregation(info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b65d9cabfe1939558024903f11458158af3599"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ1OTA1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/SumAggregation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozNjowN1rOGIJaOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozNjowN1rOGIJaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NTk2Mw==", "bodyText": "The return type is always LONG", "url": "https://github.com/crate/crate/pull/9846#discussion_r411195963", "createdAt": "2020-04-20T08:36:07Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/execution/engine/aggregation/impl/SumAggregation.java", "diffHunk": "@@ -28,29 +28,49 @@\n import io.crate.memory.MemoryManager;\n import io.crate.metadata.FunctionIdent;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n import io.crate.types.DataTypes;\n import org.elasticsearch.Version;\n import org.elasticsearch.common.breaker.CircuitBreakingException;\n \n import javax.annotation.Nullable;\n import java.util.Collections;\n+import java.util.List;\n import java.util.function.BinaryOperator;\n \n public class SumAggregation<T extends Number> extends AggregationFunction<T, T> {\n \n     public static final String NAME = \"sum\";\n \n     public static void register(AggregationImplModule mod) {\n-        final BinaryOperator<Long> add = Math::addExact;\n-        final BinaryOperator<Long> substract = Math::subtractExact;\n-\n-        mod.register(new SumAggregation<Float>(DataTypes.FLOAT, (n1, n2) -> n1 + n2, (n1, n2) -> n1 - n2));\n-        mod.register(new SumAggregation<Double>(DataTypes.DOUBLE, (n1, n2) -> n1 + n2, (n1, n2) -> n1 - n2));\n-        mod.register(new SumAggregation<>(DataTypes.BYTE, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.SHORT, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.INTEGER, DataTypes.LONG, add, substract));\n-        mod.register(new SumAggregation<>(DataTypes.LONG, add, substract));\n+        BinaryOperator<Long> add = Math::addExact;\n+        BinaryOperator<Long> sub = Math::subtractExact;\n+\n+        mod.register(\n+            Signature.aggregate(\n+                NAME,\n+                DataTypes.FLOAT.getTypeSignature(),\n+                DataTypes.FLOAT.getTypeSignature()),\n+            args -> new SumAggregation<>(DataTypes.FLOAT, Float::sum, (n1, n2) -> n1 - n2)\n+        );\n+        mod.register(\n+            Signature.aggregate(\n+                NAME,\n+                DataTypes.DOUBLE.getTypeSignature(),\n+                DataTypes.DOUBLE.getTypeSignature()),\n+            args -> new SumAggregation<>(DataTypes.DOUBLE, Double::sum, (n1, n2) -> n1 - n2)\n+        );\n+\n+        for (var supportedType : List.of(DataTypes.BYTE, DataTypes.SHORT, DataTypes.INTEGER, DataTypes.LONG)) {\n+            mod.register(\n+                Signature.aggregate(\n+                    NAME,\n+                    supportedType.getTypeSignature(),\n+                    supportedType.getTypeSignature()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b65d9cabfe1939558024903f11458158af3599"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1588, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}