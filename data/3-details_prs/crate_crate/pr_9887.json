{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDExNDMz", "number": 9887, "title": "Migrate more tables to SystemTable", "bodyText": "Checklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-04-23T15:49:19Z", "url": "https://github.com/crate/crate/pull/9887", "merged": true, "mergeCommit": {"oid": "2f44d7b496a927062e2adfca497162a5995ab667"}, "closed": true, "closedAt": "2020-04-24T15:11:19Z", "author": {"login": "mfussenegger"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcauHREgH2gAyNDA4MDExNDMzOjc0ZjVhZTNhYzY5MzIzMjYyODQwZjQ2ZmJjNDYxMmQwNGQ0ZDBlYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaydX5gH2gAyNDA4MDExNDMzOjQyZWZhMGEzZTE3NjQ5Zjk1NTA5OGNkMWU4MGI0Y2NlZWE3ZDc5MjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74f5ae3ac69323262840f46fbc4612d04d4d0ebd", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/74f5ae3ac69323262840f46fbc4612d04d4d0ebd", "committedDate": "2020-04-24T09:31:41Z", "message": "Migrate InformationReferentialConstraintsTableInfo to SystemTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38b2a8b68e4f096dbfc83f2bd348d9c7bdcf8be", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/c38b2a8b68e4f096dbfc83f2bd348d9c7bdcf8be", "committedDate": "2020-04-24T09:31:41Z", "message": "Migrate InformationRoutinesTableInfo to SystemTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a6d753d202b390be43f02cf4bfce73d8e1737f", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b6a6d753d202b390be43f02cf4bfce73d8e1737f", "committedDate": "2020-04-24T09:31:41Z", "message": "Migrate InformationSchemataTableInfo to SystemTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3349855bc204dd763c53fcb22aba53924fe8c60a", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/3349855bc204dd763c53fcb22aba53924fe8c60a", "committedDate": "2020-04-24T09:31:41Z", "message": "Migrate InformationSqlFeaturesTableInfo to SystemTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36f705169959dea1eef874219d1e02a0a4b01fba", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/36f705169959dea1eef874219d1e02a0a4b01fba", "committedDate": "2020-04-24T09:31:41Z", "message": "Migrate InformationTableConstraintsTableInfo to SystemTable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b1cae3792addf25cf14ad48974fba3344b7d0a1e", "committedDate": "2020-04-24T09:59:17Z", "message": "Move ObjectBuilder and ObjectArrayBuilder out of RelationBuilder\n\nReduces the amount of nesting."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72cc49262574c985d53aa3064f3134c21bd136c9", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/72cc49262574c985d53aa3064f3134c21bd136c9", "committedDate": "2020-04-23T15:48:27Z", "message": "Migrate InformationTableConstraintsTableInfo to SystemTable"}, "afterCommit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e", "author": {"user": {"login": "mfussenegger", "name": "Mathias Fu\u00dfenegger"}}, "url": "https://github.com/crate/crate/commit/b1cae3792addf25cf14ad48974fba3344b7d0a1e", "committedDate": "2020-04-24T09:59:17Z", "message": "Move ObjectBuilder and ObjectArrayBuilder out of RelationBuilder\n\nReduces the amount of nesting."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTk4ODA5", "url": "https://github.com/crate/crate/pull/9887#pullrequestreview-399998809", "createdAt": "2020-04-24T14:30:11Z", "commit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozMDoxMlrOGLac2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDozMDoxMlrOGLac2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYyMDg5MQ==", "bodyText": "Is there a way to avoid to catch a NullPointerException ?", "url": "https://github.com/crate/crate/pull/9887#discussion_r414620891", "createdAt": "2020-04-24T14:30:12Z", "author": {"login": "mkleen"}, "path": "sql/src/main/java/io/crate/metadata/SystemTable.java", "diffHunk": "@@ -295,139 +295,141 @@ public void addExpression(HashMap<ColumnIdent, RowCollectExpressionFactory<T>> e\n             return this;\n         }\n \n-        public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            private final P parent;\n-            private final ColumnIdent baseColumn;\n-            private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n+    }\n \n-            public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-            }\n+    public static class ObjectBuilder<T, P extends Builder<T>> extends Builder<T> {\n \n-            public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n-                return add(new Column<>(baseColumn.append(column), type, getProperty));\n-            }\n+        private final P parent;\n+        private final ColumnIdent baseColumn;\n+        private final ArrayList<Column<T, ?>> columns = new ArrayList<>();\n \n-            @Override\n-            protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n-                columns.add(column);\n-                return this;\n-            }\n+        public ObjectBuilder(P parent, ColumnIdent baseColumn) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+        }\n \n-            public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n-                return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n-            }\n+        public <U> ObjectBuilder<T, P> add(String column, DataType<U> type, Function<T, U> getProperty) {\n+            return add(new Column<>(baseColumn.append(column), type, getProperty));\n+        }\n \n-            public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n-                return new ObjectBuilder<>(this, baseColumn.append(column));\n-            }\n+        @Override\n+        protected <U> ObjectBuilder<T, P> add(Column<T, U> column) {\n+            columns.add(column);\n+            return this;\n+        }\n \n-            public P endObject() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n-                    }\n-                }\n-                for (var column : directChildren) {\n-                    typeBuilder.setInnerType(column.column.leafName(), column.type);\n-                }\n-                ObjectType objectType = typeBuilder.build();\n-                parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n-                for (Column<T, ?> column : columns) {\n-                    addColumnToParent(column);\n+        public <U> ObjectArrayBuilder<U, T, ObjectBuilder<T, P>> startObjectArray(String column, Function<T, List<U>> getItems) {\n+            return new ObjectArrayBuilder<>(this, baseColumn.append(column), getItems);\n+        }\n+\n+        public ObjectBuilder<T, ObjectBuilder<T, P>> startObject(String column) {\n+            return new ObjectBuilder<>(this, baseColumn.append(column));\n+        }\n+\n+        public P endObject() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<T, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n                 }\n-                return parent;\n             }\n-\n-            public <U> void addColumnToParent(Column<T, U> column) {\n-                parent.add(new Column<>(column.column, column.type, column.getProperty));\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, objectType, new ObjectExpression<>(directChildren)));\n+            for (Column<T, ?> column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n+\n+        private <U> void addColumnToParent(Column<T, U> column) {\n+            parent.add(new Column<>(column.column, column.type, column.getProperty));\n         }\n+    }\n+\n+    public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n \n-        public static class ObjectArrayBuilder<ItemType, ParentItemType, P extends Builder<ParentItemType>> extends Builder<ItemType> {\n+        private final P parent;\n+        private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n+        private final ColumnIdent baseColumn;\n+        private final Function<ParentItemType, List<ItemType>> getItems;\n \n-            private final P parent;\n-            private final ArrayList<Column<ItemType, ?>> columns = new ArrayList<>();\n-            private final ColumnIdent baseColumn;\n-            private final Function<ParentItemType, List<ItemType>> getItems;\n+        public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n+            this.parent = parent;\n+            this.baseColumn = baseColumn;\n+            this.getItems = getItems;\n+        }\n \n-            public ObjectArrayBuilder(P parent, ColumnIdent baseColumn, Function<ParentItemType, List<ItemType>> getItems) {\n-                this.parent = parent;\n-                this.baseColumn = baseColumn;\n-                this.getItems = getItems;\n+        public P endObjectArray() {\n+            ObjectType.Builder typeBuilder = ObjectType.builder();\n+            ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n+            for (var col : columns) {\n+                if (col.column.path().size() == baseColumn.path().size() + 1) {\n+                    directChildren.add(col);\n+                }\n+            }\n+            for (var column : directChildren) {\n+                typeBuilder.setInnerType(column.column.leafName(), column.type);\n+            }\n+            ObjectType objectType = typeBuilder.build();\n+            parent.add(new Column<>(baseColumn, new ArrayType<>(objectType), getLeafColumnValues(directChildren)));\n+            for (var column : columns) {\n+                addColumnToParent(column);\n             }\n+            return parent;\n+        }\n \n-            public P endObjectArray() {\n-                ObjectType.Builder typeBuilder = ObjectType.builder();\n-                ArrayList<Column<ItemType, ?>> directChildren = new ArrayList<>();\n-                for (var col : columns) {\n-                    if (col.column.path().size() == baseColumn.path().size() + 1) {\n-                        directChildren.add(col);\n+        public Function<ParentItemType, List<Map<String, Object>>> getLeafColumnValues(ArrayList<Column<ItemType, ?>> directChildren) {\n+            return xs -> {\n+                var items = getItems.apply(xs);\n+                ArrayList<Map<String, Object>> result = new ArrayList<>(items.size());\n+                for (ItemType item : items) {\n+                    HashMap<String, Object> map = new HashMap<>(directChildren.size());\n+                    for (int i = 0; i < directChildren.size(); i++) {\n+                        Column<ItemType, ?> column = directChildren.get(i);\n+                        try {\n+                            Object value = column.getProperty.apply(item);\n+                            map.put(column.column.leafName(), value);\n+                        } catch (NullPointerException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTk5NjUw", "url": "https://github.com/crate/crate/pull/9887#pullrequestreview-399999650", "createdAt": "2020-04-24T14:31:08Z", "commit": {"oid": "b1cae3792addf25cf14ad48974fba3344b7d0a1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42efa0a3e17649f955098cd1e80b4cceea7d7925", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/42efa0a3e17649f955098cd1e80b4cceea7d7925", "committedDate": "2020-04-24T14:35:27Z", "message": "Merge branch 'master' into j/sys-tables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3299, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}