{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTc3NTEy", "number": 9967, "title": "Add support for the varchar with the length limit in CrateDB parser and analyzer.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-05-19T08:58:30Z", "url": "https://github.com/crate/crate/pull/9967", "merged": true, "mergeCommit": {"oid": "25fc20fbb85e02facd7910af8f404c0d97ecb8fd"}, "closed": true, "closedAt": "2020-05-19T15:13:21Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciw5LKAFqTQxNDI1NzQ5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABci1f7agBqjMzNTIxNzc2Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjU3NDkw", "url": "https://github.com/crate/crate/pull/9967#pullrequestreview-414257490", "createdAt": "2020-05-19T09:17:24Z", "commit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNzoyNFrOGXXbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNzoyNFrOGXXbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NDMyMQ==", "bodyText": "I think we can get rid of ColumnType and its derived classes and just for a string that represents the data type, then   in the analyzer we can use the type parameter signature parsing logic to get a CrateDB internal data type. I'll check that and follow up on it if it is possible after adding the varchar(length) support.", "url": "https://github.com/crate/crate/pull/9967#discussion_r427154321", "createdAt": "2020-05-19T09:17:24Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -1767,7 +1767,17 @@ public Node visitDefinedDataType(SqlBaseParser.DefinedDataTypeContext context) {\n         return new ColumnType(type);\n     }\n \n-    private String getObjectType(Token type) {\n+    @Override\n+    public Node visitParametrizedDataType(SqlBaseParser.ParametrizedDataTypeContext context) {\n+        var name = ((ColumnType<?>) visit(context.dataType())).name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjU3NTQ5", "url": "https://github.com/crate/crate/pull/9967#pullrequestreview-414257549", "createdAt": "2020-05-19T09:17:28Z", "commit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNzoyOFrOGXXbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNzoyOFrOGXXbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NDM3Mw==", "bodyText": "It is a bit looking into the future, but we would need more than one parameter for some data types, so I decided to it now.", "url": "https://github.com/crate/crate/pull/9967#discussion_r427154373", "createdAt": "2020-05-19T09:17:28Z", "author": {"login": "kovrus"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -537,11 +537,12 @@ rerouteOption\n     ;\n \n dataType\n-    : definedDataType           #definedDataTypeDefault\n-    | ident                     #dataTypeIdent\n-    | objectTypeDefinition      #objectDataType\n-    | ARRAY '(' dataType ')'    #arrayDataType\n-    | dataType '[]'             #arrayDataType\n+    : definedDataType                                          #definedDataTypeDefault\n+    | ident                                                    #dataTypeIdent\n+    | objectTypeDefinition                                     #objectDataType\n+    | ARRAY '(' dataType ')'                                   #arrayDataType\n+    | dataType '[]'                                            #arrayDataType\n+    | dataType '(' integerLiteral (',' integerLiteral )* ')'   #parametrizedDataType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjY2NjU1", "url": "https://github.com/crate/crate/pull/9967#pullrequestreview-414266655", "createdAt": "2020-05-19T09:29:10Z", "commit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToyOToxMFrOGXX4Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozNjowNlrOGXYJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MTYyNg==", "bodyText": "It is a bit looking into the future, but we would need more than one parameter for some data types, so I decided to it now.\n\nSounds good.\n\nIs this valid for objects and arrays? Otherwise we could restrict it to the definedDataType and ident cases.", "url": "https://github.com/crate/crate/pull/9967#discussion_r427161626", "createdAt": "2020-05-19T09:29:10Z", "author": {"login": "mfussenegger"}, "path": "libs/sql-parser/src/main/antlr/SqlBase.g4", "diffHunk": "@@ -537,11 +537,12 @@ rerouteOption\n     ;\n \n dataType\n-    : definedDataType           #definedDataTypeDefault\n-    | ident                     #dataTypeIdent\n-    | objectTypeDefinition      #objectDataType\n-    | ARRAY '(' dataType ')'    #arrayDataType\n-    | dataType '[]'             #arrayDataType\n+    : definedDataType                                          #definedDataTypeDefault\n+    | ident                                                    #dataTypeIdent\n+    | objectTypeDefinition                                     #objectDataType\n+    | ARRAY '(' dataType ')'                                   #arrayDataType\n+    | dataType '[]'                                            #arrayDataType\n+    | dataType '(' integerLiteral (',' integerLiteral )* ')'   #parametrizedDataType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1NDM3Mw=="}, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzExOA==", "bodyText": "If we keep the grammar as is (dataType '('...) I think we should also add tests for the array and object cases", "url": "https://github.com/crate/crate/pull/9967#discussion_r427163118", "createdAt": "2020-05-19T09:31:29Z", "author": {"login": "mfussenegger"}, "path": "libs/sql-parser/src/test/java/io/crate/sql/parser/TestStatementBuilder.java", "diffHunk": "@@ -1642,6 +1642,12 @@ public void test_multiple_aggregates_with_filter_clauses() {\n             \"FROM t\");\n     }\n \n+    @Test\n+    public void test_create_table_with_parametrized_varchar_data_type   () {\n+        printStatement(\"create table test(col varchar(1))\");\n+        printStatement(\"create table test(col character varying(2))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDU2OA==", "bodyText": "Maybe instead of switching to a LinkedHashSet we could sort the types inside the throws block. That we we'd only pay the price in the error case instead of all the time.", "url": "https://github.com/crate/crate/pull/9967#discussion_r427164568", "createdAt": "2020-05-19T09:33:54Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/expressions/ExpressionAnalyzer.java", "diffHunk": "@@ -1162,7 +1163,7 @@ private static void verifyTypesForMatch(Iterable<? extends Symbol> columns, Data\n     }\n \n     private static void ensureResultTypesMatch(Collection<? extends Symbol> results) {\n-        HashSet<DataType> resultTypes = new HashSet<>();\n+        HashSet<DataType<?>> resultTypes = new LinkedHashSet<>(results.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTk2OQ==", "bodyText": "Maybe have a of overload for StringType that takes a list and move the validation there? Seems to me that the StringType should be responsible for knowing valid parameters, not DataTypes.", "url": "https://github.com/crate/crate/pull/9967#discussion_r427165969", "createdAt": "2020-05-19T09:36:06Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/DataTypes.java", "diffHunk": "@@ -353,6 +353,26 @@ private static boolean safeConversionPossible(DataType type1, DataType type2) {\n         return dataType;\n     }\n \n+    public static DataType<?> of(String typeName, List<Integer> parameters) {\n+        DataType<?> dataType = ofNameOrNull(typeName);\n+        if (dataType == null) {\n+            throw new IllegalArgumentException(\"Cannot find data type: \" + typeName);\n+        }\n+        if (!parameters.isEmpty()) {\n+            if (dataType.id() == StringType.ID) {\n+                if (parameters.size() != 1) {\n+                    throw new IllegalArgumentException(\n+                        \"The number of parameters for the text data is wrong: \" + parameters.size());\n+                }\n+                return StringType.of(parameters.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "674fb7549f31341620778451d14ebca0464c89d0"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NDgwODUx", "url": "https://github.com/crate/crate/pull/9967#pullrequestreview-414480851", "createdAt": "2020-05-19T14:07:09Z", "commit": {"oid": "cc52f154eb0c2d722a220b7d1df4d5afcf9d047e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36cbc72eb611ad97be1f315f51175d206904ca9f", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/36cbc72eb611ad97be1f315f51175d206904ca9f", "committedDate": "2020-05-19T14:25:37Z", "message": "Add parser support for varchar parametrization with length limit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b114d3ad3004e822ff6121db022253f82b739fe8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/b114d3ad3004e822ff6121db022253f82b739fe8", "committedDate": "2020-05-19T14:34:01Z", "message": "Add the length limit field to the crate string type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f24b8b58ee47519429325139a438ca5dea0dc61", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/7f24b8b58ee47519429325139a438ca5dea0dc61", "committedDate": "2020-05-19T14:36:27Z", "message": "Add varchar with length limit support in create table analyzer."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc52f154eb0c2d722a220b7d1df4d5afcf9d047e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/cc52f154eb0c2d722a220b7d1df4d5afcf9d047e", "committedDate": "2020-05-19T11:29:15Z", "message": "fixup! Add varchar with length limit support in create table analyzer."}, "afterCommit": {"oid": "7f24b8b58ee47519429325139a438ca5dea0dc61", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/7f24b8b58ee47519429325139a438ca5dea0dc61", "committedDate": "2020-05-19T14:36:27Z", "message": "Add varchar with length limit support in create table analyzer."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3400, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}