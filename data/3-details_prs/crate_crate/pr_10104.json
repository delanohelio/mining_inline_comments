{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzU2MDcw", "number": 10104, "title": "Add support for global flag 'g' to now tabular function regexp_matches", "bodyText": "In reference to #10041", "createdAt": "2020-06-18T20:50:27Z", "url": "https://github.com/crate/crate/pull/10104", "merged": true, "mergeCommit": {"oid": "8ad9ecf201af3ef796d1d064bd7728444e57d1c8"}, "closed": true, "closedAt": "2020-07-27T15:16:25Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcslSYhgBqjM0NjAxMTkxOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5C7wrgBqjM1OTAyMTA0MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "286acb46ff434b1302dbb14de2d741e23a743d7a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/286acb46ff434b1302dbb14de2d741e23a743d7a", "committedDate": "2020-06-18T20:46:40Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}, "afterCommit": {"oid": "f5878fd6b29912b94f6aef0d362cc94d004e5c92", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f5878fd6b29912b94f6aef0d362cc94d004e5c92", "committedDate": "2020-06-18T21:25:01Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODg5ODM4", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-433889838", "createdAt": "2020-06-19T08:16:38Z", "commit": {"oid": "f5878fd6b29912b94f6aef0d362cc94d004e5c92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoxNjozOFrOGmMU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoxNjozOFrOGmMU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwMTAyMw==", "bodyText": "To match the language of the rest of the table, I might rephrase it as:\n\"do not stop at first match and keep going until end of source. \"", "url": "https://github.com/crate/crate/pull/10104#discussion_r442701023", "createdAt": "2020-06-19T08:16:38Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1780,6 +1780,16 @@ not matter.\n | ``d`` | only ``\\n`` is considered a line-terminator when using ``^``, ``$`` |\n |       | and ``.``                                                           |\n +-------+---------------------------------------------------------------------+\n+| ``g`` | do not stop at the first match, but rather keep going until the end |\n+|       | of ``source``.                                                      |\n++-------+---------------------------------------------------------------------+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5878fd6b29912b94f6aef0d362cc94d004e5c92"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzOTQxMDQ3", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-433941047", "createdAt": "2020-06-19T09:41:58Z", "commit": {"oid": "f5878fd6b29912b94f6aef0d362cc94d004e5c92"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5878fd6b29912b94f6aef0d362cc94d004e5c92", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/f5878fd6b29912b94f6aef0d362cc94d004e5c92", "committedDate": "2020-06-18T21:25:01Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}, "afterCommit": {"oid": "dc2da01950be6f90cb8963926b4bcacf75a7d329", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dc2da01950be6f90cb8963926b4bcacf75a7d329", "committedDate": "2020-06-22T18:51:16Z", "message": "Rework function 'regexp_matches' as a table function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc2da01950be6f90cb8963926b4bcacf75a7d329", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/dc2da01950be6f90cb8963926b4bcacf75a7d329", "committedDate": "2020-06-22T18:51:16Z", "message": "Rework function 'regexp_matches' as a table function"}, "afterCommit": {"oid": "c805f023c3ff4ce5a5307f5375cc572aed08e30e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c805f023c3ff4ce5a5307f5375cc572aed08e30e", "committedDate": "2020-06-22T18:56:26Z", "message": "Rework function 'regexp_matches' as a table function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDg4NDQw", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-436488440", "createdAt": "2020-06-24T09:42:00Z", "commit": {"oid": "f2bb0da87f153e5310018548ea711648daac07e3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0MjowMFrOGoKy_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0MjowMFrOGoKy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3MzExOA==", "bodyText": "cells is a varargs argument, this will cause you to have a Row with multiple cells.\n List.of(\"foo\", \"bar\").toArray()\n$2 ==> Object[2] { \"foo\", \"bar\" }\n\n\nvar row = new RowN(List.of(\"foo\", \"bar\").toArray())\nrow.numColumns(); -> this will be 2, instead of 1\n\nWhat you want is something like this:\nvar row = new RowN(new Object[] { List.of(\"foo\", \"bar\").toArray() });\nrow.numColumns(); -> this will be 1", "url": "https://github.com/crate/crate/pull/10104#discussion_r444773118", "createdAt": "2020-06-24T09:42:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/FoobarFunction.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.metadata.FunctionIdent;\n+import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+public class FoobarFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"foobar\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"planetzs\")); // single column, array(text)\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(NAME, ROW_TYPE.getTypeSignature()),\n+            (signature, args) -> new FoobarFunction(\n+                signature,\n+                new FunctionInfo(\n+                    new FunctionIdent(NAME, args),\n+                    ROW_TYPE,\n+                    FunctionInfo.Type.TABLE))\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final FunctionInfo info;\n+\n+    private FoobarFunction(Signature signature, FunctionInfo info) {\n+        this.signature = signature;\n+        this.info = info;\n+    }\n+\n+    @Override\n+    public FunctionInfo info() {\n+        return info;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        return iterableOf(List.of(\n+            \"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Your-anus\", \"Ne pais fume\"));\n+    }\n+    private static Iterable<Row> iterableOf(List<String> data) {\n+        if (data == null || data.size() == 0) {\n+            return null;\n+        }\n+        return () -> new Iterator<>() {\n+            final RowN row = new RowN(1);\n+            int idx = 0;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return idx < 1;\n+            }\n+\n+            @Override\n+            public Row next() {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException(\"no more rows\");\n+                }\n+                row.cells(data.toArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bb0da87f153e5310018548ea711648daac07e3"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1fb9d60d4beb7f0838d029e0a8b063b91102978", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/e1fb9d60d4beb7f0838d029e0a8b063b91102978", "committedDate": "2020-06-24T09:45:18Z", "message": "Nope, still broken"}, "afterCommit": {"oid": "3f005ebc303de2d839b194db664bb7167d9a6fcc", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3f005ebc303de2d839b194db664bb7167d9a6fcc", "committedDate": "2020-06-25T13:47:01Z", "message": "Rework function 'regexp_matches' as a table function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ab8e27b2cd4371015344e34002e37d717081e92", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/7ab8e27b2cd4371015344e34002e37d717081e92", "committedDate": "2020-06-25T19:21:46Z", "message": "Fix tests"}, "afterCommit": {"oid": "79d57ca0ac4354298172c0ea1cc4cc77a5979b97", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/79d57ca0ac4354298172c0ea1cc4cc77a5979b97", "committedDate": "2020-06-26T14:00:20Z", "message": "No need for checking pgtype and act accordingly (mistake)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79d57ca0ac4354298172c0ea1cc4cc77a5979b97", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/79d57ca0ac4354298172c0ea1cc4cc77a5979b97", "committedDate": "2020-06-26T14:00:20Z", "message": "No need for checking pgtype and act accordingly (mistake)"}, "afterCommit": {"oid": "3213e0dc57621fb9020ca7b75b1b523cc7f9d6ee", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3213e0dc57621fb9020ca7b75b1b523cc7f9d6ee", "committedDate": "2020-06-29T11:42:13Z", "message": "Adapt to new signature only function definition"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3213e0dc57621fb9020ca7b75b1b523cc7f9d6ee", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3213e0dc57621fb9020ca7b75b1b523cc7f9d6ee", "committedDate": "2020-06-29T11:42:13Z", "message": "Adapt to new signature only function definition"}, "afterCommit": {"oid": "749835d8833d00fe5c1bc61197846c65586d362f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/749835d8833d00fe5c1bc61197846c65586d362f", "committedDate": "2020-06-29T13:22:34Z", "message": "Refactor documentation, still needs work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "749835d8833d00fe5c1bc61197846c65586d362f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/749835d8833d00fe5c1bc61197846c65586d362f", "committedDate": "2020-06-29T13:22:34Z", "message": "Refactor documentation, still needs work"}, "afterCommit": {"oid": "0816fe05a0f722ceeeaa7e46ecd38c70a6a5a87d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0816fe05a0f722ceeeaa7e46ecd38c70a6a5a87d", "committedDate": "2020-06-30T14:21:42Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0816fe05a0f722ceeeaa7e46ecd38c70a6a5a87d", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/0816fe05a0f722ceeeaa7e46ecd38c70a6a5a87d", "committedDate": "2020-06-30T14:21:42Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}, "afterCommit": {"oid": "7b2834e21ed2896260ffc27ccb73b38517770a0a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/7b2834e21ed2896260ffc27ccb73b38517770a0a", "committedDate": "2020-07-01T10:25:20Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81e6ecff8fa0b2ff80c2ffb9d7ff23b28a48fc3c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/81e6ecff8fa0b2ff80c2ffb9d7ff23b28a48fc3c", "committedDate": "2020-07-01T16:15:51Z", "message": "Fixup"}, "afterCommit": {"oid": "b1b8839a154af89ee56272430965fa12c140c612", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b1b8839a154af89ee56272430965fa12c140c612", "committedDate": "2020-07-01T17:19:30Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1b8839a154af89ee56272430965fa12c140c612", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b1b8839a154af89ee56272430965fa12c140c612", "committedDate": "2020-07-01T17:19:30Z", "message": "Add support of global flag 'g' to scalar function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match."}, "afterCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/972b05d2661ecf1c330442f18c99cd31ee58dba2", "committedDate": "2020-07-01T19:07:32Z", "message": "Add support for global flag 'g' to now tabular function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match. The postgres specification defines this\nfunction as a table function."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NDMyNjEz", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-448432613", "createdAt": "2020-07-14T20:16:18Z", "commit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDoxNjoxOFrOGxjqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDozMzozMFrOGxkP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxNzgwNg==", "bodyText": "This is not a fix, but a change - maybe even a breaking change.", "url": "https://github.com/crate/crate/pull/10104#discussion_r454617806", "createdAt": "2020-07-14T20:16:18Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -268,6 +268,11 @@ Performance improvements\n Fixes\n =====\n \n+- Added support for flag ``g`` to function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODIzMA==", "bodyText": "I don't this this should be changed here. Rather the functions shouldn't return null elements.", "url": "https://github.com/crate/crate/pull/10104#discussion_r454618230", "createdAt": "2020-07-14T20:17:11Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/pipeline/TableFunctionApplier.java", "diffHunk": "@@ -57,7 +58,11 @@ public TableFunctionApplier(List<Input<Iterable<Row>>> tableFunctions,\n             expressions.get(i).setNextRow(row);\n         }\n         mapIncomingValuesToOutgoingCells();\n-        List<Iterator<Row>> iterators = Lists2.map(tableFunctions, x -> x.value().iterator());\n+        List<Iterator<Row>> iterators = tableFunctions.stream()\n+            .map(Input::value)\n+            .filter(Objects::nonNull)\n+            .map(Iterable::iterator)\n+            .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyMTY5Ng==", "bodyText": "Part of this function is now used by the regexp_replace function, the other by the regexp_matches functions. Would it make sense to separate this into two classes, or inline the relevant code as inner static class to the relevant functions?\nOr another option would be to have two implementations and the implementation would be retrieved via a static constructor that takes the flag as argument, to avoid the if (global cases", "url": "https://github.com/crate/crate/pull/10104#discussion_r454621696", "createdAt": "2020-07-14T20:23:45Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexMatcher.java", "diffHunk": "@@ -22,37 +22,54 @@\n package io.crate.expression.scalar.regex;\n \n import javax.annotation.Nullable;\n-import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n \n public class RegexMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNDU3Ng==", "bodyText": "Does the type signature definition still fit? Shouldn't that be a row-type now?", "url": "https://github.com/crate/crate/pull/10104#discussion_r454624576", "createdAt": "2020-07-14T20:28:35Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -19,29 +19,37 @@\n  * software solely pursuant to the terms of the relevant commercial agreement.\n  */\n \n-package io.crate.expression.scalar.regex;\n+package io.crate.expression.tablefunctions;\n \n+import io.crate.common.annotations.VisibleForTesting;\n import io.crate.data.Input;\n-import io.crate.expression.scalar.ScalarFunctionModule;\n-import io.crate.expression.symbol.Function;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n import io.crate.expression.symbol.SymbolType;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n \n import javax.annotation.Nullable;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n-public class MatchesFunction extends Scalar<List<String>, Object> {\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n \n     public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n \n-    public static void register(ScalarFunctionModule module) {\n+    public static void register(TableFunctionModule module) {\n         module.register(\n-            Signature.scalar(\n+            Signature.table(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNjMxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCompile() throws Exception {\n          \n          \n            \n                public void test_compile_creates_regex_matcher_instance_on_table_function() throws Exception {", "url": "https://github.com/crate/crate/pull/10104#discussion_r454626318", "createdAt": "2020-07-14T20:31:39Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/tablefunctions/MatchesFunctionTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.metadata.Scalar;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+\n+import java.util.Locale;\n+\n+public class MatchesFunctionTest extends AbstractTableFunctionsTest {\n+\n+    @Test\n+    public void testCompile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNjcxNQ==", "bodyText": "why not pass the argument into the function directly?", "url": "https://github.com/crate/crate/pull/10104#discussion_r454626715", "createdAt": "2020-07-14T20:32:23Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/expression/tablefunctions/MatchesFunctionTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.metadata.Scalar;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.junit.Test;\n+\n+import java.util.Locale;\n+\n+public class MatchesFunctionTest extends AbstractTableFunctionsTest {\n+\n+    @Test\n+    public void testCompile() throws Exception {\n+        Matcher<Scalar> matcher = new BaseMatcher<>() {\n+            @Override\n+            public boolean matches(Object item) {\n+                MatchesFunction regexpImpl = (MatchesFunction) item;\n+                // ensure that the RegexMatcher was created due to compilation\n+                return regexpImpl.regexMatcher() != null;\n+            }\n+\n+            @Override\n+            public void describeTo(Description description) {\n+            }\n+        };\n+        assertCompile(\"regexp_matches(name, '.*(ba).*')\", (s) -> matcher);\n+    }\n+\n+    private static String regexp_matches(String value, String pattern, String flags) {\n+        return String.format(Locale.ENGLISH, \"regexp_matches('%s', '%s', '%s')\", value, pattern, flags);\n+    }\n+\n+    private static String regexp_matches(String value, String pattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNjk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Seed(\"C328C6C2B806C0E9\")", "url": "https://github.com/crate/crate/pull/10104#discussion_r454626994", "createdAt": "2020-07-14T20:32:55Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/RegexpMatchesTableFunctionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.integrationtests;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Seed;\n+import io.crate.testing.TestingHelpers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static io.crate.testing.TestingHelpers.printedTable;\n+import static org.hamcrest.core.Is.is;\n+\n+public class RegexpMatchesTableFunctionIntegrationTest extends SQLTransportIntegrationTest {\n+\n+    @Before\n+    public void setup() {\n+        execute(\"create table tregex (i integer, s string) with (number_of_replicas=0)\");\n+        execute(\"insert into tregex(i, s) values (?, ?)\", new Object[][]{\n+            new Object[]{1, \"foo is first\"},\n+            new Object[]{2, \"bar is second\"},\n+            new Object[]{3, \"foobar is great\"},\n+            new Object[]{4, \"boobar is greater\"},\n+            new Object[]{5, \"awam bam baluma\"},\n+            new Object[]{6, null}\n+        });\n+        refresh();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        execute(\"drop table tregex\");\n+    }\n+\n+    @Seed(\"C328C6C2B806C0E9\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyNzMwMQ==", "bodyText": "I don't really see how these are testing anything that is not covered by the unit tests?", "url": "https://github.com/crate/crate/pull/10104#discussion_r454627301", "createdAt": "2020-07-14T20:33:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/integrationtests/RegexpMatchesTableFunctionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.integrationtests;\n+\n+import com.carrotsearch.randomizedtesting.annotations.Seed;\n+import io.crate.testing.TestingHelpers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static io.crate.testing.TestingHelpers.printedTable;\n+import static org.hamcrest.core.Is.is;\n+\n+public class RegexpMatchesTableFunctionIntegrationTest extends SQLTransportIntegrationTest {\n+\n+    @Before\n+    public void setup() {\n+        execute(\"create table tregex (i integer, s string) with (number_of_replicas=0)\");\n+        execute(\"insert into tregex(i, s) values (?, ?)\", new Object[][]{\n+            new Object[]{1, \"foo is first\"},\n+            new Object[]{2, \"bar is second\"},\n+            new Object[]{3, \"foobar is great\"},\n+            new Object[]{4, \"boobar is greater\"},\n+            new Object[]{5, \"awam bam baluma\"},\n+            new Object[]{6, null}\n+        });\n+        refresh();\n+    }\n+\n+    @After\n+    public void teardown() {\n+        execute(\"drop table tregex\");\n+    }\n+\n+    @Seed(\"C328C6C2B806C0E9\")\n+    @Test\n+    public void test_regexp_matches_is_used_in_select_filtering_from_a_table() {\n+        execute(\"select regexp_matches(s, '(\\\\w+) is (great).*', 'g') from tregex\");\n+        Arrays.sort(response.rows(), Comparator.comparing(o -> ((List<String>) o[0]).get(0)));\n+        assertThat(TestingHelpers.printedTable(response.rows()), is(\"[boobar, great]\\n\" +\n+                                                                    \"[foobar, great]\\n\"));\n+    }\n+\n+    @Test\n+    public void test_regexp_matches_is_used_in_from_generating_a_table() {\n+        execute(\"select * from regexp_matches('foobar is greater', '(\\\\w+) is (great|greater)', 'g')\");\n+        assertThat(TestingHelpers.printedTable(response.rows()), is(\"[foobar, great]\\n\"));\n+    }\n+\n+    @Test\n+    public void test_regexp_matches_g() {\n+        execute(\"select regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g')\");\n+        assertThat(printedTable(response.rows()), is(\"[bar, beque]\\n\" +\n+                                                     \"[bazil, barf]\\n\"));\n+\n+        execute(\"select groups from regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g')\");\n+        assertThat(printedTable(response.rows()), is(\"[bar, beque]\\n\" +\n+                                                     \"[bazil, barf]\\n\"));\n+    }\n+\n+    @Test\n+    public void test_regexp_matches() {\n+        execute(\"select regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)')\");\n+        assertThat(printedTable(response.rows()), is(\"[bar, beque]\\n\"));\n+\n+        execute(\"select groups from regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)')\");\n+        assertThat(printedTable(response.rows()), is(\"[bar, beque]\\n\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "972b05d2661ecf1c330442f18c99cd31ee58dba2", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/972b05d2661ecf1c330442f18c99cd31ee58dba2", "committedDate": "2020-07-01T19:07:32Z", "message": "Add support for global flag 'g' to now tabular function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match. The postgres specification defines this\nfunction as a table function."}, "afterCommit": {"oid": "b1362e7fcd3d0e84abf5cb01bd25bd765fa8fdc0", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b1362e7fcd3d0e84abf5cb01bd25bd765fa8fdc0", "committedDate": "2020-07-17T14:32:09Z", "message": "Remove integration tests as their logic is covered in unit tests already"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1362e7fcd3d0e84abf5cb01bd25bd765fa8fdc0", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b1362e7fcd3d0e84abf5cb01bd25bd765fa8fdc0", "committedDate": "2020-07-17T14:32:09Z", "message": "Remove integration tests as their logic is covered in unit tests already"}, "afterCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4d98613ddd524d8fccd4b634bd3513cce8b578a6", "committedDate": "2020-07-18T17:36:36Z", "message": "Refactor RegexMatcher to split functionality match/replace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjU4MTkx", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-452258191", "createdAt": "2020-07-21T08:55:21Z", "commit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo1NToyMVrOG0umJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozNDo0NVrOG0wCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MjU2Ng==", "bodyText": "I think this could be final, right ?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457942566", "createdAt": "2020-07-21T08:55:21Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexpReplaceFunction.java", "diffHunk": "@@ -33,6 +33,7 @@\n \n import javax.annotation.Nullable;\n import java.util.List;\n+import java.util.regex.Matcher;\n \n public class RegexpReplaceFunction extends Scalar<String, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0MzA5OQ==", "bodyText": "This could be final as well i think.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457943099", "createdAt": "2020-07-21T08:56:13Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1NjU0Nw==", "bodyText": "Minor: I think you could just return List.of() and () -> new Iterator<>() {.. and avoid the allocation here, but this is more like a personal preference.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457956547", "createdAt": "2020-07-21T09:18:57Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NjA4OQ==", "bodyText": "Minor: RegexpMatcher would be more consistent with the rest of the crate naming.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457966089", "createdAt": "2020-07-21T09:34:45Z", "author": {"login": "mkleen"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexMatcher.java", "diffHunk": "@@ -22,70 +22,37 @@\n package io.crate.expression.scalar.regex;\n \n import javax.annotation.Nullable;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class RegexMatcher {\n+public abstract class RegexMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjY2MTgw", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-452266180", "createdAt": "2020-07-21T09:05:25Z", "commit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowNToyNVrOG0u97A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozOTo1MlrOG0wNUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0ODY1Mg==", "bodyText": "is this variable really necessary patternVal, you can probably just use pattern.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457948652", "createdAt": "2020-07-21T09:05:25Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private final RegexMatcher regexMatcher;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable RegexMatcher regexMatcher) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.regexMatcher = regexMatcher;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    RegexMatcher regexMatcher() {\n+        return regexMatcher;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            String patternVal = literal.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1ODUyNQ==", "bodyText": "i am wondering why this exception is swallowed and the null is returned, shouldn't we propagate this failure?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457958525", "createdAt": "2020-07-21T09:22:09Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private final RegexMatcher regexMatcher;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable RegexMatcher regexMatcher) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.regexMatcher = regexMatcher;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    RegexMatcher regexMatcher() {\n+        return regexMatcher;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            String patternVal = literal.value();\n+            if (patternVal == null) {\n+                return this;\n+            }\n+            pattern = patternVal;\n+        }\n+        String flags = null;\n+        if (arguments.size() == 3) {\n+            assert arguments.get(2).symbolType() == SymbolType.LITERAL :\n+                \"3rd argument must be a \" + SymbolType.LITERAL;\n+            flags = ((Literal<String>) arguments.get(2)).value();\n+        }\n+        if (pattern != null) {\n+            return new MatchesFunction(\n+                signature, boundSignature, createMatcher(pattern, flags));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        assert args.length == 2 || args.length == 3 : \"number of args must be 2 or 3\";\n+        String value = (String) args[0].value();\n+        String pattern = (String) args[1].value();\n+        if (value == null || pattern == null) {\n+            return () -> NO_RESULTS_ITERATOR;\n+        }\n+\n+        RegexMatcher matcher;\n+        if (regexMatcher == null) {\n+            String flags = null;\n+            if (args.length == 3) {\n+                flags = (String) args[2].value();\n+            }\n+            matcher = createMatcher(pattern, flags);\n+        } else {\n+            matcher = regexMatcher;\n+        }\n+\n+        Iterator<Row> rowIterator;\n+        List<List<String>> rowGroups = matcher.match(value);\n+        if (rowGroups == null) {\n+            rowIterator = NO_RESULTS_ITERATOR;\n+        } else {\n+            rowIterator = new Iterator<>() {\n+\n+                final Object [] columns = new Object[]{ null };\n+                final RowN row = new RowN(columns);\n+                int idx = 0;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return idx < rowGroups.size();\n+                }\n+\n+                @Override\n+                public Row next() {\n+                    if (!hasNext()) {\n+                        throw new NoSuchElementException(\"no more rows\");\n+                    }\n+                    columns[0] = rowGroups.get(idx++);\n+                    return row;\n+                }\n+            };\n+        }\n+        return () -> rowIterator;\n+    }\n+\n+    private static RegexMatcher createMatcher(String regex, @Nullable String flags) {\n+\n+        Function<Supplier<List<String>>, List<List<String>>> collector =\n+            RegexMatcher.isGlobal(flags) ?\n+                (supplier) -> {\n+                    List<List<String>> result = Stream\n+                        .generate(supplier)\n+                        .takeWhile(Objects::nonNull)\n+                        .collect(Collectors.toList());\n+                    return result.isEmpty() ? null : result;\n+                }\n+                :\n+                (supplier) -> {\n+                    List<String> groups = supplier.get();\n+                    return groups != null ? List.of(groups) : null;\n+                };\n+        return new RegexMatcher(regex, flags) {\n+\n+            @Override\n+            public List<List<String>> match(String term) {\n+                Matcher matcher = initMatcher(term);\n+                return collector.apply(() -> {\n+                    if (!matcher.find()) {\n+                        return null;\n+                    }\n+                    int groupCount = matcher.groupCount();\n+                    if (groupCount == 0) {\n+                        try {\n+                            return List.of(matcher.group());\n+                        } catch (IllegalStateException e) {\n+                            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1OTg0MQ==", "bodyText": "maybe we can make this function nonnullable, then we probably won't have to handle special null cases here https://github.com/crate/crate/pull/10104/files#diff-4f4a1a2d0baa1a4764044bf3363dcba8R168 and use the same logic to handle both empty and non-empty cases?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457959841", "createdAt": "2020-07-21T09:24:27Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private final RegexMatcher regexMatcher;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable RegexMatcher regexMatcher) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.regexMatcher = regexMatcher;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    RegexMatcher regexMatcher() {\n+        return regexMatcher;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            String patternVal = literal.value();\n+            if (patternVal == null) {\n+                return this;\n+            }\n+            pattern = patternVal;\n+        }\n+        String flags = null;\n+        if (arguments.size() == 3) {\n+            assert arguments.get(2).symbolType() == SymbolType.LITERAL :\n+                \"3rd argument must be a \" + SymbolType.LITERAL;\n+            flags = ((Literal<String>) arguments.get(2)).value();\n+        }\n+        if (pattern != null) {\n+            return new MatchesFunction(\n+                signature, boundSignature, createMatcher(pattern, flags));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        assert args.length == 2 || args.length == 3 : \"number of args must be 2 or 3\";\n+        String value = (String) args[0].value();\n+        String pattern = (String) args[1].value();\n+        if (value == null || pattern == null) {\n+            return () -> NO_RESULTS_ITERATOR;\n+        }\n+\n+        RegexMatcher matcher;\n+        if (regexMatcher == null) {\n+            String flags = null;\n+            if (args.length == 3) {\n+                flags = (String) args[2].value();\n+            }\n+            matcher = createMatcher(pattern, flags);\n+        } else {\n+            matcher = regexMatcher;\n+        }\n+\n+        Iterator<Row> rowIterator;\n+        List<List<String>> rowGroups = matcher.match(value);\n+        if (rowGroups == null) {\n+            rowIterator = NO_RESULTS_ITERATOR;\n+        } else {\n+            rowIterator = new Iterator<>() {\n+\n+                final Object [] columns = new Object[]{ null };\n+                final RowN row = new RowN(columns);\n+                int idx = 0;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return idx < rowGroups.size();\n+                }\n+\n+                @Override\n+                public Row next() {\n+                    if (!hasNext()) {\n+                        throw new NoSuchElementException(\"no more rows\");\n+                    }\n+                    columns[0] = rowGroups.get(idx++);\n+                    return row;\n+                }\n+            };\n+        }\n+        return () -> rowIterator;\n+    }\n+\n+    private static RegexMatcher createMatcher(String regex, @Nullable String flags) {\n+\n+        Function<Supplier<List<String>>, List<List<String>>> collector =\n+            RegexMatcher.isGlobal(flags) ?\n+                (supplier) -> {\n+                    List<List<String>> result = Stream\n+                        .generate(supplier)\n+                        .takeWhile(Objects::nonNull)\n+                        .collect(Collectors.toList());\n+                    return result.isEmpty() ? null : result;\n+                }\n+                :\n+                (supplier) -> {\n+                    List<String> groups = supplier.get();\n+                    return groups != null ? List.of(groups) : null;\n+                };\n+        return new RegexMatcher(regex, flags) {\n+\n+            @Override\n+            public List<List<String>> match(String term) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2ODk3OA==", "bodyText": "imho a simple for-loop would be more readable and it would avoid to/from object operations (not sure whether it is the case though)", "url": "https://github.com/crate/crate/pull/10104#discussion_r457968978", "createdAt": "2020-07-21T09:39:52Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private final RegexMatcher regexMatcher;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable RegexMatcher regexMatcher) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.regexMatcher = regexMatcher;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    RegexMatcher regexMatcher() {\n+        return regexMatcher;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            String patternVal = literal.value();\n+            if (patternVal == null) {\n+                return this;\n+            }\n+            pattern = patternVal;\n+        }\n+        String flags = null;\n+        if (arguments.size() == 3) {\n+            assert arguments.get(2).symbolType() == SymbolType.LITERAL :\n+                \"3rd argument must be a \" + SymbolType.LITERAL;\n+            flags = ((Literal<String>) arguments.get(2)).value();\n+        }\n+        if (pattern != null) {\n+            return new MatchesFunction(\n+                signature, boundSignature, createMatcher(pattern, flags));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        assert args.length == 2 || args.length == 3 : \"number of args must be 2 or 3\";\n+        String value = (String) args[0].value();\n+        String pattern = (String) args[1].value();\n+        if (value == null || pattern == null) {\n+            return () -> NO_RESULTS_ITERATOR;\n+        }\n+\n+        RegexMatcher matcher;\n+        if (regexMatcher == null) {\n+            String flags = null;\n+            if (args.length == 3) {\n+                flags = (String) args[2].value();\n+            }\n+            matcher = createMatcher(pattern, flags);\n+        } else {\n+            matcher = regexMatcher;\n+        }\n+\n+        Iterator<Row> rowIterator;\n+        List<List<String>> rowGroups = matcher.match(value);\n+        if (rowGroups == null) {\n+            rowIterator = NO_RESULTS_ITERATOR;\n+        } else {\n+            rowIterator = new Iterator<>() {\n+\n+                final Object [] columns = new Object[]{ null };\n+                final RowN row = new RowN(columns);\n+                int idx = 0;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return idx < rowGroups.size();\n+                }\n+\n+                @Override\n+                public Row next() {\n+                    if (!hasNext()) {\n+                        throw new NoSuchElementException(\"no more rows\");\n+                    }\n+                    columns[0] = rowGroups.get(idx++);\n+                    return row;\n+                }\n+            };\n+        }\n+        return () -> rowIterator;\n+    }\n+\n+    private static RegexMatcher createMatcher(String regex, @Nullable String flags) {\n+\n+        Function<Supplier<List<String>>, List<List<String>>> collector =\n+            RegexMatcher.isGlobal(flags) ?\n+                (supplier) -> {\n+                    List<List<String>> result = Stream\n+                        .generate(supplier)\n+                        .takeWhile(Objects::nonNull)\n+                        .collect(Collectors.toList());\n+                    return result.isEmpty() ? null : result;\n+                }\n+                :\n+                (supplier) -> {\n+                    List<String> groups = supplier.get();\n+                    return groups != null ? List.of(groups) : null;\n+                };\n+        return new RegexMatcher(regex, flags) {\n+\n+            @Override\n+            public List<List<String>> match(String term) {\n+                Matcher matcher = initMatcher(term);\n+                return collector.apply(() -> {\n+                    if (!matcher.find()) {\n+                        return null;\n+                    }\n+                    int groupCount = matcher.groupCount();\n+                    if (groupCount == 0) {\n+                        try {\n+                            return List.of(matcher.group());\n+                        } catch (IllegalStateException e) {\n+                            return null;\n+                        }\n+                    }\n+                    return IntStream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjkzNTI2", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-452293526", "createdAt": "2020-07-21T09:41:36Z", "commit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo0MTozNlrOG0wRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1MDowMVrOG0wkCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTk5Ng==", "bodyText": "stuff?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457969996", "createdAt": "2020-07-21T09:41:36Z", "author": {"login": "kovrus"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -140,6 +140,152 @@ The return value always matches the ``start`` / ``stop`` types.\n     +---------------+-----------------------------------+\n     SELECT 3 rows in set (... sec)\n \n+.. _table-functions-regexp-matches:\n+\n+``regexp_matches(source, pattern [, flags])``\n+=============================================\n+\n+Uses the regular expression ``pattern`` to match against the ``source`` string.\n+\n+The result rows have one column:\n+\n+.. list-table::\n+    :header-rows: 1\n+\n+    * - Column name\n+      - Description\n+    * - groups\n+      - ``array(text)``\n+\n+If ``pattern`` matches ``source``, an array of the matched regular expression\n+groups is returned.\n+\n+If no regular expression group was used, the whole pattern is used as a group.\n+\n+A regular expression group is formed by a subexpression that is surrounded by\n+parentheses. The position of a group is determined by the position of its\n+opening parenthesis.\n+\n+For example when matching the pattern ``\\b([A-Z])`` a match for the\n+subexpression ``([A-Z])`` would create group No. 1. If you want to group stuff", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MjIyMQ==", "bodyText": "kind of similar what jordi commented already. The abstract RegexMatcher class is implemented partially by match and replace functions, which raises the question about using this abstraction. I'd better move related to functions logic closer to the implementation and maybe add some static factory methods that would hide things like https://github.com/crate/crate/pull/10104/files#diff-bffb730cd7513f358bd585218cd15286R172 and https://github.com/crate/crate/pull/10104/files#diff-4f4a1a2d0baa1a4764044bf3363dcba8R198", "url": "https://github.com/crate/crate/pull/10104#discussion_r457972221", "createdAt": "2020-07-21T09:45:22Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexMatcher.java", "diffHunk": "@@ -22,70 +22,37 @@\n package io.crate.expression.scalar.regex;\n \n import javax.annotation.Nullable;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class RegexMatcher {\n+public abstract class RegexMatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3Mjg4OA==", "bodyText": "is there a reason why Supplier is used here?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457972888", "createdAt": "2020-07-21T09:46:36Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private final RegexMatcher regexMatcher;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable RegexMatcher regexMatcher) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.regexMatcher = regexMatcher;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    RegexMatcher regexMatcher() {\n+        return regexMatcher;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            String patternVal = literal.value();\n+            if (patternVal == null) {\n+                return this;\n+            }\n+            pattern = patternVal;\n+        }\n+        String flags = null;\n+        if (arguments.size() == 3) {\n+            assert arguments.get(2).symbolType() == SymbolType.LITERAL :\n+                \"3rd argument must be a \" + SymbolType.LITERAL;\n+            flags = ((Literal<String>) arguments.get(2)).value();\n+        }\n+        if (pattern != null) {\n+            return new MatchesFunction(\n+                signature, boundSignature, createMatcher(pattern, flags));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        assert args.length == 2 || args.length == 3 : \"number of args must be 2 or 3\";\n+        String value = (String) args[0].value();\n+        String pattern = (String) args[1].value();\n+        if (value == null || pattern == null) {\n+            return () -> NO_RESULTS_ITERATOR;\n+        }\n+\n+        RegexMatcher matcher;\n+        if (regexMatcher == null) {\n+            String flags = null;\n+            if (args.length == 3) {\n+                flags = (String) args[2].value();\n+            }\n+            matcher = createMatcher(pattern, flags);\n+        } else {\n+            matcher = regexMatcher;\n+        }\n+\n+        Iterator<Row> rowIterator;\n+        List<List<String>> rowGroups = matcher.match(value);\n+        if (rowGroups == null) {\n+            rowIterator = NO_RESULTS_ITERATOR;\n+        } else {\n+            rowIterator = new Iterator<>() {\n+\n+                final Object [] columns = new Object[]{ null };\n+                final RowN row = new RowN(columns);\n+                int idx = 0;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return idx < rowGroups.size();\n+                }\n+\n+                @Override\n+                public Row next() {\n+                    if (!hasNext()) {\n+                        throw new NoSuchElementException(\"no more rows\");\n+                    }\n+                    columns[0] = rowGroups.get(idx++);\n+                    return row;\n+                }\n+            };\n+        }\n+        return () -> rowIterator;\n+    }\n+\n+    private static RegexMatcher createMatcher(String regex, @Nullable String flags) {\n+\n+        Function<Supplier<List<String>>, List<List<String>>> collector =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NDc5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              row contains a single column ``groups`` of type ``text_array``.\n          \n          \n            \n              row contains a single column ``groups`` of type ``array(text)``.\n          \n      \n    \n    \n  \n\nor smth similar, the text_array smth more like an internal representation.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457974793", "createdAt": "2020-07-21T09:50:01Z", "author": {"login": "kovrus"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -42,7 +42,10 @@ Unreleased Changes\n Breaking Changes\n ================\n \n-None\n+- Added support for flag ``g`` to function\n+  :ref:`regexp_matches <table-functions-regexp-matches>` and changed\n+  its type from ``scalar`` to ``table`` type. It now returns a table where each\n+  row contains a single column ``groups`` of type ``text_array``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzAwMjkx", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-452300291", "createdAt": "2020-07-21T09:50:54Z", "commit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1MDo1NFrOG0wl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1Mjo0M1rOG0wp-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NTI5MQ==", "bodyText": "emptyIterator in any case returns a singleton and can be used directly. Assigning it to a different constant field wastes some memory for no reason.", "url": "https://github.com/crate/crate/pull/10104#discussion_r457975291", "createdAt": "2020-07-21T09:50:54Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.scalar.regex.RegexMatcher;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+public class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+    private static final Iterator<Row> NO_RESULTS_ITERATOR = Collections.emptyIterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1NjU0Nw=="}, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NjMxMw==", "bodyText": "I'm not sure I like the design of the new abstraction here.\nIs the availability of these two methods depending on the g flag? Or why we do need to have these two methods in a base class when they can be unavailable?", "url": "https://github.com/crate/crate/pull/10104#discussion_r457976313", "createdAt": "2020-07-21T09:52:43Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexMatcher.java", "diffHunk": "@@ -22,70 +22,37 @@\n package io.crate.expression.scalar.regex;\n \n import javax.annotation.Nullable;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class RegexMatcher {\n+public abstract class RegexMatcher {\n \n-    private final boolean globalFlag;\n     private final Pattern pattern;\n     private Matcher matcher;\n \n-    public RegexMatcher(String regex, int flags, boolean globalFlag) {\n-        pattern = Pattern.compile(regex, flags);\n-        this.globalFlag = globalFlag;\n-    }\n-\n     public RegexMatcher(String regex, @Nullable String flags) {\n-        this(regex, parseFlags(flags), isGlobal(flags));\n-    }\n-\n-    public RegexMatcher(String regex) {\n-        this(regex, 0, false);\n-    }\n-\n-    public boolean match(String term) {\n-        initMatcher(term);\n-        return matcher.find();\n-    }\n-\n-    @Nullable\n-    public List<String> groups() {\n-        int groupCount = matcher.groupCount();\n-        if (groupCount == 0) {\n-            try {\n-                return List.of(matcher.group());\n-            } catch (IllegalStateException e) {\n-                return null;\n-            }\n-        }\n-        ArrayList<String> groups = new ArrayList<>(groupCount);\n-        for (int i = 0; i < groupCount; i++) {\n-            groups.add(matcher.group(i + 1));\n-        }\n-        return groups;\n+        pattern = Pattern.compile(regex, parseFlags(flags));\n     }\n \n-    public String replace(String term, String replacement) {\n-        initMatcher(term);\n-        if (globalFlag) {\n-            return matcher.replaceAll(replacement);\n-        } else {\n-            return matcher.replaceFirst(replacement);\n-        }\n-    }\n-\n-    private void initMatcher(String term) {\n+    protected Matcher initMatcher(String term) {\n         if (matcher == null) {\n             matcher = pattern.matcher(term);\n         } else {\n             matcher.reset(term);\n         }\n+        return matcher;\n     }\n \n-    public static int parseFlags(@Nullable String flagsString) {\n+    public List<List<String>> match(String term) {\n+        throw new UnsupportedOperationException(\"method not available\");\n+    }\n+\n+    public String replace(String term, String replacement) {\n+        throw new UnsupportedOperationException(\"method not available\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d98613ddd524d8fccd4b634bd3513cce8b578a6", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4d98613ddd524d8fccd4b634bd3513cce8b578a6", "committedDate": "2020-07-18T17:36:36Z", "message": "Refactor RegexMatcher to split functionality match/replace"}, "afterCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5511c6f95824a3fdfe1159f71fcd989f2c4a42c1", "committedDate": "2020-07-22T08:43:51Z", "message": "Cosmetic changes pass 1, the least meaty changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTM2OTcw", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-453136970", "createdAt": "2020-07-22T09:12:24Z", "commit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxMjoyNFrOG1Z2CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxMjoyNFrOG1Z2CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1MTE0NQ==", "bodyText": "occurence = occurrence", "url": "https://github.com/crate/crate/pull/10104#discussion_r458651145", "createdAt": "2020-07-22T09:12:24Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1711,78 +1711,33 @@ See the api documentation for more details.\n \n .. _Lucene Regular Expressions: http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/util/automaton/RegExp.html\n \n-.. _scalar-regexp-matches:\n-\n-``regexp_matches(source, pattern [, flags])``\n----------------------------------------------\n-\n-This function uses the regular expression pattern in ``pattern`` to match\n-against the ``source`` string.\n-\n-Returns: ``text_array``\n-\n-If ``source`` matches, an array of the matched regular expression groups is\n-returned.\n-\n-If no regular expression group was used, the whole pattern is used as a group.\n-\n-If ``source`` does not match, this function returns ``NULL``.\n-\n-A regular expression group is formed by a subexpression that is surrounded by\n-parentheses.The position of a group is determined by the position of its\n-opening parenthesis.\n-\n-For example when matching the pattern ``\\b([A-Z])`` a match for the\n-subexpression ``([A-Z])`` would create group No. 1. If you want to group stuff\n-with parentheses, but without grouping, use ``(?...)``.\n-\n-For example matching the regular expression ``([Aa](.+)z)`` against\n-``alcatraz``, results in these groups:\n-\n- * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n- * group 2: ``lcatra`` (beginning at second parenthesis)\n-\n-The ``regexp_matches`` function will return all groups as a ``text`` array::\n-\n-    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n-    +------------------------+\n-    | matched                |\n-    +------------------------+\n-    | [\"alcatraz\", \"lcatra\"] |\n-    +------------------------+\n-    SELECT 1 row in set (... sec)\n-\n-::\n+``regexp_replace(source, pattern, replacement [, flags])``\n+----------------------------------------------------------\n \n-    cr> select regexp_matches('alcatraz', 'traz') as matched;\n-    +----------+\n-    | matched  |\n-    +----------+\n-    | [\"traz\"] |\n-    +----------+\n-    SELECT 1 row in set (... sec)\n+``regexp_replace`` can be used to replace every (or only the first) occurence", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTM5MTU0", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-453139154", "createdAt": "2020-07-22T09:15:24Z", "commit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxNToyNVrOG1Z8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxNToyNVrOG1Z8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1Mjg1NQ==", "bodyText": "java = Java", "url": "https://github.com/crate/crate/pull/10104#discussion_r458652855", "createdAt": "2020-07-22T09:15:25Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1711,78 +1711,33 @@ See the api documentation for more details.\n \n .. _Lucene Regular Expressions: http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/util/automaton/RegExp.html\n \n-.. _scalar-regexp-matches:\n-\n-``regexp_matches(source, pattern [, flags])``\n----------------------------------------------\n-\n-This function uses the regular expression pattern in ``pattern`` to match\n-against the ``source`` string.\n-\n-Returns: ``text_array``\n-\n-If ``source`` matches, an array of the matched regular expression groups is\n-returned.\n-\n-If no regular expression group was used, the whole pattern is used as a group.\n-\n-If ``source`` does not match, this function returns ``NULL``.\n-\n-A regular expression group is formed by a subexpression that is surrounded by\n-parentheses.The position of a group is determined by the position of its\n-opening parenthesis.\n-\n-For example when matching the pattern ``\\b([A-Z])`` a match for the\n-subexpression ``([A-Z])`` would create group No. 1. If you want to group stuff\n-with parentheses, but without grouping, use ``(?...)``.\n-\n-For example matching the regular expression ``([Aa](.+)z)`` against\n-``alcatraz``, results in these groups:\n-\n- * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n- * group 2: ``lcatra`` (beginning at second parenthesis)\n-\n-The ``regexp_matches`` function will return all groups as a ``text`` array::\n-\n-    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n-    +------------------------+\n-    | matched                |\n-    +------------------------+\n-    | [\"alcatraz\", \"lcatra\"] |\n-    +------------------------+\n-    SELECT 1 row in set (... sec)\n-\n-::\n+``regexp_replace(source, pattern, replacement [, flags])``\n+----------------------------------------------------------\n \n-    cr> select regexp_matches('alcatraz', 'traz') as matched;\n-    +----------+\n-    | matched  |\n-    +----------+\n-    | [\"traz\"] |\n-    +----------+\n-    SELECT 1 row in set (... sec)\n+``regexp_replace`` can be used to replace every (or only the first) occurence\n+of a subsequence matching ``pattern`` in the ``source`` string with the\n+``replacement`` string. If no subsequence in ``source`` matches the regular\n+expression ``pattern``, ``source`` is returned unchanged.\n \n-Through array element access functionality, a group can be selected directly.\n-See :ref:`sql_dql_object_arrays_select` for details.\n+Returns: ``text``\n \n-::\n+``pattern`` is a java regular expression. For details on the regexp syntax, see", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTM5NTQz", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-453139543", "createdAt": "2020-07-22T09:15:56Z", "commit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxNTo1NlrOG1Z92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToxNTo1NlrOG1Z92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1MzE0NA==", "bodyText": "Per default = By default", "url": "https://github.com/crate/crate/pull/10104#discussion_r458653144", "createdAt": "2020-07-22T09:15:56Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1711,78 +1711,33 @@ See the api documentation for more details.\n \n .. _Lucene Regular Expressions: http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/util/automaton/RegExp.html\n \n-.. _scalar-regexp-matches:\n-\n-``regexp_matches(source, pattern [, flags])``\n----------------------------------------------\n-\n-This function uses the regular expression pattern in ``pattern`` to match\n-against the ``source`` string.\n-\n-Returns: ``text_array``\n-\n-If ``source`` matches, an array of the matched regular expression groups is\n-returned.\n-\n-If no regular expression group was used, the whole pattern is used as a group.\n-\n-If ``source`` does not match, this function returns ``NULL``.\n-\n-A regular expression group is formed by a subexpression that is surrounded by\n-parentheses.The position of a group is determined by the position of its\n-opening parenthesis.\n-\n-For example when matching the pattern ``\\b([A-Z])`` a match for the\n-subexpression ``([A-Z])`` would create group No. 1. If you want to group stuff\n-with parentheses, but without grouping, use ``(?...)``.\n-\n-For example matching the regular expression ``([Aa](.+)z)`` against\n-``alcatraz``, results in these groups:\n-\n- * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n- * group 2: ``lcatra`` (beginning at second parenthesis)\n-\n-The ``regexp_matches`` function will return all groups as a ``text`` array::\n-\n-    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n-    +------------------------+\n-    | matched                |\n-    +------------------------+\n-    | [\"alcatraz\", \"lcatra\"] |\n-    +------------------------+\n-    SELECT 1 row in set (... sec)\n-\n-::\n+``regexp_replace(source, pattern, replacement [, flags])``\n+----------------------------------------------------------\n \n-    cr> select regexp_matches('alcatraz', 'traz') as matched;\n-    +----------+\n-    | matched  |\n-    +----------+\n-    | [\"traz\"] |\n-    +----------+\n-    SELECT 1 row in set (... sec)\n+``regexp_replace`` can be used to replace every (or only the first) occurence\n+of a subsequence matching ``pattern`` in the ``source`` string with the\n+``replacement`` string. If no subsequence in ``source`` matches the regular\n+expression ``pattern``, ``source`` is returned unchanged.\n \n-Through array element access functionality, a group can be selected directly.\n-See :ref:`sql_dql_object_arrays_select` for details.\n+Returns: ``text``\n \n-::\n+``pattern`` is a java regular expression. For details on the regexp syntax, see\n+`Java Regular Expressions`_.\n \n-    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n-    +--------------+\n-    | second_group |\n-    +--------------+\n-    | lcatra       |\n-    +--------------+\n-    SELECT 1 row in set (... sec)\n+The ``replacement`` string may contain expressions like ``$N`` where ``N`` is a\n+digit between 0 and 9. It references the *N*\\ th matched group of ``pattern``\n+and the matching subsequence of that group will be inserted in the returned\n+string. The expression ``$0`` will insert the whole matching ``source``.\n \n-.. _scalar-regexp-matches-flags:\n+Per default, only the first occurrence of a subsequence matching ``pattern``", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTQzODY0", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-453143864", "createdAt": "2020-07-22T09:21:45Z", "commit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMTo0NVrOG1aLtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMTo0NVrOG1aLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NjY5NA==", "bodyText": "as optional third parameter = as optional parameters", "url": "https://github.com/crate/crate/pull/10104#discussion_r458656694", "createdAt": "2020-07-22T09:21:45Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -140,6 +140,152 @@ The return value always matches the ``start`` / ``stop`` types.\n     +---------------+-----------------------------------+\n     SELECT 3 rows in set (... sec)\n \n+.. _table-functions-regexp-matches:\n+\n+``regexp_matches(source, pattern [, flags])``\n+=============================================\n+\n+Uses the regular expression ``pattern`` to match against the ``source`` string.\n+\n+The result rows have one column:\n+\n+.. list-table::\n+    :header-rows: 1\n+\n+    * - Column name\n+      - Description\n+    * - groups\n+      - ``array(text)``\n+\n+If ``pattern`` matches ``source``, an array of the matched regular expression\n+groups is returned.\n+\n+If no regular expression group was used, the whole pattern is used as a group.\n+\n+A regular expression group is formed by a subexpression that is surrounded by\n+parentheses. The position of a group is determined by the position of its\n+opening parenthesis.\n+\n+For example when matching the pattern ``\\b([A-Z])`` a match for the\n+subexpression ``([A-Z])`` would create group No. 1. If you want to group items\n+with parentheses, but without grouping, use ``(?...)``.\n+\n+For example matching the regular expression ``([Aa](.+)z)`` against\n+``alcatraz``, results in these groups:\n+\n+ * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n+ * group 2: ``lcatra`` (beginning at second parenthesis)\n+\n+The ``regexp_matches`` function will return all groups as a ``text`` array::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n+    +------------------------+\n+    | matched                |\n+    +------------------------+\n+    | [\"alcatraz\", \"lcatra\"] |\n+    +------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', 'traz') as matched;\n+    +----------+\n+    | matched  |\n+    +----------+\n+    | [\"traz\"] |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n+\n+Through array element access functionality, a group can be selected directly.\n+See :ref:`sql_dql_object_arrays_select` for details.\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n+    +--------------+\n+    | second_group |\n+    +--------------+\n+    | lcatra       |\n+    +--------------+\n+    SELECT 1 row in set (... sec)\n+\n+.. _table-functions-regexp-matches-flags:\n+\n+Flags\n+.....\n+\n+This function takes a number of flags as optional third parameter. These flags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTQ0Mjgy", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-453144282", "createdAt": "2020-07-22T09:22:19Z", "commit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMjoxOVrOG1aNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyMjoxOVrOG1aNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NzA2MA==", "bodyText": "as optional third parameter = as an optional parameter", "url": "https://github.com/crate/crate/pull/10104#discussion_r458657060", "createdAt": "2020-07-22T09:22:19Z", "author": {"login": "infoverload"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -1711,78 +1711,33 @@ See the api documentation for more details.\n \n .. _Lucene Regular Expressions: http://lucene.apache.org/core/4_9_0/core/org/apache/lucene/util/automaton/RegExp.html\n \n-.. _scalar-regexp-matches:\n-\n-``regexp_matches(source, pattern [, flags])``\n----------------------------------------------\n-\n-This function uses the regular expression pattern in ``pattern`` to match\n-against the ``source`` string.\n-\n-Returns: ``text_array``\n-\n-If ``source`` matches, an array of the matched regular expression groups is\n-returned.\n-\n-If no regular expression group was used, the whole pattern is used as a group.\n-\n-If ``source`` does not match, this function returns ``NULL``.\n-\n-A regular expression group is formed by a subexpression that is surrounded by\n-parentheses.The position of a group is determined by the position of its\n-opening parenthesis.\n-\n-For example when matching the pattern ``\\b([A-Z])`` a match for the\n-subexpression ``([A-Z])`` would create group No. 1. If you want to group stuff\n-with parentheses, but without grouping, use ``(?...)``.\n-\n-For example matching the regular expression ``([Aa](.+)z)`` against\n-``alcatraz``, results in these groups:\n-\n- * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n- * group 2: ``lcatra`` (beginning at second parenthesis)\n-\n-The ``regexp_matches`` function will return all groups as a ``text`` array::\n-\n-    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n-    +------------------------+\n-    | matched                |\n-    +------------------------+\n-    | [\"alcatraz\", \"lcatra\"] |\n-    +------------------------+\n-    SELECT 1 row in set (... sec)\n-\n-::\n+``regexp_replace(source, pattern, replacement [, flags])``\n+----------------------------------------------------------\n \n-    cr> select regexp_matches('alcatraz', 'traz') as matched;\n-    +----------+\n-    | matched  |\n-    +----------+\n-    | [\"traz\"] |\n-    +----------+\n-    SELECT 1 row in set (... sec)\n+``regexp_replace`` can be used to replace every (or only the first) occurence\n+of a subsequence matching ``pattern`` in the ``source`` string with the\n+``replacement`` string. If no subsequence in ``source`` matches the regular\n+expression ``pattern``, ``source`` is returned unchanged.\n \n-Through array element access functionality, a group can be selected directly.\n-See :ref:`sql_dql_object_arrays_select` for details.\n+Returns: ``text``\n \n-::\n+``pattern`` is a java regular expression. For details on the regexp syntax, see\n+`Java Regular Expressions`_.\n \n-    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n-    +--------------+\n-    | second_group |\n-    +--------------+\n-    | lcatra       |\n-    +--------------+\n-    SELECT 1 row in set (... sec)\n+The ``replacement`` string may contain expressions like ``$N`` where ``N`` is a\n+digit between 0 and 9. It references the *N*\\ th matched group of ``pattern``\n+and the matching subsequence of that group will be inserted in the returned\n+string. The expression ``$0`` will insert the whole matching ``source``.\n \n-.. _scalar-regexp-matches-flags:\n+Per default, only the first occurrence of a subsequence matching ``pattern``\n+will be replaced. If all occurrences shall be replaced use the ``g`` flag.\n \n Flags\n .....\n \n-This function takes a number of flags as optional third parameter. These flags\n-are given as a string containing any of the characters listed below. Order does\n-not matter.\n+``regexp_replace`` supports a number of flags as optional third parameter. These", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5511c6f95824a3fdfe1159f71fcd989f2c4a42c1", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5511c6f95824a3fdfe1159f71fcd989f2c4a42c1", "committedDate": "2020-07-22T08:43:51Z", "message": "Cosmetic changes pass 1, the least meaty changes"}, "afterCommit": {"oid": "92cf07cb1e112d519fa44dfc2ab7b2ed4f17f5d3", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/92cf07cb1e112d519fa44dfc2ab7b2ed4f17f5d3", "committedDate": "2020-07-22T11:47:44Z", "message": "Daisy's feedback, thank you!"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01ee546a8aaf6b7514b6a8b7b91469556df19e21", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/01ee546a8aaf6b7514b6a8b7b91469556df19e21", "committedDate": "2020-07-22T12:28:39Z", "message": "Catch null pointer exception"}, "afterCommit": {"oid": "56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce", "committedDate": "2020-07-24T11:15:29Z", "message": "Catch null pointer exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NjU0OTU1", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-455654955", "createdAt": "2020-07-27T10:17:13Z", "commit": {"oid": "56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxNzoxNFrOG3cZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoxNzoxNFrOG3cZng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5MDE3NA==", "bodyText": "is it possible to replace this stream with something like:\nvar group = groups(matcher);\nwhile (group != null) {\n    rowGroups.add(...)\n    group = groups(matcher)\n}", "url": "https://github.com/crate/crate/pull/10104#discussion_r460790174", "createdAt": "2020-07-27T10:17:14Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/tablefunctions/MatchesFunction.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.expression.tablefunctions;\n+\n+import io.crate.common.annotations.VisibleForTesting;\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.data.RowN;\n+import io.crate.expression.symbol.Literal;\n+import io.crate.expression.symbol.Symbol;\n+import io.crate.expression.symbol.SymbolType;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.metadata.tablefunctions.TableFunctionImplementation;\n+import io.crate.types.DataTypes;\n+import io.crate.types.RowType;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.crate.expression.RegexpFlagsHelper.parseFlags;\n+import static io.crate.expression.RegexpFlagsHelper.isGlobal;\n+\n+public final class MatchesFunction extends TableFunctionImplementation<List<Object>> {\n+\n+    public static final String NAME = \"regexp_matches\";\n+    private static final RowType ROW_TYPE = new RowType(\n+        List.of(DataTypes.STRING_ARRAY), List.of(\"groups\"));\n+\n+    public static void register(TableFunctionModule module) {\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+        module.register(\n+            Signature.table(\n+                NAME,\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING_ARRAY.getTypeSignature()\n+            ),\n+            MatchesFunction::new\n+        );\n+    }\n+\n+    @Nullable\n+    private Pattern pattern;\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature) {\n+        this(signature, boundSignature, null);\n+    }\n+\n+    private MatchesFunction(Signature signature, Signature boundSignature, @Nullable Pattern pattern) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+        this.pattern = pattern;\n+    }\n+\n+    @Override\n+    public Signature signature() {\n+        return signature;\n+    }\n+\n+    @Override\n+    public Signature boundSignature() {\n+        return boundSignature;\n+    }\n+\n+    @Override\n+    public RowType returnType() {\n+        return ROW_TYPE;\n+    }\n+\n+    @Override\n+    public boolean hasLazyResultSet() {\n+        return false;\n+    }\n+\n+    @VisibleForTesting\n+    Pattern pattern() {\n+        return pattern;\n+    }\n+\n+    @Override\n+    public Scalar<Iterable<Row>, List<Object>> compile(List<Symbol> arguments) {\n+        assert arguments.size() > 1 : \"number of arguments must be > 1\";\n+        String pattern = null;\n+        if (arguments.get(1).symbolType() == SymbolType.LITERAL) {\n+            Literal<String> literal = (Literal<String>) arguments.get(1);\n+            pattern = literal.value();\n+            if (pattern == null) {\n+                return this;\n+            }\n+        }\n+        String flags = null;\n+        if (arguments.size() == 3) {\n+            assert arguments.get(2).symbolType() == SymbolType.LITERAL :\n+                \"3rd argument must be a \" + SymbolType.LITERAL;\n+            flags = ((Literal<String>) arguments.get(2)).value();\n+        }\n+        if (pattern != null) {\n+            return new MatchesFunction(\n+                signature, boundSignature, Pattern.compile(pattern, parseFlags(flags)));\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public Iterable<Row> evaluate(TransactionContext txnCtx, Input[] args) {\n+        assert args.length == 2 || args.length == 3 : \"number of args must be 2 or 3\";\n+\n+        String value = (String) args[0].value();\n+        String pattern = (String) args[1].value();\n+        if (value == null || pattern == null) {\n+            return () -> Collections.emptyIterator();\n+        }\n+        String flags = null;\n+        if (args.length == 3) {\n+            flags = (String) args[2].value();\n+        }\n+\n+        if (this.pattern == null) {\n+            this.pattern = Pattern.compile(pattern, parseFlags(flags));\n+        }\n+        Matcher matcher = this.pattern.matcher(value);\n+        List<List<String>> rowGroups;\n+        if (isGlobal(flags)) {\n+            rowGroups = Stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce"}, "originalPosition": 165}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/56d325f2ead2b3b9a4da5df6abcd5dcdf8bd10ce", "committedDate": "2020-07-24T11:15:29Z", "message": "Catch null pointer exception"}, "afterCommit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/06af923fd9bedbea8473e02499b70ca337bfef5f", "committedDate": "2020-07-27T10:29:22Z", "message": "Remove streams, I prefer them though"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1Njk3MTQw", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-455697140", "createdAt": "2020-07-27T11:29:10Z", "commit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyOToxMFrOG3ehDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToyOToxMFrOG3ehDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNDg0Ng==", "bodyText": "maybe final or do we really have to mutate it in the evaluate?", "url": "https://github.com/crate/crate/pull/10104#discussion_r460824846", "createdAt": "2020-07-27T11:29:10Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexpReplaceFunction.java", "diffHunk": "@@ -65,16 +70,16 @@ public static void register(ScalarFunctionModule module) {\n     private final Signature signature;\n     private final Signature boundSignature;\n     @Nullable\n-    private final RegexMatcher regexMatcher;\n+    private Pattern pattern;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NzA5MTkz", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-455709193", "createdAt": "2020-07-27T11:49:49Z", "commit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo0OTo1MFrOG3fHFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1MTo0OFrOG3fKvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDU4Mg==", "bodyText": "Same here as in the generate_subscripts PR. I think for users it would be helpful to have a sentence or two for each example, explaining what is shown.\nI'm also not sure what the difference between the last two examples is? Feels a bit like proofing that it works instead of illustrating the user how it can be used.", "url": "https://github.com/crate/crate/pull/10104#discussion_r460834582", "createdAt": "2020-07-27T11:49:50Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -198,6 +198,152 @@ arrays within the same level.\n     +---+\n     SELECT 2 rows in set (... sec)\n \n+.. _table-functions-regexp-matches:\n+\n+``regexp_matches(source, pattern [, flags])``\n+=============================================\n+\n+Uses the regular expression ``pattern`` to match against the ``source`` string.\n+\n+The result rows have one column:\n+\n+.. list-table::\n+    :header-rows: 1\n+\n+    * - Column name\n+      - Description\n+    * - groups\n+      - ``array(text)``\n+\n+If ``pattern`` matches ``source``, an array of the matched regular expression\n+groups is returned.\n+\n+If no regular expression group was used, the whole pattern is used as a group.\n+\n+A regular expression group is formed by a subexpression that is surrounded by\n+parentheses. The position of a group is determined by the position of its\n+opening parenthesis.\n+\n+For example when matching the pattern ``\\b([A-Z])`` a match for the\n+subexpression ``([A-Z])`` would create group No. 1. If you want to group items\n+with parentheses, but without grouping, use ``(?...)``.\n+\n+For example matching the regular expression ``([Aa](.+)z)`` against\n+``alcatraz``, results in these groups:\n+\n+ * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n+ * group 2: ``lcatra`` (beginning at second parenthesis)\n+\n+The ``regexp_matches`` function will return all groups as a ``text`` array::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n+    +------------------------+\n+    | matched                |\n+    +------------------------+\n+    | [\"alcatraz\", \"lcatra\"] |\n+    +------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', 'traz') as matched;\n+    +----------+\n+    | matched  |\n+    +----------+\n+    | [\"traz\"] |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n+\n+Through array element access functionality, a group can be selected directly.\n+See :ref:`sql_dql_object_arrays_select` for details.\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n+    +--------------+\n+    | second_group |\n+    +--------------+\n+    | lcatra       |\n+    +--------------+\n+    SELECT 1 row in set (... sec)\n+\n+.. _table-functions-regexp-matches-flags:\n+\n+Flags\n+.....\n+\n+This function takes a number of flags as optional third parameter. These flags\n+are given as a string containing any of the characters listed below. Order does\n+not matter.\n+\n++-------+---------------------------------------------------------------------+\n+| Flag  | Description                                                         |\n++=======+=====================================================================+\n+| ``i`` | enable case insensitive matching                                    |\n++-------+---------------------------------------------------------------------+\n+| ``u`` | enable unicode case folding when used together with ``i``           |\n++-------+---------------------------------------------------------------------+\n+| ``U`` | enable unicode support for character classes like ``\\W``            |\n++-------+---------------------------------------------------------------------+\n+| ``s`` | make ``.`` match line terminators, too                              |\n++-------+---------------------------------------------------------------------+\n+| ``m`` | make ``^`` and ``$`` match on the beginning or end of a line        |\n+|       | too.                                                                |\n++-------+---------------------------------------------------------------------+\n+| ``x`` | permit whitespace and line comments starting with ``#``             |\n++-------+---------------------------------------------------------------------+\n+| ``d`` | only ``\\n`` is considered a line-terminator when using ``^``, ``$`` |\n+|       | and ``.``                                                           |\n++-------+---------------------------------------------------------------------+\n+| ``g`` | keep matching until the end of ``source``, instead of stopping at   |\n+|       | the first match.                                                    |\n++-------+---------------------------------------------------------------------+\n+\n+\n+Examples\n+........\n+\n+::\n+\n+    cr> select regexp_matches('foobar', '^(a(.+)z)$') as matched;\n+    +---------+\n+    | matched |\n+    +---------+\n+    +---------+\n+    SELECT 0 rows in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('99 bottles of beer on the wall', '\\d{2}\\s(\\w+).*', 'ixU')\n+    ... as matched;\n+    +-------------+\n+    | matched     |\n+    +-------------+\n+    | [\"bottles\"] |\n+    +-------------+\n+    SELECT 1 row in set (... sec)\n+\n+::\n+\n+    cr>  select regexp_matches('#abc #def #ghi #jkl', '(#[^\\s]*) (#[^\\s]*)', 'g') as matched;\n+    +------------------+\n+    | matched          |\n+    +------------------+\n+    | [\"#abc\", \"#def\"] |\n+    | [\"#ghi\", \"#jkl\"] |\n+    +------------------+\n+    SELECT 2 rows in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g') as matched;\n+    +-------------------+\n+    | matched           |\n+    +-------------------+\n+    | [\"bar\", \"beque\"]  |\n+    | [\"bazil\", \"barf\"] |\n+    +-------------------+\n+    SELECT 2 rows in set (... sec)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDgzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class RegexpFlagsHelper {\n          \n          \n            \n            public final class RegexpFlags {\n          \n      \n    \n    \n  \n\nNot sure if Helper adds anything useful to readers.", "url": "https://github.com/crate/crate/pull/10104#discussion_r460834838", "createdAt": "2020-07-27T11:50:18Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/RegexpFlagsHelper.java", "diffHunk": "@@ -1,89 +1,31 @@\n /*\n- * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n- * license agreements.  See the NOTICE file distributed with this work for\n- * additional information regarding copyright ownership.  Crate licenses\n- * this file to you under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.  You may\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n  * obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n  *\n  * However, if you have executed another commercial license agreement\n  * with Crate these terms will supersede the license and you may use the\n- * software solely pursuant to the terms of the relevant commercial agreement.\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n  */\n \n-package io.crate.expression.scalar.regex;\n+package io.crate.expression;\n \n import javax.annotation.Nullable;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class RegexMatcher {\n-\n-    private final boolean globalFlag;\n-    private final Pattern pattern;\n-    private Matcher matcher;\n-\n-    public RegexMatcher(String regex, int flags, boolean globalFlag) {\n-        pattern = Pattern.compile(regex, flags);\n-        this.globalFlag = globalFlag;\n-    }\n-\n-    public RegexMatcher(String regex, @Nullable String flags) {\n-        this(regex, parseFlags(flags), isGlobal(flags));\n-    }\n-\n-    public RegexMatcher(String regex) {\n-        this(regex, 0, false);\n-    }\n-\n-    public boolean match(String term) {\n-        initMatcher(term);\n-        return matcher.find();\n-    }\n-\n-    @Nullable\n-    public List<String> groups() {\n-        int groupCount = matcher.groupCount();\n-        if (groupCount == 0) {\n-            try {\n-                return List.of(matcher.group());\n-            } catch (IllegalStateException e) {\n-                return null;\n-            }\n-        }\n-        ArrayList<String> groups = new ArrayList<>(groupCount);\n-        for (int i = 0; i < groupCount; i++) {\n-            groups.add(matcher.group(i + 1));\n-        }\n-        return groups;\n-    }\n-\n-    public String replace(String term, String replacement) {\n-        initMatcher(term);\n-        if (globalFlag) {\n-            return matcher.replaceAll(replacement);\n-        } else {\n-            return matcher.replaceFirst(replacement);\n-        }\n-    }\n-\n-    private void initMatcher(String term) {\n-        if (matcher == null) {\n-            matcher = pattern.matcher(term);\n-        } else {\n-            matcher.reset(term);\n-        }\n-    }\n+public final class RegexpFlagsHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNTUxNg==", "bodyText": "Are all arguments String? If so the generic definition could be changed, eliminating the casts here.", "url": "https://github.com/crate/crate/pull/10104#discussion_r460835516", "createdAt": "2020-07-27T11:51:48Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/scalar/regex/RegexpReplaceFunction.java", "diffHunk": "@@ -89,35 +94,32 @@ public Signature boundSignature() {\n \n     @Override\n     public Symbol normalizeSymbol(Function function, TransactionContext txnCtx) {\n-        List<Symbol> arguments = function.arguments();\n-        final int size = arguments.size();\n+        List<Symbol> args = function.arguments();\n+        final int size = args.size();\n         assert size == 3 || size == 4 : \"function's number of arguments must be 3 or 4\";\n-\n-        if (anyNonLiterals(arguments)) {\n+        if (anyNonLiterals(args)) {\n             return function;\n         }\n-\n-        final Input input = (Input) arguments.get(0);\n-        final Input pattern = (Input) arguments.get(1);\n-        final Input replacement = (Input) arguments.get(2);\n-        final String inputValue = (String) input.value();\n-        final String patternValue = (String) pattern.value();\n-        final String replacementValue = (String) replacement.value();\n-        if (inputValue == null || patternValue == null || replacementValue == null) {\n+        final String value = ((Input<String>) args.get(0)).value();\n+        final String pattern = ((Input<String>) args.get(1)).value();\n+        final String replacement = ((Input<String>) args.get(2)).value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06af923fd9bedbea8473e02499b70ca337bfef5f"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b78cf193ee5dfe7e2486924d90e1374e1c60037c", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/b78cf193ee5dfe7e2486924d90e1374e1c60037c", "committedDate": "2020-07-27T13:09:53Z", "message": "Remove unused import"}, "afterCommit": {"oid": "1256fb015e12ee9c1d36990b558450bfd04ee723", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1256fb015e12ee9c1d36990b558450bfd04ee723", "committedDate": "2020-07-27T13:59:46Z", "message": "Make pattern final as requested by Ruslan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODQwNDE3", "url": "https://github.com/crate/crate/pull/10104#pullrequestreview-455840417", "createdAt": "2020-07-27T14:32:39Z", "commit": {"oid": "1256fb015e12ee9c1d36990b558450bfd04ee723"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMjozOVrOG3lOpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDozMzo0NFrOG3lRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNDgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this example the ``pattern``does not match anything in the ``source`` and the result\n          \n          \n            \n            In this example the ``pattern`` does not match anything in the ``source`` and the result", "url": "https://github.com/crate/crate/pull/10104#discussion_r460934820", "createdAt": "2020-07-27T14:32:39Z", "author": {"login": "kovrus"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -198,6 +198,149 @@ arrays within the same level.\n     +---+\n     SELECT 2 rows in set (... sec)\n \n+.. _table-functions-regexp-matches:\n+\n+``regexp_matches(source, pattern [, flags])``\n+=============================================\n+\n+Uses the regular expression ``pattern`` to match against the ``source`` string.\n+\n+The result rows have one column:\n+\n+.. list-table::\n+    :header-rows: 1\n+\n+    * - Column name\n+      - Description\n+    * - groups\n+      - ``array(text)``\n+\n+If ``pattern`` matches ``source``, an array of the matched regular expression\n+groups is returned.\n+\n+If no regular expression group was used, the whole pattern is used as a group.\n+\n+A regular expression group is formed by a subexpression that is surrounded by\n+parentheses. The position of a group is determined by the position of its\n+opening parenthesis.\n+\n+For example when matching the pattern ``\\b([A-Z])`` a match for the\n+subexpression ``([A-Z])`` would create group No. 1. If you want to group items\n+with parentheses, but without grouping, use ``(?...)``.\n+\n+For example matching the regular expression ``([Aa](.+)z)`` against\n+``alcatraz``, results in these groups:\n+\n+ * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n+ * group 2: ``lcatra`` (beginning at second parenthesis)\n+\n+The ``regexp_matches`` function will return all groups as a ``text`` array::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n+    +------------------------+\n+    | matched                |\n+    +------------------------+\n+    | [\"alcatraz\", \"lcatra\"] |\n+    +------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', 'traz') as matched;\n+    +----------+\n+    | matched  |\n+    +----------+\n+    | [\"traz\"] |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n+\n+Through array element access functionality, a group can be selected directly.\n+See :ref:`sql_dql_object_arrays_select` for details.\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n+    +--------------+\n+    | second_group |\n+    +--------------+\n+    | lcatra       |\n+    +--------------+\n+    SELECT 1 row in set (... sec)\n+\n+.. _table-functions-regexp-matches-flags:\n+\n+Flags\n+.....\n+\n+This function takes a number of flags as optional third parameter. These flags\n+are given as a string containing any of the characters listed below. Order does\n+not matter.\n+\n++-------+---------------------------------------------------------------------+\n+| Flag  | Description                                                         |\n++=======+=====================================================================+\n+| ``i`` | enable case insensitive matching                                    |\n++-------+---------------------------------------------------------------------+\n+| ``u`` | enable unicode case folding when used together with ``i``           |\n++-------+---------------------------------------------------------------------+\n+| ``U`` | enable unicode support for character classes like ``\\W``            |\n++-------+---------------------------------------------------------------------+\n+| ``s`` | make ``.`` match line terminators, too                              |\n++-------+---------------------------------------------------------------------+\n+| ``m`` | make ``^`` and ``$`` match on the beginning or end of a line        |\n+|       | too.                                                                |\n++-------+---------------------------------------------------------------------+\n+| ``x`` | permit whitespace and line comments starting with ``#``             |\n++-------+---------------------------------------------------------------------+\n+| ``d`` | only ``\\n`` is considered a line-terminator when using ``^``, ``$`` |\n+|       | and ``.``                                                           |\n++-------+---------------------------------------------------------------------+\n+| ``g`` | keep matching until the end of ``source``, instead of stopping at   |\n+|       | the first match.                                                    |\n++-------+---------------------------------------------------------------------+\n+\n+\n+Examples\n+........\n+\n+In this example the ``pattern``does not match anything in the ``source`` and the result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1256fb015e12ee9c1d36990b558450bfd04ee723"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkzNTYyNw==", "bodyText": "isn't this example about using the flags or their combination?", "url": "https://github.com/crate/crate/pull/10104#discussion_r460935627", "createdAt": "2020-07-27T14:33:44Z", "author": {"login": "kovrus"}, "path": "docs/general/builtins/table-functions.rst", "diffHunk": "@@ -198,6 +198,149 @@ arrays within the same level.\n     +---+\n     SELECT 2 rows in set (... sec)\n \n+.. _table-functions-regexp-matches:\n+\n+``regexp_matches(source, pattern [, flags])``\n+=============================================\n+\n+Uses the regular expression ``pattern`` to match against the ``source`` string.\n+\n+The result rows have one column:\n+\n+.. list-table::\n+    :header-rows: 1\n+\n+    * - Column name\n+      - Description\n+    * - groups\n+      - ``array(text)``\n+\n+If ``pattern`` matches ``source``, an array of the matched regular expression\n+groups is returned.\n+\n+If no regular expression group was used, the whole pattern is used as a group.\n+\n+A regular expression group is formed by a subexpression that is surrounded by\n+parentheses. The position of a group is determined by the position of its\n+opening parenthesis.\n+\n+For example when matching the pattern ``\\b([A-Z])`` a match for the\n+subexpression ``([A-Z])`` would create group No. 1. If you want to group items\n+with parentheses, but without grouping, use ``(?...)``.\n+\n+For example matching the regular expression ``([Aa](.+)z)`` against\n+``alcatraz``, results in these groups:\n+\n+ * group 1: ``alcatraz`` (from first to last parenthesis or whole pattern)\n+ * group 2: ``lcatra`` (beginning at second parenthesis)\n+\n+The ``regexp_matches`` function will return all groups as a ``text`` array::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)') as matched;\n+    +------------------------+\n+    | matched                |\n+    +------------------------+\n+    | [\"alcatraz\", \"lcatra\"] |\n+    +------------------------+\n+    SELECT 1 row in set (... sec)\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', 'traz') as matched;\n+    +----------+\n+    | matched  |\n+    +----------+\n+    | [\"traz\"] |\n+    +----------+\n+    SELECT 1 row in set (... sec)\n+\n+Through array element access functionality, a group can be selected directly.\n+See :ref:`sql_dql_object_arrays_select` for details.\n+\n+::\n+\n+    cr> select regexp_matches('alcatraz', '(a(.+)z)')[2] as second_group;\n+    +--------------+\n+    | second_group |\n+    +--------------+\n+    | lcatra       |\n+    +--------------+\n+    SELECT 1 row in set (... sec)\n+\n+.. _table-functions-regexp-matches-flags:\n+\n+Flags\n+.....\n+\n+This function takes a number of flags as optional third parameter. These flags\n+are given as a string containing any of the characters listed below. Order does\n+not matter.\n+\n++-------+---------------------------------------------------------------------+\n+| Flag  | Description                                                         |\n++=======+=====================================================================+\n+| ``i`` | enable case insensitive matching                                    |\n++-------+---------------------------------------------------------------------+\n+| ``u`` | enable unicode case folding when used together with ``i``           |\n++-------+---------------------------------------------------------------------+\n+| ``U`` | enable unicode support for character classes like ``\\W``            |\n++-------+---------------------------------------------------------------------+\n+| ``s`` | make ``.`` match line terminators, too                              |\n++-------+---------------------------------------------------------------------+\n+| ``m`` | make ``^`` and ``$`` match on the beginning or end of a line        |\n+|       | too.                                                                |\n++-------+---------------------------------------------------------------------+\n+| ``x`` | permit whitespace and line comments starting with ``#``             |\n++-------+---------------------------------------------------------------------+\n+| ``d`` | only ``\\n`` is considered a line-terminator when using ``^``, ``$`` |\n+|       | and ``.``                                                           |\n++-------+---------------------------------------------------------------------+\n+| ``g`` | keep matching until the end of ``source``, instead of stopping at   |\n+|       | the first match.                                                    |\n++-------+---------------------------------------------------------------------+\n+\n+\n+Examples\n+........\n+\n+In this example the ``pattern``does not match anything in the ``source`` and the result\n+is an empty table:\n+\n+::\n+\n+    cr> select regexp_matches('foobar', '^(a(.+)z)$') as matched;\n+    +---------+\n+    | matched |\n+    +---------+\n+    +---------+\n+    SELECT 0 rows in set (... sec)\n+\n+In this example we find the term that follows two digits:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1256fb015e12ee9c1d36990b558450bfd04ee723"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c25c7441730c9b85f221644f487189ef303106cd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c25c7441730c9b85f221644f487189ef303106cd", "committedDate": "2020-07-27T14:44:40Z", "message": "Add support for global flag 'g' to now tabular function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match. The postgres specification defines this\nfunction as a table function."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1256fb015e12ee9c1d36990b558450bfd04ee723", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/1256fb015e12ee9c1d36990b558450bfd04ee723", "committedDate": "2020-07-27T13:59:46Z", "message": "Make pattern final as requested by Ruslan"}, "afterCommit": {"oid": "c25c7441730c9b85f221644f487189ef303106cd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/c25c7441730c9b85f221644f487189ef303106cd", "committedDate": "2020-07-27T14:44:40Z", "message": "Add support for global flag 'g' to now tabular function regexp_matches\n\nTo find all matches in a source of the given pattern instead of\nstopping at the first match. The postgres specification defines this\nfunction as a table function."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3292, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}