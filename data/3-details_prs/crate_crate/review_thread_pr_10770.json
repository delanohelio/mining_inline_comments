{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTc5MDQ4", "number": 10770, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo0OTowMlrOE4U15A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozOTozOVrOE57k3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDk3MTg4OnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/window-functions.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo0OTowMlrOHyLeZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTo1NzozNFrOHyn7uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3ODg1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Within each partition, the rank of the first row is 1. Subsequent identical\n          \n          \n            \n            Within each partition, the rank of the first row is `1`. Subsequent identical", "url": "https://github.com/crate/crate/pull/10770#discussion_r522378853", "createdAt": "2020-11-12T19:49:02Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/window-functions.rst", "diffHunk": "@@ -607,6 +607,55 @@ Example::\n    +---------+------+--------+-------------+\n    SELECT 5 rows in set (... sec)\n \n+\n+.. _window-function-rank:\n+\n+``rank()``\n+----------\n+\n+.. note::\n+\n+    The ``rank`` window function is an :ref:`enterprise feature\n+    <enterprise-features>`.\n+\n+Synopsis\n+........\n+\n+::\n+\n+    rank()\n+\n+Returns the rank of every row within a partition of a result set.\n+\n+Within each partition, the rank of the first row is 1. Subsequent identical", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8f2d9e700ec19dacfd262a6581fead0566ea0ce"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0NTExMg==", "bodyText": "oops this should be double backticks sorry!", "url": "https://github.com/crate/crate/pull/10770#discussion_r522845112", "createdAt": "2020-11-13T09:57:34Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/window-functions.rst", "diffHunk": "@@ -607,6 +607,55 @@ Example::\n    +---------+------+--------+-------------+\n    SELECT 5 rows in set (... sec)\n \n+\n+.. _window-function-rank:\n+\n+``rank()``\n+----------\n+\n+.. note::\n+\n+    The ``rank`` window function is an :ref:`enterprise feature\n+    <enterprise-features>`.\n+\n+Synopsis\n+........\n+\n+::\n+\n+    rank()\n+\n+Returns the rank of every row within a partition of a result set.\n+\n+Within each partition, the rank of the first row is 1. Subsequent identical", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3ODg1Mw=="}, "originalCommit": {"oid": "f8f2d9e700ec19dacfd262a6581fead0566ea0ce"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc1MzgxOnYy", "diffSide": "RIGHT", "path": "enterprise/functions/src/main/java/io/crate/window/RankFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyODowNFrOH0rzbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyODowNFrOH0rzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTY3Ng==", "bodyText": "Could these be int to avoid boxing?", "url": "https://github.com/crate/crate/pull/10770#discussion_r525005676", "createdAt": "2020-11-17T09:28:04Z", "author": {"login": "mfussenegger"}, "path": "enterprise/functions/src/main/java/io/crate/window/RankFunctions.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This file is part of a module with proprietary Enterprise Features.\n+ *\n+ * Licensed to Crate.io Inc. (\"Crate.io\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.\n+ *\n+ * Unauthorized copying of this file, via any medium is strictly prohibited.\n+ *\n+ * To use this file, Crate.io must have given you permission to enable and\n+ * use such Enterprise Features and you must have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  If you enable or use the Enterprise\n+ * Features, you represent and warrant that you have a valid Enterprise or\n+ * Subscription Agreement with Crate.io.  Your use of the Enterprise Features\n+ * if governed by the terms and conditions of your Enterprise or Subscription\n+ * Agreement with Crate.io.\n+ */\n+\n+package io.crate.window;\n+\n+import io.crate.data.Input;\n+import io.crate.data.Row;\n+import io.crate.execution.engine.collect.CollectExpression;\n+import io.crate.execution.engine.window.WindowFrameState;\n+import io.crate.execution.engine.window.WindowFunction;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.module.EnterpriseFunctionsModule;\n+import io.crate.types.DataTypes;\n+\n+import java.util.List;\n+\n+\n+public class RankFunctions implements WindowFunction {\n+\n+    private static final String RANK_NAME = \"rank\";\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+    private Integer seenLastUpperBound;\n+    private Integer rank;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10d6b1e8202e13f0681e0bd9418a744b7e03b56"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTgwMzgxOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/window-functions.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozOTozOVrOH0sShQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo0MzoyN1rOH0scYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMzYzNw==", "bodyText": "Do you think it would help users if we used some more realistic data set to also illustrate a common use case for the rank function?\nFor example, in https://www.sqltutorial.org/sql-window-functions/sql-rank/ they rank the salary.", "url": "https://github.com/crate/crate/pull/10770#discussion_r525013637", "createdAt": "2020-11-17T09:39:39Z", "author": {"login": "mfussenegger"}, "path": "docs/general/builtins/window-functions.rst", "diffHunk": "@@ -607,6 +607,56 @@ Example::\n    +---------+------+--------+-------------+\n    SELECT 5 rows in set (... sec)\n \n+\n+.. _window-function-rank:\n+\n+``rank()``\n+----------\n+\n+.. note::\n+\n+    The ``rank`` window function is an :ref:`enterprise feature\n+    <enterprise-features>`.\n+\n+Synopsis\n+........\n+\n+::\n+\n+    rank()\n+\n+Returns the rank of every row within a partition of a result set.\n+\n+Within each partition, the rank of the first row is ``1``. Subsequent tied\n+rows are given the same rank, and the potential rank of the next row\n+is incremented. Because of this, ranks may not be sequential.\n+\n+Example::\n+\n+    cr> SELECT\n+    ...   col1,\n+    ...   col2,\n+    ...   RANK() OVER (ORDER BY col1) as rank\n+    ... FROM (VALUES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10d6b1e8202e13f0681e0bd9418a744b7e03b56"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNjE2MA==", "bodyText": "Yeah, that's a good idea! Will do so.", "url": "https://github.com/crate/crate/pull/10770#discussion_r525016160", "createdAt": "2020-11-17T09:43:27Z", "author": {"login": "autophagy"}, "path": "docs/general/builtins/window-functions.rst", "diffHunk": "@@ -607,6 +607,56 @@ Example::\n    +---------+------+--------+-------------+\n    SELECT 5 rows in set (... sec)\n \n+\n+.. _window-function-rank:\n+\n+``rank()``\n+----------\n+\n+.. note::\n+\n+    The ``rank`` window function is an :ref:`enterprise feature\n+    <enterprise-features>`.\n+\n+Synopsis\n+........\n+\n+::\n+\n+    rank()\n+\n+Returns the rank of every row within a partition of a result set.\n+\n+Within each partition, the rank of the first row is ``1``. Subsequent tied\n+rows are given the same rank, and the potential rank of the next row\n+is incremented. Because of this, ranks may not be sequential.\n+\n+Example::\n+\n+    cr> SELECT\n+    ...   col1,\n+    ...   col2,\n+    ...   RANK() OVER (ORDER BY col1) as rank\n+    ... FROM (VALUES", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMzYzNw=="}, "originalCommit": {"oid": "b10d6b1e8202e13f0681e0bd9418a744b7e03b56"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}