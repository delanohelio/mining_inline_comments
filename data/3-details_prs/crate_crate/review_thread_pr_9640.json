{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTcwNjky", "number": 9640, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozMjowMlrODeitnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozMjowMlrODeitnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzUyNjA3OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzozMjowMlrOFnvCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo1NzozOVrOFoEs6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTQzNg==", "bodyText": "lgtm\njust a side note, this function is also registered for interval and timestamp types. not sure if it makes sense.", "url": "https://github.com/crate/crate/pull/9640#discussion_r377209436", "createdAt": "2020-02-10T17:32:02Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "diffHunk": "@@ -109,15 +110,20 @@ public static void register(ScalarFunctionModule module) {\n             (arg0, arg1) -> arg0 / arg1,\n             (arg0, arg1) -> arg0 / arg1\n         ));\n-        module.register(Names.MODULUS, new ArithmeticFunctionResolver(\n-            Names.MODULUS,\n-            \"%\",\n-            FunctionInfo.DETERMINISTIC_ONLY,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1\n-        ));\n+\n+        java.util.function.Function<String, ArithmeticFunctionResolver> modFunctionResolverFactory =\n+            name -> new ArithmeticFunctionResolver(\n+                name,\n+                \"%\",\n+                FunctionInfo.DETERMINISTIC_ONLY,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1\n+            );\n+\n+        module.register(Names.MODULUS, modFunctionResolverFactory.apply(Names.MODULUS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b50bd4a43e6f011db78bc4f10de729c36655a6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDM5Mg==", "bodyText": "Yes good point, also even if not making sense it won't brake. We could remove that support later on if you think we should.", "url": "https://github.com/crate/crate/pull/9640#discussion_r377564392", "createdAt": "2020-02-11T10:57:39Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/arithmetic/ArithmeticFunctions.java", "diffHunk": "@@ -109,15 +110,20 @@ public static void register(ScalarFunctionModule module) {\n             (arg0, arg1) -> arg0 / arg1,\n             (arg0, arg1) -> arg0 / arg1\n         ));\n-        module.register(Names.MODULUS, new ArithmeticFunctionResolver(\n-            Names.MODULUS,\n-            \"%\",\n-            FunctionInfo.DETERMINISTIC_ONLY,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1,\n-            (arg0, arg1) -> arg0 % arg1\n-        ));\n+\n+        java.util.function.Function<String, ArithmeticFunctionResolver> modFunctionResolverFactory =\n+            name -> new ArithmeticFunctionResolver(\n+                name,\n+                \"%\",\n+                FunctionInfo.DETERMINISTIC_ONLY,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1,\n+                (arg0, arg1) -> arg0 % arg1\n+            );\n+\n+        module.register(Names.MODULUS, modFunctionResolverFactory.apply(Names.MODULUS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTQzNg=="}, "originalCommit": {"oid": "c6b50bd4a43e6f011db78bc4f10de729c36655a6"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}