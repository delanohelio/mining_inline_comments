{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODYzMzQ0", "number": 10499, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozMDo0NlrOEhP35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozMDo0NlrOEhP35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjk4NTMyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/BlobHeadRequestHandlerTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozMDo0NlrOHOdQWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDoyNzo1MlrOHOf3RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyMTQzNQ==", "bodyText": "Is this used? I did not find any usage of it", "url": "https://github.com/crate/crate/pull/10499#discussion_r484921435", "createdAt": "2020-09-08T13:30:46Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/BlobHeadRequestHandlerTests.java", "diffHunk": "@@ -45,15 +33,62 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.util.concurrent.EsExecutors;\n+import org.elasticsearch.test.ClusterServiceUtils;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.CapturingTransport;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.transport.TransportResponse;\n+import org.elasticsearch.transport.TransportService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.crate.blob.BlobTransferTarget;\n+import io.crate.blob.DigestBlob;\n+import io.crate.blob.transfer.HeadChunkFileTooSmallException;\n+import io.crate.blob.transfer.PutHeadChunkRunnable;\n \n public class BlobHeadRequestHandlerTests extends ESTestCase {\n \n+    private ThreadPool threadPool;\n+    private CapturingTransport transport;\n+    private ClusterService clusterService;\n+    private TransportService transportService;\n+\n+    @Before\n+    public void setUpResources() throws Exception {\n+        threadPool = new TestThreadPool(getClass().getName());\n+        transport = new CapturingTransport() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba8a6ce2122ee408a9d408bcf75ca360af02b38"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0NDc0NQ==", "bodyText": "Couple lines below:\ntransportService = transport.createTransportService(\nbut could turn it into a local variable", "url": "https://github.com/crate/crate/pull/10499#discussion_r484944745", "createdAt": "2020-09-08T14:01:41Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/BlobHeadRequestHandlerTests.java", "diffHunk": "@@ -45,15 +33,62 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.util.concurrent.EsExecutors;\n+import org.elasticsearch.test.ClusterServiceUtils;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.CapturingTransport;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.transport.TransportResponse;\n+import org.elasticsearch.transport.TransportService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.crate.blob.BlobTransferTarget;\n+import io.crate.blob.DigestBlob;\n+import io.crate.blob.transfer.HeadChunkFileTooSmallException;\n+import io.crate.blob.transfer.PutHeadChunkRunnable;\n \n public class BlobHeadRequestHandlerTests extends ESTestCase {\n \n+    private ThreadPool threadPool;\n+    private CapturingTransport transport;\n+    private ClusterService clusterService;\n+    private TransportService transportService;\n+\n+    @Before\n+    public void setUpResources() throws Exception {\n+        threadPool = new TestThreadPool(getClass().getName());\n+        transport = new CapturingTransport() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyMTQzNQ=="}, "originalCommit": {"oid": "aba8a6ce2122ee408a9d408bcf75ca360af02b38"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2NDE2NA==", "bodyText": "thx. read it multiple times but couldn't find it \ud83e\udd26\nlocal var sounds good.", "url": "https://github.com/crate/crate/pull/10499#discussion_r484964164", "createdAt": "2020-09-08T14:27:52Z", "author": {"login": "seut"}, "path": "server/src/test/java/io/crate/BlobHeadRequestHandlerTests.java", "diffHunk": "@@ -45,15 +33,62 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n+import org.elasticsearch.Version;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.util.concurrent.EsExecutors;\n+import org.elasticsearch.test.ClusterServiceUtils;\n+import org.elasticsearch.test.ESTestCase;\n+import org.elasticsearch.test.transport.CapturingTransport;\n+import org.elasticsearch.threadpool.TestThreadPool;\n+import org.elasticsearch.threadpool.ThreadPool;\n+import org.elasticsearch.transport.TransportRequest;\n+import org.elasticsearch.transport.TransportResponse;\n+import org.elasticsearch.transport.TransportService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import io.crate.blob.BlobTransferTarget;\n+import io.crate.blob.DigestBlob;\n+import io.crate.blob.transfer.HeadChunkFileTooSmallException;\n+import io.crate.blob.transfer.PutHeadChunkRunnable;\n \n public class BlobHeadRequestHandlerTests extends ESTestCase {\n \n+    private ThreadPool threadPool;\n+    private CapturingTransport transport;\n+    private ClusterService clusterService;\n+    private TransportService transportService;\n+\n+    @Before\n+    public void setUpResources() throws Exception {\n+        threadPool = new TestThreadPool(getClass().getName());\n+        transport = new CapturingTransport() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyMTQzNQ=="}, "originalCommit": {"oid": "aba8a6ce2122ee408a9d408bcf75ca360af02b38"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1213, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}