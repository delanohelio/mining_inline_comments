{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODQ1NjAx", "number": 9817, "title": "Allow the definition of check constraints in ALTER ADD COLUMN statements", "bodyText": "With the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data.", "createdAt": "2020-03-27T16:16:07Z", "url": "https://github.com/crate/crate/pull/9817", "merged": true, "mergeCommit": {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7"}, "closed": true, "closedAt": "2020-03-31T09:26:21Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSVVO3gBqjMxNzU2Nzk0MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS_pJggBqjMxODIzNzQwNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d991af275713e4cf4c026ac0ce6dd219a97d9647", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/d991af275713e4cf4c026ac0ce6dd219a97d9647", "committedDate": "2020-03-27T16:12:12Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "a61c7d5206282eb40119bd7324d7be131ba302f9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a61c7d5206282eb40119bd7324d7be131ba302f9", "committedDate": "2020-03-29T08:07:47Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a61c7d5206282eb40119bd7324d7be131ba302f9", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a61c7d5206282eb40119bd7324d7be131ba302f9", "committedDate": "2020-03-29T08:07:47Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}, "afterCommit": {"oid": "4ff5d8bbf373dfad4d156b0cc55fe92cb9eb7ed7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/4ff5d8bbf373dfad4d156b0cc55fe92cb9eb7ed7", "committedDate": "2020-03-30T13:29:46Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzODkzNDYx", "url": "https://github.com/crate/crate/pull/9817#pullrequestreview-383893461", "createdAt": "2020-03-30T14:10:27Z", "commit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMDoyN1rOF9rncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDoxM1rOF9sE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjA2NQ==", "bodyText": "Please don't mutate AST structures,  they can be cached via prepared statements and should be immutable", "url": "https://github.com/crate/crate/pull/9817#discussion_r400222065", "createdAt": "2020-03-30T14:10:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -72,6 +86,12 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n         // convert and validate the column name\n         ExpressionToColumnIdentVisitor.convert(tableElement.name());\n \n+        // 1st phase, exclude check constraints (their expressions contain column references)\n+        List<ColumnConstraint<Expression>> checkColumnConstraints = tableElement.constraints()\n+            .stream()\n+            .filter(CheckColumnConstraint.class::isInstance)\n+            .collect(Collectors.toList());\n+        tableElement.constraints().removeAll(checkColumnConstraints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNDAzOA==", "bodyText": "Could use Lists2.map", "url": "https://github.com/crate/crate/pull/9817#discussion_r400224038", "createdAt": "2020-03-30T14:13:01Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AlterTableAddColumnAnalyzer.java", "diffHunk": "@@ -82,8 +102,66 @@ public AnalyzedAlterTableAddColumn analyze(AlterTableAddColumn<Expression> alter\n             x -> exprAnalyzerWithReferenceResolver.convert(x, exprCtx));\n         AnalyzedTableElements<Symbol> analyzedTableElementsWithExpressions = TableElementsAnalyzer.analyze(\n             singletonList(addColumnDefinitionWithExpression), tableInfo.ident(), tableInfo);\n+        // now analyze possible check expressions\n+        var checkColumnConstraintsAnalyzer = new ExpressionAnalyzer(\n+            functions,\n+            txnCtx,\n+            paramTypeHints,\n+            new SelfReferenceFieldProvider(\n+                tableInfo.ident(), referenceResolver, analyzedTableElementsWithExpressions.columns()),\n+            null);\n+        List<ColumnConstraint<Symbol>> analyzedCheckColumnConstraints = checkColumnConstraints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNjkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // exposed for testing\n          \n          \n            \n                @VisibleForTesting", "url": "https://github.com/crate/crate/pull/9817#discussion_r400226925", "createdAt": "2020-03-30T14:16:41Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNzUzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();\n          \n          \n            \n                    return Map.<String, String>copyOf(checkConstraints);", "url": "https://github.com/crate/crate/pull/9817#discussion_r400227530", "createdAt": "2020-03-30T14:17:27Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/AnalyzedTableElements.java", "diffHunk": "@@ -591,14 +592,19 @@ private static String uniqueCheckConstraintName(String fqTableName, @Nullable St\n         return sb.toString();\n     }\n \n-    public void addCheckConstraint(RelationName relationName, CheckConstraint check) {\n+    public void addCheckConstraint(RelationName relationName, CheckConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n-    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint check) {\n+    public void addCheckColumnConstraint(RelationName relationName, CheckColumnConstraint<?> check) {\n         addCheckConstraint(relationName.fqn(), check.columnName(), check.name(), check.expressionStr());\n     }\n \n+    // exposed for testing\n+    Map<String, String> getCheckConstraints() {\n+        return ImmutableMap.<String, String>builder().putAll(checkConstraints).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTI2OA==", "bodyText": "Maybe use Maps.getByPath", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229268", "createdAt": "2020-03-30T14:19:44Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/analyze/CreateAlterTableStatementAnalyzerTest.java", "diffHunk": "@@ -1204,6 +1214,52 @@ private void assertDuplicatePrimaryKey(String stmt) {\n         }\n     }\n \n+    @Test\n+    public void testCreateTableWithCheckConstraints() {\n+        String stmt = \"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\";\n+        BoundCreateTable analysis = analyze(stmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+    }\n+\n+    @Test\n+    public void testAlterTableAddColumnWithCheckConstraint() throws Exception {\n+        SQLExecutor executor = SQLExecutor.builder(clusterService)\n+            .addTable(\"create table t (\" +\n+                      \"    id int primary key, \" +\n+                      \"    qty int constraint check_qty_gt_zero check(qty > 0), \" +\n+                      \"    constraint check_id_ge_zero check (id >= 0)\" +\n+                      \")\")\n+            .build();\n+        String alterStmt = \"alter table t add column bazinga int constraint bazinga_check check(bazinga != 42);\";\n+        BoundAddColumn analysis = analyze(alterStmt);\n+        Map<String, Object> mapping = analysis.mapping();\n+        Map<String, String> checkConstraints = analysis.analyzedTableElements().getCheckConstraints();\n+        assertEquals(checkConstraints.get(\"check_id_ge_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_id_ge_zero\"));\n+        assertEquals(checkConstraints.get(\"check_qty_gt_zero\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"check_qty_gt_zero\"));\n+        assertEquals(checkConstraints.get(\"bazinga_check\"),\n+                     fetchMapping(mapping, \"_meta\", \"check_constraints\", \"bazinga_check\"));\n+    }\n+\n+    private static String fetchMapping(Map<String, Object> root, String... path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTYyNw==", "bodyText": "This could be an analyzer test. No execution layer necessary.", "url": "https://github.com/crate/crate/pull/9817#discussion_r400229627", "createdAt": "2020-03-30T14:20:13Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/integrationtests/DDLIntegrationTest.java", "diffHunk": "@@ -356,6 +356,24 @@ public void test_create_table_with_check_fail_on_update() {\n         execute(\"update t set qty = -1 where id = 0\");\n     }\n \n+    @Test\n+    public void test_alter_table_add_column_fails_because_check_constaint_refers_to_other_columns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2fa42a352e1088026d392ce622adbe0b8ad306"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5604b81dfe4626bb861a7c52d3d6c9987d382fd", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a5604b81dfe4626bb861a7c52d3d6c9987d382fd", "committedDate": "2020-03-30T17:38:08Z", "message": "Add various improvements suggested by Jordi"}, "afterCommit": {"oid": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/01d01e4ba5c194e1d504bc97bb22a689adf69396", "committedDate": "2020-03-30T19:02:29Z", "message": "Add various improvements suggested by Jordi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NDc5NzY1", "url": "https://github.com/crate/crate/pull/9817#pullrequestreview-384479765", "createdAt": "2020-03-31T07:48:15Z", "commit": {"oid": "01d01e4ba5c194e1d504bc97bb22a689adf69396"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ba79d7684a5466e009082ff7fe26490695ce3bc7", "committedDate": "2020-03-31T09:25:27Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01d01e4ba5c194e1d504bc97bb22a689adf69396", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/01d01e4ba5c194e1d504bc97bb22a689adf69396", "committedDate": "2020-03-30T19:02:29Z", "message": "Add various improvements suggested by Jordi"}, "afterCommit": {"oid": "ba79d7684a5466e009082ff7fe26490695ce3bc7", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/ba79d7684a5466e009082ff7fe26490695ce3bc7", "committedDate": "2020-03-31T09:25:27Z", "message": "Allow the definition of check constraints in ALTER ADD COLUMN statements\n\nWith the caveat that such check constraints can only refer to the column\nbeing defined, to not invalidate existing data."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3455, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}