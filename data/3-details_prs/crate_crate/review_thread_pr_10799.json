{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODkyNTc2", "number": 10799, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDowMlrOE8YmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1Nzo0N1rOE8qpAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzUzMDcyOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDowMlrOH4eNZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDowMlrOH4eNZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The first part is addressed by index 1.\n          \n          \n            \n            The first part is addressed by index ``1``.", "url": "https://github.com/crate/crate/pull/10799#discussion_r528977254", "createdAt": "2020-11-23T20:30:02Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -663,6 +663,39 @@ Returns: ``text``\n    +--------+\n    SELECT 1 row in set (... sec)\n \n+\n+``split_part(text, text, integer)``\n+-----------------------------------\n+\n+Splits a string into parts using a delimiter and returns the part at the given index.\n+The first part is addressed by index 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704beaad96eef145e7b7fac00f3d2fe73cbddec6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzUzMjQzOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDoyNlrOH4eOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDozMDoyNlrOH4eOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * If the delimiter is the empty string, then the input string is considered as consisting of exactly one part.\n          \n          \n            \n            * If the delimiter is the empty string, the input string is considered as consisting of exactly one part.", "url": "https://github.com/crate/crate/pull/10799#discussion_r528977495", "createdAt": "2020-11-23T20:30:26Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -663,6 +663,39 @@ Returns: ``text``\n    +--------+\n    SELECT 1 row in set (... sec)\n \n+\n+``split_part(text, text, integer)``\n+-----------------------------------\n+\n+Splits a string into parts using a delimiter and returns the part at the given index.\n+The first part is addressed by index 1.\n+\n+Special Cases:\n+\n+* Returns the empty string if the index is greater than the number of parts.\n+* If any of the arguments is ``NULL``, the result is ``NULL``.\n+* If the delimiter is the empty string, then the input string is considered as consisting of exactly one part.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704beaad96eef145e7b7fac00f3d2fe73cbddec6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDQ1NDE1OnYy", "diffSide": "RIGHT", "path": "docs/appendices/release-notes/unreleased.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MzoxN1rOH47ANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MzoxN1rOH47ANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0OTAxMw==", "bodyText": "Please add this to the CHANGES section. Additionally, our pattern is to add new things on top of the list.", "url": "https://github.com/crate/crate/pull/10799#discussion_r529449013", "createdAt": "2020-11-24T10:53:17Z", "author": {"login": "seut"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -108,3 +108,5 @@ Fixes\n \n - Fixed an issue that led to an error if a user nested multiple table\n   functions.\n+\n+- Added support for the ``split_part`` scalar function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDQ3MjIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/scalar/string/StringSplitPartFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1NTo0N1rOH47MCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzo0NDozMlrOH5mnTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1MjA0MQ==", "bodyText": "minor: I think naming this var occurrence or positional makes it more clear.", "url": "https://github.com/crate/crate/pull/10799#discussion_r529452041", "createdAt": "2020-11-24T10:55:47Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/scalar/string/StringSplitPartFunction.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+/**\n+ * String split_part(String text, String delimiter, Integer field)\n+ * <p>\n+ * Splits a text on delimiter and returns the and returns the part at index field (1 for the first part)\n+ */\n+public final class StringSplitPartFunction extends Scalar<String, Object> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\n+                \"split_part\",\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            StringSplitPartFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    public StringSplitPartFunction(Signature signature, Signature boundSignature) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<Object>[] args) {\n+        assert args.length == 3 : \"split_part takes exactly three arguments\";\n+        var text = (String) args[0].value();\n+        var delimiter = (String) args[1].value();\n+        var fieldB = (Integer) args[2].value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MDQ5OQ==", "bodyText": "It is named field in the PostgreSQL documentation. I changed it to index for the Crate documentation but used field in the implementation. I just pushed a change to use index everywhere. If you prefer occurrence or positional I can also change it to that.", "url": "https://github.com/crate/crate/pull/10799#discussion_r529740499", "createdAt": "2020-11-24T17:10:22Z", "author": {"login": "peterzeller"}, "path": "server/src/main/java/io/crate/expression/scalar/string/StringSplitPartFunction.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+/**\n+ * String split_part(String text, String delimiter, Integer field)\n+ * <p>\n+ * Splits a text on delimiter and returns the and returns the part at index field (1 for the first part)\n+ */\n+public final class StringSplitPartFunction extends Scalar<String, Object> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\n+                \"split_part\",\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            StringSplitPartFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    public StringSplitPartFunction(Signature signature, Signature boundSignature) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<Object>[] args) {\n+        assert args.length == 3 : \"split_part takes exactly three arguments\";\n+        var text = (String) args[0].value();\n+        var delimiter = (String) args[1].value();\n+        var fieldB = (Integer) args[2].value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1MjA0MQ=="}, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MzUzMg==", "bodyText": "\ud83d\udc4d index sounds also fine.", "url": "https://github.com/crate/crate/pull/10799#discussion_r530163532", "createdAt": "2020-11-25T07:44:32Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/expression/scalar/string/StringSplitPartFunction.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.expression.scalar.string;\n+\n+import io.crate.data.Input;\n+import io.crate.expression.scalar.ScalarFunctionModule;\n+import io.crate.metadata.NodeContext;\n+import io.crate.metadata.Scalar;\n+import io.crate.metadata.TransactionContext;\n+import io.crate.metadata.functions.Signature;\n+import io.crate.types.DataTypes;\n+\n+/**\n+ * String split_part(String text, String delimiter, Integer field)\n+ * <p>\n+ * Splits a text on delimiter and returns the and returns the part at index field (1 for the first part)\n+ */\n+public final class StringSplitPartFunction extends Scalar<String, Object> {\n+\n+    public static void register(ScalarFunctionModule module) {\n+        module.register(\n+            Signature.scalar(\n+                \"split_part\",\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature(),\n+                DataTypes.INTEGER.getTypeSignature(),\n+                DataTypes.STRING.getTypeSignature()\n+            ),\n+            StringSplitPartFunction::new\n+        );\n+    }\n+\n+    private final Signature signature;\n+    private final Signature boundSignature;\n+\n+    public StringSplitPartFunction(Signature signature, Signature boundSignature) {\n+        this.signature = signature;\n+        this.boundSignature = boundSignature;\n+    }\n+\n+    @Override\n+    public String evaluate(TransactionContext txnCtx, NodeContext nodeCtx, Input<Object>[] args) {\n+        assert args.length == 3 : \"split_part takes exactly three arguments\";\n+        var text = (String) args[0].value();\n+        var delimiter = (String) args[1].value();\n+        var fieldB = (Integer) args[2].value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1MjA0MQ=="}, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDQ4NjQyOnYy", "diffSide": "RIGHT", "path": "docs/general/builtins/scalar.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1Nzo0N1rOH47VSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NToyMlrOH49ebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1NDQxMA==", "bodyText": "I think we usually only add 1 empty line after each section, guess @mechanomi has a strong opinion here ;-)", "url": "https://github.com/crate/crate/pull/10799#discussion_r529454410", "createdAt": "2020-11-24T10:57:47Z", "author": {"login": "seut"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -663,6 +663,39 @@ Returns: ``text``\n    +--------+\n    SELECT 1 row in set (... sec)\n \n+\n+``split_part(text, text, integer)``\n+-----------------------------------\n+\n+Splits a string into parts using a delimiter and returns the part at the given index.\n+The first part is addressed by index ``1``.\n+\n+Special Cases:\n+\n+* Returns the empty string if the index is greater than the number of parts.\n+* If any of the arguments is ``NULL``, the result is ``NULL``.\n+* If the delimiter is the empty string, the input string is considered as consisting of exactly one part.\n+\n+Returns: ``text``\n+\n+Synopsis::\n+\n+    split_part(string, delimiter, index)\n+\n+Example::\n+\n+   cr> select split_part('ab--cdef--gh', '--', 2) AS part;\n+   +------+\n+   | part |\n+   +------+\n+   | cdef |\n+   +------+\n+   SELECT 1 row in set (... sec)\n+\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTUxNw==", "bodyText": "good catch! two empty new lines before every header :)\ncf. https://github.com/crate/crate-docs/blob/master/style/rst.rst#heading-line-spacings", "url": "https://github.com/crate/crate/pull/10799#discussion_r529489517", "createdAt": "2020-11-24T11:55:22Z", "author": {"login": "norosa"}, "path": "docs/general/builtins/scalar.rst", "diffHunk": "@@ -663,6 +663,39 @@ Returns: ``text``\n    +--------+\n    SELECT 1 row in set (... sec)\n \n+\n+``split_part(text, text, integer)``\n+-----------------------------------\n+\n+Splits a string into parts using a delimiter and returns the part at the given index.\n+The first part is addressed by index ``1``.\n+\n+Special Cases:\n+\n+* Returns the empty string if the index is greater than the number of parts.\n+* If any of the arguments is ``NULL``, the result is ``NULL``.\n+* If the delimiter is the empty string, the input string is considered as consisting of exactly one part.\n+\n+Returns: ``text``\n+\n+Synopsis::\n+\n+    split_part(string, delimiter, index)\n+\n+Example::\n+\n+   cr> select split_part('ab--cdef--gh', '--', 2) AS part;\n+   +------+\n+   | part |\n+   +------+\n+   | cdef |\n+   +------+\n+   SELECT 1 row in set (... sec)\n+\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1NDQxMA=="}, "originalCommit": {"oid": "857170d6c007d3d5acef524810d98bdf0820bd1b"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 924, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}