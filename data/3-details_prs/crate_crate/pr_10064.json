{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODQ1MDc3", "number": 10064, "title": "Add the `regproc` alias data type.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-06-09T14:41:44Z", "url": "https://github.com/crate/crate/pull/10064", "merged": true, "mergeCommit": {"oid": "46071db1e15273ba9f13ab9228481f022dda2752"}, "closed": true, "closedAt": "2020-06-10T15:10:32Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpmKzPAFqTQyNzIyNzM5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp6oBRgBqjM0Mjk5NjM3NzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjI3Mzkx", "url": "https://github.com/crate/crate/pull/10064#pullrequestreview-427227391", "createdAt": "2020-06-09T14:45:10Z", "commit": {"oid": "4cecc73f430c8a499e61d1acac61a1b797ac277c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NToxMFrOGhNqxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0NToxMFrOGhNqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4MDEzNA==", "bodyText": "'<text>'::regproc in PostgreSQL the cast function will try to look up for the function that corresponds to the string literal. For now, I allowed this cast but it just creates a Regproc object with oid and name, should we forbid the text to regproc cast or keep it?", "url": "https://github.com/crate/crate/pull/10064#discussion_r437480134", "createdAt": "2020-06-09T14:45:10Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+import static io.crate.metadata.pgcatalog.OidHash.functionOid;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 20;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());\n+        } else if (value instanceof String) {\n+            var name = (String) value;\n+            return Regproc.of(functionOid(name), name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cecc73f430c8a499e61d1acac61a1b797ac277c"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4cecc73f430c8a499e61d1acac61a1b797ac277c", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/4cecc73f430c8a499e61d1acac61a1b797ac277c", "committedDate": "2020-06-09T13:52:49Z", "message": "wip: Add the pg `regproc` data type."}, "afterCommit": {"oid": "c20e483937214d8c090a5105b13070eee87c5b47", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/c20e483937214d8c090a5105b13070eee87c5b47", "committedDate": "2020-06-09T14:58:33Z", "message": "wip: Add the pg `regproc` data type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c20e483937214d8c090a5105b13070eee87c5b47", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/c20e483937214d8c090a5105b13070eee87c5b47", "committedDate": "2020-06-09T14:58:33Z", "message": "wip: Add the pg `regproc` data type."}, "afterCommit": {"oid": "ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "committedDate": "2020-06-09T15:28:53Z", "message": "wip: Add the pg `regproc` data type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ff0b60f0ef58f9ebf50a10d54fb0bfb4d90b1f1e", "committedDate": "2020-06-09T15:28:53Z", "message": "wip: Add the pg `regproc` data type."}, "afterCommit": {"oid": "ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "committedDate": "2020-06-09T15:31:32Z", "message": "wip: Add the pg `regproc` data type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ce97915c03e94bac9c6c8fd38bdab2e65d93c32d", "committedDate": "2020-06-09T15:31:32Z", "message": "wip: Add the pg `regproc` data type."}, "afterCommit": {"oid": "3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "committedDate": "2020-06-09T15:41:12Z", "message": "wip: Add the pg `regproc` data type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3d447035cc84ed9a8cd676aeb209cbe9e2a7a7fc", "committedDate": "2020-06-09T15:41:12Z", "message": "wip: Add the pg `regproc` data type."}, "afterCommit": {"oid": "505e55a9afcf5764a1eca7d6b42e5b367d04e199", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/505e55a9afcf5764a1eca7d6b42e5b367d04e199", "committedDate": "2020-06-10T08:46:30Z", "message": "Use regproc type for correspodning columns in pg_catalog tables."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "505e55a9afcf5764a1eca7d6b42e5b367d04e199", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/505e55a9afcf5764a1eca7d6b42e5b367d04e199", "committedDate": "2020-06-10T08:46:30Z", "message": "Use regproc type for correspodning columns in pg_catalog tables."}, "afterCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/34edce8f8e1521c49f37df822fa63193b29835d5", "committedDate": "2020-06-10T11:26:12Z", "message": "Document the `regproc` data type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3OTg3NTM3", "url": "https://github.com/crate/crate/pull/10064#pullrequestreview-427987537", "createdAt": "2020-06-10T12:10:24Z", "commit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoxMDoyNFrOGhx0xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjoyMjowMFrOGhyNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MjUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For compatibil  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n          \n          \n            \n            For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "url": "https://github.com/crate/crate/pull/10064#discussion_r438072519", "createdAt": "2020-06-10T12:10:24Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -155,7 +155,7 @@ following tables:\n Some clients require the ``pg_catalog.pg_type`` in order to be able to stream\n arrays or other non-primitive types.\n \n-For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n+For compatibil  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MzM5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            tables. The ``oid`` type is currently mapped to the CrateDB internal the\n          \n          \n            \n            four-byte :ref:`integer <data-type-numeric>` data type.\n          \n          \n            \n            tables. The ``oid`` type is currently mapped to the :ref:`integer <data-type-numeric>` data type", "url": "https://github.com/crate/crate/pull/10064#discussion_r438073397", "createdAt": "2020-06-10T12:12:04Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -196,14 +198,31 @@ table available in CrateDB::\n     | 2277 | anyarray                     |        0 |    2276 |     -1 | p       | P           |\n     | 2287 | _record                      |        0 |    2249 |     -1 | p       | A           |\n     +------+------------------------------+----------+---------+--------+---------+-------------+\n-    SELECT 31 rows in set (... sec)\n+    SELECT 33 rows in set (... sec)\n \n .. NOTE::\n \n    This is just a snapshot of the table.\n    Check table :ref:`information_schema.columns <information_schema_columns>`\n    to get information for all supported columns.\n \n+.. _postgres_pg_oid:\n+\n+Object Identifier Types\n+~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Object identifiers are used internally by PostgreSQL for various system\n+tables. The ``oid`` type is currently mapped to the CrateDB internal the\n+four-byte :ref:`integer <data-type-numeric>` data type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NzM4OA==", "bodyText": "Shouldn't the name here be the function-name instead of the oid as string? We'd need some kind of reverse lookup, right?", "url": "https://github.com/crate/crate/pull/10064#discussion_r438077388", "createdAt": "2020-06-10T12:19:21Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/protocols/postgres/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.protocols.postgres.types;\n+\n+import io.crate.types.Regproc;\n+import io.netty.buffer.ByteBuf;\n+\n+import javax.annotation.Nonnull;\n+import java.nio.charset.StandardCharsets;\n+\n+class RegprocType extends PGType<Regproc> {\n+\n+    static final int OID = 24;\n+\n+    private static final int TYPE_LEN = 4;\n+    private static final int TYPE_MOD = -1;\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+\n+    private RegprocType() {\n+        super(OID, TYPE_LEN, TYPE_MOD, \"regproc\");\n+    }\n+\n+    @Override\n+    public int typArray() {\n+        return PGArray.REGPROC_ARRAY.oid();\n+    }\n+\n+    @Override\n+    public String typeCategory() {\n+        return TypeCategory.NUMERIC.code();\n+    }\n+\n+    @Override\n+    public String type() {\n+        return Type.BASE.code();\n+    }\n+\n+    @Override\n+    public int writeAsBinary(ByteBuf buffer, @Nonnull Regproc value) {\n+        buffer.writeInt(TYPE_LEN);\n+        buffer.writeInt(value.oid());\n+        return INT32_BYTE_SIZE + TYPE_LEN;\n+    }\n+\n+    @Override\n+    public Regproc readBinaryValue(ByteBuf buffer, int valueLength) {\n+        var oid = buffer.readInt();\n+        return Regproc.of(oid, String.valueOf(oid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3ODg1OA==", "bodyText": "Same here", "url": "https://github.com/crate/crate/pull/10064#discussion_r438078858", "createdAt": "2020-06-10T12:22:00Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/RegprocType.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to CRATE Technology GmbH (\"Crate\") under one or more contributor\n+ * license agreements.  See the NOTICE file distributed with this work for\n+ * additional information regarding copyright ownership.  Crate licenses\n+ * this file to you under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.Streamer;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import java.io.IOException;\n+\n+public class RegprocType extends DataType<Regproc> implements Streamer<Regproc> {\n+\n+    public static final RegprocType INSTANCE = new RegprocType();\n+    public static final int ID = 19;\n+\n+    @Override\n+    public int id() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public Precedence precedence() {\n+        return Precedence.REGPROC;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"regproc\";\n+    }\n+\n+    @Override\n+    public Streamer<Regproc> streamer() {\n+        return this;\n+    }\n+\n+    @Override\n+    public Regproc implicitCast(Object value) throws IllegalArgumentException, ClassCastException {\n+        if (value == null) {\n+            return null;\n+        }\n+        if (value instanceof Integer) {\n+            return Regproc.of((int) value, value.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDA2Nzk0", "url": "https://github.com/crate/crate/pull/10064#pullrequestreview-428006794", "createdAt": "2020-06-10T12:36:14Z", "commit": {"oid": "34edce8f8e1521c49f37df822fa63193b29835d5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2107dcc7189d5e79b9d98ad3a42f03808171fe1e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/2107dcc7189d5e79b9d98ad3a42f03808171fe1e", "committedDate": "2020-06-10T12:37:43Z", "message": "fixup! Document the `regproc` data type."}, "afterCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7", "committedDate": "2020-06-10T13:19:49Z", "message": "fixup! Document the `regproc` data type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDgzNDAx", "url": "https://github.com/crate/crate/pull/10064#pullrequestreview-428083401", "createdAt": "2020-06-10T14:00:28Z", "commit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowMDoyOFrOGh2P5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNDozOFrOGh2bpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0NDk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For compatibility  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n          \n          \n            \n            For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "url": "https://github.com/crate/crate/pull/10064#discussion_r438144999", "createdAt": "2020-06-10T14:00:28Z", "author": {"login": "mfussenegger"}, "path": "docs/interfaces/postgres.rst", "diffHunk": "@@ -155,7 +155,7 @@ following tables:\n Some clients require the ``pg_catalog.pg_type`` in order to be able to stream\n arrays or other non-primitive types.\n \n-For compatibility reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__\n+For compatibility  ity reasons, there is a trimmed down `pg_type <pgsql_pg_type_>`__", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }\n          \n          \n            \n                public static Regproc of(int oid, @Nonnull String name) {\n          \n          \n            \n                    // To match PostgreSQL behavior 1:1 this would need to lookup the\n          \n          \n            \n                    // function name by oid and fallback to using the oid as name if there is\n          \n          \n            \n                    // no match.\n          \n          \n            \n            \n          \n          \n            \n                    // It looks like for compatibility with clients it is good enough\n          \n          \n            \n                    // to not mirror this behavior\n          \n          \n            \n                    return new Regproc(oid, name);\n          \n          \n            \n                }", "url": "https://github.com/crate/crate/pull/10064#discussion_r438148007", "createdAt": "2020-06-10T14:04:38Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/types/Regproc.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+import io.crate.metadata.pgcatalog.OidHash;\n+\n+import javax.annotation.Nonnull;\n+import java.util.Objects;\n+\n+public class Regproc {\n+\n+    private final int oid;\n+    private final String name;\n+\n+    public static Regproc of(@Nonnull String name) {\n+        return new Regproc(OidHash.functionOid(name), name);\n+    }\n+\n+    public static Regproc of(int oid, @Nonnull String name) {\n+        return new Regproc(oid, name);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fcf04c7d3d54b5707670f52ebcc48b7e0a98f7"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTEzMTYx", "url": "https://github.com/crate/crate/pull/10064#pullrequestreview-428113161", "createdAt": "2020-06-10T14:29:19Z", "commit": {"oid": "e0893a0c87a6efa9df39a7fe2c08143c18ecd13a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6de210a6c04f139a95773a16dd5cb75265ca93dd", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6de210a6c04f139a95773a16dd5cb75265ca93dd", "committedDate": "2020-06-10T14:35:00Z", "message": "Add the CrateDB internal `regproc` data type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07935c25fd9202f49d490b4ea569f1777701d85c", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/07935c25fd9202f49d490b4ea569f1777701d85c", "committedDate": "2020-06-10T14:35:00Z", "message": "Add the `regproc` type size estimator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d091774d6c173b2586a122c4663e63076c1f2276", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d091774d6c173b2586a122c4663e63076c1f2276", "committedDate": "2020-06-10T14:35:00Z", "message": "Add the Postgresql `regproc` data type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebe35c7aa0170c4fe3262944394229635492e900", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/ebe35c7aa0170c4fe3262944394229635492e900", "committedDate": "2020-06-10T14:35:00Z", "message": "Use regproc type for correspodning columns in pg_catalog tables."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6d35782046737a4691af1e42a7295bfd2328bf", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0f6d35782046737a4691af1e42a7295bfd2328bf", "committedDate": "2020-06-10T14:35:00Z", "message": "Document the `regproc` data type."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0893a0c87a6efa9df39a7fe2c08143c18ecd13a", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/e0893a0c87a6efa9df39a7fe2c08143c18ecd13a", "committedDate": "2020-06-10T14:07:49Z", "message": "fixup! Add the CrateDB internal `regproc` data type."}, "afterCommit": {"oid": "0f6d35782046737a4691af1e42a7295bfd2328bf", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/0f6d35782046737a4691af1e42a7295bfd2328bf", "committedDate": "2020-06-10T14:35:00Z", "message": "Document the `regproc` data type."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3256, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}