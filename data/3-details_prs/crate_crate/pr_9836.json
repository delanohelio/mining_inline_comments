{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTQ1ODc1", "number": 9836, "title": "Refactor cast scalars to use new function registry.", "bodyText": "Summary of the changes / Why this improves CrateDB\nChecklist\n\n Added an entry in CHANGES.txt for user facing changes\n Updated documentation & sql_features table for user facing changes\n Touched code is covered by tests\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-03-31T19:22:44Z", "url": "https://github.com/crate/crate/pull/9836", "merged": true, "mergeCommit": {"oid": "25ada36f58803016d61dd9c8918c3f33d709b2bb"}, "closed": true, "closedAt": "2020-04-02T11:54:05Z", "author": {"login": "kovrus"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTTbL4AFqTM4NTM2Nzg4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTqgjogH2gAyMzk2NTQ1ODc1OjZjY2Y0Y2ZmYTMyNzVhYjc4OTBhMWFhMjBiZWJkYzQ0ODM4MjdjMzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzY3ODgw", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-385367880", "createdAt": "2020-04-01T08:28:31Z", "commit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODozMlrOF-2CtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODoyODozMlrOF-2CtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA==", "bodyText": "I have not changed the second argument, such is I restrict it function.getValue().getTypeSignature() then we won't much a function that takes as the second argument an object type with inner types. the generic V for the second argument works in this case. I also tried to drop coercion and explicitly provide the type info for the second argument, but then it loses the inner type info.\nImho, i'd keep it like that. Anyways, this signature will be superseded later by smth like _cast(E, V) -> V", "url": "https://github.com/crate/crate/pull/9836#discussion_r401441460", "createdAt": "2020-04-01T08:28:32Z", "author": {"login": "kovrus"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Mzc2MDQx", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-385376041", "createdAt": "2020-04-01T08:39:30Z", "commit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTozMFrOF-2cdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODozOTozMFrOF-2cdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODA1NA==", "bodyText": "This should never happen. We should add an assertion.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448054", "createdAt": "2020-04-01T08:39:30Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -132,7 +132,13 @@ public String getBaseTypeName() {\n             var builder = ObjectType.builder();\n             for (int i = 0; i < parameters.size() - 1;) {\n                 var valTypeSignature = parameters.get(i + 1);\n-                builder.setInnerType(String.valueOf(i), valTypeSignature.createType());\n+                final String innerTypeName;\n+                if (valTypeSignature instanceof NamedTypeSignature) {\n+                    innerTypeName = ((NamedTypeSignature) valTypeSignature).parameterName();\n+                } else {\n+                    innerTypeName = String.valueOf(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Mzc2NDQx", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-385376441", "createdAt": "2020-04-01T08:40:02Z", "commit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDowMlrOF-2dmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDowMlrOF-2dmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODM0Ng==", "bodyText": "why is this removed?", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448346", "createdAt": "2020-04-01T08:40:02Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/TypeSignature.java", "diffHunk": "@@ -160,7 +166,7 @@ public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n         }\n-        if (o == null || getClass() != o.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Mzc3MDkz", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-385377093", "createdAt": "2020-04-01T08:40:55Z", "commit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDo1NVrOF-2ffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwODo0MDo1NVrOF-2ffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0ODgyOA==", "bodyText": "I would name this more concrete to avoid confusion. E.g. ObjectParameterTypeSignature.", "url": "https://github.com/crate/crate/pull/9836#discussion_r401448828", "createdAt": "2020-04-01T08:40:55Z", "author": {"login": "seut"}, "path": "common/src/main/java/io/crate/types/NamedTypeSignature.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.types;\n+\n+class NamedTypeSignature extends TypeSignature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15d9fd4546c92e50add6585c01a280d05225b1ed", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/15d9fd4546c92e50add6585c01a280d05225b1ed", "committedDate": "2020-04-01T09:30:37Z", "message": "fixup! fixup! Fix setting inner object type names in TypeSignature#createType."}, "afterCommit": {"oid": "3479a747d21a5ef4e413393b4a216af7dda24fd7", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3479a747d21a5ef4e413393b4a216af7dda24fd7", "committedDate": "2020-04-01T09:39:21Z", "message": "fixup! fixup! Fix setting inner object type names in TypeSignature#createType."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3479a747d21a5ef4e413393b4a216af7dda24fd7", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/3479a747d21a5ef4e413393b4a216af7dda24fd7", "committedDate": "2020-04-01T09:39:21Z", "message": "fixup! fixup! Fix setting inner object type names in TypeSignature#createType."}, "afterCommit": {"oid": "d034d6dcfa0806454413bf5ff6641e2a6c53d8e8", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/d034d6dcfa0806454413bf5ff6641e2a6c53d8e8", "committedDate": "2020-04-01T12:57:46Z", "message": "fixup! Fix setting inner object type names in TypeSignature#createType."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4abf9822fc15c3f8c516287d7467ed2d43e1571c", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/4abf9822fc15c3f8c516287d7467ed2d43e1571c", "committedDate": "2020-04-01T14:28:53Z", "message": "fixup! fixup! Fix setting inner object type names in TypeSignature#createType."}, "afterCommit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/35640168be01c9b30ee8014bec4ecb011a87be5e", "committedDate": "2020-04-01T14:30:15Z", "message": "Refactor cast scalars to use new function registry."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NjcwOTkx", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-385670991", "createdAt": "2020-04-01T14:59:13Z", "commit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDo1OToxM1rOF_Ewyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMDoyM1rOF_E0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MjYzNQ==", "bodyText": "What about my comment here?", "url": "https://github.com/crate/crate/pull/9836#discussion_r401682635", "createdAt": "2020-04-01T14:59:13Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ0MTQ2MA=="}, "originalCommit": {"oid": "1673de337564c7832395418ce0bedb9b64863392"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MzQwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)\n          \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(),\n          \n          \n            \n                              DataTypes.STRING)", "url": "https://github.com/crate/crate/pull/9836#discussion_r401683406", "createdAt": "2020-04-01T15:00:10Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "diffHunk": "@@ -239,15 +241,19 @@ public void testMap() {\n             .build();\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"text\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MzU4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.LONG)\n          \n          \n            \n                                .setInnerType(\"V\", DataTypes.LONG).build(),\n          \n          \n            \n                              DataTypes.LONG)", "url": "https://github.com/crate/crate/pull/9836#discussion_r401683585", "createdAt": "2020-04-01T15:00:23Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/metadata/functions/SignatureBinderTest.java", "diffHunk": "@@ -239,15 +241,19 @@ public void testMap() {\n             .build();\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"text\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.STRING)\n             .produces(new BoundVariables(\n                 Map.of(\n                     \"K\", type(\"text\"),\n                     \"V\", type(\"bigint\"))\n             ));\n \n         assertThat(getValueFunction)\n-            .boundTo(\"object(text, bigint)\", \"bigint\")\n+            .boundTo(\n+                ObjectType.builder()\n+                    .setInnerType(\"V\", DataTypes.LONG).build(), DataTypes.LONG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35640168be01c9b30ee8014bec4ecb011a87be5e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f432a8381470f7e33bc5b878e10a404d06d3e16", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/6f432a8381470f7e33bc5b878e10a404d06d3e16", "committedDate": "2020-04-02T09:05:11Z", "message": "Fix setting inner object type names in TypeSignature#createType."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "committedDate": "2020-04-02T09:05:11Z", "message": "Refactor cast scalars to use new function registry."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/834fd948c16a864fd524497a5572d1ed8f7dac22", "committedDate": "2020-04-01T15:37:18Z", "message": "fixup! fixup! fixup! Fix setting inner object type names in TypeSignature#createType."}, "afterCommit": {"oid": "fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "committedDate": "2020-04-02T09:05:11Z", "message": "Refactor cast scalars to use new function registry."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjM1Njc4", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-386235678", "createdAt": "2020-04-02T09:03:49Z", "commit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzo1MFrOF_h8Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowMzo1MFrOF_h8Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MDY2Nw==", "bodyText": "this check can be removed, the signature binder will already take care of this (if not its a bug ;-).", "url": "https://github.com/crate/crate/pull/9836#discussion_r402160667", "createdAt": "2020-04-02T09:03:50Z", "author": {"login": "seut"}, "path": "sql/src/main/java/io/crate/expression/scalar/cast/CastFunction.java", "diffHunk": "@@ -28,26 +28,119 @@\n import io.crate.expression.symbol.Function;\n import io.crate.expression.symbol.Literal;\n import io.crate.expression.symbol.Symbol;\n-import io.crate.metadata.BaseFunctionResolver;\n import io.crate.metadata.FunctionIdent;\n-import io.crate.metadata.FunctionImplementation;\n import io.crate.metadata.FunctionInfo;\n+import io.crate.metadata.FunctionName;\n import io.crate.metadata.Scalar;\n import io.crate.metadata.TransactionContext;\n-import io.crate.metadata.functions.params.FuncParams;\n-import io.crate.metadata.functions.params.Param;\n+import io.crate.metadata.functions.Signature;\n import io.crate.types.DataType;\n-import io.crate.types.UndefinedType;\n \n-import java.util.List;\n import java.util.Map;\n import java.util.function.BiFunction;\n \n import static io.crate.expression.scalar.cast.CastFunctionResolver.CAST_SIGNATURES;\n import static io.crate.expression.scalar.cast.CastFunctionResolver.TRY_CAST_PREFIX;\n+import static io.crate.metadata.functions.TypeVariableConstraint.typeVariable;\n+import static io.crate.types.TypeSignature.parseTypeSignature;\n \n public class CastFunction extends Scalar<Object, Object> {\n \n+    public static void register(ScalarFunctionModule module) {\n+        // We still maintain the cast function to type mapping to stay\n+        // bwc by keeping the old `to_<type>` and `try_<type>` function signatures.\n+        //\n+        // We can drop the per type cast function already in 4.2. This change\n+        // would require handling the metadata for the places where the old\n+        // signature of the cast function were used, e.g. generated columns.\n+        for (Map.Entry<String, DataType> function : CAST_SIGNATURES.entrySet()) {\n+            module.register(\n+                Signature.builder()\n+                    .name(new FunctionName(null, function.getKey()))\n+                    .kind(FunctionInfo.Type.SCALAR)\n+                    .typeVariableConstraints(typeVariable(\"E\"), typeVariable(\"V\"))\n+                    .argumentTypes(parseTypeSignature(\"E\"), parseTypeSignature(\"V\"))\n+                    .returnType(function.getValue().getTypeSignature())\n+                    .forbidCoercion()\n+                    .build(),\n+                args -> {\n+                    DataType<?> sourceType = args.get(0);\n+                    DataType<?> targetType = args.get(1);\n+                    if (!sourceType.isConvertableTo(targetType)) {\n+                        throw new ConversionException(sourceType, targetType);\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834fd948c16a864fd524497a5572d1ed8f7dac22"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "072e8ba82fe2ffd5cd9aba3357d2075a64d1d0f0", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/072e8ba82fe2ffd5cd9aba3357d2075a64d1d0f0", "committedDate": "2020-04-02T10:25:22Z", "message": "fixup! Refactor cast scalars to use new function registry."}, "afterCommit": {"oid": "fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "author": {"user": {"login": "kovrus", "name": "Ruslan Kovalov"}}, "url": "https://github.com/crate/crate/commit/fb9b93f591f0442f4c4450dfe0b5b8df5149e30d", "committedDate": "2020-04-02T09:05:11Z", "message": "Refactor cast scalars to use new function registry."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MzExOTcz", "url": "https://github.com/crate/crate/pull/9836#pullrequestreview-386311973", "createdAt": "2020-04-02T10:50:29Z", "commit": {"oid": "fb9b93f591f0442f4c4450dfe0b5b8df5149e30d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ccf4cffa3275ab7890a1aa20bebdc4483827c34", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/crate/crate/commit/6ccf4cffa3275ab7890a1aa20bebdc4483827c34", "committedDate": "2020-04-02T11:22:13Z", "message": "Merge branch 'master' into r/cast-reg"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3481, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}