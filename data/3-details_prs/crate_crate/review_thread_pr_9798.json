{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDc0MzYz", "number": 9798, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo0NDoyMFrODrIkqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo0NDoyMFrODrIkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTU1ODE2OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/io/crate/planner/operators/LogicalPlannerTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo0NDoyMFrOF7TEMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowNTozOVrOF7aCRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjY3NQ==", "bodyText": "Why is this limited to 8MB?", "url": "https://github.com/crate/crate/pull/9798#discussion_r397722675", "createdAt": "2020-03-25T09:44:20Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/planner/operators/LogicalPlannerTest.java", "diffHunk": "@@ -60,16 +56,17 @@\n \n     @Before\n     public void prepare() throws IOException {\n+        tableStats = new TableStats();\n         sqlExecutor = SQLExecutor.builder(clusterService)\n             .enableDefaultTables()\n+            .setTableStats(tableStats)\n             .addView(new RelationName(\"doc\", \"v2\"), \"select a, x from doc.t1\")\n             .addView(new RelationName(\"doc\", \"v3\"), \"select a, x from doc.t1\")\n             .build();\n-        tableStats = new TableStats();\n     }\n \n     private LogicalPlan plan(String statement) {\n-        return plan(statement, sqlExecutor, clusterService, tableStats);\n+        return withMemoryLimit(ByteSizeUnit.MB.toBytes(8), () -> sqlExecutor.logicalPlan(statement));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3f5d6d2650d7de84f5c587e6b7b77fe114dbc6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNTg2MA==", "bodyText": "Currently the plan method allocates around 5-7 MB. The intention here is to have a regression check to make sure we don't increase the allocations a lot and also to make us aware of what various methods are allocating. For example, the deleted block below caused an extra ~40MB to be allocated: (probably due to getFunctions())\nPlannerContext context = sqlExecutor.getPlannerContext(clusterService.state());\n        AnalyzedRelation relation = sqlExecutor.analyze(statement);\n        LogicalPlanner logicalPlanner = new LogicalPlanner(\n            getFunctions(),\n            tableStats,\n            () -> clusterService.state().nodes().getMinNodeVersion()\n        );\n        SubqueryPlanner subqueryPlanner = new SubqueryPlanner((s) -> logicalPlanner.planSubSelect(s, context));\n\nMaybe limit is the wrong term. Do you have a suggestion? assertLessBytesAllocated ?", "url": "https://github.com/crate/crate/pull/9798#discussion_r397725860", "createdAt": "2020-03-25T09:49:24Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/planner/operators/LogicalPlannerTest.java", "diffHunk": "@@ -60,16 +56,17 @@\n \n     @Before\n     public void prepare() throws IOException {\n+        tableStats = new TableStats();\n         sqlExecutor = SQLExecutor.builder(clusterService)\n             .enableDefaultTables()\n+            .setTableStats(tableStats)\n             .addView(new RelationName(\"doc\", \"v2\"), \"select a, x from doc.t1\")\n             .addView(new RelationName(\"doc\", \"v3\"), \"select a, x from doc.t1\")\n             .build();\n-        tableStats = new TableStats();\n     }\n \n     private LogicalPlan plan(String statement) {\n-        return plan(statement, sqlExecutor, clusterService, tableStats);\n+        return withMemoryLimit(ByteSizeUnit.MB.toBytes(8), () -> sqlExecutor.logicalPlan(statement));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjY3NQ=="}, "originalCommit": {"oid": "4f3f5d6d2650d7de84f5c587e6b7b77fe114dbc6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyODY1MA==", "bodyText": "I see thanks, yes wording was a bit confusing. I'd suggest assertMaxBytesAllocated.", "url": "https://github.com/crate/crate/pull/9798#discussion_r397728650", "createdAt": "2020-03-25T09:54:07Z", "author": {"login": "seut"}, "path": "sql/src/test/java/io/crate/planner/operators/LogicalPlannerTest.java", "diffHunk": "@@ -60,16 +56,17 @@\n \n     @Before\n     public void prepare() throws IOException {\n+        tableStats = new TableStats();\n         sqlExecutor = SQLExecutor.builder(clusterService)\n             .enableDefaultTables()\n+            .setTableStats(tableStats)\n             .addView(new RelationName(\"doc\", \"v2\"), \"select a, x from doc.t1\")\n             .addView(new RelationName(\"doc\", \"v3\"), \"select a, x from doc.t1\")\n             .build();\n-        tableStats = new TableStats();\n     }\n \n     private LogicalPlan plan(String statement) {\n-        return plan(statement, sqlExecutor, clusterService, tableStats);\n+        return withMemoryLimit(ByteSizeUnit.MB.toBytes(8), () -> sqlExecutor.logicalPlan(statement));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjY3NQ=="}, "originalCommit": {"oid": "4f3f5d6d2650d7de84f5c587e6b7b77fe114dbc6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzNjg2OA==", "bodyText": "@seut Changed it.", "url": "https://github.com/crate/crate/pull/9798#discussion_r397836868", "createdAt": "2020-03-25T13:05:39Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/planner/operators/LogicalPlannerTest.java", "diffHunk": "@@ -60,16 +56,17 @@\n \n     @Before\n     public void prepare() throws IOException {\n+        tableStats = new TableStats();\n         sqlExecutor = SQLExecutor.builder(clusterService)\n             .enableDefaultTables()\n+            .setTableStats(tableStats)\n             .addView(new RelationName(\"doc\", \"v2\"), \"select a, x from doc.t1\")\n             .addView(new RelationName(\"doc\", \"v3\"), \"select a, x from doc.t1\")\n             .build();\n-        tableStats = new TableStats();\n     }\n \n     private LogicalPlan plan(String statement) {\n-        return plan(statement, sqlExecutor, clusterService, tableStats);\n+        return withMemoryLimit(ByteSizeUnit.MB.toBytes(8), () -> sqlExecutor.logicalPlan(statement));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjY3NQ=="}, "originalCommit": {"oid": "4f3f5d6d2650d7de84f5c587e6b7b77fe114dbc6"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1547, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}