{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODMxMDM3", "number": 9746, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDozNjoyMFrODl0Wfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1Mzo0M1rODmODQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTgxNjMxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/SymbolicLinkPreservingUntarTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDozNjoyMFrOFy62og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDozNjoyMFrOFy62og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNzM3OA==", "bodyText": "taken from es code base without any amendments", "url": "https://github.com/crate/crate/pull/9746#discussion_r388937378", "createdAt": "2020-03-06T14:36:20Z", "author": {"login": "kovrus"}, "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/SymbolicLinkPreservingUntarTask.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.gradle.api.DefaultTask;\n+import org.gradle.api.GradleException;\n+import org.gradle.api.file.DirectoryProperty;\n+import org.gradle.api.file.RegularFileProperty;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.tasks.InputFile;\n+import org.gradle.api.tasks.Internal;\n+import org.gradle.api.tasks.OutputDirectory;\n+import org.gradle.api.tasks.TaskAction;\n+\n+import javax.inject.Inject;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+/**\n+ * A custom task that explodes a tar archive that preserves symbolic links.\n+ *\n+ * This task is necessary because the built-in task {@link org.gradle.api.internal.file.archive.TarFileTree} does not preserve symbolic\n+ * links.\n+ */\n+public class SymbolicLinkPreservingUntarTask extends DefaultTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6df69c3f292c80578197c9493ae00e3f7896afd2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDAyNDE3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1Mjo1OFrOFzgoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo1Mjo0NFrOFzo3Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NjM5NQ==", "bodyText": "Is this some gradle specific thing that this can't return a String directly?", "url": "https://github.com/crate/crate/pull/9746#discussion_r389556395", "createdAt": "2020-03-09T09:52:58Z", "author": {"login": "mfussenegger"}, "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.gradle.api.Buildable;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.tasks.TaskDependency;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class Jdk implements Buildable, Iterable<File> {\n+\n+    private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\");\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"linux\", \"windows\", \"mac\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\n+        \"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n+\n+    private final String name;\n+    private final Configuration configuration;\n+\n+    private final Property<String> vendor;\n+    private final Property<String> version;\n+    private final Property<String> platform;\n+    private String baseVersion;\n+    private String major;\n+    private String build;\n+    private String hash;\n+\n+    Jdk(String name, Configuration configuration, ObjectFactory objectFactory) {\n+        this.name = name;\n+        this.configuration = configuration;\n+        this.vendor = objectFactory.property(String.class);\n+        this.version = objectFactory.property(String.class);\n+        this.platform = objectFactory.property(String.class);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String vendor() {\n+        return vendor.get();\n+    }\n+\n+    public void setVendor(final String vendor) {\n+        if (!ALLOWED_VENDORS.contains(vendor)) {\n+            throw new IllegalArgumentException(\n+                \"unknown vendor [\" + vendor + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_VENDORS);\n+        }\n+        this.vendor.set(vendor);\n+    }\n+\n+    public String version() {\n+        return version.get();\n+    }\n+\n+    public void setVersion(String version) {\n+        var versionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!versionMatcher.matches()) {\n+            throw new IllegalArgumentException(\"malformed version [\" + version + \"] for jdk [\" + name + \"]\");\n+        }\n+        baseVersion = versionMatcher.group(1) + versionMatcher.group(2);\n+        major = versionMatcher.group(1);\n+        build = versionMatcher.group(3);\n+        hash = versionMatcher.group(5);\n+        this.version.set(version);\n+    }\n+\n+    public String platform() {\n+        return platform.get();\n+    }\n+\n+    public void setPlatform(String platform) {\n+        if (!ALLOWED_PLATFORMS.contains(platform)) {\n+            throw new IllegalArgumentException(\n+                \"unknown platform [\" + platform + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_PLATFORMS\n+            );\n+        }\n+        this.platform.set(platform);\n+    }\n+\n+    public String baseVersion() {\n+        return baseVersion;\n+    }\n+\n+    public String major() {\n+        return major;\n+    }\n+\n+    public String build() {\n+        return build;\n+    }\n+\n+    public String hash() {\n+        return hash;\n+    }\n+\n+    public String path() {\n+        return configuration.getSingleFile().toString();\n+    }\n+\n+    public Configuration configuration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return path();\n+    }\n+\n+    @Override\n+    public TaskDependency getBuildDependencies() {\n+        return configuration.getBuildDependencies();\n+    }\n+\n+    public Object getBinJavaPath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY5MTE2Nw==", "bodyText": "It doesn't work for some gradle reason. Seems like gradle relies on the toString call, e.g. https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getVersion-- But String also has toString, i am not sure, have to look a bit why it is the case.", "url": "https://github.com/crate/crate/pull/9746#discussion_r389691167", "createdAt": "2020-03-09T13:52:44Z", "author": {"login": "kovrus"}, "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.gradle.api.Buildable;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.tasks.TaskDependency;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class Jdk implements Buildable, Iterable<File> {\n+\n+    private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\");\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"linux\", \"windows\", \"mac\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\n+        \"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n+\n+    private final String name;\n+    private final Configuration configuration;\n+\n+    private final Property<String> vendor;\n+    private final Property<String> version;\n+    private final Property<String> platform;\n+    private String baseVersion;\n+    private String major;\n+    private String build;\n+    private String hash;\n+\n+    Jdk(String name, Configuration configuration, ObjectFactory objectFactory) {\n+        this.name = name;\n+        this.configuration = configuration;\n+        this.vendor = objectFactory.property(String.class);\n+        this.version = objectFactory.property(String.class);\n+        this.platform = objectFactory.property(String.class);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String vendor() {\n+        return vendor.get();\n+    }\n+\n+    public void setVendor(final String vendor) {\n+        if (!ALLOWED_VENDORS.contains(vendor)) {\n+            throw new IllegalArgumentException(\n+                \"unknown vendor [\" + vendor + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_VENDORS);\n+        }\n+        this.vendor.set(vendor);\n+    }\n+\n+    public String version() {\n+        return version.get();\n+    }\n+\n+    public void setVersion(String version) {\n+        var versionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!versionMatcher.matches()) {\n+            throw new IllegalArgumentException(\"malformed version [\" + version + \"] for jdk [\" + name + \"]\");\n+        }\n+        baseVersion = versionMatcher.group(1) + versionMatcher.group(2);\n+        major = versionMatcher.group(1);\n+        build = versionMatcher.group(3);\n+        hash = versionMatcher.group(5);\n+        this.version.set(version);\n+    }\n+\n+    public String platform() {\n+        return platform.get();\n+    }\n+\n+    public void setPlatform(String platform) {\n+        if (!ALLOWED_PLATFORMS.contains(platform)) {\n+            throw new IllegalArgumentException(\n+                \"unknown platform [\" + platform + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_PLATFORMS\n+            );\n+        }\n+        this.platform.set(platform);\n+    }\n+\n+    public String baseVersion() {\n+        return baseVersion;\n+    }\n+\n+    public String major() {\n+        return major;\n+    }\n+\n+    public String build() {\n+        return build;\n+    }\n+\n+    public String hash() {\n+        return hash;\n+    }\n+\n+    public String path() {\n+        return configuration.getSingleFile().toString();\n+    }\n+\n+    public Configuration configuration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return path();\n+    }\n+\n+    @Override\n+    public TaskDependency getBuildDependencies() {\n+        return configuration.getBuildDependencies();\n+    }\n+\n+    public Object getBinJavaPath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NjM5NQ=="}, "originalCommit": {"oid": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDAyNjg4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1Mzo0M1rOFzgqLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1Mzo0M1rOFzgqLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1Njc4Mw==", "bodyText": "Might re-use getJavaHome here", "url": "https://github.com/crate/crate/pull/9746#discussion_r389556783", "createdAt": "2020-03-09T09:53:43Z", "author": {"login": "mfussenegger"}, "path": "buildSrc/src/main/java/io/crate/gradle/plugins/jdk/Jdk.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.gradle.plugins.jdk;\n+\n+import org.gradle.api.Buildable;\n+import org.gradle.api.artifacts.Configuration;\n+import org.gradle.api.model.ObjectFactory;\n+import org.gradle.api.provider.Property;\n+import org.gradle.api.tasks.TaskDependency;\n+\n+import java.io.File;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class Jdk implements Buildable, Iterable<File> {\n+\n+    private static final List<String> ALLOWED_VENDORS = List.of(\"adoptopenjdk\");\n+    private static final List<String> ALLOWED_PLATFORMS = List.of(\"linux\", \"windows\", \"mac\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\n+        \"(\\\\d+)(\\\\.\\\\d+\\\\.\\\\d+)?\\\\+(\\\\d+(?:\\\\.\\\\d+)?)(@([a-f0-9]{32}))?\");\n+\n+    private final String name;\n+    private final Configuration configuration;\n+\n+    private final Property<String> vendor;\n+    private final Property<String> version;\n+    private final Property<String> platform;\n+    private String baseVersion;\n+    private String major;\n+    private String build;\n+    private String hash;\n+\n+    Jdk(String name, Configuration configuration, ObjectFactory objectFactory) {\n+        this.name = name;\n+        this.configuration = configuration;\n+        this.vendor = objectFactory.property(String.class);\n+        this.version = objectFactory.property(String.class);\n+        this.platform = objectFactory.property(String.class);\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String vendor() {\n+        return vendor.get();\n+    }\n+\n+    public void setVendor(final String vendor) {\n+        if (!ALLOWED_VENDORS.contains(vendor)) {\n+            throw new IllegalArgumentException(\n+                \"unknown vendor [\" + vendor + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_VENDORS);\n+        }\n+        this.vendor.set(vendor);\n+    }\n+\n+    public String version() {\n+        return version.get();\n+    }\n+\n+    public void setVersion(String version) {\n+        var versionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!versionMatcher.matches()) {\n+            throw new IllegalArgumentException(\"malformed version [\" + version + \"] for jdk [\" + name + \"]\");\n+        }\n+        baseVersion = versionMatcher.group(1) + versionMatcher.group(2);\n+        major = versionMatcher.group(1);\n+        build = versionMatcher.group(3);\n+        hash = versionMatcher.group(5);\n+        this.version.set(version);\n+    }\n+\n+    public String platform() {\n+        return platform.get();\n+    }\n+\n+    public void setPlatform(String platform) {\n+        if (!ALLOWED_PLATFORMS.contains(platform)) {\n+            throw new IllegalArgumentException(\n+                \"unknown platform [\" + platform + \"] for jdk [\" + name + \"], \" +\n+                \"must be one of \" + ALLOWED_PLATFORMS\n+            );\n+        }\n+        this.platform.set(platform);\n+    }\n+\n+    public String baseVersion() {\n+        return baseVersion;\n+    }\n+\n+    public String major() {\n+        return major;\n+    }\n+\n+    public String build() {\n+        return build;\n+    }\n+\n+    public String hash() {\n+        return hash;\n+    }\n+\n+    public String path() {\n+        return configuration.getSingleFile().toString();\n+    }\n+\n+    public Configuration configuration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return path();\n+    }\n+\n+    @Override\n+    public TaskDependency getBuildDependencies() {\n+        return configuration.getBuildDependencies();\n+    }\n+\n+    public Object getBinJavaPath() {\n+        return new Object() {\n+            @Override\n+            public String toString() {\n+                return path() + (\"mac\".equals(platform()) ? \"/Contents/Home\" : \"\") + \"/bin/java\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da80ed12a318ff4f2ab57732ec3b358e7e4818d3"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1636, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}