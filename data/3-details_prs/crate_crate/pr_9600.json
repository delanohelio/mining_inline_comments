{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDA5MDc1", "number": 9600, "title": "Add documentation for returning for insert", "bodyText": "Summary of the changes / Why this improves CrateDB\nThis adds the documentation for the returning clause for the insert statement to the documentation.\nChecklist\n\n User relevant changes are recorded in CHANGES.txt\n Touched code is covered by tests\n Documentation has been updated if necessary\n CLA is signed\n This does not contain breaking changes, or if it does:\n\nIt is released within a major release\nIt is recorded in CHANGES.txt\nIt was marked as deprecated in an earlier release if possible\nYou've thought about the consequences and other components are adapted\n(E.g. AdminUI)", "createdAt": "2020-01-30T10:57:33Z", "url": "https://github.com/crate/crate/pull/9600", "merged": true, "mergeCommit": {"oid": "a4da3baa62787b0eea2e03df0c0abda8f100253e"}, "closed": true, "closedAt": "2020-01-31T12:28:05Z", "author": {"login": "mkleen"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_aQ1wgFqTM1MDc0MTgyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_uOB_gFqTM1MTQ3MDgwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQxODI4", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350741828", "createdAt": "2020-01-30T11:04:41Z", "commit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowNDo0MVrOFjnLiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzowNzo1OVrOFjqPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NjQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The optional RETURNING clause causes INSERT to compute and return value(s)\n          \n          \n            \n            The optional ``RETURNING`` clause causes ``INSERT`` to compute and return value(s)\n          \n      \n    \n    \n  \n\nsame for the rest SQL keywords", "url": "https://github.com/crate/crate/pull/9600#discussion_r372886408", "createdAt": "2020-01-30T11:04:41Z", "author": {"login": "kovrus"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzMTYwMQ==", "bodyText": "Maybe rephrase it  a little bit, because it is not that obvious what the output list of SELECT and RETURNING list are. Maybe we can talk about expression items of the SELECT and RETURNING clauses or smth like that. On the other hand, do we even need to mention SELECT?", "url": "https://github.com/crate/crate/pull/9600#discussion_r372931601", "createdAt": "2020-01-30T12:56:34Z", "author": {"login": "kovrus"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)\n+based from each row actually inserted (or updated, if an ON CONFLICT DO UPDATE\n+clause was used). This is primarily useful for obtaining values that were\n+supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.\n+However, any expression using the table's columns is allowed. The syntax of\n+the RETURNING list is identical to that of the output list of SELECT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzNjU4OA==", "bodyText": "the grammar states this * | output_expression, but the param description states that output_expression can be * as well which is not right.", "url": "https://github.com/crate/crate/pull/9600#discussion_r372936588", "createdAt": "2020-01-30T13:07:59Z", "author": {"login": "kovrus"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -119,14 +137,22 @@ Parameters\n ==========\n \n :table_ident:\n-  The identifier (optionally schema-qualified) of an existing table.\n+    The identifier (optionally schema-qualified) of an existing table.\n \n :column_ident:\n-  The name of a column or field in the table pointed to by *table_ident*.\n+    The name of a column or field in the table pointed to by *table_ident*.\n \n :expression:\n-  An expression or value to assign to the corresponding column.\n+    An expression or value to assign to the corresponding column.\n \n :query:\n-  A query (SELECT statement) that supplies the rows to be inserted.\n-  Refer to the ``SELECT`` statement for a description of the syntax.\n+    A query (SELECT statement) that supplies the rows to be inserted.\n+    Refer to the ``SELECT`` statement for a description of the syntax.\n+\n+:output_expression:\n+    An expression to be computed and returned by the INSERT command after each\n+    row is updated. The expression can use any column names of the table or\n+    ``*`` to return all columns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODI0NjAx", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350824601", "createdAt": "2020-01-30T13:35:33Z", "commit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNTozM1rOFjrCgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozNTozM1rOFjrCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0OTYzNA==", "bodyText": "We don't have a WHERE clause for ON CONFLICT... , do we?", "url": "https://github.com/crate/crate/pull/9600#discussion_r372949634", "createdAt": "2020-01-30T13:35:33Z", "author": {"login": "mfussenegger"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)\n+based from each row actually inserted (or updated, if an ON CONFLICT DO UPDATE\n+clause was used). This is primarily useful for obtaining values that were\n+supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.\n+However, any expression using the table's columns is allowed. The syntax of\n+the RETURNING list is identical to that of the output list of SELECT.\n+Only rows that were successfully inserted or updated will be returned.\n+For example, if a row was locked but not updated because an\n+ON CONFLICT DO UPDATE ... WHERE clause condition was not satisfied, the row", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODI2NTY3", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350826567", "createdAt": "2020-01-30T13:38:22Z", "commit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozODoyM1rOFjrIqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozODoyM1rOFjrIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MTIxMQ==", "bodyText": "Isn't seq_no quite advanced already? I think the most popular and simple use-case is to return generated primary keys, e.g. _id or  md5(random()::text || current_timestamp::text)", "url": "https://github.com/crate/crate/pull/9600#discussion_r372951211", "createdAt": "2020-01-30T13:38:23Z", "author": {"login": "seut"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)\n+based from each row actually inserted (or updated, if an ON CONFLICT DO UPDATE\n+clause was used). This is primarily useful for obtaining values that were\n+supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODI3NjQ5", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350827649", "createdAt": "2020-01-30T13:39:55Z", "commit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozOTo1NVrOFjrLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzozOTo1NVrOFjrLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MjAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, if a row was locked but not updated because an\n          \n          \n            \n            For example, if a row was matched but not updated because an", "url": "https://github.com/crate/crate/pull/9600#discussion_r372952012", "createdAt": "2020-01-30T13:39:55Z", "author": {"login": "seut"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)\n+based from each row actually inserted (or updated, if an ON CONFLICT DO UPDATE\n+clause was used). This is primarily useful for obtaining values that were\n+supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.\n+However, any expression using the table's columns is allowed. The syntax of\n+the RETURNING list is identical to that of the output list of SELECT.\n+Only rows that were successfully inserted or updated will be returned.\n+For example, if a row was locked but not updated because an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODI4NTAy", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350828502", "createdAt": "2020-01-30T13:41:15Z", "commit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzo0MToxNVrOFjrOPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzo0MToxNVrOFjrOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk1MjYzNw==", "bodyText": "If you use the query clause to insert rows from a query, you of course need to have SELECT privilege on any table or column used in the query.\n\nThis is subselect related only and afaik documented there, so I'd not repeat it here", "url": "https://github.com/crate/crate/pull/9600#discussion_r372952637", "createdAt": "2020-01-30T13:41:15Z", "author": {"login": "seut"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,23 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional RETURNING clause causes INSERT to compute and return value(s)\n+based from each row actually inserted (or updated, if an ON CONFLICT DO UPDATE\n+clause was used). This is primarily useful for obtaining values that were\n+supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.\n+However, any expression using the table's columns is allowed. The syntax of\n+the RETURNING list is identical to that of the output list of SELECT.\n+Only rows that were successfully inserted or updated will be returned.\n+For example, if a row was locked but not updated because an\n+ON CONFLICT DO UPDATE ... WHERE clause condition was not satisfied, the row\n+will not be returned.\n+\n+Use of the RETURNING clause requires SELECT privilege on all columns mentioned\n+in RETURNING. If you use the query clause to insert rows from a query, you\n+of course need to have SELECT privilege on any table or column used in the\n+query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1b3cf65c9efd0c42c81c20fe1f2c037cc3eb0ac"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTcxOTk0", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-350971994", "createdAt": "2020-01-30T16:40:43Z", "commit": {"oid": "dfbbb96f2c416a74c0e7ca1064428d193582d529"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0MDo0M1rOFjx5EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0MDo0M1rOFjx5EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2MTkwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            mentioned in ``RETURNING``.\n          \n          \n            \n            involved.", "url": "https://github.com/crate/crate/pull/9600#discussion_r373061904", "createdAt": "2020-01-30T16:40:43Z", "author": {"login": "norosa"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -42,6 +43,17 @@ filled.\n If the expression for any column is not of the correct data type, automatic\n type conversion will be attempted.\n \n+The optional ``RETURNING`` clause causes ``INSERT`` to compute and return\n+value(s) based from each row actually inserted (or updated, if an ``ON\n+CONFLICT DO UPDATE`` clause was used). This is primarily useful for obtaining\n+values that were supplied by defaults, such as a :ref:`sequence number\n+<sql_administration_system_columns_seq_no>`.\n+However, any expression using the table's columns is allowed. The syntax of\n+the ``RETURNING`` list is identical to that of the output list of ``SELECT``.\n+Only rows that were successfully inserted or updated will be returned.\n+\n+Use of the ``RETURNING`` clause requires ``SELECT`` privilege on all columns\n+mentioned in ``RETURNING``.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfbbb96f2c416a74c0e7ca1064428d193582d529"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c518ee49613411a93558236f6a08c62ac4628c77", "author": {"user": {"login": "norosa", "name": "Naomi Rose"}}, "url": "https://github.com/crate/crate/commit/c518ee49613411a93558236f6a08c62ac4628c77", "committedDate": "2020-01-30T16:41:12Z", "message": "Update docs/sql/statements/insert.rst"}, "afterCommit": {"oid": "7fcb48313de047a2816e08bf1a0fd28c2f0af976", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/7fcb48313de047a2816e08bf1a0fd28c2f0af976", "committedDate": "2020-01-30T16:52:12Z", "message": "Add more feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f504560f368e8be885167164d88be7c287832ec0", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/f504560f368e8be885167164d88be7c287832ec0", "committedDate": "2020-01-31T07:50:44Z", "message": "Add more feedback"}, "afterCommit": {"oid": "6d1efa914cc13ca3e71c344fd58c5b0b7f78bba0", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/6d1efa914cc13ca3e71c344fd58c5b0b7f78bba0", "committedDate": "2020-01-31T07:57:11Z", "message": "Add feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d1efa914cc13ca3e71c344fd58c5b0b7f78bba0", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/6d1efa914cc13ca3e71c344fd58c5b0b7f78bba0", "committedDate": "2020-01-31T07:57:11Z", "message": "Add feedback"}, "afterCommit": {"oid": "973ab6027c91a973a9df1e5cee09a5ad86c15e3e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/973ab6027c91a973a9df1e5cee09a5ad86c15e3e", "committedDate": "2020-01-31T08:09:05Z", "message": "Add feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzYxNDM3", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-351361437", "createdAt": "2020-01-31T08:50:26Z", "commit": {"oid": "973ab6027c91a973a9df1e5cee09a5ad86c15e3e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo1MDoyNlrOFkEvBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwODo1MDoyNlrOFkEvBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM3MDYyOA==", "bodyText": "The lexical order part is actually outdated, we changed that behavior. We should follow up on this with a PR against master.", "url": "https://github.com/crate/crate/pull/9600#discussion_r373370628", "createdAt": "2020-01-31T08:50:26Z", "author": {"login": "mfussenegger"}, "path": "docs/sql/statements/insert.rst", "diffHunk": "@@ -24,24 +24,31 @@ Synopsis\n       { VALUES ( expression [, ...] ) [, ...] | ( query ) | query }\n       [ ON CONFLICT (column_ident [, ...]) DO UPDATE SET { column_ident = expression [, ...] } |\n         ON CONFLICT [ ( column_ident [, ...] ) ] DO NOTHING ]\n+      [ RETURNING { * | output_expression [ [ AS ] output_name ] | relation.* } [, ...] ]\n \n Description\n ===========\n \n-INSERT creates one or more rows specified by value expressions.\n+``INSERT`` creates one or more rows specified by value expressions.\n \n The target column names can be listed in any order. If no list of column names\n is given at all, the default is all the columns of the table in lexical order;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973ab6027c91a973a9df1e5cee09a5ad86c15e3e"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "973ab6027c91a973a9df1e5cee09a5ad86c15e3e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/973ab6027c91a973a9df1e5cee09a5ad86c15e3e", "committedDate": "2020-01-31T08:09:05Z", "message": "Add feedback"}, "afterCommit": {"oid": "09bd6d9852a506c1223c6a9d2ae5dd2aba722294", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/09bd6d9852a506c1223c6a9d2ae5dd2aba722294", "committedDate": "2020-01-31T12:05:05Z", "message": "Add documentation for returning clause for insert"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09bd6d9852a506c1223c6a9d2ae5dd2aba722294", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/09bd6d9852a506c1223c6a9d2ae5dd2aba722294", "committedDate": "2020-01-31T12:05:05Z", "message": "Add documentation for returning clause for insert"}, "afterCommit": {"oid": "c5c01727936ac0ba8d63e86a831abf61d4ba953e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c5c01727936ac0ba8d63e86a831abf61d4ba953e", "committedDate": "2020-01-31T12:06:26Z", "message": "Add documentation for returning clause for insert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48372f6d482cf877df37f081223656850209cbf6", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/48372f6d482cf877df37f081223656850209cbf6", "committedDate": "2020-01-31T12:07:10Z", "message": "Add documentation for returning clause for insert"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5c01727936ac0ba8d63e86a831abf61d4ba953e", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/c5c01727936ac0ba8d63e86a831abf61d4ba953e", "committedDate": "2020-01-31T12:06:26Z", "message": "Add documentation for returning clause for insert"}, "afterCommit": {"oid": "48372f6d482cf877df37f081223656850209cbf6", "author": {"user": {"login": "mkleen", "name": "Michael Kleen"}}, "url": "https://github.com/crate/crate/commit/48372f6d482cf877df37f081223656850209cbf6", "committedDate": "2020-01-31T12:07:10Z", "message": "Add documentation for returning clause for insert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDcwODA0", "url": "https://github.com/crate/crate/pull/9600#pullrequestreview-351470804", "createdAt": "2020-01-31T12:23:07Z", "commit": {"oid": "48372f6d482cf877df37f081223656850209cbf6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3963, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}