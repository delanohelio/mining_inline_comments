{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzc3MjMx", "number": 9975, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo0OVrOD-Pbvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjowOFrOD-9RFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTkxMTY2OnYy", "diffSide": "RIGHT", "path": "libs/shared/src/main/java/io/crate/common/Objects.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNzo0OVrOGYOFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoyMzozNlrOGYOYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc1Nw==", "bodyText": "This is Objects.requireNonNullElse, no?", "url": "https://github.com/crate/crate/pull/9975#discussion_r428049757", "createdAt": "2020-05-20T14:17:49Z", "author": {"login": "mfussenegger"}, "path": "libs/shared/src/main/java/io/crate/common/Objects.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common;\n+\n+import javax.annotation.Nullable;\n+\n+public class Objects {\n+\n+    /**\n+     * Returns the first of two given parameters that is not {@code null}, if either is,\n+     * or otherwise throws a {@link NullPointerException}.\n+     *\n+     * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n+     * @throws NullPointerException if both {@code first} and {@code second} are null\n+     */\n+    public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4135f87f472158357d71d68e3f60083dfe8c860c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NDU3Ng==", "bodyText": "ah yes, indeed! will update it", "url": "https://github.com/crate/crate/pull/9975#discussion_r428054576", "createdAt": "2020-05-20T14:23:36Z", "author": {"login": "kovrus"}, "path": "libs/shared/src/main/java/io/crate/common/Objects.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common;\n+\n+import javax.annotation.Nullable;\n+\n+public class Objects {\n+\n+    /**\n+     * Returns the first of two given parameters that is not {@code null}, if either is,\n+     * or otherwise throws a {@link NullPointerException}.\n+     *\n+     * @return {@code first} if it is non-null; otherwise {@code second} if it is non-null\n+     * @throws NullPointerException if both {@code first} and {@code second} are null\n+     */\n+    public static <T> T firstNonNull(@Nullable T first, @Nullable T second) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0OTc1Nw=="}, "originalCommit": {"oid": "4135f87f472158357d71d68e3f60083dfe8c860c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA1Mjc3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NzowNFrOGZUThA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0MDozN1rOGZXdsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDI2MA==", "bodyText": "Maybe for cases like this where the list is only consumed once it would make sense to add a mapLazy that is based on something like this:\nstatic class LazyMapList<I, O> extends AbstractList<O> {\n\n    private final List<I> list;\n    private final Function<? super I, ? extends O> mapper;\n\n    public LazyMapList(List<I> list, Function<? super I, ? extends O> mapper) {\n        this.list = list;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public O get(int index) {\n        return mapper.apply(list.get(index));\n    }\n\n    @Override\n    public int size() {\n        return list.size();\n    }\n}", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200260", "createdAt": "2020-05-22T11:47:04Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -62,7 +60,7 @@ private DocKey(int pos) {\n \n         public String getId(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n             return idFunction.apply(\n-                Lists.transform(\n+                Lists2.map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1MjAxNg==", "bodyText": "pushed the fixup. i took over this code and added the precondition to use random access lists.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429252016", "createdAt": "2020-05-22T13:40:37Z", "author": {"login": "kovrus"}, "path": "server/src/main/java/io/crate/analyze/where/DocKeys.java", "diffHunk": "@@ -62,7 +60,7 @@ private DocKey(int pos) {\n \n         public String getId(TransactionContext txnCtx, Functions functions, Row params, SubQueryResults subQueryResults) {\n             return idFunction.apply(\n-                Lists.transform(\n+                Lists2.map(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDI2MA=="}, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA1MzgzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NzozNVrOGZUULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NzozNVrOGZUULw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDQzMQ==", "bodyText": "Similar here mapLazy might be better here.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200431", "createdAt": "2020-05-22T11:47:35Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/execution/engine/collect/RemoteCollectorFactory.java", "diffHunk": "@@ -149,7 +149,8 @@ public RemoteCollectorFactory(ClusterService clusterService,\n             );\n             remoteCollector.doCollect();\n         }\n-        return consumer.completionFuture().thenApply(rows -> Lists.transform(rows, Buckets.arrayToSharedRow()::apply));\n+        return consumer.completionFuture()\n+            .thenApply(rows -> Lists2.map(rows, Buckets.arrayToSharedRow()::apply));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA1NjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/expression/symbol/Symbols.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODozMFrOGZUVpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0ODozMFrOGZUVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMDgwNA==", "bodyText": "Maybe also a case for mapLazy, or otherwise we should also change the function name, because the View implied that the structure is lazy.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429200804", "createdAt": "2020-05-22T11:48:30Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/expression/symbol/Symbols.java", "diffHunk": "@@ -49,7 +49,7 @@\n     public static final Predicate<Symbol> IS_GENERATED_COLUMN = input -> input instanceof GeneratedReference;\n \n     public static List<DataType> typeView(List<? extends Symbol> symbols) {\n-        return Lists.transform(symbols, Symbol::valueType);\n+        return Lists2.map(symbols, Symbol::valueType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abcf2dbf9a458830ad8a89cc80e80068aa40232b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzQyMTAyOnYy", "diffSide": "RIGHT", "path": "libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1MjowOFrOGZX38Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1NDo1NFrOGZX-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODczNw==", "bodyText": "Btw I'm not sure if this restriction is necessary. E.g. if you look at the implementation of get of LinkedList there is no \"extra\" slow-down caused by using LazyMapList", "url": "https://github.com/crate/crate/pull/9975#discussion_r429258737", "createdAt": "2020-05-22T13:52:08Z", "author": {"login": "mfussenegger"}, "path": "libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common.collections;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+import java.util.RandomAccess;\n+import java.util.function.Function;\n+\n+/**\n+ * {@code LazyMapList} is a wrapper around a random access list that lazily\n+ * applies the {@code mapper} {@code Function} on each item when it is accessed.\n+ */\n+public class LazyMapList<I, O> extends AbstractList<O> implements RandomAccess {\n+\n+    private final List<I> list;\n+    private final Function<? super I, ? extends O> mapper;\n+\n+    public static <I, O> LazyMapList<I, O> of(List<I> list, Function<? super I, ? extends O> mapper) {\n+        if (!(list instanceof RandomAccess)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MDM0MA==", "bodyText": "yeah, doesn't seem that bad. I can drop it then.", "url": "https://github.com/crate/crate/pull/9975#discussion_r429260340", "createdAt": "2020-05-22T13:54:54Z", "author": {"login": "kovrus"}, "path": "libs/shared/src/main/java/io/crate/common/collections/LazyMapList.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.common.collections;\n+\n+import java.util.AbstractList;\n+import java.util.List;\n+import java.util.RandomAccess;\n+import java.util.function.Function;\n+\n+/**\n+ * {@code LazyMapList} is a wrapper around a random access list that lazily\n+ * applies the {@code mapper} {@code Function} on each item when it is accessed.\n+ */\n+public class LazyMapList<I, O> extends AbstractList<O> implements RandomAccess {\n+\n+    private final List<I> list;\n+    private final Function<? super I, ? extends O> mapper;\n+\n+    public static <I, O> LazyMapList<I, O> of(List<I> list, Function<? super I, ? extends O> mapper) {\n+        if (!(list instanceof RandomAccess)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODczNw=="}, "originalCommit": {"oid": "5ae3af8da5e813226fefb4fab412f63c62e1198d"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1514, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}