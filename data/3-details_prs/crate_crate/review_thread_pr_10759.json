{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTQ0OTA0", "number": 10759, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyOTozMlrOE3TtMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTowMzowM1rOE3nZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMwMDAzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/crate/analyze/validator/GroupBySymbolValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoyOTozMlrOHwk70Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo0Nzo0MlrOHxDukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5ODgzMw==", "bodyText": "I don't really understand why we have the special case for subscript functions. Shouldn't we be able to support all kinds of functions if subscripts work - or why are they special?", "url": "https://github.com/crate/crate/pull/10759#discussion_r520698833", "createdAt": "2020-11-10T16:29:32Z", "author": {"login": "mfussenegger"}, "path": "server/src/main/java/io/crate/analyze/validator/GroupBySymbolValidator.java", "diffHunk": "@@ -34,23 +36,26 @@\n     private static final InnerValidator INNER_VALIDATOR = new InnerValidator();\n \n     public static void validate(Symbol symbol) throws IllegalArgumentException, UnsupportedOperationException {\n-        symbol.accept(INNER_VALIDATOR, \"Cannot GROUP BY '%s': invalid data type '%s'\");\n+        symbol.accept(INNER_VALIDATOR, false);\n     }\n \n-    private static class InnerValidator extends SymbolVisitor<String, Void> {\n+    private static class InnerValidator extends SymbolVisitor<Boolean, Void> {\n \n         @Override\n-        public Void visitFunction(Function function, String errorMsgTemplate) {\n+        public Void visitFunction(Function function, Boolean insideSubscriptFunction) {\n             switch (function.type()) {\n                 case SCALAR:\n                     for (Symbol argument : function.arguments()) {\n-                        argument.accept(this, errorMsgTemplate);\n+                        argument.accept(this, function.name().equals(SubscriptFunction.NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3256ead051616ae1157430cbc7dc54664539210a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwMzM0Nw==", "bodyText": "actually you're right, pushed a fixup.", "url": "https://github.com/crate/crate/pull/10759#discussion_r521203347", "createdAt": "2020-11-11T08:47:42Z", "author": {"login": "seut"}, "path": "server/src/main/java/io/crate/analyze/validator/GroupBySymbolValidator.java", "diffHunk": "@@ -34,23 +36,26 @@\n     private static final InnerValidator INNER_VALIDATOR = new InnerValidator();\n \n     public static void validate(Symbol symbol) throws IllegalArgumentException, UnsupportedOperationException {\n-        symbol.accept(INNER_VALIDATOR, \"Cannot GROUP BY '%s': invalid data type '%s'\");\n+        symbol.accept(INNER_VALIDATOR, false);\n     }\n \n-    private static class InnerValidator extends SymbolVisitor<String, Void> {\n+    private static class InnerValidator extends SymbolVisitor<Boolean, Void> {\n \n         @Override\n-        public Void visitFunction(Function function, String errorMsgTemplate) {\n+        public Void visitFunction(Function function, Boolean insideSubscriptFunction) {\n             switch (function.type()) {\n                 case SCALAR:\n                     for (Symbol argument : function.arguments()) {\n-                        argument.accept(this, errorMsgTemplate);\n+                        argument.accept(this, function.name().equals(SubscriptFunction.NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5ODgzMw=="}, "originalCommit": {"oid": "3256ead051616ae1157430cbc7dc54664539210a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzUyNjY1OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTowMzowM1rOHxEQCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTowMzowM1rOHxEQCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIxMTkxMw==", "bodyText": "Should we also add a logical planner test for this case? Otherwise the new ProjectSet creation change is not tested, or am I missing something?", "url": "https://github.com/crate/crate/pull/10759#discussion_r521211913", "createdAt": "2020-11-11T09:03:03Z", "author": {"login": "mfussenegger"}, "path": "server/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "diffHunk": "@@ -2604,4 +2614,12 @@ public void test_match_with_geo_shape_is_streamed_as_text_type_to_4_1_8_nodes()\n         Function serializedTo41 = new Function(in);\n         assertThat(serializedTo41.info().ident().argumentTypes().get(1), is(DataTypes.STRING));\n     }\n+\n+    @Test\n+    public void test_table_function_wrapped_inside_scalar_can_be_used_inside_group_by() {\n+        var executor = SQLExecutor.builder(clusterService)\n+            .build();\n+        AnalyzedRelation rel = executor.analyze(\"select regexp_matches('foo', '.*')[1] from sys.cluster group by 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24d7c1f76466a1bde45cd485fb35ba20c8be91f7"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 903, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}