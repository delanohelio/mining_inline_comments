{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxOTg4MTM3", "number": 9629, "title": "Add support for JOIN USING statements", "bodyText": "Addressing #9551", "createdAt": "2020-02-06T16:18:22Z", "url": "https://github.com/crate/crate/pull/9629", "merged": true, "mergeCommit": {"oid": "0a9bbb91e575b12c11199bd8d5339b1454a01df7"}, "closed": true, "closedAt": "2020-02-10T09:32:29Z", "author": {"login": "marregui"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBykqHAFqTM1NDgyMTIxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC5T9LgBqjMwMjE4MjY3NTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODIxMjEx", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-354821211", "createdAt": "2020-02-06T22:35:18Z", "commit": {"oid": "46d2f639e90c7700edbc56173b1881c85851c96e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozNToxOFrOFmskxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMjozNToxOFrOFmskxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMDUxOA==", "bodyText": "Is it really safe to cast to Table here? What if left or right is a sub query?", "url": "https://github.com/crate/crate/pull/9629#discussion_r376120518", "createdAt": "2020-02-06T22:35:18Z", "author": {"login": "kovrus"}, "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -1190,7 +1189,9 @@ public Node visitJoinRelation(SqlBaseParser.JoinRelationContext context) {\n                 criteria = new JoinOn((Expression) visit(context.joinCriteria().booleanExpression()));\n             } else if (context.joinCriteria().USING() != null) {\n                 List<String> columns = identsToStrings(context.joinCriteria().ident());\n-                criteria = new JoinUsing(columns);\n+                Table leftTable = (Table) left;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46d2f639e90c7700edbc56173b1881c85851c96e"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46d2f639e90c7700edbc56173b1881c85851c96e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/46d2f639e90c7700edbc56173b1881c85851c96e", "committedDate": "2020-02-06T19:18:04Z", "message": "Fix broken test"}, "afterCommit": {"oid": "5cd2dde7833471d06c59fb3c1723262646e6285a", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/5cd2dde7833471d06c59fb3c1723262646e6285a", "committedDate": "2020-02-07T12:26:45Z", "message": "Add less trivial tests and account for cases where left/right are not Tables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjQ2NjM2", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-355246636", "createdAt": "2020-02-07T15:43:40Z", "commit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0Mzo0MFrOFnBTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0Mzo0MFrOFnBTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDAzMg==", "bodyText": "ON and USING should be optional, so not sure if it is correct to put them into curly braces. Maybe something like this would work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                relation { , | join_type JOIN } relation {[ ON join_condition ] | [USING (col_names)]}\n          \n          \n            \n                relation { , | join_type JOIN } relation [ ON join_condition | USING (column_ident [, ...]) ]", "url": "https://github.com/crate/crate/pull/9629#discussion_r376460032", "createdAt": "2020-02-07T15:43:40Z", "author": {"login": "kovrus"}, "path": "docs/sql/statements/select.rst", "diffHunk": "@@ -159,7 +159,7 @@ Joined relation\n A ``joined_relation`` is a relation which joins two relations together. See\n :ref:`sql_dql_joins` ::\n \n-    relation { , | join_type JOIN } relation [ ON join_condition ]\n+    relation { , | join_type JOIN } relation {[ ON join_condition ] | [USING (col_names)]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjQ5ODgz", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-355249883", "createdAt": "2020-02-07T15:48:05Z", "commit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0ODowNVrOFnBc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1MzoxNFrOFnBntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Added support for ``JOIN USING``, e.g. select * from t1 join t2 using(col1, col2),\n          \n          \n            \n            - Added support for ``JOIN USING``, e.g. ``SELECT * FROM t1 JOIN t2 USING (col)``,", "url": "https://github.com/crate/crate/pull/9629#discussion_r376462565", "createdAt": "2020-02-07T15:48:05Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -65,6 +65,10 @@ None\n Changes\n =======\n \n+- Added support for ``JOIN USING``, e.g. select * from t1 join t2 using(col1, col2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MzA5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              a more convenient alternative to ``JOIN ON``, when we know both tables have the\n          \n          \n            \n              an alternative to ``JOIN ON``, when the column name(s) are the same in both relations.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376463092", "createdAt": "2020-02-07T15:49:01Z", "author": {"login": "mfussenegger"}, "path": "docs/appendices/release-notes/unreleased.rst", "diffHunk": "@@ -65,6 +65,10 @@ None\n Changes\n =======\n \n+- Added support for ``JOIN USING``, e.g. select * from t1 join t2 using(col1, col2),\n+  a more convenient alternative to ``JOIN ON``, when we know both tables have the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MzcwNA==", "bodyText": "I think it is:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                relation { , | join_type JOIN } relation {[ ON join_condition ] | [USING (col_names)]}\n          \n          \n            \n                relation { , | join_type JOIN } relation [ { ON join_condition  |  USING (col_names) } ]\n          \n      \n    \n    \n  \n\n[ .. ]for the optional indication, { a | b | c } to denote different options.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376463704", "createdAt": "2020-02-07T15:50:04Z", "author": {"login": "mfussenegger"}, "path": "docs/sql/statements/select.rst", "diffHunk": "@@ -159,7 +159,7 @@ Joined relation\n A ``joined_relation`` is a relation which joins two relations together. See\n :ref:`sql_dql_joins` ::\n \n-    relation { , | join_type JOIN } relation [ ON join_condition ]\n+    relation { , | join_type JOIN } relation {[ ON join_condition ] | [USING (col_names)]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              A comma separated list of column names. The joining tables are both expected\n          \n          \n            \n              A comma separated list of column names. The relations joined need to contain the columns specified.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376464558", "createdAt": "2020-02-07T15:51:44Z", "author": {"login": "mfussenegger"}, "path": "docs/sql/statements/select.rst", "diffHunk": "@@ -171,6 +171,11 @@ A ``joined_relation`` is a relation which joins two relations together. See\n   The join_condition is not applicable for joins of type CROSS and must\n   have a returning value of type ``boolean``.\n \n+:col_names:\n+  A comma separated list of column names. The joining tables are both expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDgwMQ==", "bodyText": "Please revert unrelated indentation changes", "url": "https://github.com/crate/crate/pull/9629#discussion_r376464801", "createdAt": "2020-02-07T15:52:13Z", "author": {"login": "mfussenegger"}, "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -480,8 +480,8 @@ public Node visitRestore(SqlBaseParser.RestoreContext context) {\n                 extractGenericProperties(context.withProperties()));\n         }\n         return new RestoreSnapshot(getQualifiedName(context.qname()),\n-            visitCollection(context.tableWithPartitions().tableWithPartition(), Table.class),\n-            extractGenericProperties(context.withProperties()));\n+                                   visitCollection(context.tableWithPartitions().tableWithPartition(), Table.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NTMzNQ==", "bodyText": "Please also revert these removals. It causes noise that is unrelated to the change of the PR.\nI know the IDE bugs you about it, but for tests it doesn't matter and it is usually annoying to re-add it once any of the methods tell the IDE that they throw something.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376465335", "createdAt": "2020-02-07T15:53:14Z", "author": {"login": "mfussenegger"}, "path": "sql/src/test/java/io/crate/analyze/SelectStatementAnalyzerTest.java", "diffHunk": "@@ -161,15 +161,15 @@ public void testOrderedSelect() throws Exception {\n     }\n \n     @Test\n-    public void testNegativeLiteral() throws Exception {\n+    public void testNegativeLiteral() {\n         AnalyzedRelation relation =  analyze(\"select * from sys.nodes where port['http'] = -400\");\n         Function whereClause = (Function) relation.where().query();\n         Symbol symbol = whereClause.arguments().get(1);\n-        assertThat(((Literal) symbol).value(), is(-400));\n+        assertThat(((Literal<?>) symbol).value(), is(-400));\n     }\n \n     @Test\n-    public void testSimpleSelect() throws Exception {\n+    public void testSimpleSelect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4acfea6833db8a10b35265a8c771dc18314bac0a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDYxNTIz", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-355461523", "createdAt": "2020-02-07T21:57:26Z", "commit": {"oid": "1e2173c06f817ebea1aca00f3ecbadc5da7628b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo1NzoyN1rOFnLePQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo1NzoyN1rOFnLePQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNjc0OQ==", "bodyText": "This instanceof handling in this method might be easy to forget to update in case we add new relations.\nI like the solution you had in the first commit better. Was there a reason why you choose to go with this instead?", "url": "https://github.com/crate/crate/pull/9629#discussion_r376626749", "createdAt": "2020-02-07T21:57:27Z", "author": {"login": "mfussenegger"}, "path": "sql-parser/src/main/java/io/crate/sql/parser/AstBuilder.java", "diffHunk": "@@ -1190,14 +1190,35 @@ public Node visitJoinRelation(SqlBaseParser.JoinRelationContext context) {\n                 criteria = new JoinOn((Expression) visit(context.joinCriteria().booleanExpression()));\n             } else if (context.joinCriteria().USING() != null) {\n                 List<String> columns = identsToStrings(context.joinCriteria().ident());\n-                criteria = new JoinUsing(columns);\n+                criteria = new JoinUsing(extractQualifiedName(left), extractQualifiedName(right), columns);\n             } else {\n                 throw new IllegalArgumentException(\"Unsupported join criteria\");\n             }\n         }\n         return new Join(getJoinType(context.joinType()), left, right, Optional.of(criteria));\n     }\n \n+    private static QualifiedName extractQualifiedName(Relation rel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2173c06f817ebea1aca00f3ecbadc5da7628b3"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjMyNzM4", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-355632738", "createdAt": "2020-02-09T20:52:56Z", "commit": {"oid": "bf91bafe97e0da36a69b42e2effd36d78920e0a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMDo1Mjo1NlrOFnW7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMToxNDo1MlrOFnXBXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNDQzMg==", "bodyText": "Not sure if using randomization is justified here. I think it would be easier to understand if we tested the different scenarios explicitly.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376814432", "createdAt": "2020-02-09T20:52:56Z", "author": {"login": "mfussenegger"}, "path": "sql-parser/src/test/java/io/crate/sql/tree/JoinUsingTests.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to Crate under one or more contributor license agreements.\n+ * See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.  Crate licenses this file\n+ * to you under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.  You may\n+ * obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+ * implied.  See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ *\n+ * However, if you have executed another commercial license agreement\n+ * with Crate these terms will supersede the license and you may use the\n+ * software solely pursuant to the terms of the relevant commercial\n+ * agreement.\n+ */\n+\n+package io.crate.sql.tree;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public class JoinUsingTests {\n+\n+    @Test\n+    public void testToExpression() {\n+        int n = ThreadLocalRandom.current().nextInt(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf91bafe97e0da36a69b42e2effd36d78920e0a0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTk2NA==", "bodyText": "How about something like the following to avoid the duplicate instanceof:\ndiff --git a/sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java b/sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java\nindex 80f718714f..8e3c5da7cf 100644\n--- a/sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java\n+++ b/sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java\n@@ -107,7 +107,6 @@ import javax.annotation.Nullable;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -247,48 +246,45 @@ public class RelationAnalyzer extends DefaultTraversalVisitor<AnalyzedRelation,\n \n     @Override\n     protected AnalyzedRelation visitJoin(Join node, StatementAnalysisContext statementContext) {\n-        node.getLeft().accept(this, statementContext);\n-        node.getRight().accept(this, statementContext);\n+        var leftRel = node.getLeft().accept(this, statementContext);\n+        var rightRel = node.getRight().accept(this, statementContext);\n \n         RelationAnalysisContext relationContext = statementContext.currentRelationContext();\n         Optional<JoinCriteria> optCriteria = node.getCriteria();\n         Symbol joinCondition = null;\n         if (optCriteria.isPresent()) {\n             JoinCriteria joinCriteria = optCriteria.get();\n-            if (joinCriteria instanceof JoinOn || joinCriteria instanceof JoinUsing) {\n-                final CoordinatorTxnCtx coordinatorTxnCtx = statementContext.transactionContext();\n-                ExpressionAnalyzer expressionAnalyzer = new ExpressionAnalyzer(\n-                    functions,\n-                    coordinatorTxnCtx,\n-                    statementContext.convertParamFunction(),\n-                    new FullQualifiedNameFieldProvider(\n-                        relationContext.sources(),\n-                        relationContext.parentSources(),\n-                        coordinatorTxnCtx.sessionContext().searchPath().currentSchema()),\n-                    new SubqueryAnalyzer(this, statementContext));\n-                Expression expr;\n-                if (joinCriteria instanceof JoinOn) {\n-                    expr = ((JoinOn) joinCriteria).getExpression();\n-                } else {\n-                    Iterator<QualifiedName> rels = relationContext.sources().keySet().iterator();\n-                    QualifiedName left = rels.hasNext() ? rels.next() : null;\n-                    QualifiedName right = rels.hasNext() ? rels.next() : null;\n-                    if (null == left || null == right) {\n-                        throw new IllegalStateException(\"joining tables are undefined\");\n-                    }\n-                    expr = JoinUsing.toExpression(left, right, ((JoinUsing) joinCriteria).getColumns());\n-                }\n-                try {\n-                    joinCondition = expressionAnalyzer.convert(expr, relationContext.expressionAnalysisContext());\n-                } catch (RelationUnknown e) {\n-                    throw new RelationValidationException(e.getTableIdents(),\n-                        String.format(Locale.ENGLISH,\n-                        \"missing FROM-clause entry for relation '%s'\", e.getTableIdents()));\n-                }\n+            final CoordinatorTxnCtx coordinatorTxnCtx = statementContext.transactionContext();\n+            ExpressionAnalyzer expressionAnalyzer = new ExpressionAnalyzer(\n+                functions,\n+                coordinatorTxnCtx,\n+                statementContext.convertParamFunction(),\n+                new FullQualifiedNameFieldProvider(\n+                    relationContext.sources(),\n+                    relationContext.parentSources(),\n+                    coordinatorTxnCtx.sessionContext().searchPath().currentSchema()),\n+                new SubqueryAnalyzer(this, statementContext)\n+            );\n+            final Expression expr;\n+            if (joinCriteria instanceof JoinOn) {\n+                expr = ((JoinOn) joinCriteria).getExpression();\n+            } else if (joinCriteria instanceof JoinUsing) {\n+                expr = JoinUsing.toExpression(\n+                    leftRel.getQualifiedName(),\n+                    rightRel.getQualifiedName(),\n+                    ((JoinUsing) joinCriteria).getColumns()\n+                );\n             } else {\n                 throw new UnsupportedOperationException(String.format(Locale.ENGLISH, \"join criteria %s not supported\",\n                     joinCriteria.getClass().getSimpleName()));\n             }\n+            try {\n+                joinCondition = expressionAnalyzer.convert(expr, relationContext.expressionAnalysisContext());\n+            } catch (RelationUnknown e) {\n+                throw new RelationValidationException(e.getTableIdents(),\n+                    String.format(Locale.ENGLISH,\n+                    \"missing FROM-clause entry for relation '%s'\", e.getTableIdents()));\n+            }\n         }\n \n         relationContext.addJoinType(JoinType.values()[node.getType().ordinal()], joinCondition);\n\n\nand to avoid the left / right null cases.", "url": "https://github.com/crate/crate/pull/9629#discussion_r376815964", "createdAt": "2020-02-09T21:14:52Z", "author": {"login": "mfussenegger"}, "path": "sql/src/main/java/io/crate/analyze/relations/RelationAnalyzer.java", "diffHunk": "@@ -253,7 +255,7 @@ protected AnalyzedRelation visitJoin(Join node, StatementAnalysisContext stateme\n         Symbol joinCondition = null;\n         if (optCriteria.isPresent()) {\n             JoinCriteria joinCriteria = optCriteria.get();\n-            if (joinCriteria instanceof JoinOn) {\n+            if (joinCriteria instanceof JoinOn || joinCriteria instanceof JoinUsing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf91bafe97e0da36a69b42e2effd36d78920e0a0"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NzUxNzAx", "url": "https://github.com/crate/crate/pull/9629#pullrequestreview-355751701", "createdAt": "2020-02-10T08:23:21Z", "commit": {"oid": "3226a7eae9d4cf04bfb50eb7c1d2902755398a69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9b98ed7b4007e8b8831b9f78c03cd88bdc0c48e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a9b98ed7b4007e8b8831b9f78c03cd88bdc0c48e", "committedDate": "2020-02-10T09:00:07Z", "message": "Add support for JOIN USING statements\n\nAn alternative to JOIN ON, when the column name(s) are the same in\nboth relations.\n\ne.g. SELECT * FROM t1 JOIN t2 USING (col1, col2)\n     SELECT * FROM t1 JOIN t2 ON t1.col1 = t2.col1 AND t1.col2 = t2.col2"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3226a7eae9d4cf04bfb50eb7c1d2902755398a69", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/3226a7eae9d4cf04bfb50eb7c1d2902755398a69", "committedDate": "2020-02-10T07:39:40Z", "message": "Test simply two use cases"}, "afterCommit": {"oid": "a9b98ed7b4007e8b8831b9f78c03cd88bdc0c48e", "author": {"user": {"login": "marregui", "name": "marregui"}}, "url": "https://github.com/crate/crate/commit/a9b98ed7b4007e8b8831b9f78c03cd88bdc0c48e", "committedDate": "2020-02-10T09:00:07Z", "message": "Add support for JOIN USING statements\n\nAn alternative to JOIN ON, when the column name(s) are the same in\nboth relations.\n\ne.g. SELECT * FROM t1 JOIN t2 USING (col1, col2)\n     SELECT * FROM t1 JOIN t2 ON t1.col1 = t2.col1 AND t1.col2 = t2.col2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}