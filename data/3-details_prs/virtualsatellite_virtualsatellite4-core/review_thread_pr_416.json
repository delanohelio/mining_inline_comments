{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMzQ3MzA4", "number": 416, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxMzo1OVrODa1yGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1MDoxNlrODbh2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDcwNzQ0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.concept.test/src/de/dlr/sc/virsat/model/concept/generator/beans/GenerateCategoryBeansTest.xtend", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxMzo1OVrOFh_Jyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDozNzozNFrOFjDxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MjAyNw==", "bodyText": "I am a bit conflicted about the use of AExternalModelTest by inheriting from it. The GenerateCategoryBeansTest is not really an ExternalModelTest, but it does have some test cases involving external models. This might become an issue in the future since Java doesnt allow multi inheritance. So if we make, say, a class ABeansTest to unify test setup for all beans related test classes, this would become complicated.\nSo my question: Would it be possible to turn AExternalModelTest into a utility class that gets called in the test cases instead of inheriting from it?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371182027", "createdAt": "2020-01-27T11:13:59Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.concept.test/src/de/dlr/sc/virsat/model/concept/generator/beans/GenerateCategoryBeansTest.xtend", "diffHunk": "@@ -28,7 +29,7 @@ import org.junit.runner.RunWith\n \r\n @RunWith(XtextRunner)\r\n @InjectWith(ConceptLanguageTestInjectorProvider)\r\n-class GenerateCategoryBeansTest {\r\n+class GenerateCategoryBeansTest extends AExternalModelTest {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNjIxMQ==", "bodyText": "I think i would go for a utility class as well instead of inheritance. Or maybe it is something that can be placed to AConceptTestCase. But there we have to be super careful that we are not creating havoc on the plugin dependencies etc.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372306211", "createdAt": "2020-01-29T10:37:34Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.concept.test/src/de/dlr/sc/virsat/model/concept/generator/beans/GenerateCategoryBeansTest.xtend", "diffHunk": "@@ -28,7 +29,7 @@ import org.junit.runner.RunWith\n \r\n @RunWith(XtextRunner)\r\n @InjectWith(ConceptLanguageTestInjectorProvider)\r\n-class GenerateCategoryBeansTest {\r\n+class GenerateCategoryBeansTest extends AExternalModelTest {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MjAyNw=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDcxMTAzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.concept.test/src/de/dlr/sc/virsat/model/concept/generator/dmf/GenerateDmfCategoriesTest.xtend", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxNToyMlrOFh_L7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxNToyMlrOFh_L7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MjU3Mg==", "bodyText": "Maybe its just github, but the intendation looks off here.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371182572", "createdAt": "2020-01-27T11:15:22Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.concept.test/src/de/dlr/sc/virsat/model/concept/generator/dmf/GenerateDmfCategoriesTest.xtend", "diffHunk": "@@ -255,5 +258,50 @@ class GenerateDmfCategoriesTest {\n \t\tAssert.assertTrue(\"EClass correctly extends base EClass\", eClassExtending.ESuperTypes.contains(eClassExtended));\r\n \r\n \t}\r\n+\t\r\n+\t@Test\r\n+\tdef void testCreateEClassWithConceptEReference() {\r\n+\t\tval concept = '''\r\n+\t\t\tConcept testConcept hasDMF {\r\n+\t\t\t\t\r\n+\t\t\t\tEImport \"http://www.virsat.sc.dlr.de/external/tests\";\r\n+\t\t\t\t\t\r\n+\t\t\t\tCategory TestCategory {\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tEReference testEReference of Type tests.ExternalTestType;\r\n+\t\t\t\t\t\r\n+\t\t\t\t\tEReference testEReferenceArray[] of Type tests.ExternalTestType;\r\n+\t\t\t\t\t\r\n+\t\t\t\t}\r\n+\t\t\t\t\r\n+\t\t\t}\r\n+\t    '''.parse(resourceSet)\r\n+\t    \r\n+\t    dmfCategoriesGenerator.initResources(concept);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Nzk1NDE1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOToyNTo0NlrOFieAQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDozOToyOVrOFjD0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4NzQ4OQ==", "bodyText": "I think we also have the usual coding style that between an if/for and the bracket comes a whitespace in xtend files.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371687489", "createdAt": "2020-01-28T09:25:46Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.generator.ereference\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenPackage\r\n+import org.eclipse.emf.common.util.URI\r\n+import org.eclipse.emf.ecore.EPackage\r\n+import org.eclipse.emf.ecore.resource.Resource\r\n+import org.eclipse.emf.ecore.resource.ResourceSet\r\n+\r\n+class ExternalGenModelHelper {\r\n+\t\r\n+\t/**\r\n+\t * Get the full qualified java class name of property\r\n+\t */\r\n+\tdef getEObjectClass(EReferenceProperty property) {\r\n+\t\tvar String typeClass = null\r\n+\t\tvar genPackage = resolveGenPackage(property)\r\n+\t\t\r\n+\t\t//If package could be found get class name\r\n+\t\tif(genPackage !== null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNzE0MA==", "bodyText": "Yes, but checkstyle probably does not evaluate xtend. \ud83d\ude1e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372307140", "createdAt": "2020-01-29T10:39:29Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.generator.ereference\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenPackage\r\n+import org.eclipse.emf.common.util.URI\r\n+import org.eclipse.emf.ecore.EPackage\r\n+import org.eclipse.emf.ecore.resource.Resource\r\n+import org.eclipse.emf.ecore.resource.ResourceSet\r\n+\r\n+class ExternalGenModelHelper {\r\n+\t\r\n+\t/**\r\n+\t * Get the full qualified java class name of property\r\n+\t */\r\n+\tdef getEObjectClass(EReferenceProperty property) {\r\n+\t\tvar String typeClass = null\r\n+\t\tvar genPackage = resolveGenPackage(property)\r\n+\t\t\r\n+\t\t//If package could be found get class name\r\n+\t\tif(genPackage !== null) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4NzQ4OQ=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Nzk3NTYxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTozMjoxNlrOFieNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTozMjoxNlrOFieNfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5MDg3OA==", "bodyText": "The test case here tests various functionalities at once. This also makes it pretty long. Would it be possible to split it into multiple test cases?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371690878", "createdAt": "2020-01-28T09:32:16Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODAxMTQ5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0MzozNlrOFiejqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMToxNDo0N1rOFmqb6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ==", "bodyText": "Maybe this is a bit out of scope of the PR, but I dont like that we have the INDEX_NOT_EXISTENT declared at so many places (All list implementations, and their related test cases). I was thinking: Would it make sense to move the constant into the IBeanList interface and use it from there?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371696555", "createdAt": "2020-01-28T09:43:36Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r\n+\t\t\t\t((BeanPropertyEReference<CategoryAssignment>) testList.toArray()[0]).getTypeInstance().getUuid());\r\n+\t\t\r\n+\t\tassertTrue(\"Bean should be found in list\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Remove value\r\n+\t\ttestList.remove(0);\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Check indexing\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\tfinal int INDEX = 2;\r\n+\t\ttestList.add(INDEX, bean);\r\n+\t\tassertEquals(INDEX, testList.indexOf(testList.get(INDEX)));\r\n+\t\tassertEquals(INDEX, testList.lastIndexOf(testList.get(INDEX)));\r\n+\t\t\r\n+\t\ttestList.removeAll(Collections.singletonList(bean));\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\tfinal int INDEX_NOT_EXISTENT = -1;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwODcyOA==", "bodyText": "yes, i agree, should be moved.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372308728", "createdAt": "2020-01-29T10:42:35Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r\n+\t\t\t\t((BeanPropertyEReference<CategoryAssignment>) testList.toArray()[0]).getTypeInstance().getUuid());\r\n+\t\t\r\n+\t\tassertTrue(\"Bean should be found in list\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Remove value\r\n+\t\ttestList.remove(0);\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Check indexing\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\tfinal int INDEX = 2;\r\n+\t\ttestList.add(INDEX, bean);\r\n+\t\tassertEquals(INDEX, testList.indexOf(testList.get(INDEX)));\r\n+\t\tassertEquals(INDEX, testList.lastIndexOf(testList.get(INDEX)));\r\n+\t\t\r\n+\t\ttestList.removeAll(Collections.singletonList(bean));\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\tfinal int INDEX_NOT_EXISTENT = -1;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4NTQ4MQ==", "bodyText": "Just checked, it is actually already defined in AArrayInstanceList... I'm using this one now.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376085481", "createdAt": "2020-02-06T21:14:47Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r\n+\t\t\t\t((BeanPropertyEReference<CategoryAssignment>) testList.toArray()[0]).getTypeInstance().getUuid());\r\n+\t\t\r\n+\t\tassertTrue(\"Bean should be found in list\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Remove value\r\n+\t\ttestList.remove(0);\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\t\r\n+\t\t//Check indexing\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\ttestList.add(new BeanPropertyEReference<CategoryAssignment>());\r\n+\t\tfinal int INDEX = 2;\r\n+\t\ttestList.add(INDEX, bean);\r\n+\t\tassertEquals(INDEX, testList.indexOf(testList.get(INDEX)));\r\n+\t\tassertEquals(INDEX, testList.lastIndexOf(testList.get(INDEX)));\r\n+\t\t\r\n+\t\ttestList.removeAll(Collections.singletonList(bean));\r\n+\t\tassertFalse(\"Bean should be removed\", testList.contains(bean));\r\n+\t\tfinal int INDEX_NOT_EXISTENT = -1;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5NjU1NQ=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODAyNjA3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0Nzo0OFrOFiesXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0Nzo0OFrOFiesXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5ODc4MQ==", "bodyText": "Superfluous whiteline.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371698781", "createdAt": "2020-01-28T09:47:48Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReferenceTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class BeanPropertyEReferenceTest {\r\n+\t\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate BeanPropertyEReference<CategoryAssignment> testBean;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\t\r\n+\t\ttestBean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\ttestBean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testValueHandling() {\r\n+\t\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODAyODI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0ODoyOFrOFietvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0ODoyOFrOFietvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTEzMg==", "bodyText": "Author tag.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371699132", "createdAt": "2020-01-28T09:48:28Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\r\n+\r\n+/**\r\n+ * This class tests the DVLMReferencePropertyInstanceItemProvider\r\n+ * @author muel_s8\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODAyOTAzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0ODozOVrOFieuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0ODozOVrOFieuLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTI0Nw==", "bodyText": "Superflous white line", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371699247", "createdAt": "2020-01-28T09:48:39Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProviderTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryInstantiator;\r\n+\r\n+/**\r\n+ * This class tests the DVLMReferencePropertyInstanceItemProvider\r\n+ * @author muel_s8\r\n+ *\r\n+ */\r\n+\r\n+public class DVLMERefererencePropertyInstanceItemProviderTest {\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODA0MDM1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo1MjoxN1rOFie1mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowNzowOFrOFmk_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng==", "bodyText": "Why do we need to check equality via uuid instead of pi.equals(ca)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371701146", "createdAt": "2020-01-28T09:52:17Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNzE1Mw==", "bodyText": "Actually, I am a bit confused with this.\nHow can the uuid of some property instance be the same as the uuid of a category assignment?\nArent they (more or less) unrelated types?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371707153", "createdAt": "2020-01-28T10:03:17Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMDgxNA==", "bodyText": "This has been implemented in the lists to avoid issues in case objects get reloaded in between from the DLVM model.  Than you have different instances with the same UUID.\nThe question is, if the assumption back in the days was correct that there can be cases where we have this constellation of semantitcally same objects but as different instances. And we should think about the implications.\nFor me this is a more general question. And i guess this is taken from the other list implementations. Therefore i would accept it here and take the discussion to some other place.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372310814", "createdAt": "2020-01-29T10:46:58Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NjE4Mw==", "bodyText": "Yep, I simply adopted the way we handle this in the other property instance lists...", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r375996183", "createdAt": "2020-02-06T18:07:08Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMTE0Ng=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODA3NDkxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDowMjoxNVrOFifLKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTozNToyN1rOFmrBGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjY2NA==", "bodyText": "Why compare the uuids? Shouldnt the eReferencePropertyInstance be equal to the result of the array access?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371706664", "createdAt": "2020-01-28T10:02:15Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NTAwMg==", "bodyText": "No, the list creates a new java object. So basic equals implementation will fail.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376095002", "createdAt": "2020-02-06T21:35:27Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.edit.test/src/de/dlr/sc/virsat/model/concept/lists/TypeSafeEReferenceArrayInstanceListTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.lists;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Collections;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n+import de.dlr.sc.virsat.model.concept.list.TypeSafeEReferenceArrayInstanceList;\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.Category;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.PropertydefinitionsFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.util.CategoryAssignmentHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.ConceptsFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceListTest {\r\n+\r\n+\tprivate CategoryAssignmentHelper helper;\r\n+\tprivate Concept testConcept;\r\n+\tprivate Category testCategory;\r\n+\tprivate EReferenceProperty testProperty;\r\n+\tprivate static final String PROPERTY_NAME = \"testProperty\";\r\n+\t\r\n+\tprivate CategoryAssignment testCA;\r\n+\tprivate ArrayInstance propertyInstance;\r\n+\t\r\n+\tprivate CategoryAssignment testPropertyValue;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\ttestConcept = ConceptsFactory.eINSTANCE.createConcept();\r\n+\t\ttestCategory = CategoriesFactory.eINSTANCE.createCategory();\r\n+\t\ttestProperty = PropertydefinitionsFactory.eINSTANCE.createEReferenceProperty();\r\n+\t\ttestProperty.setName(PROPERTY_NAME);\r\n+\t\ttestProperty.setArrayModifier(PropertydefinitionsFactory.eINSTANCE.createDynamicArrayModifier());\r\n+\t\t\r\n+\t\ttestConcept.getCategories().add(testCategory);\r\n+\t\ttestCategory.getProperties().add(testProperty);\r\n+\t\t\r\n+\t\t\r\n+\t\ttestCA = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t\tpropertyInstance = PropertyinstancesFactory.eINSTANCE.createArrayInstance();\r\n+\t\tpropertyInstance.setType(testProperty);\r\n+\t\ttestProperty.setReferenceType(testCA.eClass());\r\n+\t\ttestCA.getPropertyInstances().add(propertyInstance);\r\n+\t\thelper = new CategoryAssignmentHelper(testCA);\r\n+\t\t\r\n+\t\ttestPropertyValue = CategoriesFactory.eINSTANCE.createCategoryAssignment();\r\n+\t}\r\n+\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Test\r\n+\tpublic void testList() {\r\n+\t\t//Create test array instance\r\n+\t\tIBeanList<BeanPropertyEReference<CategoryAssignment>> testList = new TypeSafeEReferenceArrayInstanceList<CategoryAssignment>();\r\n+\t\ttestList.setArrayInstance((ArrayInstance) helper.getPropertyInstance(PROPERTY_NAME));\r\n+\t\t\r\n+\t\t//Create new value\r\n+\t\tBeanPropertyEReference<CategoryAssignment> bean = new BeanPropertyEReference<CategoryAssignment>();\r\n+\t\tEReferencePropertyInstance eReferencePropertyInstance = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\teReferencePropertyInstance.setType(testProperty);\r\n+\t\tbean.setTypeInstance(eReferencePropertyInstance);\r\n+\t\tbean.setValue(testPropertyValue);\r\n+\t\t\r\n+\t\t//Add new value\r\n+\t\ttestList.add(bean);\r\n+\t\tassertEquals(\"Bean should have been added\", eReferencePropertyInstance.getUuid(), testList.getArrayInstance().getArrayInstances().get(0).getUuid());\r\n+\t\tassertEquals(\"Access via array shoud produce same result\", eReferencePropertyInstance.getUuid(), \r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjY2NA=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEwNTQ3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMTozNVrOFifdvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMTozNVrOFifdvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTQyMA==", "bodyText": "BeanPropertyEReference<ETYPE> bean = new BeanPropertyEReference<ETYPE>();", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711420", "createdAt": "2020-01-28T10:11:35Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEwODI0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMjoyNVrOFiffZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMjoyNVrOFiffZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTg0NQ==", "bodyText": "BeanPropertyEReference<ETYPE> bean = new BeanPropertyEReference<ETYPE>();", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711845", "createdAt": "2020-01-28T10:12:25Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r\n+\t\t\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\t\t\tbean.setATypeInstance(pi);\r\n+\t\t\t\tbeanList.add(bean);\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\r\n+\t\treturn beanList;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic Object[] toArray() {\r\n+\t\treturn getBeanList().toArray();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T> T[] toArray(T[] a) {\r\n+\t\treturn getBeanList().toArray(a);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected APropertyInstance createAddPi(BeanPropertyEReference<ETYPE> bean) {\r\n+\t\tEReferencePropertyInstance cpi;\r\n+\t\tif (bean.getTypeInstance() != null) {\r\n+\t\t\tcpi = bean.getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\tcpi = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\t}\r\n+\t\tcpi.setType(ai.getType());\r\n+\t\treturn cpi;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tprotected APropertyInstance createRemovePi(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance pi = bean.getTypeInstance();\r\n+\t\t\treturn pi;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean addAll(int index, Collection<? extends BeanPropertyEReference<ETYPE>> c) {\r\n+\t\tsuper.addAll(index, c);\r\n+\t\tList<APropertyInstance> addCas = new ArrayList<>();\r\n+\t\tc.forEach((bean) -> addCas.add(bean.getTypeInstance()));\r\n+\t\treturn ai.getArrayInstances().addAll(index, addCas);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean removeAll(Collection<?> c) {\r\n+\t\tsuper.removeAll(c);\r\n+\t\tboolean listChanged = false;\r\n+\t\tfor (Object bean : c) {\r\n+\t\t\tlistChanged |= remove(bean);\r\n+\t\t}\r\n+\t\treturn listChanged;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean retainAll(Collection<?> c) {\r\n+\t\tsuper.retainAll(c);\r\n+\t\t// First collect information of which CAs should be kept in the list\r\n+\t\tList<APropertyInstance> retainCas = new ArrayList<>();\r\n+\t\tc.forEach((object) -> {\r\n+\t\t\tif (object instanceof BeanPropertyEReference<?>) {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) object;\r\n+\t\t\t\tretainCas.add(bean.getTypeInstance());\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\t// Now loop over all current Beans and check for their CA\r\n+\t\t// In case it is not in the retain list remember it for removal\r\n+\t\tList<APropertyInstance> removeCas = new ArrayList<>();\r\n+\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\tif (!retainCas.contains(pi)) {\r\n+\t\t\t\tremoveCas.add(pi);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tai.getArrayInstances().removeAll(removeCas);\r\n+\t\t\r\n+\t\treturn !removeCas.isEmpty();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> get(int index) {\r\n+\t\tBeanPropertyEReference<ETYPE> bean = null;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODEwOTE2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMjo0M1rOFiff_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMjo0M1rOFiff_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMTk5OA==", "bodyText": "Superflous whitepace.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371711998", "createdAt": "2020-01-28T10:12:43Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/list/TypeSafeEReferenceArrayInstanceList.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.list;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyEReference;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesFactory;\r\n+\r\n+public class TypeSafeEReferenceArrayInstanceList<ETYPE extends EObject> extends AArrayInstanceList<BeanPropertyEReference<ETYPE>> {\r\n+\r\n+\tprotected Class<ETYPE> eClass;\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList() {\r\n+\t\tsuper();\r\n+\t}\r\n+\r\n+\tpublic TypeSafeEReferenceArrayInstanceList(ArrayInstance ai) {\r\n+\t\tsuper(ai);\r\n+\t}\r\n+\t\r\n+\t\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean contains(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> categoryBean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance ca = categoryBean.getTypeInstance();\r\n+\t\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\t\tif (pi.getUuid().equals(ca.getUuid())) {\r\n+\t\t\t\t\treturn true;\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * This method creates a list of beans from the\r\n+\t * internal representation of CategoryAssignments\r\n+\t * @return a List of Beans wrapping the CategoryAssignments\r\n+\t */\r\n+\tprivate List<BeanPropertyEReference<ETYPE>> getBeanList() {\r\n+\t\tList<BeanPropertyEReference<ETYPE>> beanList = new ArrayList<>();\r\n+\r\n+\t\tai.getArrayInstances().forEach((pi) -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean;\r\n+\t\t\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\t\t\tbean.setATypeInstance(pi);\r\n+\t\t\t\tbeanList.add(bean);\r\n+\t\t\t} catch (Exception e) {\r\n+\t\t\t\tthrow new RuntimeException(e);\r\n+\t\t\t}\r\n+\t\t});\r\n+\r\n+\t\treturn beanList;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic Object[] toArray() {\r\n+\t\treturn getBeanList().toArray();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic <T> T[] toArray(T[] a) {\r\n+\t\treturn getBeanList().toArray(a);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tprotected APropertyInstance createAddPi(BeanPropertyEReference<ETYPE> bean) {\r\n+\t\tEReferencePropertyInstance cpi;\r\n+\t\tif (bean.getTypeInstance() != null) {\r\n+\t\t\tcpi = bean.getTypeInstance();\r\n+\t\t} else {\r\n+\t\t\tcpi = PropertyinstancesFactory.eINSTANCE.createEReferencePropertyInstance();\r\n+\t\t}\r\n+\t\tcpi.setType(ai.getType());\r\n+\t\treturn cpi;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tprotected APropertyInstance createRemovePi(Object o) {\r\n+\t\tif (o instanceof BeanPropertyEReference<?>) {\r\n+\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) o;\r\n+\t\t\tAPropertyInstance pi = bean.getTypeInstance();\r\n+\t\t\treturn pi;\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean addAll(int index, Collection<? extends BeanPropertyEReference<ETYPE>> c) {\r\n+\t\tsuper.addAll(index, c);\r\n+\t\tList<APropertyInstance> addCas = new ArrayList<>();\r\n+\t\tc.forEach((bean) -> addCas.add(bean.getTypeInstance()));\r\n+\t\treturn ai.getArrayInstances().addAll(index, addCas);\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean removeAll(Collection<?> c) {\r\n+\t\tsuper.removeAll(c);\r\n+\t\tboolean listChanged = false;\r\n+\t\tfor (Object bean : c) {\r\n+\t\t\tlistChanged |= remove(bean);\r\n+\t\t}\r\n+\t\treturn listChanged;\r\n+\t}\r\n+\r\n+\t@SuppressWarnings(\"unchecked\")\r\n+\t@Override\r\n+\tpublic boolean retainAll(Collection<?> c) {\r\n+\t\tsuper.retainAll(c);\r\n+\t\t// First collect information of which CAs should be kept in the list\r\n+\t\tList<APropertyInstance> retainCas = new ArrayList<>();\r\n+\t\tc.forEach((object) -> {\r\n+\t\t\tif (object instanceof BeanPropertyEReference<?>) {\r\n+\t\t\t\tBeanPropertyEReference<ETYPE> bean = (BeanPropertyEReference<ETYPE>) object;\r\n+\t\t\t\tretainCas.add(bean.getTypeInstance());\r\n+\t\t\t}\r\n+\t\t});\r\n+\t\t\r\n+\t\t// Now loop over all current Beans and check for their CA\r\n+\t\t// In case it is not in the retain list remember it for removal\r\n+\t\tList<APropertyInstance> removeCas = new ArrayList<>();\r\n+\t\tfor (APropertyInstance pi : ai.getArrayInstances()) {\r\n+\t\t\tif (!retainCas.contains(pi)) {\r\n+\t\t\t\tremoveCas.add(pi);\r\n+\t\t\t}\r\n+\t\t}\r\n+\t\t\r\n+\t\tai.getArrayInstances().removeAll(removeCas);\r\n+\t\t\r\n+\t\treturn !removeCas.isEmpty();\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> get(int index) {\r\n+\t\tBeanPropertyEReference<ETYPE> bean = null;\r\n+\t\tbean = new BeanPropertyEReference<ETYPE>();\r\n+\t\tbean.setATypeInstance(ai.getArrayInstances().get(index));\r\n+\t\treturn bean;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic BeanPropertyEReference<ETYPE> set(int index, BeanPropertyEReference<ETYPE> element) {\r\n+\t\tsuper.set(index, element);\r\n+\t\tBeanPropertyEReference<ETYPE> oldBean = get(index);\r\n+\t\tai.getArrayInstances().set(index, element.getTypeInstance());\r\n+\t\treturn oldBean;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void add(int index, BeanPropertyEReference<ETYPE> element) {\r\n+\t\tsuper.add(index, element);\r\n+\t\tai.getArrayInstances().add(index, element.getTypeInstance());\r\n+\t}\r\n+\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODExMDg5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMzoxMVrOFifhEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMzoxMVrOFifhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjI3Mg==", "bodyText": "Maybe add a class description.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371712272", "createdAt": "2020-01-28T10:13:11Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/property/BeanPropertyEReference.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.types.property;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+\r\n+import de.dlr.sc.virsat.model.concept.types.ABeanObject;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+\r\n+/**\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODExMTY4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoxMzoyN1rOFifhmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo0ODozMlrOFjEFxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjQwOA==", "bodyText": "Author tag.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371712408", "createdAt": "2020-01-28T10:13:27Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import org.eclipse.emf.common.notify.AdapterFactory;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.general.IName;\r\n+\r\n+/**\r\n+ * Overrides the getText method for reference property instances\r\n+ * @author muel_s8\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMTQ5NA==", "bodyText": "@SaMuellerDLR Its yours \ud83e\udd23 :", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372311494", "createdAt": "2020-01-29T10:48:32Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/categories/propertyinstances/provider/DVLMERefererencePropertyInstanceItemProvider.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider;\r\n+\r\n+import org.eclipse.emf.common.notify.AdapterFactory;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.general.IName;\r\n+\r\n+/**\r\n+ * Overrides the getText method for reference property instances\r\n+ * @author muel_s8\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxMjQwOA=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODE1Mjg3OnYy", "diffSide": "LEFT", "path": "de.dlr.sc.virsat.model.extension.tests/concept/concept.concept", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyNTo1NFrOFif7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDoyNTo1NFrOFif7aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcxOTAxNw==", "bodyText": "I dont think we need to version increase the version everytime we change the test concept, since it is not meant for productive use. The 1.1 version is there just to fully test the concept level migration, I believe.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371719017", "createdAt": "2020-01-28T10:25:54Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model.extension.tests/concept/concept.concept", "diffHunk": "@@ -8,19 +8,20 @@\n  * SPDX-License-Identifier: EPL-2.0\r\n  *******************************************************************************/\r\n Concept de.dlr.sc.virsat.model.extension.tests \r\n-\tversion 1.1\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODM3ODIxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo0NDoxMlrOFiiEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo0NDoxMlrOFiiEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NDA4Mw==", "bodyText": "Maybe we can put this comment at the beginning of the if and not at the end?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371754083", "createdAt": "2020-01-28T11:44:12Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSetUtil.java", "diffHunk": "@@ -162,11 +163,15 @@ public static void removeDanglingReferences(Resource resource) {\n \t\t\tfor (Setting setting : settings) {\r\n \t\t\t\tEObject eContainer = setting.getEObject();\r\n \t\t\t\tEStructuralFeature eStructuralFeature = setting.getEStructuralFeature();\r\n-\t\t\t\tif (eStructuralFeature.isMany()) {\r\n-\t\t\t\t\t((EList<?>) eContainer.eGet(eStructuralFeature)).remove(proxy);\r\n-\t\t\t\t} else {\r\n-\t\t\t\t\teContainer.eUnset(eStructuralFeature);\r\n-\t\t\t\t}\r\n+\t\t\t\t\r\n+\t\t\t\tif (!eStructuralFeature.equals(PropertydefinitionsPackage.Literals.EREFERENCE_PROPERTY__REFERENCE_TYPE)) {\r\n+\t\t\t\t\tif (eStructuralFeature.isMany()) {\r\n+\t\t\t\t\t\t((EList<?>) eContainer.eGet(eStructuralFeature)).remove(proxy);\r\n+\t\t\t\t\t} else {\r\n+\t\t\t\t\t\teContainer.eUnset(eStructuralFeature);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} //Ignore external references\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODM4MDAyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo0NDo1NVrOFiiFgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo0NDo1NVrOFiiFgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NDM2OA==", "bodyText": "The description seems outdated.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371754368", "createdAt": "2020-01-28T11:44:55Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODM4NDQ2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTo0NjozNlrOFiiIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDozNzoxM1rOFnoXPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw==", "bodyText": "Just wondering: Do we need the null check here or can the Set.Command.create deal with this case by itself?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r371755077", "createdAt": "2020-01-28T11:46:36Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r\n+ * \r\n+ *\r\n+ */\r\n+public class EReferencePropertyCellEditingSupport extends APropertyCellEditingSupport {\r\n+\t\r\n+\tprivate ElementTreeSelectionDialog dialog;\r\n+\t\r\n+\t/**\r\n+\t * constructor for reference property cell editing support instantiate the referenced type\r\n+\t * @param editingDomain the editing domain\r\n+\t * @param viewer the column viewer\r\n+\t * @param property the referenced property\r\n+\t */\r\n+\tpublic EReferencePropertyCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer, EReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected CellEditor getCellEditor(Object element) {\r\n+\t\tComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);\r\n+\t\t\r\n+\t\tadapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMDVLMItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMStructuralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new GeneralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ConceptsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new RolesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new UnitsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMCategoriesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new PropertydefinitionsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMPropertyinstancesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());\r\n+\t\t\r\n+\t\tEReferencePropertyInstance propertyInstance = (EReferencePropertyInstance) caHelper.getPropertyInstance(propertyFqn);\r\n+\t\tEReferenceProperty propertyDefinition = ((EReferenceProperty) propertyInstance.getType());\r\n+\t\t\r\n+\t\tEReferencePropertyHelper propertyHelper = new EReferencePropertyHelper();\r\n+\t\t\r\n+\t\tSet<String> supportedFileExtensions = new HashSet<String>();\r\n+\t\tfinal EClass resolvedType = propertyHelper.getResolvedEClassType(propertyDefinition);\r\n+\t\tsupportedFileExtensions.add(propertyHelper.getEPackageOfType(propertyDefinition).getName());\r\n+\t\t\r\n+\t\teditor = new DialogCellEditor((Composite) viewer.getControl()) {\r\n+\t\t\t\r\n+\t\t\t@Override\r\n+\t\t\tprotected Object openDialogBox(Control cellEditorWindow) {\r\n+\t\t\t\tObject toSelect = getValue();\r\n+\t\t\t\tdialog = ReferenceSelectionDialog.createERefernceSelectionDialog(Display.getCurrent().getActiveShell(), resolvedType, supportedFileExtensions, adapterFactory);\r\n+\t\t\t\tdialog.setAllowMultiple(false);\r\n+\t\t\t\tdialog.setDoubleClickSelects(true);\r\n+\t\t\t\tsetReferenceDialogInput(propertyInstance.eResource());\r\n+\t\t\t\tdialog.setInitialSelection(toSelect);\r\n+\t\t\t\tif (dialog.open() == Dialog.OK) {\r\n+\t\t\t\t\tObject selection = dialog.getFirstResult();\r\n+\t\t\t\t\tif (selection instanceof ATypeInstance) {\r\n+\t\t\t\t\t\treturn dialog.getFirstResult();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} \r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t};\r\n+\t\treturn editor;\r\n+\t}\r\n+\t/**\r\n+\t * An overridable method to set dialog input\r\n+\t * @param input the input for the dialog\r\n+\t */\r\n+\tprotected void setReferenceDialogInput(Object input) {\r\n+\t\tdialog.setInput(input);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Object getValue(Object element) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tEObject value = ((EReferencePropertyInstance) propertyInstance).getReference();\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected boolean canEdit(Object element) {\r\n+\t\tboolean canEdit = createSetCommand(element, null).canExecute();\r\n+\t\treturn canEdit;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tif (propertyInstance != null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMjY2OA==", "bodyText": "Not sure, I'm doing that analog to how we handle it in the ReferencePropertyCellEditingSupport", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376002668", "createdAt": "2020-02-06T18:20:41Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r\n+ * \r\n+ *\r\n+ */\r\n+public class EReferencePropertyCellEditingSupport extends APropertyCellEditingSupport {\r\n+\t\r\n+\tprivate ElementTreeSelectionDialog dialog;\r\n+\t\r\n+\t/**\r\n+\t * constructor for reference property cell editing support instantiate the referenced type\r\n+\t * @param editingDomain the editing domain\r\n+\t * @param viewer the column viewer\r\n+\t * @param property the referenced property\r\n+\t */\r\n+\tpublic EReferencePropertyCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer, EReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected CellEditor getCellEditor(Object element) {\r\n+\t\tComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);\r\n+\t\t\r\n+\t\tadapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMDVLMItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMStructuralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new GeneralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ConceptsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new RolesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new UnitsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMCategoriesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new PropertydefinitionsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMPropertyinstancesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());\r\n+\t\t\r\n+\t\tEReferencePropertyInstance propertyInstance = (EReferencePropertyInstance) caHelper.getPropertyInstance(propertyFqn);\r\n+\t\tEReferenceProperty propertyDefinition = ((EReferenceProperty) propertyInstance.getType());\r\n+\t\t\r\n+\t\tEReferencePropertyHelper propertyHelper = new EReferencePropertyHelper();\r\n+\t\t\r\n+\t\tSet<String> supportedFileExtensions = new HashSet<String>();\r\n+\t\tfinal EClass resolvedType = propertyHelper.getResolvedEClassType(propertyDefinition);\r\n+\t\tsupportedFileExtensions.add(propertyHelper.getEPackageOfType(propertyDefinition).getName());\r\n+\t\t\r\n+\t\teditor = new DialogCellEditor((Composite) viewer.getControl()) {\r\n+\t\t\t\r\n+\t\t\t@Override\r\n+\t\t\tprotected Object openDialogBox(Control cellEditorWindow) {\r\n+\t\t\t\tObject toSelect = getValue();\r\n+\t\t\t\tdialog = ReferenceSelectionDialog.createERefernceSelectionDialog(Display.getCurrent().getActiveShell(), resolvedType, supportedFileExtensions, adapterFactory);\r\n+\t\t\t\tdialog.setAllowMultiple(false);\r\n+\t\t\t\tdialog.setDoubleClickSelects(true);\r\n+\t\t\t\tsetReferenceDialogInput(propertyInstance.eResource());\r\n+\t\t\t\tdialog.setInitialSelection(toSelect);\r\n+\t\t\t\tif (dialog.open() == Dialog.OK) {\r\n+\t\t\t\t\tObject selection = dialog.getFirstResult();\r\n+\t\t\t\t\tif (selection instanceof ATypeInstance) {\r\n+\t\t\t\t\t\treturn dialog.getFirstResult();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} \r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t};\r\n+\t\treturn editor;\r\n+\t}\r\n+\t/**\r\n+\t * An overridable method to set dialog input\r\n+\t * @param input the input for the dialog\r\n+\t */\r\n+\tprotected void setReferenceDialogInput(Object input) {\r\n+\t\tdialog.setInput(input);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Object getValue(Object element) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tEObject value = ((EReferencePropertyInstance) propertyInstance).getReference();\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected boolean canEdit(Object element) {\r\n+\t\tboolean canEdit = createSetCommand(element, null).canExecute();\r\n+\t\treturn canEdit;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tif (propertyInstance != null) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMDA5NQ==", "bodyText": "Alright.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r377100095", "createdAt": "2020-02-10T14:37:13Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/cellEditor/aproperties/EReferencePropertyCellEditingSupport.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.uiengine.ui.cellEditor.aproperties;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.emf.common.command.Command;\r\n+import org.eclipse.emf.common.command.UnexecutableCommand;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.edit.command.SetCommand;\r\n+import org.eclipse.emf.edit.domain.EditingDomain;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.viewers.CellEditor;\r\n+import org.eclipse.jface.viewers.ColumnViewer;\r\n+import org.eclipse.jface.viewers.DialogCellEditor;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Control;\r\n+import org.eclipse.swt.widgets.Display;\r\n+import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferencePropertyHelper;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.provider.PropertydefinitionsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.EReferencePropertyInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.PropertyinstancesPackage;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.provider.DVLMPropertyinstancesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.categories.provider.DVLMCategoriesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.provider.ConceptsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.general.provider.GeneralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMDVLMItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.roles.provider.RolesItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.structural.provider.DVLMStructuralItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.model.dvlm.units.provider.UnitsItemProviderAdapterFactory;\r\n+import de.dlr.sc.virsat.uiengine.ui.dialog.ReferenceSelectionDialog;\r\n+\r\n+/**\r\n+ * This class handles the functionality for creating a CellEditingSUpport for\r\n+ * IntPropertyInstances String PropertyInstances and FloatPropertyInstances\r\n+ * \r\n+ *\r\n+ */\r\n+public class EReferencePropertyCellEditingSupport extends APropertyCellEditingSupport {\r\n+\t\r\n+\tprivate ElementTreeSelectionDialog dialog;\r\n+\t\r\n+\t/**\r\n+\t * constructor for reference property cell editing support instantiate the referenced type\r\n+\t * @param editingDomain the editing domain\r\n+\t * @param viewer the column viewer\r\n+\t * @param property the referenced property\r\n+\t */\r\n+\tpublic EReferencePropertyCellEditingSupport(EditingDomain editingDomain, ColumnViewer viewer, EReferenceProperty property) {\r\n+\t\tsuper(editingDomain, viewer, property);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected CellEditor getCellEditor(Object element) {\r\n+\t\tComposedAdapterFactory adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);\r\n+\t\t\r\n+\t\tadapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMDVLMItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMStructuralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new GeneralItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ConceptsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new RolesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new UnitsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMCategoriesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new PropertydefinitionsItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new DVLMPropertyinstancesItemProviderAdapterFactory());\r\n+\t\tadapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());\r\n+\t\t\r\n+\t\tEReferencePropertyInstance propertyInstance = (EReferencePropertyInstance) caHelper.getPropertyInstance(propertyFqn);\r\n+\t\tEReferenceProperty propertyDefinition = ((EReferenceProperty) propertyInstance.getType());\r\n+\t\t\r\n+\t\tEReferencePropertyHelper propertyHelper = new EReferencePropertyHelper();\r\n+\t\t\r\n+\t\tSet<String> supportedFileExtensions = new HashSet<String>();\r\n+\t\tfinal EClass resolvedType = propertyHelper.getResolvedEClassType(propertyDefinition);\r\n+\t\tsupportedFileExtensions.add(propertyHelper.getEPackageOfType(propertyDefinition).getName());\r\n+\t\t\r\n+\t\teditor = new DialogCellEditor((Composite) viewer.getControl()) {\r\n+\t\t\t\r\n+\t\t\t@Override\r\n+\t\t\tprotected Object openDialogBox(Control cellEditorWindow) {\r\n+\t\t\t\tObject toSelect = getValue();\r\n+\t\t\t\tdialog = ReferenceSelectionDialog.createERefernceSelectionDialog(Display.getCurrent().getActiveShell(), resolvedType, supportedFileExtensions, adapterFactory);\r\n+\t\t\t\tdialog.setAllowMultiple(false);\r\n+\t\t\t\tdialog.setDoubleClickSelects(true);\r\n+\t\t\t\tsetReferenceDialogInput(propertyInstance.eResource());\r\n+\t\t\t\tdialog.setInitialSelection(toSelect);\r\n+\t\t\t\tif (dialog.open() == Dialog.OK) {\r\n+\t\t\t\t\tObject selection = dialog.getFirstResult();\r\n+\t\t\t\t\tif (selection instanceof ATypeInstance) {\r\n+\t\t\t\t\t\treturn dialog.getFirstResult();\r\n+\t\t\t\t\t}\r\n+\t\t\t\t} \r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\t\t\t\r\n+\t\t};\r\n+\t\treturn editor;\r\n+\t}\r\n+\t/**\r\n+\t * An overridable method to set dialog input\r\n+\t * @param input the input for the dialog\r\n+\t */\r\n+\tprotected void setReferenceDialogInput(Object input) {\r\n+\t\tdialog.setInput(input);\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Object getValue(Object element) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tEObject value = ((EReferencePropertyInstance) propertyInstance).getReference();\r\n+\t\treturn value;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected boolean canEdit(Object element) {\r\n+\t\tboolean canEdit = createSetCommand(element, null).canExecute();\r\n+\t\treturn canEdit;\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tprotected Command createSetCommand(Object element, Object userInputValue) {\r\n+\t\tAPropertyInstance propertyInstance = getPropertyInstance(element);\r\n+\t\tif (propertyInstance != null) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc1NTA3Nw=="}, "originalCommit": {"oid": "c0eea4176eacd1cb364f0b45cc5fb28fe0597bcb"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTg5ODcyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo0MDo0OVrOFjD3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjoyOTo1NVrOFm7k4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNzg2OA==", "bodyText": "Not sure, if this method should maybe placed into the CategoryHelper?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372307868", "createdAt": "2020-01-29T10:40:49Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.generator.ereference\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenPackage\r\n+import org.eclipse.emf.common.util.URI\r\n+import org.eclipse.emf.ecore.EPackage\r\n+import org.eclipse.emf.ecore.resource.Resource\r\n+import org.eclipse.emf.ecore.resource.ResourceSet\r\n+\r\n+class ExternalGenModelHelper {\r\n+\t\r\n+\t/**\r\n+\t * Get the full qualified java class name of property\r\n+\t */\r\n+\tdef getEObjectClass(EReferenceProperty property) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "921950a70a8e14748a67febbe27b71aaabd7cadc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM2NjMwNw==", "bodyText": "I think we only need it in the concept language generator... This method returns the Java class of the referenced EClass. I don't think it's relevant in the CategoryHelper? To get the EClass model element we have the EReferencePropertyHelper. (Which is analog to the EnumPropertyHelper we already have)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r376366307", "createdAt": "2020-02-07T12:29:55Z", "author": {"login": "franzTobiasDLR"}, "path": "de.dlr.sc.virsat.model.concept/src/de/dlr/sc/virsat/model/concept/generator/ereference/ExternalGenModelHelper.xtend", "diffHunk": "@@ -0,0 +1,85 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.concept.generator.ereference\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.categories.propertydefinitions.EReferenceProperty\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel\r\n+import org.eclipse.emf.codegen.ecore.genmodel.GenPackage\r\n+import org.eclipse.emf.common.util.URI\r\n+import org.eclipse.emf.ecore.EPackage\r\n+import org.eclipse.emf.ecore.resource.Resource\r\n+import org.eclipse.emf.ecore.resource.ResourceSet\r\n+\r\n+class ExternalGenModelHelper {\r\n+\t\r\n+\t/**\r\n+\t * Get the full qualified java class name of property\r\n+\t */\r\n+\tdef getEObjectClass(EReferenceProperty property) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNzg2OA=="}, "originalCommit": {"oid": "921950a70a8e14748a67febbe27b71aaabd7cadc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTkyNzI2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1MDoxNlrOFjEJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMDo1MDoxNlrOFjEJEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMxMjMzOA==", "bodyText": "maybe give a bit more explanation on why the uri is translated. I think it is a very important aspect.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/416#discussion_r372312338", "createdAt": "2020-01-29T10:50:16Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/concepts/registry/ActiveConceptConfigurationElement.java", "diffHunk": "@@ -143,6 +145,15 @@ private static Concept createActiveConcept(Concept concept, Repository repositor\n \t\t\t\r\n \t\t\t@Override\r\n \t\t\tpublic EObject get(Object key) {\r\n+\t\t\t\t\r\n+\t\t\t\t// For EReferences to external EClasses ignore concept \r\n+\t\t\t\t// activation and convert URIs instead\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "921950a70a8e14748a67febbe27b71aaabd7cadc"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 649, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}