{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTUwNDE1", "number": 644, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTowMzozN1rOEGTWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjoyNFrOEGV1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDQzODYwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/snippets/general/UiSnippetIName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTowMzozN1rOGlAzjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODozMTozOFrOGllIlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MzY5Mw==", "bodyText": "Should we use this constant in label creation below?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441463693", "createdAt": "2020-06-17T11:03:37Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/snippets/general/UiSnippetIName.java", "diffHunk": "@@ -40,7 +40,9 @@\n  */\r\n public class UiSnippetIName extends AUiEStructuralFeatureSectionSnippet implements IUiSnippet {\r\n \r\n-\tprivate static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String NAME_FIELD = \"Name\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1ODkwMg==", "bodyText": "Good idea!", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r442058902", "createdAt": "2020-06-18T08:31:38Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/snippets/general/UiSnippetIName.java", "diffHunk": "@@ -40,7 +40,9 @@\n  */\r\n public class UiSnippetIName extends AUiEStructuralFeatureSectionSnippet implements IUiSnippet {\r\n \r\n-\tprivate static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String SECTION_HEADING = \"Name Section\";\r\n+\tpublic static final String NAME_FIELD = \"Name\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2MzY5Mw=="}, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDgyOTQxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowMjoxOFrOGlEp5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODozOTo0OVrOGllcXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjc1OA==", "bodyText": "This looks weird but I guess there was a reason :D", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441526758", "createdAt": "2020-06-17T13:02:18Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section\n+\t\tnameSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no warning (i.e. all except the name section)\n+\t\t// and expands those with a warning (i.e. the name section)\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EMPTY_NAME_WARNING);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(nameSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EMPTY_NAME_WARNING, tooltip);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testErrorInGenericEditor() {\n+\t\t// Create sei with an error in a contained sei\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\tbot.closeAllEditors();\n+\t\topenEditor(ec);\n+\t\t\n+\t\t// Check that there is an error icon in the document table\n+\t\tSwtBotSection documentSection = getSWTBotSection(Document.class);\n+\t\tSWTBotTable documentTable = documentSection.getSWTBotTable();\n+\t\tSWTBotTableItem documentNameItem = documentTable.getTableItem(0).click(0);\n+\t\t\n+\t\tImage actualIcon = getImageForTableItem(documentNameItem);\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_ERROR);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the document section\n+\t\tdocumentSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no error (i.e. all except the document section)\n+\t\t// and expands those with an error (i.e. the document section)\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EXPEDTED_ERROR);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(documentSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EXPEDTED_ERROR, tooltip);\n+\t}\n+\t\n+\t/**\n+\t * Gets the currently expanded sections\n+\t * @return a list containing only expanded sections\n+\t */\n+\tprivate List<SwtBotSection> getExpandedSections() {\n+\t\tList<? extends Section> sections = bot.getFinder().findControls(widgetOfType(Section.class));\n+\t\tList<SwtBotSection> expandedSwtBotSections = sections.stream()\n+\t\t\t\t.map(SwtBotSection::new)\n+\t\t\t\t.filter(SwtBotSection::isExpanded)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn expandedSwtBotSections;\n+\t}\n+\t\n+\t/**\n+\t * Gets the warnings entry from the problem view\n+\t * @param countExpectedWarnings the expected number of warnings\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getWarnings(int countExpectedWarnings) {\n+\t\tString plural = (countExpectedWarnings > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Warnings (\" + countExpectedWarnings + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the error entry from the problem view\n+\t * @param countExpectedErrors the expected number of errors\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getErrors(int countExpectedErrors) {\n+\t\tString plural = (countExpectedErrors > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Errors (\" + countExpectedErrors + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the image of a table item\n+\t * @param swtBotTableItem the swtbot table item\n+\t * @return the image of the table item\n+\t */\n+\tprivate Image getImageForTableItem(SWTBotTableItem swtBotTableItem) {\n+\t\tList<Image> image = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA2Mzk2Nw==", "bodyText": "I found a cleaner way to do it.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r442063967", "createdAt": "2020-06-18T08:39:49Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section\n+\t\tnameSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no warning (i.e. all except the name section)\n+\t\t// and expands those with a warning (i.e. the name section)\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EMPTY_NAME_WARNING);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(nameSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EMPTY_NAME_WARNING, tooltip);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testErrorInGenericEditor() {\n+\t\t// Create sei with an error in a contained sei\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\tbot.closeAllEditors();\n+\t\topenEditor(ec);\n+\t\t\n+\t\t// Check that there is an error icon in the document table\n+\t\tSwtBotSection documentSection = getSWTBotSection(Document.class);\n+\t\tSWTBotTable documentTable = documentSection.getSWTBotTable();\n+\t\tSWTBotTableItem documentNameItem = documentTable.getTableItem(0).click(0);\n+\t\t\n+\t\tImage actualIcon = getImageForTableItem(documentNameItem);\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_ERROR);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the document section\n+\t\tdocumentSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no error (i.e. all except the document section)\n+\t\t// and expands those with an error (i.e. the document section)\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EXPEDTED_ERROR);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(documentSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EXPEDTED_ERROR, tooltip);\n+\t}\n+\t\n+\t/**\n+\t * Gets the currently expanded sections\n+\t * @return a list containing only expanded sections\n+\t */\n+\tprivate List<SwtBotSection> getExpandedSections() {\n+\t\tList<? extends Section> sections = bot.getFinder().findControls(widgetOfType(Section.class));\n+\t\tList<SwtBotSection> expandedSwtBotSections = sections.stream()\n+\t\t\t\t.map(SwtBotSection::new)\n+\t\t\t\t.filter(SwtBotSection::isExpanded)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\treturn expandedSwtBotSections;\n+\t}\n+\t\n+\t/**\n+\t * Gets the warnings entry from the problem view\n+\t * @param countExpectedWarnings the expected number of warnings\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getWarnings(int countExpectedWarnings) {\n+\t\tString plural = (countExpectedWarnings > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Warnings (\" + countExpectedWarnings + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the error entry from the problem view\n+\t * @param countExpectedErrors the expected number of errors\n+\t * @return the warning entry\n+\t */\n+\tprivate SWTBotTreeItem getErrors(int countExpectedErrors) {\n+\t\tString plural = (countExpectedErrors > 1) ? \"s\" : \"\";\n+\t\treturn problemView.bot().tree().getTreeItem(\"Errors (\" + countExpectedErrors + \" item\" + plural + \")\");\n+\t}\n+\t\n+\t/**\n+\t * Gets the image of a table item\n+\t * @param swtBotTableItem the swtbot table item\n+\t * @return the image of the table item\n+\t */\n+\tprivate Image getImageForTableItem(SWTBotTableItem swtBotTableItem) {\n+\t\tList<Image> image = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjc1OA=="}, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDgzNjQ5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNDoxM1rOGlEuiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNDoxM1rOGlEuiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNzk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// Unexpand the document section\n          \n          \n            \n            \t\t// Collapse the document section", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441527944", "createdAt": "2020-06-17T13:04:13Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section\n+\t\tnameSection.click();\n+\t\t\n+\t\t// Check that clicking the header link collapses all sections which have no warning (i.e. all except the name section)\n+\t\t// and expands those with a warning (i.e. the name section)\n+\t\tSwtBotHyperlink swtBotHyperlink = getSWTBotHyperlink(EMPTY_NAME_WARNING);\n+\t\tswtBotHyperlink.click();\n+\t\t\n+\t\tList<SwtBotSection> expandedSwtBotSections = getExpandedSections();\n+\t\tassertEquals(1, expandedSwtBotSections.size());\n+\t\tassertSameWidget(nameSection.widget, expandedSwtBotSections.get(0).widget);\n+\t\t\n+\t\t// Check that the header label has the right tooltip text\n+\t\tString tooltip = swtBotHyperlink.getToolTipText();\n+\t\tassertEquals(EMPTY_NAME_WARNING, tooltip);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testErrorInGenericEditor() {\n+\t\t// Create sei with an error in a contained sei\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\tbot.closeAllEditors();\n+\t\topenEditor(ec);\n+\t\t\n+\t\t// Check that there is an error icon in the document table\n+\t\tSwtBotSection documentSection = getSWTBotSection(Document.class);\n+\t\tSWTBotTable documentTable = documentSection.getSWTBotTable();\n+\t\tSWTBotTableItem documentNameItem = documentTable.getTableItem(0).click(0);\n+\t\t\n+\t\tImage actualIcon = getImageForTableItem(documentNameItem);\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_ERROR);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the document section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg0NTYxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjoyNFrOGlE0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzowNjoyNFrOGlE0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// Unexpand the name section\n          \n          \n            \n            \t\t// Collapse the name section", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/644#discussion_r441529400", "createdAt": "2020-06-17T13:06:24Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.swtbot.test/src/de/dlr/sc/virsat/swtbot/test/ValidatorTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.swtbot.test;\n+\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertSameWidget;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertText;\n+import static org.eclipse.swtbot.swt.finder.SWTBotAssert.assertVisible;\n+import static org.eclipse.swtbot.swt.finder.finders.UIThreadRunnable.syncExec;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;\n+import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.withTooltip;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.core.resources.IMarker;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swtbot.eclipse.finder.widgets.SWTBotView;\n+import org.eclipse.swtbot.swt.finder.results.BoolResult;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotLabel;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTable;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTableItem;\n+import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;\n+import org.eclipse.ui.forms.widgets.Section;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.build.marker.ui.MarkerImageProvider;\n+import de.dlr.sc.virsat.build.validator.core.DvlmNamingConventionValidator;\n+import de.dlr.sc.virsat.model.extension.ps.model.ConfigurationTree;\n+import de.dlr.sc.virsat.model.extension.ps.model.Document;\n+import de.dlr.sc.virsat.model.extension.ps.model.ElementConfiguration;\n+import de.dlr.sc.virsat.project.ui.perspective.CorePerspective;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotHyperlink;\n+import de.dlr.sc.virsat.swtbot.util.SwtBotSection;\n+import de.dlr.sc.virsat.uiengine.ui.editor.snippets.general.UiSnippetIName;\n+\n+public class ValidatorTest extends ASwtBotTestCase {\n+\t\n+\tpublic static final String EMPTY_NAME_WARNING = DvlmNamingConventionValidator.WARNING_PREFIX + DvlmNamingConventionValidator.WARNING_EMPTY_NAME_SUFFIX;\t\t\n+\t\n+\tprivate SWTBotTreeItem repositoryNavigatorItem;\n+\tprivate SWTBotView problemView;\n+\t\n+\t@Before\n+\tpublic void before() throws Exception {\n+\t\tsuper.before();\n+\t\trepositoryNavigatorItem = bot.tree().expandNode(SWTBOT_TEST_PROJECTNAME, \"Repository\");\n+\t\tproblemView = openView(CorePerspective.ID_PROBLEM_VIEW);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateSeiName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\t// Create relevant problematic seis in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(dotSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(noCamelCaseSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei1 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameSei2 = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(duplicateNameSei2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on a warning should open the editor of the correct sei which is checked via the name field\n+\t\twarnings.expand();\n+\t\twarnings.getNode(EMPTY_NAME_WARNING).doubleClick();\n+\t\tassertText(\"\", bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\t\n+\t@Test\n+\tpublic void testValidateCaName() {\n+\t\t// Initially there are no warnings\n+\t\tassertFalse(problemView.bot().tree().hasItems());\n+\t\t\n+\t\t// Create seis with incorrect names and then close the editors\n+\t\tSWTBotTreeItem ct = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\tSWTBotTreeItem ec = addElement(ElementConfiguration.class, conceptPs, ct);\n+\t\t\n+\t\t// Create relevant problematic cas in one test case to keep overhead time in swtbot low\n+\t\tSWTBotTreeItem emptyCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(emptyCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\t\n+\t\tSWTBotTreeItem dotCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(dotCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \".\");\n+\t\t\n+\t\tSWTBotTreeItem noCamelCaseCa = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(noCamelCaseCa);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"12\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa1 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa1);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tSWTBotTreeItem duplicateNameCa2 = addElement(Document.class, conceptPs, ec);\n+\t\topenEditor(duplicateNameCa2);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"duplicateName\");\n+\t\t\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\tbot.closeAllEditors();\n+\t\t\n+\t\t// There should now exist a warning for every incorrect validation, except for\n+\t\t// the no dots rule violation which is an error\n+\t\tfinal int COUNT_EXPECTED_WARNINGS = 4;\n+\t\tSWTBotTreeItem warnings = getWarnings(COUNT_EXPECTED_WARNINGS);\n+\t\tassertNotNull(warnings);\n+\t\t\n+\t\tfinal int COUNT_EXPECTED_ERRORS = 1;\n+\t\tSWTBotTreeItem errors = getErrors(COUNT_EXPECTED_ERRORS);\n+\t\tassertNotNull(errors);\n+\t\t\n+\t\t// Double clicking on an error should open the editor of the containing sei\n+\t\terrors.expand();\n+\t\tfinal String EXPEDTED_ERROR = DvlmNamingConventionValidator.WARNING_PREFIX \n+\t\t\t\t+ ConfigurationTree.class.getSimpleName() + \".\"\n+\t\t\t\t+ ElementConfiguration.class.getSimpleName() + \"..\"\n+\t\t\t\t+ DvlmNamingConventionValidator.WARNING_DOTS_SUFFIX;\n+\t\terrors.getNode(EXPEDTED_ERROR).doubleClick();\n+\t\tassertText(ElementConfiguration.class.getSimpleName(), bot.textWithLabel(UiSnippetIName.NAME_FIELD));\n+\t}\n+\n+\t@Test\n+\tpublic void testWarningInGenericEditor() {\n+\t\t// Create sei with some warning\n+\t\tSWTBotTreeItem emptyNameSei = addElement(ConfigurationTree.class, conceptPs, repositoryNavigatorItem);\n+\t\topenEditor(emptyNameSei);\n+\t\trenameField(UiSnippetIName.NAME_FIELD, \"\");\n+\t\tbuildCounter.executeInterlocked(() -> bot.saveAllEditors());\n+\t\t\n+\t\t// Check that there is a warning icon with the correct tooltip in the name section\n+\t\t// Note that icons are implemented via label with image\n+\t\tSwtBotSection nameSection = getSWTBotSection(UiSnippetIName.SECTION_HEADING);\n+\t\tList<Label> iconLabels = bot.getFinder()\n+\t\t\t\t.findControls(nameSection.widget, allOf(widgetOfType(Label.class), withTooltip(EMPTY_NAME_WARNING)), true);\n+\t\tSWTBotLabel swtIcon = new SWTBotLabel(iconLabels.get(0));\n+\t\tImage actualIcon = swtIcon.image();\n+\t\tImage expectedIcon = new MarkerImageProvider(null).getProblemImageForSeverity(IMarker.SEVERITY_WARNING);\n+\t\t\n+\t\tassertVisible(swtIcon);\n+\t\tassertEquals(expectedIcon, actualIcon);\n+\t\t\n+\t\t// Unexpand the name section", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625b075ba8eb888191d5ae3b4ff34e9c8d597fba"}, "originalPosition": 183}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}