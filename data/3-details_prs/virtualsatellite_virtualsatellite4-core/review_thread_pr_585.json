{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MzA5MzY4", "number": 585, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozMjoxNFrOD3G6rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNzowN1rOD3HCkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTExNTk3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/structural/util/StructuralElementInstanceHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozMjoxNFrOGNLUFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzowNjo1MlrOGNyNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MDAzNg==", "bodyText": "Are we really interested in checking the type here or is it just a question of null/non-null?\nwhile (parent != null && selectedToBeDeleted.contains(parent) { ... } and if (parent != null) { ... } would be easier to read.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416470036", "createdAt": "2020-04-28T09:32:14Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/structural/util/StructuralElementInstanceHelper.java", "diffHunk": "@@ -108,4 +111,25 @@ public ICategoryAssignmentContainer getRoot() {\n \t\t}\r\n \t\treturn superSeis;\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Creates a new list which does not contain SEIs that are marked for deletion whose parents are also marked for deletion\r\n+\t * for example, A contains B, and both are selected for deletion. In this case we need to remove B as it will be deleted anyway with A\r\n+\t * @param seisToDelete Collection of SEIs that are selected for deletion\r\n+\t * @return list of SEIs without children that will be deleted anyway\r\n+\t */\r\n+\tpublic static ArrayList<StructuralElementInstance> cleanFromIndirectSelectedChildren(Collection<StructuralElementInstance> seisToDelete) {\r\n+\t\tSet<EObject> selectedToBeDeleted = new HashSet<>(seisToDelete);\r\n+\t\tArrayList<StructuralElementInstance> seisToDeleteWithoutDuplicateChildren = new ArrayList<>();\r\n+\t\tfor (StructuralElementInstance sei : seisToDelete) {\r\n+\t\t\tEObject parent = sei.eContainer();\r\n+\t\t\twhile (parent instanceof StructuralElementInstance && !selectedToBeDeleted.contains(parent)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5OTA5MQ==", "bodyText": "No idea, I just moved and tested the already existing code. We have to investigate this.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r417099091", "createdAt": "2020-04-29T06:47:45Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/structural/util/StructuralElementInstanceHelper.java", "diffHunk": "@@ -108,4 +111,25 @@ public ICategoryAssignmentContainer getRoot() {\n \t\t}\r\n \t\treturn superSeis;\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Creates a new list which does not contain SEIs that are marked for deletion whose parents are also marked for deletion\r\n+\t * for example, A contains B, and both are selected for deletion. In this case we need to remove B as it will be deleted anyway with A\r\n+\t * @param seisToDelete Collection of SEIs that are selected for deletion\r\n+\t * @return list of SEIs without children that will be deleted anyway\r\n+\t */\r\n+\tpublic static ArrayList<StructuralElementInstance> cleanFromIndirectSelectedChildren(Collection<StructuralElementInstance> seisToDelete) {\r\n+\t\tSet<EObject> selectedToBeDeleted = new HashSet<>(seisToDelete);\r\n+\t\tArrayList<StructuralElementInstance> seisToDeleteWithoutDuplicateChildren = new ArrayList<>();\r\n+\t\tfor (StructuralElementInstance sei : seisToDelete) {\r\n+\t\t\tEObject parent = sei.eContainer();\r\n+\t\t\twhile (parent instanceof StructuralElementInstance && !selectedToBeDeleted.contains(parent)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MDAzNg=="}, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwMzAyNw==", "bodyText": "I think the way it is implemented is fine:\nEObject parent = sei.eContainer(); while (parent instanceof StructuralElementInstance && !selectedToBeDeleted.contains(parent)) { parent = parent.eContainer(); }\nparent is of type EObject. Even though our data model won't return anything else than a SEI or null, it is not practically checked when just using null checks. I think spotbugs may complain and we would have to introduce the type checking somewhere else. I can maybe add a comment to explain what is meant here.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r417103027", "createdAt": "2020-04-29T06:57:13Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/structural/util/StructuralElementInstanceHelper.java", "diffHunk": "@@ -108,4 +111,25 @@ public ICategoryAssignmentContainer getRoot() {\n \t\t}\r\n \t\treturn superSeis;\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Creates a new list which does not contain SEIs that are marked for deletion whose parents are also marked for deletion\r\n+\t * for example, A contains B, and both are selected for deletion. In this case we need to remove B as it will be deleted anyway with A\r\n+\t * @param seisToDelete Collection of SEIs that are selected for deletion\r\n+\t * @return list of SEIs without children that will be deleted anyway\r\n+\t */\r\n+\tpublic static ArrayList<StructuralElementInstance> cleanFromIndirectSelectedChildren(Collection<StructuralElementInstance> seisToDelete) {\r\n+\t\tSet<EObject> selectedToBeDeleted = new HashSet<>(seisToDelete);\r\n+\t\tArrayList<StructuralElementInstance> seisToDeleteWithoutDuplicateChildren = new ArrayList<>();\r\n+\t\tfor (StructuralElementInstance sei : seisToDelete) {\r\n+\t\t\tEObject parent = sei.eContainer();\r\n+\t\t\twhile (parent instanceof StructuralElementInstance && !selectedToBeDeleted.contains(parent)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MDAzNg=="}, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwNzI1Nw==", "bodyText": "Looking deeper into the method, it looks like the algorithm is not correct. Therefore back to WIP.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r417107257", "createdAt": "2020-04-29T07:06:52Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.model/src/de/dlr/sc/virsat/model/dvlm/structural/util/StructuralElementInstanceHelper.java", "diffHunk": "@@ -108,4 +111,25 @@ public ICategoryAssignmentContainer getRoot() {\n \t\t}\r\n \t\treturn superSeis;\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * Creates a new list which does not contain SEIs that are marked for deletion whose parents are also marked for deletion\r\n+\t * for example, A contains B, and both are selected for deletion. In this case we need to remove B as it will be deleted anyway with A\r\n+\t * @param seisToDelete Collection of SEIs that are selected for deletion\r\n+\t * @return list of SEIs without children that will be deleted anyway\r\n+\t */\r\n+\tpublic static ArrayList<StructuralElementInstance> cleanFromIndirectSelectedChildren(Collection<StructuralElementInstance> seisToDelete) {\r\n+\t\tSet<EObject> selectedToBeDeleted = new HashSet<>(seisToDelete);\r\n+\t\tArrayList<StructuralElementInstance> seisToDeleteWithoutDuplicateChildren = new ArrayList<>();\r\n+\t\tfor (StructuralElementInstance sei : seisToDelete) {\r\n+\t\t\tEObject parent = sei.eContainer();\r\n+\t\t\twhile (parent instanceof StructuralElementInstance && !selectedToBeDeleted.contains(parent)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MDAzNg=="}, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEyMjM4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/CreateRemoveSeiWithFileStructureCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozMzo1NFrOGNLYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjoyNDo0NlrOGNxM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MTA2Nw==", "bodyText": "Can we use the executeAsCommand(...) here?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416471067", "createdAt": "2020-04-28T09:33:54Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/CreateRemoveSeiWithFileStructureCommandTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.command;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasItems;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class CreateRemoveSeiWithFileStructureCommandTest extends AProjectTestCase {\n+\t\n+\tStructuralElement se;\n+\t\n+\tStructuralElementInstance sei1;\n+\tStructuralElementInstance sei2;\n+\tStructuralElementInstance sei3;\n+\t\n+\tIFolder seiFolder1;\n+\tIFolder seiFolder2;\n+\tIFolder seiFolder3;\n+\t\n+\tResource resourceSei1;\n+\tResource resourceSei2;\n+\tResource resourceSei3;\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\taddEditingDomainAndRepository();\n+\n+\t\teditingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5MDc2OA==", "bodyText": "Absolutely! Forgot that we provided this back in the days...", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r417090768", "createdAt": "2020-04-29T06:24:46Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/CreateRemoveSeiWithFileStructureCommandTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.command;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasItems;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class CreateRemoveSeiWithFileStructureCommandTest extends AProjectTestCase {\n+\t\n+\tStructuralElement se;\n+\t\n+\tStructuralElementInstance sei1;\n+\tStructuralElementInstance sei2;\n+\tStructuralElementInstance sei3;\n+\t\n+\tIFolder seiFolder1;\n+\tIFolder seiFolder2;\n+\tIFolder seiFolder3;\n+\t\n+\tResource resourceSei1;\n+\tResource resourceSei2;\n+\tResource resourceSei3;\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\taddEditingDomainAndRepository();\n+\n+\t\teditingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MTA2Nw=="}, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEyMzczOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/CreateRemoveSeiWithFileStructureCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDoxM1rOGNLY-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDoxM1rOGNLY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MTI5MA==", "bodyText": "Can be removed.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416471290", "createdAt": "2020-04-28T09:34:13Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/CreateRemoveSeiWithFileStructureCommandTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.command;\n+\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasItems;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.Repository;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElement;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class CreateRemoveSeiWithFileStructureCommandTest extends AProjectTestCase {\n+\t\n+\tStructuralElement se;\n+\t\n+\tStructuralElementInstance sei1;\n+\tStructuralElementInstance sei2;\n+\tStructuralElementInstance sei3;\n+\t\n+\tIFolder seiFolder1;\n+\tIFolder seiFolder2;\n+\tIFolder seiFolder3;\n+\t\n+\tResource resourceSei1;\n+\tResource resourceSei2;\n+\tResource resourceSei3;\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\taddEditingDomainAndRepository();\n+\n+\t\teditingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {\n+\t\t\t@Override\n+\t\t\tprotected void doExecute() {\n+\t\t\t\tse = StructuralFactory.eINSTANCE.createStructuralElement();\n+\t\t\t\tse.setIsApplicableForAll(true);\n+\t\t\t\tse.setIsRootStructuralElement(true);\n+\t\t\t\t\n+\t\t\t\t// Now create a SEI for testing and embed it into the TransactionalEditingDomain \n+\t\t\t\tsei1 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\t\t\tsei2 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\t\t\tsei3 = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\t\t\t\n+\t\t\t\tsei1.setType(se);\n+\t\t\t\tsei2.setType(se);\n+\t\t\t\tsei3.setType(se);\n+\t\t\t\t\n+\t\t\t\trepository.getRootEntities().add(sei1);\n+\t\t\t\tsei1.getChildren().add(sei2);\n+\t\t\t\tsei2.getChildren().add(sei3);\n+\t\t\t\t\n+\t\t\t\tprojectCommons.createFolderStructure(sei1, null);\n+\t\t\t\tprojectCommons.createFolderStructure(sei2, null);\n+\t\t\t\tprojectCommons.createFolderStructure(sei3, null);\n+\t\t\t\t\n+\t\t\t\tseiFolder1 = projectCommons.getStructuralElemntInstanceFolder(sei1);\n+\t\t\t\tseiFolder2 = projectCommons.getStructuralElemntInstanceFolder(sei2);\n+\t\t\t\tseiFolder3 = projectCommons.getStructuralElemntInstanceFolder(sei3);\n+\t\t\t\t\n+\t\t\t\tresourceSei1 = rs.getStructuralElementInstanceResource(sei1);\n+\t\t\t\tresourceSei2 = rs.getStructuralElementInstanceResource(sei2);\n+\t\t\t\tresourceSei3 = rs.getStructuralElementInstanceResource(sei3);\n+\t\t\t\t\n+\t\t\t\tresourceSei1.getContents().add(sei1);\n+\t\t\t\tresourceSei1.getContents().add(sei2);\n+\t\t\t\tresourceSei1.getContents().add(sei3);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws CoreException {\n+\t\tsuper.tearDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEyNjU4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDo1MFrOGNLajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDo1MFrOGNLajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MTY5NA==", "bodyText": "Can we use the executeAsCommand(...) here?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416471694", "createdAt": "2020-04-28T09:34:50Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommandTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.command;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.commands.ExecutionException;\n+import org.eclipse.core.commands.operations.AbstractOperation;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IAdaptable;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class RemoveFileStructureCommandTest extends AProjectTestCase {\n+\n+\tStructuralElementInstance testSei;\n+\tIFolder testSeiFolder;\n+\t\n+\tpublic static class TestDeleteOperation extends AbstractOperation {\n+\n+\t\tpublic TestDeleteOperation() {\n+\t\t\tsuper(\"Delete Operation\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus execute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus redo(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus undo(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canExecute() {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canRedo() {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canUndo() {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\t\n+\t\taddEditingDomainAndRepository();\n+\n+\t\teditingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEyNzAzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDo1N1rOGNLazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNDo1N1rOGNLazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MTc1OA==", "bodyText": "Can be removed.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416471758", "createdAt": "2020-04-28T09:34:57Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommandTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.command;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.core.commands.ExecutionException;\n+import org.eclipse.core.commands.operations.AbstractOperation;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IAdaptable;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.emf.common.command.Command;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.transaction.RecordingCommand;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralFactory;\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class RemoveFileStructureCommandTest extends AProjectTestCase {\n+\n+\tStructuralElementInstance testSei;\n+\tIFolder testSeiFolder;\n+\t\n+\tpublic static class TestDeleteOperation extends AbstractOperation {\n+\n+\t\tpublic TestDeleteOperation() {\n+\t\t\tsuper(\"Delete Operation\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus execute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus redo(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IStatus undo(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n+\t\t\tfail(\"Should not have been called\");\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canExecute() {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canRedo() {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic boolean canUndo() {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\t\n+\t\taddEditingDomainAndRepository();\n+\n+\t\teditingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {\n+\t\t\t@Override\n+\t\t\tprotected void doExecute() {\n+\t\t\t\t// Now create a SEI for testing and embed it into the TransactionalEditingDomain \n+\t\t\t\ttestSei = StructuralFactory.eINSTANCE.createStructuralElementInstance();\n+\t\t\t\tprojectCommons.createFolderStructure(testSei, null);\n+\t\t\t\ttestSeiFolder = projectCommons.getStructuralElemntInstanceFolder(testSei);\n+\t\t\t\tResource resource = rs.getStructuralElementInstanceResource(testSei);\n+\t\t\t\tresource.getContents().add(testSei);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws CoreException {\n+\t\tsuper.tearDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEyOTI5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/operation/NoUndoDeleteResourceOperationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNTozMlrOGNLcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNTozMlrOGNLcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MjEwMg==", "bodyText": "Can be removed.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416472102", "createdAt": "2020-04-28T09:35:32Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project.test/src/de/dlr/sc/virsat/project/structure/operation/NoUndoDeleteResourceOperationTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.project.structure.operation;\n+\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.eclipse.core.commands.ExecutionException;\n+import org.eclipse.core.commands.operations.AbstractOperation;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Status;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.project.test.AProjectTestCase;\n+\n+public class NoUndoDeleteResourceOperationTest extends AProjectTestCase {\n+\n+\tIFolder testFolder;\n+\tIFolder testSubFolder; \n+\t\n+\t@Before\n+\tpublic void setUp() throws CoreException {\n+\t\tsuper.setUp();\n+\t\ttestFolder = testProject.getFolder(\"testFolder\");\n+\t\ttestSubFolder = testFolder.getFolder(\"testSubFolder\");\n+\t\t\n+\t\ttestFolder.create(true, true, null);\n+\t\ttestSubFolder.create(true, true, null);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws CoreException  {\n+\t\tsuper.tearDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTEzNjE5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTozNzowN1rOGNLgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNjozODoyN1rOGNxfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MzE3Mw==", "bodyText": "Could we maybe move the triggerSaveAll() into the executeExclusive(...) method since its logically needed in all cases?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r416473173", "createdAt": "2020-04-28T09:37:07Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommand.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.project.structure.command;\r\n+\r\n+import java.util.function.Function;\r\n+\r\n+import org.eclipse.core.commands.ExecutionException;\r\n+import org.eclipse.core.resources.IFolder;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.command.AbstractCommand;\r\n+import org.eclipse.core.commands.operations.AbstractOperation;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.util.command.IVirSatRecordableCommand;\r\n+import de.dlr.sc.virsat.project.Activator;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.operation.NoUndoDeleteResourceOperation;\r\n+\r\n+/**\r\n+ * This class wraps the IDE Workspace Operation of Deleting the folder of a SEI\r\n+ * By this the deletion is undoable restoring the full content including files\r\n+ * in the SEIs document folder\r\n+ *\r\n+ */\r\n+public class RemoveFileStructureCommand extends AbstractCommand implements IVirSatRecordableCommand {\r\n+\r\n+\tpublic static final Function<IFolder,  ? extends AbstractOperation> DELETE_RESOURCE_OPERATION_FUNCTION\r\n+\t\t= (iFolder) -> new NoUndoDeleteResourceOperation(iFolder, true);\r\n+\t\r\n+\tprivate VirSatProjectCommons projectCommons;\r\n+\tprivate AbstractOperation deleteResourceOperation;\r\n+\tprivate VirSatTransactionalEditingDomain editingDomain;\r\n+\t\r\n+\t/**\r\n+\t * Constructor for creating a command that removes the file structure from a given SEI in the workspace\r\n+\t * @param selectedProject the selected project\r\n+\t * @param iste {@link IStructuralTreeElement}\r\n+\t * @param deleteResourcesOperationFunction the callback function that is used to create the actual delete operation in the workspace\r\n+\t */\r\n+\tpublic RemoveFileStructureCommand(IProject selectedProject, StructuralElementInstance iste, Function<IFolder, ? extends AbstractOperation> deleteResourcesOperationFunction) {\r\n+\t\tprojectCommons = new VirSatProjectCommons(selectedProject);\r\n+\t\tIFolder seiFolder = projectCommons.getStructuralElemntInstanceFolder(iste);\r\n+\t\tthis.deleteResourceOperation = deleteResourcesOperationFunction.apply(seiFolder);\r\n+\t\teditingDomain = VirSatEditingDomainRegistry.INSTANCE.getEd(iste);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Wrapper method to exclusively execute a runner in the Virtual Satellite Editing Domain\r\n+\t * @param runnable The runnable to be executed\r\n+\t */\r\n+\tprotected void executeExclusive(Runnable runnable) {\r\n+\t\ttry {\r\n+\t\t\teditingDomain.runExclusive(runnable);\r\n+\t\t} catch (InterruptedException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), \"Failed to Delete SEI folder structure!\", e));\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute() {\r\n+\t\texecuteExclusive(() -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tdeleteResourceOperation.execute(null, null);\r\n+\t\t\t\teditingDomain.getVirSatCommandStack().triggerSaveAll();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA5NTU4Nw==", "bodyText": "Let's give it a try. When i fixed the SWTBot for stability, I realized that these changes easily ended up in deadlocks. Since we solved our deadlock issues, it is worth giving it a try. SWTBot should bail out in case things are bad.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/585#discussion_r417095587", "createdAt": "2020-04-29T06:38:27Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/structure/command/RemoveFileStructureCommand.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.project.structure.command;\r\n+\r\n+import java.util.function.Function;\r\n+\r\n+import org.eclipse.core.commands.ExecutionException;\r\n+import org.eclipse.core.resources.IFolder;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.command.AbstractCommand;\r\n+import org.eclipse.core.commands.operations.AbstractOperation;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n+import de.dlr.sc.virsat.model.dvlm.util.command.IVirSatRecordableCommand;\r\n+import de.dlr.sc.virsat.project.Activator;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatEditingDomainRegistry;\r\n+import de.dlr.sc.virsat.project.editingDomain.VirSatTransactionalEditingDomain;\r\n+import de.dlr.sc.virsat.project.structure.VirSatProjectCommons;\r\n+import de.dlr.sc.virsat.project.structure.operation.NoUndoDeleteResourceOperation;\r\n+\r\n+/**\r\n+ * This class wraps the IDE Workspace Operation of Deleting the folder of a SEI\r\n+ * By this the deletion is undoable restoring the full content including files\r\n+ * in the SEIs document folder\r\n+ *\r\n+ */\r\n+public class RemoveFileStructureCommand extends AbstractCommand implements IVirSatRecordableCommand {\r\n+\r\n+\tpublic static final Function<IFolder,  ? extends AbstractOperation> DELETE_RESOURCE_OPERATION_FUNCTION\r\n+\t\t= (iFolder) -> new NoUndoDeleteResourceOperation(iFolder, true);\r\n+\t\r\n+\tprivate VirSatProjectCommons projectCommons;\r\n+\tprivate AbstractOperation deleteResourceOperation;\r\n+\tprivate VirSatTransactionalEditingDomain editingDomain;\r\n+\t\r\n+\t/**\r\n+\t * Constructor for creating a command that removes the file structure from a given SEI in the workspace\r\n+\t * @param selectedProject the selected project\r\n+\t * @param iste {@link IStructuralTreeElement}\r\n+\t * @param deleteResourcesOperationFunction the callback function that is used to create the actual delete operation in the workspace\r\n+\t */\r\n+\tpublic RemoveFileStructureCommand(IProject selectedProject, StructuralElementInstance iste, Function<IFolder, ? extends AbstractOperation> deleteResourcesOperationFunction) {\r\n+\t\tprojectCommons = new VirSatProjectCommons(selectedProject);\r\n+\t\tIFolder seiFolder = projectCommons.getStructuralElemntInstanceFolder(iste);\r\n+\t\tthis.deleteResourceOperation = deleteResourcesOperationFunction.apply(seiFolder);\r\n+\t\teditingDomain = VirSatEditingDomainRegistry.INSTANCE.getEd(iste);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Wrapper method to exclusively execute a runner in the Virtual Satellite Editing Domain\r\n+\t * @param runnable The runnable to be executed\r\n+\t */\r\n+\tprotected void executeExclusive(Runnable runnable) {\r\n+\t\ttry {\r\n+\t\t\teditingDomain.runExclusive(runnable);\r\n+\t\t} catch (InterruptedException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), \"Failed to Delete SEI folder structure!\", e));\r\n+\t\t}\r\n+\t}\r\n+\t\r\n+\t@Override\r\n+\tpublic void execute() {\r\n+\t\texecuteExclusive(() -> {\r\n+\t\t\ttry {\r\n+\t\t\t\tdeleteResourceOperation.execute(null, null);\r\n+\t\t\t\teditingDomain.getVirSatCommandStack().triggerSaveAll();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MzE3Mw=="}, "originalCommit": {"oid": "c4360be36b68528f8de5107232599f8cbf12addf"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 729, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}