{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDkzMTEz", "number": 514, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowOTozOFrODlCYbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMzowNlrODlCdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYyOTI0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowOTozOFrOFxsk0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowOTozOFrOFxsk0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NDg2NA==", "bodyText": "sued -> used", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387654864", "createdAt": "2020-03-04T13:09:38Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1187,34 +1137,41 @@ public Resource createResource(URI uri) {\n \t * Updates the resources diagnostic entry in the resourceToDiagnosticMap\r\n \t * \r\n \t * @param resource the resource of which to update the diagnostic\r\n+\t * @return true in case that the resource to diagnostics map has been changed\r\n \t */\r\n \tpublic boolean updateDiagnostic(Resource resource) {\r\n \t\tboolean changes = false;\r\n \t\tif (resource != null) {\r\n-\t\t\tDiagnostic diagnostic = analyzeResourceProblems(resource);\r\n-\r\n-\t\t\tfor (EObject eObject : resource.getContents()) {\r\n-\t\t\t\tif (eObject != null) {\r\n-\t\t\t\t\tEObject resolvedEObject = EcoreUtil.resolve(eObject, this);\r\n-\t\t\t\t\tdiagnostic = analyzeModelProblems(resolvedEObject, diagnostic);\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n+\t\t\t// Run individualDiagnostics and merge them\r\n \t\t\t\r\n-\t\t\tif (diagnostic.getSeverity() != Diagnostic.OK) {\r\n-\t\t\t\tresourceToDiagnosticMap.put(resource, diagnostic);\r\n+\t\t\tBasicDiagnostic resourceDiagnostic = analyzeResourceProblems(resource);\r\n+\t\t\tBasicDiagnostic resourceNullDiagnostic = analyzeResourceNullProblems(resource);\r\n+\t\t\tresourceDiagnostic.merge(resourceNullDiagnostic);\r\n+\t\t\t// In case there are null objects which should not be in the resource\r\n+\t\t\t// something went seriously wrong. No other analysis has to be executed\r\n+\t\t\t// If there are no null diagnostics, continue with the other checks\r\n+\t\t\tif (resourceDiagnostic.getSeverity() == Diagnostic.OK) {\r\n+\t\t\t\tBasicDiagnostic modelDiagnostic = analyzeModelProblems(resource);\r\n+\t\t\t\tresourceDiagnostic.merge(modelDiagnostic);\r\n+\t\t\t}\r\n+\r\n+\t\t\t// Now check severity levels, and set the diagnostics map accordingly\r\n+\t\t\t// The map will be sued by the editors to display the error messages etc.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYzMzk2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMDo1NlrOFxsnfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMDo1NlrOFxsnfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTU1MA==", "bodyText": "create -> creates", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387655550", "createdAt": "2020-03-04T13:10:56Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1224,61 +1181,101 @@ public boolean updateDiagnostic(Resource resource) {\n \t}\r\n \r\n \t/**\r\n-\t * This method create EMF Diagnostics on the Model Object\r\n+\t * Returns a diagnostic describing the errors and warnings listed in the\r\n+\t * resource and the specified exception (if any).\r\n \t * \r\n-\t * @param eObject\r\n-\t *            The object to check for issues\r\n-\t * @param resourceDiagnostics\r\n-\t *            resource diagnostics which should be merged with the new\r\n-\t *            Diagnostics\r\n-\t * @return merged diagnostics including new ones on the actual object or the\r\n-\t *         previous resource diagnostics\r\n+\t * @param resource the resource\r\n+\t * @return the diagnostic describing error/warning\r\n \t */\r\n-\tpublic Diagnostic analyzeModelProblems(EObject eObject, Diagnostic resourceDiagnostics) {\r\n-\t\tif (eObject.eIsProxy()) {\r\n-\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\"Could not resolve Object, Object seems to be pending\", new Object[] { eObject });\r\n-\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\treturn basicDiagnostic;\r\n-\t\t}\r\n+\tpublic BasicDiagnostic analyzeResourceProblems(Resource resource) {\r\n+\t\tboolean hasErrors = !resource.getErrors().isEmpty();\r\n+\t\tboolean hasWarnings = !resource.getWarnings().isEmpty();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now process the diagnostics that are part of the resource\r\n+\t\tif (hasErrors || hasWarnings) {\r\n+\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\thasErrors ? Diagnostic.ERROR : Diagnostic.WARNING,\r\n+\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\"Problems encountered in resource: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\tnew Object[] { resource }\r\n+\t\t\t));\r\n+\t\t\t\r\n+\t\t\t// Compute the diagnostics from the resource and add them to the given one.\r\n+\t\t\treturnDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\r\n+\t\t} \r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n \r\n-\t\tMap<EObject, Collection<Setting>> externalCrossReferences = EcoreUtil.ExternalCrossReferencer.find(eObject);\r\n-\t\tfor (EObject referencedEObject : externalCrossReferences.keySet()) {\r\n-\t\t\tResource resource = referencedEObject.eResource();\r\n-\t\t\tif (resource == null) {\r\n-\t\t\t\t// Only consider external cross references that are directly contained by the resource\r\n-\t\t\t\t// of the eObject. This is important for SEIs since here we have containment references. \r\n-\t\t\t\t// If they are not ignored, external dangling references of child seis are are considered\r\n-\t\t\t\t// dangling references of the parent.\r\n-\t\t\t\tList<EObject> referencingObjectsInResource = new ArrayList<>();\r\n-\t\t\t\tCollection<Setting> settings = externalCrossReferences.get(referencedEObject);\r\n-\t\t\t\tfor (Setting setting : settings) {\r\n-\t\t\t\t\tEObject referencingObject = setting.getEObject();\r\n-\t\t\t\t\tif (referencingObject.eResource() == eObject.eResource()) {\r\n-\t\t\t\t\t\treferencingObjectsInResource.add(referencingObject);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n+\t/**\r\n+\t * Analyzes the resource on special null errors. We have seen some rare cases,\r\n+\t * where NPEs were caused by resource content which was null. Usually this should\r\n+\t * never happen in EMF, still this check will report in case such issues may happen again\r\n+\t * @param resource the resource to be checked\r\n+\t * @return The diagnostics regarding null content in a resource\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeResourceNullProblems(Resource resource) {\r\n+\t\tList<EObject> resourceContents = resource.getContents();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Null Diagnostics:\");\r\n+\t\t\r\n+\t\t// Loop over the contents to detect a null\r\n+\t\tfor (EObject object : resourceContents) {\r\n+\t\t\tif (object == null) {\r\n+\t\t\t\t// Add a diagnostic\r\n+\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\tDiagnostic.ERROR,\r\n+\t\t\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\t\t\"Error! Found NULL object in resource content: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\t\t\tnew Object[] { resource }\r\n+\t\t\t\t\t));\r\n \t\t\t\t\r\n-\t\t\t\tif (!referencingObjectsInResource.isEmpty()) {\r\n-\t\t\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"Found uncontained object of potentialy dangling reference\", new Object[] { eObject });\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tfor (EObject referencingObject : referencingObjectsInResource) {\r\n-\t\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\t\"From: \" + referencingObject.toString(),\r\n-\t\t\t\t\t\t\t\tnew Object[] { referencingObject }));\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"To: \" +  referencedEObject.toString(),\r\n-\t\t\t\t\t\t\tnew Object[] { referencedEObject }));\r\n-\t\t\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\t\t\treturn basicDiagnostic;\r\n-\t\t\t\t}\r\n+\t\t\t\t// Log the result\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(\r\n+\t\t\t\t\tStatus.ERROR,\r\n+\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\"Found NULL object in Resource content: \" + resource.getURI().toPlatformString(true)\r\n+\t\t\t\t));\r\n+\t\t\t\t\r\n+\t\t\t\t// don't test the other objects anymore. One diagnostic about a null object is enough\r\n+\t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t}\r\n-\r\n-\t\treturn resourceDiagnostics;\r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method create EMF Diagnostics on the Model Object in case of detected problems\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYzNjMyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMTozNVrOFxso_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMTozNVrOFxso_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NTkzNQ==", "bodyText": "in due sentence seems unfinished.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387655935", "createdAt": "2020-03-04T13:11:35Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.project/src/de/dlr/sc/virsat/project/resources/VirSatResourceSet.java", "diffHunk": "@@ -1224,61 +1181,101 @@ public boolean updateDiagnostic(Resource resource) {\n \t}\r\n \r\n \t/**\r\n-\t * This method create EMF Diagnostics on the Model Object\r\n+\t * Returns a diagnostic describing the errors and warnings listed in the\r\n+\t * resource and the specified exception (if any).\r\n \t * \r\n-\t * @param eObject\r\n-\t *            The object to check for issues\r\n-\t * @param resourceDiagnostics\r\n-\t *            resource diagnostics which should be merged with the new\r\n-\t *            Diagnostics\r\n-\t * @return merged diagnostics including new ones on the actual object or the\r\n-\t *         previous resource diagnostics\r\n+\t * @param resource the resource\r\n+\t * @return the diagnostic describing error/warning\r\n \t */\r\n-\tpublic Diagnostic analyzeModelProblems(EObject eObject, Diagnostic resourceDiagnostics) {\r\n-\t\tif (eObject.eIsProxy()) {\r\n-\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\"Could not resolve Object, Object seems to be pending\", new Object[] { eObject });\r\n-\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\treturn basicDiagnostic;\r\n-\t\t}\r\n+\tpublic BasicDiagnostic analyzeResourceProblems(Resource resource) {\r\n+\t\tboolean hasErrors = !resource.getErrors().isEmpty();\r\n+\t\tboolean hasWarnings = !resource.getWarnings().isEmpty();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now process the diagnostics that are part of the resource\r\n+\t\tif (hasErrors || hasWarnings) {\r\n+\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\thasErrors ? Diagnostic.ERROR : Diagnostic.WARNING,\r\n+\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\"Problems encountered in resource: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\tnew Object[] { resource }\r\n+\t\t\t));\r\n+\t\t\t\r\n+\t\t\t// Compute the diagnostics from the resource and add them to the given one.\r\n+\t\t\treturnDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));\r\n+\t\t} \r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n \r\n-\t\tMap<EObject, Collection<Setting>> externalCrossReferences = EcoreUtil.ExternalCrossReferencer.find(eObject);\r\n-\t\tfor (EObject referencedEObject : externalCrossReferences.keySet()) {\r\n-\t\t\tResource resource = referencedEObject.eResource();\r\n-\t\t\tif (resource == null) {\r\n-\t\t\t\t// Only consider external cross references that are directly contained by the resource\r\n-\t\t\t\t// of the eObject. This is important for SEIs since here we have containment references. \r\n-\t\t\t\t// If they are not ignored, external dangling references of child seis are are considered\r\n-\t\t\t\t// dangling references of the parent.\r\n-\t\t\t\tList<EObject> referencingObjectsInResource = new ArrayList<>();\r\n-\t\t\t\tCollection<Setting> settings = externalCrossReferences.get(referencedEObject);\r\n-\t\t\t\tfor (Setting setting : settings) {\r\n-\t\t\t\t\tEObject referencingObject = setting.getEObject();\r\n-\t\t\t\t\tif (referencingObject.eResource() == eObject.eResource()) {\r\n-\t\t\t\t\t\treferencingObjectsInResource.add(referencingObject);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n+\t/**\r\n+\t * Analyzes the resource on special null errors. We have seen some rare cases,\r\n+\t * where NPEs were caused by resource content which was null. Usually this should\r\n+\t * never happen in EMF, still this check will report in case such issues may happen again\r\n+\t * @param resource the resource to be checked\r\n+\t * @return The diagnostics regarding null content in a resource\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeResourceNullProblems(Resource resource) {\r\n+\t\tList<EObject> resourceContents = resource.getContents();\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Resource Null Diagnostics:\");\r\n+\t\t\r\n+\t\t// Loop over the contents to detect a null\r\n+\t\tfor (EObject object : resourceContents) {\r\n+\t\t\tif (object == null) {\r\n+\t\t\t\t// Add a diagnostic\r\n+\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\tDiagnostic.ERROR,\r\n+\t\t\t\t\t\tActivator.getPluginId(), 0,\r\n+\t\t\t\t\t\t\"Error! Found NULL object in resource content: \" + resource.getURI().toPlatformString(true),\r\n+\t\t\t\t\t\tnew Object[] { resource }\r\n+\t\t\t\t\t));\r\n \t\t\t\t\r\n-\t\t\t\tif (!referencingObjectsInResource.isEmpty()) {\r\n-\t\t\t\t\tBasicDiagnostic basicDiagnostic = new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"Found uncontained object of potentialy dangling reference\", new Object[] { eObject });\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tfor (EObject referencingObject : referencingObjectsInResource) {\r\n-\t\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\t\"From: \" + referencingObject.toString(),\r\n-\t\t\t\t\t\t\t\tnew Object[] { referencingObject }));\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\t\r\n-\t\t\t\t\tbasicDiagnostic.add(new BasicDiagnostic(Diagnostic.ERROR, Activator.getPluginId(), 0,\r\n-\t\t\t\t\t\t\t\"To: \" +  referencedEObject.toString(),\r\n-\t\t\t\t\t\t\tnew Object[] { referencedEObject }));\r\n-\t\t\t\t\tbasicDiagnostic.merge(resourceDiagnostics);\r\n-\t\t\t\t\treturn basicDiagnostic;\r\n-\t\t\t\t}\r\n+\t\t\t\t// Log the result\r\n+\t\t\t\tActivator.getDefault().getLog().log(new Status(\r\n+\t\t\t\t\tStatus.ERROR,\r\n+\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\"Found NULL object in Resource content: \" + resource.getURI().toPlatformString(true)\r\n+\t\t\t\t));\r\n+\t\t\t\t\r\n+\t\t\t\t// don't test the other objects anymore. One diagnostic about a null object is enough\r\n+\t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t}\r\n-\r\n-\t\treturn resourceDiagnostics;\r\n+\t\t\r\n+\t\treturn returnDiagnostic;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * This method create EMF Diagnostics on the Model Object in case of detected problems\r\n+\t * \r\n+\t * @param resource The resource to be checked for model issues\r\n+\t * @return the diagnostic on model issues\r\n+\t */\r\n+\tpublic BasicDiagnostic analyzeModelProblems(Resource resource) {\r\n+\t\tBasicDiagnostic returnDiagnostic = VirSatEcoreUtil.createDiagnosticOk(\"Model Diagnostics:\");\r\n+\t\t\r\n+\t\t// Now check the state of each eObject if it can be resolved and if it is contained\r\n+\t\tEcoreUtil.getAllProperContents(resource, true).forEachRemaining((object) -> {\r\n+\t\t\tif (object instanceof EObject) {\r\n+\t\t\t\tEObject eObject = (EObject) object;\r\n+\r\n+\t\t\t\t// Check all cross references\r\n+\t\t\t\teObject.eCrossReferences().forEach((eReferencedObject) -> {\r\n+\t\t\t\t\t// Check containment of all other objects\r\n+\t\t\t\t\tif (eReferencedObject.eResource() == null) {\r\n+\t\t\t\t\t\treturnDiagnostic.merge(new BasicDiagnostic(\r\n+\t\t\t\t\t\t\t\tDiagnostic.WARNING,\r\n+\t\t\t\t\t\t\t\tActivator.getPluginId(),\r\n+\t\t\t\t\t\t\t\t0,\r\n+\t\t\t\t\t\t\t\t\"Found a dangling reference in due to uncontained object. Press save to fix.\",\r\n+\t\t\t\t\t\t\t\tnew Object[] { eReferencedObject, eObject }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY0MjIyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/GenericEditor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxMzowNlrOFxssdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNjozN1rOF_GfJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjgyMw==", "bodyText": "Just for clarity: According to the new code I think we would stay on the error page in the case of a warning.\nIs this intended?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r387656823", "createdAt": "2020-03-04T13:13:06Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/GenericEditor.java", "diffHunk": "@@ -587,7 +587,7 @@ protected void addPages() {\n \t\t}\r\n \r\n \t\tDiagnostic diagnostic = editingDomain.getResourceSet().getResourceToDiagnosticsMap().get(resource);\r\n-\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() == Diagnostic.ERROR;\r\n+\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() != Diagnostic.OK;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzOTMxOQ==", "bodyText": "Yes this is intended. We want to react to warnings as well. It is also not staying on the page, but prominently showing it.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r401639319", "createdAt": "2020-04-01T14:01:59Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/GenericEditor.java", "diffHunk": "@@ -587,7 +587,7 @@ protected void addPages() {\n \t\t}\r\n \r\n \t\tDiagnostic diagnostic = editingDomain.getResourceSet().getResourceToDiagnosticsMap().get(resource);\r\n-\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() == Diagnostic.ERROR;\r\n+\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() != Diagnostic.OK;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjgyMw=="}, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMDg4Nw==", "bodyText": "Alright", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/514#discussion_r401710887", "createdAt": "2020-04-01T15:36:37Z", "author": {"login": "SaMuellerDLR"}, "path": "de.dlr.sc.virsat.uiengine.ui/src/de/dlr/sc/virsat/uiengine/ui/editor/GenericEditor.java", "diffHunk": "@@ -587,7 +587,7 @@ protected void addPages() {\n \t\t}\r\n \r\n \t\tDiagnostic diagnostic = editingDomain.getResourceSet().getResourceToDiagnosticsMap().get(resource);\r\n-\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() == Diagnostic.ERROR;\r\n+\t\tboolean hasErrors = diagnostic != null && diagnostic.getSeverity() != Diagnostic.OK;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1NjgyMw=="}, "originalCommit": {"oid": "990453e592e2d5ca70dc9a1bb665ed11fe827a17"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 694, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}