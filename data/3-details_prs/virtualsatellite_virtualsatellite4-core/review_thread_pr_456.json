{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODg4MTYw", "number": 456, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoyNlrODdVIzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0Nzo0MVrODdZ2oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgxNjE0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.excel.test/src/de/dlr/sc/virsat/excel/ExcelExporterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoyNlrOFl3nww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoyNzoyNlrOFl3nww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1MjkzMQ==", "bodyText": "Let's stick to the newlines at the end of files", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375252931", "createdAt": "2020-02-05T13:27:26Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.excel.test/src/de/dlr/sc/virsat/excel/ExcelExporterTest.java", "diffHunk": "@@ -80,12 +74,12 @@ public void testCanExport() throws CoreException {\n \t\tboolean canExportObject = exporter.canExport(new Object());\r\n \t\tassertFalse(\"String exporter cannot export an Object\", canExportObject);\r\n \t}\r\n-\t\r\n+\r\n \t@Test\r\n \tpublic void testExport() throws CoreException {\r\n \t\tExcelExporter exporter = new ExcelExporter(registry);\r\n \t\tassertFalse(executed);\r\n \t\texporter.export(null, null, false, null);\r\n \t\tassertTrue(executed);\r\n \t}\r\n-}\r\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTQ3NjYxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.excel/src/de/dlr/sc/virsat/excel/fault/IFaultType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoxODoyMVrOFl-C1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTo0NDowMFrOFmYSCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1ODE2Nw==", "bodyText": "Let's add a short comment explaining why this interface is empty", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375358167", "createdAt": "2020-02-05T16:18:21Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.excel/src/de/dlr/sc/virsat/excel/fault/IFaultType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.excel.fault;\r\n+\r\n+/**\r\n+ * This interface is for all possible faults which can happen during import\r\n+ */\r\n+public interface IFaultType {\r\n+\t\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4ODA0MA==", "bodyText": "@andriikovalov-dlr I added something as an explanation, but I am not sure if it is oky. Could you please check it?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375788040", "createdAt": "2020-02-06T11:44:00Z", "author": {"login": "ALEhmerDLR"}, "path": "de.dlr.sc.virsat.excel/src/de/dlr/sc/virsat/excel/fault/IFaultType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.excel.fault;\r\n+\r\n+/**\r\n+ * This interface is for all possible faults which can happen during import\r\n+ */\r\n+public interface IFaultType {\r\n+\t\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1ODE2Nw=="}, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTUyNzU3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.funcelectrical/src/de/dlr/sc/virsat/model/extension/funcelectrical/excel/exporter/FuncElecExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozMTowOFrOFl-jVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozMTowOFrOFl-jVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NjQ4NQ==", "bodyText": "Let's maybe rename it to seis?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375366485", "createdAt": "2020-02-05T16:31:08Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.funcelectrical/src/de/dlr/sc/virsat/model/extension/funcelectrical/excel/exporter/FuncElecExporter.java", "diffHunk": "@@ -42,69 +43,60 @@\n import de.dlr.sc.virsat.model.extension.ps.model.ElementOccurence;\r\n import de.dlr.sc.virsat.model.extension.ps.model.ElementRealization;\r\n \r\n-\r\n-\r\n-\r\n /**\r\n  * Class for exporting excel\r\n- * @author bell_er\r\n- *\r\n  */\r\n public class FuncElecExporter implements IExport {\r\n \tprivate final String defaultTemplatePath = \"/resources/ExcelExportTemplate.xlsx\";\r\n \tprivate ExcelExportHelper helper;\r\n \r\n-\tpublic static final String[] EXPORTABLE_SEIS = { \r\n+\tpublic static final String[] EXPORTABLE_SEIS = {\r\n \t\t\tElementDefinition.class.getSimpleName(),\r\n-\t\t\tElementConfiguration.class.getSimpleName(), \r\n-\t\t\tInterfaceTypeCollection.class.getSimpleName(), \r\n+\t\t\tElementConfiguration.class.getSimpleName(),\r\n+\t\t\tInterfaceTypeCollection.class.getSimpleName(),\r\n \t\t\tElementRealization.class.getSimpleName(),\r\n \t\t\tElementOccurence.class.getSimpleName()\r\n \t};\r\n+\r\n \t@Override\r\n \tpublic void export(EObject eObject, String path, boolean useDefaultTemplate, String templatePath) {\r\n \t\tStructuralElementInstance parentSc = (StructuralElementInstance) eObject;\r\n-\t\tArrayList <StructuralElementInstance> allSei = new ArrayList<StructuralElementInstance>();\r\n-\t\tallSei.add(parentSc);\r\n-\t\tallSei.addAll(parentSc.getDeepChildren());\r\n-\t\tfor (StructuralElementInstance sc : allSei) {\r\n-\t\t\tString selectedSEIType = sc.getType().getName();\r\n+\t\tArrayList <StructuralElementInstance> seiList = new ArrayList<StructuralElementInstance>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU2Nzk2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.funcelectrical/src/de/dlr/sc/virsat/model/extension/funcelectrical/excel/exporter/FuncElecExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MTo1OFrOFl-9Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MTo1OFrOFl-9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MzExOQ==", "bodyText": "Let's use System.lineSeparator() instead of \\n", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375373119", "createdAt": "2020-02-05T16:41:58Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.funcelectrical/src/de/dlr/sc/virsat/model/extension/funcelectrical/excel/exporter/FuncElecExporter.java", "diffHunk": "@@ -42,69 +43,60 @@\n import de.dlr.sc.virsat.model.extension.ps.model.ElementOccurence;\r\n import de.dlr.sc.virsat.model.extension.ps.model.ElementRealization;\r\n \r\n-\r\n-\r\n-\r\n /**\r\n  * Class for exporting excel\r\n- * @author bell_er\r\n- *\r\n  */\r\n public class FuncElecExporter implements IExport {\r\n \tprivate final String defaultTemplatePath = \"/resources/ExcelExportTemplate.xlsx\";\r\n \tprivate ExcelExportHelper helper;\r\n \r\n-\tpublic static final String[] EXPORTABLE_SEIS = { \r\n+\tpublic static final String[] EXPORTABLE_SEIS = {\r\n \t\t\tElementDefinition.class.getSimpleName(),\r\n-\t\t\tElementConfiguration.class.getSimpleName(), \r\n-\t\t\tInterfaceTypeCollection.class.getSimpleName(), \r\n+\t\t\tElementConfiguration.class.getSimpleName(),\r\n+\t\t\tInterfaceTypeCollection.class.getSimpleName(),\r\n \t\t\tElementRealization.class.getSimpleName(),\r\n \t\t\tElementOccurence.class.getSimpleName()\r\n \t};\r\n+\r\n \t@Override\r\n \tpublic void export(EObject eObject, String path, boolean useDefaultTemplate, String templatePath) {\r\n \t\tStructuralElementInstance parentSc = (StructuralElementInstance) eObject;\r\n-\t\tArrayList <StructuralElementInstance> allSei = new ArrayList<StructuralElementInstance>();\r\n-\t\tallSei.add(parentSc);\r\n-\t\tallSei.addAll(parentSc.getDeepChildren());\r\n-\t\tfor (StructuralElementInstance sc : allSei) {\r\n-\t\t\tString selectedSEIType = sc.getType().getName();\r\n+\t\tArrayList <StructuralElementInstance> seiList = new ArrayList<StructuralElementInstance>();\r\n+\t\tseiList.add(parentSc);\r\n+\t\tseiList.addAll(parentSc.getDeepChildren());\r\n+\t\tfor (StructuralElementInstance sei : seiList) {\r\n+\t\t\tString selectedSEIType = sei.getType().getName();\r\n \t\t\tif (Stream.of(EXPORTABLE_SEIS).anyMatch(exportable -> exportable.equals(selectedSEIType))) {\r\n-\t\t\t\tInputStream is = null;\r\n+\t\t\t\tInputStream iStream = null;\r\n \t\t\t\ttry {\r\n \t\t\t\t\tif (useDefaultTemplate) {\r\n-\t\t\t\t\t\tis = Activator.getResourceContentAsString(defaultTemplatePath);\r\n+\t\t\t\t\t\tiStream = Activator.getResourceContentAsString(defaultTemplatePath);\r\n \t\t\t\t\t} else {\r\n-\t\t\t\t\t\tis = Activator.getResourceContentAsString(templatePath);\r\n+\t\t\t\t\t\tiStream = Activator.getResourceContentAsString(templatePath);\r\n \t\t\t\t\t}\r\n-\t\t\t\t} catch (IOException e) {\r\n-\t\t\t\t\tActivator.getDefault().getLog().log(new Status(Status.WARNING, Activator.getPluginId(), \"Could not locate the template file\"));\r\n-\t\t\t\t}\r\n-\t\t\t\texport(sc, is);\r\n-\r\n-\t\t\t\tFile file = new File(path + \"/\" + sc.getFullQualifiedInstanceName() + \".xlsx\");\r\n-\t\t\t\ttry {\r\n+\t\t\t\t\texport(sei, iStream);\r\n+\t\t\t\t\tFile file = new File(path + \"/\" + sei.getFullQualifiedInstanceName() + \".xlsx\");\r\n \t\t\t\t\tFileOutputStream out = new FileOutputStream(file);\r\n \t\t\t\t\thelper.getWb().write(out);\r\n \t\t\t\t} catch (IOException e) {\r\n-\t\t\t\t\tStatus status = new Status(Status.ERROR, Activator.getPluginId(), \"Failed to perform an export operation! \", e);\r\n+\t\t\t\t\tStatus status = new Status(Status.ERROR, Activator.getPluginId(), \"Failed to perform an export operation! \\n\" + e.getMessage(), e);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU4ODgwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.model.extension.statemachines/src/de/dlr/sc/virsat/model/extension/statemachines/excel/exporter/StateMachineExporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0Nzo0MVrOFl_Ksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0Nzo0MVrOFl_Ksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NjU2Mg==", "bodyText": "Let's use System.lineSeparator() here", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/456#discussion_r375376562", "createdAt": "2020-02-05T16:47:41Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.model.extension.statemachines/src/de/dlr/sc/virsat/model/extension/statemachines/excel/exporter/StateMachineExporter.java", "diffHunk": "@@ -23,78 +23,66 @@\n import org.eclipse.jface.dialogs.ErrorDialog;\r\n import org.eclipse.swt.widgets.Display;\r\n \r\n-import de.dlr.sc.virsat.excel.AExcelIo;\r\n import de.dlr.sc.virsat.excel.exporter.ExcelExportHelper;\r\n import de.dlr.sc.virsat.excel.exporter.IExport;\r\n import de.dlr.sc.virsat.model.concept.list.IBeanList;\r\n import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r\n import de.dlr.sc.virsat.model.dvlm.structural.StructuralElementInstance;\r\n import de.dlr.sc.virsat.model.extension.statemachines.Activator;\r\n+import de.dlr.sc.virsat.model.extension.statemachines.excel.AExcelStatIO;\r\n import de.dlr.sc.virsat.model.extension.statemachines.model.State;\r\n import de.dlr.sc.virsat.model.extension.statemachines.model.StateMachine;\r\n import de.dlr.sc.virsat.model.extension.statemachines.model.Transition;\r\n \r\n-\r\n-\r\n-\r\n /**\r\n  * Class for exporting excel\r\n- * @author bell_er\r\n- *\r\n  */\r\n-public class StateMachineExporter extends ExcelExportHelper implements IExport {\r\n-\t\r\n-\tCategoryAssignment exportCa;\r\n-\t\r\n+public class StateMachineExporter implements IExport {\r\n+\tExcelExportHelper helper = new ExcelExportHelper();\r\n+\tprivate CategoryAssignment exportCa;\r\n+\r\n \t@Override\r\n \tpublic void export(EObject eObject, String path, boolean useDefaultTemplate, String templatePath) {\r\n-\t\tif (eObject instanceof CategoryAssignment) {\t\t\r\n+\t\tif (eObject instanceof CategoryAssignment) {\r\n \t\t\tCategoryAssignment ca = (CategoryAssignment) eObject;\r\n \t\t\tfinal String defaultTemplatePath = \"/resources/StateMachineExportTemplate.xlsx\";\r\n \t\t\t// find the export template\r\n \t\t\ttry {\r\n-\t\t\t\tInputStream is = null;\r\n+\t\t\t\tInputStream iStream = null;\r\n \t\t\t\tif (useDefaultTemplate) {\r\n-\t\t\t\t\tis = Activator.getResourceContentAsString(defaultTemplatePath);\r\n+\t\t\t\t\tiStream = Activator.getResourceContentAsString(defaultTemplatePath);\r\n \t\t\t\t} else {\r\n-\t\t\t\t\tis = new FileInputStream(templatePath);\r\n+\t\t\t\t\tiStream = new FileInputStream(templatePath);\r\n \t\t\t\t}\r\n-\t\t\t\twb = new XSSFWorkbook(is);\r\n-\t\t\t} catch (IOException e) {\r\n-\t\t\t\tStatus status = new Status(Status.ERROR, Activator.getPluginId(), \"Failed to find the Template!\", e);\r\n-\t\t\t\tActivator.getDefault().getLog().log(status);\r\n-\t\t\t}\r\n-\t\t\t\r\n-\t\t\texportData(ca);\r\n-\t\t\tString newPath = path + \"/\" + ca.getFullQualifiedInstanceName() + \".xlsx\";\r\n-\t\t\t// and write the results\t\r\n-\t\t\tFile file = new File(newPath);\r\n-\t\t\ttry {\r\n+\t\t\t\thelper.setWb(new XSSFWorkbook(iStream));\r\n+\t\t\t\texportData(ca);\r\n+\t\t\t\tString newPath = path + \"/\" + ca.getFullQualifiedInstanceName() + \".xlsx\";\r\n+\t\t\t\t// and write the results\r\n+\t\t\t\tFile file = new File(newPath);\r\n+\t\t\t\t// find the export destination\r\n \t\t\t\tFileOutputStream out = new FileOutputStream(file);\r\n-\t\t\t\twb.write(out);\r\n+\t\t\t\thelper.getWb().write(out);\r\n \t\t\t} catch (IOException e) {\r\n-\t\t\t\tStatus status = new Status(Status.ERROR, Activator.getPluginId(), \"Failed to perform an export operation!\", e);\r\n+\t\t\t\tStatus status = new Status(Status.ERROR, Activator.getPluginId(), \"Failed to perform an export operation! \\n\" + e.getMessage(), e);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338b0c067f7263e7c471977ec0896f19d8aea2f7"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 677, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}