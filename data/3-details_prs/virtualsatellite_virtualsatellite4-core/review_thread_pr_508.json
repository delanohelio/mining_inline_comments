{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzkyODgy", "number": 508, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo0NTo0MFrODy7hKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozODoyN1rOD0nADw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzMwNTM5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/ServerRoles.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo0NTo0MFrOGHQ_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzo1MDozNFrOGIHpKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTY5MA==", "bodyText": "Shall we change it to an enum?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410271690", "createdAt": "2020-04-17T14:45:40Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/ServerRoles.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+public class ServerRoles {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NzAxNg==", "bodyText": "I am not sure. Let's talk about this.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411167016", "createdAt": "2020-04-20T07:50:34Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/ServerRoles.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+public class ServerRoles {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTY5MA=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzM2ODIwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowMjowOVrOGHRovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowMjowOVrOGHRovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4MjE3Mw==", "bodyText": "Redundant empty constructor (just mentioning)", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410282173", "createdAt": "2020-04-17T15:02:09Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -29,6 +37,8 @@ public VirSatJettyServer() {\n \t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzM5OTA3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTowOTo1OFrOGHR7xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoyNTo1MlrOGIGyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NzA0Ng==", "bodyText": "Let's move this to the LoginServiceFactory", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410287046", "createdAt": "2020-04-17T15:09:58Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r\n+\t\t\tsetUpServer();\r\n+\t\t}\r\n \t\t\r\n+\t\tserver.start();\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to setup the server\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void setUpServer() throws IOException {\r\n \t\tserver = new Server(VIRSAT_JETTY_PORT);\r\n \r\n \t\tServletContextHandler servletContextHandler = new ServletContextHandler(NO_SESSIONS);\r\n \t\tservletContextHandler.setContextPath(\"/\");\r\n \t\tservletContextHandler.addServlet(VirSatModelAccessServlet.class, \"/rest/*\");\r\n \t\tservletContextHandler.addServlet(RepoManagementServlet.class, \"/rest/management/*\");\r\n+\t\t\r\n+\t\tsetupSecurity(server, servletContextHandler);\r\n+\t\tisSetup = true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Sets up the server security\r\n+\t * @param server the Server\r\n+\t * @param servletContextHandler the context handler to be handled by the security handler\r\n+\t * @throws IOException\r\n+\t */\r\n+\tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\r\n+\t\t\r\n+\t\tloginService = new LoginServiceFactory().getLoginService();\r\n+\t\t\r\n+\t\tif (loginService instanceof HashLoginService) {\r\n+\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\r\n+\t\t}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Mjk5Mg==", "bodyText": "Makes sense", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411152992", "createdAt": "2020-04-20T07:25:52Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r\n+\t\t\tsetUpServer();\r\n+\t\t}\r\n \t\t\r\n+\t\tserver.start();\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to setup the server\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void setUpServer() throws IOException {\r\n \t\tserver = new Server(VIRSAT_JETTY_PORT);\r\n \r\n \t\tServletContextHandler servletContextHandler = new ServletContextHandler(NO_SESSIONS);\r\n \t\tservletContextHandler.setContextPath(\"/\");\r\n \t\tservletContextHandler.addServlet(VirSatModelAccessServlet.class, \"/rest/*\");\r\n \t\tservletContextHandler.addServlet(RepoManagementServlet.class, \"/rest/management/*\");\r\n+\t\t\r\n+\t\tsetupSecurity(server, servletContextHandler);\r\n+\t\tisSetup = true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Sets up the server security\r\n+\t * @param server the Server\r\n+\t * @param servletContextHandler the context handler to be handled by the security handler\r\n+\t * @throws IOException\r\n+\t */\r\n+\tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\r\n+\t\t\r\n+\t\tloginService = new LoginServiceFactory().getLoginService();\r\n+\t\t\r\n+\t\tif (loginService instanceof HashLoginService) {\r\n+\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\r\n+\t\t}\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4NzA0Ng=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQwNzQ3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxMjowM1rOGHSBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxMjowM1rOGHSBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4ODM4NQ==", "bodyText": "Mixed tabs and spaces", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410288385", "createdAt": "2020-04-17T15:12:03Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r\n+\t\t\tsetUpServer();\r\n+\t\t}\r\n \t\t\r\n+\t\tserver.start();\r\n+\t\treturn this;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Call this method to setup the server\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void setUpServer() throws IOException {\r\n \t\tserver = new Server(VIRSAT_JETTY_PORT);\r\n \r\n \t\tServletContextHandler servletContextHandler = new ServletContextHandler(NO_SESSIONS);\r\n \t\tservletContextHandler.setContextPath(\"/\");\r\n \t\tservletContextHandler.addServlet(VirSatModelAccessServlet.class, \"/rest/*\");\r\n \t\tservletContextHandler.addServlet(RepoManagementServlet.class, \"/rest/management/*\");\r\n+\t\t\r\n+\t\tsetupSecurity(server, servletContextHandler);\r\n+\t\tisSetup = true;\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Sets up the server security\r\n+\t * @param server the Server\r\n+\t * @param servletContextHandler the context handler to be handled by the security handler\r\n+\t * @throws IOException\r\n+\t */\r\n+\tprivate void setupSecurity(Server server, ServletContextHandler servletContextHandler) throws IOException {\r\n+\t\t\r\n+\t\tloginService = new LoginServiceFactory().getLoginService();\r\n+\t\t\r\n+\t\tif (loginService instanceof HashLoginService) {\r\n+\t\t\t((HashLoginService) loginService).setConfig(Activator.getDefault().getAuthFilePathResolved());\r\n+\t\t}\r\n+\t\t\r\n+        server.addBean(loginService);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQzNjMzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxOTozOFrOGHSTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzo1NzoyMlrOGIH5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MzEzNg==", "bodyText": "Shall we maybe split it into two methods like init and start, and get rid of this flag?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410293136", "createdAt": "2020-04-17T15:19:38Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3MTEyMg==", "bodyText": "I am not sure. Let's talk about this.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411171122", "createdAt": "2020-04-20T07:57:22Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/jetty/VirSatJettyServer.java", "diffHunk": "@@ -49,19 +59,58 @@ public static void main(String[] args) {\n \t * @throws Exception\r\n \t * @throws InterruptedException\r\n \t */\r\n-\tpublic VirSatJettyServer start() throws Exception, InterruptedException {\r\n+\tpublic VirSatJettyServer start() throws Exception {\t\r\n+\t\tif (!isSetup) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5MzEzNg=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ0NTczOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyMjoxMFrOGHSZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozMTo0M1rOGIG_nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDcwMA==", "bodyText": "Shall we maybe use actiator error logging?\nAlso no need to have multiple catches if we just log the error", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410294700", "createdAt": "2020-04-17T15:22:10Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n+\t\t} catch (InstantiationException e) {\r\n+\t\t\te.printStackTrace();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NjM4Mw==", "bodyText": "Will be changed", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411156383", "createdAt": "2020-04-20T07:31:43Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n+\t\t} catch (InstantiationException e) {\r\n+\t\t\te.printStackTrace();\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDcwMA=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ1ODM5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyNToyM1rOGHShzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzowNjo1M1rOGIGK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5Njc4Mg==", "bodyText": "Let's write some comments in the file about its purpose and what properties should be there", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410296782", "createdAt": "2020-04-17T15:25:23Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -36,6 +36,7 @@\n \tprivate static final String CONFIG_FILE_CLI_PARAM = \"configFile\";\r\n \t// The configuration file path and its default value\r\n \tprivate String propertiesFilePath = \"resources/server.properties\";\r\n+\tprivate String authFilePath = \"resources/auth.properties\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0Mjg4NQ==", "bodyText": "Sure", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411142885", "createdAt": "2020-04-20T07:06:53Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -36,6 +36,7 @@\n \tprivate static final String CONFIG_FILE_CLI_PARAM = \"configFile\";\r\n \t// The configuration file path and its default value\r\n \tprivate String propertiesFilePath = \"resources/server.properties\";\r\n+\tprivate String authFilePath = \"resources/auth.properties\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5Njc4Mg=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ2NzUyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyNzozOFrOGHSnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzowOTowOVrOGIGPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODIwNg==", "bodyText": "What does it mean? I don't see anything related to CLI", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410298206", "createdAt": "2020-04-17T15:27:38Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -76,4 +77,14 @@ public String getPropertiesFilePath() {\n \t\treturn propertiesFilePath;\r\n \t}\r\n \t\r\n+\tpublic String getAuthFilePathResolved() throws IOException {\r\n+\t\treturn FileLocator.resolve(FileLocator.find(getBundle(), new Path(getAuthFilePath()))).toString();\r\n+\t}\r\n+\t\r\n+\tpublic String getAuthFilePath() {\r\n+\t\t// also provide this via cliManager\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0NDA1OQ==", "bodyText": "We will provide the path via the properties file.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411144059", "createdAt": "2020-04-20T07:09:09Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -76,4 +77,14 @@ public String getPropertiesFilePath() {\n \t\treturn propertiesFilePath;\r\n \t}\r\n \t\r\n+\tpublic String getAuthFilePathResolved() throws IOException {\r\n+\t\treturn FileLocator.resolve(FileLocator.find(getBundle(), new Path(getAuthFilePath()))).toString();\r\n+\t}\r\n+\t\r\n+\tpublic String getAuthFilePath() {\r\n+\t\t// also provide this via cliManager\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5ODIwNg=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ4NjgzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTozMjo1M1rOGHSz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoxMDo0MlrOGIGShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTQwMA==", "bodyText": "I suggest we extract this logic into a static method, and use it like getAuthHeader(USER_NO_REPO) instead of having this additional constant", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410301400", "createdAt": "2020-04-17T15:32:53Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java", "diffHunk": "@@ -36,6 +42,13 @@\n \tprivate static VirSatJettyServer server;\r\n \tprivate static final File WORKSPACE_ROOT = ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile();\r\n \t\r\n+\t// Test users\r\n+\tpublic static final String ADMIN = \"admin:password\";\r\n+\tpublic static final String USER_NO_REPO = \"user:password\";\r\n+\tpublic static final String USER_WITH_REPO = \"user2:password\";\r\n+\t\r\n+\tprotected static final String DEFAULT_AUTHORIZATION_HEADER = \"Basic \" + Base64.getEncoder().encodeToString(USER_NO_REPO.getBytes());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0NDgzOA==", "bodyText": "Sure", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411144838", "createdAt": "2020-04-20T07:10:42Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/test/AGitAndJettyServerTest.java", "diffHunk": "@@ -36,6 +42,13 @@\n \tprivate static VirSatJettyServer server;\r\n \tprivate static final File WORKSPACE_ROOT = ResourcesPlugin.getWorkspace().getRoot().getLocation().toFile();\r\n \t\r\n+\t// Test users\r\n+\tpublic static final String ADMIN = \"admin:password\";\r\n+\tpublic static final String USER_NO_REPO = \"user:password\";\r\n+\tpublic static final String USER_WITH_REPO = \"user2:password\";\r\n+\t\r\n+\tprotected static final String DEFAULT_AUTHORIZATION_HEADER = \"Basic \" + Base64.getEncoder().encodeToString(USER_NO_REPO.getBytes());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMwMTQwMA=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzU0MTI1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo0ODowMlrOGHTXXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo0ODowMlrOGHTXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMDQ5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Get's the repository from the contexts path\n          \n          \n            \n            \t * Gets the repository from the contexts path", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410310493", "createdAt": "2020-04-17T15:48:02Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Get's the repository from the contexts path\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzU1MzQzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNTo1MTowNVrOGHTfDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozNDozOFrOGIHFww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMjQ2Mw==", "bodyText": "Is it possible that request doesn't contain \"repository/\"? In this case it will return some rubbish", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410312463", "createdAt": "2020-04-17T15:51:05Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Get's the repository from the contexts path\r\n+\t * Expects a path formed like \"optional/repository/repositoryName/optional\"\r\n+\t * @param context\r\n+\t * @return repositoryName\r\n+\t */\r\n+\tprivate String getRepositoryName(ContainerRequestContext context) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Nzk1NQ==", "bodyText": "No this should be insured by the FilterBinding as you suggested", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411157955", "createdAt": "2020-04-20T07:34:38Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Get's the repository from the contexts path\r\n+\t * Expects a path formed like \"optional/repository/repositoryName/optional\"\r\n+\t * @param context\r\n+\t * @return repositoryName\r\n+\t */\r\n+\tprivate String getRepositoryName(ContainerRequestContext context) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMxMjQ2Mw=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzYxMjUxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjowNjo1NVrOGHUE_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzozMzo0M1rOGIHDyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMjE3NA==", "bodyText": "Okay for a temporary hack, but on the long run I think the check should be something like if query string contains \"/repository/\" or something like this, so when we add more resources that conform to this scheme, they will have filtering", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410322174", "createdAt": "2020-04-17T16:06:55Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import javax.ws.rs.container.DynamicFeature;\r\n+import javax.ws.rs.container.ResourceInfo;\r\n+import javax.ws.rs.core.FeatureContext;\r\n+\r\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\r\n+\r\n+/**\r\n+ * Binds the RepositoryFilter to specified classes and functions,\r\n+ * so the filter will only be used on those\r\n+ */\r\n+public class DynamicRepositoryFilterBinding implements DynamicFeature {\r\n+\r\n+\t@Override\r\n+\tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n+\t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzQ1MA==", "bodyText": "Yes that's what we should do.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411157450", "createdAt": "2020-04-20T07:33:43Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import javax.ws.rs.container.DynamicFeature;\r\n+import javax.ws.rs.container.ResourceInfo;\r\n+import javax.ws.rs.core.FeatureContext;\r\n+\r\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\r\n+\r\n+/**\r\n+ * Binds the RepositoryFilter to specified classes and functions,\r\n+ * so the filter will only be used on those\r\n+ */\r\n+public class DynamicRepositoryFilterBinding implements DynamicFeature {\r\n+\r\n+\t@Override\r\n+\tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n+\t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMyMjE3NA=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzY5MzIzOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjoyOTowNlrOGHU35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzoxNjo0NlrOGIGfEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNTIwNA==", "bodyText": "Why specify this? Tests pass without exception by default", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410335204", "createdAt": "2020-04-17T16:29:06Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/denied\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/denied, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/permitted\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/permitted, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse2, serverResponse2);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testHttpAuthorization() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Unauthorized response because of missing header\", expectedResponse, serverResponse);\r\n+\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of empty header\", expectedResponse, serverResponse2);\r\n+\t\t\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"username:password\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of not encoded header\", expectedResponse, serverResponse3);\r\n+\t\t\r\n+\t\tString encoded = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(\"unknown:password\".getBytes());\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encoded)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of unknown user\", expectedResponse, serverResponse4);\r\n+\t\t\r\n+\t\tString serverResponse5 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse5 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Correct server response: user correctly authenticated and authorized\", expectedResponse5, serverResponse5);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testServerRoles() {\r\n+\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"User can access user only ressource\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"User can't access admin only ressource\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse3 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Admin can access admin only ressource\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse4 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Admin can't access user only ressource\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\t/**\r\n+\t * Ignore repositories for now\r\n+\t */\r\n+\tpublic void testRepositoryAuthorization() {\r\n+\t\t\r\n+\t\tString encodedUserNoRepo = DEFAULT_AUTHORIZATION_HEADER;\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserNoRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=403, reason=Forbidden}}\");\r\n+\t\tassertEquals(\"This user can't access the repository\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString encodedUserWithRepo = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(USER_WITH_REPO.getBytes());\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse2 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse3 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"Admins can access all repositories\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\").path(\"/property\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse4 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo/property, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository property\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test(expected = Test.None.class /* No Exception expected */)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0ODA0OA==", "bodyText": "Will be removed", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411148048", "createdAt": "2020-04-20T07:16:46Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/denied\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/denied, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/permitted\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/permitted, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Server response is correct\", expectedResponse2, serverResponse2);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testHttpAuthorization() {\r\n+\t\t\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Unauthorized response because of missing header\", expectedResponse, serverResponse);\r\n+\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of empty header\", expectedResponse, serverResponse2);\r\n+\t\t\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, \"username:password\")\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of not encoded header\", expectedResponse, serverResponse3);\r\n+\t\t\r\n+\t\tString encoded = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(\"unknown:password\".getBytes());\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encoded)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tassertEquals(\"Unauthorized response because of unknown user\", expectedResponse, serverResponse4);\r\n+\t\t\r\n+\t\tString serverResponse5 = webTarget.path(\"/auth\").path(\"/all_users\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse5 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/all_users, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Correct server response: user correctly authenticated and authorized\", expectedResponse5, serverResponse5);\r\n+\t}\r\n+\r\n+\t@Test\r\n+\tpublic void testServerRoles() {\r\n+\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"User can access user only ressource\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, DEFAULT_AUTHORIZATION_HEADER)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse2 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"User can't access admin only ressource\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/admin_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse3 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/admin_only, status=200, reason=OK}}\";\r\n+\t\tassertEquals(\"Admin can access admin only ressource\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/user_only\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse4 = \"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/user_only, status=403, reason=Forbidden}}\";\r\n+\t\tassertEquals(\"Admin can't access user only ressource\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\t/**\r\n+\t * Ignore repositories for now\r\n+\t */\r\n+\tpublic void testRepositoryAuthorization() {\r\n+\t\t\r\n+\t\tString encodedUserNoRepo = DEFAULT_AUTHORIZATION_HEADER;\r\n+\t\tString serverResponse = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserNoRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\r\n+\t\tString expectedResponse = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=403, reason=Forbidden}}\");\r\n+\t\tassertEquals(\"This user can't access the repository\", expectedResponse, serverResponse);\r\n+\t\t\r\n+\t\tString encodedUserWithRepo = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(USER_WITH_REPO.getBytes());\r\n+\t\tString serverResponse2 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse2 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository\", expectedResponse2, serverResponse2);\r\n+\t\t\r\n+\t\tString encodedAdmin = BASIC_SCHEME + \" \" + Base64.getEncoder().encodeToString(ADMIN.getBytes());\r\n+\t\tString serverResponse3 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedAdmin)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse3 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"Admins can access all repositories\", expectedResponse3, serverResponse3);\r\n+\t\t\r\n+\t\tString serverResponse4 = webTarget.path(\"/auth\").path(\"/repository\").path(\"/testRepo\").path(\"/property\")\r\n+\t\t\t\t.request()\r\n+\t\t\t\t.header(HttpHeaders.AUTHORIZATION, encodedUserWithRepo)\r\n+\t\t\t\t.get()\r\n+\t\t\t\t.toString();\t\t\t\r\n+\t\tString expectedResponse4 = (\"InboundJaxrsResponse{context=ClientResponse{method=GET, uri=http://localhost:8000/rest/auth/repository/testRepo/property, status=200, reason=OK}}\");\r\n+\t\tassertEquals(\"This user can access the repository property\", expectedResponse4, serverResponse4);\r\n+\t}\r\n+\t\r\n+\t@Test(expected = Test.None.class /* No Exception expected */)\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNTIwNA=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzY5OTMyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjozMDozNFrOGHU7kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzo0NToyNFrOGIHdug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNjE0Ng==", "bodyText": "This class could use some refactoring to eliminate duplicated code.\nIf you are interested in the accessibility, you can just check response status instead of the whole response.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r410336146", "createdAt": "2020-04-17T16:30:34Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2NDA5MA==", "bodyText": "I think we want to remove this resource after we added authentication to the real resources. So I would improve the new testcases then.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411164090", "createdAt": "2020-04-20T07:45:24Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/resources/AuthTestResourceTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Base64;\r\n+\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.server.test.AGitAndJettyServerTest;\r\n+\r\n+public class AuthTestResourceTest extends AGitAndJettyServerTest {\r\n+\t\r\n+\tprivate static final String BASIC_SCHEME = \"Basic\";\r\n+\t\r\n+\t@Test\r\n+\tpublic void testAuthentication() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzNjE0Ng=="}, "originalCommit": {"oid": "9637c65e9cd8c5273612a3997943233659bbbb5c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzIxNTg4OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1NzoyM1rOGIjBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1NzoyM1rOGIjBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxNTY0MQ==", "bodyText": "Let's maybe assert that this is our temporary file?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411615641", "createdAt": "2020-04-20T18:57:23Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/auth/LoginServiceFactoryTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.server.auth;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.eclipse.jetty.security.HashLoginService;\n+import org.eclipse.jetty.security.LoginService;\n+import org.eclipse.jetty.util.resource.Resource;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.commons.file.VirSatFileUtils;\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\n+\n+public class LoginServiceFactoryTest {\n+\n+\t@Test\n+\tpublic void testInvalidClassInConfiguration() {\n+\t\tServerConfiguration.setLoginServiceClass(\"invalid\");\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\t\n+\t\tassertNull(\"No longin service created\", fac.getLoginService());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testHashLoginServiceDefault() throws IOException {\n+\t\t// Test default values\n+\t\tServerConfiguration.setLoginServiceClass(\"org.eclipse.jetty.security.HashLoginService\");\n+\t\tServerConfiguration.setAuthPropertiesFile(\"resources/auth.properties\");\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\tLoginService service = fac.getLoginService();\n+\t\t\n+\t\tassertThat(\"HashLoginService got returned\", service, instanceOf(HashLoginService.class));\n+\t\tResource configResource = Resource.newResource(((HashLoginService) service).getConfig());\n+\t\tassertNotNull(\"Config file is valid\", configResource.getFile() != null);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testHashLoginServiceCustomFile() throws IOException {\n+\t\t// Test custom file\n+\t\tPath customDir = VirSatFileUtils.createAutoDeleteTempDirectory(\"loginServiceTest_\");\n+\t\tPath customFile = customDir.resolve(\"customFile\");\n+\t\tcustomFile.toFile().createNewFile();\n+\t\t\n+\t\tServerConfiguration.setLoginServiceClass(\"org.eclipse.jetty.security.HashLoginService\");\n+\t\tServerConfiguration.setAuthPropertiesFile(customFile.toString());\n+\t\tLoginServiceFactory fac = new LoginServiceFactory();\n+\t\tLoginService service = fac.getLoginService();\n+\t\t\n+\t\tassertThat(\"HashLoginService got returned\", service, instanceOf(HashLoginService.class));\n+\t\tResource configResource = Resource.newResource(((HashLoginService) service).getConfig());\n+\t\tassertNotNull(\"Config file is valid\", configResource.getFile() != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6a21572810b3c8e989f866429b805ac9118d75"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM2NjUxOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowMjoyNFrOGI11IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowMjoyNFrOGI11IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyMzc0NQ==", "bodyText": "I think Activator doesn't need to know about individual properties. I suggest we create a generic method like resolveBundlePath, and use it whenever we want to get something from bundle resources", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411923745", "createdAt": "2020-04-21T07:02:24Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/Activator.java", "diffHunk": "@@ -82,9 +81,8 @@ public String getAuthFilePathResolved() throws IOException {\n \t}\r\n \t\r\n \tpublic String getAuthFilePath() {\r\n-\t\t// also provide this via cliManager\r\n \t\t// this is an empty file by default\r\n-\t\treturn authFilePath;\r\n+\t\treturn ServerConfiguration.getAuthPropertiesFile();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6a21572810b3c8e989f866429b805ac9118d75"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTM4MjgyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNjoyNVrOGI1-AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzowNjoyNVrOGI1-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkyNjAxNg==", "bodyText": "Let's ask ServerConfiguration directly for this value, and if file doesn't exist, try to resolve it via Activator.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r411926016", "createdAt": "2020-04-21T07:06:25Z", "author": {"login": "andriikovalov-dlr"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -25,15 +32,39 @@ public LoginService getLoginService() {\n \t\t\r\n \t\ttry {\r\n \t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n-\t\t} catch (InstantiationException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t} catch (IllegalAccessException e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\te.printStackTrace();\r\n+\t\t} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Couldn't create instance for \" + ServerConfiguration.getLoginServiceClass(), e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (service instanceof HashLoginService) {\r\n+\t\t\t\r\n+\t\t\tString filePath = null;\r\n+\t\t\t\r\n+\t\t\t// Check if the file exists, else try to resolve it in the bundle\r\n+\t\t\tif (new File((Activator.getDefault().getAuthFilePath())).exists()) {\r\n+\t\t\t\tfilePath = Activator.getDefault().getAuthFilePath();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad6a21572810b3c8e989f866429b805ac9118d75"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg0NDQyOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server.test/META-INF/MANIFEST.MF", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyMjowOVrOGJnUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyMjowOVrOGJnUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNDYzMw==", "bodyText": "Usually we do not add version numbers here.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412734633", "createdAt": "2020-04-22T07:22:09Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server.test/META-INF/MANIFEST.MF", "diffHunk": "@@ -14,4 +14,5 @@ Require-Bundle: de.dlr.sc.virsat.team,\n Export-Package: de.dlr.sc.virsat.server.test\r\n Automatic-Module-Name: de.dlr.sc.virsat.server.test\r\n Import-Package: de.dlr.sc.virsat.project.test,\r\n- de.dlr.sc.virsat.team.test\r\n+ de.dlr.sc.virsat.team.test,\r\n+ org.eclipse.jetty.security;version=\"9.4.18\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg2MjU5OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyNjoxMFrOGJne5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyNjoxMFrOGJne5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNzI1Mg==", "bodyText": "Write some documentation to explain the use/purpose of this class.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412737252", "createdAt": "2020-04-22T07:26:10Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg3NzIwOnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/servlet/VirSatModelAccessServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOToyMVrOGJnnMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyOToyMVrOGJnnMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczOTM3Nw==", "bodyText": "A TestResource should not be registered here in the non test code. The AuthTestResource should somehow be injected from the test and only be available when testing.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412739377", "createdAt": "2020-04-22T07:29:21Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/servlet/VirSatModelAccessServlet.java", "diffHunk": "@@ -31,9 +34,20 @@ protected Servlet onCreateServlet() {\n \t}\r\n \r\n \tprivate static class ModelAccessRestApplication extends ResourceConfig {\r\n+\t\t/**\r\n+\t\t * Registers all relevant Classes: Resources, Filter and Bindings\r\n+\t\t */\r\n \t\tprivate ModelAccessRestApplication() {\r\n+\t\t\t// Resources\r\n \t\t\tregister(AccessTestResource.class);\r\n \t\t\tregister(WorkspaceAccessResource.class);\r\n+\t\t\tregister(AuthTestResource.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg4MzQ2OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozMDo0OVrOGJnqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0OTowOFrOGLNWzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg==", "bodyText": "This resource is only used for testing, thus it should be in the test plugin. Or is it intended for admins and user to test with a running productive server instance if there credentials are well setup?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412740302", "createdAt": "2020-04-22T07:30:49Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import javax.annotation.security.DenyAll;\r\n+import javax.annotation.security.PermitAll;\r\n+import javax.annotation.security.RolesAllowed;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+@Path(\"/auth\")\r\n+public class AuthTestResource {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MDY3Ng==", "bodyText": "You are right the intention behind this resource was just to have a resource to test with. I don't think we need an extra resource for this in production, because failed authentication returns the distinct \"forbidden\" http status.\nI am not sure if we should include this resource via DI, because we would then also have to adjust the dynamic repository binding in some way to also register that test resource. I actually wanted to delete this resource once we have the actual resources and test authentication there. But I am not sure, so do you still think DI is the right thing to do here?", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r414370676", "createdAt": "2020-04-24T07:52:08Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import javax.annotation.security.DenyAll;\r\n+import javax.annotation.security.PermitAll;\r\n+import javax.annotation.security.RolesAllowed;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+@Path(\"/auth\")\r\n+public class AuthTestResource {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg=="}, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNjM1MA==", "bodyText": "This resource will be removed once we have the actual resources where we test authentication.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r414406350", "createdAt": "2020-04-24T08:49:08Z", "author": {"login": "JAmmermann-DLR"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/AuthTestResource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import javax.annotation.security.DenyAll;\r\n+import javax.annotation.security.PermitAll;\r\n+import javax.annotation.security.RolesAllowed;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.Path;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+@Path(\"/auth\")\r\n+public class AuthTestResource {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MDMwMg=="}, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg5Mjk3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozMzowNlrOGJnwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozMzowNlrOGJnwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MTc1Nw==", "bodyText": "Strings such as \"repository/\" should be stored somewhere as a public final static string so there are not text constants duplicated which will create unnecessary effort when changing.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412741757", "createdAt": "2020-04-22T07:33:06Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/RepositoryFilter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import java.io.IOException;\r\n+\r\n+import javax.annotation.Priority;\r\n+import javax.ws.rs.Priorities;\r\n+import javax.ws.rs.container.ContainerRequestContext;\r\n+import javax.ws.rs.container.ContainerRequestFilter;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.SecurityContext;\r\n+\r\n+import de.dlr.sc.virsat.server.auth.ServerRoles;\r\n+\r\n+/**\r\n+ * This filter checks if a user has access to the wanted repository resource.\r\n+ */\r\n+@Priority(Priorities.AUTHORIZATION)\r\n+public class RepositoryFilter implements ContainerRequestFilter {\r\n+\r\n+\t/**\r\n+\t * Uses the RepositorySecurityContext to check if the User can access the requested repository. \r\n+\t * Administrators can access all repositories.\r\n+\t */\r\n+\t@Override\r\n+\tpublic void filter(ContainerRequestContext context) throws IOException {\r\n+\r\n+\t\tSecurityContext sc = context.getSecurityContext();\r\n+\r\n+\t\t// Administrators have access to all repositories\r\n+\t\tif (!sc.isUserInRole(ServerRoles.ADMIN)) {\r\n+\t\t\tString repositoryName = getRepositoryName(context);\r\n+\t\t\t\r\n+\t\t\t// Repository access is granted if the user has a role named after the repository\r\n+\t\t\tif (!sc.isUserInRole(repositoryName)) {\r\n+\t\t\t\tcontext.abortWith(Response.status(Response.Status.FORBIDDEN).entity(\"Forbidden\").build());\r\n+\t\t\t}\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Gets the repository from the contexts path\r\n+\t * Expects a path formed like \"optional/repository/repositoryName/optional\"\r\n+\t * @param context\r\n+\t * @return repositoryName\r\n+\t */\r\n+\tprivate String getRepositoryName(ContainerRequestContext context) {\r\n+\t\tString repository = \"repository/\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDkwMDg0OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozNTowMFrOGJn1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozNTowMFrOGJn1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0Mjk0Ng==", "bodyText": "extract string into constant.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412742946", "createdAt": "2020-04-22T07:35:00Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/filter/DynamicRepositoryFilterBinding.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth.filter;\r\n+\r\n+import javax.ws.rs.container.DynamicFeature;\r\n+import javax.ws.rs.container.ResourceInfo;\r\n+import javax.ws.rs.core.FeatureContext;\r\n+\r\n+import de.dlr.sc.virsat.server.resources.AuthTestResource;\r\n+\r\n+/**\r\n+ * Binds the RepositoryFilter to specified classes and functions,\r\n+ * so the filter will only be used on those\r\n+ */\r\n+public class DynamicRepositoryFilterBinding implements DynamicFeature {\r\n+\r\n+\t@Override\r\n+\tpublic void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n+\t\tif (AuthTestResource.class.equals(resourceInfo.getResourceClass())\r\n+\t\t\t\t&& resourceInfo.getResourceMethod().getName().contains(\"Repository\")) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDkwMzg3OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozNTo0M1rOGJn28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozNTo0M1rOGJn28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MzQwOA==", "bodyText": "could maybe class it serviceClassName", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412743408", "createdAt": "2020-04-22T07:35:43Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDkxNTM1OnYy", "diffSide": "RIGHT", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozODoyN1rOGJn92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozODoyN1rOGJn92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTE3Ng==", "bodyText": "Isn't this block already implemented logic for the configuration area. If not we should change it. Wherever we access a config file, it should be the following procedure:\n\nCheck if there is already a file on the file system in the config area and load it.\nIf there is no file yet, try to load the file from the plugin resources as a default one\nIf none of this is succesful, throw a warning/exception etc.", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/508#discussion_r412745176", "createdAt": "2020-04-22T07:38:27Z", "author": {"login": "PhilMFischer"}, "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/auth/LoginServiceFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.auth;\r\n+\r\n+import java.io.File;\r\n+import java.io.IOException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.jetty.security.HashLoginService;\r\n+import org.eclipse.jetty.security.LoginService;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+\r\n+public class LoginServiceFactory {\r\n+\r\n+\t/**\r\n+\t * @return a concrete LoginService defined in the ServerConfiguration or null\r\n+\t * @throws IOException \r\n+\t */\r\n+\tpublic LoginService getLoginService() {\r\n+\t\tLoginService service = null;\r\n+\t\t\r\n+\t\tString serviceName = ServerConfiguration.getLoginServiceClass();\r\n+\t\t\r\n+\t\ttry {\r\n+\t\t\tservice = (LoginService) Class.forName(serviceName).newInstance();\r\n+\t\t} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\r\n+\t\t\tActivator.getDefault().getLog().log(new Status(Status.ERROR, Activator.getPluginId(), Status.ERROR, \"Couldn't create instance for \" + ServerConfiguration.getLoginServiceClass(), e));\r\n+\t\t}\r\n+\t\t\r\n+\t\tif (service instanceof HashLoginService) {\r\n+\t\t\t\r\n+\t\t\tString filePath = null;\r\n+\t\t\t\r\n+\t\t\t// Check if the file exists, else try to resolve it in the bundle\r\n+\t\t\tif (new File(ServerConfiguration.getAuthPropertiesFile()).exists()) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12e6dec22cf1b68053b82b646aeefb33efdd6e44"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 690, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}